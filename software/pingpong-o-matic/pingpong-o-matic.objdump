
pingpong-o-matic.elf:     file format elf32-littlenios2
pingpong-o-matic.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000112cc memsz 0x000112cc flags r-x
    LOAD off    0x000122ec vaddr 0x000312ec paddr 0x00032f00 align 2**12
         filesz 0x00001c14 memsz 0x00001c14 flags rw-
    LOAD off    0x00014b14 vaddr 0x00034b14 paddr 0x00034b14 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010b18  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005a4  00030d48  00030d48  00011d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c14  000312ec  00032f00  000122ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00034b14  00034b14  00014b14  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00034c74  00034c74  00013f00  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013f00  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f30  00000000  00000000  00013f28  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000241db  00000000  00000000  00014e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000931a  00000000  00000000  00039033  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bad5  00000000  00000000  0004234d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000022c0  00000000  00000000  0004de24  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003cd7  00000000  00000000  000500e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001786c  00000000  00000000  00053dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006b628  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018e8  00000000  00000000  0006b668  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000702b6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  000702b9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000702c3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000702c4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000702c5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000702c9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000702cd  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000702d1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000702da  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000702e3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  000702ec  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000031  00000000  00000000  000702f8  2**0
                  CONTENTS, READONLY
 29 .jdi          00004381  00000000  00000000  00070329  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00077366  00000000  00000000  000746aa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00030d48 l    d  .rodata	00000000 .rodata
000312ec l    d  .rwdata	00000000 .rwdata
00034b14 l    d  .bss	00000000 .bss
00034c74 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pingpong-o-matic_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00030dae l     O .rodata	00000010 zeroes.4404
00022b1c l     F .text	000000bc __sbprintf
00030dbe l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00022d2c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00024884 l     F .text	00000008 __fp_unlock
00024898 l     F .text	0000019c __sinit.part.1
00024a34 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000312ec l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00031730 l     O .rwdata	00000020 lc_ctype_charset
00031710 l     O .rwdata	00000020 lc_message_charset
00031750 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00030df0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00027f08 l     F .text	000000fc __sprint_r.part.0
00030f14 l     O .rodata	00000010 zeroes.4349
00029544 l     F .text	000000bc __sbprintf
00030f24 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002d564 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002d678 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002d6a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002d798 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002d880 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002d96c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002db48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00032ee8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0002ddec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002df28 l     F .text	00000034 alt_dev_reg
00031d38 l     O .rwdata	00001060 jtag_uart
00032d98 l     O .rwdata	00000120 lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002e21c l     F .text	0000020c altera_avalon_jtag_uart_irq
0002e428 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00032eec l     O .rwdata	00000004 colstart
0002ea60 l     F .text	000000b8 lcd_write_command
0002eb18 l     F .text	000000d8 lcd_write_data
0002ebf0 l     F .text	000000e8 lcd_clear_screen
0002ecd8 l     F .text	00000228 lcd_repaint_screen
0002ef00 l     F .text	000000e8 lcd_scroll_up
0002efe8 l     F .text	000002c4 lcd_handle_escape
0002f7cc l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002fcb0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00030110 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00030270 l     F .text	0000003c alt_get_errno
000302ac l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0003116c l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00034b48 g     O .bss	00000004 alt_instruction_exception_handler
0002754c g     F .text	00000074 _mprec_log10
00027638 g     F .text	0000008c __any_on
00029af8 g     F .text	00000054 _isatty_r
00030dfc g     O .rodata	00000028 __mprec_tinytens
0002da84 g     F .text	0000007c alt_main
000206b8 g     F .text	000000c0 _puts_r
00034b74 g     O .bss	00000100 alt_irq
00029b4c g     F .text	00000060 _lseek_r
00032f00 g       *ABS*	00000000 __flash_rwdata_start
0002bf3c g     F .text	00000088 .hidden __eqdf2
00034c74 g       *ABS*	00000000 __alt_heap_start
0002067c g     F .text	0000003c printf
00029d64 g     F .text	0000009c _wcrtomb_r
00027dc8 g     F .text	0000005c __sseek
00024be4 g     F .text	00000010 __sinit
00029c0c g     F .text	00000140 __swbuf_r
000256b8 g     F .text	0000007c _setlocale_r
00024a3c g     F .text	00000078 __sfmoreglue
0002db24 g     F .text	00000024 __malloc_unlock
00026388 g     F .text	0000015c memmove
00024bcc g     F .text	00000018 _cleanup
0002660c g     F .text	000000a8 _Balloc
0002bfc4 g     F .text	000000dc .hidden __gtdf2
00030698 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00029a9c g     F .text	0000005c _fstat_r
00034b2c g     O .bss	00000004 errno
00027d44 g     F .text	00000008 __seofread
00034b34 g     O .bss	00000004 alt_argv
0003aeb8 g       *ABS*	00000000 _gp
0002ddbc g     F .text	00000030 usleep
00031bb8 g     O .rwdata	00000180 alt_fd_list
000306bc g     F .text	00000090 alt_find_dev
00026240 g     F .text	00000148 memcpy
0002488c g     F .text	0000000c _cleanup_r
0002d37c g     F .text	000000dc .hidden __floatsidf
000301f4 g     F .text	0000007c alt_io_redirect
0002c0a0 g     F .text	000000f4 .hidden __ltdf2
00030d48 g       *ABS*	00000000 __DTOR_END__
00020778 g     F .text	00000014 puts
00030918 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00027c28 g     F .text	00000074 __fpclassifyd
000274a8 g     F .text	000000a4 __ratio
00029528 g     F .text	0000001c __vfiprintf_internal
0002e620 g     F .text	0000021c altera_avalon_jtag_uart_read
0002064c g     F .text	00000030 _printf_r
0002ac04 g     F .text	00000064 .hidden __udivsi3
0002d7d4 g     F .text	000000ac isatty
00030e4c g     O .rodata	000000c8 __mprec_tens
00025734 g     F .text	0000000c __locale_charset
00034b28 g     O .bss	00000004 __malloc_top_pad
00032ec0 g     O .rwdata	00000004 __mb_cur_max
00025764 g     F .text	0000000c _localeconv_r
00026a40 g     F .text	0000003c __i2b
00025068 g     F .text	000004c8 __sfvwrite_r
00027c9c g     F .text	00000054 _sbrk_r
00029bac g     F .text	00000060 _read_r
00032ee0 g     O .rwdata	00000004 alt_max_fd
00029790 g     F .text	000000f0 _fclose_r
00024854 g     F .text	00000030 fflush
00034b24 g     O .bss	00000004 __malloc_max_sbrked_mem
0002acc0 g     F .text	000008ac .hidden __adddf3
00027250 g     F .text	0000010c __b2d
0002a548 g     F .text	000005c4 .hidden __umoddi3
0002d9a8 g     F .text	000000dc lseek
00032eb8 g     O .rwdata	00000004 _global_impure_ptr
000276c4 g     F .text	00000564 _realloc_r
00034c74 g       *ABS*	00000000 __bss_end
00030020 g     F .text	000000f0 alt_iic_isr_register
00030590 g     F .text	00000108 alt_tick
00029f4c g     F .text	000005fc .hidden __udivdi3
000299f8 g     F .text	00000024 _fputwc_r
00030e24 g     O .rodata	00000028 __mprec_bigtens
00026824 g     F .text	00000104 __s2b
0002d458 g     F .text	000000a8 .hidden __floatunsidf
00026f90 g     F .text	00000060 __mcmp
00024c04 g     F .text	00000018 __fp_lock_all
0002ffd4 g     F .text	0000004c alt_ic_irq_enabled
000304f4 g     F .text	0000009c alt_alarm_stop
00034b3c g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
00031b90 g     O .rwdata	00000028 alt_dev_null
0002fc90 g     F .text	00000020 alt_dcache_flush_all
00026928 g     F .text	00000068 __hi0bits
0002d2fc g     F .text	00000080 .hidden __fixdfsi
00032f00 g       *ABS*	00000000 __ram_rwdata_end
00032ed8 g     O .rwdata	00000008 alt_dev_list
0002de28 g     F .text	00000100 write
000312ec g       *ABS*	00000000 __ram_rodata_end
0002d6e0 g     F .text	000000b8 fstat
0002c0a0 g     F .text	000000f4 .hidden __ledf2
00026d08 g     F .text	00000140 __pow5mult
0002801c g     F .text	0000150c ___vfiprintf_internal_r
00034b1c g     O .bss	00000004 __nlocale_changed
0002ac68 g     F .text	00000058 .hidden __umodsi3
00034c74 g       *ABS*	00000000 end
0002f2ac g     F .text	00000520 altera_avalon_lcd_16207_write
0002e15c g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00030d48 g       *ABS*	00000000 __CTOR_LIST__
000386a0 g       *ABS*	00000000 __alt_stack_pointer
0002d500 g     F .text	00000064 .hidden __clzsi2
0002e83c g     F .text	00000224 altera_avalon_jtag_uart_write
00024bf4 g     F .text	00000004 __sfp_lock_acquire
0002615c g     F .text	000000e4 memchr
00020824 g     F .text	000022dc ___vfprintf_internal_r
00024d58 g     F .text	00000310 _free_r
00025740 g     F .text	00000010 __locale_mb_cur_max
00030b94 g     F .text	00000180 __call_exitprocs
00034b18 g     O .bss	00000004 __mlocale_changed
00032ec4 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
00034b40 g     O .bss	00000004 _alt_tick_rate
00026e48 g     F .text	00000148 __lshift
00034b44 g     O .bss	00000004 _alt_nticks
0002db84 g     F .text	00000104 read
0002df94 g     F .text	00000064 alt_sys_init
00030a7c g     F .text	00000118 __register_exitproc
00026a7c g     F .text	0000028c __multiply
0002e4c8 g     F .text	00000068 altera_avalon_jtag_uart_close
00020624 g     F .text	00000028 .hidden __mulsi3
000312ec g       *ABS*	00000000 __ram_rwdata_start
00030d48 g       *ABS*	00000000 __ram_rodata_start
00034b4c g     O .bss	00000028 __malloc_current_mallinfo
0002735c g     F .text	0000014c __d2b
0002dff8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00030854 g     F .text	000000c4 alt_get_fd
0002fb38 g     F .text	00000158 alt_busy_sleep
00029660 g     F .text	00000054 _close_r
00030a00 g     F .text	0000007c memcmp
0002e0b8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00034c74 g       *ABS*	00000000 __alt_stack_base
0002e108 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022bd8 g     F .text	00000154 __swsetup_r
0002b56c g     F .text	000009d0 .hidden __divdf3
00024ab4 g     F .text	00000118 __sfp
000275c0 g     F .text	00000078 __copybits
00031788 g     O .rwdata	00000408 __malloc_av_
00024c00 g     F .text	00000004 __sinit_lock_release
0002c194 g     F .text	0000086c .hidden __muldf3
00027cf0 g     F .text	00000054 __sread
0003074c g     F .text	00000108 alt_find_file
0002fcec g     F .text	000000a4 alt_dev_llist_insert
0002db00 g     F .text	00000024 __malloc_lock
0002dd0c g     F .text	000000b0 sbrk
000247f8 g     F .text	0000005c _fflush_r
000296b4 g     F .text	000000dc _calloc_r
00034b14 g       *ABS*	00000000 __bss_start
000264e4 g     F .text	00000128 memset
0002026c g     F .text	00000108 lcd_init
00020540 g     F .text	000000e4 main
00034b38 g     O .bss	00000004 alt_envp
00034b20 g     O .bss	00000004 __malloc_max_total_mem
0002e058 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00029d4c g     F .text	00000018 __swbuf
0002f878 g     F .text	00000134 altera_avalon_lcd_16207_init
00027e24 g     F .text	00000008 __sclose
000386a0 g       *ABS*	00000000 __alt_heap_limit
00029880 g     F .text	00000014 fclose
00022f54 g     F .text	00001688 _dtoa_r
00025950 g     F .text	0000080c _malloc_r
00029ec0 g     F .text	00000030 __ascii_wctomb
00032ee4 g     O .rwdata	00000004 alt_errno
00025530 g     F .text	000000c4 _fwalk
0002ab0c g     F .text	00000084 .hidden __divsi3
00024c34 g     F .text	00000124 _malloc_trim_r
00030d48 g       *ABS*	00000000 __CTOR_END__
00027e2c g     F .text	000000dc strcmp
00030d48 g       *ABS*	00000000 __flash_rodata_start
00020374 g     F .text	000001cc test_lcd
00030d48 g       *ABS*	00000000 __DTOR_LIST__
0002bf3c g     F .text	00000088 .hidden __nedf2
0002df5c g     F .text	00000038 alt_irq_init
0002dc88 g     F .text	00000084 alt_release_fd
00030f34 g     O .rodata	00000100 .hidden __clz_tab
00034b14 g     O .bss	00000004 _PathLocale
000309b4 g     F .text	00000014 atexit
00029600 g     F .text	00000060 _write_r
00025770 g     F .text	00000018 setlocale
00032ebc g     O .rwdata	00000004 _impure_ptr
00034b30 g     O .bss	00000004 alt_argc
000245dc g     F .text	0000021c __sflush_r
0002fdf0 g     F .text	00000060 _do_dtors
0002575c g     F .text	00000008 __locale_cjk_lang
00020020 g       .exceptions	00000000 alt_irq_entry
000271ec g     F .text	00000064 __ulp
00024c1c g     F .text	00000018 __fp_unlock_all
0002f9ac g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00032ed0 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00025788 g     F .text	0000000c localeconv
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0002fe70 g     F .text	00000050 alt_ic_isr_register
00032f00 g       *ABS*	00000000 _edata
00034c74 g       *ABS*	00000000 _end
00029894 g     F .text	00000164 __fputwc
00020230 g       *ABS*	00000000 __ram_exceptions_end
0002e530 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0002ff48 g     F .text	0000008c alt_ic_irq_disable
00027d4c g     F .text	0000007c __swrite
00032ec8 g     O .rwdata	00000004 __malloc_trim_threshold
00025750 g     F .text	0000000c __locale_msgcharset
000309c8 g     F .text	00000038 exit
000255f4 g     F .text	000000c4 _fwalk_reent
00026ff0 g     F .text	000001fc __mdiff
0002ab90 g     F .text	00000074 .hidden __modsi3
00032efc g     O .rwdata	00000004 __ctype_ptr__
000386a0 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00024bf8 g     F .text	00000004 __sfp_lock_release
0003106b g     O .rodata	00000101 _ctype_
00030d14 g     F .text	00000034 _exit
0002fa0c g     F .text	0000012c alt_alarm_start
00025794 g     F .text	000001bc __smakebuf_r
0002078c g     F .text	00000098 strlen
00030398 g     F .text	0000015c open
0002bfc4 g     F .text	000000dc .hidden __gedf2
00032ecc g     O .rwdata	00000004 __wctomb
00028004 g     F .text	00000018 __sprint_r
0002fe50 g     F .text	00000020 alt_icache_flush_all
00032ef0 g     O .rwdata	00000004 alt_priority_mask
0002fec0 g     F .text	00000088 alt_ic_irq_enable
00022b00 g     F .text	0000001c __vfprintf_internal
00029ef0 g     F .text	0000005c _wctomb_r
0002ca00 g     F .text	000008fc .hidden __subdf3
00026990 g     F .text	000000b0 __lo0bits
00032ef4 g     O .rwdata	00000008 alt_alarm_list
0002fd90 g     F .text	00000060 _do_ctors
00029e00 g     F .text	000000c0 wcrtomb
0002d5a0 g     F .text	000000d8 close
0002d8e8 g     F .text	00000084 alt_load
00029a1c g     F .text	00000080 fputwc
00024bfc g     F .text	00000004 __sinit_lock_acquire
000266dc g     F .text	00000148 __multadd
000266b4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	1092dd04 	addi	r2,r2,19316
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	1092dd04 	addi	r2,r2,19316
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <_gp+0xfffe5274>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <_gp+0xfffe5268>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a72417 	ldw	r2,-25456(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a72417 	ldw	r2,-25456(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
   20238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2023c:	d6abae14 	ori	gp,gp,44728
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20244:	1092c514 	ori	r2,r2,19220

    movhi r3, %hi(__bss_end)
   20248:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   2024c:	18d31d14 	ori	r3,r3,19572

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <_gp+0xfffe539c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	002d8e80 	call	2d8e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	002da840 	call	2da84 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <_gp+0xfffe53b0>

0002026c <lcd_init>:
#define LCD_WR_COMMAND_REG 0
#define LCD_RD_STATUS_REG 1
#define LCD_WR_DATA_REG 2
#define LCD_RD_DATA_REG 3

void lcd_init(void) {
   2026c:	defffe04 	addi	sp,sp,-8
   20270:	dfc00115 	stw	ra,4(sp)
   20274:	df000015 	stw	fp,0(sp)
   20278:	d839883a 	mov	fp,sp
	usleep(15000); /* Wait for more than 15 ms before init */
   2027c:	010ea604 	movi	r4,15000
   20280:	002ddbc0 	call	2ddbc <usleep>
	/* Set function code four times -- 8-bit, 2 line, 5x7 mode */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   20284:	00c00e04 	movi	r3,56
   20288:	00800134 	movhi	r2,4
   2028c:	10847404 	addi	r2,r2,4560
   20290:	10c00035 	stwio	r3,0(r2)
	usleep(4100); /* Wait for more than 4.1 ms */
   20294:	01040104 	movi	r4,4100
   20298:	002ddbc0 	call	2ddbc <usleep>
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   2029c:	00c00e04 	movi	r3,56
   202a0:	00800134 	movhi	r2,4
   202a4:	10847404 	addi	r2,r2,4560
   202a8:	10c00035 	stwio	r3,0(r2)
	usleep(100); /* Wait for more than 100 us */
   202ac:	01001904 	movi	r4,100
   202b0:	002ddbc0 	call	2ddbc <usleep>
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   202b4:	00c00e04 	movi	r3,56
   202b8:	00800134 	movhi	r2,4
   202bc:	10847404 	addi	r2,r2,4560
   202c0:	10c00035 	stwio	r3,0(r2)
	usleep(5000); /* Wait for more than 100 us */
   202c4:	0104e204 	movi	r4,5000
   202c8:	002ddbc0 	call	2ddbc <usleep>
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   202cc:	00c00e04 	movi	r3,56
   202d0:	00800134 	movhi	r2,4
   202d4:	10847404 	addi	r2,r2,4560
   202d8:	10c00035 	stwio	r3,0(r2)
	usleep(100); /* Wait for more than 100 us */
   202dc:	01001904 	movi	r4,100
   202e0:	002ddbc0 	call	2ddbc <usleep>

	/* Set Display to OFF*/
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x08);
   202e4:	00c00204 	movi	r3,8
   202e8:	00800134 	movhi	r2,4
   202ec:	10847404 	addi	r2,r2,4560
   202f0:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   202f4:	01001904 	movi	r4,100
   202f8:	002ddbc0 	call	2ddbc <usleep>

	/* Set Display to ON */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x0C);
   202fc:	00c00304 	movi	r3,12
   20300:	00800134 	movhi	r2,4
   20304:	10847404 	addi	r2,r2,4560
   20308:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   2030c:	01001904 	movi	r4,100
   20310:	002ddbc0 	call	2ddbc <usleep>

	/* Set Entry Mode -- Cursor increment, display doesn't shift */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x06);
   20314:	00c00184 	movi	r3,6
   20318:	00800134 	movhi	r2,4
   2031c:	10847404 	addi	r2,r2,4560
   20320:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   20324:	01001904 	movi	r4,100
   20328:	002ddbc0 	call	2ddbc <usleep>

	/* Set the Cursor to the home position */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x02);
   2032c:	00c00084 	movi	r3,2
   20330:	00800134 	movhi	r2,4
   20334:	10847404 	addi	r2,r2,4560
   20338:	10c00035 	stwio	r3,0(r2)
	usleep(2000);
   2033c:	0101f404 	movi	r4,2000
   20340:	002ddbc0 	call	2ddbc <usleep>

	/* Display clear */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x01);
   20344:	00c00044 	movi	r3,1
   20348:	00800134 	movhi	r2,4
   2034c:	10847404 	addi	r2,r2,4560
   20350:	10c00035 	stwio	r3,0(r2)
	usleep(2000);
   20354:	0101f404 	movi	r4,2000
   20358:	002ddbc0 	call	2ddbc <usleep>
}
   2035c:	0001883a 	nop
   20360:	e037883a 	mov	sp,fp
   20364:	dfc00117 	ldw	ra,4(sp)
   20368:	df000017 	ldw	fp,0(sp)
   2036c:	dec00204 	addi	sp,sp,8
   20370:	f800283a 	ret

00020374 <test_lcd>:

alt_u32 test_lcd(void) {
   20374:	defff504 	addi	sp,sp,-44
   20378:	dfc00a15 	stw	ra,40(sp)
   2037c:	df000915 	stw	fp,36(sp)
   20380:	df000904 	addi	fp,sp,36
	int i;
	char message[17] = "Hello World...  ";
   20384:	009b1b34 	movhi	r2,27756
   20388:	10995204 	addi	r2,r2,25928
   2038c:	e0bff815 	stw	r2,-32(fp)
   20390:	009bd5f4 	movhi	r2,28503
   20394:	10881bc4 	addi	r2,r2,8303
   20398:	e0bff915 	stw	r2,-28(fp)
   2039c:	008b9934 	movhi	r2,11876
   203a0:	109b1c84 	addi	r2,r2,27762
   203a4:	e0bffa15 	stw	r2,-24(fp)
   203a8:	00880834 	movhi	r2,8224
   203ac:	108b8b84 	addi	r2,r2,11822
   203b0:	e0bffb15 	stw	r2,-20(fp)
   203b4:	e03ffc05 	stb	zero,-16(fp)
	char done[15] = "Done! ";
   203b8:	00801104 	movi	r2,68
   203bc:	e0bffc45 	stb	r2,-15(fp)
   203c0:	00801bc4 	movi	r2,111
   203c4:	e0bffc85 	stb	r2,-14(fp)
   203c8:	00801b84 	movi	r2,110
   203cc:	e0bffcc5 	stb	r2,-13(fp)
   203d0:	00801944 	movi	r2,101
   203d4:	e0bffd05 	stb	r2,-12(fp)
   203d8:	00800844 	movi	r2,33
   203dc:	e0bffd45 	stb	r2,-11(fp)
   203e0:	00800804 	movi	r2,32
   203e4:	e0bffd85 	stb	r2,-10(fp)
   203e8:	e03ffdc5 	stb	zero,-9(fp)
   203ec:	e03ffe05 	stb	zero,-8(fp)
   203f0:	e03ffe45 	stb	zero,-7(fp)
   203f4:	e03ffe85 	stb	zero,-6(fp)
   203f8:	e03ffec5 	stb	zero,-5(fp)
   203fc:	e03fff05 	stb	zero,-4(fp)
   20400:	e03fff45 	stb	zero,-3(fp)
   20404:	e03fff85 	stb	zero,-2(fp)
   20408:	e03fffc5 	stb	zero,-1(fp)

	/* Write a simple message on the first line. */
	for (i = 0; i < 17; i++) {
   2040c:	e03ff715 	stw	zero,-36(fp)
   20410:	00000f06 	br	20450 <test_lcd+0xdc>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, message[i]);
   20414:	e0fff804 	addi	r3,fp,-32
   20418:	e0bff717 	ldw	r2,-36(fp)
   2041c:	1885883a 	add	r2,r3,r2
   20420:	10800003 	ldbu	r2,0(r2)
   20424:	10c03fcc 	andi	r3,r2,255
   20428:	18c0201c 	xori	r3,r3,128
   2042c:	18ffe004 	addi	r3,r3,-128
   20430:	00800134 	movhi	r2,4
   20434:	10847604 	addi	r2,r2,4568
   20438:	10c00035 	stwio	r3,0(r2)
		usleep(100);
   2043c:	01001904 	movi	r4,100
   20440:	002ddbc0 	call	2ddbc <usleep>
	int i;
	char message[17] = "Hello World...  ";
	char done[15] = "Done! ";

	/* Write a simple message on the first line. */
	for (i = 0; i < 17; i++) {
   20444:	e0bff717 	ldw	r2,-36(fp)
   20448:	10800044 	addi	r2,r2,1
   2044c:	e0bff715 	stw	r2,-36(fp)
   20450:	e0bff717 	ldw	r2,-36(fp)
   20454:	10800450 	cmplti	r2,r2,17
   20458:	103fee1e 	bne	r2,zero,20414 <_gp+0xfffe555c>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, message[i]);
		usleep(100);
	}
	/* Count along the bottom row */
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0xC0);
   2045c:	00c03004 	movi	r3,192
   20460:	00800134 	movhi	r2,4
   20464:	10847404 	addi	r2,r2,4560
   20468:	10c00035 	stwio	r3,0(r2)
	usleep(1000);
   2046c:	0100fa04 	movi	r4,1000
   20470:	002ddbc0 	call	2ddbc <usleep>

	/* Display Count */
	for (i = 0; i < 10; i++) {
   20474:	e03ff715 	stw	zero,-36(fp)
   20478:	00000e06 	br	204b4 <test_lcd+0x140>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, (char )(i + 0x30));
   2047c:	e0bff717 	ldw	r2,-36(fp)
   20480:	10800c04 	addi	r2,r2,48
   20484:	10c03fcc 	andi	r3,r2,255
   20488:	18c0201c 	xori	r3,r3,128
   2048c:	18ffe004 	addi	r3,r3,-128
   20490:	00800134 	movhi	r2,4
   20494:	10847604 	addi	r2,r2,4568
   20498:	10c00035 	stwio	r3,0(r2)
		usleep(100000); /* Wait 0.5 sec */
   2049c:	010000b4 	movhi	r4,2
   204a0:	2121a804 	addi	r4,r4,-31072
   204a4:	002ddbc0 	call	2ddbc <usleep>
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0xC0);
	usleep(1000);

	/* Display Count */
	for (i = 0; i < 10; i++) {
   204a8:	e0bff717 	ldw	r2,-36(fp)
   204ac:	10800044 	addi	r2,r2,1
   204b0:	e0bff715 	stw	r2,-36(fp)
   204b4:	e0bff717 	ldw	r2,-36(fp)
   204b8:	10800290 	cmplti	r2,r2,10
   204bc:	103fef1e 	bne	r2,zero,2047c <_gp+0xfffe55c4>
		usleep(100000); /* Wait 0.5 sec */
	}

	/* Write "Done!" message on first line. */
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x80);
   204c0:	00c02004 	movi	r3,128
   204c4:	00800134 	movhi	r2,4
   204c8:	10847404 	addi	r2,r2,4560
   204cc:	10c00035 	stwio	r3,0(r2)
	usleep(1000);
   204d0:	0100fa04 	movi	r4,1000
   204d4:	002ddbc0 	call	2ddbc <usleep>

	/* Write data */
	for (i = 0; i < 14; i++) {
   204d8:	e03ff715 	stw	zero,-36(fp)
   204dc:	00000f06 	br	2051c <test_lcd+0x1a8>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, done[i]);
   204e0:	e0fffc44 	addi	r3,fp,-15
   204e4:	e0bff717 	ldw	r2,-36(fp)
   204e8:	1885883a 	add	r2,r3,r2
   204ec:	10800003 	ldbu	r2,0(r2)
   204f0:	10c03fcc 	andi	r3,r2,255
   204f4:	18c0201c 	xori	r3,r3,128
   204f8:	18ffe004 	addi	r3,r3,-128
   204fc:	00800134 	movhi	r2,4
   20500:	10847604 	addi	r2,r2,4568
   20504:	10c00035 	stwio	r3,0(r2)
		usleep(100);
   20508:	01001904 	movi	r4,100
   2050c:	002ddbc0 	call	2ddbc <usleep>
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x80);
	usleep(1000);

	/* Write data */
	for (i = 0; i < 14; i++) {
   20510:	e0bff717 	ldw	r2,-36(fp)
   20514:	10800044 	addi	r2,r2,1
   20518:	e0bff715 	stw	r2,-36(fp)
   2051c:	e0bff717 	ldw	r2,-36(fp)
   20520:	10800390 	cmplti	r2,r2,14
   20524:	103fee1e 	bne	r2,zero,204e0 <_gp+0xfffe5628>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, done[i]);
		usleep(100);
	}
	return (0);
   20528:	0005883a 	mov	r2,zero
}
   2052c:	e037883a 	mov	sp,fp
   20530:	dfc00117 	ldw	ra,4(sp)
   20534:	df000017 	ldw	fp,0(sp)
   20538:	dec00204 	addi	sp,sp,8
   2053c:	f800283a 	ret

00020540 <main>:

int main() {
   20540:	defffc04 	addi	sp,sp,-16
   20544:	dfc00315 	stw	ra,12(sp)
   20548:	df000215 	stw	fp,8(sp)
   2054c:	df000204 	addi	fp,sp,8
	lcd_init();
   20550:	002026c0 	call	2026c <lcd_init>
	test_lcd();
   20554:	00203740 	call	20374 <test_lcd>

	printf("Starting camera capture...\n");
   20558:	010000f4 	movhi	r4,3
   2055c:	21035204 	addi	r4,r4,3400
   20560:	00207780 	call	20778 <puts>
//	int count = 0;
//	int count2 = 0;
//	int count3 = 0;

	//IOWR_ALTERA_AVALON_PIO_DATA(FRAMEBUFFER_CLK_BASE, 0);
	for(int x = 200; x < 250; x++)
   20564:	00803204 	movi	r2,200
   20568:	e0bffe15 	stw	r2,-8(fp)
   2056c:	00002906 	br	20614 <main+0xd4>
	{
		printf("%d\n",x);
   20570:	e17ffe17 	ldw	r5,-8(fp)
   20574:	010000f4 	movhi	r4,3
   20578:	21035904 	addi	r4,r4,3428
   2057c:	002067c0 	call	2067c <printf>
		for(int y = 200; y < 250; y++)
   20580:	00803204 	movi	r2,200
   20584:	e0bfff15 	stw	r2,-4(fp)
   20588:	00001c06 	br	205fc <main+0xbc>
		{
			IOWR_ALTERA_AVALON_PIO_DATA(FRAMEBUFFER_CLK_BASE, 0);
   2058c:	0007883a 	mov	r3,zero
   20590:	00800134 	movhi	r2,4
   20594:	10848404 	addi	r2,r2,4624
   20598:	10c00035 	stwio	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(FRAMEBUFFER_ADDR_BASE, x * y * 640);
   2059c:	e17fff17 	ldw	r5,-4(fp)
   205a0:	e13ffe17 	ldw	r4,-8(fp)
   205a4:	00206240 	call	20624 <__mulsi3>
   205a8:	0140a004 	movi	r5,640
   205ac:	1009883a 	mov	r4,r2
   205b0:	00206240 	call	20624 <__mulsi3>
   205b4:	1007883a 	mov	r3,r2
   205b8:	00800134 	movhi	r2,4
   205bc:	10848804 	addi	r2,r2,4640
   205c0:	10c00035 	stwio	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(FRAMEBUFFER_DATA_BASE, 0xFF00FF);
   205c4:	00c03ff4 	movhi	r3,255
   205c8:	18c03fc4 	addi	r3,r3,255
   205cc:	00800134 	movhi	r2,4
   205d0:	10848004 	addi	r2,r2,4608
   205d4:	10c00035 	stwio	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(FRAMEBUFFER_CLK_BASE, 1);
   205d8:	00c00044 	movi	r3,1
   205dc:	00800134 	movhi	r2,4
   205e0:	10848404 	addi	r2,r2,4624
   205e4:	10c00035 	stwio	r3,0(r2)
			usleep(10);
   205e8:	01000284 	movi	r4,10
   205ec:	002ddbc0 	call	2ddbc <usleep>

	//IOWR_ALTERA_AVALON_PIO_DATA(FRAMEBUFFER_CLK_BASE, 0);
	for(int x = 200; x < 250; x++)
	{
		printf("%d\n",x);
		for(int y = 200; y < 250; y++)
   205f0:	e0bfff17 	ldw	r2,-4(fp)
   205f4:	10800044 	addi	r2,r2,1
   205f8:	e0bfff15 	stw	r2,-4(fp)
   205fc:	e0bfff17 	ldw	r2,-4(fp)
   20600:	10803e90 	cmplti	r2,r2,250
   20604:	103fe11e 	bne	r2,zero,2058c <_gp+0xfffe56d4>
//	int count = 0;
//	int count2 = 0;
//	int count3 = 0;

	//IOWR_ALTERA_AVALON_PIO_DATA(FRAMEBUFFER_CLK_BASE, 0);
	for(int x = 200; x < 250; x++)
   20608:	e0bffe17 	ldw	r2,-8(fp)
   2060c:	10800044 	addi	r2,r2,1
   20610:	e0bffe15 	stw	r2,-8(fp)
   20614:	e0bffe17 	ldw	r2,-8(fp)
   20618:	10803e90 	cmplti	r2,r2,250
   2061c:	103fd41e 	bne	r2,zero,20570 <_gp+0xfffe56b8>
//		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_2_BASE, count2);
//
//		count3 = (count3 + 1) % 100;
//		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_0_BASE, count3);
//		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_1_BASE, 99 - count3);
	}
   20620:	003fff06 	br	20620 <_gp+0xfffe5768>

00020624 <__mulsi3>:
   20624:	0005883a 	mov	r2,zero
   20628:	20000726 	beq	r4,zero,20648 <__mulsi3+0x24>
   2062c:	20c0004c 	andi	r3,r4,1
   20630:	2008d07a 	srli	r4,r4,1
   20634:	18000126 	beq	r3,zero,2063c <__mulsi3+0x18>
   20638:	1145883a 	add	r2,r2,r5
   2063c:	294b883a 	add	r5,r5,r5
   20640:	203ffa1e 	bne	r4,zero,2062c <_gp+0xfffe5774>
   20644:	f800283a 	ret
   20648:	f800283a 	ret

0002064c <_printf_r>:
   2064c:	defffd04 	addi	sp,sp,-12
   20650:	2805883a 	mov	r2,r5
   20654:	dfc00015 	stw	ra,0(sp)
   20658:	d9800115 	stw	r6,4(sp)
   2065c:	d9c00215 	stw	r7,8(sp)
   20660:	21400217 	ldw	r5,8(r4)
   20664:	d9c00104 	addi	r7,sp,4
   20668:	100d883a 	mov	r6,r2
   2066c:	00208240 	call	20824 <___vfprintf_internal_r>
   20670:	dfc00017 	ldw	ra,0(sp)
   20674:	dec00304 	addi	sp,sp,12
   20678:	f800283a 	ret

0002067c <printf>:
   2067c:	defffc04 	addi	sp,sp,-16
   20680:	dfc00015 	stw	ra,0(sp)
   20684:	d9400115 	stw	r5,4(sp)
   20688:	d9800215 	stw	r6,8(sp)
   2068c:	d9c00315 	stw	r7,12(sp)
   20690:	008000f4 	movhi	r2,3
   20694:	108baf04 	addi	r2,r2,11964
   20698:	10800017 	ldw	r2,0(r2)
   2069c:	200b883a 	mov	r5,r4
   206a0:	d9800104 	addi	r6,sp,4
   206a4:	11000217 	ldw	r4,8(r2)
   206a8:	0022b000 	call	22b00 <__vfprintf_internal>
   206ac:	dfc00017 	ldw	ra,0(sp)
   206b0:	dec00404 	addi	sp,sp,16
   206b4:	f800283a 	ret

000206b8 <_puts_r>:
   206b8:	defff604 	addi	sp,sp,-40
   206bc:	dc000715 	stw	r16,28(sp)
   206c0:	2021883a 	mov	r16,r4
   206c4:	2809883a 	mov	r4,r5
   206c8:	dc400815 	stw	r17,32(sp)
   206cc:	dfc00915 	stw	ra,36(sp)
   206d0:	2823883a 	mov	r17,r5
   206d4:	002078c0 	call	2078c <strlen>
   206d8:	10c00044 	addi	r3,r2,1
   206dc:	d8800115 	stw	r2,4(sp)
   206e0:	008000f4 	movhi	r2,3
   206e4:	10835a04 	addi	r2,r2,3432
   206e8:	d8800215 	stw	r2,8(sp)
   206ec:	00800044 	movi	r2,1
   206f0:	d8800315 	stw	r2,12(sp)
   206f4:	00800084 	movi	r2,2
   206f8:	dc400015 	stw	r17,0(sp)
   206fc:	d8c00615 	stw	r3,24(sp)
   20700:	dec00415 	stw	sp,16(sp)
   20704:	d8800515 	stw	r2,20(sp)
   20708:	80000226 	beq	r16,zero,20714 <_puts_r+0x5c>
   2070c:	80800e17 	ldw	r2,56(r16)
   20710:	10001426 	beq	r2,zero,20764 <_puts_r+0xac>
   20714:	81400217 	ldw	r5,8(r16)
   20718:	2880030b 	ldhu	r2,12(r5)
   2071c:	10c8000c 	andi	r3,r2,8192
   20720:	1800061e 	bne	r3,zero,2073c <_puts_r+0x84>
   20724:	29001917 	ldw	r4,100(r5)
   20728:	00f7ffc4 	movi	r3,-8193
   2072c:	10880014 	ori	r2,r2,8192
   20730:	20c6703a 	and	r3,r4,r3
   20734:	2880030d 	sth	r2,12(r5)
   20738:	28c01915 	stw	r3,100(r5)
   2073c:	d9800404 	addi	r6,sp,16
   20740:	8009883a 	mov	r4,r16
   20744:	00250680 	call	25068 <__sfvwrite_r>
   20748:	1000091e 	bne	r2,zero,20770 <_puts_r+0xb8>
   2074c:	00800284 	movi	r2,10
   20750:	dfc00917 	ldw	ra,36(sp)
   20754:	dc400817 	ldw	r17,32(sp)
   20758:	dc000717 	ldw	r16,28(sp)
   2075c:	dec00a04 	addi	sp,sp,40
   20760:	f800283a 	ret
   20764:	8009883a 	mov	r4,r16
   20768:	0024be40 	call	24be4 <__sinit>
   2076c:	003fe906 	br	20714 <_gp+0xfffe585c>
   20770:	00bfffc4 	movi	r2,-1
   20774:	003ff606 	br	20750 <_gp+0xfffe5898>

00020778 <puts>:
   20778:	008000f4 	movhi	r2,3
   2077c:	108baf04 	addi	r2,r2,11964
   20780:	200b883a 	mov	r5,r4
   20784:	11000017 	ldw	r4,0(r2)
   20788:	00206b81 	jmpi	206b8 <_puts_r>

0002078c <strlen>:
   2078c:	208000cc 	andi	r2,r4,3
   20790:	10002026 	beq	r2,zero,20814 <strlen+0x88>
   20794:	20800007 	ldb	r2,0(r4)
   20798:	10002026 	beq	r2,zero,2081c <strlen+0x90>
   2079c:	2005883a 	mov	r2,r4
   207a0:	00000206 	br	207ac <strlen+0x20>
   207a4:	10c00007 	ldb	r3,0(r2)
   207a8:	18001826 	beq	r3,zero,2080c <strlen+0x80>
   207ac:	10800044 	addi	r2,r2,1
   207b0:	10c000cc 	andi	r3,r2,3
   207b4:	183ffb1e 	bne	r3,zero,207a4 <_gp+0xfffe58ec>
   207b8:	10c00017 	ldw	r3,0(r2)
   207bc:	01ffbff4 	movhi	r7,65279
   207c0:	39ffbfc4 	addi	r7,r7,-257
   207c4:	00ca303a 	nor	r5,zero,r3
   207c8:	01a02074 	movhi	r6,32897
   207cc:	19c7883a 	add	r3,r3,r7
   207d0:	31a02004 	addi	r6,r6,-32640
   207d4:	1946703a 	and	r3,r3,r5
   207d8:	1986703a 	and	r3,r3,r6
   207dc:	1800091e 	bne	r3,zero,20804 <strlen+0x78>
   207e0:	10800104 	addi	r2,r2,4
   207e4:	10c00017 	ldw	r3,0(r2)
   207e8:	19cb883a 	add	r5,r3,r7
   207ec:	00c6303a 	nor	r3,zero,r3
   207f0:	28c6703a 	and	r3,r5,r3
   207f4:	1986703a 	and	r3,r3,r6
   207f8:	183ff926 	beq	r3,zero,207e0 <_gp+0xfffe5928>
   207fc:	00000106 	br	20804 <strlen+0x78>
   20800:	10800044 	addi	r2,r2,1
   20804:	10c00007 	ldb	r3,0(r2)
   20808:	183ffd1e 	bne	r3,zero,20800 <_gp+0xfffe5948>
   2080c:	1105c83a 	sub	r2,r2,r4
   20810:	f800283a 	ret
   20814:	2005883a 	mov	r2,r4
   20818:	003fe706 	br	207b8 <_gp+0xfffe5900>
   2081c:	0005883a 	mov	r2,zero
   20820:	f800283a 	ret

00020824 <___vfprintf_internal_r>:
   20824:	deffb804 	addi	sp,sp,-288
   20828:	dfc04715 	stw	ra,284(sp)
   2082c:	ddc04515 	stw	r23,276(sp)
   20830:	dd404315 	stw	r21,268(sp)
   20834:	d9002d15 	stw	r4,180(sp)
   20838:	282f883a 	mov	r23,r5
   2083c:	302b883a 	mov	r21,r6
   20840:	d9c02e15 	stw	r7,184(sp)
   20844:	df004615 	stw	fp,280(sp)
   20848:	dd804415 	stw	r22,272(sp)
   2084c:	dd004215 	stw	r20,264(sp)
   20850:	dcc04115 	stw	r19,260(sp)
   20854:	dc804015 	stw	r18,256(sp)
   20858:	dc403f15 	stw	r17,252(sp)
   2085c:	dc003e15 	stw	r16,248(sp)
   20860:	00257640 	call	25764 <_localeconv_r>
   20864:	10800017 	ldw	r2,0(r2)
   20868:	1009883a 	mov	r4,r2
   2086c:	d8803415 	stw	r2,208(sp)
   20870:	002078c0 	call	2078c <strlen>
   20874:	d8803715 	stw	r2,220(sp)
   20878:	d8802d17 	ldw	r2,180(sp)
   2087c:	10000226 	beq	r2,zero,20888 <___vfprintf_internal_r+0x64>
   20880:	10800e17 	ldw	r2,56(r2)
   20884:	1000fb26 	beq	r2,zero,20c74 <___vfprintf_internal_r+0x450>
   20888:	b880030b 	ldhu	r2,12(r23)
   2088c:	10c8000c 	andi	r3,r2,8192
   20890:	1800061e 	bne	r3,zero,208ac <___vfprintf_internal_r+0x88>
   20894:	b9001917 	ldw	r4,100(r23)
   20898:	00f7ffc4 	movi	r3,-8193
   2089c:	10880014 	ori	r2,r2,8192
   208a0:	20c6703a 	and	r3,r4,r3
   208a4:	b880030d 	sth	r2,12(r23)
   208a8:	b8c01915 	stw	r3,100(r23)
   208ac:	10c0020c 	andi	r3,r2,8
   208b0:	1800c326 	beq	r3,zero,20bc0 <___vfprintf_internal_r+0x39c>
   208b4:	b8c00417 	ldw	r3,16(r23)
   208b8:	1800c126 	beq	r3,zero,20bc0 <___vfprintf_internal_r+0x39c>
   208bc:	1080068c 	andi	r2,r2,26
   208c0:	00c00284 	movi	r3,10
   208c4:	10c0c626 	beq	r2,r3,20be0 <___vfprintf_internal_r+0x3bc>
   208c8:	d8c00404 	addi	r3,sp,16
   208cc:	050000f4 	movhi	r20,3
   208d0:	d9001e04 	addi	r4,sp,120
   208d4:	a5036b84 	addi	r20,r20,3502
   208d8:	d8c01e15 	stw	r3,120(sp)
   208dc:	d8002015 	stw	zero,128(sp)
   208e0:	d8001f15 	stw	zero,124(sp)
   208e4:	d8003315 	stw	zero,204(sp)
   208e8:	d8003615 	stw	zero,216(sp)
   208ec:	d8003815 	stw	zero,224(sp)
   208f0:	1811883a 	mov	r8,r3
   208f4:	d8003915 	stw	zero,228(sp)
   208f8:	d8003a15 	stw	zero,232(sp)
   208fc:	d8002f15 	stw	zero,188(sp)
   20900:	d9002815 	stw	r4,160(sp)
   20904:	a8800007 	ldb	r2,0(r21)
   20908:	10028b26 	beq	r2,zero,21338 <___vfprintf_internal_r+0xb14>
   2090c:	00c00944 	movi	r3,37
   20910:	a823883a 	mov	r17,r21
   20914:	10c0021e 	bne	r2,r3,20920 <___vfprintf_internal_r+0xfc>
   20918:	00001406 	br	2096c <___vfprintf_internal_r+0x148>
   2091c:	10c00326 	beq	r2,r3,2092c <___vfprintf_internal_r+0x108>
   20920:	8c400044 	addi	r17,r17,1
   20924:	88800007 	ldb	r2,0(r17)
   20928:	103ffc1e 	bne	r2,zero,2091c <_gp+0xfffe5a64>
   2092c:	8d61c83a 	sub	r16,r17,r21
   20930:	80000e26 	beq	r16,zero,2096c <___vfprintf_internal_r+0x148>
   20934:	d8c02017 	ldw	r3,128(sp)
   20938:	d8801f17 	ldw	r2,124(sp)
   2093c:	45400015 	stw	r21,0(r8)
   20940:	1c07883a 	add	r3,r3,r16
   20944:	10800044 	addi	r2,r2,1
   20948:	d8c02015 	stw	r3,128(sp)
   2094c:	44000115 	stw	r16,4(r8)
   20950:	d8801f15 	stw	r2,124(sp)
   20954:	00c001c4 	movi	r3,7
   20958:	1880a916 	blt	r3,r2,20c00 <___vfprintf_internal_r+0x3dc>
   2095c:	42000204 	addi	r8,r8,8
   20960:	d9402f17 	ldw	r5,188(sp)
   20964:	2c0b883a 	add	r5,r5,r16
   20968:	d9402f15 	stw	r5,188(sp)
   2096c:	88800007 	ldb	r2,0(r17)
   20970:	1000aa26 	beq	r2,zero,20c1c <___vfprintf_internal_r+0x3f8>
   20974:	8d400044 	addi	r21,r17,1
   20978:	8c400047 	ldb	r17,1(r17)
   2097c:	0021883a 	mov	r16,zero
   20980:	00bfffc4 	movi	r2,-1
   20984:	0025883a 	mov	r18,zero
   20988:	dc002905 	stb	r16,164(sp)
   2098c:	d8002785 	stb	zero,158(sp)
   20990:	d8002b05 	stb	zero,172(sp)
   20994:	d8802a15 	stw	r2,168(sp)
   20998:	d8003115 	stw	zero,196(sp)
   2099c:	04c01604 	movi	r19,88
   209a0:	05800244 	movi	r22,9
   209a4:	9021883a 	mov	r16,r18
   209a8:	4039883a 	mov	fp,r8
   209ac:	ad400044 	addi	r21,r21,1
   209b0:	88bff804 	addi	r2,r17,-32
   209b4:	98833236 	bltu	r19,r2,21680 <___vfprintf_internal_r+0xe5c>
   209b8:	100490ba 	slli	r2,r2,2
   209bc:	00c000b4 	movhi	r3,2
   209c0:	18c27404 	addi	r3,r3,2512
   209c4:	10c5883a 	add	r2,r2,r3
   209c8:	10800017 	ldw	r2,0(r2)
   209cc:	1000683a 	jmp	r2
   209d0:	00021578 	rdprs	zero,zero,2133
   209d4:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   209d8:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   209dc:	00021598 	cmpnei	zero,zero,2134
   209e0:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   209e4:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   209e8:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   209ec:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   209f0:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   209f4:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   209f8:	00020c80 	call	20c8 <__alt_mem_onchip_memory2-0x1df38>
   209fc:	00021488 	cmpgei	zero,zero,2130
   20a00:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a04:	00020b44 	movi	zero,2093
   20a08:	00020ca4 	muli	zero,zero,2098
   20a0c:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a10:	00020cf4 	movhi	zero,2099
   20a14:	00020d00 	call	20d0 <__alt_mem_onchip_memory2-0x1df30>
   20a18:	00020d00 	call	20d0 <__alt_mem_onchip_memory2-0x1df30>
   20a1c:	00020d00 	call	20d0 <__alt_mem_onchip_memory2-0x1df30>
   20a20:	00020d00 	call	20d0 <__alt_mem_onchip_memory2-0x1df30>
   20a24:	00020d00 	call	20d0 <__alt_mem_onchip_memory2-0x1df30>
   20a28:	00020d00 	call	20d0 <__alt_mem_onchip_memory2-0x1df30>
   20a2c:	00020d00 	call	20d0 <__alt_mem_onchip_memory2-0x1df30>
   20a30:	00020d00 	call	20d0 <__alt_mem_onchip_memory2-0x1df30>
   20a34:	00020d00 	call	20d0 <__alt_mem_onchip_memory2-0x1df30>
   20a38:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a3c:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a40:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a44:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a48:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a4c:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a50:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a54:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a58:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a5c:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a60:	00020d3c 	xorhi	zero,zero,2100
   20a64:	00020e04 	movi	zero,2104
   20a68:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a6c:	00020e04 	movi	zero,2104
   20a70:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a74:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a78:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a7c:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a80:	00020eb0 	cmpltui	zero,zero,2106
   20a84:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a88:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a8c:	00020ebc 	xorhi	zero,zero,2106
   20a90:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a94:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a98:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20a9c:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20aa0:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20aa4:	00021340 	call	2134 <__alt_mem_onchip_memory2-0x1decc>
   20aa8:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20aac:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20ab0:	000213ac 	andhi	zero,zero,2126
   20ab4:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20ab8:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20abc:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20ac0:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20ac4:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20ac8:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20acc:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20ad0:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20ad4:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20ad8:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20adc:	00021624 	muli	zero,zero,2136
   20ae0:	000215a4 	muli	zero,zero,2134
   20ae4:	00020e04 	movi	zero,2104
   20ae8:	00020e04 	movi	zero,2104
   20aec:	00020e04 	movi	zero,2104
   20af0:	000215c4 	movi	zero,2135
   20af4:	000215a4 	muli	zero,zero,2134
   20af8:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20afc:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20b00:	000215d0 	cmplti	zero,zero,2135
   20b04:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20b08:	000215e4 	muli	zero,zero,2135
   20b0c:	00021468 	cmpgeui	zero,zero,2129
   20b10:	00020b50 	cmplti	zero,zero,2093
   20b14:	000214a0 	cmpeqi	zero,zero,2130
   20b18:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20b1c:	000214ac 	andhi	zero,zero,2130
   20b20:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20b24:	00021510 	cmplti	zero,zero,2132
   20b28:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20b2c:	00021680 	call	2168 <__alt_mem_onchip_memory2-0x1de98>
   20b30:	00021530 	cmpltui	zero,zero,2132
   20b34:	d8c03117 	ldw	r3,196(sp)
   20b38:	d8802e15 	stw	r2,184(sp)
   20b3c:	00c7c83a 	sub	r3,zero,r3
   20b40:	d8c03115 	stw	r3,196(sp)
   20b44:	84000114 	ori	r16,r16,4
   20b48:	ac400007 	ldb	r17,0(r21)
   20b4c:	003f9706 	br	209ac <_gp+0xfffe5af4>
   20b50:	00800c04 	movi	r2,48
   20b54:	d8802705 	stb	r2,156(sp)
   20b58:	00801e04 	movi	r2,120
   20b5c:	d8802745 	stb	r2,157(sp)
   20b60:	d9002a17 	ldw	r4,168(sp)
   20b64:	d8802e17 	ldw	r2,184(sp)
   20b68:	d8002785 	stb	zero,158(sp)
   20b6c:	e011883a 	mov	r8,fp
   20b70:	10c00104 	addi	r3,r2,4
   20b74:	14c00017 	ldw	r19,0(r2)
   20b78:	002d883a 	mov	r22,zero
   20b7c:	80800094 	ori	r2,r16,2
   20b80:	2002ca16 	blt	r4,zero,216ac <___vfprintf_internal_r+0xe88>
   20b84:	00bfdfc4 	movi	r2,-129
   20b88:	80a4703a 	and	r18,r16,r2
   20b8c:	d8c02e15 	stw	r3,184(sp)
   20b90:	94800094 	ori	r18,r18,2
   20b94:	9802b41e 	bne	r19,zero,21668 <___vfprintf_internal_r+0xe44>
   20b98:	014000f4 	movhi	r5,3
   20b9c:	29436404 	addi	r5,r5,3472
   20ba0:	d9403915 	stw	r5,228(sp)
   20ba4:	04401e04 	movi	r17,120
   20ba8:	d8802a17 	ldw	r2,168(sp)
   20bac:	0039883a 	mov	fp,zero
   20bb0:	1001fa26 	beq	r2,zero,2139c <___vfprintf_internal_r+0xb78>
   20bb4:	0027883a 	mov	r19,zero
   20bb8:	002d883a 	mov	r22,zero
   20bbc:	00021906 	br	21424 <___vfprintf_internal_r+0xc00>
   20bc0:	d9002d17 	ldw	r4,180(sp)
   20bc4:	b80b883a 	mov	r5,r23
   20bc8:	0022bd80 	call	22bd8 <__swsetup_r>
   20bcc:	1005dc1e 	bne	r2,zero,22340 <___vfprintf_internal_r+0x1b1c>
   20bd0:	b880030b 	ldhu	r2,12(r23)
   20bd4:	00c00284 	movi	r3,10
   20bd8:	1080068c 	andi	r2,r2,26
   20bdc:	10ff3a1e 	bne	r2,r3,208c8 <_gp+0xfffe5a10>
   20be0:	b880038f 	ldh	r2,14(r23)
   20be4:	103f3816 	blt	r2,zero,208c8 <_gp+0xfffe5a10>
   20be8:	d9c02e17 	ldw	r7,184(sp)
   20bec:	d9002d17 	ldw	r4,180(sp)
   20bf0:	a80d883a 	mov	r6,r21
   20bf4:	b80b883a 	mov	r5,r23
   20bf8:	0022b1c0 	call	22b1c <__sbprintf>
   20bfc:	00001106 	br	20c44 <___vfprintf_internal_r+0x420>
   20c00:	d9002d17 	ldw	r4,180(sp)
   20c04:	d9801e04 	addi	r6,sp,120
   20c08:	b80b883a 	mov	r5,r23
   20c0c:	00280040 	call	28004 <__sprint_r>
   20c10:	1000081e 	bne	r2,zero,20c34 <___vfprintf_internal_r+0x410>
   20c14:	da000404 	addi	r8,sp,16
   20c18:	003f5106 	br	20960 <_gp+0xfffe5aa8>
   20c1c:	d8802017 	ldw	r2,128(sp)
   20c20:	10000426 	beq	r2,zero,20c34 <___vfprintf_internal_r+0x410>
   20c24:	d9002d17 	ldw	r4,180(sp)
   20c28:	d9801e04 	addi	r6,sp,120
   20c2c:	b80b883a 	mov	r5,r23
   20c30:	00280040 	call	28004 <__sprint_r>
   20c34:	b880030b 	ldhu	r2,12(r23)
   20c38:	1080100c 	andi	r2,r2,64
   20c3c:	1005c01e 	bne	r2,zero,22340 <___vfprintf_internal_r+0x1b1c>
   20c40:	d8802f17 	ldw	r2,188(sp)
   20c44:	dfc04717 	ldw	ra,284(sp)
   20c48:	df004617 	ldw	fp,280(sp)
   20c4c:	ddc04517 	ldw	r23,276(sp)
   20c50:	dd804417 	ldw	r22,272(sp)
   20c54:	dd404317 	ldw	r21,268(sp)
   20c58:	dd004217 	ldw	r20,264(sp)
   20c5c:	dcc04117 	ldw	r19,260(sp)
   20c60:	dc804017 	ldw	r18,256(sp)
   20c64:	dc403f17 	ldw	r17,252(sp)
   20c68:	dc003e17 	ldw	r16,248(sp)
   20c6c:	dec04804 	addi	sp,sp,288
   20c70:	f800283a 	ret
   20c74:	d9002d17 	ldw	r4,180(sp)
   20c78:	0024be40 	call	24be4 <__sinit>
   20c7c:	003f0206 	br	20888 <_gp+0xfffe59d0>
   20c80:	d9002e17 	ldw	r4,184(sp)
   20c84:	d9402e17 	ldw	r5,184(sp)
   20c88:	21000017 	ldw	r4,0(r4)
   20c8c:	28800104 	addi	r2,r5,4
   20c90:	d9003115 	stw	r4,196(sp)
   20c94:	203fa716 	blt	r4,zero,20b34 <_gp+0xfffe5c7c>
   20c98:	d8802e15 	stw	r2,184(sp)
   20c9c:	ac400007 	ldb	r17,0(r21)
   20ca0:	003f4206 	br	209ac <_gp+0xfffe5af4>
   20ca4:	ac400007 	ldb	r17,0(r21)
   20ca8:	01000a84 	movi	r4,42
   20cac:	a8c00044 	addi	r3,r21,1
   20cb0:	89075826 	beq	r17,r4,22a14 <___vfprintf_internal_r+0x21f0>
   20cb4:	8cbff404 	addi	r18,r17,-48
   20cb8:	b486ae36 	bltu	r22,r18,22774 <___vfprintf_internal_r+0x1f50>
   20cbc:	0009883a 	mov	r4,zero
   20cc0:	1823883a 	mov	r17,r3
   20cc4:	01400284 	movi	r5,10
   20cc8:	00206240 	call	20624 <__mulsi3>
   20ccc:	88c00007 	ldb	r3,0(r17)
   20cd0:	1489883a 	add	r4,r2,r18
   20cd4:	8d400044 	addi	r21,r17,1
   20cd8:	1cbff404 	addi	r18,r3,-48
   20cdc:	a823883a 	mov	r17,r21
   20ce0:	b4bff82e 	bgeu	r22,r18,20cc4 <_gp+0xfffe5e0c>
   20ce4:	1823883a 	mov	r17,r3
   20ce8:	2005f616 	blt	r4,zero,224c4 <___vfprintf_internal_r+0x1ca0>
   20cec:	d9002a15 	stw	r4,168(sp)
   20cf0:	003f2f06 	br	209b0 <_gp+0xfffe5af8>
   20cf4:	84002014 	ori	r16,r16,128
   20cf8:	ac400007 	ldb	r17,0(r21)
   20cfc:	003f2b06 	br	209ac <_gp+0xfffe5af4>
   20d00:	8cbff404 	addi	r18,r17,-48
   20d04:	d8003115 	stw	zero,196(sp)
   20d08:	0009883a 	mov	r4,zero
   20d0c:	a823883a 	mov	r17,r21
   20d10:	01400284 	movi	r5,10
   20d14:	00206240 	call	20624 <__mulsi3>
   20d18:	88c00007 	ldb	r3,0(r17)
   20d1c:	9089883a 	add	r4,r18,r2
   20d20:	ad400044 	addi	r21,r21,1
   20d24:	1cbff404 	addi	r18,r3,-48
   20d28:	a823883a 	mov	r17,r21
   20d2c:	b4bff82e 	bgeu	r22,r18,20d10 <_gp+0xfffe5e58>
   20d30:	1823883a 	mov	r17,r3
   20d34:	d9003115 	stw	r4,196(sp)
   20d38:	003f1d06 	br	209b0 <_gp+0xfffe5af8>
   20d3c:	8025883a 	mov	r18,r16
   20d40:	dc002903 	ldbu	r16,164(sp)
   20d44:	e011883a 	mov	r8,fp
   20d48:	84003fcc 	andi	r16,r16,255
   20d4c:	8007531e 	bne	r16,zero,22a9c <___vfprintf_internal_r+0x2278>
   20d50:	94800414 	ori	r18,r18,16
   20d54:	9080080c 	andi	r2,r18,32
   20d58:	1003a326 	beq	r2,zero,21be8 <___vfprintf_internal_r+0x13c4>
   20d5c:	d9002e17 	ldw	r4,184(sp)
   20d60:	20800117 	ldw	r2,4(r4)
   20d64:	24c00017 	ldw	r19,0(r4)
   20d68:	21000204 	addi	r4,r4,8
   20d6c:	d9002e15 	stw	r4,184(sp)
   20d70:	102d883a 	mov	r22,r2
   20d74:	10047316 	blt	r2,zero,21f44 <___vfprintf_internal_r+0x1720>
   20d78:	d9002a17 	ldw	r4,168(sp)
   20d7c:	df002783 	ldbu	fp,158(sp)
   20d80:	2003e416 	blt	r4,zero,21d14 <___vfprintf_internal_r+0x14f0>
   20d84:	00ffdfc4 	movi	r3,-129
   20d88:	9d84b03a 	or	r2,r19,r22
   20d8c:	90e4703a 	and	r18,r18,r3
   20d90:	10018026 	beq	r2,zero,21394 <___vfprintf_internal_r+0xb70>
   20d94:	b003ab26 	beq	r22,zero,21c44 <___vfprintf_internal_r+0x1420>
   20d98:	dc402915 	stw	r17,164(sp)
   20d9c:	dc001e04 	addi	r16,sp,120
   20da0:	b023883a 	mov	r17,r22
   20da4:	402d883a 	mov	r22,r8
   20da8:	9809883a 	mov	r4,r19
   20dac:	880b883a 	mov	r5,r17
   20db0:	01800284 	movi	r6,10
   20db4:	000f883a 	mov	r7,zero
   20db8:	002a5480 	call	2a548 <__umoddi3>
   20dbc:	10800c04 	addi	r2,r2,48
   20dc0:	843fffc4 	addi	r16,r16,-1
   20dc4:	9809883a 	mov	r4,r19
   20dc8:	880b883a 	mov	r5,r17
   20dcc:	80800005 	stb	r2,0(r16)
   20dd0:	01800284 	movi	r6,10
   20dd4:	000f883a 	mov	r7,zero
   20dd8:	0029f4c0 	call	29f4c <__udivdi3>
   20ddc:	1027883a 	mov	r19,r2
   20de0:	10c4b03a 	or	r2,r2,r3
   20de4:	1823883a 	mov	r17,r3
   20de8:	103fef1e 	bne	r2,zero,20da8 <_gp+0xfffe5ef0>
   20dec:	d8c02817 	ldw	r3,160(sp)
   20df0:	dc402917 	ldw	r17,164(sp)
   20df4:	b011883a 	mov	r8,r22
   20df8:	1c07c83a 	sub	r3,r3,r16
   20dfc:	d8c02b15 	stw	r3,172(sp)
   20e00:	00005f06 	br	20f80 <___vfprintf_internal_r+0x75c>
   20e04:	8025883a 	mov	r18,r16
   20e08:	dc002903 	ldbu	r16,164(sp)
   20e0c:	e011883a 	mov	r8,fp
   20e10:	84003fcc 	andi	r16,r16,255
   20e14:	80071e1e 	bne	r16,zero,22a90 <___vfprintf_internal_r+0x226c>
   20e18:	9080020c 	andi	r2,r18,8
   20e1c:	1004af26 	beq	r2,zero,220dc <___vfprintf_internal_r+0x18b8>
   20e20:	d9002e17 	ldw	r4,184(sp)
   20e24:	d9402e17 	ldw	r5,184(sp)
   20e28:	d8802e17 	ldw	r2,184(sp)
   20e2c:	21000017 	ldw	r4,0(r4)
   20e30:	29400117 	ldw	r5,4(r5)
   20e34:	10800204 	addi	r2,r2,8
   20e38:	d9003615 	stw	r4,216(sp)
   20e3c:	d9403815 	stw	r5,224(sp)
   20e40:	d8802e15 	stw	r2,184(sp)
   20e44:	d9003617 	ldw	r4,216(sp)
   20e48:	d9403817 	ldw	r5,224(sp)
   20e4c:	da003d15 	stw	r8,244(sp)
   20e50:	04000044 	movi	r16,1
   20e54:	0027c280 	call	27c28 <__fpclassifyd>
   20e58:	da003d17 	ldw	r8,244(sp)
   20e5c:	1404441e 	bne	r2,r16,21f70 <___vfprintf_internal_r+0x174c>
   20e60:	d9003617 	ldw	r4,216(sp)
   20e64:	d9403817 	ldw	r5,224(sp)
   20e68:	000d883a 	mov	r6,zero
   20e6c:	000f883a 	mov	r7,zero
   20e70:	002c0a00 	call	2c0a0 <__ledf2>
   20e74:	da003d17 	ldw	r8,244(sp)
   20e78:	1005e316 	blt	r2,zero,22608 <___vfprintf_internal_r+0x1de4>
   20e7c:	df002783 	ldbu	fp,158(sp)
   20e80:	008011c4 	movi	r2,71
   20e84:	1445580e 	bge	r2,r17,223e8 <___vfprintf_internal_r+0x1bc4>
   20e88:	040000f4 	movhi	r16,3
   20e8c:	84035c04 	addi	r16,r16,3440
   20e90:	00c000c4 	movi	r3,3
   20e94:	00bfdfc4 	movi	r2,-129
   20e98:	d8c02915 	stw	r3,164(sp)
   20e9c:	90a4703a 	and	r18,r18,r2
   20ea0:	d8c02b15 	stw	r3,172(sp)
   20ea4:	d8002a15 	stw	zero,168(sp)
   20ea8:	d8003215 	stw	zero,200(sp)
   20eac:	00003a06 	br	20f98 <___vfprintf_internal_r+0x774>
   20eb0:	84000214 	ori	r16,r16,8
   20eb4:	ac400007 	ldb	r17,0(r21)
   20eb8:	003ebc06 	br	209ac <_gp+0xfffe5af4>
   20ebc:	8025883a 	mov	r18,r16
   20ec0:	dc002903 	ldbu	r16,164(sp)
   20ec4:	e011883a 	mov	r8,fp
   20ec8:	84003fcc 	andi	r16,r16,255
   20ecc:	8007001e 	bne	r16,zero,22ad0 <___vfprintf_internal_r+0x22ac>
   20ed0:	94800414 	ori	r18,r18,16
   20ed4:	9080080c 	andi	r2,r18,32
   20ed8:	1002fa26 	beq	r2,zero,21ac4 <___vfprintf_internal_r+0x12a0>
   20edc:	d9002e17 	ldw	r4,184(sp)
   20ee0:	d9402a17 	ldw	r5,168(sp)
   20ee4:	d8002785 	stb	zero,158(sp)
   20ee8:	20800204 	addi	r2,r4,8
   20eec:	24c00017 	ldw	r19,0(r4)
   20ef0:	25800117 	ldw	r22,4(r4)
   20ef4:	2804b116 	blt	r5,zero,221bc <___vfprintf_internal_r+0x1998>
   20ef8:	013fdfc4 	movi	r4,-129
   20efc:	9d86b03a 	or	r3,r19,r22
   20f00:	d8802e15 	stw	r2,184(sp)
   20f04:	9124703a 	and	r18,r18,r4
   20f08:	1802fb1e 	bne	r3,zero,21af8 <___vfprintf_internal_r+0x12d4>
   20f0c:	d8c02a17 	ldw	r3,168(sp)
   20f10:	0039883a 	mov	fp,zero
   20f14:	1805e526 	beq	r3,zero,226ac <___vfprintf_internal_r+0x1e88>
   20f18:	0027883a 	mov	r19,zero
   20f1c:	002d883a 	mov	r22,zero
   20f20:	dc001e04 	addi	r16,sp,120
   20f24:	9806d0fa 	srli	r3,r19,3
   20f28:	b008977a 	slli	r4,r22,29
   20f2c:	b02cd0fa 	srli	r22,r22,3
   20f30:	9cc001cc 	andi	r19,r19,7
   20f34:	98800c04 	addi	r2,r19,48
   20f38:	843fffc4 	addi	r16,r16,-1
   20f3c:	20e6b03a 	or	r19,r4,r3
   20f40:	80800005 	stb	r2,0(r16)
   20f44:	9d86b03a 	or	r3,r19,r22
   20f48:	183ff61e 	bne	r3,zero,20f24 <_gp+0xfffe606c>
   20f4c:	90c0004c 	andi	r3,r18,1
   20f50:	18014126 	beq	r3,zero,21458 <___vfprintf_internal_r+0xc34>
   20f54:	10803fcc 	andi	r2,r2,255
   20f58:	1080201c 	xori	r2,r2,128
   20f5c:	10bfe004 	addi	r2,r2,-128
   20f60:	00c00c04 	movi	r3,48
   20f64:	10c13c26 	beq	r2,r3,21458 <___vfprintf_internal_r+0xc34>
   20f68:	80ffffc5 	stb	r3,-1(r16)
   20f6c:	d8c02817 	ldw	r3,160(sp)
   20f70:	80bfffc4 	addi	r2,r16,-1
   20f74:	1021883a 	mov	r16,r2
   20f78:	1887c83a 	sub	r3,r3,r2
   20f7c:	d8c02b15 	stw	r3,172(sp)
   20f80:	d8802b17 	ldw	r2,172(sp)
   20f84:	d9002a17 	ldw	r4,168(sp)
   20f88:	1100010e 	bge	r2,r4,20f90 <___vfprintf_internal_r+0x76c>
   20f8c:	2005883a 	mov	r2,r4
   20f90:	d8802915 	stw	r2,164(sp)
   20f94:	d8003215 	stw	zero,200(sp)
   20f98:	e7003fcc 	andi	fp,fp,255
   20f9c:	e700201c 	xori	fp,fp,128
   20fa0:	e73fe004 	addi	fp,fp,-128
   20fa4:	e0000326 	beq	fp,zero,20fb4 <___vfprintf_internal_r+0x790>
   20fa8:	d8c02917 	ldw	r3,164(sp)
   20fac:	18c00044 	addi	r3,r3,1
   20fb0:	d8c02915 	stw	r3,164(sp)
   20fb4:	90c0008c 	andi	r3,r18,2
   20fb8:	d8c02c15 	stw	r3,176(sp)
   20fbc:	18000326 	beq	r3,zero,20fcc <___vfprintf_internal_r+0x7a8>
   20fc0:	d8c02917 	ldw	r3,164(sp)
   20fc4:	18c00084 	addi	r3,r3,2
   20fc8:	d8c02915 	stw	r3,164(sp)
   20fcc:	90c0210c 	andi	r3,r18,132
   20fd0:	d8c03015 	stw	r3,192(sp)
   20fd4:	1801c51e 	bne	r3,zero,216ec <___vfprintf_internal_r+0xec8>
   20fd8:	d9003117 	ldw	r4,196(sp)
   20fdc:	d8c02917 	ldw	r3,164(sp)
   20fe0:	20e7c83a 	sub	r19,r4,r3
   20fe4:	04c1c10e 	bge	zero,r19,216ec <___vfprintf_internal_r+0xec8>
   20fe8:	02400404 	movi	r9,16
   20fec:	d8c02017 	ldw	r3,128(sp)
   20ff0:	d8801f17 	ldw	r2,124(sp)
   20ff4:	4cc52f0e 	bge	r9,r19,224b4 <___vfprintf_internal_r+0x1c90>
   20ff8:	014000f4 	movhi	r5,3
   20ffc:	29436f84 	addi	r5,r5,3518
   21000:	dc403b15 	stw	r17,236(sp)
   21004:	d9403515 	stw	r5,212(sp)
   21008:	9823883a 	mov	r17,r19
   2100c:	482d883a 	mov	r22,r9
   21010:	9027883a 	mov	r19,r18
   21014:	070001c4 	movi	fp,7
   21018:	8025883a 	mov	r18,r16
   2101c:	dc002d17 	ldw	r16,180(sp)
   21020:	00000306 	br	21030 <___vfprintf_internal_r+0x80c>
   21024:	8c7ffc04 	addi	r17,r17,-16
   21028:	42000204 	addi	r8,r8,8
   2102c:	b440130e 	bge	r22,r17,2107c <___vfprintf_internal_r+0x858>
   21030:	010000f4 	movhi	r4,3
   21034:	18c00404 	addi	r3,r3,16
   21038:	10800044 	addi	r2,r2,1
   2103c:	21036f84 	addi	r4,r4,3518
   21040:	41000015 	stw	r4,0(r8)
   21044:	45800115 	stw	r22,4(r8)
   21048:	d8c02015 	stw	r3,128(sp)
   2104c:	d8801f15 	stw	r2,124(sp)
   21050:	e0bff40e 	bge	fp,r2,21024 <_gp+0xfffe616c>
   21054:	d9801e04 	addi	r6,sp,120
   21058:	b80b883a 	mov	r5,r23
   2105c:	8009883a 	mov	r4,r16
   21060:	00280040 	call	28004 <__sprint_r>
   21064:	103ef31e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   21068:	8c7ffc04 	addi	r17,r17,-16
   2106c:	d8c02017 	ldw	r3,128(sp)
   21070:	d8801f17 	ldw	r2,124(sp)
   21074:	da000404 	addi	r8,sp,16
   21078:	b47fed16 	blt	r22,r17,21030 <_gp+0xfffe6178>
   2107c:	9021883a 	mov	r16,r18
   21080:	9825883a 	mov	r18,r19
   21084:	8827883a 	mov	r19,r17
   21088:	dc403b17 	ldw	r17,236(sp)
   2108c:	d9403517 	ldw	r5,212(sp)
   21090:	98c7883a 	add	r3,r19,r3
   21094:	10800044 	addi	r2,r2,1
   21098:	41400015 	stw	r5,0(r8)
   2109c:	44c00115 	stw	r19,4(r8)
   210a0:	d8c02015 	stw	r3,128(sp)
   210a4:	d8801f15 	stw	r2,124(sp)
   210a8:	010001c4 	movi	r4,7
   210ac:	2082c516 	blt	r4,r2,21bc4 <___vfprintf_internal_r+0x13a0>
   210b0:	df002787 	ldb	fp,158(sp)
   210b4:	42000204 	addi	r8,r8,8
   210b8:	e0000c26 	beq	fp,zero,210ec <___vfprintf_internal_r+0x8c8>
   210bc:	d8801f17 	ldw	r2,124(sp)
   210c0:	d9002784 	addi	r4,sp,158
   210c4:	18c00044 	addi	r3,r3,1
   210c8:	10800044 	addi	r2,r2,1
   210cc:	41000015 	stw	r4,0(r8)
   210d0:	01000044 	movi	r4,1
   210d4:	41000115 	stw	r4,4(r8)
   210d8:	d8c02015 	stw	r3,128(sp)
   210dc:	d8801f15 	stw	r2,124(sp)
   210e0:	010001c4 	movi	r4,7
   210e4:	20825e16 	blt	r4,r2,21a60 <___vfprintf_internal_r+0x123c>
   210e8:	42000204 	addi	r8,r8,8
   210ec:	d8802c17 	ldw	r2,176(sp)
   210f0:	10000c26 	beq	r2,zero,21124 <___vfprintf_internal_r+0x900>
   210f4:	d8801f17 	ldw	r2,124(sp)
   210f8:	d9002704 	addi	r4,sp,156
   210fc:	18c00084 	addi	r3,r3,2
   21100:	10800044 	addi	r2,r2,1
   21104:	41000015 	stw	r4,0(r8)
   21108:	01000084 	movi	r4,2
   2110c:	41000115 	stw	r4,4(r8)
   21110:	d8c02015 	stw	r3,128(sp)
   21114:	d8801f15 	stw	r2,124(sp)
   21118:	010001c4 	movi	r4,7
   2111c:	20825816 	blt	r4,r2,21a80 <___vfprintf_internal_r+0x125c>
   21120:	42000204 	addi	r8,r8,8
   21124:	d9003017 	ldw	r4,192(sp)
   21128:	00802004 	movi	r2,128
   2112c:	2081bb26 	beq	r4,r2,2181c <___vfprintf_internal_r+0xff8>
   21130:	d9402a17 	ldw	r5,168(sp)
   21134:	d8802b17 	ldw	r2,172(sp)
   21138:	28adc83a 	sub	r22,r5,r2
   2113c:	0580310e 	bge	zero,r22,21204 <___vfprintf_internal_r+0x9e0>
   21140:	07000404 	movi	fp,16
   21144:	d8801f17 	ldw	r2,124(sp)
   21148:	e584360e 	bge	fp,r22,22224 <___vfprintf_internal_r+0x1a00>
   2114c:	014000f4 	movhi	r5,3
   21150:	29436b84 	addi	r5,r5,3502
   21154:	dc402a15 	stw	r17,168(sp)
   21158:	d9402c15 	stw	r5,176(sp)
   2115c:	b023883a 	mov	r17,r22
   21160:	04c001c4 	movi	r19,7
   21164:	a82d883a 	mov	r22,r21
   21168:	902b883a 	mov	r21,r18
   2116c:	8025883a 	mov	r18,r16
   21170:	dc002d17 	ldw	r16,180(sp)
   21174:	00000306 	br	21184 <___vfprintf_internal_r+0x960>
   21178:	8c7ffc04 	addi	r17,r17,-16
   2117c:	42000204 	addi	r8,r8,8
   21180:	e440110e 	bge	fp,r17,211c8 <___vfprintf_internal_r+0x9a4>
   21184:	18c00404 	addi	r3,r3,16
   21188:	10800044 	addi	r2,r2,1
   2118c:	45000015 	stw	r20,0(r8)
   21190:	47000115 	stw	fp,4(r8)
   21194:	d8c02015 	stw	r3,128(sp)
   21198:	d8801f15 	stw	r2,124(sp)
   2119c:	98bff60e 	bge	r19,r2,21178 <_gp+0xfffe62c0>
   211a0:	d9801e04 	addi	r6,sp,120
   211a4:	b80b883a 	mov	r5,r23
   211a8:	8009883a 	mov	r4,r16
   211ac:	00280040 	call	28004 <__sprint_r>
   211b0:	103ea01e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   211b4:	8c7ffc04 	addi	r17,r17,-16
   211b8:	d8c02017 	ldw	r3,128(sp)
   211bc:	d8801f17 	ldw	r2,124(sp)
   211c0:	da000404 	addi	r8,sp,16
   211c4:	e47fef16 	blt	fp,r17,21184 <_gp+0xfffe62cc>
   211c8:	9021883a 	mov	r16,r18
   211cc:	a825883a 	mov	r18,r21
   211d0:	b02b883a 	mov	r21,r22
   211d4:	882d883a 	mov	r22,r17
   211d8:	dc402a17 	ldw	r17,168(sp)
   211dc:	d9002c17 	ldw	r4,176(sp)
   211e0:	1d87883a 	add	r3,r3,r22
   211e4:	10800044 	addi	r2,r2,1
   211e8:	41000015 	stw	r4,0(r8)
   211ec:	45800115 	stw	r22,4(r8)
   211f0:	d8c02015 	stw	r3,128(sp)
   211f4:	d8801f15 	stw	r2,124(sp)
   211f8:	010001c4 	movi	r4,7
   211fc:	20821016 	blt	r4,r2,21a40 <___vfprintf_internal_r+0x121c>
   21200:	42000204 	addi	r8,r8,8
   21204:	9080400c 	andi	r2,r18,256
   21208:	10013a1e 	bne	r2,zero,216f4 <___vfprintf_internal_r+0xed0>
   2120c:	d9402b17 	ldw	r5,172(sp)
   21210:	d8801f17 	ldw	r2,124(sp)
   21214:	44000015 	stw	r16,0(r8)
   21218:	1947883a 	add	r3,r3,r5
   2121c:	10800044 	addi	r2,r2,1
   21220:	41400115 	stw	r5,4(r8)
   21224:	d8c02015 	stw	r3,128(sp)
   21228:	d8801f15 	stw	r2,124(sp)
   2122c:	010001c4 	movi	r4,7
   21230:	2081f516 	blt	r4,r2,21a08 <___vfprintf_internal_r+0x11e4>
   21234:	42000204 	addi	r8,r8,8
   21238:	9480010c 	andi	r18,r18,4
   2123c:	90003226 	beq	r18,zero,21308 <___vfprintf_internal_r+0xae4>
   21240:	d9403117 	ldw	r5,196(sp)
   21244:	d8802917 	ldw	r2,164(sp)
   21248:	28a1c83a 	sub	r16,r5,r2
   2124c:	04002e0e 	bge	zero,r16,21308 <___vfprintf_internal_r+0xae4>
   21250:	04400404 	movi	r17,16
   21254:	d8801f17 	ldw	r2,124(sp)
   21258:	8c04c40e 	bge	r17,r16,2256c <___vfprintf_internal_r+0x1d48>
   2125c:	014000f4 	movhi	r5,3
   21260:	29436f84 	addi	r5,r5,3518
   21264:	d9403515 	stw	r5,212(sp)
   21268:	048001c4 	movi	r18,7
   2126c:	dcc02d17 	ldw	r19,180(sp)
   21270:	00000306 	br	21280 <___vfprintf_internal_r+0xa5c>
   21274:	843ffc04 	addi	r16,r16,-16
   21278:	42000204 	addi	r8,r8,8
   2127c:	8c00130e 	bge	r17,r16,212cc <___vfprintf_internal_r+0xaa8>
   21280:	010000f4 	movhi	r4,3
   21284:	18c00404 	addi	r3,r3,16
   21288:	10800044 	addi	r2,r2,1
   2128c:	21036f84 	addi	r4,r4,3518
   21290:	41000015 	stw	r4,0(r8)
   21294:	44400115 	stw	r17,4(r8)
   21298:	d8c02015 	stw	r3,128(sp)
   2129c:	d8801f15 	stw	r2,124(sp)
   212a0:	90bff40e 	bge	r18,r2,21274 <_gp+0xfffe63bc>
   212a4:	d9801e04 	addi	r6,sp,120
   212a8:	b80b883a 	mov	r5,r23
   212ac:	9809883a 	mov	r4,r19
   212b0:	00280040 	call	28004 <__sprint_r>
   212b4:	103e5f1e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   212b8:	843ffc04 	addi	r16,r16,-16
   212bc:	d8c02017 	ldw	r3,128(sp)
   212c0:	d8801f17 	ldw	r2,124(sp)
   212c4:	da000404 	addi	r8,sp,16
   212c8:	8c3fed16 	blt	r17,r16,21280 <_gp+0xfffe63c8>
   212cc:	d9403517 	ldw	r5,212(sp)
   212d0:	1c07883a 	add	r3,r3,r16
   212d4:	10800044 	addi	r2,r2,1
   212d8:	41400015 	stw	r5,0(r8)
   212dc:	44000115 	stw	r16,4(r8)
   212e0:	d8c02015 	stw	r3,128(sp)
   212e4:	d8801f15 	stw	r2,124(sp)
   212e8:	010001c4 	movi	r4,7
   212ec:	2080060e 	bge	r4,r2,21308 <___vfprintf_internal_r+0xae4>
   212f0:	d9002d17 	ldw	r4,180(sp)
   212f4:	d9801e04 	addi	r6,sp,120
   212f8:	b80b883a 	mov	r5,r23
   212fc:	00280040 	call	28004 <__sprint_r>
   21300:	103e4c1e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   21304:	d8c02017 	ldw	r3,128(sp)
   21308:	d8803117 	ldw	r2,196(sp)
   2130c:	d9002917 	ldw	r4,164(sp)
   21310:	1100010e 	bge	r2,r4,21318 <___vfprintf_internal_r+0xaf4>
   21314:	2005883a 	mov	r2,r4
   21318:	d9402f17 	ldw	r5,188(sp)
   2131c:	288b883a 	add	r5,r5,r2
   21320:	d9402f15 	stw	r5,188(sp)
   21324:	1801c01e 	bne	r3,zero,21a28 <___vfprintf_internal_r+0x1204>
   21328:	a8800007 	ldb	r2,0(r21)
   2132c:	d8001f15 	stw	zero,124(sp)
   21330:	da000404 	addi	r8,sp,16
   21334:	103d751e 	bne	r2,zero,2090c <_gp+0xfffe5a54>
   21338:	a823883a 	mov	r17,r21
   2133c:	003d8b06 	br	2096c <_gp+0xfffe5ab4>
   21340:	8025883a 	mov	r18,r16
   21344:	dc002903 	ldbu	r16,164(sp)
   21348:	e011883a 	mov	r8,fp
   2134c:	84003fcc 	andi	r16,r16,255
   21350:	8005e51e 	bne	r16,zero,22ae8 <___vfprintf_internal_r+0x22c4>
   21354:	94800414 	ori	r18,r18,16
   21358:	9080080c 	andi	r2,r18,32
   2135c:	10022b26 	beq	r2,zero,21c0c <___vfprintf_internal_r+0x13e8>
   21360:	d9002e17 	ldw	r4,184(sp)
   21364:	d9402a17 	ldw	r5,168(sp)
   21368:	d8002785 	stb	zero,158(sp)
   2136c:	20c00204 	addi	r3,r4,8
   21370:	24c00017 	ldw	r19,0(r4)
   21374:	25800117 	ldw	r22,4(r4)
   21378:	28042e16 	blt	r5,zero,22434 <___vfprintf_internal_r+0x1c10>
   2137c:	013fdfc4 	movi	r4,-129
   21380:	9d84b03a 	or	r2,r19,r22
   21384:	d8c02e15 	stw	r3,184(sp)
   21388:	9124703a 	and	r18,r18,r4
   2138c:	0039883a 	mov	fp,zero
   21390:	103e801e 	bne	r2,zero,20d94 <_gp+0xfffe5edc>
   21394:	d9002a17 	ldw	r4,168(sp)
   21398:	2002e01e 	bne	r4,zero,21f1c <___vfprintf_internal_r+0x16f8>
   2139c:	d8002a15 	stw	zero,168(sp)
   213a0:	d8002b15 	stw	zero,172(sp)
   213a4:	dc001e04 	addi	r16,sp,120
   213a8:	003ef506 	br	20f80 <_gp+0xfffe60c8>
   213ac:	8025883a 	mov	r18,r16
   213b0:	dc002903 	ldbu	r16,164(sp)
   213b4:	e011883a 	mov	r8,fp
   213b8:	84003fcc 	andi	r16,r16,255
   213bc:	8005ba1e 	bne	r16,zero,22aa8 <___vfprintf_internal_r+0x2284>
   213c0:	010000f4 	movhi	r4,3
   213c4:	21035f04 	addi	r4,r4,3452
   213c8:	d9003915 	stw	r4,228(sp)
   213cc:	9080080c 	andi	r2,r18,32
   213d0:	10006126 	beq	r2,zero,21558 <___vfprintf_internal_r+0xd34>
   213d4:	d9402e17 	ldw	r5,184(sp)
   213d8:	2cc00017 	ldw	r19,0(r5)
   213dc:	2d800117 	ldw	r22,4(r5)
   213e0:	29400204 	addi	r5,r5,8
   213e4:	d9402e15 	stw	r5,184(sp)
   213e8:	9080004c 	andi	r2,r18,1
   213ec:	1001ac26 	beq	r2,zero,21aa0 <___vfprintf_internal_r+0x127c>
   213f0:	9d84b03a 	or	r2,r19,r22
   213f4:	10038526 	beq	r2,zero,2220c <___vfprintf_internal_r+0x19e8>
   213f8:	d8c02a17 	ldw	r3,168(sp)
   213fc:	00800c04 	movi	r2,48
   21400:	d8802705 	stb	r2,156(sp)
   21404:	dc402745 	stb	r17,157(sp)
   21408:	d8002785 	stb	zero,158(sp)
   2140c:	90800094 	ori	r2,r18,2
   21410:	18047916 	blt	r3,zero,225f8 <___vfprintf_internal_r+0x1dd4>
   21414:	00bfdfc4 	movi	r2,-129
   21418:	90a4703a 	and	r18,r18,r2
   2141c:	94800094 	ori	r18,r18,2
   21420:	0039883a 	mov	fp,zero
   21424:	d9003917 	ldw	r4,228(sp)
   21428:	dc001e04 	addi	r16,sp,120
   2142c:	988003cc 	andi	r2,r19,15
   21430:	b006973a 	slli	r3,r22,28
   21434:	2085883a 	add	r2,r4,r2
   21438:	9826d13a 	srli	r19,r19,4
   2143c:	10800003 	ldbu	r2,0(r2)
   21440:	b02cd13a 	srli	r22,r22,4
   21444:	843fffc4 	addi	r16,r16,-1
   21448:	1ce6b03a 	or	r19,r3,r19
   2144c:	80800005 	stb	r2,0(r16)
   21450:	9d84b03a 	or	r2,r19,r22
   21454:	103ff51e 	bne	r2,zero,2142c <_gp+0xfffe6574>
   21458:	d8c02817 	ldw	r3,160(sp)
   2145c:	1c07c83a 	sub	r3,r3,r16
   21460:	d8c02b15 	stw	r3,172(sp)
   21464:	003ec606 	br	20f80 <_gp+0xfffe60c8>
   21468:	8025883a 	mov	r18,r16
   2146c:	dc002903 	ldbu	r16,164(sp)
   21470:	e011883a 	mov	r8,fp
   21474:	84003fcc 	andi	r16,r16,255
   21478:	803e9626 	beq	r16,zero,20ed4 <_gp+0xfffe601c>
   2147c:	d8c02b03 	ldbu	r3,172(sp)
   21480:	d8c02785 	stb	r3,158(sp)
   21484:	003e9306 	br	20ed4 <_gp+0xfffe601c>
   21488:	00c00044 	movi	r3,1
   2148c:	d8c02905 	stb	r3,164(sp)
   21490:	00c00ac4 	movi	r3,43
   21494:	d8c02b05 	stb	r3,172(sp)
   21498:	ac400007 	ldb	r17,0(r21)
   2149c:	003d4306 	br	209ac <_gp+0xfffe5af4>
   214a0:	84000814 	ori	r16,r16,32
   214a4:	ac400007 	ldb	r17,0(r21)
   214a8:	003d4006 	br	209ac <_gp+0xfffe5af4>
   214ac:	d8802e17 	ldw	r2,184(sp)
   214b0:	8025883a 	mov	r18,r16
   214b4:	d8002785 	stb	zero,158(sp)
   214b8:	14000017 	ldw	r16,0(r2)
   214bc:	e011883a 	mov	r8,fp
   214c0:	14c00104 	addi	r19,r2,4
   214c4:	80042d26 	beq	r16,zero,2257c <___vfprintf_internal_r+0x1d58>
   214c8:	d8c02a17 	ldw	r3,168(sp)
   214cc:	1803e416 	blt	r3,zero,22460 <___vfprintf_internal_r+0x1c3c>
   214d0:	180d883a 	mov	r6,r3
   214d4:	000b883a 	mov	r5,zero
   214d8:	8009883a 	mov	r4,r16
   214dc:	df003d15 	stw	fp,244(sp)
   214e0:	002615c0 	call	2615c <memchr>
   214e4:	da003d17 	ldw	r8,244(sp)
   214e8:	10046826 	beq	r2,zero,2268c <___vfprintf_internal_r+0x1e68>
   214ec:	1405c83a 	sub	r2,r2,r16
   214f0:	d8802b15 	stw	r2,172(sp)
   214f4:	1003e016 	blt	r2,zero,22478 <___vfprintf_internal_r+0x1c54>
   214f8:	df002783 	ldbu	fp,158(sp)
   214fc:	d8802915 	stw	r2,164(sp)
   21500:	dcc02e15 	stw	r19,184(sp)
   21504:	d8002a15 	stw	zero,168(sp)
   21508:	d8003215 	stw	zero,200(sp)
   2150c:	003ea206 	br	20f98 <_gp+0xfffe60e0>
   21510:	8025883a 	mov	r18,r16
   21514:	dc002903 	ldbu	r16,164(sp)
   21518:	e011883a 	mov	r8,fp
   2151c:	84003fcc 	andi	r16,r16,255
   21520:	803f8d26 	beq	r16,zero,21358 <_gp+0xfffe64a0>
   21524:	d8c02b03 	ldbu	r3,172(sp)
   21528:	d8c02785 	stb	r3,158(sp)
   2152c:	003f8a06 	br	21358 <_gp+0xfffe64a0>
   21530:	8025883a 	mov	r18,r16
   21534:	dc002903 	ldbu	r16,164(sp)
   21538:	e011883a 	mov	r8,fp
   2153c:	84003fcc 	andi	r16,r16,255
   21540:	8005661e 	bne	r16,zero,22adc <___vfprintf_internal_r+0x22b8>
   21544:	010000f4 	movhi	r4,3
   21548:	21036404 	addi	r4,r4,3472
   2154c:	d9003915 	stw	r4,228(sp)
   21550:	9080080c 	andi	r2,r18,32
   21554:	103f9f1e 	bne	r2,zero,213d4 <_gp+0xfffe651c>
   21558:	9080040c 	andi	r2,r18,16
   2155c:	1002eb26 	beq	r2,zero,2210c <___vfprintf_internal_r+0x18e8>
   21560:	d8802e17 	ldw	r2,184(sp)
   21564:	002d883a 	mov	r22,zero
   21568:	14c00017 	ldw	r19,0(r2)
   2156c:	10800104 	addi	r2,r2,4
   21570:	d8802e15 	stw	r2,184(sp)
   21574:	003f9c06 	br	213e8 <_gp+0xfffe6530>
   21578:	d8802b07 	ldb	r2,172(sp)
   2157c:	1002e11e 	bne	r2,zero,22104 <___vfprintf_internal_r+0x18e0>
   21580:	00c00044 	movi	r3,1
   21584:	d8c02905 	stb	r3,164(sp)
   21588:	00c00804 	movi	r3,32
   2158c:	d8c02b05 	stb	r3,172(sp)
   21590:	ac400007 	ldb	r17,0(r21)
   21594:	003d0506 	br	209ac <_gp+0xfffe5af4>
   21598:	84000054 	ori	r16,r16,1
   2159c:	ac400007 	ldb	r17,0(r21)
   215a0:	003d0206 	br	209ac <_gp+0xfffe5af4>
   215a4:	8025883a 	mov	r18,r16
   215a8:	dc002903 	ldbu	r16,164(sp)
   215ac:	e011883a 	mov	r8,fp
   215b0:	84003fcc 	andi	r16,r16,255
   215b4:	803de726 	beq	r16,zero,20d54 <_gp+0xfffe5e9c>
   215b8:	d8c02b03 	ldbu	r3,172(sp)
   215bc:	d8c02785 	stb	r3,158(sp)
   215c0:	003de406 	br	20d54 <_gp+0xfffe5e9c>
   215c4:	84001014 	ori	r16,r16,64
   215c8:	ac400007 	ldb	r17,0(r21)
   215cc:	003cf706 	br	209ac <_gp+0xfffe5af4>
   215d0:	ac400007 	ldb	r17,0(r21)
   215d4:	00801b04 	movi	r2,108
   215d8:	88838f26 	beq	r17,r2,22418 <___vfprintf_internal_r+0x1bf4>
   215dc:	84000414 	ori	r16,r16,16
   215e0:	003cf206 	br	209ac <_gp+0xfffe5af4>
   215e4:	8025883a 	mov	r18,r16
   215e8:	dc002903 	ldbu	r16,164(sp)
   215ec:	e011883a 	mov	r8,fp
   215f0:	84003fcc 	andi	r16,r16,255
   215f4:	80053f1e 	bne	r16,zero,22af4 <___vfprintf_internal_r+0x22d0>
   215f8:	9080080c 	andi	r2,r18,32
   215fc:	1002d226 	beq	r2,zero,22148 <___vfprintf_internal_r+0x1924>
   21600:	d9002e17 	ldw	r4,184(sp)
   21604:	d9402f17 	ldw	r5,188(sp)
   21608:	20800017 	ldw	r2,0(r4)
   2160c:	2807d7fa 	srai	r3,r5,31
   21610:	21000104 	addi	r4,r4,4
   21614:	d9002e15 	stw	r4,184(sp)
   21618:	11400015 	stw	r5,0(r2)
   2161c:	10c00115 	stw	r3,4(r2)
   21620:	003cb806 	br	20904 <_gp+0xfffe5a4c>
   21624:	d8c02e17 	ldw	r3,184(sp)
   21628:	d9002e17 	ldw	r4,184(sp)
   2162c:	8025883a 	mov	r18,r16
   21630:	18800017 	ldw	r2,0(r3)
   21634:	21000104 	addi	r4,r4,4
   21638:	00c00044 	movi	r3,1
   2163c:	e011883a 	mov	r8,fp
   21640:	d8c02915 	stw	r3,164(sp)
   21644:	d8002785 	stb	zero,158(sp)
   21648:	d8801405 	stb	r2,80(sp)
   2164c:	d9002e15 	stw	r4,184(sp)
   21650:	d8c02b15 	stw	r3,172(sp)
   21654:	d8002a15 	stw	zero,168(sp)
   21658:	d8003215 	stw	zero,200(sp)
   2165c:	dc001404 	addi	r16,sp,80
   21660:	0039883a 	mov	fp,zero
   21664:	003e5306 	br	20fb4 <_gp+0xfffe60fc>
   21668:	010000f4 	movhi	r4,3
   2166c:	21036404 	addi	r4,r4,3472
   21670:	0039883a 	mov	fp,zero
   21674:	d9003915 	stw	r4,228(sp)
   21678:	04401e04 	movi	r17,120
   2167c:	003f6906 	br	21424 <_gp+0xfffe656c>
   21680:	8025883a 	mov	r18,r16
   21684:	dc002903 	ldbu	r16,164(sp)
   21688:	e011883a 	mov	r8,fp
   2168c:	84003fcc 	andi	r16,r16,255
   21690:	8005081e 	bne	r16,zero,22ab4 <___vfprintf_internal_r+0x2290>
   21694:	883d6126 	beq	r17,zero,20c1c <_gp+0xfffe5d64>
   21698:	00c00044 	movi	r3,1
   2169c:	d8c02915 	stw	r3,164(sp)
   216a0:	dc401405 	stb	r17,80(sp)
   216a4:	d8002785 	stb	zero,158(sp)
   216a8:	003fe906 	br	21650 <_gp+0xfffe6798>
   216ac:	014000f4 	movhi	r5,3
   216b0:	29436404 	addi	r5,r5,3472
   216b4:	d9403915 	stw	r5,228(sp)
   216b8:	d8c02e15 	stw	r3,184(sp)
   216bc:	1025883a 	mov	r18,r2
   216c0:	04401e04 	movi	r17,120
   216c4:	9d84b03a 	or	r2,r19,r22
   216c8:	1000fc1e 	bne	r2,zero,21abc <___vfprintf_internal_r+0x1298>
   216cc:	0039883a 	mov	fp,zero
   216d0:	00800084 	movi	r2,2
   216d4:	10803fcc 	andi	r2,r2,255
   216d8:	00c00044 	movi	r3,1
   216dc:	10c20f26 	beq	r2,r3,21f1c <___vfprintf_internal_r+0x16f8>
   216e0:	00c00084 	movi	r3,2
   216e4:	10fd3326 	beq	r2,r3,20bb4 <_gp+0xfffe5cfc>
   216e8:	003e0b06 	br	20f18 <_gp+0xfffe6060>
   216ec:	d8c02017 	ldw	r3,128(sp)
   216f0:	003e7106 	br	210b8 <_gp+0xfffe6200>
   216f4:	00801944 	movi	r2,101
   216f8:	14407e0e 	bge	r2,r17,218f4 <___vfprintf_internal_r+0x10d0>
   216fc:	d9003617 	ldw	r4,216(sp)
   21700:	d9403817 	ldw	r5,224(sp)
   21704:	000d883a 	mov	r6,zero
   21708:	000f883a 	mov	r7,zero
   2170c:	d8c03c15 	stw	r3,240(sp)
   21710:	da003d15 	stw	r8,244(sp)
   21714:	002bf3c0 	call	2bf3c <__eqdf2>
   21718:	d8c03c17 	ldw	r3,240(sp)
   2171c:	da003d17 	ldw	r8,244(sp)
   21720:	1000f71e 	bne	r2,zero,21b00 <___vfprintf_internal_r+0x12dc>
   21724:	d8801f17 	ldw	r2,124(sp)
   21728:	010000f4 	movhi	r4,3
   2172c:	21036b04 	addi	r4,r4,3500
   21730:	18c00044 	addi	r3,r3,1
   21734:	10800044 	addi	r2,r2,1
   21738:	41000015 	stw	r4,0(r8)
   2173c:	01000044 	movi	r4,1
   21740:	41000115 	stw	r4,4(r8)
   21744:	d8c02015 	stw	r3,128(sp)
   21748:	d8801f15 	stw	r2,124(sp)
   2174c:	010001c4 	movi	r4,7
   21750:	2082b816 	blt	r4,r2,22234 <___vfprintf_internal_r+0x1a10>
   21754:	42000204 	addi	r8,r8,8
   21758:	d8802617 	ldw	r2,152(sp)
   2175c:	d9403317 	ldw	r5,204(sp)
   21760:	11400216 	blt	r2,r5,2176c <___vfprintf_internal_r+0xf48>
   21764:	9080004c 	andi	r2,r18,1
   21768:	103eb326 	beq	r2,zero,21238 <_gp+0xfffe6380>
   2176c:	d8803717 	ldw	r2,220(sp)
   21770:	d9003417 	ldw	r4,208(sp)
   21774:	d9403717 	ldw	r5,220(sp)
   21778:	1887883a 	add	r3,r3,r2
   2177c:	d8801f17 	ldw	r2,124(sp)
   21780:	41000015 	stw	r4,0(r8)
   21784:	41400115 	stw	r5,4(r8)
   21788:	10800044 	addi	r2,r2,1
   2178c:	d8c02015 	stw	r3,128(sp)
   21790:	d8801f15 	stw	r2,124(sp)
   21794:	010001c4 	movi	r4,7
   21798:	20832916 	blt	r4,r2,22440 <___vfprintf_internal_r+0x1c1c>
   2179c:	42000204 	addi	r8,r8,8
   217a0:	d8803317 	ldw	r2,204(sp)
   217a4:	143fffc4 	addi	r16,r2,-1
   217a8:	043ea30e 	bge	zero,r16,21238 <_gp+0xfffe6380>
   217ac:	04400404 	movi	r17,16
   217b0:	d8801f17 	ldw	r2,124(sp)
   217b4:	8c00880e 	bge	r17,r16,219d8 <___vfprintf_internal_r+0x11b4>
   217b8:	014000f4 	movhi	r5,3
   217bc:	29436b84 	addi	r5,r5,3502
   217c0:	d9402c15 	stw	r5,176(sp)
   217c4:	058001c4 	movi	r22,7
   217c8:	dcc02d17 	ldw	r19,180(sp)
   217cc:	00000306 	br	217dc <___vfprintf_internal_r+0xfb8>
   217d0:	42000204 	addi	r8,r8,8
   217d4:	843ffc04 	addi	r16,r16,-16
   217d8:	8c00820e 	bge	r17,r16,219e4 <___vfprintf_internal_r+0x11c0>
   217dc:	18c00404 	addi	r3,r3,16
   217e0:	10800044 	addi	r2,r2,1
   217e4:	45000015 	stw	r20,0(r8)
   217e8:	44400115 	stw	r17,4(r8)
   217ec:	d8c02015 	stw	r3,128(sp)
   217f0:	d8801f15 	stw	r2,124(sp)
   217f4:	b0bff60e 	bge	r22,r2,217d0 <_gp+0xfffe6918>
   217f8:	d9801e04 	addi	r6,sp,120
   217fc:	b80b883a 	mov	r5,r23
   21800:	9809883a 	mov	r4,r19
   21804:	00280040 	call	28004 <__sprint_r>
   21808:	103d0a1e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   2180c:	d8c02017 	ldw	r3,128(sp)
   21810:	d8801f17 	ldw	r2,124(sp)
   21814:	da000404 	addi	r8,sp,16
   21818:	003fee06 	br	217d4 <_gp+0xfffe691c>
   2181c:	d9403117 	ldw	r5,196(sp)
   21820:	d8802917 	ldw	r2,164(sp)
   21824:	28adc83a 	sub	r22,r5,r2
   21828:	05be410e 	bge	zero,r22,21130 <_gp+0xfffe6278>
   2182c:	07000404 	movi	fp,16
   21830:	d8801f17 	ldw	r2,124(sp)
   21834:	e5838f0e 	bge	fp,r22,22674 <___vfprintf_internal_r+0x1e50>
   21838:	014000f4 	movhi	r5,3
   2183c:	29436b84 	addi	r5,r5,3502
   21840:	dc403015 	stw	r17,192(sp)
   21844:	d9402c15 	stw	r5,176(sp)
   21848:	b023883a 	mov	r17,r22
   2184c:	04c001c4 	movi	r19,7
   21850:	a82d883a 	mov	r22,r21
   21854:	902b883a 	mov	r21,r18
   21858:	8025883a 	mov	r18,r16
   2185c:	dc002d17 	ldw	r16,180(sp)
   21860:	00000306 	br	21870 <___vfprintf_internal_r+0x104c>
   21864:	8c7ffc04 	addi	r17,r17,-16
   21868:	42000204 	addi	r8,r8,8
   2186c:	e440110e 	bge	fp,r17,218b4 <___vfprintf_internal_r+0x1090>
   21870:	18c00404 	addi	r3,r3,16
   21874:	10800044 	addi	r2,r2,1
   21878:	45000015 	stw	r20,0(r8)
   2187c:	47000115 	stw	fp,4(r8)
   21880:	d8c02015 	stw	r3,128(sp)
   21884:	d8801f15 	stw	r2,124(sp)
   21888:	98bff60e 	bge	r19,r2,21864 <_gp+0xfffe69ac>
   2188c:	d9801e04 	addi	r6,sp,120
   21890:	b80b883a 	mov	r5,r23
   21894:	8009883a 	mov	r4,r16
   21898:	00280040 	call	28004 <__sprint_r>
   2189c:	103ce51e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   218a0:	8c7ffc04 	addi	r17,r17,-16
   218a4:	d8c02017 	ldw	r3,128(sp)
   218a8:	d8801f17 	ldw	r2,124(sp)
   218ac:	da000404 	addi	r8,sp,16
   218b0:	e47fef16 	blt	fp,r17,21870 <_gp+0xfffe69b8>
   218b4:	9021883a 	mov	r16,r18
   218b8:	a825883a 	mov	r18,r21
   218bc:	b02b883a 	mov	r21,r22
   218c0:	882d883a 	mov	r22,r17
   218c4:	dc403017 	ldw	r17,192(sp)
   218c8:	d9002c17 	ldw	r4,176(sp)
   218cc:	1d87883a 	add	r3,r3,r22
   218d0:	10800044 	addi	r2,r2,1
   218d4:	41000015 	stw	r4,0(r8)
   218d8:	45800115 	stw	r22,4(r8)
   218dc:	d8c02015 	stw	r3,128(sp)
   218e0:	d8801f15 	stw	r2,124(sp)
   218e4:	010001c4 	movi	r4,7
   218e8:	20818e16 	blt	r4,r2,21f24 <___vfprintf_internal_r+0x1700>
   218ec:	42000204 	addi	r8,r8,8
   218f0:	003e0f06 	br	21130 <_gp+0xfffe6278>
   218f4:	d9403317 	ldw	r5,204(sp)
   218f8:	00800044 	movi	r2,1
   218fc:	18c00044 	addi	r3,r3,1
   21900:	1141530e 	bge	r2,r5,21e50 <___vfprintf_internal_r+0x162c>
   21904:	dc401f17 	ldw	r17,124(sp)
   21908:	00800044 	movi	r2,1
   2190c:	40800115 	stw	r2,4(r8)
   21910:	8c400044 	addi	r17,r17,1
   21914:	44000015 	stw	r16,0(r8)
   21918:	d8c02015 	stw	r3,128(sp)
   2191c:	dc401f15 	stw	r17,124(sp)
   21920:	008001c4 	movi	r2,7
   21924:	14416b16 	blt	r2,r17,21ed4 <___vfprintf_internal_r+0x16b0>
   21928:	42000204 	addi	r8,r8,8
   2192c:	d8803717 	ldw	r2,220(sp)
   21930:	d9003417 	ldw	r4,208(sp)
   21934:	8c400044 	addi	r17,r17,1
   21938:	10c7883a 	add	r3,r2,r3
   2193c:	40800115 	stw	r2,4(r8)
   21940:	41000015 	stw	r4,0(r8)
   21944:	d8c02015 	stw	r3,128(sp)
   21948:	dc401f15 	stw	r17,124(sp)
   2194c:	008001c4 	movi	r2,7
   21950:	14416916 	blt	r2,r17,21ef8 <___vfprintf_internal_r+0x16d4>
   21954:	45800204 	addi	r22,r8,8
   21958:	d9003617 	ldw	r4,216(sp)
   2195c:	d9403817 	ldw	r5,224(sp)
   21960:	000d883a 	mov	r6,zero
   21964:	000f883a 	mov	r7,zero
   21968:	d8c03c15 	stw	r3,240(sp)
   2196c:	002bf3c0 	call	2bf3c <__eqdf2>
   21970:	d8c03c17 	ldw	r3,240(sp)
   21974:	1000bc26 	beq	r2,zero,21c68 <___vfprintf_internal_r+0x1444>
   21978:	d9403317 	ldw	r5,204(sp)
   2197c:	84000044 	addi	r16,r16,1
   21980:	8c400044 	addi	r17,r17,1
   21984:	28bfffc4 	addi	r2,r5,-1
   21988:	1887883a 	add	r3,r3,r2
   2198c:	b0800115 	stw	r2,4(r22)
   21990:	b4000015 	stw	r16,0(r22)
   21994:	d8c02015 	stw	r3,128(sp)
   21998:	dc401f15 	stw	r17,124(sp)
   2199c:	008001c4 	movi	r2,7
   219a0:	14414316 	blt	r2,r17,21eb0 <___vfprintf_internal_r+0x168c>
   219a4:	b5800204 	addi	r22,r22,8
   219a8:	d9003a17 	ldw	r4,232(sp)
   219ac:	df0022c4 	addi	fp,sp,139
   219b0:	8c400044 	addi	r17,r17,1
   219b4:	20c7883a 	add	r3,r4,r3
   219b8:	b7000015 	stw	fp,0(r22)
   219bc:	b1000115 	stw	r4,4(r22)
   219c0:	d8c02015 	stw	r3,128(sp)
   219c4:	dc401f15 	stw	r17,124(sp)
   219c8:	008001c4 	movi	r2,7
   219cc:	14400e16 	blt	r2,r17,21a08 <___vfprintf_internal_r+0x11e4>
   219d0:	b2000204 	addi	r8,r22,8
   219d4:	003e1806 	br	21238 <_gp+0xfffe6380>
   219d8:	010000f4 	movhi	r4,3
   219dc:	21036b84 	addi	r4,r4,3502
   219e0:	d9002c15 	stw	r4,176(sp)
   219e4:	d9002c17 	ldw	r4,176(sp)
   219e8:	1c07883a 	add	r3,r3,r16
   219ec:	44000115 	stw	r16,4(r8)
   219f0:	41000015 	stw	r4,0(r8)
   219f4:	10800044 	addi	r2,r2,1
   219f8:	d8c02015 	stw	r3,128(sp)
   219fc:	d8801f15 	stw	r2,124(sp)
   21a00:	010001c4 	movi	r4,7
   21a04:	20be0b0e 	bge	r4,r2,21234 <_gp+0xfffe637c>
   21a08:	d9002d17 	ldw	r4,180(sp)
   21a0c:	d9801e04 	addi	r6,sp,120
   21a10:	b80b883a 	mov	r5,r23
   21a14:	00280040 	call	28004 <__sprint_r>
   21a18:	103c861e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   21a1c:	d8c02017 	ldw	r3,128(sp)
   21a20:	da000404 	addi	r8,sp,16
   21a24:	003e0406 	br	21238 <_gp+0xfffe6380>
   21a28:	d9002d17 	ldw	r4,180(sp)
   21a2c:	d9801e04 	addi	r6,sp,120
   21a30:	b80b883a 	mov	r5,r23
   21a34:	00280040 	call	28004 <__sprint_r>
   21a38:	103e3b26 	beq	r2,zero,21328 <_gp+0xfffe6470>
   21a3c:	003c7d06 	br	20c34 <_gp+0xfffe5d7c>
   21a40:	d9002d17 	ldw	r4,180(sp)
   21a44:	d9801e04 	addi	r6,sp,120
   21a48:	b80b883a 	mov	r5,r23
   21a4c:	00280040 	call	28004 <__sprint_r>
   21a50:	103c781e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   21a54:	d8c02017 	ldw	r3,128(sp)
   21a58:	da000404 	addi	r8,sp,16
   21a5c:	003de906 	br	21204 <_gp+0xfffe634c>
   21a60:	d9002d17 	ldw	r4,180(sp)
   21a64:	d9801e04 	addi	r6,sp,120
   21a68:	b80b883a 	mov	r5,r23
   21a6c:	00280040 	call	28004 <__sprint_r>
   21a70:	103c701e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   21a74:	d8c02017 	ldw	r3,128(sp)
   21a78:	da000404 	addi	r8,sp,16
   21a7c:	003d9b06 	br	210ec <_gp+0xfffe6234>
   21a80:	d9002d17 	ldw	r4,180(sp)
   21a84:	d9801e04 	addi	r6,sp,120
   21a88:	b80b883a 	mov	r5,r23
   21a8c:	00280040 	call	28004 <__sprint_r>
   21a90:	103c681e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   21a94:	d8c02017 	ldw	r3,128(sp)
   21a98:	da000404 	addi	r8,sp,16
   21a9c:	003da106 	br	21124 <_gp+0xfffe626c>
   21aa0:	d9402a17 	ldw	r5,168(sp)
   21aa4:	d8002785 	stb	zero,158(sp)
   21aa8:	283f0616 	blt	r5,zero,216c4 <_gp+0xfffe680c>
   21aac:	00ffdfc4 	movi	r3,-129
   21ab0:	9d84b03a 	or	r2,r19,r22
   21ab4:	90e4703a 	and	r18,r18,r3
   21ab8:	103c3b26 	beq	r2,zero,20ba8 <_gp+0xfffe5cf0>
   21abc:	0039883a 	mov	fp,zero
   21ac0:	003e5806 	br	21424 <_gp+0xfffe656c>
   21ac4:	9080040c 	andi	r2,r18,16
   21ac8:	1001b326 	beq	r2,zero,22198 <___vfprintf_internal_r+0x1974>
   21acc:	d8c02e17 	ldw	r3,184(sp)
   21ad0:	d9002a17 	ldw	r4,168(sp)
   21ad4:	d8002785 	stb	zero,158(sp)
   21ad8:	18800104 	addi	r2,r3,4
   21adc:	1cc00017 	ldw	r19,0(r3)
   21ae0:	002d883a 	mov	r22,zero
   21ae4:	2001b516 	blt	r4,zero,221bc <___vfprintf_internal_r+0x1998>
   21ae8:	00ffdfc4 	movi	r3,-129
   21aec:	d8802e15 	stw	r2,184(sp)
   21af0:	90e4703a 	and	r18,r18,r3
   21af4:	983d0526 	beq	r19,zero,20f0c <_gp+0xfffe6054>
   21af8:	0039883a 	mov	fp,zero
   21afc:	003d0806 	br	20f20 <_gp+0xfffe6068>
   21b00:	dc402617 	ldw	r17,152(sp)
   21b04:	0441d30e 	bge	zero,r17,22254 <___vfprintf_internal_r+0x1a30>
   21b08:	dc403217 	ldw	r17,200(sp)
   21b0c:	d8803317 	ldw	r2,204(sp)
   21b10:	1440010e 	bge	r2,r17,21b18 <___vfprintf_internal_r+0x12f4>
   21b14:	1023883a 	mov	r17,r2
   21b18:	04400a0e 	bge	zero,r17,21b44 <___vfprintf_internal_r+0x1320>
   21b1c:	d8801f17 	ldw	r2,124(sp)
   21b20:	1c47883a 	add	r3,r3,r17
   21b24:	44000015 	stw	r16,0(r8)
   21b28:	10800044 	addi	r2,r2,1
   21b2c:	44400115 	stw	r17,4(r8)
   21b30:	d8c02015 	stw	r3,128(sp)
   21b34:	d8801f15 	stw	r2,124(sp)
   21b38:	010001c4 	movi	r4,7
   21b3c:	20826516 	blt	r4,r2,224d4 <___vfprintf_internal_r+0x1cb0>
   21b40:	42000204 	addi	r8,r8,8
   21b44:	88026116 	blt	r17,zero,224cc <___vfprintf_internal_r+0x1ca8>
   21b48:	d9003217 	ldw	r4,200(sp)
   21b4c:	2463c83a 	sub	r17,r4,r17
   21b50:	04407b0e 	bge	zero,r17,21d40 <___vfprintf_internal_r+0x151c>
   21b54:	05800404 	movi	r22,16
   21b58:	d8801f17 	ldw	r2,124(sp)
   21b5c:	b4419d0e 	bge	r22,r17,221d4 <___vfprintf_internal_r+0x19b0>
   21b60:	010000f4 	movhi	r4,3
   21b64:	21036b84 	addi	r4,r4,3502
   21b68:	d9002c15 	stw	r4,176(sp)
   21b6c:	070001c4 	movi	fp,7
   21b70:	dcc02d17 	ldw	r19,180(sp)
   21b74:	00000306 	br	21b84 <___vfprintf_internal_r+0x1360>
   21b78:	42000204 	addi	r8,r8,8
   21b7c:	8c7ffc04 	addi	r17,r17,-16
   21b80:	b441970e 	bge	r22,r17,221e0 <___vfprintf_internal_r+0x19bc>
   21b84:	18c00404 	addi	r3,r3,16
   21b88:	10800044 	addi	r2,r2,1
   21b8c:	45000015 	stw	r20,0(r8)
   21b90:	45800115 	stw	r22,4(r8)
   21b94:	d8c02015 	stw	r3,128(sp)
   21b98:	d8801f15 	stw	r2,124(sp)
   21b9c:	e0bff60e 	bge	fp,r2,21b78 <_gp+0xfffe6cc0>
   21ba0:	d9801e04 	addi	r6,sp,120
   21ba4:	b80b883a 	mov	r5,r23
   21ba8:	9809883a 	mov	r4,r19
   21bac:	00280040 	call	28004 <__sprint_r>
   21bb0:	103c201e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   21bb4:	d8c02017 	ldw	r3,128(sp)
   21bb8:	d8801f17 	ldw	r2,124(sp)
   21bbc:	da000404 	addi	r8,sp,16
   21bc0:	003fee06 	br	21b7c <_gp+0xfffe6cc4>
   21bc4:	d9002d17 	ldw	r4,180(sp)
   21bc8:	d9801e04 	addi	r6,sp,120
   21bcc:	b80b883a 	mov	r5,r23
   21bd0:	00280040 	call	28004 <__sprint_r>
   21bd4:	103c171e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   21bd8:	d8c02017 	ldw	r3,128(sp)
   21bdc:	df002787 	ldb	fp,158(sp)
   21be0:	da000404 	addi	r8,sp,16
   21be4:	003d3406 	br	210b8 <_gp+0xfffe6200>
   21be8:	9080040c 	andi	r2,r18,16
   21bec:	10016126 	beq	r2,zero,22174 <___vfprintf_internal_r+0x1950>
   21bf0:	d9402e17 	ldw	r5,184(sp)
   21bf4:	2cc00017 	ldw	r19,0(r5)
   21bf8:	29400104 	addi	r5,r5,4
   21bfc:	d9402e15 	stw	r5,184(sp)
   21c00:	982dd7fa 	srai	r22,r19,31
   21c04:	b005883a 	mov	r2,r22
   21c08:	003c5a06 	br	20d74 <_gp+0xfffe5ebc>
   21c0c:	9080040c 	andi	r2,r18,16
   21c10:	10003526 	beq	r2,zero,21ce8 <___vfprintf_internal_r+0x14c4>
   21c14:	d8c02e17 	ldw	r3,184(sp)
   21c18:	d9002a17 	ldw	r4,168(sp)
   21c1c:	d8002785 	stb	zero,158(sp)
   21c20:	18800104 	addi	r2,r3,4
   21c24:	1cc00017 	ldw	r19,0(r3)
   21c28:	002d883a 	mov	r22,zero
   21c2c:	20003716 	blt	r4,zero,21d0c <___vfprintf_internal_r+0x14e8>
   21c30:	00ffdfc4 	movi	r3,-129
   21c34:	d8802e15 	stw	r2,184(sp)
   21c38:	90e4703a 	and	r18,r18,r3
   21c3c:	0039883a 	mov	fp,zero
   21c40:	983dd426 	beq	r19,zero,21394 <_gp+0xfffe64dc>
   21c44:	00800244 	movi	r2,9
   21c48:	14fc5336 	bltu	r2,r19,20d98 <_gp+0xfffe5ee0>
   21c4c:	d8c02817 	ldw	r3,160(sp)
   21c50:	dc001dc4 	addi	r16,sp,119
   21c54:	9cc00c04 	addi	r19,r19,48
   21c58:	1c07c83a 	sub	r3,r3,r16
   21c5c:	dcc01dc5 	stb	r19,119(sp)
   21c60:	d8c02b15 	stw	r3,172(sp)
   21c64:	003cc606 	br	20f80 <_gp+0xfffe60c8>
   21c68:	d8803317 	ldw	r2,204(sp)
   21c6c:	143fffc4 	addi	r16,r2,-1
   21c70:	043f4d0e 	bge	zero,r16,219a8 <_gp+0xfffe6af0>
   21c74:	07000404 	movi	fp,16
   21c78:	e400810e 	bge	fp,r16,21e80 <___vfprintf_internal_r+0x165c>
   21c7c:	014000f4 	movhi	r5,3
   21c80:	29436b84 	addi	r5,r5,3502
   21c84:	d9402c15 	stw	r5,176(sp)
   21c88:	01c001c4 	movi	r7,7
   21c8c:	dcc02d17 	ldw	r19,180(sp)
   21c90:	00000306 	br	21ca0 <___vfprintf_internal_r+0x147c>
   21c94:	b5800204 	addi	r22,r22,8
   21c98:	843ffc04 	addi	r16,r16,-16
   21c9c:	e4007b0e 	bge	fp,r16,21e8c <___vfprintf_internal_r+0x1668>
   21ca0:	18c00404 	addi	r3,r3,16
   21ca4:	8c400044 	addi	r17,r17,1
   21ca8:	b5000015 	stw	r20,0(r22)
   21cac:	b7000115 	stw	fp,4(r22)
   21cb0:	d8c02015 	stw	r3,128(sp)
   21cb4:	dc401f15 	stw	r17,124(sp)
   21cb8:	3c7ff60e 	bge	r7,r17,21c94 <_gp+0xfffe6ddc>
   21cbc:	d9801e04 	addi	r6,sp,120
   21cc0:	b80b883a 	mov	r5,r23
   21cc4:	9809883a 	mov	r4,r19
   21cc8:	d9c03c15 	stw	r7,240(sp)
   21ccc:	00280040 	call	28004 <__sprint_r>
   21cd0:	d9c03c17 	ldw	r7,240(sp)
   21cd4:	103bd71e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   21cd8:	d8c02017 	ldw	r3,128(sp)
   21cdc:	dc401f17 	ldw	r17,124(sp)
   21ce0:	dd800404 	addi	r22,sp,16
   21ce4:	003fec06 	br	21c98 <_gp+0xfffe6de0>
   21ce8:	9080100c 	andi	r2,r18,64
   21cec:	d8002785 	stb	zero,158(sp)
   21cf0:	10010e26 	beq	r2,zero,2212c <___vfprintf_internal_r+0x1908>
   21cf4:	d9402e17 	ldw	r5,184(sp)
   21cf8:	d8c02a17 	ldw	r3,168(sp)
   21cfc:	002d883a 	mov	r22,zero
   21d00:	28800104 	addi	r2,r5,4
   21d04:	2cc0000b 	ldhu	r19,0(r5)
   21d08:	183fc90e 	bge	r3,zero,21c30 <_gp+0xfffe6d78>
   21d0c:	d8802e15 	stw	r2,184(sp)
   21d10:	0039883a 	mov	fp,zero
   21d14:	9d84b03a 	or	r2,r19,r22
   21d18:	103c1e1e 	bne	r2,zero,20d94 <_gp+0xfffe5edc>
   21d1c:	00800044 	movi	r2,1
   21d20:	003e6c06 	br	216d4 <_gp+0xfffe681c>
   21d24:	d9002d17 	ldw	r4,180(sp)
   21d28:	d9801e04 	addi	r6,sp,120
   21d2c:	b80b883a 	mov	r5,r23
   21d30:	00280040 	call	28004 <__sprint_r>
   21d34:	103bbf1e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   21d38:	d8c02017 	ldw	r3,128(sp)
   21d3c:	da000404 	addi	r8,sp,16
   21d40:	d9003217 	ldw	r4,200(sp)
   21d44:	d8802617 	ldw	r2,152(sp)
   21d48:	d9403317 	ldw	r5,204(sp)
   21d4c:	8123883a 	add	r17,r16,r4
   21d50:	11400216 	blt	r2,r5,21d5c <___vfprintf_internal_r+0x1538>
   21d54:	9100004c 	andi	r4,r18,1
   21d58:	20000d26 	beq	r4,zero,21d90 <___vfprintf_internal_r+0x156c>
   21d5c:	d9003717 	ldw	r4,220(sp)
   21d60:	d9403417 	ldw	r5,208(sp)
   21d64:	1907883a 	add	r3,r3,r4
   21d68:	d9001f17 	ldw	r4,124(sp)
   21d6c:	41400015 	stw	r5,0(r8)
   21d70:	d9403717 	ldw	r5,220(sp)
   21d74:	21000044 	addi	r4,r4,1
   21d78:	d8c02015 	stw	r3,128(sp)
   21d7c:	41400115 	stw	r5,4(r8)
   21d80:	d9001f15 	stw	r4,124(sp)
   21d84:	014001c4 	movi	r5,7
   21d88:	2901e816 	blt	r5,r4,2252c <___vfprintf_internal_r+0x1d08>
   21d8c:	42000204 	addi	r8,r8,8
   21d90:	d9003317 	ldw	r4,204(sp)
   21d94:	8121883a 	add	r16,r16,r4
   21d98:	2085c83a 	sub	r2,r4,r2
   21d9c:	8461c83a 	sub	r16,r16,r17
   21da0:	1400010e 	bge	r2,r16,21da8 <___vfprintf_internal_r+0x1584>
   21da4:	1021883a 	mov	r16,r2
   21da8:	04000a0e 	bge	zero,r16,21dd4 <___vfprintf_internal_r+0x15b0>
   21dac:	d9001f17 	ldw	r4,124(sp)
   21db0:	1c07883a 	add	r3,r3,r16
   21db4:	44400015 	stw	r17,0(r8)
   21db8:	21000044 	addi	r4,r4,1
   21dbc:	44000115 	stw	r16,4(r8)
   21dc0:	d8c02015 	stw	r3,128(sp)
   21dc4:	d9001f15 	stw	r4,124(sp)
   21dc8:	014001c4 	movi	r5,7
   21dcc:	2901fb16 	blt	r5,r4,225bc <___vfprintf_internal_r+0x1d98>
   21dd0:	42000204 	addi	r8,r8,8
   21dd4:	8001f716 	blt	r16,zero,225b4 <___vfprintf_internal_r+0x1d90>
   21dd8:	1421c83a 	sub	r16,r2,r16
   21ddc:	043d160e 	bge	zero,r16,21238 <_gp+0xfffe6380>
   21de0:	04400404 	movi	r17,16
   21de4:	d8801f17 	ldw	r2,124(sp)
   21de8:	8c3efb0e 	bge	r17,r16,219d8 <_gp+0xfffe6b20>
   21dec:	014000f4 	movhi	r5,3
   21df0:	29436b84 	addi	r5,r5,3502
   21df4:	d9402c15 	stw	r5,176(sp)
   21df8:	058001c4 	movi	r22,7
   21dfc:	dcc02d17 	ldw	r19,180(sp)
   21e00:	00000306 	br	21e10 <___vfprintf_internal_r+0x15ec>
   21e04:	42000204 	addi	r8,r8,8
   21e08:	843ffc04 	addi	r16,r16,-16
   21e0c:	8c3ef50e 	bge	r17,r16,219e4 <_gp+0xfffe6b2c>
   21e10:	18c00404 	addi	r3,r3,16
   21e14:	10800044 	addi	r2,r2,1
   21e18:	45000015 	stw	r20,0(r8)
   21e1c:	44400115 	stw	r17,4(r8)
   21e20:	d8c02015 	stw	r3,128(sp)
   21e24:	d8801f15 	stw	r2,124(sp)
   21e28:	b0bff60e 	bge	r22,r2,21e04 <_gp+0xfffe6f4c>
   21e2c:	d9801e04 	addi	r6,sp,120
   21e30:	b80b883a 	mov	r5,r23
   21e34:	9809883a 	mov	r4,r19
   21e38:	00280040 	call	28004 <__sprint_r>
   21e3c:	103b7d1e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   21e40:	d8c02017 	ldw	r3,128(sp)
   21e44:	d8801f17 	ldw	r2,124(sp)
   21e48:	da000404 	addi	r8,sp,16
   21e4c:	003fee06 	br	21e08 <_gp+0xfffe6f50>
   21e50:	9088703a 	and	r4,r18,r2
   21e54:	203eab1e 	bne	r4,zero,21904 <_gp+0xfffe6a4c>
   21e58:	dc401f17 	ldw	r17,124(sp)
   21e5c:	40800115 	stw	r2,4(r8)
   21e60:	44000015 	stw	r16,0(r8)
   21e64:	8c400044 	addi	r17,r17,1
   21e68:	d8c02015 	stw	r3,128(sp)
   21e6c:	dc401f15 	stw	r17,124(sp)
   21e70:	008001c4 	movi	r2,7
   21e74:	14400e16 	blt	r2,r17,21eb0 <___vfprintf_internal_r+0x168c>
   21e78:	45800204 	addi	r22,r8,8
   21e7c:	003eca06 	br	219a8 <_gp+0xfffe6af0>
   21e80:	010000f4 	movhi	r4,3
   21e84:	21036b84 	addi	r4,r4,3502
   21e88:	d9002c15 	stw	r4,176(sp)
   21e8c:	d8802c17 	ldw	r2,176(sp)
   21e90:	1c07883a 	add	r3,r3,r16
   21e94:	8c400044 	addi	r17,r17,1
   21e98:	b0800015 	stw	r2,0(r22)
   21e9c:	b4000115 	stw	r16,4(r22)
   21ea0:	d8c02015 	stw	r3,128(sp)
   21ea4:	dc401f15 	stw	r17,124(sp)
   21ea8:	008001c4 	movi	r2,7
   21eac:	147ebd0e 	bge	r2,r17,219a4 <_gp+0xfffe6aec>
   21eb0:	d9002d17 	ldw	r4,180(sp)
   21eb4:	d9801e04 	addi	r6,sp,120
   21eb8:	b80b883a 	mov	r5,r23
   21ebc:	00280040 	call	28004 <__sprint_r>
   21ec0:	103b5c1e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   21ec4:	d8c02017 	ldw	r3,128(sp)
   21ec8:	dc401f17 	ldw	r17,124(sp)
   21ecc:	dd800404 	addi	r22,sp,16
   21ed0:	003eb506 	br	219a8 <_gp+0xfffe6af0>
   21ed4:	d9002d17 	ldw	r4,180(sp)
   21ed8:	d9801e04 	addi	r6,sp,120
   21edc:	b80b883a 	mov	r5,r23
   21ee0:	00280040 	call	28004 <__sprint_r>
   21ee4:	103b531e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   21ee8:	d8c02017 	ldw	r3,128(sp)
   21eec:	dc401f17 	ldw	r17,124(sp)
   21ef0:	da000404 	addi	r8,sp,16
   21ef4:	003e8d06 	br	2192c <_gp+0xfffe6a74>
   21ef8:	d9002d17 	ldw	r4,180(sp)
   21efc:	d9801e04 	addi	r6,sp,120
   21f00:	b80b883a 	mov	r5,r23
   21f04:	00280040 	call	28004 <__sprint_r>
   21f08:	103b4a1e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   21f0c:	d8c02017 	ldw	r3,128(sp)
   21f10:	dc401f17 	ldw	r17,124(sp)
   21f14:	dd800404 	addi	r22,sp,16
   21f18:	003e8f06 	br	21958 <_gp+0xfffe6aa0>
   21f1c:	0027883a 	mov	r19,zero
   21f20:	003f4a06 	br	21c4c <_gp+0xfffe6d94>
   21f24:	d9002d17 	ldw	r4,180(sp)
   21f28:	d9801e04 	addi	r6,sp,120
   21f2c:	b80b883a 	mov	r5,r23
   21f30:	00280040 	call	28004 <__sprint_r>
   21f34:	103b3f1e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   21f38:	d8c02017 	ldw	r3,128(sp)
   21f3c:	da000404 	addi	r8,sp,16
   21f40:	003c7b06 	br	21130 <_gp+0xfffe6278>
   21f44:	d9402a17 	ldw	r5,168(sp)
   21f48:	04e7c83a 	sub	r19,zero,r19
   21f4c:	07000b44 	movi	fp,45
   21f50:	9804c03a 	cmpne	r2,r19,zero
   21f54:	05adc83a 	sub	r22,zero,r22
   21f58:	df002785 	stb	fp,158(sp)
   21f5c:	b0adc83a 	sub	r22,r22,r2
   21f60:	28017b16 	blt	r5,zero,22550 <___vfprintf_internal_r+0x1d2c>
   21f64:	00bfdfc4 	movi	r2,-129
   21f68:	90a4703a 	and	r18,r18,r2
   21f6c:	003b8906 	br	20d94 <_gp+0xfffe5edc>
   21f70:	d9003617 	ldw	r4,216(sp)
   21f74:	d9403817 	ldw	r5,224(sp)
   21f78:	da003d15 	stw	r8,244(sp)
   21f7c:	0027c280 	call	27c28 <__fpclassifyd>
   21f80:	da003d17 	ldw	r8,244(sp)
   21f84:	1000f026 	beq	r2,zero,22348 <___vfprintf_internal_r+0x1b24>
   21f88:	d9002a17 	ldw	r4,168(sp)
   21f8c:	05bff7c4 	movi	r22,-33
   21f90:	00bfffc4 	movi	r2,-1
   21f94:	8dac703a 	and	r22,r17,r22
   21f98:	20820026 	beq	r4,r2,2279c <___vfprintf_internal_r+0x1f78>
   21f9c:	008011c4 	movi	r2,71
   21fa0:	b081f726 	beq	r22,r2,22780 <___vfprintf_internal_r+0x1f5c>
   21fa4:	d9003817 	ldw	r4,224(sp)
   21fa8:	90c04014 	ori	r3,r18,256
   21fac:	d8c02c15 	stw	r3,176(sp)
   21fb0:	20021516 	blt	r4,zero,22808 <___vfprintf_internal_r+0x1fe4>
   21fb4:	dcc03817 	ldw	r19,224(sp)
   21fb8:	d8002905 	stb	zero,164(sp)
   21fbc:	00801984 	movi	r2,102
   21fc0:	8881f926 	beq	r17,r2,227a8 <___vfprintf_internal_r+0x1f84>
   21fc4:	00801184 	movi	r2,70
   21fc8:	88821c26 	beq	r17,r2,2283c <___vfprintf_internal_r+0x2018>
   21fcc:	00801144 	movi	r2,69
   21fd0:	b081ef26 	beq	r22,r2,22790 <___vfprintf_internal_r+0x1f6c>
   21fd4:	d8c02a17 	ldw	r3,168(sp)
   21fd8:	d8802104 	addi	r2,sp,132
   21fdc:	d8800315 	stw	r2,12(sp)
   21fe0:	d9403617 	ldw	r5,216(sp)
   21fe4:	d8802504 	addi	r2,sp,148
   21fe8:	d9002d17 	ldw	r4,180(sp)
   21fec:	d8800215 	stw	r2,8(sp)
   21ff0:	d8802604 	addi	r2,sp,152
   21ff4:	d8c00015 	stw	r3,0(sp)
   21ff8:	d8800115 	stw	r2,4(sp)
   21ffc:	01c00084 	movi	r7,2
   22000:	980d883a 	mov	r6,r19
   22004:	d8c03c15 	stw	r3,240(sp)
   22008:	da003d15 	stw	r8,244(sp)
   2200c:	0022f540 	call	22f54 <_dtoa_r>
   22010:	1021883a 	mov	r16,r2
   22014:	008019c4 	movi	r2,103
   22018:	d8c03c17 	ldw	r3,240(sp)
   2201c:	da003d17 	ldw	r8,244(sp)
   22020:	88817126 	beq	r17,r2,225e8 <___vfprintf_internal_r+0x1dc4>
   22024:	008011c4 	movi	r2,71
   22028:	88829126 	beq	r17,r2,22a70 <___vfprintf_internal_r+0x224c>
   2202c:	80f9883a 	add	fp,r16,r3
   22030:	d9003617 	ldw	r4,216(sp)
   22034:	000d883a 	mov	r6,zero
   22038:	000f883a 	mov	r7,zero
   2203c:	980b883a 	mov	r5,r19
   22040:	da003d15 	stw	r8,244(sp)
   22044:	002bf3c0 	call	2bf3c <__eqdf2>
   22048:	da003d17 	ldw	r8,244(sp)
   2204c:	10018d26 	beq	r2,zero,22684 <___vfprintf_internal_r+0x1e60>
   22050:	d8802117 	ldw	r2,132(sp)
   22054:	1700062e 	bgeu	r2,fp,22070 <___vfprintf_internal_r+0x184c>
   22058:	01000c04 	movi	r4,48
   2205c:	10c00044 	addi	r3,r2,1
   22060:	d8c02115 	stw	r3,132(sp)
   22064:	11000005 	stb	r4,0(r2)
   22068:	d8802117 	ldw	r2,132(sp)
   2206c:	173ffb36 	bltu	r2,fp,2205c <_gp+0xfffe71a4>
   22070:	1405c83a 	sub	r2,r2,r16
   22074:	d8803315 	stw	r2,204(sp)
   22078:	008011c4 	movi	r2,71
   2207c:	b0817626 	beq	r22,r2,22658 <___vfprintf_internal_r+0x1e34>
   22080:	00801944 	movi	r2,101
   22084:	1442800e 	bge	r2,r17,22a88 <___vfprintf_internal_r+0x2264>
   22088:	d8c02617 	ldw	r3,152(sp)
   2208c:	00801984 	movi	r2,102
   22090:	d8c03215 	stw	r3,200(sp)
   22094:	8881fe26 	beq	r17,r2,22890 <___vfprintf_internal_r+0x206c>
   22098:	d8c03217 	ldw	r3,200(sp)
   2209c:	d9003317 	ldw	r4,204(sp)
   220a0:	1901dd16 	blt	r3,r4,22818 <___vfprintf_internal_r+0x1ff4>
   220a4:	9480004c 	andi	r18,r18,1
   220a8:	90022b1e 	bne	r18,zero,22958 <___vfprintf_internal_r+0x2134>
   220ac:	1805883a 	mov	r2,r3
   220b0:	18028316 	blt	r3,zero,22ac0 <___vfprintf_internal_r+0x229c>
   220b4:	d8c03217 	ldw	r3,200(sp)
   220b8:	044019c4 	movi	r17,103
   220bc:	d8c02b15 	stw	r3,172(sp)
   220c0:	df002907 	ldb	fp,164(sp)
   220c4:	e001531e 	bne	fp,zero,22614 <___vfprintf_internal_r+0x1df0>
   220c8:	df002783 	ldbu	fp,158(sp)
   220cc:	d8802915 	stw	r2,164(sp)
   220d0:	dc802c17 	ldw	r18,176(sp)
   220d4:	d8002a15 	stw	zero,168(sp)
   220d8:	003baf06 	br	20f98 <_gp+0xfffe60e0>
   220dc:	d8c02e17 	ldw	r3,184(sp)
   220e0:	d9002e17 	ldw	r4,184(sp)
   220e4:	d9402e17 	ldw	r5,184(sp)
   220e8:	18c00017 	ldw	r3,0(r3)
   220ec:	21000117 	ldw	r4,4(r4)
   220f0:	29400204 	addi	r5,r5,8
   220f4:	d8c03615 	stw	r3,216(sp)
   220f8:	d9003815 	stw	r4,224(sp)
   220fc:	d9402e15 	stw	r5,184(sp)
   22100:	003b5006 	br	20e44 <_gp+0xfffe5f8c>
   22104:	ac400007 	ldb	r17,0(r21)
   22108:	003a2806 	br	209ac <_gp+0xfffe5af4>
   2210c:	9080100c 	andi	r2,r18,64
   22110:	1000a826 	beq	r2,zero,223b4 <___vfprintf_internal_r+0x1b90>
   22114:	d8c02e17 	ldw	r3,184(sp)
   22118:	002d883a 	mov	r22,zero
   2211c:	1cc0000b 	ldhu	r19,0(r3)
   22120:	18c00104 	addi	r3,r3,4
   22124:	d8c02e15 	stw	r3,184(sp)
   22128:	003caf06 	br	213e8 <_gp+0xfffe6530>
   2212c:	d9002e17 	ldw	r4,184(sp)
   22130:	d9402a17 	ldw	r5,168(sp)
   22134:	002d883a 	mov	r22,zero
   22138:	20800104 	addi	r2,r4,4
   2213c:	24c00017 	ldw	r19,0(r4)
   22140:	283ebb0e 	bge	r5,zero,21c30 <_gp+0xfffe6d78>
   22144:	003ef106 	br	21d0c <_gp+0xfffe6e54>
   22148:	9080040c 	andi	r2,r18,16
   2214c:	1000921e 	bne	r2,zero,22398 <___vfprintf_internal_r+0x1b74>
   22150:	9480100c 	andi	r18,r18,64
   22154:	90013926 	beq	r18,zero,2263c <___vfprintf_internal_r+0x1e18>
   22158:	d9402e17 	ldw	r5,184(sp)
   2215c:	d8c02f17 	ldw	r3,188(sp)
   22160:	28800017 	ldw	r2,0(r5)
   22164:	29400104 	addi	r5,r5,4
   22168:	d9402e15 	stw	r5,184(sp)
   2216c:	10c0000d 	sth	r3,0(r2)
   22170:	0039e406 	br	20904 <_gp+0xfffe5a4c>
   22174:	9080100c 	andi	r2,r18,64
   22178:	10008026 	beq	r2,zero,2237c <___vfprintf_internal_r+0x1b58>
   2217c:	d8802e17 	ldw	r2,184(sp)
   22180:	14c0000f 	ldh	r19,0(r2)
   22184:	10800104 	addi	r2,r2,4
   22188:	d8802e15 	stw	r2,184(sp)
   2218c:	982dd7fa 	srai	r22,r19,31
   22190:	b005883a 	mov	r2,r22
   22194:	003af706 	br	20d74 <_gp+0xfffe5ebc>
   22198:	9080100c 	andi	r2,r18,64
   2219c:	d8002785 	stb	zero,158(sp)
   221a0:	10008a1e 	bne	r2,zero,223cc <___vfprintf_internal_r+0x1ba8>
   221a4:	d9002e17 	ldw	r4,184(sp)
   221a8:	d9402a17 	ldw	r5,168(sp)
   221ac:	002d883a 	mov	r22,zero
   221b0:	20800104 	addi	r2,r4,4
   221b4:	24c00017 	ldw	r19,0(r4)
   221b8:	283e4b0e 	bge	r5,zero,21ae8 <_gp+0xfffe6c30>
   221bc:	9d86b03a 	or	r3,r19,r22
   221c0:	d8802e15 	stw	r2,184(sp)
   221c4:	183e4c1e 	bne	r3,zero,21af8 <_gp+0xfffe6c40>
   221c8:	0039883a 	mov	fp,zero
   221cc:	0005883a 	mov	r2,zero
   221d0:	003d4006 	br	216d4 <_gp+0xfffe681c>
   221d4:	014000f4 	movhi	r5,3
   221d8:	29436b84 	addi	r5,r5,3502
   221dc:	d9402c15 	stw	r5,176(sp)
   221e0:	d9402c17 	ldw	r5,176(sp)
   221e4:	1c47883a 	add	r3,r3,r17
   221e8:	10800044 	addi	r2,r2,1
   221ec:	41400015 	stw	r5,0(r8)
   221f0:	44400115 	stw	r17,4(r8)
   221f4:	d8c02015 	stw	r3,128(sp)
   221f8:	d8801f15 	stw	r2,124(sp)
   221fc:	010001c4 	movi	r4,7
   22200:	20bec816 	blt	r4,r2,21d24 <_gp+0xfffe6e6c>
   22204:	42000204 	addi	r8,r8,8
   22208:	003ecd06 	br	21d40 <_gp+0xfffe6e88>
   2220c:	d9002a17 	ldw	r4,168(sp)
   22210:	d8002785 	stb	zero,158(sp)
   22214:	203d2d16 	blt	r4,zero,216cc <_gp+0xfffe6814>
   22218:	00bfdfc4 	movi	r2,-129
   2221c:	90a4703a 	and	r18,r18,r2
   22220:	003a6106 	br	20ba8 <_gp+0xfffe5cf0>
   22224:	010000f4 	movhi	r4,3
   22228:	21036b84 	addi	r4,r4,3502
   2222c:	d9002c15 	stw	r4,176(sp)
   22230:	003bea06 	br	211dc <_gp+0xfffe6324>
   22234:	d9002d17 	ldw	r4,180(sp)
   22238:	d9801e04 	addi	r6,sp,120
   2223c:	b80b883a 	mov	r5,r23
   22240:	00280040 	call	28004 <__sprint_r>
   22244:	103a7b1e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   22248:	d8c02017 	ldw	r3,128(sp)
   2224c:	da000404 	addi	r8,sp,16
   22250:	003d4106 	br	21758 <_gp+0xfffe68a0>
   22254:	d8801f17 	ldw	r2,124(sp)
   22258:	014000f4 	movhi	r5,3
   2225c:	01000044 	movi	r4,1
   22260:	18c00044 	addi	r3,r3,1
   22264:	10800044 	addi	r2,r2,1
   22268:	29436b04 	addi	r5,r5,3500
   2226c:	41000115 	stw	r4,4(r8)
   22270:	41400015 	stw	r5,0(r8)
   22274:	d8c02015 	stw	r3,128(sp)
   22278:	d8801f15 	stw	r2,124(sp)
   2227c:	010001c4 	movi	r4,7
   22280:	20805c16 	blt	r4,r2,223f4 <___vfprintf_internal_r+0x1bd0>
   22284:	42000204 	addi	r8,r8,8
   22288:	8800041e 	bne	r17,zero,2229c <___vfprintf_internal_r+0x1a78>
   2228c:	d8803317 	ldw	r2,204(sp)
   22290:	1000021e 	bne	r2,zero,2229c <___vfprintf_internal_r+0x1a78>
   22294:	9080004c 	andi	r2,r18,1
   22298:	103be726 	beq	r2,zero,21238 <_gp+0xfffe6380>
   2229c:	d9003717 	ldw	r4,220(sp)
   222a0:	d8801f17 	ldw	r2,124(sp)
   222a4:	d9403417 	ldw	r5,208(sp)
   222a8:	20c7883a 	add	r3,r4,r3
   222ac:	10800044 	addi	r2,r2,1
   222b0:	41000115 	stw	r4,4(r8)
   222b4:	41400015 	stw	r5,0(r8)
   222b8:	d8c02015 	stw	r3,128(sp)
   222bc:	d8801f15 	stw	r2,124(sp)
   222c0:	010001c4 	movi	r4,7
   222c4:	20812116 	blt	r4,r2,2274c <___vfprintf_internal_r+0x1f28>
   222c8:	42000204 	addi	r8,r8,8
   222cc:	0463c83a 	sub	r17,zero,r17
   222d0:	0440730e 	bge	zero,r17,224a0 <___vfprintf_internal_r+0x1c7c>
   222d4:	05800404 	movi	r22,16
   222d8:	b440860e 	bge	r22,r17,224f4 <___vfprintf_internal_r+0x1cd0>
   222dc:	014000f4 	movhi	r5,3
   222e0:	29436b84 	addi	r5,r5,3502
   222e4:	d9402c15 	stw	r5,176(sp)
   222e8:	070001c4 	movi	fp,7
   222ec:	dcc02d17 	ldw	r19,180(sp)
   222f0:	00000306 	br	22300 <___vfprintf_internal_r+0x1adc>
   222f4:	42000204 	addi	r8,r8,8
   222f8:	8c7ffc04 	addi	r17,r17,-16
   222fc:	b440800e 	bge	r22,r17,22500 <___vfprintf_internal_r+0x1cdc>
   22300:	18c00404 	addi	r3,r3,16
   22304:	10800044 	addi	r2,r2,1
   22308:	45000015 	stw	r20,0(r8)
   2230c:	45800115 	stw	r22,4(r8)
   22310:	d8c02015 	stw	r3,128(sp)
   22314:	d8801f15 	stw	r2,124(sp)
   22318:	e0bff60e 	bge	fp,r2,222f4 <_gp+0xfffe743c>
   2231c:	d9801e04 	addi	r6,sp,120
   22320:	b80b883a 	mov	r5,r23
   22324:	9809883a 	mov	r4,r19
   22328:	00280040 	call	28004 <__sprint_r>
   2232c:	103a411e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   22330:	d8c02017 	ldw	r3,128(sp)
   22334:	d8801f17 	ldw	r2,124(sp)
   22338:	da000404 	addi	r8,sp,16
   2233c:	003fee06 	br	222f8 <_gp+0xfffe7440>
   22340:	00bfffc4 	movi	r2,-1
   22344:	003a3f06 	br	20c44 <_gp+0xfffe5d8c>
   22348:	008011c4 	movi	r2,71
   2234c:	1440b816 	blt	r2,r17,22630 <___vfprintf_internal_r+0x1e0c>
   22350:	040000f4 	movhi	r16,3
   22354:	84035d04 	addi	r16,r16,3444
   22358:	00c000c4 	movi	r3,3
   2235c:	00bfdfc4 	movi	r2,-129
   22360:	d8c02915 	stw	r3,164(sp)
   22364:	90a4703a 	and	r18,r18,r2
   22368:	df002783 	ldbu	fp,158(sp)
   2236c:	d8c02b15 	stw	r3,172(sp)
   22370:	d8002a15 	stw	zero,168(sp)
   22374:	d8003215 	stw	zero,200(sp)
   22378:	003b0706 	br	20f98 <_gp+0xfffe60e0>
   2237c:	d8c02e17 	ldw	r3,184(sp)
   22380:	1cc00017 	ldw	r19,0(r3)
   22384:	18c00104 	addi	r3,r3,4
   22388:	d8c02e15 	stw	r3,184(sp)
   2238c:	982dd7fa 	srai	r22,r19,31
   22390:	b005883a 	mov	r2,r22
   22394:	003a7706 	br	20d74 <_gp+0xfffe5ebc>
   22398:	d8c02e17 	ldw	r3,184(sp)
   2239c:	d9002f17 	ldw	r4,188(sp)
   223a0:	18800017 	ldw	r2,0(r3)
   223a4:	18c00104 	addi	r3,r3,4
   223a8:	d8c02e15 	stw	r3,184(sp)
   223ac:	11000015 	stw	r4,0(r2)
   223b0:	00395406 	br	20904 <_gp+0xfffe5a4c>
   223b4:	d9002e17 	ldw	r4,184(sp)
   223b8:	002d883a 	mov	r22,zero
   223bc:	24c00017 	ldw	r19,0(r4)
   223c0:	21000104 	addi	r4,r4,4
   223c4:	d9002e15 	stw	r4,184(sp)
   223c8:	003c0706 	br	213e8 <_gp+0xfffe6530>
   223cc:	d9402e17 	ldw	r5,184(sp)
   223d0:	d8c02a17 	ldw	r3,168(sp)
   223d4:	002d883a 	mov	r22,zero
   223d8:	28800104 	addi	r2,r5,4
   223dc:	2cc0000b 	ldhu	r19,0(r5)
   223e0:	183dc10e 	bge	r3,zero,21ae8 <_gp+0xfffe6c30>
   223e4:	003f7506 	br	221bc <_gp+0xfffe7304>
   223e8:	040000f4 	movhi	r16,3
   223ec:	84035b04 	addi	r16,r16,3436
   223f0:	003aa706 	br	20e90 <_gp+0xfffe5fd8>
   223f4:	d9002d17 	ldw	r4,180(sp)
   223f8:	d9801e04 	addi	r6,sp,120
   223fc:	b80b883a 	mov	r5,r23
   22400:	00280040 	call	28004 <__sprint_r>
   22404:	103a0b1e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   22408:	dc402617 	ldw	r17,152(sp)
   2240c:	d8c02017 	ldw	r3,128(sp)
   22410:	da000404 	addi	r8,sp,16
   22414:	003f9c06 	br	22288 <_gp+0xfffe73d0>
   22418:	ac400043 	ldbu	r17,1(r21)
   2241c:	84000814 	ori	r16,r16,32
   22420:	ad400044 	addi	r21,r21,1
   22424:	8c403fcc 	andi	r17,r17,255
   22428:	8c40201c 	xori	r17,r17,128
   2242c:	8c7fe004 	addi	r17,r17,-128
   22430:	00395e06 	br	209ac <_gp+0xfffe5af4>
   22434:	d8c02e15 	stw	r3,184(sp)
   22438:	0039883a 	mov	fp,zero
   2243c:	003e3506 	br	21d14 <_gp+0xfffe6e5c>
   22440:	d9002d17 	ldw	r4,180(sp)
   22444:	d9801e04 	addi	r6,sp,120
   22448:	b80b883a 	mov	r5,r23
   2244c:	00280040 	call	28004 <__sprint_r>
   22450:	1039f81e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   22454:	d8c02017 	ldw	r3,128(sp)
   22458:	da000404 	addi	r8,sp,16
   2245c:	003cd006 	br	217a0 <_gp+0xfffe68e8>
   22460:	8009883a 	mov	r4,r16
   22464:	df003d15 	stw	fp,244(sp)
   22468:	002078c0 	call	2078c <strlen>
   2246c:	d8802b15 	stw	r2,172(sp)
   22470:	da003d17 	ldw	r8,244(sp)
   22474:	103c200e 	bge	r2,zero,214f8 <_gp+0xfffe6640>
   22478:	0005883a 	mov	r2,zero
   2247c:	003c1e06 	br	214f8 <_gp+0xfffe6640>
   22480:	d9002d17 	ldw	r4,180(sp)
   22484:	d9801e04 	addi	r6,sp,120
   22488:	b80b883a 	mov	r5,r23
   2248c:	00280040 	call	28004 <__sprint_r>
   22490:	1039e81e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   22494:	d8c02017 	ldw	r3,128(sp)
   22498:	d8801f17 	ldw	r2,124(sp)
   2249c:	da000404 	addi	r8,sp,16
   224a0:	d9403317 	ldw	r5,204(sp)
   224a4:	10800044 	addi	r2,r2,1
   224a8:	44000015 	stw	r16,0(r8)
   224ac:	28c7883a 	add	r3,r5,r3
   224b0:	003b5b06 	br	21220 <_gp+0xfffe6368>
   224b4:	010000f4 	movhi	r4,3
   224b8:	21036f84 	addi	r4,r4,3518
   224bc:	d9003515 	stw	r4,212(sp)
   224c0:	003af206 	br	2108c <_gp+0xfffe61d4>
   224c4:	013fffc4 	movi	r4,-1
   224c8:	003a0806 	br	20cec <_gp+0xfffe5e34>
   224cc:	0023883a 	mov	r17,zero
   224d0:	003d9d06 	br	21b48 <_gp+0xfffe6c90>
   224d4:	d9002d17 	ldw	r4,180(sp)
   224d8:	d9801e04 	addi	r6,sp,120
   224dc:	b80b883a 	mov	r5,r23
   224e0:	00280040 	call	28004 <__sprint_r>
   224e4:	1039d31e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   224e8:	d8c02017 	ldw	r3,128(sp)
   224ec:	da000404 	addi	r8,sp,16
   224f0:	003d9406 	br	21b44 <_gp+0xfffe6c8c>
   224f4:	010000f4 	movhi	r4,3
   224f8:	21036b84 	addi	r4,r4,3502
   224fc:	d9002c15 	stw	r4,176(sp)
   22500:	d9002c17 	ldw	r4,176(sp)
   22504:	1c47883a 	add	r3,r3,r17
   22508:	10800044 	addi	r2,r2,1
   2250c:	41000015 	stw	r4,0(r8)
   22510:	44400115 	stw	r17,4(r8)
   22514:	d8c02015 	stw	r3,128(sp)
   22518:	d8801f15 	stw	r2,124(sp)
   2251c:	010001c4 	movi	r4,7
   22520:	20bfd716 	blt	r4,r2,22480 <_gp+0xfffe75c8>
   22524:	42000204 	addi	r8,r8,8
   22528:	003fdd06 	br	224a0 <_gp+0xfffe75e8>
   2252c:	d9002d17 	ldw	r4,180(sp)
   22530:	d9801e04 	addi	r6,sp,120
   22534:	b80b883a 	mov	r5,r23
   22538:	00280040 	call	28004 <__sprint_r>
   2253c:	1039bd1e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   22540:	d8802617 	ldw	r2,152(sp)
   22544:	d8c02017 	ldw	r3,128(sp)
   22548:	da000404 	addi	r8,sp,16
   2254c:	003e1006 	br	21d90 <_gp+0xfffe6ed8>
   22550:	00800044 	movi	r2,1
   22554:	10803fcc 	andi	r2,r2,255
   22558:	00c00044 	movi	r3,1
   2255c:	10fa0d26 	beq	r2,r3,20d94 <_gp+0xfffe5edc>
   22560:	00c00084 	movi	r3,2
   22564:	10fbaf26 	beq	r2,r3,21424 <_gp+0xfffe656c>
   22568:	003a6d06 	br	20f20 <_gp+0xfffe6068>
   2256c:	010000f4 	movhi	r4,3
   22570:	21036f84 	addi	r4,r4,3518
   22574:	d9003515 	stw	r4,212(sp)
   22578:	003b5406 	br	212cc <_gp+0xfffe6414>
   2257c:	d8802a17 	ldw	r2,168(sp)
   22580:	00c00184 	movi	r3,6
   22584:	1880012e 	bgeu	r3,r2,2258c <___vfprintf_internal_r+0x1d68>
   22588:	1805883a 	mov	r2,r3
   2258c:	d8802b15 	stw	r2,172(sp)
   22590:	1000ef16 	blt	r2,zero,22950 <___vfprintf_internal_r+0x212c>
   22594:	040000f4 	movhi	r16,3
   22598:	d8802915 	stw	r2,164(sp)
   2259c:	dcc02e15 	stw	r19,184(sp)
   225a0:	d8002a15 	stw	zero,168(sp)
   225a4:	d8003215 	stw	zero,200(sp)
   225a8:	84036904 	addi	r16,r16,3492
   225ac:	0039883a 	mov	fp,zero
   225b0:	003a8006 	br	20fb4 <_gp+0xfffe60fc>
   225b4:	0021883a 	mov	r16,zero
   225b8:	003e0706 	br	21dd8 <_gp+0xfffe6f20>
   225bc:	d9002d17 	ldw	r4,180(sp)
   225c0:	d9801e04 	addi	r6,sp,120
   225c4:	b80b883a 	mov	r5,r23
   225c8:	00280040 	call	28004 <__sprint_r>
   225cc:	1039991e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   225d0:	d8802617 	ldw	r2,152(sp)
   225d4:	d9403317 	ldw	r5,204(sp)
   225d8:	d8c02017 	ldw	r3,128(sp)
   225dc:	da000404 	addi	r8,sp,16
   225e0:	2885c83a 	sub	r2,r5,r2
   225e4:	003dfb06 	br	21dd4 <_gp+0xfffe6f1c>
   225e8:	9080004c 	andi	r2,r18,1
   225ec:	103e8f1e 	bne	r2,zero,2202c <_gp+0xfffe7174>
   225f0:	d8802117 	ldw	r2,132(sp)
   225f4:	003e9e06 	br	22070 <_gp+0xfffe71b8>
   225f8:	1025883a 	mov	r18,r2
   225fc:	0039883a 	mov	fp,zero
   22600:	00800084 	movi	r2,2
   22604:	003fd306 	br	22554 <_gp+0xfffe769c>
   22608:	07000b44 	movi	fp,45
   2260c:	df002785 	stb	fp,158(sp)
   22610:	003a1b06 	br	20e80 <_gp+0xfffe5fc8>
   22614:	00c00b44 	movi	r3,45
   22618:	d8c02785 	stb	r3,158(sp)
   2261c:	d8802915 	stw	r2,164(sp)
   22620:	dc802c17 	ldw	r18,176(sp)
   22624:	d8002a15 	stw	zero,168(sp)
   22628:	07000b44 	movi	fp,45
   2262c:	003a5e06 	br	20fa8 <_gp+0xfffe60f0>
   22630:	040000f4 	movhi	r16,3
   22634:	84035e04 	addi	r16,r16,3448
   22638:	003f4706 	br	22358 <_gp+0xfffe74a0>
   2263c:	d9002e17 	ldw	r4,184(sp)
   22640:	d9402f17 	ldw	r5,188(sp)
   22644:	20800017 	ldw	r2,0(r4)
   22648:	21000104 	addi	r4,r4,4
   2264c:	d9002e15 	stw	r4,184(sp)
   22650:	11400015 	stw	r5,0(r2)
   22654:	0038ab06 	br	20904 <_gp+0xfffe5a4c>
   22658:	dd802617 	ldw	r22,152(sp)
   2265c:	00bfff44 	movi	r2,-3
   22660:	b0801c16 	blt	r22,r2,226d4 <___vfprintf_internal_r+0x1eb0>
   22664:	d9402a17 	ldw	r5,168(sp)
   22668:	2d801a16 	blt	r5,r22,226d4 <___vfprintf_internal_r+0x1eb0>
   2266c:	dd803215 	stw	r22,200(sp)
   22670:	003e8906 	br	22098 <_gp+0xfffe71e0>
   22674:	010000f4 	movhi	r4,3
   22678:	21036b84 	addi	r4,r4,3502
   2267c:	d9002c15 	stw	r4,176(sp)
   22680:	003c9106 	br	218c8 <_gp+0xfffe6a10>
   22684:	e005883a 	mov	r2,fp
   22688:	003e7906 	br	22070 <_gp+0xfffe71b8>
   2268c:	d9002a17 	ldw	r4,168(sp)
   22690:	df002783 	ldbu	fp,158(sp)
   22694:	dcc02e15 	stw	r19,184(sp)
   22698:	d9002915 	stw	r4,164(sp)
   2269c:	d9002b15 	stw	r4,172(sp)
   226a0:	d8002a15 	stw	zero,168(sp)
   226a4:	d8003215 	stw	zero,200(sp)
   226a8:	003a3b06 	br	20f98 <_gp+0xfffe60e0>
   226ac:	9080004c 	andi	r2,r18,1
   226b0:	0039883a 	mov	fp,zero
   226b4:	10000426 	beq	r2,zero,226c8 <___vfprintf_internal_r+0x1ea4>
   226b8:	00800c04 	movi	r2,48
   226bc:	dc001dc4 	addi	r16,sp,119
   226c0:	d8801dc5 	stb	r2,119(sp)
   226c4:	003b6406 	br	21458 <_gp+0xfffe65a0>
   226c8:	d8002b15 	stw	zero,172(sp)
   226cc:	dc001e04 	addi	r16,sp,120
   226d0:	003a2b06 	br	20f80 <_gp+0xfffe60c8>
   226d4:	8c7fff84 	addi	r17,r17,-2
   226d8:	b5bfffc4 	addi	r22,r22,-1
   226dc:	dd802615 	stw	r22,152(sp)
   226e0:	dc4022c5 	stb	r17,139(sp)
   226e4:	b000bf16 	blt	r22,zero,229e4 <___vfprintf_internal_r+0x21c0>
   226e8:	00800ac4 	movi	r2,43
   226ec:	d8802305 	stb	r2,140(sp)
   226f0:	00800244 	movi	r2,9
   226f4:	15807016 	blt	r2,r22,228b8 <___vfprintf_internal_r+0x2094>
   226f8:	00800c04 	movi	r2,48
   226fc:	b5800c04 	addi	r22,r22,48
   22700:	d8802345 	stb	r2,141(sp)
   22704:	dd802385 	stb	r22,142(sp)
   22708:	d88023c4 	addi	r2,sp,143
   2270c:	df0022c4 	addi	fp,sp,139
   22710:	d8c03317 	ldw	r3,204(sp)
   22714:	1739c83a 	sub	fp,r2,fp
   22718:	d9003317 	ldw	r4,204(sp)
   2271c:	e0c7883a 	add	r3,fp,r3
   22720:	df003a15 	stw	fp,232(sp)
   22724:	d8c02b15 	stw	r3,172(sp)
   22728:	00800044 	movi	r2,1
   2272c:	1100b30e 	bge	r2,r4,229fc <___vfprintf_internal_r+0x21d8>
   22730:	d8c02b17 	ldw	r3,172(sp)
   22734:	18c00044 	addi	r3,r3,1
   22738:	d8c02b15 	stw	r3,172(sp)
   2273c:	1805883a 	mov	r2,r3
   22740:	1800ac16 	blt	r3,zero,229f4 <___vfprintf_internal_r+0x21d0>
   22744:	d8003215 	stw	zero,200(sp)
   22748:	003e5d06 	br	220c0 <_gp+0xfffe7208>
   2274c:	d9002d17 	ldw	r4,180(sp)
   22750:	d9801e04 	addi	r6,sp,120
   22754:	b80b883a 	mov	r5,r23
   22758:	00280040 	call	28004 <__sprint_r>
   2275c:	1039351e 	bne	r2,zero,20c34 <_gp+0xfffe5d7c>
   22760:	dc402617 	ldw	r17,152(sp)
   22764:	d8c02017 	ldw	r3,128(sp)
   22768:	d8801f17 	ldw	r2,124(sp)
   2276c:	da000404 	addi	r8,sp,16
   22770:	003ed606 	br	222cc <_gp+0xfffe7414>
   22774:	182b883a 	mov	r21,r3
   22778:	d8002a15 	stw	zero,168(sp)
   2277c:	00388c06 	br	209b0 <_gp+0xfffe5af8>
   22780:	d8802a17 	ldw	r2,168(sp)
   22784:	103e071e 	bne	r2,zero,21fa4 <_gp+0xfffe70ec>
   22788:	dc002a15 	stw	r16,168(sp)
   2278c:	003e0506 	br	21fa4 <_gp+0xfffe70ec>
   22790:	d9002a17 	ldw	r4,168(sp)
   22794:	20c00044 	addi	r3,r4,1
   22798:	003e0f06 	br	21fd8 <_gp+0xfffe7120>
   2279c:	01400184 	movi	r5,6
   227a0:	d9402a15 	stw	r5,168(sp)
   227a4:	003dff06 	br	21fa4 <_gp+0xfffe70ec>
   227a8:	d8802104 	addi	r2,sp,132
   227ac:	d8800315 	stw	r2,12(sp)
   227b0:	d8802504 	addi	r2,sp,148
   227b4:	d8800215 	stw	r2,8(sp)
   227b8:	d8802604 	addi	r2,sp,152
   227bc:	d8800115 	stw	r2,4(sp)
   227c0:	d8802a17 	ldw	r2,168(sp)
   227c4:	d9403617 	ldw	r5,216(sp)
   227c8:	d9002d17 	ldw	r4,180(sp)
   227cc:	d8800015 	stw	r2,0(sp)
   227d0:	01c000c4 	movi	r7,3
   227d4:	980d883a 	mov	r6,r19
   227d8:	da003d15 	stw	r8,244(sp)
   227dc:	0022f540 	call	22f54 <_dtoa_r>
   227e0:	d8c02a17 	ldw	r3,168(sp)
   227e4:	da003d17 	ldw	r8,244(sp)
   227e8:	1021883a 	mov	r16,r2
   227ec:	10f9883a 	add	fp,r2,r3
   227f0:	81000007 	ldb	r4,0(r16)
   227f4:	00800c04 	movi	r2,48
   227f8:	20805e26 	beq	r4,r2,22974 <___vfprintf_internal_r+0x2150>
   227fc:	d8c02617 	ldw	r3,152(sp)
   22800:	e0f9883a 	add	fp,fp,r3
   22804:	003e0a06 	br	22030 <_gp+0xfffe7178>
   22808:	00c00b44 	movi	r3,45
   2280c:	24e0003c 	xorhi	r19,r4,32768
   22810:	d8c02905 	stb	r3,164(sp)
   22814:	003de906 	br	21fbc <_gp+0xfffe7104>
   22818:	d8c03217 	ldw	r3,200(sp)
   2281c:	00c07a0e 	bge	zero,r3,22a08 <___vfprintf_internal_r+0x21e4>
   22820:	00800044 	movi	r2,1
   22824:	d9003317 	ldw	r4,204(sp)
   22828:	1105883a 	add	r2,r2,r4
   2282c:	d8802b15 	stw	r2,172(sp)
   22830:	10004e16 	blt	r2,zero,2296c <___vfprintf_internal_r+0x2148>
   22834:	044019c4 	movi	r17,103
   22838:	003e2106 	br	220c0 <_gp+0xfffe7208>
   2283c:	d9002a17 	ldw	r4,168(sp)
   22840:	d8802104 	addi	r2,sp,132
   22844:	d8800315 	stw	r2,12(sp)
   22848:	d9000015 	stw	r4,0(sp)
   2284c:	d8802504 	addi	r2,sp,148
   22850:	d9403617 	ldw	r5,216(sp)
   22854:	d9002d17 	ldw	r4,180(sp)
   22858:	d8800215 	stw	r2,8(sp)
   2285c:	d8802604 	addi	r2,sp,152
   22860:	d8800115 	stw	r2,4(sp)
   22864:	01c000c4 	movi	r7,3
   22868:	980d883a 	mov	r6,r19
   2286c:	da003d15 	stw	r8,244(sp)
   22870:	0022f540 	call	22f54 <_dtoa_r>
   22874:	d8c02a17 	ldw	r3,168(sp)
   22878:	da003d17 	ldw	r8,244(sp)
   2287c:	1021883a 	mov	r16,r2
   22880:	00801184 	movi	r2,70
   22884:	80f9883a 	add	fp,r16,r3
   22888:	88bfd926 	beq	r17,r2,227f0 <_gp+0xfffe7938>
   2288c:	003de806 	br	22030 <_gp+0xfffe7178>
   22890:	d9002a17 	ldw	r4,168(sp)
   22894:	00c04d0e 	bge	zero,r3,229cc <___vfprintf_internal_r+0x21a8>
   22898:	2000441e 	bne	r4,zero,229ac <___vfprintf_internal_r+0x2188>
   2289c:	9480004c 	andi	r18,r18,1
   228a0:	9000421e 	bne	r18,zero,229ac <___vfprintf_internal_r+0x2188>
   228a4:	1805883a 	mov	r2,r3
   228a8:	18006f16 	blt	r3,zero,22a68 <___vfprintf_internal_r+0x2244>
   228ac:	d8c03217 	ldw	r3,200(sp)
   228b0:	d8c02b15 	stw	r3,172(sp)
   228b4:	003e0206 	br	220c0 <_gp+0xfffe7208>
   228b8:	df0022c4 	addi	fp,sp,139
   228bc:	dc002a15 	stw	r16,168(sp)
   228c0:	4027883a 	mov	r19,r8
   228c4:	e021883a 	mov	r16,fp
   228c8:	b009883a 	mov	r4,r22
   228cc:	01400284 	movi	r5,10
   228d0:	002ab900 	call	2ab90 <__modsi3>
   228d4:	10800c04 	addi	r2,r2,48
   228d8:	843fffc4 	addi	r16,r16,-1
   228dc:	b009883a 	mov	r4,r22
   228e0:	01400284 	movi	r5,10
   228e4:	80800005 	stb	r2,0(r16)
   228e8:	002ab0c0 	call	2ab0c <__divsi3>
   228ec:	102d883a 	mov	r22,r2
   228f0:	00800244 	movi	r2,9
   228f4:	15bff416 	blt	r2,r22,228c8 <_gp+0xfffe7a10>
   228f8:	9811883a 	mov	r8,r19
   228fc:	b0800c04 	addi	r2,r22,48
   22900:	8027883a 	mov	r19,r16
   22904:	997fffc4 	addi	r5,r19,-1
   22908:	98bfffc5 	stb	r2,-1(r19)
   2290c:	dc002a17 	ldw	r16,168(sp)
   22910:	2f006d2e 	bgeu	r5,fp,22ac8 <___vfprintf_internal_r+0x22a4>
   22914:	d9c02384 	addi	r7,sp,142
   22918:	3ccfc83a 	sub	r7,r7,r19
   2291c:	d9002344 	addi	r4,sp,141
   22920:	e1cf883a 	add	r7,fp,r7
   22924:	00000106 	br	2292c <___vfprintf_internal_r+0x2108>
   22928:	28800003 	ldbu	r2,0(r5)
   2292c:	20800005 	stb	r2,0(r4)
   22930:	21000044 	addi	r4,r4,1
   22934:	29400044 	addi	r5,r5,1
   22938:	393ffb1e 	bne	r7,r4,22928 <_gp+0xfffe7a70>
   2293c:	d8802304 	addi	r2,sp,140
   22940:	14c5c83a 	sub	r2,r2,r19
   22944:	d8c02344 	addi	r3,sp,141
   22948:	1885883a 	add	r2,r3,r2
   2294c:	003f7006 	br	22710 <_gp+0xfffe7858>
   22950:	0005883a 	mov	r2,zero
   22954:	003f0f06 	br	22594 <_gp+0xfffe76dc>
   22958:	d8c03217 	ldw	r3,200(sp)
   2295c:	18c00044 	addi	r3,r3,1
   22960:	d8c02b15 	stw	r3,172(sp)
   22964:	1805883a 	mov	r2,r3
   22968:	183fb20e 	bge	r3,zero,22834 <_gp+0xfffe797c>
   2296c:	0005883a 	mov	r2,zero
   22970:	003fb006 	br	22834 <_gp+0xfffe797c>
   22974:	d9003617 	ldw	r4,216(sp)
   22978:	000d883a 	mov	r6,zero
   2297c:	000f883a 	mov	r7,zero
   22980:	980b883a 	mov	r5,r19
   22984:	d8c03c15 	stw	r3,240(sp)
   22988:	da003d15 	stw	r8,244(sp)
   2298c:	002bf3c0 	call	2bf3c <__eqdf2>
   22990:	d8c03c17 	ldw	r3,240(sp)
   22994:	da003d17 	ldw	r8,244(sp)
   22998:	103f9826 	beq	r2,zero,227fc <_gp+0xfffe7944>
   2299c:	00800044 	movi	r2,1
   229a0:	10c7c83a 	sub	r3,r2,r3
   229a4:	d8c02615 	stw	r3,152(sp)
   229a8:	003f9506 	br	22800 <_gp+0xfffe7948>
   229ac:	d9002a17 	ldw	r4,168(sp)
   229b0:	d8c03217 	ldw	r3,200(sp)
   229b4:	20800044 	addi	r2,r4,1
   229b8:	1885883a 	add	r2,r3,r2
   229bc:	d8802b15 	stw	r2,172(sp)
   229c0:	103dbf0e 	bge	r2,zero,220c0 <_gp+0xfffe7208>
   229c4:	0005883a 	mov	r2,zero
   229c8:	003dbd06 	br	220c0 <_gp+0xfffe7208>
   229cc:	2000201e 	bne	r4,zero,22a50 <___vfprintf_internal_r+0x222c>
   229d0:	9480004c 	andi	r18,r18,1
   229d4:	90001e1e 	bne	r18,zero,22a50 <___vfprintf_internal_r+0x222c>
   229d8:	00800044 	movi	r2,1
   229dc:	d8802b15 	stw	r2,172(sp)
   229e0:	003db706 	br	220c0 <_gp+0xfffe7208>
   229e4:	00800b44 	movi	r2,45
   229e8:	05adc83a 	sub	r22,zero,r22
   229ec:	d8802305 	stb	r2,140(sp)
   229f0:	003f3f06 	br	226f0 <_gp+0xfffe7838>
   229f4:	0005883a 	mov	r2,zero
   229f8:	003f5206 	br	22744 <_gp+0xfffe788c>
   229fc:	90a4703a 	and	r18,r18,r2
   22a00:	903f4e26 	beq	r18,zero,2273c <_gp+0xfffe7884>
   22a04:	003f4a06 	br	22730 <_gp+0xfffe7878>
   22a08:	00800084 	movi	r2,2
   22a0c:	10c5c83a 	sub	r2,r2,r3
   22a10:	003f8406 	br	22824 <_gp+0xfffe796c>
   22a14:	d9402e17 	ldw	r5,184(sp)
   22a18:	d9002e17 	ldw	r4,184(sp)
   22a1c:	ac400043 	ldbu	r17,1(r21)
   22a20:	29400017 	ldw	r5,0(r5)
   22a24:	20800104 	addi	r2,r4,4
   22a28:	d8802e15 	stw	r2,184(sp)
   22a2c:	d9402a15 	stw	r5,168(sp)
   22a30:	182b883a 	mov	r21,r3
   22a34:	283e7b0e 	bge	r5,zero,22424 <_gp+0xfffe756c>
   22a38:	8c403fcc 	andi	r17,r17,255
   22a3c:	017fffc4 	movi	r5,-1
   22a40:	8c40201c 	xori	r17,r17,128
   22a44:	d9402a15 	stw	r5,168(sp)
   22a48:	8c7fe004 	addi	r17,r17,-128
   22a4c:	0037d706 	br	209ac <_gp+0xfffe5af4>
   22a50:	d8c02a17 	ldw	r3,168(sp)
   22a54:	18c00084 	addi	r3,r3,2
   22a58:	d8c02b15 	stw	r3,172(sp)
   22a5c:	1805883a 	mov	r2,r3
   22a60:	183d970e 	bge	r3,zero,220c0 <_gp+0xfffe7208>
   22a64:	003fd706 	br	229c4 <_gp+0xfffe7b0c>
   22a68:	0005883a 	mov	r2,zero
   22a6c:	003f8f06 	br	228ac <_gp+0xfffe79f4>
   22a70:	9080004c 	andi	r2,r18,1
   22a74:	103f821e 	bne	r2,zero,22880 <_gp+0xfffe79c8>
   22a78:	d8802117 	ldw	r2,132(sp)
   22a7c:	1405c83a 	sub	r2,r2,r16
   22a80:	d8803315 	stw	r2,204(sp)
   22a84:	b47ef426 	beq	r22,r17,22658 <_gp+0xfffe77a0>
   22a88:	dd802617 	ldw	r22,152(sp)
   22a8c:	003f1206 	br	226d8 <_gp+0xfffe7820>
   22a90:	d8c02b03 	ldbu	r3,172(sp)
   22a94:	d8c02785 	stb	r3,158(sp)
   22a98:	0038df06 	br	20e18 <_gp+0xfffe5f60>
   22a9c:	d8c02b03 	ldbu	r3,172(sp)
   22aa0:	d8c02785 	stb	r3,158(sp)
   22aa4:	0038aa06 	br	20d50 <_gp+0xfffe5e98>
   22aa8:	d8c02b03 	ldbu	r3,172(sp)
   22aac:	d8c02785 	stb	r3,158(sp)
   22ab0:	003a4306 	br	213c0 <_gp+0xfffe6508>
   22ab4:	d8c02b03 	ldbu	r3,172(sp)
   22ab8:	d8c02785 	stb	r3,158(sp)
   22abc:	003af506 	br	21694 <_gp+0xfffe67dc>
   22ac0:	0005883a 	mov	r2,zero
   22ac4:	003d7b06 	br	220b4 <_gp+0xfffe71fc>
   22ac8:	d8802344 	addi	r2,sp,141
   22acc:	003f1006 	br	22710 <_gp+0xfffe7858>
   22ad0:	d8c02b03 	ldbu	r3,172(sp)
   22ad4:	d8c02785 	stb	r3,158(sp)
   22ad8:	0038fd06 	br	20ed0 <_gp+0xfffe6018>
   22adc:	d8c02b03 	ldbu	r3,172(sp)
   22ae0:	d8c02785 	stb	r3,158(sp)
   22ae4:	003a9706 	br	21544 <_gp+0xfffe668c>
   22ae8:	d8c02b03 	ldbu	r3,172(sp)
   22aec:	d8c02785 	stb	r3,158(sp)
   22af0:	003a1806 	br	21354 <_gp+0xfffe649c>
   22af4:	d8c02b03 	ldbu	r3,172(sp)
   22af8:	d8c02785 	stb	r3,158(sp)
   22afc:	003abe06 	br	215f8 <_gp+0xfffe6740>

00022b00 <__vfprintf_internal>:
   22b00:	008000f4 	movhi	r2,3
   22b04:	108baf04 	addi	r2,r2,11964
   22b08:	300f883a 	mov	r7,r6
   22b0c:	280d883a 	mov	r6,r5
   22b10:	200b883a 	mov	r5,r4
   22b14:	11000017 	ldw	r4,0(r2)
   22b18:	00208241 	jmpi	20824 <___vfprintf_internal_r>

00022b1c <__sbprintf>:
   22b1c:	2880030b 	ldhu	r2,12(r5)
   22b20:	2ac01917 	ldw	r11,100(r5)
   22b24:	2a80038b 	ldhu	r10,14(r5)
   22b28:	2a400717 	ldw	r9,28(r5)
   22b2c:	2a000917 	ldw	r8,36(r5)
   22b30:	defee204 	addi	sp,sp,-1144
   22b34:	00c10004 	movi	r3,1024
   22b38:	dc011a15 	stw	r16,1128(sp)
   22b3c:	10bfff4c 	andi	r2,r2,65533
   22b40:	2821883a 	mov	r16,r5
   22b44:	d8cb883a 	add	r5,sp,r3
   22b48:	dc811c15 	stw	r18,1136(sp)
   22b4c:	dc411b15 	stw	r17,1132(sp)
   22b50:	dfc11d15 	stw	ra,1140(sp)
   22b54:	2025883a 	mov	r18,r4
   22b58:	d881030d 	sth	r2,1036(sp)
   22b5c:	dac11915 	stw	r11,1124(sp)
   22b60:	da81038d 	sth	r10,1038(sp)
   22b64:	da410715 	stw	r9,1052(sp)
   22b68:	da010915 	stw	r8,1060(sp)
   22b6c:	dec10015 	stw	sp,1024(sp)
   22b70:	dec10415 	stw	sp,1040(sp)
   22b74:	d8c10215 	stw	r3,1032(sp)
   22b78:	d8c10515 	stw	r3,1044(sp)
   22b7c:	d8010615 	stw	zero,1048(sp)
   22b80:	00208240 	call	20824 <___vfprintf_internal_r>
   22b84:	1023883a 	mov	r17,r2
   22b88:	10000416 	blt	r2,zero,22b9c <__sbprintf+0x80>
   22b8c:	d9410004 	addi	r5,sp,1024
   22b90:	9009883a 	mov	r4,r18
   22b94:	00247f80 	call	247f8 <_fflush_r>
   22b98:	10000d1e 	bne	r2,zero,22bd0 <__sbprintf+0xb4>
   22b9c:	d881030b 	ldhu	r2,1036(sp)
   22ba0:	1080100c 	andi	r2,r2,64
   22ba4:	10000326 	beq	r2,zero,22bb4 <__sbprintf+0x98>
   22ba8:	8080030b 	ldhu	r2,12(r16)
   22bac:	10801014 	ori	r2,r2,64
   22bb0:	8080030d 	sth	r2,12(r16)
   22bb4:	8805883a 	mov	r2,r17
   22bb8:	dfc11d17 	ldw	ra,1140(sp)
   22bbc:	dc811c17 	ldw	r18,1136(sp)
   22bc0:	dc411b17 	ldw	r17,1132(sp)
   22bc4:	dc011a17 	ldw	r16,1128(sp)
   22bc8:	dec11e04 	addi	sp,sp,1144
   22bcc:	f800283a 	ret
   22bd0:	047fffc4 	movi	r17,-1
   22bd4:	003ff106 	br	22b9c <_gp+0xfffe7ce4>

00022bd8 <__swsetup_r>:
   22bd8:	008000f4 	movhi	r2,3
   22bdc:	defffd04 	addi	sp,sp,-12
   22be0:	108baf04 	addi	r2,r2,11964
   22be4:	dc400115 	stw	r17,4(sp)
   22be8:	2023883a 	mov	r17,r4
   22bec:	11000017 	ldw	r4,0(r2)
   22bf0:	dc000015 	stw	r16,0(sp)
   22bf4:	dfc00215 	stw	ra,8(sp)
   22bf8:	2821883a 	mov	r16,r5
   22bfc:	20000226 	beq	r4,zero,22c08 <__swsetup_r+0x30>
   22c00:	20800e17 	ldw	r2,56(r4)
   22c04:	10003126 	beq	r2,zero,22ccc <__swsetup_r+0xf4>
   22c08:	8080030b 	ldhu	r2,12(r16)
   22c0c:	10c0020c 	andi	r3,r2,8
   22c10:	1009883a 	mov	r4,r2
   22c14:	18000f26 	beq	r3,zero,22c54 <__swsetup_r+0x7c>
   22c18:	80c00417 	ldw	r3,16(r16)
   22c1c:	18001526 	beq	r3,zero,22c74 <__swsetup_r+0x9c>
   22c20:	1100004c 	andi	r4,r2,1
   22c24:	20001c1e 	bne	r4,zero,22c98 <__swsetup_r+0xc0>
   22c28:	1080008c 	andi	r2,r2,2
   22c2c:	1000291e 	bne	r2,zero,22cd4 <__swsetup_r+0xfc>
   22c30:	80800517 	ldw	r2,20(r16)
   22c34:	80800215 	stw	r2,8(r16)
   22c38:	18001c26 	beq	r3,zero,22cac <__swsetup_r+0xd4>
   22c3c:	0005883a 	mov	r2,zero
   22c40:	dfc00217 	ldw	ra,8(sp)
   22c44:	dc400117 	ldw	r17,4(sp)
   22c48:	dc000017 	ldw	r16,0(sp)
   22c4c:	dec00304 	addi	sp,sp,12
   22c50:	f800283a 	ret
   22c54:	2080040c 	andi	r2,r4,16
   22c58:	10002e26 	beq	r2,zero,22d14 <__swsetup_r+0x13c>
   22c5c:	2080010c 	andi	r2,r4,4
   22c60:	10001e1e 	bne	r2,zero,22cdc <__swsetup_r+0x104>
   22c64:	80c00417 	ldw	r3,16(r16)
   22c68:	20800214 	ori	r2,r4,8
   22c6c:	8080030d 	sth	r2,12(r16)
   22c70:	183feb1e 	bne	r3,zero,22c20 <_gp+0xfffe7d68>
   22c74:	1100a00c 	andi	r4,r2,640
   22c78:	01408004 	movi	r5,512
   22c7c:	217fe826 	beq	r4,r5,22c20 <_gp+0xfffe7d68>
   22c80:	800b883a 	mov	r5,r16
   22c84:	8809883a 	mov	r4,r17
   22c88:	00257940 	call	25794 <__smakebuf_r>
   22c8c:	8080030b 	ldhu	r2,12(r16)
   22c90:	80c00417 	ldw	r3,16(r16)
   22c94:	003fe206 	br	22c20 <_gp+0xfffe7d68>
   22c98:	80800517 	ldw	r2,20(r16)
   22c9c:	80000215 	stw	zero,8(r16)
   22ca0:	0085c83a 	sub	r2,zero,r2
   22ca4:	80800615 	stw	r2,24(r16)
   22ca8:	183fe41e 	bne	r3,zero,22c3c <_gp+0xfffe7d84>
   22cac:	80c0030b 	ldhu	r3,12(r16)
   22cb0:	0005883a 	mov	r2,zero
   22cb4:	1900200c 	andi	r4,r3,128
   22cb8:	203fe126 	beq	r4,zero,22c40 <_gp+0xfffe7d88>
   22cbc:	18c01014 	ori	r3,r3,64
   22cc0:	80c0030d 	sth	r3,12(r16)
   22cc4:	00bfffc4 	movi	r2,-1
   22cc8:	003fdd06 	br	22c40 <_gp+0xfffe7d88>
   22ccc:	0024be40 	call	24be4 <__sinit>
   22cd0:	003fcd06 	br	22c08 <_gp+0xfffe7d50>
   22cd4:	0005883a 	mov	r2,zero
   22cd8:	003fd606 	br	22c34 <_gp+0xfffe7d7c>
   22cdc:	81400c17 	ldw	r5,48(r16)
   22ce0:	28000626 	beq	r5,zero,22cfc <__swsetup_r+0x124>
   22ce4:	80801004 	addi	r2,r16,64
   22ce8:	28800326 	beq	r5,r2,22cf8 <__swsetup_r+0x120>
   22cec:	8809883a 	mov	r4,r17
   22cf0:	0024d580 	call	24d58 <_free_r>
   22cf4:	8100030b 	ldhu	r4,12(r16)
   22cf8:	80000c15 	stw	zero,48(r16)
   22cfc:	80c00417 	ldw	r3,16(r16)
   22d00:	00bff6c4 	movi	r2,-37
   22d04:	1108703a 	and	r4,r2,r4
   22d08:	80000115 	stw	zero,4(r16)
   22d0c:	80c00015 	stw	r3,0(r16)
   22d10:	003fd506 	br	22c68 <_gp+0xfffe7db0>
   22d14:	00800244 	movi	r2,9
   22d18:	88800015 	stw	r2,0(r17)
   22d1c:	20801014 	ori	r2,r4,64
   22d20:	8080030d 	sth	r2,12(r16)
   22d24:	00bfffc4 	movi	r2,-1
   22d28:	003fc506 	br	22c40 <_gp+0xfffe7d88>

00022d2c <quorem>:
   22d2c:	defff204 	addi	sp,sp,-56
   22d30:	ddc00b15 	stw	r23,44(sp)
   22d34:	20800417 	ldw	r2,16(r4)
   22d38:	2dc00417 	ldw	r23,16(r5)
   22d3c:	dfc00d15 	stw	ra,52(sp)
   22d40:	df000c15 	stw	fp,48(sp)
   22d44:	dd800a15 	stw	r22,40(sp)
   22d48:	dd400915 	stw	r21,36(sp)
   22d4c:	dd000815 	stw	r20,32(sp)
   22d50:	dcc00715 	stw	r19,28(sp)
   22d54:	dc800615 	stw	r18,24(sp)
   22d58:	dc400515 	stw	r17,20(sp)
   22d5c:	dc000415 	stw	r16,16(sp)
   22d60:	15c07a16 	blt	r2,r23,22f4c <quorem+0x220>
   22d64:	bdffffc4 	addi	r23,r23,-1
   22d68:	bde9883a 	add	r20,r23,r23
   22d6c:	28c00504 	addi	r3,r5,20
   22d70:	a529883a 	add	r20,r20,r20
   22d74:	1d39883a 	add	fp,r3,r20
   22d78:	24c00504 	addi	r19,r4,20
   22d7c:	d9400215 	stw	r5,8(sp)
   22d80:	9d29883a 	add	r20,r19,r20
   22d84:	e1400017 	ldw	r5,0(fp)
   22d88:	d9000015 	stw	r4,0(sp)
   22d8c:	a1000017 	ldw	r4,0(r20)
   22d90:	29400044 	addi	r5,r5,1
   22d94:	d8c00115 	stw	r3,4(sp)
   22d98:	dd000315 	stw	r20,12(sp)
   22d9c:	002ac040 	call	2ac04 <__udivsi3>
   22da0:	1025883a 	mov	r18,r2
   22da4:	10003026 	beq	r2,zero,22e68 <quorem+0x13c>
   22da8:	dc400117 	ldw	r17,4(sp)
   22dac:	9829883a 	mov	r20,r19
   22db0:	002d883a 	mov	r22,zero
   22db4:	0021883a 	mov	r16,zero
   22db8:	8d400017 	ldw	r21,0(r17)
   22dbc:	900b883a 	mov	r5,r18
   22dc0:	8c400104 	addi	r17,r17,4
   22dc4:	a93fffcc 	andi	r4,r21,65535
   22dc8:	00206240 	call	20624 <__mulsi3>
   22dcc:	a808d43a 	srli	r4,r21,16
   22dd0:	900b883a 	mov	r5,r18
   22dd4:	15ad883a 	add	r22,r2,r22
   22dd8:	00206240 	call	20624 <__mulsi3>
   22ddc:	a1000017 	ldw	r4,0(r20)
   22de0:	b00cd43a 	srli	r6,r22,16
   22de4:	b0ffffcc 	andi	r3,r22,65535
   22de8:	217fffcc 	andi	r5,r4,65535
   22dec:	2c21883a 	add	r16,r5,r16
   22df0:	80c7c83a 	sub	r3,r16,r3
   22df4:	2008d43a 	srli	r4,r4,16
   22df8:	1185883a 	add	r2,r2,r6
   22dfc:	1821d43a 	srai	r16,r3,16
   22e00:	117fffcc 	andi	r5,r2,65535
   22e04:	2149c83a 	sub	r4,r4,r5
   22e08:	2421883a 	add	r16,r4,r16
   22e0c:	8008943a 	slli	r4,r16,16
   22e10:	18ffffcc 	andi	r3,r3,65535
   22e14:	102cd43a 	srli	r22,r2,16
   22e18:	20c8b03a 	or	r4,r4,r3
   22e1c:	a1000015 	stw	r4,0(r20)
   22e20:	8021d43a 	srai	r16,r16,16
   22e24:	a5000104 	addi	r20,r20,4
   22e28:	e47fe32e 	bgeu	fp,r17,22db8 <_gp+0xfffe7f00>
   22e2c:	d8c00317 	ldw	r3,12(sp)
   22e30:	18800017 	ldw	r2,0(r3)
   22e34:	10000c1e 	bne	r2,zero,22e68 <quorem+0x13c>
   22e38:	18bfff04 	addi	r2,r3,-4
   22e3c:	9880082e 	bgeu	r19,r2,22e60 <quorem+0x134>
   22e40:	18ffff17 	ldw	r3,-4(r3)
   22e44:	18000326 	beq	r3,zero,22e54 <quorem+0x128>
   22e48:	00000506 	br	22e60 <quorem+0x134>
   22e4c:	10c00017 	ldw	r3,0(r2)
   22e50:	1800031e 	bne	r3,zero,22e60 <quorem+0x134>
   22e54:	10bfff04 	addi	r2,r2,-4
   22e58:	bdffffc4 	addi	r23,r23,-1
   22e5c:	98bffb36 	bltu	r19,r2,22e4c <_gp+0xfffe7f94>
   22e60:	d8c00017 	ldw	r3,0(sp)
   22e64:	1dc00415 	stw	r23,16(r3)
   22e68:	d9400217 	ldw	r5,8(sp)
   22e6c:	d9000017 	ldw	r4,0(sp)
   22e70:	0026f900 	call	26f90 <__mcmp>
   22e74:	10002816 	blt	r2,zero,22f18 <quorem+0x1ec>
   22e78:	dc400117 	ldw	r17,4(sp)
   22e7c:	94800044 	addi	r18,r18,1
   22e80:	980d883a 	mov	r6,r19
   22e84:	0007883a 	mov	r3,zero
   22e88:	31000017 	ldw	r4,0(r6)
   22e8c:	89400017 	ldw	r5,0(r17)
   22e90:	31800104 	addi	r6,r6,4
   22e94:	20bfffcc 	andi	r2,r4,65535
   22e98:	10c7883a 	add	r3,r2,r3
   22e9c:	28bfffcc 	andi	r2,r5,65535
   22ea0:	1885c83a 	sub	r2,r3,r2
   22ea4:	280ad43a 	srli	r5,r5,16
   22ea8:	2008d43a 	srli	r4,r4,16
   22eac:	1007d43a 	srai	r3,r2,16
   22eb0:	10bfffcc 	andi	r2,r2,65535
   22eb4:	2149c83a 	sub	r4,r4,r5
   22eb8:	20c9883a 	add	r4,r4,r3
   22ebc:	200a943a 	slli	r5,r4,16
   22ec0:	8c400104 	addi	r17,r17,4
   22ec4:	2007d43a 	srai	r3,r4,16
   22ec8:	2884b03a 	or	r2,r5,r2
   22ecc:	30bfff15 	stw	r2,-4(r6)
   22ed0:	e47fed2e 	bgeu	fp,r17,22e88 <_gp+0xfffe7fd0>
   22ed4:	bdc5883a 	add	r2,r23,r23
   22ed8:	1085883a 	add	r2,r2,r2
   22edc:	9887883a 	add	r3,r19,r2
   22ee0:	18800017 	ldw	r2,0(r3)
   22ee4:	10000c1e 	bne	r2,zero,22f18 <quorem+0x1ec>
   22ee8:	18bfff04 	addi	r2,r3,-4
   22eec:	9880082e 	bgeu	r19,r2,22f10 <quorem+0x1e4>
   22ef0:	18ffff17 	ldw	r3,-4(r3)
   22ef4:	18000326 	beq	r3,zero,22f04 <quorem+0x1d8>
   22ef8:	00000506 	br	22f10 <quorem+0x1e4>
   22efc:	10c00017 	ldw	r3,0(r2)
   22f00:	1800031e 	bne	r3,zero,22f10 <quorem+0x1e4>
   22f04:	10bfff04 	addi	r2,r2,-4
   22f08:	bdffffc4 	addi	r23,r23,-1
   22f0c:	98bffb36 	bltu	r19,r2,22efc <_gp+0xfffe8044>
   22f10:	d8c00017 	ldw	r3,0(sp)
   22f14:	1dc00415 	stw	r23,16(r3)
   22f18:	9005883a 	mov	r2,r18
   22f1c:	dfc00d17 	ldw	ra,52(sp)
   22f20:	df000c17 	ldw	fp,48(sp)
   22f24:	ddc00b17 	ldw	r23,44(sp)
   22f28:	dd800a17 	ldw	r22,40(sp)
   22f2c:	dd400917 	ldw	r21,36(sp)
   22f30:	dd000817 	ldw	r20,32(sp)
   22f34:	dcc00717 	ldw	r19,28(sp)
   22f38:	dc800617 	ldw	r18,24(sp)
   22f3c:	dc400517 	ldw	r17,20(sp)
   22f40:	dc000417 	ldw	r16,16(sp)
   22f44:	dec00e04 	addi	sp,sp,56
   22f48:	f800283a 	ret
   22f4c:	0005883a 	mov	r2,zero
   22f50:	003ff206 	br	22f1c <_gp+0xfffe8064>

00022f54 <_dtoa_r>:
   22f54:	20801017 	ldw	r2,64(r4)
   22f58:	deffde04 	addi	sp,sp,-136
   22f5c:	df002015 	stw	fp,128(sp)
   22f60:	dcc01b15 	stw	r19,108(sp)
   22f64:	dc801a15 	stw	r18,104(sp)
   22f68:	dc401915 	stw	r17,100(sp)
   22f6c:	dc001815 	stw	r16,96(sp)
   22f70:	dfc02115 	stw	ra,132(sp)
   22f74:	ddc01f15 	stw	r23,124(sp)
   22f78:	dd801e15 	stw	r22,120(sp)
   22f7c:	dd401d15 	stw	r21,116(sp)
   22f80:	dd001c15 	stw	r20,112(sp)
   22f84:	d9c00315 	stw	r7,12(sp)
   22f88:	2039883a 	mov	fp,r4
   22f8c:	3023883a 	mov	r17,r6
   22f90:	2825883a 	mov	r18,r5
   22f94:	dc002417 	ldw	r16,144(sp)
   22f98:	3027883a 	mov	r19,r6
   22f9c:	10000826 	beq	r2,zero,22fc0 <_dtoa_r+0x6c>
   22fa0:	21801117 	ldw	r6,68(r4)
   22fa4:	00c00044 	movi	r3,1
   22fa8:	100b883a 	mov	r5,r2
   22fac:	1986983a 	sll	r3,r3,r6
   22fb0:	11800115 	stw	r6,4(r2)
   22fb4:	10c00215 	stw	r3,8(r2)
   22fb8:	00266b40 	call	266b4 <_Bfree>
   22fbc:	e0001015 	stw	zero,64(fp)
   22fc0:	88002e16 	blt	r17,zero,2307c <_dtoa_r+0x128>
   22fc4:	80000015 	stw	zero,0(r16)
   22fc8:	889ffc2c 	andhi	r2,r17,32752
   22fcc:	00dffc34 	movhi	r3,32752
   22fd0:	10c01c26 	beq	r2,r3,23044 <_dtoa_r+0xf0>
   22fd4:	000d883a 	mov	r6,zero
   22fd8:	000f883a 	mov	r7,zero
   22fdc:	9009883a 	mov	r4,r18
   22fe0:	980b883a 	mov	r5,r19
   22fe4:	002bf3c0 	call	2bf3c <__eqdf2>
   22fe8:	10002b1e 	bne	r2,zero,23098 <_dtoa_r+0x144>
   22fec:	d9c02317 	ldw	r7,140(sp)
   22ff0:	00800044 	movi	r2,1
   22ff4:	38800015 	stw	r2,0(r7)
   22ff8:	d8802517 	ldw	r2,148(sp)
   22ffc:	10019e26 	beq	r2,zero,23678 <_dtoa_r+0x724>
   23000:	d8c02517 	ldw	r3,148(sp)
   23004:	008000f4 	movhi	r2,3
   23008:	10836b44 	addi	r2,r2,3501
   2300c:	18800015 	stw	r2,0(r3)
   23010:	10bfffc4 	addi	r2,r2,-1
   23014:	dfc02117 	ldw	ra,132(sp)
   23018:	df002017 	ldw	fp,128(sp)
   2301c:	ddc01f17 	ldw	r23,124(sp)
   23020:	dd801e17 	ldw	r22,120(sp)
   23024:	dd401d17 	ldw	r21,116(sp)
   23028:	dd001c17 	ldw	r20,112(sp)
   2302c:	dcc01b17 	ldw	r19,108(sp)
   23030:	dc801a17 	ldw	r18,104(sp)
   23034:	dc401917 	ldw	r17,100(sp)
   23038:	dc001817 	ldw	r16,96(sp)
   2303c:	dec02204 	addi	sp,sp,136
   23040:	f800283a 	ret
   23044:	d8c02317 	ldw	r3,140(sp)
   23048:	0089c3c4 	movi	r2,9999
   2304c:	18800015 	stw	r2,0(r3)
   23050:	90017726 	beq	r18,zero,23630 <_dtoa_r+0x6dc>
   23054:	008000f4 	movhi	r2,3
   23058:	10837704 	addi	r2,r2,3548
   2305c:	d9002517 	ldw	r4,148(sp)
   23060:	203fec26 	beq	r4,zero,23014 <_gp+0xfffe815c>
   23064:	10c000c7 	ldb	r3,3(r2)
   23068:	1801781e 	bne	r3,zero,2364c <_dtoa_r+0x6f8>
   2306c:	10c000c4 	addi	r3,r2,3
   23070:	d9802517 	ldw	r6,148(sp)
   23074:	30c00015 	stw	r3,0(r6)
   23078:	003fe606 	br	23014 <_gp+0xfffe815c>
   2307c:	04e00034 	movhi	r19,32768
   23080:	9cffffc4 	addi	r19,r19,-1
   23084:	00800044 	movi	r2,1
   23088:	8ce6703a 	and	r19,r17,r19
   2308c:	80800015 	stw	r2,0(r16)
   23090:	9823883a 	mov	r17,r19
   23094:	003fcc06 	br	22fc8 <_gp+0xfffe8110>
   23098:	d8800204 	addi	r2,sp,8
   2309c:	d8800015 	stw	r2,0(sp)
   230a0:	d9c00104 	addi	r7,sp,4
   230a4:	900b883a 	mov	r5,r18
   230a8:	980d883a 	mov	r6,r19
   230ac:	e009883a 	mov	r4,fp
   230b0:	8820d53a 	srli	r16,r17,20
   230b4:	002735c0 	call	2735c <__d2b>
   230b8:	d8800915 	stw	r2,36(sp)
   230bc:	8001651e 	bne	r16,zero,23654 <_dtoa_r+0x700>
   230c0:	dd800217 	ldw	r22,8(sp)
   230c4:	dc000117 	ldw	r16,4(sp)
   230c8:	00800804 	movi	r2,32
   230cc:	b421883a 	add	r16,r22,r16
   230d0:	80c10c84 	addi	r3,r16,1074
   230d4:	10c2d10e 	bge	r2,r3,23c1c <_dtoa_r+0xcc8>
   230d8:	00801004 	movi	r2,64
   230dc:	81010484 	addi	r4,r16,1042
   230e0:	10c7c83a 	sub	r3,r2,r3
   230e4:	9108d83a 	srl	r4,r18,r4
   230e8:	88e2983a 	sll	r17,r17,r3
   230ec:	2448b03a 	or	r4,r4,r17
   230f0:	002d4580 	call	2d458 <__floatunsidf>
   230f4:	017f8434 	movhi	r5,65040
   230f8:	01800044 	movi	r6,1
   230fc:	1009883a 	mov	r4,r2
   23100:	194b883a 	add	r5,r3,r5
   23104:	843fffc4 	addi	r16,r16,-1
   23108:	d9801115 	stw	r6,68(sp)
   2310c:	000d883a 	mov	r6,zero
   23110:	01cffe34 	movhi	r7,16376
   23114:	002ca000 	call	2ca00 <__subdf3>
   23118:	0198dbf4 	movhi	r6,25455
   2311c:	01cff4f4 	movhi	r7,16339
   23120:	3190d844 	addi	r6,r6,17249
   23124:	39e1e9c4 	addi	r7,r7,-30809
   23128:	1009883a 	mov	r4,r2
   2312c:	180b883a 	mov	r5,r3
   23130:	002c1940 	call	2c194 <__muldf3>
   23134:	01a2d874 	movhi	r6,35681
   23138:	01cff1f4 	movhi	r7,16327
   2313c:	31b22cc4 	addi	r6,r6,-14157
   23140:	39e28a04 	addi	r7,r7,-30168
   23144:	180b883a 	mov	r5,r3
   23148:	1009883a 	mov	r4,r2
   2314c:	002acc00 	call	2acc0 <__adddf3>
   23150:	8009883a 	mov	r4,r16
   23154:	1029883a 	mov	r20,r2
   23158:	1823883a 	mov	r17,r3
   2315c:	002d37c0 	call	2d37c <__floatsidf>
   23160:	019427f4 	movhi	r6,20639
   23164:	01cff4f4 	movhi	r7,16339
   23168:	319e7ec4 	addi	r6,r6,31227
   2316c:	39d104c4 	addi	r7,r7,17427
   23170:	1009883a 	mov	r4,r2
   23174:	180b883a 	mov	r5,r3
   23178:	002c1940 	call	2c194 <__muldf3>
   2317c:	100d883a 	mov	r6,r2
   23180:	180f883a 	mov	r7,r3
   23184:	a009883a 	mov	r4,r20
   23188:	880b883a 	mov	r5,r17
   2318c:	002acc00 	call	2acc0 <__adddf3>
   23190:	1009883a 	mov	r4,r2
   23194:	180b883a 	mov	r5,r3
   23198:	1029883a 	mov	r20,r2
   2319c:	1823883a 	mov	r17,r3
   231a0:	002d2fc0 	call	2d2fc <__fixdfsi>
   231a4:	000d883a 	mov	r6,zero
   231a8:	000f883a 	mov	r7,zero
   231ac:	a009883a 	mov	r4,r20
   231b0:	880b883a 	mov	r5,r17
   231b4:	d8800515 	stw	r2,20(sp)
   231b8:	002c0a00 	call	2c0a0 <__ledf2>
   231bc:	10028716 	blt	r2,zero,23bdc <_dtoa_r+0xc88>
   231c0:	d8c00517 	ldw	r3,20(sp)
   231c4:	00800584 	movi	r2,22
   231c8:	10c27536 	bltu	r2,r3,23ba0 <_dtoa_r+0xc4c>
   231cc:	180490fa 	slli	r2,r3,3
   231d0:	00c000f4 	movhi	r3,3
   231d4:	18c39304 	addi	r3,r3,3660
   231d8:	1885883a 	add	r2,r3,r2
   231dc:	11000017 	ldw	r4,0(r2)
   231e0:	11400117 	ldw	r5,4(r2)
   231e4:	900d883a 	mov	r6,r18
   231e8:	980f883a 	mov	r7,r19
   231ec:	002bfc40 	call	2bfc4 <__gedf2>
   231f0:	00828d0e 	bge	zero,r2,23c28 <_dtoa_r+0xcd4>
   231f4:	d9000517 	ldw	r4,20(sp)
   231f8:	d8000e15 	stw	zero,56(sp)
   231fc:	213fffc4 	addi	r4,r4,-1
   23200:	d9000515 	stw	r4,20(sp)
   23204:	b42dc83a 	sub	r22,r22,r16
   23208:	b5bfffc4 	addi	r22,r22,-1
   2320c:	b0026f16 	blt	r22,zero,23bcc <_dtoa_r+0xc78>
   23210:	d8000815 	stw	zero,32(sp)
   23214:	d9c00517 	ldw	r7,20(sp)
   23218:	38026416 	blt	r7,zero,23bac <_dtoa_r+0xc58>
   2321c:	b1ed883a 	add	r22,r22,r7
   23220:	d9c00d15 	stw	r7,52(sp)
   23224:	d8000a15 	stw	zero,40(sp)
   23228:	d9800317 	ldw	r6,12(sp)
   2322c:	00800244 	movi	r2,9
   23230:	11811436 	bltu	r2,r6,23684 <_dtoa_r+0x730>
   23234:	00800144 	movi	r2,5
   23238:	1184e10e 	bge	r2,r6,245c0 <_dtoa_r+0x166c>
   2323c:	31bfff04 	addi	r6,r6,-4
   23240:	d9800315 	stw	r6,12(sp)
   23244:	0023883a 	mov	r17,zero
   23248:	d9800317 	ldw	r6,12(sp)
   2324c:	008000c4 	movi	r2,3
   23250:	30836726 	beq	r6,r2,23ff0 <_dtoa_r+0x109c>
   23254:	1183410e 	bge	r2,r6,23f5c <_dtoa_r+0x1008>
   23258:	d9c00317 	ldw	r7,12(sp)
   2325c:	00800104 	movi	r2,4
   23260:	38827c26 	beq	r7,r2,23c54 <_dtoa_r+0xd00>
   23264:	00800144 	movi	r2,5
   23268:	3884c41e 	bne	r7,r2,2457c <_dtoa_r+0x1628>
   2326c:	00800044 	movi	r2,1
   23270:	d8800b15 	stw	r2,44(sp)
   23274:	d8c00517 	ldw	r3,20(sp)
   23278:	d9002217 	ldw	r4,136(sp)
   2327c:	1907883a 	add	r3,r3,r4
   23280:	19800044 	addi	r6,r3,1
   23284:	d8c00c15 	stw	r3,48(sp)
   23288:	d9800615 	stw	r6,24(sp)
   2328c:	0183a40e 	bge	zero,r6,24120 <_dtoa_r+0x11cc>
   23290:	d9800617 	ldw	r6,24(sp)
   23294:	3021883a 	mov	r16,r6
   23298:	e0001115 	stw	zero,68(fp)
   2329c:	008005c4 	movi	r2,23
   232a0:	1184c92e 	bgeu	r2,r6,245c8 <_dtoa_r+0x1674>
   232a4:	00c00044 	movi	r3,1
   232a8:	00800104 	movi	r2,4
   232ac:	1085883a 	add	r2,r2,r2
   232b0:	11000504 	addi	r4,r2,20
   232b4:	180b883a 	mov	r5,r3
   232b8:	18c00044 	addi	r3,r3,1
   232bc:	313ffb2e 	bgeu	r6,r4,232ac <_gp+0xfffe83f4>
   232c0:	e1401115 	stw	r5,68(fp)
   232c4:	e009883a 	mov	r4,fp
   232c8:	002660c0 	call	2660c <_Balloc>
   232cc:	d8800715 	stw	r2,28(sp)
   232d0:	e0801015 	stw	r2,64(fp)
   232d4:	00800384 	movi	r2,14
   232d8:	1400f736 	bltu	r2,r16,236b8 <_dtoa_r+0x764>
   232dc:	8800f626 	beq	r17,zero,236b8 <_dtoa_r+0x764>
   232e0:	d9c00517 	ldw	r7,20(sp)
   232e4:	01c39a0e 	bge	zero,r7,24150 <_dtoa_r+0x11fc>
   232e8:	388003cc 	andi	r2,r7,15
   232ec:	100490fa 	slli	r2,r2,3
   232f0:	382bd13a 	srai	r21,r7,4
   232f4:	00c000f4 	movhi	r3,3
   232f8:	18c39304 	addi	r3,r3,3660
   232fc:	1885883a 	add	r2,r3,r2
   23300:	a8c0040c 	andi	r3,r21,16
   23304:	12400017 	ldw	r9,0(r2)
   23308:	12000117 	ldw	r8,4(r2)
   2330c:	18037926 	beq	r3,zero,240f4 <_dtoa_r+0x11a0>
   23310:	008000f4 	movhi	r2,3
   23314:	10838904 	addi	r2,r2,3620
   23318:	11800817 	ldw	r6,32(r2)
   2331c:	11c00917 	ldw	r7,36(r2)
   23320:	9009883a 	mov	r4,r18
   23324:	980b883a 	mov	r5,r19
   23328:	da001715 	stw	r8,92(sp)
   2332c:	da401615 	stw	r9,88(sp)
   23330:	002b56c0 	call	2b56c <__divdf3>
   23334:	da001717 	ldw	r8,92(sp)
   23338:	da401617 	ldw	r9,88(sp)
   2333c:	ad4003cc 	andi	r21,r21,15
   23340:	040000c4 	movi	r16,3
   23344:	1023883a 	mov	r17,r2
   23348:	1829883a 	mov	r20,r3
   2334c:	a8001126 	beq	r21,zero,23394 <_dtoa_r+0x440>
   23350:	05c000f4 	movhi	r23,3
   23354:	bdc38904 	addi	r23,r23,3620
   23358:	4805883a 	mov	r2,r9
   2335c:	4007883a 	mov	r3,r8
   23360:	a980004c 	andi	r6,r21,1
   23364:	1009883a 	mov	r4,r2
   23368:	a82bd07a 	srai	r21,r21,1
   2336c:	180b883a 	mov	r5,r3
   23370:	30000426 	beq	r6,zero,23384 <_dtoa_r+0x430>
   23374:	b9800017 	ldw	r6,0(r23)
   23378:	b9c00117 	ldw	r7,4(r23)
   2337c:	84000044 	addi	r16,r16,1
   23380:	002c1940 	call	2c194 <__muldf3>
   23384:	bdc00204 	addi	r23,r23,8
   23388:	a83ff51e 	bne	r21,zero,23360 <_gp+0xfffe84a8>
   2338c:	1013883a 	mov	r9,r2
   23390:	1811883a 	mov	r8,r3
   23394:	480d883a 	mov	r6,r9
   23398:	400f883a 	mov	r7,r8
   2339c:	8809883a 	mov	r4,r17
   233a0:	a00b883a 	mov	r5,r20
   233a4:	002b56c0 	call	2b56c <__divdf3>
   233a8:	d8800f15 	stw	r2,60(sp)
   233ac:	d8c01015 	stw	r3,64(sp)
   233b0:	d8c00e17 	ldw	r3,56(sp)
   233b4:	18000626 	beq	r3,zero,233d0 <_dtoa_r+0x47c>
   233b8:	d9000f17 	ldw	r4,60(sp)
   233bc:	d9401017 	ldw	r5,64(sp)
   233c0:	000d883a 	mov	r6,zero
   233c4:	01cffc34 	movhi	r7,16368
   233c8:	002c0a00 	call	2c0a0 <__ledf2>
   233cc:	10040b16 	blt	r2,zero,243fc <_dtoa_r+0x14a8>
   233d0:	8009883a 	mov	r4,r16
   233d4:	002d37c0 	call	2d37c <__floatsidf>
   233d8:	d9800f17 	ldw	r6,60(sp)
   233dc:	d9c01017 	ldw	r7,64(sp)
   233e0:	1009883a 	mov	r4,r2
   233e4:	180b883a 	mov	r5,r3
   233e8:	002c1940 	call	2c194 <__muldf3>
   233ec:	000d883a 	mov	r6,zero
   233f0:	01d00734 	movhi	r7,16412
   233f4:	1009883a 	mov	r4,r2
   233f8:	180b883a 	mov	r5,r3
   233fc:	002acc00 	call	2acc0 <__adddf3>
   23400:	1021883a 	mov	r16,r2
   23404:	d8800617 	ldw	r2,24(sp)
   23408:	047f3034 	movhi	r17,64704
   2340c:	1c63883a 	add	r17,r3,r17
   23410:	10031826 	beq	r2,zero,24074 <_dtoa_r+0x1120>
   23414:	d8c00517 	ldw	r3,20(sp)
   23418:	db000617 	ldw	r12,24(sp)
   2341c:	d8c01315 	stw	r3,76(sp)
   23420:	d9000b17 	ldw	r4,44(sp)
   23424:	20038f26 	beq	r4,zero,24264 <_dtoa_r+0x1310>
   23428:	60bfffc4 	addi	r2,r12,-1
   2342c:	100490fa 	slli	r2,r2,3
   23430:	00c000f4 	movhi	r3,3
   23434:	18c39304 	addi	r3,r3,3660
   23438:	1885883a 	add	r2,r3,r2
   2343c:	11800017 	ldw	r6,0(r2)
   23440:	11c00117 	ldw	r7,4(r2)
   23444:	d8800717 	ldw	r2,28(sp)
   23448:	0009883a 	mov	r4,zero
   2344c:	014ff834 	movhi	r5,16352
   23450:	db001615 	stw	r12,88(sp)
   23454:	15c00044 	addi	r23,r2,1
   23458:	002b56c0 	call	2b56c <__divdf3>
   2345c:	800d883a 	mov	r6,r16
   23460:	880f883a 	mov	r7,r17
   23464:	1009883a 	mov	r4,r2
   23468:	180b883a 	mov	r5,r3
   2346c:	002ca000 	call	2ca00 <__subdf3>
   23470:	d9401017 	ldw	r5,64(sp)
   23474:	d9000f17 	ldw	r4,60(sp)
   23478:	102b883a 	mov	r21,r2
   2347c:	d8c01215 	stw	r3,72(sp)
   23480:	002d2fc0 	call	2d2fc <__fixdfsi>
   23484:	1009883a 	mov	r4,r2
   23488:	1029883a 	mov	r20,r2
   2348c:	002d37c0 	call	2d37c <__floatsidf>
   23490:	d9000f17 	ldw	r4,60(sp)
   23494:	d9401017 	ldw	r5,64(sp)
   23498:	100d883a 	mov	r6,r2
   2349c:	180f883a 	mov	r7,r3
   234a0:	002ca000 	call	2ca00 <__subdf3>
   234a4:	1823883a 	mov	r17,r3
   234a8:	d8c00717 	ldw	r3,28(sp)
   234ac:	d9401217 	ldw	r5,72(sp)
   234b0:	a2000c04 	addi	r8,r20,48
   234b4:	1021883a 	mov	r16,r2
   234b8:	1a000005 	stb	r8,0(r3)
   234bc:	800d883a 	mov	r6,r16
   234c0:	880f883a 	mov	r7,r17
   234c4:	a809883a 	mov	r4,r21
   234c8:	4029883a 	mov	r20,r8
   234cc:	002bfc40 	call	2bfc4 <__gedf2>
   234d0:	00841d16 	blt	zero,r2,24548 <_dtoa_r+0x15f4>
   234d4:	800d883a 	mov	r6,r16
   234d8:	880f883a 	mov	r7,r17
   234dc:	0009883a 	mov	r4,zero
   234e0:	014ffc34 	movhi	r5,16368
   234e4:	002ca000 	call	2ca00 <__subdf3>
   234e8:	d9401217 	ldw	r5,72(sp)
   234ec:	100d883a 	mov	r6,r2
   234f0:	180f883a 	mov	r7,r3
   234f4:	a809883a 	mov	r4,r21
   234f8:	002bfc40 	call	2bfc4 <__gedf2>
   234fc:	db001617 	ldw	r12,88(sp)
   23500:	00840e16 	blt	zero,r2,2453c <_dtoa_r+0x15e8>
   23504:	00800044 	movi	r2,1
   23508:	13006b0e 	bge	r2,r12,236b8 <_dtoa_r+0x764>
   2350c:	d9000717 	ldw	r4,28(sp)
   23510:	dd800f15 	stw	r22,60(sp)
   23514:	dcc01015 	stw	r19,64(sp)
   23518:	2319883a 	add	r12,r4,r12
   2351c:	dcc01217 	ldw	r19,72(sp)
   23520:	602d883a 	mov	r22,r12
   23524:	dc801215 	stw	r18,72(sp)
   23528:	b825883a 	mov	r18,r23
   2352c:	00000906 	br	23554 <_dtoa_r+0x600>
   23530:	002ca000 	call	2ca00 <__subdf3>
   23534:	a80d883a 	mov	r6,r21
   23538:	980f883a 	mov	r7,r19
   2353c:	1009883a 	mov	r4,r2
   23540:	180b883a 	mov	r5,r3
   23544:	002c0a00 	call	2c0a0 <__ledf2>
   23548:	1003e816 	blt	r2,zero,244ec <_dtoa_r+0x1598>
   2354c:	b825883a 	mov	r18,r23
   23550:	bd83e926 	beq	r23,r22,244f8 <_dtoa_r+0x15a4>
   23554:	a809883a 	mov	r4,r21
   23558:	980b883a 	mov	r5,r19
   2355c:	000d883a 	mov	r6,zero
   23560:	01d00934 	movhi	r7,16420
   23564:	002c1940 	call	2c194 <__muldf3>
   23568:	000d883a 	mov	r6,zero
   2356c:	01d00934 	movhi	r7,16420
   23570:	8009883a 	mov	r4,r16
   23574:	880b883a 	mov	r5,r17
   23578:	102b883a 	mov	r21,r2
   2357c:	1827883a 	mov	r19,r3
   23580:	002c1940 	call	2c194 <__muldf3>
   23584:	180b883a 	mov	r5,r3
   23588:	1009883a 	mov	r4,r2
   2358c:	1821883a 	mov	r16,r3
   23590:	1023883a 	mov	r17,r2
   23594:	002d2fc0 	call	2d2fc <__fixdfsi>
   23598:	1009883a 	mov	r4,r2
   2359c:	1029883a 	mov	r20,r2
   235a0:	002d37c0 	call	2d37c <__floatsidf>
   235a4:	8809883a 	mov	r4,r17
   235a8:	800b883a 	mov	r5,r16
   235ac:	100d883a 	mov	r6,r2
   235b0:	180f883a 	mov	r7,r3
   235b4:	002ca000 	call	2ca00 <__subdf3>
   235b8:	a5000c04 	addi	r20,r20,48
   235bc:	a80d883a 	mov	r6,r21
   235c0:	980f883a 	mov	r7,r19
   235c4:	1009883a 	mov	r4,r2
   235c8:	180b883a 	mov	r5,r3
   235cc:	95000005 	stb	r20,0(r18)
   235d0:	1021883a 	mov	r16,r2
   235d4:	1823883a 	mov	r17,r3
   235d8:	002c0a00 	call	2c0a0 <__ledf2>
   235dc:	bdc00044 	addi	r23,r23,1
   235e0:	800d883a 	mov	r6,r16
   235e4:	880f883a 	mov	r7,r17
   235e8:	0009883a 	mov	r4,zero
   235ec:	014ffc34 	movhi	r5,16368
   235f0:	103fcf0e 	bge	r2,zero,23530 <_gp+0xfffe8678>
   235f4:	d8c01317 	ldw	r3,76(sp)
   235f8:	d8c00515 	stw	r3,20(sp)
   235fc:	d9400917 	ldw	r5,36(sp)
   23600:	e009883a 	mov	r4,fp
   23604:	00266b40 	call	266b4 <_Bfree>
   23608:	d9000517 	ldw	r4,20(sp)
   2360c:	d9802317 	ldw	r6,140(sp)
   23610:	d9c02517 	ldw	r7,148(sp)
   23614:	b8000005 	stb	zero,0(r23)
   23618:	20800044 	addi	r2,r4,1
   2361c:	30800015 	stw	r2,0(r6)
   23620:	3802aa26 	beq	r7,zero,240cc <_dtoa_r+0x1178>
   23624:	3dc00015 	stw	r23,0(r7)
   23628:	d8800717 	ldw	r2,28(sp)
   2362c:	003e7906 	br	23014 <_gp+0xfffe815c>
   23630:	00800434 	movhi	r2,16
   23634:	10bfffc4 	addi	r2,r2,-1
   23638:	88a2703a 	and	r17,r17,r2
   2363c:	883e851e 	bne	r17,zero,23054 <_gp+0xfffe819c>
   23640:	008000f4 	movhi	r2,3
   23644:	10837404 	addi	r2,r2,3536
   23648:	003e8406 	br	2305c <_gp+0xfffe81a4>
   2364c:	10c00204 	addi	r3,r2,8
   23650:	003e8706 	br	23070 <_gp+0xfffe81b8>
   23654:	01400434 	movhi	r5,16
   23658:	297fffc4 	addi	r5,r5,-1
   2365c:	994a703a 	and	r5,r19,r5
   23660:	9009883a 	mov	r4,r18
   23664:	843f0044 	addi	r16,r16,-1023
   23668:	294ffc34 	orhi	r5,r5,16368
   2366c:	dd800217 	ldw	r22,8(sp)
   23670:	d8001115 	stw	zero,68(sp)
   23674:	003ea506 	br	2310c <_gp+0xfffe8254>
   23678:	008000f4 	movhi	r2,3
   2367c:	10836b04 	addi	r2,r2,3500
   23680:	003e6406 	br	23014 <_gp+0xfffe815c>
   23684:	e0001115 	stw	zero,68(fp)
   23688:	000b883a 	mov	r5,zero
   2368c:	e009883a 	mov	r4,fp
   23690:	002660c0 	call	2660c <_Balloc>
   23694:	01bfffc4 	movi	r6,-1
   23698:	01c00044 	movi	r7,1
   2369c:	d8800715 	stw	r2,28(sp)
   236a0:	d9800c15 	stw	r6,48(sp)
   236a4:	e0801015 	stw	r2,64(fp)
   236a8:	d8000315 	stw	zero,12(sp)
   236ac:	d9c00b15 	stw	r7,44(sp)
   236b0:	d9800615 	stw	r6,24(sp)
   236b4:	d8002215 	stw	zero,136(sp)
   236b8:	d8800117 	ldw	r2,4(sp)
   236bc:	10008916 	blt	r2,zero,238e4 <_dtoa_r+0x990>
   236c0:	d9000517 	ldw	r4,20(sp)
   236c4:	00c00384 	movi	r3,14
   236c8:	19008616 	blt	r3,r4,238e4 <_dtoa_r+0x990>
   236cc:	200490fa 	slli	r2,r4,3
   236d0:	00c000f4 	movhi	r3,3
   236d4:	d9802217 	ldw	r6,136(sp)
   236d8:	18c39304 	addi	r3,r3,3660
   236dc:	1885883a 	add	r2,r3,r2
   236e0:	14000017 	ldw	r16,0(r2)
   236e4:	14400117 	ldw	r17,4(r2)
   236e8:	30016316 	blt	r6,zero,23c78 <_dtoa_r+0xd24>
   236ec:	800d883a 	mov	r6,r16
   236f0:	880f883a 	mov	r7,r17
   236f4:	9009883a 	mov	r4,r18
   236f8:	980b883a 	mov	r5,r19
   236fc:	002b56c0 	call	2b56c <__divdf3>
   23700:	180b883a 	mov	r5,r3
   23704:	1009883a 	mov	r4,r2
   23708:	002d2fc0 	call	2d2fc <__fixdfsi>
   2370c:	1009883a 	mov	r4,r2
   23710:	102b883a 	mov	r21,r2
   23714:	002d37c0 	call	2d37c <__floatsidf>
   23718:	800d883a 	mov	r6,r16
   2371c:	880f883a 	mov	r7,r17
   23720:	1009883a 	mov	r4,r2
   23724:	180b883a 	mov	r5,r3
   23728:	002c1940 	call	2c194 <__muldf3>
   2372c:	100d883a 	mov	r6,r2
   23730:	180f883a 	mov	r7,r3
   23734:	9009883a 	mov	r4,r18
   23738:	980b883a 	mov	r5,r19
   2373c:	002ca000 	call	2ca00 <__subdf3>
   23740:	d9c00717 	ldw	r7,28(sp)
   23744:	1009883a 	mov	r4,r2
   23748:	a8800c04 	addi	r2,r21,48
   2374c:	38800005 	stb	r2,0(r7)
   23750:	3dc00044 	addi	r23,r7,1
   23754:	d9c00617 	ldw	r7,24(sp)
   23758:	01800044 	movi	r6,1
   2375c:	180b883a 	mov	r5,r3
   23760:	2005883a 	mov	r2,r4
   23764:	39803826 	beq	r7,r6,23848 <_dtoa_r+0x8f4>
   23768:	000d883a 	mov	r6,zero
   2376c:	01d00934 	movhi	r7,16420
   23770:	002c1940 	call	2c194 <__muldf3>
   23774:	000d883a 	mov	r6,zero
   23778:	000f883a 	mov	r7,zero
   2377c:	1009883a 	mov	r4,r2
   23780:	180b883a 	mov	r5,r3
   23784:	1025883a 	mov	r18,r2
   23788:	1827883a 	mov	r19,r3
   2378c:	002bf3c0 	call	2bf3c <__eqdf2>
   23790:	103f9a26 	beq	r2,zero,235fc <_gp+0xfffe8744>
   23794:	d9c00617 	ldw	r7,24(sp)
   23798:	d8c00717 	ldw	r3,28(sp)
   2379c:	b829883a 	mov	r20,r23
   237a0:	38bfffc4 	addi	r2,r7,-1
   237a4:	18ad883a 	add	r22,r3,r2
   237a8:	00000a06 	br	237d4 <_dtoa_r+0x880>
   237ac:	002c1940 	call	2c194 <__muldf3>
   237b0:	000d883a 	mov	r6,zero
   237b4:	000f883a 	mov	r7,zero
   237b8:	1009883a 	mov	r4,r2
   237bc:	180b883a 	mov	r5,r3
   237c0:	1025883a 	mov	r18,r2
   237c4:	1827883a 	mov	r19,r3
   237c8:	b829883a 	mov	r20,r23
   237cc:	002bf3c0 	call	2bf3c <__eqdf2>
   237d0:	103f8a26 	beq	r2,zero,235fc <_gp+0xfffe8744>
   237d4:	800d883a 	mov	r6,r16
   237d8:	880f883a 	mov	r7,r17
   237dc:	9009883a 	mov	r4,r18
   237e0:	980b883a 	mov	r5,r19
   237e4:	002b56c0 	call	2b56c <__divdf3>
   237e8:	180b883a 	mov	r5,r3
   237ec:	1009883a 	mov	r4,r2
   237f0:	002d2fc0 	call	2d2fc <__fixdfsi>
   237f4:	1009883a 	mov	r4,r2
   237f8:	102b883a 	mov	r21,r2
   237fc:	002d37c0 	call	2d37c <__floatsidf>
   23800:	800d883a 	mov	r6,r16
   23804:	880f883a 	mov	r7,r17
   23808:	1009883a 	mov	r4,r2
   2380c:	180b883a 	mov	r5,r3
   23810:	002c1940 	call	2c194 <__muldf3>
   23814:	100d883a 	mov	r6,r2
   23818:	180f883a 	mov	r7,r3
   2381c:	9009883a 	mov	r4,r18
   23820:	980b883a 	mov	r5,r19
   23824:	002ca000 	call	2ca00 <__subdf3>
   23828:	aa000c04 	addi	r8,r21,48
   2382c:	a2000005 	stb	r8,0(r20)
   23830:	000d883a 	mov	r6,zero
   23834:	01d00934 	movhi	r7,16420
   23838:	1009883a 	mov	r4,r2
   2383c:	180b883a 	mov	r5,r3
   23840:	a5c00044 	addi	r23,r20,1
   23844:	b53fd91e 	bne	r22,r20,237ac <_gp+0xfffe88f4>
   23848:	100d883a 	mov	r6,r2
   2384c:	180f883a 	mov	r7,r3
   23850:	1009883a 	mov	r4,r2
   23854:	180b883a 	mov	r5,r3
   23858:	002acc00 	call	2acc0 <__adddf3>
   2385c:	100d883a 	mov	r6,r2
   23860:	180f883a 	mov	r7,r3
   23864:	8009883a 	mov	r4,r16
   23868:	880b883a 	mov	r5,r17
   2386c:	1027883a 	mov	r19,r2
   23870:	1825883a 	mov	r18,r3
   23874:	002c0a00 	call	2c0a0 <__ledf2>
   23878:	10000816 	blt	r2,zero,2389c <_dtoa_r+0x948>
   2387c:	980d883a 	mov	r6,r19
   23880:	900f883a 	mov	r7,r18
   23884:	8009883a 	mov	r4,r16
   23888:	880b883a 	mov	r5,r17
   2388c:	002bf3c0 	call	2bf3c <__eqdf2>
   23890:	103f5a1e 	bne	r2,zero,235fc <_gp+0xfffe8744>
   23894:	ad40004c 	andi	r21,r21,1
   23898:	a83f5826 	beq	r21,zero,235fc <_gp+0xfffe8744>
   2389c:	bd3fffc3 	ldbu	r20,-1(r23)
   238a0:	b8bfffc4 	addi	r2,r23,-1
   238a4:	1007883a 	mov	r3,r2
   238a8:	01400e44 	movi	r5,57
   238ac:	d9800717 	ldw	r6,28(sp)
   238b0:	00000506 	br	238c8 <_dtoa_r+0x974>
   238b4:	18ffffc4 	addi	r3,r3,-1
   238b8:	11824726 	beq	r2,r6,241d8 <_dtoa_r+0x1284>
   238bc:	1d000003 	ldbu	r20,0(r3)
   238c0:	102f883a 	mov	r23,r2
   238c4:	10bfffc4 	addi	r2,r2,-1
   238c8:	a1003fcc 	andi	r4,r20,255
   238cc:	2100201c 	xori	r4,r4,128
   238d0:	213fe004 	addi	r4,r4,-128
   238d4:	217ff726 	beq	r4,r5,238b4 <_gp+0xfffe89fc>
   238d8:	a2000044 	addi	r8,r20,1
   238dc:	12000005 	stb	r8,0(r2)
   238e0:	003f4606 	br	235fc <_gp+0xfffe8744>
   238e4:	d9000b17 	ldw	r4,44(sp)
   238e8:	2000c826 	beq	r4,zero,23c0c <_dtoa_r+0xcb8>
   238ec:	d9800317 	ldw	r6,12(sp)
   238f0:	00c00044 	movi	r3,1
   238f4:	1980f90e 	bge	r3,r6,23cdc <_dtoa_r+0xd88>
   238f8:	d8800617 	ldw	r2,24(sp)
   238fc:	d8c00a17 	ldw	r3,40(sp)
   23900:	157fffc4 	addi	r21,r2,-1
   23904:	1d41f316 	blt	r3,r21,240d4 <_dtoa_r+0x1180>
   23908:	1d6bc83a 	sub	r21,r3,r21
   2390c:	d9c00617 	ldw	r7,24(sp)
   23910:	3802aa16 	blt	r7,zero,243bc <_dtoa_r+0x1468>
   23914:	dd000817 	ldw	r20,32(sp)
   23918:	d8800617 	ldw	r2,24(sp)
   2391c:	d8c00817 	ldw	r3,32(sp)
   23920:	01400044 	movi	r5,1
   23924:	e009883a 	mov	r4,fp
   23928:	1887883a 	add	r3,r3,r2
   2392c:	d8c00815 	stw	r3,32(sp)
   23930:	b0ad883a 	add	r22,r22,r2
   23934:	0026a400 	call	26a40 <__i2b>
   23938:	1023883a 	mov	r17,r2
   2393c:	a0000826 	beq	r20,zero,23960 <_dtoa_r+0xa0c>
   23940:	0580070e 	bge	zero,r22,23960 <_dtoa_r+0xa0c>
   23944:	a005883a 	mov	r2,r20
   23948:	b500b916 	blt	r22,r20,23c30 <_dtoa_r+0xcdc>
   2394c:	d9000817 	ldw	r4,32(sp)
   23950:	a0a9c83a 	sub	r20,r20,r2
   23954:	b0adc83a 	sub	r22,r22,r2
   23958:	2089c83a 	sub	r4,r4,r2
   2395c:	d9000815 	stw	r4,32(sp)
   23960:	d9800a17 	ldw	r6,40(sp)
   23964:	0181810e 	bge	zero,r6,23f6c <_dtoa_r+0x1018>
   23968:	d9c00b17 	ldw	r7,44(sp)
   2396c:	3800b326 	beq	r7,zero,23c3c <_dtoa_r+0xce8>
   23970:	a800b226 	beq	r21,zero,23c3c <_dtoa_r+0xce8>
   23974:	880b883a 	mov	r5,r17
   23978:	a80d883a 	mov	r6,r21
   2397c:	e009883a 	mov	r4,fp
   23980:	0026d080 	call	26d08 <__pow5mult>
   23984:	d9800917 	ldw	r6,36(sp)
   23988:	100b883a 	mov	r5,r2
   2398c:	e009883a 	mov	r4,fp
   23990:	1023883a 	mov	r17,r2
   23994:	0026a7c0 	call	26a7c <__multiply>
   23998:	1021883a 	mov	r16,r2
   2399c:	d8800a17 	ldw	r2,40(sp)
   239a0:	d9400917 	ldw	r5,36(sp)
   239a4:	e009883a 	mov	r4,fp
   239a8:	1545c83a 	sub	r2,r2,r21
   239ac:	d8800a15 	stw	r2,40(sp)
   239b0:	00266b40 	call	266b4 <_Bfree>
   239b4:	d8c00a17 	ldw	r3,40(sp)
   239b8:	18009f1e 	bne	r3,zero,23c38 <_dtoa_r+0xce4>
   239bc:	05c00044 	movi	r23,1
   239c0:	e009883a 	mov	r4,fp
   239c4:	b80b883a 	mov	r5,r23
   239c8:	0026a400 	call	26a40 <__i2b>
   239cc:	d9000d17 	ldw	r4,52(sp)
   239d0:	102b883a 	mov	r21,r2
   239d4:	2000ce26 	beq	r4,zero,23d10 <_dtoa_r+0xdbc>
   239d8:	200d883a 	mov	r6,r4
   239dc:	100b883a 	mov	r5,r2
   239e0:	e009883a 	mov	r4,fp
   239e4:	0026d080 	call	26d08 <__pow5mult>
   239e8:	d9800317 	ldw	r6,12(sp)
   239ec:	102b883a 	mov	r21,r2
   239f0:	b981810e 	bge	r23,r6,23ff8 <_dtoa_r+0x10a4>
   239f4:	0027883a 	mov	r19,zero
   239f8:	a8800417 	ldw	r2,16(r21)
   239fc:	05c00804 	movi	r23,32
   23a00:	10800104 	addi	r2,r2,4
   23a04:	1085883a 	add	r2,r2,r2
   23a08:	1085883a 	add	r2,r2,r2
   23a0c:	a885883a 	add	r2,r21,r2
   23a10:	11000017 	ldw	r4,0(r2)
   23a14:	00269280 	call	26928 <__hi0bits>
   23a18:	b885c83a 	sub	r2,r23,r2
   23a1c:	1585883a 	add	r2,r2,r22
   23a20:	108007cc 	andi	r2,r2,31
   23a24:	1000b326 	beq	r2,zero,23cf4 <_dtoa_r+0xda0>
   23a28:	00c00804 	movi	r3,32
   23a2c:	1887c83a 	sub	r3,r3,r2
   23a30:	01000104 	movi	r4,4
   23a34:	20c2cd0e 	bge	r4,r3,2456c <_dtoa_r+0x1618>
   23a38:	00c00704 	movi	r3,28
   23a3c:	1885c83a 	sub	r2,r3,r2
   23a40:	d8c00817 	ldw	r3,32(sp)
   23a44:	a0a9883a 	add	r20,r20,r2
   23a48:	b0ad883a 	add	r22,r22,r2
   23a4c:	1887883a 	add	r3,r3,r2
   23a50:	d8c00815 	stw	r3,32(sp)
   23a54:	d9800817 	ldw	r6,32(sp)
   23a58:	0180040e 	bge	zero,r6,23a6c <_dtoa_r+0xb18>
   23a5c:	800b883a 	mov	r5,r16
   23a60:	e009883a 	mov	r4,fp
   23a64:	0026e480 	call	26e48 <__lshift>
   23a68:	1021883a 	mov	r16,r2
   23a6c:	0580050e 	bge	zero,r22,23a84 <_dtoa_r+0xb30>
   23a70:	a80b883a 	mov	r5,r21
   23a74:	b00d883a 	mov	r6,r22
   23a78:	e009883a 	mov	r4,fp
   23a7c:	0026e480 	call	26e48 <__lshift>
   23a80:	102b883a 	mov	r21,r2
   23a84:	d9c00e17 	ldw	r7,56(sp)
   23a88:	3801211e 	bne	r7,zero,23f10 <_dtoa_r+0xfbc>
   23a8c:	d9800617 	ldw	r6,24(sp)
   23a90:	0181380e 	bge	zero,r6,23f74 <_dtoa_r+0x1020>
   23a94:	d8c00b17 	ldw	r3,44(sp)
   23a98:	1800ab1e 	bne	r3,zero,23d48 <_dtoa_r+0xdf4>
   23a9c:	dc800717 	ldw	r18,28(sp)
   23aa0:	dcc00617 	ldw	r19,24(sp)
   23aa4:	9029883a 	mov	r20,r18
   23aa8:	00000206 	br	23ab4 <_dtoa_r+0xb60>
   23aac:	00266dc0 	call	266dc <__multadd>
   23ab0:	1021883a 	mov	r16,r2
   23ab4:	a80b883a 	mov	r5,r21
   23ab8:	8009883a 	mov	r4,r16
   23abc:	0022d2c0 	call	22d2c <quorem>
   23ac0:	10800c04 	addi	r2,r2,48
   23ac4:	90800005 	stb	r2,0(r18)
   23ac8:	94800044 	addi	r18,r18,1
   23acc:	9507c83a 	sub	r3,r18,r20
   23ad0:	000f883a 	mov	r7,zero
   23ad4:	01800284 	movi	r6,10
   23ad8:	800b883a 	mov	r5,r16
   23adc:	e009883a 	mov	r4,fp
   23ae0:	1cfff216 	blt	r3,r19,23aac <_gp+0xfffe8bf4>
   23ae4:	1011883a 	mov	r8,r2
   23ae8:	d8800617 	ldw	r2,24(sp)
   23aec:	0082370e 	bge	zero,r2,243cc <_dtoa_r+0x1478>
   23af0:	d9000717 	ldw	r4,28(sp)
   23af4:	0025883a 	mov	r18,zero
   23af8:	20af883a 	add	r23,r4,r2
   23afc:	01800044 	movi	r6,1
   23b00:	800b883a 	mov	r5,r16
   23b04:	e009883a 	mov	r4,fp
   23b08:	da001715 	stw	r8,92(sp)
   23b0c:	0026e480 	call	26e48 <__lshift>
   23b10:	a80b883a 	mov	r5,r21
   23b14:	1009883a 	mov	r4,r2
   23b18:	d8800915 	stw	r2,36(sp)
   23b1c:	0026f900 	call	26f90 <__mcmp>
   23b20:	da001717 	ldw	r8,92(sp)
   23b24:	0081800e 	bge	zero,r2,24128 <_dtoa_r+0x11d4>
   23b28:	b93fffc3 	ldbu	r4,-1(r23)
   23b2c:	b8bfffc4 	addi	r2,r23,-1
   23b30:	1007883a 	mov	r3,r2
   23b34:	01800e44 	movi	r6,57
   23b38:	d9c00717 	ldw	r7,28(sp)
   23b3c:	00000506 	br	23b54 <_dtoa_r+0xc00>
   23b40:	18ffffc4 	addi	r3,r3,-1
   23b44:	11c12326 	beq	r2,r7,23fd4 <_dtoa_r+0x1080>
   23b48:	19000003 	ldbu	r4,0(r3)
   23b4c:	102f883a 	mov	r23,r2
   23b50:	10bfffc4 	addi	r2,r2,-1
   23b54:	21403fcc 	andi	r5,r4,255
   23b58:	2940201c 	xori	r5,r5,128
   23b5c:	297fe004 	addi	r5,r5,-128
   23b60:	29bff726 	beq	r5,r6,23b40 <_gp+0xfffe8c88>
   23b64:	21000044 	addi	r4,r4,1
   23b68:	11000005 	stb	r4,0(r2)
   23b6c:	a80b883a 	mov	r5,r21
   23b70:	e009883a 	mov	r4,fp
   23b74:	00266b40 	call	266b4 <_Bfree>
   23b78:	883ea026 	beq	r17,zero,235fc <_gp+0xfffe8744>
   23b7c:	90000426 	beq	r18,zero,23b90 <_dtoa_r+0xc3c>
   23b80:	94400326 	beq	r18,r17,23b90 <_dtoa_r+0xc3c>
   23b84:	900b883a 	mov	r5,r18
   23b88:	e009883a 	mov	r4,fp
   23b8c:	00266b40 	call	266b4 <_Bfree>
   23b90:	880b883a 	mov	r5,r17
   23b94:	e009883a 	mov	r4,fp
   23b98:	00266b40 	call	266b4 <_Bfree>
   23b9c:	003e9706 	br	235fc <_gp+0xfffe8744>
   23ba0:	01800044 	movi	r6,1
   23ba4:	d9800e15 	stw	r6,56(sp)
   23ba8:	003d9606 	br	23204 <_gp+0xfffe834c>
   23bac:	d8800817 	ldw	r2,32(sp)
   23bb0:	d8c00517 	ldw	r3,20(sp)
   23bb4:	d8000d15 	stw	zero,52(sp)
   23bb8:	10c5c83a 	sub	r2,r2,r3
   23bbc:	00c9c83a 	sub	r4,zero,r3
   23bc0:	d8800815 	stw	r2,32(sp)
   23bc4:	d9000a15 	stw	r4,40(sp)
   23bc8:	003d9706 	br	23228 <_gp+0xfffe8370>
   23bcc:	05adc83a 	sub	r22,zero,r22
   23bd0:	dd800815 	stw	r22,32(sp)
   23bd4:	002d883a 	mov	r22,zero
   23bd8:	003d8e06 	br	23214 <_gp+0xfffe835c>
   23bdc:	d9000517 	ldw	r4,20(sp)
   23be0:	002d37c0 	call	2d37c <__floatsidf>
   23be4:	100d883a 	mov	r6,r2
   23be8:	180f883a 	mov	r7,r3
   23bec:	a009883a 	mov	r4,r20
   23bf0:	880b883a 	mov	r5,r17
   23bf4:	002bf3c0 	call	2bf3c <__eqdf2>
   23bf8:	103d7126 	beq	r2,zero,231c0 <_gp+0xfffe8308>
   23bfc:	d9c00517 	ldw	r7,20(sp)
   23c00:	39ffffc4 	addi	r7,r7,-1
   23c04:	d9c00515 	stw	r7,20(sp)
   23c08:	003d6d06 	br	231c0 <_gp+0xfffe8308>
   23c0c:	dd400a17 	ldw	r21,40(sp)
   23c10:	dd000817 	ldw	r20,32(sp)
   23c14:	0023883a 	mov	r17,zero
   23c18:	003f4806 	br	2393c <_gp+0xfffe8a84>
   23c1c:	10e3c83a 	sub	r17,r2,r3
   23c20:	9448983a 	sll	r4,r18,r17
   23c24:	003d3206 	br	230f0 <_gp+0xfffe8238>
   23c28:	d8000e15 	stw	zero,56(sp)
   23c2c:	003d7506 	br	23204 <_gp+0xfffe834c>
   23c30:	b005883a 	mov	r2,r22
   23c34:	003f4506 	br	2394c <_gp+0xfffe8a94>
   23c38:	dc000915 	stw	r16,36(sp)
   23c3c:	d9800a17 	ldw	r6,40(sp)
   23c40:	d9400917 	ldw	r5,36(sp)
   23c44:	e009883a 	mov	r4,fp
   23c48:	0026d080 	call	26d08 <__pow5mult>
   23c4c:	1021883a 	mov	r16,r2
   23c50:	003f5a06 	br	239bc <_gp+0xfffe8b04>
   23c54:	01c00044 	movi	r7,1
   23c58:	d9c00b15 	stw	r7,44(sp)
   23c5c:	d8802217 	ldw	r2,136(sp)
   23c60:	0081280e 	bge	zero,r2,24104 <_dtoa_r+0x11b0>
   23c64:	100d883a 	mov	r6,r2
   23c68:	1021883a 	mov	r16,r2
   23c6c:	d8800c15 	stw	r2,48(sp)
   23c70:	d8800615 	stw	r2,24(sp)
   23c74:	003d8806 	br	23298 <_gp+0xfffe83e0>
   23c78:	d8800617 	ldw	r2,24(sp)
   23c7c:	00be9b16 	blt	zero,r2,236ec <_gp+0xfffe8834>
   23c80:	10010f1e 	bne	r2,zero,240c0 <_dtoa_r+0x116c>
   23c84:	880b883a 	mov	r5,r17
   23c88:	000d883a 	mov	r6,zero
   23c8c:	01d00534 	movhi	r7,16404
   23c90:	8009883a 	mov	r4,r16
   23c94:	002c1940 	call	2c194 <__muldf3>
   23c98:	900d883a 	mov	r6,r18
   23c9c:	980f883a 	mov	r7,r19
   23ca0:	1009883a 	mov	r4,r2
   23ca4:	180b883a 	mov	r5,r3
   23ca8:	002bfc40 	call	2bfc4 <__gedf2>
   23cac:	002b883a 	mov	r21,zero
   23cb0:	0023883a 	mov	r17,zero
   23cb4:	1000bf16 	blt	r2,zero,23fb4 <_dtoa_r+0x1060>
   23cb8:	d9802217 	ldw	r6,136(sp)
   23cbc:	ddc00717 	ldw	r23,28(sp)
   23cc0:	018c303a 	nor	r6,zero,r6
   23cc4:	d9800515 	stw	r6,20(sp)
   23cc8:	a80b883a 	mov	r5,r21
   23ccc:	e009883a 	mov	r4,fp
   23cd0:	00266b40 	call	266b4 <_Bfree>
   23cd4:	883e4926 	beq	r17,zero,235fc <_gp+0xfffe8744>
   23cd8:	003fad06 	br	23b90 <_gp+0xfffe8cd8>
   23cdc:	d9c01117 	ldw	r7,68(sp)
   23ce0:	3801bc26 	beq	r7,zero,243d4 <_dtoa_r+0x1480>
   23ce4:	10810cc4 	addi	r2,r2,1075
   23ce8:	dd400a17 	ldw	r21,40(sp)
   23cec:	dd000817 	ldw	r20,32(sp)
   23cf0:	003f0a06 	br	2391c <_gp+0xfffe8a64>
   23cf4:	00800704 	movi	r2,28
   23cf8:	d9000817 	ldw	r4,32(sp)
   23cfc:	a0a9883a 	add	r20,r20,r2
   23d00:	b0ad883a 	add	r22,r22,r2
   23d04:	2089883a 	add	r4,r4,r2
   23d08:	d9000815 	stw	r4,32(sp)
   23d0c:	003f5106 	br	23a54 <_gp+0xfffe8b9c>
   23d10:	d8c00317 	ldw	r3,12(sp)
   23d14:	b8c1fc0e 	bge	r23,r3,24508 <_dtoa_r+0x15b4>
   23d18:	0027883a 	mov	r19,zero
   23d1c:	b805883a 	mov	r2,r23
   23d20:	003f3e06 	br	23a1c <_gp+0xfffe8b64>
   23d24:	880b883a 	mov	r5,r17
   23d28:	e009883a 	mov	r4,fp
   23d2c:	000f883a 	mov	r7,zero
   23d30:	01800284 	movi	r6,10
   23d34:	00266dc0 	call	266dc <__multadd>
   23d38:	d9000c17 	ldw	r4,48(sp)
   23d3c:	1023883a 	mov	r17,r2
   23d40:	0102040e 	bge	zero,r4,24554 <_dtoa_r+0x1600>
   23d44:	d9000615 	stw	r4,24(sp)
   23d48:	0500050e 	bge	zero,r20,23d60 <_dtoa_r+0xe0c>
   23d4c:	880b883a 	mov	r5,r17
   23d50:	a00d883a 	mov	r6,r20
   23d54:	e009883a 	mov	r4,fp
   23d58:	0026e480 	call	26e48 <__lshift>
   23d5c:	1023883a 	mov	r17,r2
   23d60:	9801241e 	bne	r19,zero,241f4 <_dtoa_r+0x12a0>
   23d64:	8829883a 	mov	r20,r17
   23d68:	d9000617 	ldw	r4,24(sp)
   23d6c:	dcc00717 	ldw	r19,28(sp)
   23d70:	9480004c 	andi	r18,r18,1
   23d74:	20bfffc4 	addi	r2,r4,-1
   23d78:	9885883a 	add	r2,r19,r2
   23d7c:	d8800415 	stw	r2,16(sp)
   23d80:	dc800615 	stw	r18,24(sp)
   23d84:	a80b883a 	mov	r5,r21
   23d88:	8009883a 	mov	r4,r16
   23d8c:	0022d2c0 	call	22d2c <quorem>
   23d90:	880b883a 	mov	r5,r17
   23d94:	8009883a 	mov	r4,r16
   23d98:	102f883a 	mov	r23,r2
   23d9c:	0026f900 	call	26f90 <__mcmp>
   23da0:	a80b883a 	mov	r5,r21
   23da4:	a00d883a 	mov	r6,r20
   23da8:	e009883a 	mov	r4,fp
   23dac:	102d883a 	mov	r22,r2
   23db0:	0026ff00 	call	26ff0 <__mdiff>
   23db4:	1007883a 	mov	r3,r2
   23db8:	10800317 	ldw	r2,12(r2)
   23dbc:	bc800c04 	addi	r18,r23,48
   23dc0:	180b883a 	mov	r5,r3
   23dc4:	10004e1e 	bne	r2,zero,23f00 <_dtoa_r+0xfac>
   23dc8:	8009883a 	mov	r4,r16
   23dcc:	d8c01615 	stw	r3,88(sp)
   23dd0:	0026f900 	call	26f90 <__mcmp>
   23dd4:	d8c01617 	ldw	r3,88(sp)
   23dd8:	e009883a 	mov	r4,fp
   23ddc:	d8801615 	stw	r2,88(sp)
   23de0:	180b883a 	mov	r5,r3
   23de4:	00266b40 	call	266b4 <_Bfree>
   23de8:	d8801617 	ldw	r2,88(sp)
   23dec:	1000041e 	bne	r2,zero,23e00 <_dtoa_r+0xeac>
   23df0:	d9800317 	ldw	r6,12(sp)
   23df4:	3000021e 	bne	r6,zero,23e00 <_dtoa_r+0xeac>
   23df8:	d8c00617 	ldw	r3,24(sp)
   23dfc:	18003726 	beq	r3,zero,23edc <_dtoa_r+0xf88>
   23e00:	b0002016 	blt	r22,zero,23e84 <_dtoa_r+0xf30>
   23e04:	b000041e 	bne	r22,zero,23e18 <_dtoa_r+0xec4>
   23e08:	d9000317 	ldw	r4,12(sp)
   23e0c:	2000021e 	bne	r4,zero,23e18 <_dtoa_r+0xec4>
   23e10:	d8c00617 	ldw	r3,24(sp)
   23e14:	18001b26 	beq	r3,zero,23e84 <_dtoa_r+0xf30>
   23e18:	00810716 	blt	zero,r2,24238 <_dtoa_r+0x12e4>
   23e1c:	d8c00417 	ldw	r3,16(sp)
   23e20:	9d800044 	addi	r22,r19,1
   23e24:	9c800005 	stb	r18,0(r19)
   23e28:	b02f883a 	mov	r23,r22
   23e2c:	98c10626 	beq	r19,r3,24248 <_dtoa_r+0x12f4>
   23e30:	800b883a 	mov	r5,r16
   23e34:	000f883a 	mov	r7,zero
   23e38:	01800284 	movi	r6,10
   23e3c:	e009883a 	mov	r4,fp
   23e40:	00266dc0 	call	266dc <__multadd>
   23e44:	1021883a 	mov	r16,r2
   23e48:	000f883a 	mov	r7,zero
   23e4c:	01800284 	movi	r6,10
   23e50:	880b883a 	mov	r5,r17
   23e54:	e009883a 	mov	r4,fp
   23e58:	8d002526 	beq	r17,r20,23ef0 <_dtoa_r+0xf9c>
   23e5c:	00266dc0 	call	266dc <__multadd>
   23e60:	a00b883a 	mov	r5,r20
   23e64:	000f883a 	mov	r7,zero
   23e68:	01800284 	movi	r6,10
   23e6c:	e009883a 	mov	r4,fp
   23e70:	1023883a 	mov	r17,r2
   23e74:	00266dc0 	call	266dc <__multadd>
   23e78:	1029883a 	mov	r20,r2
   23e7c:	b027883a 	mov	r19,r22
   23e80:	003fc006 	br	23d84 <_gp+0xfffe8ecc>
   23e84:	9011883a 	mov	r8,r18
   23e88:	00800e0e 	bge	zero,r2,23ec4 <_dtoa_r+0xf70>
   23e8c:	800b883a 	mov	r5,r16
   23e90:	01800044 	movi	r6,1
   23e94:	e009883a 	mov	r4,fp
   23e98:	da001715 	stw	r8,92(sp)
   23e9c:	0026e480 	call	26e48 <__lshift>
   23ea0:	a80b883a 	mov	r5,r21
   23ea4:	1009883a 	mov	r4,r2
   23ea8:	1021883a 	mov	r16,r2
   23eac:	0026f900 	call	26f90 <__mcmp>
   23eb0:	da001717 	ldw	r8,92(sp)
   23eb4:	0081960e 	bge	zero,r2,24510 <_dtoa_r+0x15bc>
   23eb8:	00800e44 	movi	r2,57
   23ebc:	40817026 	beq	r8,r2,24480 <_dtoa_r+0x152c>
   23ec0:	ba000c44 	addi	r8,r23,49
   23ec4:	8825883a 	mov	r18,r17
   23ec8:	9dc00044 	addi	r23,r19,1
   23ecc:	9a000005 	stb	r8,0(r19)
   23ed0:	a023883a 	mov	r17,r20
   23ed4:	dc000915 	stw	r16,36(sp)
   23ed8:	003f2406 	br	23b6c <_gp+0xfffe8cb4>
   23edc:	00800e44 	movi	r2,57
   23ee0:	9011883a 	mov	r8,r18
   23ee4:	90816626 	beq	r18,r2,24480 <_dtoa_r+0x152c>
   23ee8:	05bff516 	blt	zero,r22,23ec0 <_gp+0xfffe9008>
   23eec:	003ff506 	br	23ec4 <_gp+0xfffe900c>
   23ef0:	00266dc0 	call	266dc <__multadd>
   23ef4:	1023883a 	mov	r17,r2
   23ef8:	1029883a 	mov	r20,r2
   23efc:	003fdf06 	br	23e7c <_gp+0xfffe8fc4>
   23f00:	e009883a 	mov	r4,fp
   23f04:	00266b40 	call	266b4 <_Bfree>
   23f08:	00800044 	movi	r2,1
   23f0c:	003fbc06 	br	23e00 <_gp+0xfffe8f48>
   23f10:	a80b883a 	mov	r5,r21
   23f14:	8009883a 	mov	r4,r16
   23f18:	0026f900 	call	26f90 <__mcmp>
   23f1c:	103edb0e 	bge	r2,zero,23a8c <_gp+0xfffe8bd4>
   23f20:	800b883a 	mov	r5,r16
   23f24:	000f883a 	mov	r7,zero
   23f28:	01800284 	movi	r6,10
   23f2c:	e009883a 	mov	r4,fp
   23f30:	00266dc0 	call	266dc <__multadd>
   23f34:	1021883a 	mov	r16,r2
   23f38:	d8800517 	ldw	r2,20(sp)
   23f3c:	d8c00b17 	ldw	r3,44(sp)
   23f40:	10bfffc4 	addi	r2,r2,-1
   23f44:	d8800515 	stw	r2,20(sp)
   23f48:	183f761e 	bne	r3,zero,23d24 <_gp+0xfffe8e6c>
   23f4c:	d9000c17 	ldw	r4,48(sp)
   23f50:	0101730e 	bge	zero,r4,24520 <_dtoa_r+0x15cc>
   23f54:	d9000615 	stw	r4,24(sp)
   23f58:	003ed006 	br	23a9c <_gp+0xfffe8be4>
   23f5c:	00800084 	movi	r2,2
   23f60:	3081861e 	bne	r6,r2,2457c <_dtoa_r+0x1628>
   23f64:	d8000b15 	stw	zero,44(sp)
   23f68:	003f3c06 	br	23c5c <_gp+0xfffe8da4>
   23f6c:	dc000917 	ldw	r16,36(sp)
   23f70:	003e9206 	br	239bc <_gp+0xfffe8b04>
   23f74:	d9c00317 	ldw	r7,12(sp)
   23f78:	00800084 	movi	r2,2
   23f7c:	11fec50e 	bge	r2,r7,23a94 <_gp+0xfffe8bdc>
   23f80:	d9000617 	ldw	r4,24(sp)
   23f84:	20013c1e 	bne	r4,zero,24478 <_dtoa_r+0x1524>
   23f88:	a80b883a 	mov	r5,r21
   23f8c:	000f883a 	mov	r7,zero
   23f90:	01800144 	movi	r6,5
   23f94:	e009883a 	mov	r4,fp
   23f98:	00266dc0 	call	266dc <__multadd>
   23f9c:	100b883a 	mov	r5,r2
   23fa0:	8009883a 	mov	r4,r16
   23fa4:	102b883a 	mov	r21,r2
   23fa8:	0026f900 	call	26f90 <__mcmp>
   23fac:	dc000915 	stw	r16,36(sp)
   23fb0:	00bf410e 	bge	zero,r2,23cb8 <_gp+0xfffe8e00>
   23fb4:	d9c00717 	ldw	r7,28(sp)
   23fb8:	00800c44 	movi	r2,49
   23fbc:	38800005 	stb	r2,0(r7)
   23fc0:	d8800517 	ldw	r2,20(sp)
   23fc4:	3dc00044 	addi	r23,r7,1
   23fc8:	10800044 	addi	r2,r2,1
   23fcc:	d8800515 	stw	r2,20(sp)
   23fd0:	003f3d06 	br	23cc8 <_gp+0xfffe8e10>
   23fd4:	d9800517 	ldw	r6,20(sp)
   23fd8:	d9c00717 	ldw	r7,28(sp)
   23fdc:	00800c44 	movi	r2,49
   23fe0:	31800044 	addi	r6,r6,1
   23fe4:	d9800515 	stw	r6,20(sp)
   23fe8:	38800005 	stb	r2,0(r7)
   23fec:	003edf06 	br	23b6c <_gp+0xfffe8cb4>
   23ff0:	d8000b15 	stw	zero,44(sp)
   23ff4:	003c9f06 	br	23274 <_gp+0xfffe83bc>
   23ff8:	903e7e1e 	bne	r18,zero,239f4 <_gp+0xfffe8b3c>
   23ffc:	00800434 	movhi	r2,16
   24000:	10bfffc4 	addi	r2,r2,-1
   24004:	9884703a 	and	r2,r19,r2
   24008:	1000ea1e 	bne	r2,zero,243b4 <_dtoa_r+0x1460>
   2400c:	9cdffc2c 	andhi	r19,r19,32752
   24010:	9800e826 	beq	r19,zero,243b4 <_dtoa_r+0x1460>
   24014:	d9c00817 	ldw	r7,32(sp)
   24018:	b5800044 	addi	r22,r22,1
   2401c:	04c00044 	movi	r19,1
   24020:	39c00044 	addi	r7,r7,1
   24024:	d9c00815 	stw	r7,32(sp)
   24028:	d8800d17 	ldw	r2,52(sp)
   2402c:	103e721e 	bne	r2,zero,239f8 <_gp+0xfffe8b40>
   24030:	00800044 	movi	r2,1
   24034:	003e7906 	br	23a1c <_gp+0xfffe8b64>
   24038:	8009883a 	mov	r4,r16
   2403c:	002d37c0 	call	2d37c <__floatsidf>
   24040:	d9800f17 	ldw	r6,60(sp)
   24044:	d9c01017 	ldw	r7,64(sp)
   24048:	1009883a 	mov	r4,r2
   2404c:	180b883a 	mov	r5,r3
   24050:	002c1940 	call	2c194 <__muldf3>
   24054:	000d883a 	mov	r6,zero
   24058:	01d00734 	movhi	r7,16412
   2405c:	1009883a 	mov	r4,r2
   24060:	180b883a 	mov	r5,r3
   24064:	002acc00 	call	2acc0 <__adddf3>
   24068:	047f3034 	movhi	r17,64704
   2406c:	1021883a 	mov	r16,r2
   24070:	1c63883a 	add	r17,r3,r17
   24074:	d9000f17 	ldw	r4,60(sp)
   24078:	d9401017 	ldw	r5,64(sp)
   2407c:	000d883a 	mov	r6,zero
   24080:	01d00534 	movhi	r7,16404
   24084:	002ca000 	call	2ca00 <__subdf3>
   24088:	800d883a 	mov	r6,r16
   2408c:	880f883a 	mov	r7,r17
   24090:	1009883a 	mov	r4,r2
   24094:	180b883a 	mov	r5,r3
   24098:	102b883a 	mov	r21,r2
   2409c:	1829883a 	mov	r20,r3
   240a0:	002bfc40 	call	2bfc4 <__gedf2>
   240a4:	00806c16 	blt	zero,r2,24258 <_dtoa_r+0x1304>
   240a8:	89e0003c 	xorhi	r7,r17,32768
   240ac:	800d883a 	mov	r6,r16
   240b0:	a809883a 	mov	r4,r21
   240b4:	a00b883a 	mov	r5,r20
   240b8:	002c0a00 	call	2c0a0 <__ledf2>
   240bc:	103d7e0e 	bge	r2,zero,236b8 <_gp+0xfffe8800>
   240c0:	002b883a 	mov	r21,zero
   240c4:	0023883a 	mov	r17,zero
   240c8:	003efb06 	br	23cb8 <_gp+0xfffe8e00>
   240cc:	d8800717 	ldw	r2,28(sp)
   240d0:	003bd006 	br	23014 <_gp+0xfffe815c>
   240d4:	d9000a17 	ldw	r4,40(sp)
   240d8:	d9800d17 	ldw	r6,52(sp)
   240dc:	dd400a15 	stw	r21,40(sp)
   240e0:	a905c83a 	sub	r2,r21,r4
   240e4:	308d883a 	add	r6,r6,r2
   240e8:	d9800d15 	stw	r6,52(sp)
   240ec:	002b883a 	mov	r21,zero
   240f0:	003e0606 	br	2390c <_gp+0xfffe8a54>
   240f4:	9023883a 	mov	r17,r18
   240f8:	9829883a 	mov	r20,r19
   240fc:	04000084 	movi	r16,2
   24100:	003c9206 	br	2334c <_gp+0xfffe8494>
   24104:	04000044 	movi	r16,1
   24108:	dc000c15 	stw	r16,48(sp)
   2410c:	dc000615 	stw	r16,24(sp)
   24110:	dc002215 	stw	r16,136(sp)
   24114:	e0001115 	stw	zero,68(fp)
   24118:	000b883a 	mov	r5,zero
   2411c:	003c6906 	br	232c4 <_gp+0xfffe840c>
   24120:	3021883a 	mov	r16,r6
   24124:	003ffb06 	br	24114 <_gp+0xfffe925c>
   24128:	1000021e 	bne	r2,zero,24134 <_dtoa_r+0x11e0>
   2412c:	4200004c 	andi	r8,r8,1
   24130:	403e7d1e 	bne	r8,zero,23b28 <_gp+0xfffe8c70>
   24134:	01000c04 	movi	r4,48
   24138:	00000106 	br	24140 <_dtoa_r+0x11ec>
   2413c:	102f883a 	mov	r23,r2
   24140:	b8bfffc4 	addi	r2,r23,-1
   24144:	10c00007 	ldb	r3,0(r2)
   24148:	193ffc26 	beq	r3,r4,2413c <_gp+0xfffe9284>
   2414c:	003e8706 	br	23b6c <_gp+0xfffe8cb4>
   24150:	d8800517 	ldw	r2,20(sp)
   24154:	00a3c83a 	sub	r17,zero,r2
   24158:	8800a426 	beq	r17,zero,243ec <_dtoa_r+0x1498>
   2415c:	888003cc 	andi	r2,r17,15
   24160:	100490fa 	slli	r2,r2,3
   24164:	00c000f4 	movhi	r3,3
   24168:	18c39304 	addi	r3,r3,3660
   2416c:	1885883a 	add	r2,r3,r2
   24170:	11800017 	ldw	r6,0(r2)
   24174:	11c00117 	ldw	r7,4(r2)
   24178:	9009883a 	mov	r4,r18
   2417c:	980b883a 	mov	r5,r19
   24180:	8823d13a 	srai	r17,r17,4
   24184:	002c1940 	call	2c194 <__muldf3>
   24188:	d8800f15 	stw	r2,60(sp)
   2418c:	d8c01015 	stw	r3,64(sp)
   24190:	8800e826 	beq	r17,zero,24534 <_dtoa_r+0x15e0>
   24194:	050000f4 	movhi	r20,3
   24198:	a5038904 	addi	r20,r20,3620
   2419c:	04000084 	movi	r16,2
   241a0:	8980004c 	andi	r6,r17,1
   241a4:	1009883a 	mov	r4,r2
   241a8:	8823d07a 	srai	r17,r17,1
   241ac:	180b883a 	mov	r5,r3
   241b0:	30000426 	beq	r6,zero,241c4 <_dtoa_r+0x1270>
   241b4:	a1800017 	ldw	r6,0(r20)
   241b8:	a1c00117 	ldw	r7,4(r20)
   241bc:	84000044 	addi	r16,r16,1
   241c0:	002c1940 	call	2c194 <__muldf3>
   241c4:	a5000204 	addi	r20,r20,8
   241c8:	883ff51e 	bne	r17,zero,241a0 <_gp+0xfffe92e8>
   241cc:	d8800f15 	stw	r2,60(sp)
   241d0:	d8c01015 	stw	r3,64(sp)
   241d4:	003c7606 	br	233b0 <_gp+0xfffe84f8>
   241d8:	00c00c04 	movi	r3,48
   241dc:	10c00005 	stb	r3,0(r2)
   241e0:	d8c00517 	ldw	r3,20(sp)
   241e4:	bd3fffc3 	ldbu	r20,-1(r23)
   241e8:	18c00044 	addi	r3,r3,1
   241ec:	d8c00515 	stw	r3,20(sp)
   241f0:	003db906 	br	238d8 <_gp+0xfffe8a20>
   241f4:	89400117 	ldw	r5,4(r17)
   241f8:	e009883a 	mov	r4,fp
   241fc:	002660c0 	call	2660c <_Balloc>
   24200:	89800417 	ldw	r6,16(r17)
   24204:	89400304 	addi	r5,r17,12
   24208:	11000304 	addi	r4,r2,12
   2420c:	31800084 	addi	r6,r6,2
   24210:	318d883a 	add	r6,r6,r6
   24214:	318d883a 	add	r6,r6,r6
   24218:	1027883a 	mov	r19,r2
   2421c:	00262400 	call	26240 <memcpy>
   24220:	01800044 	movi	r6,1
   24224:	980b883a 	mov	r5,r19
   24228:	e009883a 	mov	r4,fp
   2422c:	0026e480 	call	26e48 <__lshift>
   24230:	1029883a 	mov	r20,r2
   24234:	003ecc06 	br	23d68 <_gp+0xfffe8eb0>
   24238:	00800e44 	movi	r2,57
   2423c:	90809026 	beq	r18,r2,24480 <_dtoa_r+0x152c>
   24240:	92000044 	addi	r8,r18,1
   24244:	003f1f06 	br	23ec4 <_gp+0xfffe900c>
   24248:	9011883a 	mov	r8,r18
   2424c:	8825883a 	mov	r18,r17
   24250:	a023883a 	mov	r17,r20
   24254:	003e2906 	br	23afc <_gp+0xfffe8c44>
   24258:	002b883a 	mov	r21,zero
   2425c:	0023883a 	mov	r17,zero
   24260:	003f5406 	br	23fb4 <_gp+0xfffe90fc>
   24264:	61bfffc4 	addi	r6,r12,-1
   24268:	300490fa 	slli	r2,r6,3
   2426c:	00c000f4 	movhi	r3,3
   24270:	18c39304 	addi	r3,r3,3660
   24274:	1885883a 	add	r2,r3,r2
   24278:	11000017 	ldw	r4,0(r2)
   2427c:	11400117 	ldw	r5,4(r2)
   24280:	d8800717 	ldw	r2,28(sp)
   24284:	880f883a 	mov	r7,r17
   24288:	d9801215 	stw	r6,72(sp)
   2428c:	800d883a 	mov	r6,r16
   24290:	db001615 	stw	r12,88(sp)
   24294:	15c00044 	addi	r23,r2,1
   24298:	002c1940 	call	2c194 <__muldf3>
   2429c:	d9401017 	ldw	r5,64(sp)
   242a0:	d9000f17 	ldw	r4,60(sp)
   242a4:	d8c01515 	stw	r3,84(sp)
   242a8:	d8801415 	stw	r2,80(sp)
   242ac:	002d2fc0 	call	2d2fc <__fixdfsi>
   242b0:	1009883a 	mov	r4,r2
   242b4:	1021883a 	mov	r16,r2
   242b8:	002d37c0 	call	2d37c <__floatsidf>
   242bc:	d9000f17 	ldw	r4,60(sp)
   242c0:	d9401017 	ldw	r5,64(sp)
   242c4:	100d883a 	mov	r6,r2
   242c8:	180f883a 	mov	r7,r3
   242cc:	002ca000 	call	2ca00 <__subdf3>
   242d0:	1829883a 	mov	r20,r3
   242d4:	d8c00717 	ldw	r3,28(sp)
   242d8:	84000c04 	addi	r16,r16,48
   242dc:	1023883a 	mov	r17,r2
   242e0:	1c000005 	stb	r16,0(r3)
   242e4:	db001617 	ldw	r12,88(sp)
   242e8:	00800044 	movi	r2,1
   242ec:	60802226 	beq	r12,r2,24378 <_dtoa_r+0x1424>
   242f0:	d9c00717 	ldw	r7,28(sp)
   242f4:	8805883a 	mov	r2,r17
   242f8:	b82b883a 	mov	r21,r23
   242fc:	3b19883a 	add	r12,r7,r12
   24300:	6023883a 	mov	r17,r12
   24304:	a007883a 	mov	r3,r20
   24308:	dc800f15 	stw	r18,60(sp)
   2430c:	000d883a 	mov	r6,zero
   24310:	01d00934 	movhi	r7,16420
   24314:	1009883a 	mov	r4,r2
   24318:	180b883a 	mov	r5,r3
   2431c:	002c1940 	call	2c194 <__muldf3>
   24320:	180b883a 	mov	r5,r3
   24324:	1009883a 	mov	r4,r2
   24328:	1829883a 	mov	r20,r3
   2432c:	1025883a 	mov	r18,r2
   24330:	002d2fc0 	call	2d2fc <__fixdfsi>
   24334:	1009883a 	mov	r4,r2
   24338:	1021883a 	mov	r16,r2
   2433c:	002d37c0 	call	2d37c <__floatsidf>
   24340:	100d883a 	mov	r6,r2
   24344:	180f883a 	mov	r7,r3
   24348:	9009883a 	mov	r4,r18
   2434c:	a00b883a 	mov	r5,r20
   24350:	84000c04 	addi	r16,r16,48
   24354:	002ca000 	call	2ca00 <__subdf3>
   24358:	ad400044 	addi	r21,r21,1
   2435c:	ac3fffc5 	stb	r16,-1(r21)
   24360:	ac7fea1e 	bne	r21,r17,2430c <_gp+0xfffe9454>
   24364:	1023883a 	mov	r17,r2
   24368:	d8801217 	ldw	r2,72(sp)
   2436c:	dc800f17 	ldw	r18,60(sp)
   24370:	1829883a 	mov	r20,r3
   24374:	b8af883a 	add	r23,r23,r2
   24378:	d9001417 	ldw	r4,80(sp)
   2437c:	d9401517 	ldw	r5,84(sp)
   24380:	000d883a 	mov	r6,zero
   24384:	01cff834 	movhi	r7,16352
   24388:	002acc00 	call	2acc0 <__adddf3>
   2438c:	880d883a 	mov	r6,r17
   24390:	a00f883a 	mov	r7,r20
   24394:	1009883a 	mov	r4,r2
   24398:	180b883a 	mov	r5,r3
   2439c:	002c0a00 	call	2c0a0 <__ledf2>
   243a0:	10003e0e 	bge	r2,zero,2449c <_dtoa_r+0x1548>
   243a4:	d9001317 	ldw	r4,76(sp)
   243a8:	bd3fffc3 	ldbu	r20,-1(r23)
   243ac:	d9000515 	stw	r4,20(sp)
   243b0:	003d3b06 	br	238a0 <_gp+0xfffe89e8>
   243b4:	0027883a 	mov	r19,zero
   243b8:	003f1b06 	br	24028 <_gp+0xfffe9170>
   243bc:	d8800817 	ldw	r2,32(sp)
   243c0:	11e9c83a 	sub	r20,r2,r7
   243c4:	0005883a 	mov	r2,zero
   243c8:	003d5406 	br	2391c <_gp+0xfffe8a64>
   243cc:	00800044 	movi	r2,1
   243d0:	003dc706 	br	23af0 <_gp+0xfffe8c38>
   243d4:	d8c00217 	ldw	r3,8(sp)
   243d8:	00800d84 	movi	r2,54
   243dc:	dd400a17 	ldw	r21,40(sp)
   243e0:	10c5c83a 	sub	r2,r2,r3
   243e4:	dd000817 	ldw	r20,32(sp)
   243e8:	003d4c06 	br	2391c <_gp+0xfffe8a64>
   243ec:	dc800f15 	stw	r18,60(sp)
   243f0:	dcc01015 	stw	r19,64(sp)
   243f4:	04000084 	movi	r16,2
   243f8:	003bed06 	br	233b0 <_gp+0xfffe84f8>
   243fc:	d9000617 	ldw	r4,24(sp)
   24400:	203f0d26 	beq	r4,zero,24038 <_gp+0xfffe9180>
   24404:	d9800c17 	ldw	r6,48(sp)
   24408:	01bcab0e 	bge	zero,r6,236b8 <_gp+0xfffe8800>
   2440c:	d9401017 	ldw	r5,64(sp)
   24410:	d9000f17 	ldw	r4,60(sp)
   24414:	000d883a 	mov	r6,zero
   24418:	01d00934 	movhi	r7,16420
   2441c:	002c1940 	call	2c194 <__muldf3>
   24420:	81000044 	addi	r4,r16,1
   24424:	d8800f15 	stw	r2,60(sp)
   24428:	d8c01015 	stw	r3,64(sp)
   2442c:	002d37c0 	call	2d37c <__floatsidf>
   24430:	d9800f17 	ldw	r6,60(sp)
   24434:	d9c01017 	ldw	r7,64(sp)
   24438:	1009883a 	mov	r4,r2
   2443c:	180b883a 	mov	r5,r3
   24440:	002c1940 	call	2c194 <__muldf3>
   24444:	01d00734 	movhi	r7,16412
   24448:	000d883a 	mov	r6,zero
   2444c:	1009883a 	mov	r4,r2
   24450:	180b883a 	mov	r5,r3
   24454:	002acc00 	call	2acc0 <__adddf3>
   24458:	d9c00517 	ldw	r7,20(sp)
   2445c:	047f3034 	movhi	r17,64704
   24460:	1021883a 	mov	r16,r2
   24464:	39ffffc4 	addi	r7,r7,-1
   24468:	d9c01315 	stw	r7,76(sp)
   2446c:	1c63883a 	add	r17,r3,r17
   24470:	db000c17 	ldw	r12,48(sp)
   24474:	003bea06 	br	23420 <_gp+0xfffe8568>
   24478:	dc000915 	stw	r16,36(sp)
   2447c:	003e0e06 	br	23cb8 <_gp+0xfffe8e00>
   24480:	01000e44 	movi	r4,57
   24484:	8825883a 	mov	r18,r17
   24488:	9dc00044 	addi	r23,r19,1
   2448c:	99000005 	stb	r4,0(r19)
   24490:	a023883a 	mov	r17,r20
   24494:	dc000915 	stw	r16,36(sp)
   24498:	003da406 	br	23b2c <_gp+0xfffe8c74>
   2449c:	d9801417 	ldw	r6,80(sp)
   244a0:	d9c01517 	ldw	r7,84(sp)
   244a4:	0009883a 	mov	r4,zero
   244a8:	014ff834 	movhi	r5,16352
   244ac:	002ca000 	call	2ca00 <__subdf3>
   244b0:	880d883a 	mov	r6,r17
   244b4:	a00f883a 	mov	r7,r20
   244b8:	1009883a 	mov	r4,r2
   244bc:	180b883a 	mov	r5,r3
   244c0:	002bfc40 	call	2bfc4 <__gedf2>
   244c4:	00bc7c0e 	bge	zero,r2,236b8 <_gp+0xfffe8800>
   244c8:	01000c04 	movi	r4,48
   244cc:	00000106 	br	244d4 <_dtoa_r+0x1580>
   244d0:	102f883a 	mov	r23,r2
   244d4:	b8bfffc4 	addi	r2,r23,-1
   244d8:	10c00007 	ldb	r3,0(r2)
   244dc:	193ffc26 	beq	r3,r4,244d0 <_gp+0xfffe9618>
   244e0:	d9801317 	ldw	r6,76(sp)
   244e4:	d9800515 	stw	r6,20(sp)
   244e8:	003c4406 	br	235fc <_gp+0xfffe8744>
   244ec:	d9801317 	ldw	r6,76(sp)
   244f0:	d9800515 	stw	r6,20(sp)
   244f4:	003cea06 	br	238a0 <_gp+0xfffe89e8>
   244f8:	dd800f17 	ldw	r22,60(sp)
   244fc:	dcc01017 	ldw	r19,64(sp)
   24500:	dc801217 	ldw	r18,72(sp)
   24504:	003c6c06 	br	236b8 <_gp+0xfffe8800>
   24508:	903e031e 	bne	r18,zero,23d18 <_gp+0xfffe8e60>
   2450c:	003ebb06 	br	23ffc <_gp+0xfffe9144>
   24510:	103e6c1e 	bne	r2,zero,23ec4 <_gp+0xfffe900c>
   24514:	4080004c 	andi	r2,r8,1
   24518:	103e6a26 	beq	r2,zero,23ec4 <_gp+0xfffe900c>
   2451c:	003e6606 	br	23eb8 <_gp+0xfffe9000>
   24520:	d8c00317 	ldw	r3,12(sp)
   24524:	00800084 	movi	r2,2
   24528:	10c02916 	blt	r2,r3,245d0 <_dtoa_r+0x167c>
   2452c:	d9000c17 	ldw	r4,48(sp)
   24530:	003e8806 	br	23f54 <_gp+0xfffe909c>
   24534:	04000084 	movi	r16,2
   24538:	003b9d06 	br	233b0 <_gp+0xfffe84f8>
   2453c:	d9001317 	ldw	r4,76(sp)
   24540:	d9000515 	stw	r4,20(sp)
   24544:	003cd606 	br	238a0 <_gp+0xfffe89e8>
   24548:	d8801317 	ldw	r2,76(sp)
   2454c:	d8800515 	stw	r2,20(sp)
   24550:	003c2a06 	br	235fc <_gp+0xfffe8744>
   24554:	d9800317 	ldw	r6,12(sp)
   24558:	00800084 	movi	r2,2
   2455c:	11801516 	blt	r2,r6,245b4 <_dtoa_r+0x1660>
   24560:	d9c00c17 	ldw	r7,48(sp)
   24564:	d9c00615 	stw	r7,24(sp)
   24568:	003df706 	br	23d48 <_gp+0xfffe8e90>
   2456c:	193d3926 	beq	r3,r4,23a54 <_gp+0xfffe8b9c>
   24570:	00c00f04 	movi	r3,60
   24574:	1885c83a 	sub	r2,r3,r2
   24578:	003ddf06 	br	23cf8 <_gp+0xfffe8e40>
   2457c:	e009883a 	mov	r4,fp
   24580:	e0001115 	stw	zero,68(fp)
   24584:	000b883a 	mov	r5,zero
   24588:	002660c0 	call	2660c <_Balloc>
   2458c:	d8800715 	stw	r2,28(sp)
   24590:	d8c00717 	ldw	r3,28(sp)
   24594:	00bfffc4 	movi	r2,-1
   24598:	01000044 	movi	r4,1
   2459c:	d8800c15 	stw	r2,48(sp)
   245a0:	e0c01015 	stw	r3,64(fp)
   245a4:	d9000b15 	stw	r4,44(sp)
   245a8:	d8800615 	stw	r2,24(sp)
   245ac:	d8002215 	stw	zero,136(sp)
   245b0:	003c4106 	br	236b8 <_gp+0xfffe8800>
   245b4:	d8c00c17 	ldw	r3,48(sp)
   245b8:	d8c00615 	stw	r3,24(sp)
   245bc:	003e7006 	br	23f80 <_gp+0xfffe90c8>
   245c0:	04400044 	movi	r17,1
   245c4:	003b2006 	br	23248 <_gp+0xfffe8390>
   245c8:	000b883a 	mov	r5,zero
   245cc:	003b3d06 	br	232c4 <_gp+0xfffe840c>
   245d0:	d8800c17 	ldw	r2,48(sp)
   245d4:	d8800615 	stw	r2,24(sp)
   245d8:	003e6906 	br	23f80 <_gp+0xfffe90c8>

000245dc <__sflush_r>:
   245dc:	2880030b 	ldhu	r2,12(r5)
   245e0:	defffb04 	addi	sp,sp,-20
   245e4:	dcc00315 	stw	r19,12(sp)
   245e8:	dc400115 	stw	r17,4(sp)
   245ec:	dfc00415 	stw	ra,16(sp)
   245f0:	dc800215 	stw	r18,8(sp)
   245f4:	dc000015 	stw	r16,0(sp)
   245f8:	10c0020c 	andi	r3,r2,8
   245fc:	2823883a 	mov	r17,r5
   24600:	2027883a 	mov	r19,r4
   24604:	1800311e 	bne	r3,zero,246cc <__sflush_r+0xf0>
   24608:	28c00117 	ldw	r3,4(r5)
   2460c:	10820014 	ori	r2,r2,2048
   24610:	2880030d 	sth	r2,12(r5)
   24614:	00c04b0e 	bge	zero,r3,24744 <__sflush_r+0x168>
   24618:	8a000a17 	ldw	r8,40(r17)
   2461c:	40002326 	beq	r8,zero,246ac <__sflush_r+0xd0>
   24620:	9c000017 	ldw	r16,0(r19)
   24624:	10c4000c 	andi	r3,r2,4096
   24628:	98000015 	stw	zero,0(r19)
   2462c:	18004826 	beq	r3,zero,24750 <__sflush_r+0x174>
   24630:	89801417 	ldw	r6,80(r17)
   24634:	10c0010c 	andi	r3,r2,4
   24638:	18000626 	beq	r3,zero,24654 <__sflush_r+0x78>
   2463c:	88c00117 	ldw	r3,4(r17)
   24640:	88800c17 	ldw	r2,48(r17)
   24644:	30cdc83a 	sub	r6,r6,r3
   24648:	10000226 	beq	r2,zero,24654 <__sflush_r+0x78>
   2464c:	88800f17 	ldw	r2,60(r17)
   24650:	308dc83a 	sub	r6,r6,r2
   24654:	89400717 	ldw	r5,28(r17)
   24658:	000f883a 	mov	r7,zero
   2465c:	9809883a 	mov	r4,r19
   24660:	403ee83a 	callr	r8
   24664:	00ffffc4 	movi	r3,-1
   24668:	10c04426 	beq	r2,r3,2477c <__sflush_r+0x1a0>
   2466c:	88c0030b 	ldhu	r3,12(r17)
   24670:	89000417 	ldw	r4,16(r17)
   24674:	88000115 	stw	zero,4(r17)
   24678:	197dffcc 	andi	r5,r3,63487
   2467c:	8940030d 	sth	r5,12(r17)
   24680:	89000015 	stw	r4,0(r17)
   24684:	18c4000c 	andi	r3,r3,4096
   24688:	18002c1e 	bne	r3,zero,2473c <__sflush_r+0x160>
   2468c:	89400c17 	ldw	r5,48(r17)
   24690:	9c000015 	stw	r16,0(r19)
   24694:	28000526 	beq	r5,zero,246ac <__sflush_r+0xd0>
   24698:	88801004 	addi	r2,r17,64
   2469c:	28800226 	beq	r5,r2,246a8 <__sflush_r+0xcc>
   246a0:	9809883a 	mov	r4,r19
   246a4:	0024d580 	call	24d58 <_free_r>
   246a8:	88000c15 	stw	zero,48(r17)
   246ac:	0005883a 	mov	r2,zero
   246b0:	dfc00417 	ldw	ra,16(sp)
   246b4:	dcc00317 	ldw	r19,12(sp)
   246b8:	dc800217 	ldw	r18,8(sp)
   246bc:	dc400117 	ldw	r17,4(sp)
   246c0:	dc000017 	ldw	r16,0(sp)
   246c4:	dec00504 	addi	sp,sp,20
   246c8:	f800283a 	ret
   246cc:	2c800417 	ldw	r18,16(r5)
   246d0:	903ff626 	beq	r18,zero,246ac <_gp+0xfffe97f4>
   246d4:	2c000017 	ldw	r16,0(r5)
   246d8:	108000cc 	andi	r2,r2,3
   246dc:	2c800015 	stw	r18,0(r5)
   246e0:	84a1c83a 	sub	r16,r16,r18
   246e4:	1000131e 	bne	r2,zero,24734 <__sflush_r+0x158>
   246e8:	28800517 	ldw	r2,20(r5)
   246ec:	88800215 	stw	r2,8(r17)
   246f0:	04000316 	blt	zero,r16,24700 <__sflush_r+0x124>
   246f4:	003fed06 	br	246ac <_gp+0xfffe97f4>
   246f8:	90a5883a 	add	r18,r18,r2
   246fc:	043feb0e 	bge	zero,r16,246ac <_gp+0xfffe97f4>
   24700:	88800917 	ldw	r2,36(r17)
   24704:	89400717 	ldw	r5,28(r17)
   24708:	800f883a 	mov	r7,r16
   2470c:	900d883a 	mov	r6,r18
   24710:	9809883a 	mov	r4,r19
   24714:	103ee83a 	callr	r2
   24718:	80a1c83a 	sub	r16,r16,r2
   2471c:	00bff616 	blt	zero,r2,246f8 <_gp+0xfffe9840>
   24720:	88c0030b 	ldhu	r3,12(r17)
   24724:	00bfffc4 	movi	r2,-1
   24728:	18c01014 	ori	r3,r3,64
   2472c:	88c0030d 	sth	r3,12(r17)
   24730:	003fdf06 	br	246b0 <_gp+0xfffe97f8>
   24734:	0005883a 	mov	r2,zero
   24738:	003fec06 	br	246ec <_gp+0xfffe9834>
   2473c:	88801415 	stw	r2,80(r17)
   24740:	003fd206 	br	2468c <_gp+0xfffe97d4>
   24744:	28c00f17 	ldw	r3,60(r5)
   24748:	00ffb316 	blt	zero,r3,24618 <_gp+0xfffe9760>
   2474c:	003fd706 	br	246ac <_gp+0xfffe97f4>
   24750:	89400717 	ldw	r5,28(r17)
   24754:	000d883a 	mov	r6,zero
   24758:	01c00044 	movi	r7,1
   2475c:	9809883a 	mov	r4,r19
   24760:	403ee83a 	callr	r8
   24764:	100d883a 	mov	r6,r2
   24768:	00bfffc4 	movi	r2,-1
   2476c:	30801426 	beq	r6,r2,247c0 <__sflush_r+0x1e4>
   24770:	8880030b 	ldhu	r2,12(r17)
   24774:	8a000a17 	ldw	r8,40(r17)
   24778:	003fae06 	br	24634 <_gp+0xfffe977c>
   2477c:	98c00017 	ldw	r3,0(r19)
   24780:	183fba26 	beq	r3,zero,2466c <_gp+0xfffe97b4>
   24784:	01000744 	movi	r4,29
   24788:	19000626 	beq	r3,r4,247a4 <__sflush_r+0x1c8>
   2478c:	01000584 	movi	r4,22
   24790:	19000426 	beq	r3,r4,247a4 <__sflush_r+0x1c8>
   24794:	88c0030b 	ldhu	r3,12(r17)
   24798:	18c01014 	ori	r3,r3,64
   2479c:	88c0030d 	sth	r3,12(r17)
   247a0:	003fc306 	br	246b0 <_gp+0xfffe97f8>
   247a4:	8880030b 	ldhu	r2,12(r17)
   247a8:	88c00417 	ldw	r3,16(r17)
   247ac:	88000115 	stw	zero,4(r17)
   247b0:	10bdffcc 	andi	r2,r2,63487
   247b4:	8880030d 	sth	r2,12(r17)
   247b8:	88c00015 	stw	r3,0(r17)
   247bc:	003fb306 	br	2468c <_gp+0xfffe97d4>
   247c0:	98800017 	ldw	r2,0(r19)
   247c4:	103fea26 	beq	r2,zero,24770 <_gp+0xfffe98b8>
   247c8:	00c00744 	movi	r3,29
   247cc:	10c00226 	beq	r2,r3,247d8 <__sflush_r+0x1fc>
   247d0:	00c00584 	movi	r3,22
   247d4:	10c0031e 	bne	r2,r3,247e4 <__sflush_r+0x208>
   247d8:	9c000015 	stw	r16,0(r19)
   247dc:	0005883a 	mov	r2,zero
   247e0:	003fb306 	br	246b0 <_gp+0xfffe97f8>
   247e4:	88c0030b 	ldhu	r3,12(r17)
   247e8:	3005883a 	mov	r2,r6
   247ec:	18c01014 	ori	r3,r3,64
   247f0:	88c0030d 	sth	r3,12(r17)
   247f4:	003fae06 	br	246b0 <_gp+0xfffe97f8>

000247f8 <_fflush_r>:
   247f8:	defffd04 	addi	sp,sp,-12
   247fc:	dc000115 	stw	r16,4(sp)
   24800:	dfc00215 	stw	ra,8(sp)
   24804:	2021883a 	mov	r16,r4
   24808:	20000226 	beq	r4,zero,24814 <_fflush_r+0x1c>
   2480c:	20800e17 	ldw	r2,56(r4)
   24810:	10000c26 	beq	r2,zero,24844 <_fflush_r+0x4c>
   24814:	2880030f 	ldh	r2,12(r5)
   24818:	1000051e 	bne	r2,zero,24830 <_fflush_r+0x38>
   2481c:	0005883a 	mov	r2,zero
   24820:	dfc00217 	ldw	ra,8(sp)
   24824:	dc000117 	ldw	r16,4(sp)
   24828:	dec00304 	addi	sp,sp,12
   2482c:	f800283a 	ret
   24830:	8009883a 	mov	r4,r16
   24834:	dfc00217 	ldw	ra,8(sp)
   24838:	dc000117 	ldw	r16,4(sp)
   2483c:	dec00304 	addi	sp,sp,12
   24840:	00245dc1 	jmpi	245dc <__sflush_r>
   24844:	d9400015 	stw	r5,0(sp)
   24848:	0024be40 	call	24be4 <__sinit>
   2484c:	d9400017 	ldw	r5,0(sp)
   24850:	003ff006 	br	24814 <_gp+0xfffe995c>

00024854 <fflush>:
   24854:	20000526 	beq	r4,zero,2486c <fflush+0x18>
   24858:	008000f4 	movhi	r2,3
   2485c:	108baf04 	addi	r2,r2,11964
   24860:	200b883a 	mov	r5,r4
   24864:	11000017 	ldw	r4,0(r2)
   24868:	00247f81 	jmpi	247f8 <_fflush_r>
   2486c:	008000f4 	movhi	r2,3
   24870:	108bae04 	addi	r2,r2,11960
   24874:	11000017 	ldw	r4,0(r2)
   24878:	014000b4 	movhi	r5,2
   2487c:	2951fe04 	addi	r5,r5,18424
   24880:	00255f41 	jmpi	255f4 <_fwalk_reent>

00024884 <__fp_unlock>:
   24884:	0005883a 	mov	r2,zero
   24888:	f800283a 	ret

0002488c <_cleanup_r>:
   2488c:	014000f4 	movhi	r5,3
   24890:	2965e404 	addi	r5,r5,-26736
   24894:	00255f41 	jmpi	255f4 <_fwalk_reent>

00024898 <__sinit.part.1>:
   24898:	defff704 	addi	sp,sp,-36
   2489c:	00c000b4 	movhi	r3,2
   248a0:	dfc00815 	stw	ra,32(sp)
   248a4:	ddc00715 	stw	r23,28(sp)
   248a8:	dd800615 	stw	r22,24(sp)
   248ac:	dd400515 	stw	r21,20(sp)
   248b0:	dd000415 	stw	r20,16(sp)
   248b4:	dcc00315 	stw	r19,12(sp)
   248b8:	dc800215 	stw	r18,8(sp)
   248bc:	dc400115 	stw	r17,4(sp)
   248c0:	dc000015 	stw	r16,0(sp)
   248c4:	18d22304 	addi	r3,r3,18572
   248c8:	24000117 	ldw	r16,4(r4)
   248cc:	20c00f15 	stw	r3,60(r4)
   248d0:	2080bb04 	addi	r2,r4,748
   248d4:	00c000c4 	movi	r3,3
   248d8:	20c0b915 	stw	r3,740(r4)
   248dc:	2080ba15 	stw	r2,744(r4)
   248e0:	2000b815 	stw	zero,736(r4)
   248e4:	05c00204 	movi	r23,8
   248e8:	00800104 	movi	r2,4
   248ec:	2025883a 	mov	r18,r4
   248f0:	b80d883a 	mov	r6,r23
   248f4:	81001704 	addi	r4,r16,92
   248f8:	000b883a 	mov	r5,zero
   248fc:	80000015 	stw	zero,0(r16)
   24900:	80000115 	stw	zero,4(r16)
   24904:	80000215 	stw	zero,8(r16)
   24908:	8080030d 	sth	r2,12(r16)
   2490c:	80001915 	stw	zero,100(r16)
   24910:	8000038d 	sth	zero,14(r16)
   24914:	80000415 	stw	zero,16(r16)
   24918:	80000515 	stw	zero,20(r16)
   2491c:	80000615 	stw	zero,24(r16)
   24920:	00264e40 	call	264e4 <memset>
   24924:	058000b4 	movhi	r22,2
   24928:	94400217 	ldw	r17,8(r18)
   2492c:	054000b4 	movhi	r21,2
   24930:	050000b4 	movhi	r20,2
   24934:	04c000b4 	movhi	r19,2
   24938:	b59f3c04 	addi	r22,r22,31984
   2493c:	ad5f5304 	addi	r21,r21,32076
   24940:	a51f7204 	addi	r20,r20,32200
   24944:	9cdf8904 	addi	r19,r19,32292
   24948:	85800815 	stw	r22,32(r16)
   2494c:	85400915 	stw	r21,36(r16)
   24950:	85000a15 	stw	r20,40(r16)
   24954:	84c00b15 	stw	r19,44(r16)
   24958:	84000715 	stw	r16,28(r16)
   2495c:	00800284 	movi	r2,10
   24960:	8880030d 	sth	r2,12(r17)
   24964:	00800044 	movi	r2,1
   24968:	b80d883a 	mov	r6,r23
   2496c:	89001704 	addi	r4,r17,92
   24970:	000b883a 	mov	r5,zero
   24974:	88000015 	stw	zero,0(r17)
   24978:	88000115 	stw	zero,4(r17)
   2497c:	88000215 	stw	zero,8(r17)
   24980:	88001915 	stw	zero,100(r17)
   24984:	8880038d 	sth	r2,14(r17)
   24988:	88000415 	stw	zero,16(r17)
   2498c:	88000515 	stw	zero,20(r17)
   24990:	88000615 	stw	zero,24(r17)
   24994:	00264e40 	call	264e4 <memset>
   24998:	94000317 	ldw	r16,12(r18)
   2499c:	00800484 	movi	r2,18
   249a0:	8c400715 	stw	r17,28(r17)
   249a4:	8d800815 	stw	r22,32(r17)
   249a8:	8d400915 	stw	r21,36(r17)
   249ac:	8d000a15 	stw	r20,40(r17)
   249b0:	8cc00b15 	stw	r19,44(r17)
   249b4:	8080030d 	sth	r2,12(r16)
   249b8:	00800084 	movi	r2,2
   249bc:	80000015 	stw	zero,0(r16)
   249c0:	80000115 	stw	zero,4(r16)
   249c4:	80000215 	stw	zero,8(r16)
   249c8:	80001915 	stw	zero,100(r16)
   249cc:	8080038d 	sth	r2,14(r16)
   249d0:	80000415 	stw	zero,16(r16)
   249d4:	80000515 	stw	zero,20(r16)
   249d8:	80000615 	stw	zero,24(r16)
   249dc:	b80d883a 	mov	r6,r23
   249e0:	000b883a 	mov	r5,zero
   249e4:	81001704 	addi	r4,r16,92
   249e8:	00264e40 	call	264e4 <memset>
   249ec:	00800044 	movi	r2,1
   249f0:	84000715 	stw	r16,28(r16)
   249f4:	85800815 	stw	r22,32(r16)
   249f8:	85400915 	stw	r21,36(r16)
   249fc:	85000a15 	stw	r20,40(r16)
   24a00:	84c00b15 	stw	r19,44(r16)
   24a04:	90800e15 	stw	r2,56(r18)
   24a08:	dfc00817 	ldw	ra,32(sp)
   24a0c:	ddc00717 	ldw	r23,28(sp)
   24a10:	dd800617 	ldw	r22,24(sp)
   24a14:	dd400517 	ldw	r21,20(sp)
   24a18:	dd000417 	ldw	r20,16(sp)
   24a1c:	dcc00317 	ldw	r19,12(sp)
   24a20:	dc800217 	ldw	r18,8(sp)
   24a24:	dc400117 	ldw	r17,4(sp)
   24a28:	dc000017 	ldw	r16,0(sp)
   24a2c:	dec00904 	addi	sp,sp,36
   24a30:	f800283a 	ret

00024a34 <__fp_lock>:
   24a34:	0005883a 	mov	r2,zero
   24a38:	f800283a 	ret

00024a3c <__sfmoreglue>:
   24a3c:	defffc04 	addi	sp,sp,-16
   24a40:	dc800215 	stw	r18,8(sp)
   24a44:	2825883a 	mov	r18,r5
   24a48:	dc000015 	stw	r16,0(sp)
   24a4c:	01401a04 	movi	r5,104
   24a50:	2021883a 	mov	r16,r4
   24a54:	913fffc4 	addi	r4,r18,-1
   24a58:	dfc00315 	stw	ra,12(sp)
   24a5c:	dc400115 	stw	r17,4(sp)
   24a60:	00206240 	call	20624 <__mulsi3>
   24a64:	8009883a 	mov	r4,r16
   24a68:	11401d04 	addi	r5,r2,116
   24a6c:	1023883a 	mov	r17,r2
   24a70:	00259500 	call	25950 <_malloc_r>
   24a74:	1021883a 	mov	r16,r2
   24a78:	10000726 	beq	r2,zero,24a98 <__sfmoreglue+0x5c>
   24a7c:	11000304 	addi	r4,r2,12
   24a80:	10000015 	stw	zero,0(r2)
   24a84:	14800115 	stw	r18,4(r2)
   24a88:	11000215 	stw	r4,8(r2)
   24a8c:	89801a04 	addi	r6,r17,104
   24a90:	000b883a 	mov	r5,zero
   24a94:	00264e40 	call	264e4 <memset>
   24a98:	8005883a 	mov	r2,r16
   24a9c:	dfc00317 	ldw	ra,12(sp)
   24aa0:	dc800217 	ldw	r18,8(sp)
   24aa4:	dc400117 	ldw	r17,4(sp)
   24aa8:	dc000017 	ldw	r16,0(sp)
   24aac:	dec00404 	addi	sp,sp,16
   24ab0:	f800283a 	ret

00024ab4 <__sfp>:
   24ab4:	defffb04 	addi	sp,sp,-20
   24ab8:	dc000015 	stw	r16,0(sp)
   24abc:	040000f4 	movhi	r16,3
   24ac0:	840bae04 	addi	r16,r16,11960
   24ac4:	dcc00315 	stw	r19,12(sp)
   24ac8:	2027883a 	mov	r19,r4
   24acc:	81000017 	ldw	r4,0(r16)
   24ad0:	dfc00415 	stw	ra,16(sp)
   24ad4:	dc800215 	stw	r18,8(sp)
   24ad8:	20800e17 	ldw	r2,56(r4)
   24adc:	dc400115 	stw	r17,4(sp)
   24ae0:	1000021e 	bne	r2,zero,24aec <__sfp+0x38>
   24ae4:	00248980 	call	24898 <__sinit.part.1>
   24ae8:	81000017 	ldw	r4,0(r16)
   24aec:	2480b804 	addi	r18,r4,736
   24af0:	047fffc4 	movi	r17,-1
   24af4:	91000117 	ldw	r4,4(r18)
   24af8:	94000217 	ldw	r16,8(r18)
   24afc:	213fffc4 	addi	r4,r4,-1
   24b00:	20000a16 	blt	r4,zero,24b2c <__sfp+0x78>
   24b04:	8080030f 	ldh	r2,12(r16)
   24b08:	10000c26 	beq	r2,zero,24b3c <__sfp+0x88>
   24b0c:	80c01d04 	addi	r3,r16,116
   24b10:	00000206 	br	24b1c <__sfp+0x68>
   24b14:	18bfe60f 	ldh	r2,-104(r3)
   24b18:	10000826 	beq	r2,zero,24b3c <__sfp+0x88>
   24b1c:	213fffc4 	addi	r4,r4,-1
   24b20:	1c3ffd04 	addi	r16,r3,-12
   24b24:	18c01a04 	addi	r3,r3,104
   24b28:	247ffa1e 	bne	r4,r17,24b14 <_gp+0xfffe9c5c>
   24b2c:	90800017 	ldw	r2,0(r18)
   24b30:	10001d26 	beq	r2,zero,24ba8 <__sfp+0xf4>
   24b34:	1025883a 	mov	r18,r2
   24b38:	003fee06 	br	24af4 <_gp+0xfffe9c3c>
   24b3c:	00bfffc4 	movi	r2,-1
   24b40:	8080038d 	sth	r2,14(r16)
   24b44:	00800044 	movi	r2,1
   24b48:	8080030d 	sth	r2,12(r16)
   24b4c:	80001915 	stw	zero,100(r16)
   24b50:	80000015 	stw	zero,0(r16)
   24b54:	80000215 	stw	zero,8(r16)
   24b58:	80000115 	stw	zero,4(r16)
   24b5c:	80000415 	stw	zero,16(r16)
   24b60:	80000515 	stw	zero,20(r16)
   24b64:	80000615 	stw	zero,24(r16)
   24b68:	01800204 	movi	r6,8
   24b6c:	000b883a 	mov	r5,zero
   24b70:	81001704 	addi	r4,r16,92
   24b74:	00264e40 	call	264e4 <memset>
   24b78:	8005883a 	mov	r2,r16
   24b7c:	80000c15 	stw	zero,48(r16)
   24b80:	80000d15 	stw	zero,52(r16)
   24b84:	80001115 	stw	zero,68(r16)
   24b88:	80001215 	stw	zero,72(r16)
   24b8c:	dfc00417 	ldw	ra,16(sp)
   24b90:	dcc00317 	ldw	r19,12(sp)
   24b94:	dc800217 	ldw	r18,8(sp)
   24b98:	dc400117 	ldw	r17,4(sp)
   24b9c:	dc000017 	ldw	r16,0(sp)
   24ba0:	dec00504 	addi	sp,sp,20
   24ba4:	f800283a 	ret
   24ba8:	01400104 	movi	r5,4
   24bac:	9809883a 	mov	r4,r19
   24bb0:	0024a3c0 	call	24a3c <__sfmoreglue>
   24bb4:	90800015 	stw	r2,0(r18)
   24bb8:	103fde1e 	bne	r2,zero,24b34 <_gp+0xfffe9c7c>
   24bbc:	00800304 	movi	r2,12
   24bc0:	98800015 	stw	r2,0(r19)
   24bc4:	0005883a 	mov	r2,zero
   24bc8:	003ff006 	br	24b8c <_gp+0xfffe9cd4>

00024bcc <_cleanup>:
   24bcc:	008000f4 	movhi	r2,3
   24bd0:	108bae04 	addi	r2,r2,11960
   24bd4:	11000017 	ldw	r4,0(r2)
   24bd8:	014000f4 	movhi	r5,3
   24bdc:	2965e404 	addi	r5,r5,-26736
   24be0:	00255f41 	jmpi	255f4 <_fwalk_reent>

00024be4 <__sinit>:
   24be4:	20800e17 	ldw	r2,56(r4)
   24be8:	10000126 	beq	r2,zero,24bf0 <__sinit+0xc>
   24bec:	f800283a 	ret
   24bf0:	00248981 	jmpi	24898 <__sinit.part.1>

00024bf4 <__sfp_lock_acquire>:
   24bf4:	f800283a 	ret

00024bf8 <__sfp_lock_release>:
   24bf8:	f800283a 	ret

00024bfc <__sinit_lock_acquire>:
   24bfc:	f800283a 	ret

00024c00 <__sinit_lock_release>:
   24c00:	f800283a 	ret

00024c04 <__fp_lock_all>:
   24c04:	008000f4 	movhi	r2,3
   24c08:	108baf04 	addi	r2,r2,11964
   24c0c:	11000017 	ldw	r4,0(r2)
   24c10:	014000b4 	movhi	r5,2
   24c14:	29528d04 	addi	r5,r5,18996
   24c18:	00255301 	jmpi	25530 <_fwalk>

00024c1c <__fp_unlock_all>:
   24c1c:	008000f4 	movhi	r2,3
   24c20:	108baf04 	addi	r2,r2,11964
   24c24:	11000017 	ldw	r4,0(r2)
   24c28:	014000b4 	movhi	r5,2
   24c2c:	29522104 	addi	r5,r5,18564
   24c30:	00255301 	jmpi	25530 <_fwalk>

00024c34 <_malloc_trim_r>:
   24c34:	defffb04 	addi	sp,sp,-20
   24c38:	dcc00315 	stw	r19,12(sp)
   24c3c:	04c000f4 	movhi	r19,3
   24c40:	dc800215 	stw	r18,8(sp)
   24c44:	dc400115 	stw	r17,4(sp)
   24c48:	dc000015 	stw	r16,0(sp)
   24c4c:	dfc00415 	stw	ra,16(sp)
   24c50:	2821883a 	mov	r16,r5
   24c54:	9cc5e204 	addi	r19,r19,6024
   24c58:	2025883a 	mov	r18,r4
   24c5c:	002db000 	call	2db00 <__malloc_lock>
   24c60:	98800217 	ldw	r2,8(r19)
   24c64:	14400117 	ldw	r17,4(r2)
   24c68:	00bfff04 	movi	r2,-4
   24c6c:	88a2703a 	and	r17,r17,r2
   24c70:	8c21c83a 	sub	r16,r17,r16
   24c74:	8403fbc4 	addi	r16,r16,4079
   24c78:	8020d33a 	srli	r16,r16,12
   24c7c:	0083ffc4 	movi	r2,4095
   24c80:	843fffc4 	addi	r16,r16,-1
   24c84:	8020933a 	slli	r16,r16,12
   24c88:	1400060e 	bge	r2,r16,24ca4 <_malloc_trim_r+0x70>
   24c8c:	000b883a 	mov	r5,zero
   24c90:	9009883a 	mov	r4,r18
   24c94:	0027c9c0 	call	27c9c <_sbrk_r>
   24c98:	98c00217 	ldw	r3,8(r19)
   24c9c:	1c47883a 	add	r3,r3,r17
   24ca0:	10c00a26 	beq	r2,r3,24ccc <_malloc_trim_r+0x98>
   24ca4:	9009883a 	mov	r4,r18
   24ca8:	002db240 	call	2db24 <__malloc_unlock>
   24cac:	0005883a 	mov	r2,zero
   24cb0:	dfc00417 	ldw	ra,16(sp)
   24cb4:	dcc00317 	ldw	r19,12(sp)
   24cb8:	dc800217 	ldw	r18,8(sp)
   24cbc:	dc400117 	ldw	r17,4(sp)
   24cc0:	dc000017 	ldw	r16,0(sp)
   24cc4:	dec00504 	addi	sp,sp,20
   24cc8:	f800283a 	ret
   24ccc:	040bc83a 	sub	r5,zero,r16
   24cd0:	9009883a 	mov	r4,r18
   24cd4:	0027c9c0 	call	27c9c <_sbrk_r>
   24cd8:	00ffffc4 	movi	r3,-1
   24cdc:	10c00d26 	beq	r2,r3,24d14 <_malloc_trim_r+0xe0>
   24ce0:	00c000f4 	movhi	r3,3
   24ce4:	18d2d304 	addi	r3,r3,19276
   24ce8:	18800017 	ldw	r2,0(r3)
   24cec:	99000217 	ldw	r4,8(r19)
   24cf0:	8c23c83a 	sub	r17,r17,r16
   24cf4:	8c400054 	ori	r17,r17,1
   24cf8:	1421c83a 	sub	r16,r2,r16
   24cfc:	24400115 	stw	r17,4(r4)
   24d00:	9009883a 	mov	r4,r18
   24d04:	1c000015 	stw	r16,0(r3)
   24d08:	002db240 	call	2db24 <__malloc_unlock>
   24d0c:	00800044 	movi	r2,1
   24d10:	003fe706 	br	24cb0 <_gp+0xfffe9df8>
   24d14:	000b883a 	mov	r5,zero
   24d18:	9009883a 	mov	r4,r18
   24d1c:	0027c9c0 	call	27c9c <_sbrk_r>
   24d20:	99000217 	ldw	r4,8(r19)
   24d24:	014003c4 	movi	r5,15
   24d28:	1107c83a 	sub	r3,r2,r4
   24d2c:	28ffdd0e 	bge	r5,r3,24ca4 <_gp+0xfffe9dec>
   24d30:	014000f4 	movhi	r5,3
   24d34:	294bb104 	addi	r5,r5,11972
   24d38:	29400017 	ldw	r5,0(r5)
   24d3c:	18c00054 	ori	r3,r3,1
   24d40:	20c00115 	stw	r3,4(r4)
   24d44:	00c000f4 	movhi	r3,3
   24d48:	1145c83a 	sub	r2,r2,r5
   24d4c:	18d2d304 	addi	r3,r3,19276
   24d50:	18800015 	stw	r2,0(r3)
   24d54:	003fd306 	br	24ca4 <_gp+0xfffe9dec>

00024d58 <_free_r>:
   24d58:	28004126 	beq	r5,zero,24e60 <_free_r+0x108>
   24d5c:	defffd04 	addi	sp,sp,-12
   24d60:	dc400115 	stw	r17,4(sp)
   24d64:	dc000015 	stw	r16,0(sp)
   24d68:	2023883a 	mov	r17,r4
   24d6c:	2821883a 	mov	r16,r5
   24d70:	dfc00215 	stw	ra,8(sp)
   24d74:	002db000 	call	2db00 <__malloc_lock>
   24d78:	81ffff17 	ldw	r7,-4(r16)
   24d7c:	00bfff84 	movi	r2,-2
   24d80:	010000f4 	movhi	r4,3
   24d84:	81bffe04 	addi	r6,r16,-8
   24d88:	3884703a 	and	r2,r7,r2
   24d8c:	2105e204 	addi	r4,r4,6024
   24d90:	308b883a 	add	r5,r6,r2
   24d94:	2a400117 	ldw	r9,4(r5)
   24d98:	22000217 	ldw	r8,8(r4)
   24d9c:	00ffff04 	movi	r3,-4
   24da0:	48c6703a 	and	r3,r9,r3
   24da4:	2a005726 	beq	r5,r8,24f04 <_free_r+0x1ac>
   24da8:	28c00115 	stw	r3,4(r5)
   24dac:	39c0004c 	andi	r7,r7,1
   24db0:	3800091e 	bne	r7,zero,24dd8 <_free_r+0x80>
   24db4:	823ffe17 	ldw	r8,-8(r16)
   24db8:	22400204 	addi	r9,r4,8
   24dbc:	320dc83a 	sub	r6,r6,r8
   24dc0:	31c00217 	ldw	r7,8(r6)
   24dc4:	1205883a 	add	r2,r2,r8
   24dc8:	3a406526 	beq	r7,r9,24f60 <_free_r+0x208>
   24dcc:	32000317 	ldw	r8,12(r6)
   24dd0:	3a000315 	stw	r8,12(r7)
   24dd4:	41c00215 	stw	r7,8(r8)
   24dd8:	28cf883a 	add	r7,r5,r3
   24ddc:	39c00117 	ldw	r7,4(r7)
   24de0:	39c0004c 	andi	r7,r7,1
   24de4:	38003a26 	beq	r7,zero,24ed0 <_free_r+0x178>
   24de8:	10c00054 	ori	r3,r2,1
   24dec:	30c00115 	stw	r3,4(r6)
   24df0:	3087883a 	add	r3,r6,r2
   24df4:	18800015 	stw	r2,0(r3)
   24df8:	00c07fc4 	movi	r3,511
   24dfc:	18801936 	bltu	r3,r2,24e64 <_free_r+0x10c>
   24e00:	1004d0fa 	srli	r2,r2,3
   24e04:	01c00044 	movi	r7,1
   24e08:	21400117 	ldw	r5,4(r4)
   24e0c:	10c00044 	addi	r3,r2,1
   24e10:	18c7883a 	add	r3,r3,r3
   24e14:	1005d0ba 	srai	r2,r2,2
   24e18:	18c7883a 	add	r3,r3,r3
   24e1c:	18c7883a 	add	r3,r3,r3
   24e20:	1907883a 	add	r3,r3,r4
   24e24:	3884983a 	sll	r2,r7,r2
   24e28:	19c00017 	ldw	r7,0(r3)
   24e2c:	1a3ffe04 	addi	r8,r3,-8
   24e30:	1144b03a 	or	r2,r2,r5
   24e34:	32000315 	stw	r8,12(r6)
   24e38:	31c00215 	stw	r7,8(r6)
   24e3c:	20800115 	stw	r2,4(r4)
   24e40:	19800015 	stw	r6,0(r3)
   24e44:	39800315 	stw	r6,12(r7)
   24e48:	8809883a 	mov	r4,r17
   24e4c:	dfc00217 	ldw	ra,8(sp)
   24e50:	dc400117 	ldw	r17,4(sp)
   24e54:	dc000017 	ldw	r16,0(sp)
   24e58:	dec00304 	addi	sp,sp,12
   24e5c:	002db241 	jmpi	2db24 <__malloc_unlock>
   24e60:	f800283a 	ret
   24e64:	100ad27a 	srli	r5,r2,9
   24e68:	00c00104 	movi	r3,4
   24e6c:	19404a36 	bltu	r3,r5,24f98 <_free_r+0x240>
   24e70:	100ad1ba 	srli	r5,r2,6
   24e74:	28c00e44 	addi	r3,r5,57
   24e78:	18c7883a 	add	r3,r3,r3
   24e7c:	29400e04 	addi	r5,r5,56
   24e80:	18c7883a 	add	r3,r3,r3
   24e84:	18c7883a 	add	r3,r3,r3
   24e88:	1909883a 	add	r4,r3,r4
   24e8c:	20c00017 	ldw	r3,0(r4)
   24e90:	01c000f4 	movhi	r7,3
   24e94:	213ffe04 	addi	r4,r4,-8
   24e98:	39c5e204 	addi	r7,r7,6024
   24e9c:	20c04426 	beq	r4,r3,24fb0 <_free_r+0x258>
   24ea0:	01ffff04 	movi	r7,-4
   24ea4:	19400117 	ldw	r5,4(r3)
   24ea8:	29ca703a 	and	r5,r5,r7
   24eac:	1140022e 	bgeu	r2,r5,24eb8 <_free_r+0x160>
   24eb0:	18c00217 	ldw	r3,8(r3)
   24eb4:	20fffb1e 	bne	r4,r3,24ea4 <_gp+0xfffe9fec>
   24eb8:	19000317 	ldw	r4,12(r3)
   24ebc:	31000315 	stw	r4,12(r6)
   24ec0:	30c00215 	stw	r3,8(r6)
   24ec4:	21800215 	stw	r6,8(r4)
   24ec8:	19800315 	stw	r6,12(r3)
   24ecc:	003fde06 	br	24e48 <_gp+0xfffe9f90>
   24ed0:	29c00217 	ldw	r7,8(r5)
   24ed4:	10c5883a 	add	r2,r2,r3
   24ed8:	00c000f4 	movhi	r3,3
   24edc:	18c5e404 	addi	r3,r3,6032
   24ee0:	38c03b26 	beq	r7,r3,24fd0 <_free_r+0x278>
   24ee4:	2a000317 	ldw	r8,12(r5)
   24ee8:	11400054 	ori	r5,r2,1
   24eec:	3087883a 	add	r3,r6,r2
   24ef0:	3a000315 	stw	r8,12(r7)
   24ef4:	41c00215 	stw	r7,8(r8)
   24ef8:	31400115 	stw	r5,4(r6)
   24efc:	18800015 	stw	r2,0(r3)
   24f00:	003fbd06 	br	24df8 <_gp+0xfffe9f40>
   24f04:	39c0004c 	andi	r7,r7,1
   24f08:	10c5883a 	add	r2,r2,r3
   24f0c:	3800071e 	bne	r7,zero,24f2c <_free_r+0x1d4>
   24f10:	81fffe17 	ldw	r7,-8(r16)
   24f14:	31cdc83a 	sub	r6,r6,r7
   24f18:	30c00317 	ldw	r3,12(r6)
   24f1c:	31400217 	ldw	r5,8(r6)
   24f20:	11c5883a 	add	r2,r2,r7
   24f24:	28c00315 	stw	r3,12(r5)
   24f28:	19400215 	stw	r5,8(r3)
   24f2c:	10c00054 	ori	r3,r2,1
   24f30:	30c00115 	stw	r3,4(r6)
   24f34:	00c000f4 	movhi	r3,3
   24f38:	18cbb204 	addi	r3,r3,11976
   24f3c:	18c00017 	ldw	r3,0(r3)
   24f40:	21800215 	stw	r6,8(r4)
   24f44:	10ffc036 	bltu	r2,r3,24e48 <_gp+0xfffe9f90>
   24f48:	008000f4 	movhi	r2,3
   24f4c:	1092ca04 	addi	r2,r2,19240
   24f50:	11400017 	ldw	r5,0(r2)
   24f54:	8809883a 	mov	r4,r17
   24f58:	0024c340 	call	24c34 <_malloc_trim_r>
   24f5c:	003fba06 	br	24e48 <_gp+0xfffe9f90>
   24f60:	28c9883a 	add	r4,r5,r3
   24f64:	21000117 	ldw	r4,4(r4)
   24f68:	2100004c 	andi	r4,r4,1
   24f6c:	2000391e 	bne	r4,zero,25054 <_free_r+0x2fc>
   24f70:	29c00217 	ldw	r7,8(r5)
   24f74:	29000317 	ldw	r4,12(r5)
   24f78:	1885883a 	add	r2,r3,r2
   24f7c:	10c00054 	ori	r3,r2,1
   24f80:	39000315 	stw	r4,12(r7)
   24f84:	21c00215 	stw	r7,8(r4)
   24f88:	30c00115 	stw	r3,4(r6)
   24f8c:	308d883a 	add	r6,r6,r2
   24f90:	30800015 	stw	r2,0(r6)
   24f94:	003fac06 	br	24e48 <_gp+0xfffe9f90>
   24f98:	00c00504 	movi	r3,20
   24f9c:	19401536 	bltu	r3,r5,24ff4 <_free_r+0x29c>
   24fa0:	28c01704 	addi	r3,r5,92
   24fa4:	18c7883a 	add	r3,r3,r3
   24fa8:	294016c4 	addi	r5,r5,91
   24fac:	003fb406 	br	24e80 <_gp+0xfffe9fc8>
   24fb0:	280bd0ba 	srai	r5,r5,2
   24fb4:	00c00044 	movi	r3,1
   24fb8:	38800117 	ldw	r2,4(r7)
   24fbc:	194a983a 	sll	r5,r3,r5
   24fc0:	2007883a 	mov	r3,r4
   24fc4:	2884b03a 	or	r2,r5,r2
   24fc8:	38800115 	stw	r2,4(r7)
   24fcc:	003fbb06 	br	24ebc <_gp+0xfffea004>
   24fd0:	21800515 	stw	r6,20(r4)
   24fd4:	21800415 	stw	r6,16(r4)
   24fd8:	10c00054 	ori	r3,r2,1
   24fdc:	31c00315 	stw	r7,12(r6)
   24fe0:	31c00215 	stw	r7,8(r6)
   24fe4:	30c00115 	stw	r3,4(r6)
   24fe8:	308d883a 	add	r6,r6,r2
   24fec:	30800015 	stw	r2,0(r6)
   24ff0:	003f9506 	br	24e48 <_gp+0xfffe9f90>
   24ff4:	00c01504 	movi	r3,84
   24ff8:	19400536 	bltu	r3,r5,25010 <_free_r+0x2b8>
   24ffc:	100ad33a 	srli	r5,r2,12
   25000:	28c01bc4 	addi	r3,r5,111
   25004:	18c7883a 	add	r3,r3,r3
   25008:	29401b84 	addi	r5,r5,110
   2500c:	003f9c06 	br	24e80 <_gp+0xfffe9fc8>
   25010:	00c05504 	movi	r3,340
   25014:	19400536 	bltu	r3,r5,2502c <_free_r+0x2d4>
   25018:	100ad3fa 	srli	r5,r2,15
   2501c:	28c01e04 	addi	r3,r5,120
   25020:	18c7883a 	add	r3,r3,r3
   25024:	29401dc4 	addi	r5,r5,119
   25028:	003f9506 	br	24e80 <_gp+0xfffe9fc8>
   2502c:	00c15504 	movi	r3,1364
   25030:	19400536 	bltu	r3,r5,25048 <_free_r+0x2f0>
   25034:	100ad4ba 	srli	r5,r2,18
   25038:	28c01f44 	addi	r3,r5,125
   2503c:	18c7883a 	add	r3,r3,r3
   25040:	29401f04 	addi	r5,r5,124
   25044:	003f8e06 	br	24e80 <_gp+0xfffe9fc8>
   25048:	00c03f84 	movi	r3,254
   2504c:	01401f84 	movi	r5,126
   25050:	003f8b06 	br	24e80 <_gp+0xfffe9fc8>
   25054:	10c00054 	ori	r3,r2,1
   25058:	30c00115 	stw	r3,4(r6)
   2505c:	308d883a 	add	r6,r6,r2
   25060:	30800015 	stw	r2,0(r6)
   25064:	003f7806 	br	24e48 <_gp+0xfffe9f90>

00025068 <__sfvwrite_r>:
   25068:	30800217 	ldw	r2,8(r6)
   2506c:	10006726 	beq	r2,zero,2520c <__sfvwrite_r+0x1a4>
   25070:	28c0030b 	ldhu	r3,12(r5)
   25074:	defff404 	addi	sp,sp,-48
   25078:	dd400715 	stw	r21,28(sp)
   2507c:	dd000615 	stw	r20,24(sp)
   25080:	dc000215 	stw	r16,8(sp)
   25084:	dfc00b15 	stw	ra,44(sp)
   25088:	df000a15 	stw	fp,40(sp)
   2508c:	ddc00915 	stw	r23,36(sp)
   25090:	dd800815 	stw	r22,32(sp)
   25094:	dcc00515 	stw	r19,20(sp)
   25098:	dc800415 	stw	r18,16(sp)
   2509c:	dc400315 	stw	r17,12(sp)
   250a0:	1880020c 	andi	r2,r3,8
   250a4:	2821883a 	mov	r16,r5
   250a8:	202b883a 	mov	r21,r4
   250ac:	3029883a 	mov	r20,r6
   250b0:	10002726 	beq	r2,zero,25150 <__sfvwrite_r+0xe8>
   250b4:	28800417 	ldw	r2,16(r5)
   250b8:	10002526 	beq	r2,zero,25150 <__sfvwrite_r+0xe8>
   250bc:	1880008c 	andi	r2,r3,2
   250c0:	a4400017 	ldw	r17,0(r20)
   250c4:	10002a26 	beq	r2,zero,25170 <__sfvwrite_r+0x108>
   250c8:	05a00034 	movhi	r22,32768
   250cc:	0027883a 	mov	r19,zero
   250d0:	0025883a 	mov	r18,zero
   250d4:	b5bf0004 	addi	r22,r22,-1024
   250d8:	980d883a 	mov	r6,r19
   250dc:	a809883a 	mov	r4,r21
   250e0:	90004626 	beq	r18,zero,251fc <__sfvwrite_r+0x194>
   250e4:	900f883a 	mov	r7,r18
   250e8:	b480022e 	bgeu	r22,r18,250f4 <__sfvwrite_r+0x8c>
   250ec:	01e00034 	movhi	r7,32768
   250f0:	39ff0004 	addi	r7,r7,-1024
   250f4:	80800917 	ldw	r2,36(r16)
   250f8:	81400717 	ldw	r5,28(r16)
   250fc:	103ee83a 	callr	r2
   25100:	00805a0e 	bge	zero,r2,2526c <__sfvwrite_r+0x204>
   25104:	a0c00217 	ldw	r3,8(r20)
   25108:	98a7883a 	add	r19,r19,r2
   2510c:	90a5c83a 	sub	r18,r18,r2
   25110:	1885c83a 	sub	r2,r3,r2
   25114:	a0800215 	stw	r2,8(r20)
   25118:	103fef1e 	bne	r2,zero,250d8 <_gp+0xfffea220>
   2511c:	0005883a 	mov	r2,zero
   25120:	dfc00b17 	ldw	ra,44(sp)
   25124:	df000a17 	ldw	fp,40(sp)
   25128:	ddc00917 	ldw	r23,36(sp)
   2512c:	dd800817 	ldw	r22,32(sp)
   25130:	dd400717 	ldw	r21,28(sp)
   25134:	dd000617 	ldw	r20,24(sp)
   25138:	dcc00517 	ldw	r19,20(sp)
   2513c:	dc800417 	ldw	r18,16(sp)
   25140:	dc400317 	ldw	r17,12(sp)
   25144:	dc000217 	ldw	r16,8(sp)
   25148:	dec00c04 	addi	sp,sp,48
   2514c:	f800283a 	ret
   25150:	800b883a 	mov	r5,r16
   25154:	a809883a 	mov	r4,r21
   25158:	0022bd80 	call	22bd8 <__swsetup_r>
   2515c:	1000ee1e 	bne	r2,zero,25518 <__sfvwrite_r+0x4b0>
   25160:	80c0030b 	ldhu	r3,12(r16)
   25164:	a4400017 	ldw	r17,0(r20)
   25168:	1880008c 	andi	r2,r3,2
   2516c:	103fd61e 	bne	r2,zero,250c8 <_gp+0xfffea210>
   25170:	1880004c 	andi	r2,r3,1
   25174:	1000421e 	bne	r2,zero,25280 <__sfvwrite_r+0x218>
   25178:	0039883a 	mov	fp,zero
   2517c:	0025883a 	mov	r18,zero
   25180:	90001a26 	beq	r18,zero,251ec <__sfvwrite_r+0x184>
   25184:	1880800c 	andi	r2,r3,512
   25188:	84c00217 	ldw	r19,8(r16)
   2518c:	10002126 	beq	r2,zero,25214 <__sfvwrite_r+0x1ac>
   25190:	982f883a 	mov	r23,r19
   25194:	94c09636 	bltu	r18,r19,253f0 <__sfvwrite_r+0x388>
   25198:	1881200c 	andi	r2,r3,1152
   2519c:	1000a11e 	bne	r2,zero,25424 <__sfvwrite_r+0x3bc>
   251a0:	81000017 	ldw	r4,0(r16)
   251a4:	b80d883a 	mov	r6,r23
   251a8:	e00b883a 	mov	r5,fp
   251ac:	00263880 	call	26388 <memmove>
   251b0:	80c00217 	ldw	r3,8(r16)
   251b4:	81000017 	ldw	r4,0(r16)
   251b8:	9005883a 	mov	r2,r18
   251bc:	1ce7c83a 	sub	r19,r3,r19
   251c0:	25cf883a 	add	r7,r4,r23
   251c4:	84c00215 	stw	r19,8(r16)
   251c8:	81c00015 	stw	r7,0(r16)
   251cc:	a0c00217 	ldw	r3,8(r20)
   251d0:	e0b9883a 	add	fp,fp,r2
   251d4:	90a5c83a 	sub	r18,r18,r2
   251d8:	18a7c83a 	sub	r19,r3,r2
   251dc:	a4c00215 	stw	r19,8(r20)
   251e0:	983fce26 	beq	r19,zero,2511c <_gp+0xfffea264>
   251e4:	80c0030b 	ldhu	r3,12(r16)
   251e8:	903fe61e 	bne	r18,zero,25184 <_gp+0xfffea2cc>
   251ec:	8f000017 	ldw	fp,0(r17)
   251f0:	8c800117 	ldw	r18,4(r17)
   251f4:	8c400204 	addi	r17,r17,8
   251f8:	003fe106 	br	25180 <_gp+0xfffea2c8>
   251fc:	8cc00017 	ldw	r19,0(r17)
   25200:	8c800117 	ldw	r18,4(r17)
   25204:	8c400204 	addi	r17,r17,8
   25208:	003fb306 	br	250d8 <_gp+0xfffea220>
   2520c:	0005883a 	mov	r2,zero
   25210:	f800283a 	ret
   25214:	81000017 	ldw	r4,0(r16)
   25218:	80800417 	ldw	r2,16(r16)
   2521c:	11005a36 	bltu	r2,r4,25388 <__sfvwrite_r+0x320>
   25220:	85c00517 	ldw	r23,20(r16)
   25224:	95c05836 	bltu	r18,r23,25388 <__sfvwrite_r+0x320>
   25228:	00a00034 	movhi	r2,32768
   2522c:	10bfffc4 	addi	r2,r2,-1
   25230:	9009883a 	mov	r4,r18
   25234:	1480012e 	bgeu	r2,r18,2523c <__sfvwrite_r+0x1d4>
   25238:	1009883a 	mov	r4,r2
   2523c:	b80b883a 	mov	r5,r23
   25240:	002ab0c0 	call	2ab0c <__divsi3>
   25244:	b80b883a 	mov	r5,r23
   25248:	1009883a 	mov	r4,r2
   2524c:	00206240 	call	20624 <__mulsi3>
   25250:	81400717 	ldw	r5,28(r16)
   25254:	80c00917 	ldw	r3,36(r16)
   25258:	100f883a 	mov	r7,r2
   2525c:	e00d883a 	mov	r6,fp
   25260:	a809883a 	mov	r4,r21
   25264:	183ee83a 	callr	r3
   25268:	00bfd816 	blt	zero,r2,251cc <_gp+0xfffea314>
   2526c:	8080030b 	ldhu	r2,12(r16)
   25270:	10801014 	ori	r2,r2,64
   25274:	8080030d 	sth	r2,12(r16)
   25278:	00bfffc4 	movi	r2,-1
   2527c:	003fa806 	br	25120 <_gp+0xfffea268>
   25280:	0027883a 	mov	r19,zero
   25284:	0011883a 	mov	r8,zero
   25288:	0039883a 	mov	fp,zero
   2528c:	0025883a 	mov	r18,zero
   25290:	90001f26 	beq	r18,zero,25310 <__sfvwrite_r+0x2a8>
   25294:	40005a26 	beq	r8,zero,25400 <__sfvwrite_r+0x398>
   25298:	982d883a 	mov	r22,r19
   2529c:	94c0012e 	bgeu	r18,r19,252a4 <__sfvwrite_r+0x23c>
   252a0:	902d883a 	mov	r22,r18
   252a4:	81000017 	ldw	r4,0(r16)
   252a8:	80800417 	ldw	r2,16(r16)
   252ac:	b02f883a 	mov	r23,r22
   252b0:	81c00517 	ldw	r7,20(r16)
   252b4:	1100032e 	bgeu	r2,r4,252c4 <__sfvwrite_r+0x25c>
   252b8:	80c00217 	ldw	r3,8(r16)
   252bc:	38c7883a 	add	r3,r7,r3
   252c0:	1d801816 	blt	r3,r22,25324 <__sfvwrite_r+0x2bc>
   252c4:	b1c03e16 	blt	r22,r7,253c0 <__sfvwrite_r+0x358>
   252c8:	80800917 	ldw	r2,36(r16)
   252cc:	81400717 	ldw	r5,28(r16)
   252d0:	e00d883a 	mov	r6,fp
   252d4:	da000115 	stw	r8,4(sp)
   252d8:	a809883a 	mov	r4,r21
   252dc:	103ee83a 	callr	r2
   252e0:	102f883a 	mov	r23,r2
   252e4:	da000117 	ldw	r8,4(sp)
   252e8:	00bfe00e 	bge	zero,r2,2526c <_gp+0xfffea3b4>
   252ec:	9de7c83a 	sub	r19,r19,r23
   252f0:	98001f26 	beq	r19,zero,25370 <__sfvwrite_r+0x308>
   252f4:	a0800217 	ldw	r2,8(r20)
   252f8:	e5f9883a 	add	fp,fp,r23
   252fc:	95e5c83a 	sub	r18,r18,r23
   25300:	15efc83a 	sub	r23,r2,r23
   25304:	a5c00215 	stw	r23,8(r20)
   25308:	b83f8426 	beq	r23,zero,2511c <_gp+0xfffea264>
   2530c:	903fe11e 	bne	r18,zero,25294 <_gp+0xfffea3dc>
   25310:	8f000017 	ldw	fp,0(r17)
   25314:	8c800117 	ldw	r18,4(r17)
   25318:	0011883a 	mov	r8,zero
   2531c:	8c400204 	addi	r17,r17,8
   25320:	003fdb06 	br	25290 <_gp+0xfffea3d8>
   25324:	180d883a 	mov	r6,r3
   25328:	e00b883a 	mov	r5,fp
   2532c:	da000115 	stw	r8,4(sp)
   25330:	d8c00015 	stw	r3,0(sp)
   25334:	00263880 	call	26388 <memmove>
   25338:	d8c00017 	ldw	r3,0(sp)
   2533c:	80800017 	ldw	r2,0(r16)
   25340:	800b883a 	mov	r5,r16
   25344:	a809883a 	mov	r4,r21
   25348:	10c5883a 	add	r2,r2,r3
   2534c:	80800015 	stw	r2,0(r16)
   25350:	d8c00015 	stw	r3,0(sp)
   25354:	00247f80 	call	247f8 <_fflush_r>
   25358:	d8c00017 	ldw	r3,0(sp)
   2535c:	da000117 	ldw	r8,4(sp)
   25360:	103fc21e 	bne	r2,zero,2526c <_gp+0xfffea3b4>
   25364:	182f883a 	mov	r23,r3
   25368:	9de7c83a 	sub	r19,r19,r23
   2536c:	983fe11e 	bne	r19,zero,252f4 <_gp+0xfffea43c>
   25370:	800b883a 	mov	r5,r16
   25374:	a809883a 	mov	r4,r21
   25378:	00247f80 	call	247f8 <_fflush_r>
   2537c:	103fbb1e 	bne	r2,zero,2526c <_gp+0xfffea3b4>
   25380:	0011883a 	mov	r8,zero
   25384:	003fdb06 	br	252f4 <_gp+0xfffea43c>
   25388:	94c0012e 	bgeu	r18,r19,25390 <__sfvwrite_r+0x328>
   2538c:	9027883a 	mov	r19,r18
   25390:	980d883a 	mov	r6,r19
   25394:	e00b883a 	mov	r5,fp
   25398:	00263880 	call	26388 <memmove>
   2539c:	80800217 	ldw	r2,8(r16)
   253a0:	80c00017 	ldw	r3,0(r16)
   253a4:	14c5c83a 	sub	r2,r2,r19
   253a8:	1cc7883a 	add	r3,r3,r19
   253ac:	80800215 	stw	r2,8(r16)
   253b0:	80c00015 	stw	r3,0(r16)
   253b4:	10004326 	beq	r2,zero,254c4 <__sfvwrite_r+0x45c>
   253b8:	9805883a 	mov	r2,r19
   253bc:	003f8306 	br	251cc <_gp+0xfffea314>
   253c0:	b00d883a 	mov	r6,r22
   253c4:	e00b883a 	mov	r5,fp
   253c8:	da000115 	stw	r8,4(sp)
   253cc:	00263880 	call	26388 <memmove>
   253d0:	80800217 	ldw	r2,8(r16)
   253d4:	80c00017 	ldw	r3,0(r16)
   253d8:	da000117 	ldw	r8,4(sp)
   253dc:	1585c83a 	sub	r2,r2,r22
   253e0:	1dad883a 	add	r22,r3,r22
   253e4:	80800215 	stw	r2,8(r16)
   253e8:	85800015 	stw	r22,0(r16)
   253ec:	003fbf06 	br	252ec <_gp+0xfffea434>
   253f0:	81000017 	ldw	r4,0(r16)
   253f4:	9027883a 	mov	r19,r18
   253f8:	902f883a 	mov	r23,r18
   253fc:	003f6906 	br	251a4 <_gp+0xfffea2ec>
   25400:	900d883a 	mov	r6,r18
   25404:	01400284 	movi	r5,10
   25408:	e009883a 	mov	r4,fp
   2540c:	002615c0 	call	2615c <memchr>
   25410:	10003e26 	beq	r2,zero,2550c <__sfvwrite_r+0x4a4>
   25414:	10800044 	addi	r2,r2,1
   25418:	1727c83a 	sub	r19,r2,fp
   2541c:	02000044 	movi	r8,1
   25420:	003f9d06 	br	25298 <_gp+0xfffea3e0>
   25424:	80800517 	ldw	r2,20(r16)
   25428:	81400417 	ldw	r5,16(r16)
   2542c:	81c00017 	ldw	r7,0(r16)
   25430:	10a7883a 	add	r19,r2,r2
   25434:	9885883a 	add	r2,r19,r2
   25438:	1026d7fa 	srli	r19,r2,31
   2543c:	396dc83a 	sub	r22,r7,r5
   25440:	b1000044 	addi	r4,r22,1
   25444:	9885883a 	add	r2,r19,r2
   25448:	1027d07a 	srai	r19,r2,1
   2544c:	2485883a 	add	r2,r4,r18
   25450:	980d883a 	mov	r6,r19
   25454:	9880022e 	bgeu	r19,r2,25460 <__sfvwrite_r+0x3f8>
   25458:	1027883a 	mov	r19,r2
   2545c:	100d883a 	mov	r6,r2
   25460:	18c1000c 	andi	r3,r3,1024
   25464:	18001c26 	beq	r3,zero,254d8 <__sfvwrite_r+0x470>
   25468:	300b883a 	mov	r5,r6
   2546c:	a809883a 	mov	r4,r21
   25470:	00259500 	call	25950 <_malloc_r>
   25474:	102f883a 	mov	r23,r2
   25478:	10002926 	beq	r2,zero,25520 <__sfvwrite_r+0x4b8>
   2547c:	81400417 	ldw	r5,16(r16)
   25480:	b00d883a 	mov	r6,r22
   25484:	1009883a 	mov	r4,r2
   25488:	00262400 	call	26240 <memcpy>
   2548c:	8080030b 	ldhu	r2,12(r16)
   25490:	00fedfc4 	movi	r3,-1153
   25494:	10c4703a 	and	r2,r2,r3
   25498:	10802014 	ori	r2,r2,128
   2549c:	8080030d 	sth	r2,12(r16)
   254a0:	bd89883a 	add	r4,r23,r22
   254a4:	9d8fc83a 	sub	r7,r19,r22
   254a8:	85c00415 	stw	r23,16(r16)
   254ac:	84c00515 	stw	r19,20(r16)
   254b0:	81000015 	stw	r4,0(r16)
   254b4:	9027883a 	mov	r19,r18
   254b8:	81c00215 	stw	r7,8(r16)
   254bc:	902f883a 	mov	r23,r18
   254c0:	003f3806 	br	251a4 <_gp+0xfffea2ec>
   254c4:	800b883a 	mov	r5,r16
   254c8:	a809883a 	mov	r4,r21
   254cc:	00247f80 	call	247f8 <_fflush_r>
   254d0:	103fb926 	beq	r2,zero,253b8 <_gp+0xfffea500>
   254d4:	003f6506 	br	2526c <_gp+0xfffea3b4>
   254d8:	a809883a 	mov	r4,r21
   254dc:	00276c40 	call	276c4 <_realloc_r>
   254e0:	102f883a 	mov	r23,r2
   254e4:	103fee1e 	bne	r2,zero,254a0 <_gp+0xfffea5e8>
   254e8:	81400417 	ldw	r5,16(r16)
   254ec:	a809883a 	mov	r4,r21
   254f0:	0024d580 	call	24d58 <_free_r>
   254f4:	8080030b 	ldhu	r2,12(r16)
   254f8:	00ffdfc4 	movi	r3,-129
   254fc:	1884703a 	and	r2,r3,r2
   25500:	00c00304 	movi	r3,12
   25504:	a8c00015 	stw	r3,0(r21)
   25508:	003f5906 	br	25270 <_gp+0xfffea3b8>
   2550c:	94c00044 	addi	r19,r18,1
   25510:	02000044 	movi	r8,1
   25514:	003f6006 	br	25298 <_gp+0xfffea3e0>
   25518:	00bfffc4 	movi	r2,-1
   2551c:	003f0006 	br	25120 <_gp+0xfffea268>
   25520:	00800304 	movi	r2,12
   25524:	a8800015 	stw	r2,0(r21)
   25528:	8080030b 	ldhu	r2,12(r16)
   2552c:	003f5006 	br	25270 <_gp+0xfffea3b8>

00025530 <_fwalk>:
   25530:	defff704 	addi	sp,sp,-36
   25534:	dd000415 	stw	r20,16(sp)
   25538:	dfc00815 	stw	ra,32(sp)
   2553c:	ddc00715 	stw	r23,28(sp)
   25540:	dd800615 	stw	r22,24(sp)
   25544:	dd400515 	stw	r21,20(sp)
   25548:	dcc00315 	stw	r19,12(sp)
   2554c:	dc800215 	stw	r18,8(sp)
   25550:	dc400115 	stw	r17,4(sp)
   25554:	dc000015 	stw	r16,0(sp)
   25558:	2500b804 	addi	r20,r4,736
   2555c:	a0002326 	beq	r20,zero,255ec <_fwalk+0xbc>
   25560:	282b883a 	mov	r21,r5
   25564:	002f883a 	mov	r23,zero
   25568:	05800044 	movi	r22,1
   2556c:	04ffffc4 	movi	r19,-1
   25570:	a4400117 	ldw	r17,4(r20)
   25574:	a4800217 	ldw	r18,8(r20)
   25578:	8c7fffc4 	addi	r17,r17,-1
   2557c:	88000d16 	blt	r17,zero,255b4 <_fwalk+0x84>
   25580:	94000304 	addi	r16,r18,12
   25584:	94800384 	addi	r18,r18,14
   25588:	8080000b 	ldhu	r2,0(r16)
   2558c:	8c7fffc4 	addi	r17,r17,-1
   25590:	813ffd04 	addi	r4,r16,-12
   25594:	b080042e 	bgeu	r22,r2,255a8 <_fwalk+0x78>
   25598:	9080000f 	ldh	r2,0(r18)
   2559c:	14c00226 	beq	r2,r19,255a8 <_fwalk+0x78>
   255a0:	a83ee83a 	callr	r21
   255a4:	b8aeb03a 	or	r23,r23,r2
   255a8:	84001a04 	addi	r16,r16,104
   255ac:	94801a04 	addi	r18,r18,104
   255b0:	8cfff51e 	bne	r17,r19,25588 <_gp+0xfffea6d0>
   255b4:	a5000017 	ldw	r20,0(r20)
   255b8:	a03fed1e 	bne	r20,zero,25570 <_gp+0xfffea6b8>
   255bc:	b805883a 	mov	r2,r23
   255c0:	dfc00817 	ldw	ra,32(sp)
   255c4:	ddc00717 	ldw	r23,28(sp)
   255c8:	dd800617 	ldw	r22,24(sp)
   255cc:	dd400517 	ldw	r21,20(sp)
   255d0:	dd000417 	ldw	r20,16(sp)
   255d4:	dcc00317 	ldw	r19,12(sp)
   255d8:	dc800217 	ldw	r18,8(sp)
   255dc:	dc400117 	ldw	r17,4(sp)
   255e0:	dc000017 	ldw	r16,0(sp)
   255e4:	dec00904 	addi	sp,sp,36
   255e8:	f800283a 	ret
   255ec:	002f883a 	mov	r23,zero
   255f0:	003ff206 	br	255bc <_gp+0xfffea704>

000255f4 <_fwalk_reent>:
   255f4:	defff704 	addi	sp,sp,-36
   255f8:	dd000415 	stw	r20,16(sp)
   255fc:	dfc00815 	stw	ra,32(sp)
   25600:	ddc00715 	stw	r23,28(sp)
   25604:	dd800615 	stw	r22,24(sp)
   25608:	dd400515 	stw	r21,20(sp)
   2560c:	dcc00315 	stw	r19,12(sp)
   25610:	dc800215 	stw	r18,8(sp)
   25614:	dc400115 	stw	r17,4(sp)
   25618:	dc000015 	stw	r16,0(sp)
   2561c:	2500b804 	addi	r20,r4,736
   25620:	a0002326 	beq	r20,zero,256b0 <_fwalk_reent+0xbc>
   25624:	282b883a 	mov	r21,r5
   25628:	2027883a 	mov	r19,r4
   2562c:	002f883a 	mov	r23,zero
   25630:	05800044 	movi	r22,1
   25634:	04bfffc4 	movi	r18,-1
   25638:	a4400117 	ldw	r17,4(r20)
   2563c:	a4000217 	ldw	r16,8(r20)
   25640:	8c7fffc4 	addi	r17,r17,-1
   25644:	88000c16 	blt	r17,zero,25678 <_fwalk_reent+0x84>
   25648:	84000304 	addi	r16,r16,12
   2564c:	8080000b 	ldhu	r2,0(r16)
   25650:	8c7fffc4 	addi	r17,r17,-1
   25654:	817ffd04 	addi	r5,r16,-12
   25658:	b080052e 	bgeu	r22,r2,25670 <_fwalk_reent+0x7c>
   2565c:	8080008f 	ldh	r2,2(r16)
   25660:	9809883a 	mov	r4,r19
   25664:	14800226 	beq	r2,r18,25670 <_fwalk_reent+0x7c>
   25668:	a83ee83a 	callr	r21
   2566c:	b8aeb03a 	or	r23,r23,r2
   25670:	84001a04 	addi	r16,r16,104
   25674:	8cbff51e 	bne	r17,r18,2564c <_gp+0xfffea794>
   25678:	a5000017 	ldw	r20,0(r20)
   2567c:	a03fee1e 	bne	r20,zero,25638 <_gp+0xfffea780>
   25680:	b805883a 	mov	r2,r23
   25684:	dfc00817 	ldw	ra,32(sp)
   25688:	ddc00717 	ldw	r23,28(sp)
   2568c:	dd800617 	ldw	r22,24(sp)
   25690:	dd400517 	ldw	r21,20(sp)
   25694:	dd000417 	ldw	r20,16(sp)
   25698:	dcc00317 	ldw	r19,12(sp)
   2569c:	dc800217 	ldw	r18,8(sp)
   256a0:	dc400117 	ldw	r17,4(sp)
   256a4:	dc000017 	ldw	r16,0(sp)
   256a8:	dec00904 	addi	sp,sp,36
   256ac:	f800283a 	ret
   256b0:	002f883a 	mov	r23,zero
   256b4:	003ff206 	br	25680 <_gp+0xfffea7c8>

000256b8 <_setlocale_r>:
   256b8:	30001b26 	beq	r6,zero,25728 <_setlocale_r+0x70>
   256bc:	014000f4 	movhi	r5,3
   256c0:	defffe04 	addi	sp,sp,-8
   256c4:	29437904 	addi	r5,r5,3556
   256c8:	3009883a 	mov	r4,r6
   256cc:	dc000015 	stw	r16,0(sp)
   256d0:	dfc00115 	stw	ra,4(sp)
   256d4:	3021883a 	mov	r16,r6
   256d8:	0027e2c0 	call	27e2c <strcmp>
   256dc:	1000061e 	bne	r2,zero,256f8 <_setlocale_r+0x40>
   256e0:	008000f4 	movhi	r2,3
   256e4:	10837804 	addi	r2,r2,3552
   256e8:	dfc00117 	ldw	ra,4(sp)
   256ec:	dc000017 	ldw	r16,0(sp)
   256f0:	dec00204 	addi	sp,sp,8
   256f4:	f800283a 	ret
   256f8:	014000f4 	movhi	r5,3
   256fc:	29437804 	addi	r5,r5,3552
   25700:	8009883a 	mov	r4,r16
   25704:	0027e2c0 	call	27e2c <strcmp>
   25708:	103ff526 	beq	r2,zero,256e0 <_gp+0xfffea828>
   2570c:	014000f4 	movhi	r5,3
   25710:	29436304 	addi	r5,r5,3468
   25714:	8009883a 	mov	r4,r16
   25718:	0027e2c0 	call	27e2c <strcmp>
   2571c:	103ff026 	beq	r2,zero,256e0 <_gp+0xfffea828>
   25720:	0005883a 	mov	r2,zero
   25724:	003ff006 	br	256e8 <_gp+0xfffea830>
   25728:	008000f4 	movhi	r2,3
   2572c:	10837804 	addi	r2,r2,3552
   25730:	f800283a 	ret

00025734 <__locale_charset>:
   25734:	008000f4 	movhi	r2,3
   25738:	1085cc04 	addi	r2,r2,5936
   2573c:	f800283a 	ret

00025740 <__locale_mb_cur_max>:
   25740:	008000f4 	movhi	r2,3
   25744:	108bb004 	addi	r2,r2,11968
   25748:	10800017 	ldw	r2,0(r2)
   2574c:	f800283a 	ret

00025750 <__locale_msgcharset>:
   25750:	008000f4 	movhi	r2,3
   25754:	1085c404 	addi	r2,r2,5904
   25758:	f800283a 	ret

0002575c <__locale_cjk_lang>:
   2575c:	0005883a 	mov	r2,zero
   25760:	f800283a 	ret

00025764 <_localeconv_r>:
   25764:	008000f4 	movhi	r2,3
   25768:	1085d404 	addi	r2,r2,5968
   2576c:	f800283a 	ret

00025770 <setlocale>:
   25770:	008000f4 	movhi	r2,3
   25774:	108baf04 	addi	r2,r2,11964
   25778:	280d883a 	mov	r6,r5
   2577c:	200b883a 	mov	r5,r4
   25780:	11000017 	ldw	r4,0(r2)
   25784:	00256b81 	jmpi	256b8 <_setlocale_r>

00025788 <localeconv>:
   25788:	008000f4 	movhi	r2,3
   2578c:	1085d404 	addi	r2,r2,5968
   25790:	f800283a 	ret

00025794 <__smakebuf_r>:
   25794:	2880030b 	ldhu	r2,12(r5)
   25798:	10c0008c 	andi	r3,r2,2
   2579c:	1800411e 	bne	r3,zero,258a4 <__smakebuf_r+0x110>
   257a0:	deffec04 	addi	sp,sp,-80
   257a4:	dc000f15 	stw	r16,60(sp)
   257a8:	2821883a 	mov	r16,r5
   257ac:	2940038f 	ldh	r5,14(r5)
   257b0:	dc401015 	stw	r17,64(sp)
   257b4:	dfc01315 	stw	ra,76(sp)
   257b8:	dcc01215 	stw	r19,72(sp)
   257bc:	dc801115 	stw	r18,68(sp)
   257c0:	2023883a 	mov	r17,r4
   257c4:	28001c16 	blt	r5,zero,25838 <__smakebuf_r+0xa4>
   257c8:	d80d883a 	mov	r6,sp
   257cc:	0029a9c0 	call	29a9c <_fstat_r>
   257d0:	10001816 	blt	r2,zero,25834 <__smakebuf_r+0xa0>
   257d4:	d8800117 	ldw	r2,4(sp)
   257d8:	00e00014 	movui	r3,32768
   257dc:	10bc000c 	andi	r2,r2,61440
   257e0:	14c80020 	cmpeqi	r19,r2,8192
   257e4:	10c03726 	beq	r2,r3,258c4 <__smakebuf_r+0x130>
   257e8:	80c0030b 	ldhu	r3,12(r16)
   257ec:	18c20014 	ori	r3,r3,2048
   257f0:	80c0030d 	sth	r3,12(r16)
   257f4:	00c80004 	movi	r3,8192
   257f8:	10c0521e 	bne	r2,r3,25944 <__smakebuf_r+0x1b0>
   257fc:	8140038f 	ldh	r5,14(r16)
   25800:	8809883a 	mov	r4,r17
   25804:	0029af80 	call	29af8 <_isatty_r>
   25808:	10004c26 	beq	r2,zero,2593c <__smakebuf_r+0x1a8>
   2580c:	8080030b 	ldhu	r2,12(r16)
   25810:	80c010c4 	addi	r3,r16,67
   25814:	80c00015 	stw	r3,0(r16)
   25818:	10800054 	ori	r2,r2,1
   2581c:	8080030d 	sth	r2,12(r16)
   25820:	00800044 	movi	r2,1
   25824:	80c00415 	stw	r3,16(r16)
   25828:	80800515 	stw	r2,20(r16)
   2582c:	04810004 	movi	r18,1024
   25830:	00000706 	br	25850 <__smakebuf_r+0xbc>
   25834:	8080030b 	ldhu	r2,12(r16)
   25838:	10c0200c 	andi	r3,r2,128
   2583c:	18001f1e 	bne	r3,zero,258bc <__smakebuf_r+0x128>
   25840:	04810004 	movi	r18,1024
   25844:	10820014 	ori	r2,r2,2048
   25848:	8080030d 	sth	r2,12(r16)
   2584c:	0027883a 	mov	r19,zero
   25850:	900b883a 	mov	r5,r18
   25854:	8809883a 	mov	r4,r17
   25858:	00259500 	call	25950 <_malloc_r>
   2585c:	10002c26 	beq	r2,zero,25910 <__smakebuf_r+0x17c>
   25860:	80c0030b 	ldhu	r3,12(r16)
   25864:	010000b4 	movhi	r4,2
   25868:	21122304 	addi	r4,r4,18572
   2586c:	89000f15 	stw	r4,60(r17)
   25870:	18c02014 	ori	r3,r3,128
   25874:	80c0030d 	sth	r3,12(r16)
   25878:	80800015 	stw	r2,0(r16)
   2587c:	80800415 	stw	r2,16(r16)
   25880:	84800515 	stw	r18,20(r16)
   25884:	98001a1e 	bne	r19,zero,258f0 <__smakebuf_r+0x15c>
   25888:	dfc01317 	ldw	ra,76(sp)
   2588c:	dcc01217 	ldw	r19,72(sp)
   25890:	dc801117 	ldw	r18,68(sp)
   25894:	dc401017 	ldw	r17,64(sp)
   25898:	dc000f17 	ldw	r16,60(sp)
   2589c:	dec01404 	addi	sp,sp,80
   258a0:	f800283a 	ret
   258a4:	288010c4 	addi	r2,r5,67
   258a8:	28800015 	stw	r2,0(r5)
   258ac:	28800415 	stw	r2,16(r5)
   258b0:	00800044 	movi	r2,1
   258b4:	28800515 	stw	r2,20(r5)
   258b8:	f800283a 	ret
   258bc:	04801004 	movi	r18,64
   258c0:	003fe006 	br	25844 <_gp+0xfffea98c>
   258c4:	81000a17 	ldw	r4,40(r16)
   258c8:	00c000b4 	movhi	r3,2
   258cc:	18df7204 	addi	r3,r3,32200
   258d0:	20ffc51e 	bne	r4,r3,257e8 <_gp+0xfffea930>
   258d4:	8080030b 	ldhu	r2,12(r16)
   258d8:	04810004 	movi	r18,1024
   258dc:	84801315 	stw	r18,76(r16)
   258e0:	1484b03a 	or	r2,r2,r18
   258e4:	8080030d 	sth	r2,12(r16)
   258e8:	0027883a 	mov	r19,zero
   258ec:	003fd806 	br	25850 <_gp+0xfffea998>
   258f0:	8140038f 	ldh	r5,14(r16)
   258f4:	8809883a 	mov	r4,r17
   258f8:	0029af80 	call	29af8 <_isatty_r>
   258fc:	103fe226 	beq	r2,zero,25888 <_gp+0xfffea9d0>
   25900:	8080030b 	ldhu	r2,12(r16)
   25904:	10800054 	ori	r2,r2,1
   25908:	8080030d 	sth	r2,12(r16)
   2590c:	003fde06 	br	25888 <_gp+0xfffea9d0>
   25910:	8080030b 	ldhu	r2,12(r16)
   25914:	10c0800c 	andi	r3,r2,512
   25918:	183fdb1e 	bne	r3,zero,25888 <_gp+0xfffea9d0>
   2591c:	10800094 	ori	r2,r2,2
   25920:	80c010c4 	addi	r3,r16,67
   25924:	8080030d 	sth	r2,12(r16)
   25928:	00800044 	movi	r2,1
   2592c:	80c00015 	stw	r3,0(r16)
   25930:	80c00415 	stw	r3,16(r16)
   25934:	80800515 	stw	r2,20(r16)
   25938:	003fd306 	br	25888 <_gp+0xfffea9d0>
   2593c:	04810004 	movi	r18,1024
   25940:	003fc306 	br	25850 <_gp+0xfffea998>
   25944:	0027883a 	mov	r19,zero
   25948:	04810004 	movi	r18,1024
   2594c:	003fc006 	br	25850 <_gp+0xfffea998>

00025950 <_malloc_r>:
   25950:	defff504 	addi	sp,sp,-44
   25954:	dc800315 	stw	r18,12(sp)
   25958:	dfc00a15 	stw	ra,40(sp)
   2595c:	df000915 	stw	fp,36(sp)
   25960:	ddc00815 	stw	r23,32(sp)
   25964:	dd800715 	stw	r22,28(sp)
   25968:	dd400615 	stw	r21,24(sp)
   2596c:	dd000515 	stw	r20,20(sp)
   25970:	dcc00415 	stw	r19,16(sp)
   25974:	dc400215 	stw	r17,8(sp)
   25978:	dc000115 	stw	r16,4(sp)
   2597c:	288002c4 	addi	r2,r5,11
   25980:	00c00584 	movi	r3,22
   25984:	2025883a 	mov	r18,r4
   25988:	18807f2e 	bgeu	r3,r2,25b88 <_malloc_r+0x238>
   2598c:	047ffe04 	movi	r17,-8
   25990:	1462703a 	and	r17,r2,r17
   25994:	8800a316 	blt	r17,zero,25c24 <_malloc_r+0x2d4>
   25998:	8940a236 	bltu	r17,r5,25c24 <_malloc_r+0x2d4>
   2599c:	002db000 	call	2db00 <__malloc_lock>
   259a0:	00807dc4 	movi	r2,503
   259a4:	1441e92e 	bgeu	r2,r17,2614c <_malloc_r+0x7fc>
   259a8:	8804d27a 	srli	r2,r17,9
   259ac:	1000a126 	beq	r2,zero,25c34 <_malloc_r+0x2e4>
   259b0:	00c00104 	movi	r3,4
   259b4:	18811e36 	bltu	r3,r2,25e30 <_malloc_r+0x4e0>
   259b8:	8804d1ba 	srli	r2,r17,6
   259bc:	12000e44 	addi	r8,r2,57
   259c0:	11c00e04 	addi	r7,r2,56
   259c4:	4209883a 	add	r4,r8,r8
   259c8:	04c000f4 	movhi	r19,3
   259cc:	2109883a 	add	r4,r4,r4
   259d0:	9cc5e204 	addi	r19,r19,6024
   259d4:	2109883a 	add	r4,r4,r4
   259d8:	9909883a 	add	r4,r19,r4
   259dc:	24000117 	ldw	r16,4(r4)
   259e0:	213ffe04 	addi	r4,r4,-8
   259e4:	24009726 	beq	r4,r16,25c44 <_malloc_r+0x2f4>
   259e8:	80800117 	ldw	r2,4(r16)
   259ec:	01bfff04 	movi	r6,-4
   259f0:	014003c4 	movi	r5,15
   259f4:	1184703a 	and	r2,r2,r6
   259f8:	1447c83a 	sub	r3,r2,r17
   259fc:	28c00716 	blt	r5,r3,25a1c <_malloc_r+0xcc>
   25a00:	1800920e 	bge	r3,zero,25c4c <_malloc_r+0x2fc>
   25a04:	84000317 	ldw	r16,12(r16)
   25a08:	24008e26 	beq	r4,r16,25c44 <_malloc_r+0x2f4>
   25a0c:	80800117 	ldw	r2,4(r16)
   25a10:	1184703a 	and	r2,r2,r6
   25a14:	1447c83a 	sub	r3,r2,r17
   25a18:	28fff90e 	bge	r5,r3,25a00 <_gp+0xfffeab48>
   25a1c:	3809883a 	mov	r4,r7
   25a20:	018000f4 	movhi	r6,3
   25a24:	9c000417 	ldw	r16,16(r19)
   25a28:	3185e204 	addi	r6,r6,6024
   25a2c:	32000204 	addi	r8,r6,8
   25a30:	82013426 	beq	r16,r8,25f04 <_malloc_r+0x5b4>
   25a34:	80c00117 	ldw	r3,4(r16)
   25a38:	00bfff04 	movi	r2,-4
   25a3c:	188e703a 	and	r7,r3,r2
   25a40:	3c45c83a 	sub	r2,r7,r17
   25a44:	00c003c4 	movi	r3,15
   25a48:	18811f16 	blt	r3,r2,25ec8 <_malloc_r+0x578>
   25a4c:	32000515 	stw	r8,20(r6)
   25a50:	32000415 	stw	r8,16(r6)
   25a54:	10007f0e 	bge	r2,zero,25c54 <_malloc_r+0x304>
   25a58:	00807fc4 	movi	r2,511
   25a5c:	11c0fd36 	bltu	r2,r7,25e54 <_malloc_r+0x504>
   25a60:	3806d0fa 	srli	r3,r7,3
   25a64:	01c00044 	movi	r7,1
   25a68:	30800117 	ldw	r2,4(r6)
   25a6c:	19400044 	addi	r5,r3,1
   25a70:	294b883a 	add	r5,r5,r5
   25a74:	1807d0ba 	srai	r3,r3,2
   25a78:	294b883a 	add	r5,r5,r5
   25a7c:	294b883a 	add	r5,r5,r5
   25a80:	298b883a 	add	r5,r5,r6
   25a84:	38c6983a 	sll	r3,r7,r3
   25a88:	29c00017 	ldw	r7,0(r5)
   25a8c:	2a7ffe04 	addi	r9,r5,-8
   25a90:	1886b03a 	or	r3,r3,r2
   25a94:	82400315 	stw	r9,12(r16)
   25a98:	81c00215 	stw	r7,8(r16)
   25a9c:	30c00115 	stw	r3,4(r6)
   25aa0:	2c000015 	stw	r16,0(r5)
   25aa4:	3c000315 	stw	r16,12(r7)
   25aa8:	2005d0ba 	srai	r2,r4,2
   25aac:	01400044 	movi	r5,1
   25ab0:	288a983a 	sll	r5,r5,r2
   25ab4:	19406f36 	bltu	r3,r5,25c74 <_malloc_r+0x324>
   25ab8:	28c4703a 	and	r2,r5,r3
   25abc:	10000a1e 	bne	r2,zero,25ae8 <_malloc_r+0x198>
   25ac0:	00bfff04 	movi	r2,-4
   25ac4:	294b883a 	add	r5,r5,r5
   25ac8:	2088703a 	and	r4,r4,r2
   25acc:	28c4703a 	and	r2,r5,r3
   25ad0:	21000104 	addi	r4,r4,4
   25ad4:	1000041e 	bne	r2,zero,25ae8 <_malloc_r+0x198>
   25ad8:	294b883a 	add	r5,r5,r5
   25adc:	28c4703a 	and	r2,r5,r3
   25ae0:	21000104 	addi	r4,r4,4
   25ae4:	103ffc26 	beq	r2,zero,25ad8 <_gp+0xfffeac20>
   25ae8:	02bfff04 	movi	r10,-4
   25aec:	024003c4 	movi	r9,15
   25af0:	21800044 	addi	r6,r4,1
   25af4:	318d883a 	add	r6,r6,r6
   25af8:	318d883a 	add	r6,r6,r6
   25afc:	318d883a 	add	r6,r6,r6
   25b00:	998d883a 	add	r6,r19,r6
   25b04:	333ffe04 	addi	r12,r6,-8
   25b08:	2017883a 	mov	r11,r4
   25b0c:	31800104 	addi	r6,r6,4
   25b10:	34000017 	ldw	r16,0(r6)
   25b14:	31fffd04 	addi	r7,r6,-12
   25b18:	81c0041e 	bne	r16,r7,25b2c <_malloc_r+0x1dc>
   25b1c:	0000fb06 	br	25f0c <_malloc_r+0x5bc>
   25b20:	1801030e 	bge	r3,zero,25f30 <_malloc_r+0x5e0>
   25b24:	84000317 	ldw	r16,12(r16)
   25b28:	81c0f826 	beq	r16,r7,25f0c <_malloc_r+0x5bc>
   25b2c:	80800117 	ldw	r2,4(r16)
   25b30:	1284703a 	and	r2,r2,r10
   25b34:	1447c83a 	sub	r3,r2,r17
   25b38:	48fff90e 	bge	r9,r3,25b20 <_gp+0xfffeac68>
   25b3c:	80800317 	ldw	r2,12(r16)
   25b40:	81000217 	ldw	r4,8(r16)
   25b44:	89400054 	ori	r5,r17,1
   25b48:	81400115 	stw	r5,4(r16)
   25b4c:	20800315 	stw	r2,12(r4)
   25b50:	11000215 	stw	r4,8(r2)
   25b54:	8463883a 	add	r17,r16,r17
   25b58:	9c400515 	stw	r17,20(r19)
   25b5c:	9c400415 	stw	r17,16(r19)
   25b60:	18800054 	ori	r2,r3,1
   25b64:	88800115 	stw	r2,4(r17)
   25b68:	8a000315 	stw	r8,12(r17)
   25b6c:	8a000215 	stw	r8,8(r17)
   25b70:	88e3883a 	add	r17,r17,r3
   25b74:	88c00015 	stw	r3,0(r17)
   25b78:	9009883a 	mov	r4,r18
   25b7c:	002db240 	call	2db24 <__malloc_unlock>
   25b80:	80800204 	addi	r2,r16,8
   25b84:	00001b06 	br	25bf4 <_malloc_r+0x2a4>
   25b88:	04400404 	movi	r17,16
   25b8c:	89402536 	bltu	r17,r5,25c24 <_malloc_r+0x2d4>
   25b90:	002db000 	call	2db00 <__malloc_lock>
   25b94:	00800184 	movi	r2,6
   25b98:	01000084 	movi	r4,2
   25b9c:	04c000f4 	movhi	r19,3
   25ba0:	1085883a 	add	r2,r2,r2
   25ba4:	9cc5e204 	addi	r19,r19,6024
   25ba8:	1085883a 	add	r2,r2,r2
   25bac:	9885883a 	add	r2,r19,r2
   25bb0:	14000117 	ldw	r16,4(r2)
   25bb4:	10fffe04 	addi	r3,r2,-8
   25bb8:	80c0d926 	beq	r16,r3,25f20 <_malloc_r+0x5d0>
   25bbc:	80c00117 	ldw	r3,4(r16)
   25bc0:	81000317 	ldw	r4,12(r16)
   25bc4:	00bfff04 	movi	r2,-4
   25bc8:	1884703a 	and	r2,r3,r2
   25bcc:	81400217 	ldw	r5,8(r16)
   25bd0:	8085883a 	add	r2,r16,r2
   25bd4:	10c00117 	ldw	r3,4(r2)
   25bd8:	29000315 	stw	r4,12(r5)
   25bdc:	21400215 	stw	r5,8(r4)
   25be0:	18c00054 	ori	r3,r3,1
   25be4:	10c00115 	stw	r3,4(r2)
   25be8:	9009883a 	mov	r4,r18
   25bec:	002db240 	call	2db24 <__malloc_unlock>
   25bf0:	80800204 	addi	r2,r16,8
   25bf4:	dfc00a17 	ldw	ra,40(sp)
   25bf8:	df000917 	ldw	fp,36(sp)
   25bfc:	ddc00817 	ldw	r23,32(sp)
   25c00:	dd800717 	ldw	r22,28(sp)
   25c04:	dd400617 	ldw	r21,24(sp)
   25c08:	dd000517 	ldw	r20,20(sp)
   25c0c:	dcc00417 	ldw	r19,16(sp)
   25c10:	dc800317 	ldw	r18,12(sp)
   25c14:	dc400217 	ldw	r17,8(sp)
   25c18:	dc000117 	ldw	r16,4(sp)
   25c1c:	dec00b04 	addi	sp,sp,44
   25c20:	f800283a 	ret
   25c24:	00800304 	movi	r2,12
   25c28:	90800015 	stw	r2,0(r18)
   25c2c:	0005883a 	mov	r2,zero
   25c30:	003ff006 	br	25bf4 <_gp+0xfffead3c>
   25c34:	01002004 	movi	r4,128
   25c38:	02001004 	movi	r8,64
   25c3c:	01c00fc4 	movi	r7,63
   25c40:	003f6106 	br	259c8 <_gp+0xfffeab10>
   25c44:	4009883a 	mov	r4,r8
   25c48:	003f7506 	br	25a20 <_gp+0xfffeab68>
   25c4c:	81000317 	ldw	r4,12(r16)
   25c50:	003fde06 	br	25bcc <_gp+0xfffead14>
   25c54:	81c5883a 	add	r2,r16,r7
   25c58:	11400117 	ldw	r5,4(r2)
   25c5c:	9009883a 	mov	r4,r18
   25c60:	29400054 	ori	r5,r5,1
   25c64:	11400115 	stw	r5,4(r2)
   25c68:	002db240 	call	2db24 <__malloc_unlock>
   25c6c:	80800204 	addi	r2,r16,8
   25c70:	003fe006 	br	25bf4 <_gp+0xfffead3c>
   25c74:	9c000217 	ldw	r16,8(r19)
   25c78:	00bfff04 	movi	r2,-4
   25c7c:	85800117 	ldw	r22,4(r16)
   25c80:	b0ac703a 	and	r22,r22,r2
   25c84:	b4400336 	bltu	r22,r17,25c94 <_malloc_r+0x344>
   25c88:	b445c83a 	sub	r2,r22,r17
   25c8c:	00c003c4 	movi	r3,15
   25c90:	18805d16 	blt	r3,r2,25e08 <_malloc_r+0x4b8>
   25c94:	05c000f4 	movhi	r23,3
   25c98:	008000f4 	movhi	r2,3
   25c9c:	1092ca04 	addi	r2,r2,19240
   25ca0:	bdcbb104 	addi	r23,r23,11972
   25ca4:	15400017 	ldw	r21,0(r2)
   25ca8:	b8c00017 	ldw	r3,0(r23)
   25cac:	00bfffc4 	movi	r2,-1
   25cb0:	858d883a 	add	r6,r16,r22
   25cb4:	8d6b883a 	add	r21,r17,r21
   25cb8:	1880ea26 	beq	r3,r2,26064 <_malloc_r+0x714>
   25cbc:	ad4403c4 	addi	r21,r21,4111
   25cc0:	00bc0004 	movi	r2,-4096
   25cc4:	a8aa703a 	and	r21,r21,r2
   25cc8:	a80b883a 	mov	r5,r21
   25ccc:	9009883a 	mov	r4,r18
   25cd0:	d9800015 	stw	r6,0(sp)
   25cd4:	0027c9c0 	call	27c9c <_sbrk_r>
   25cd8:	1029883a 	mov	r20,r2
   25cdc:	00bfffc4 	movi	r2,-1
   25ce0:	d9800017 	ldw	r6,0(sp)
   25ce4:	a080e826 	beq	r20,r2,26088 <_malloc_r+0x738>
   25ce8:	a180a636 	bltu	r20,r6,25f84 <_malloc_r+0x634>
   25cec:	070000f4 	movhi	fp,3
   25cf0:	e712d304 	addi	fp,fp,19276
   25cf4:	e0800017 	ldw	r2,0(fp)
   25cf8:	a887883a 	add	r3,r21,r2
   25cfc:	e0c00015 	stw	r3,0(fp)
   25d00:	3500e626 	beq	r6,r20,2609c <_malloc_r+0x74c>
   25d04:	b9000017 	ldw	r4,0(r23)
   25d08:	00bfffc4 	movi	r2,-1
   25d0c:	2080ee26 	beq	r4,r2,260c8 <_malloc_r+0x778>
   25d10:	a185c83a 	sub	r2,r20,r6
   25d14:	10c5883a 	add	r2,r2,r3
   25d18:	e0800015 	stw	r2,0(fp)
   25d1c:	a0c001cc 	andi	r3,r20,7
   25d20:	1800bc26 	beq	r3,zero,26014 <_malloc_r+0x6c4>
   25d24:	a0e9c83a 	sub	r20,r20,r3
   25d28:	00840204 	movi	r2,4104
   25d2c:	a5000204 	addi	r20,r20,8
   25d30:	10c7c83a 	sub	r3,r2,r3
   25d34:	a545883a 	add	r2,r20,r21
   25d38:	1083ffcc 	andi	r2,r2,4095
   25d3c:	18abc83a 	sub	r21,r3,r2
   25d40:	a80b883a 	mov	r5,r21
   25d44:	9009883a 	mov	r4,r18
   25d48:	0027c9c0 	call	27c9c <_sbrk_r>
   25d4c:	00ffffc4 	movi	r3,-1
   25d50:	10c0e126 	beq	r2,r3,260d8 <_malloc_r+0x788>
   25d54:	1505c83a 	sub	r2,r2,r20
   25d58:	1545883a 	add	r2,r2,r21
   25d5c:	10800054 	ori	r2,r2,1
   25d60:	e0c00017 	ldw	r3,0(fp)
   25d64:	9d000215 	stw	r20,8(r19)
   25d68:	a0800115 	stw	r2,4(r20)
   25d6c:	a8c7883a 	add	r3,r21,r3
   25d70:	e0c00015 	stw	r3,0(fp)
   25d74:	84c00e26 	beq	r16,r19,25db0 <_malloc_r+0x460>
   25d78:	018003c4 	movi	r6,15
   25d7c:	3580a72e 	bgeu	r6,r22,2601c <_malloc_r+0x6cc>
   25d80:	81400117 	ldw	r5,4(r16)
   25d84:	013ffe04 	movi	r4,-8
   25d88:	b0bffd04 	addi	r2,r22,-12
   25d8c:	1104703a 	and	r2,r2,r4
   25d90:	2900004c 	andi	r4,r5,1
   25d94:	2088b03a 	or	r4,r4,r2
   25d98:	81000115 	stw	r4,4(r16)
   25d9c:	01400144 	movi	r5,5
   25da0:	8089883a 	add	r4,r16,r2
   25da4:	21400115 	stw	r5,4(r4)
   25da8:	21400215 	stw	r5,8(r4)
   25dac:	3080cd36 	bltu	r6,r2,260e4 <_malloc_r+0x794>
   25db0:	008000f4 	movhi	r2,3
   25db4:	1092c904 	addi	r2,r2,19236
   25db8:	11000017 	ldw	r4,0(r2)
   25dbc:	20c0012e 	bgeu	r4,r3,25dc4 <_malloc_r+0x474>
   25dc0:	10c00015 	stw	r3,0(r2)
   25dc4:	008000f4 	movhi	r2,3
   25dc8:	1092c804 	addi	r2,r2,19232
   25dcc:	11000017 	ldw	r4,0(r2)
   25dd0:	9c000217 	ldw	r16,8(r19)
   25dd4:	20c0012e 	bgeu	r4,r3,25ddc <_malloc_r+0x48c>
   25dd8:	10c00015 	stw	r3,0(r2)
   25ddc:	80c00117 	ldw	r3,4(r16)
   25de0:	00bfff04 	movi	r2,-4
   25de4:	1886703a 	and	r3,r3,r2
   25de8:	1c45c83a 	sub	r2,r3,r17
   25dec:	1c400236 	bltu	r3,r17,25df8 <_malloc_r+0x4a8>
   25df0:	00c003c4 	movi	r3,15
   25df4:	18800416 	blt	r3,r2,25e08 <_malloc_r+0x4b8>
   25df8:	9009883a 	mov	r4,r18
   25dfc:	002db240 	call	2db24 <__malloc_unlock>
   25e00:	0005883a 	mov	r2,zero
   25e04:	003f7b06 	br	25bf4 <_gp+0xfffead3c>
   25e08:	88c00054 	ori	r3,r17,1
   25e0c:	80c00115 	stw	r3,4(r16)
   25e10:	8463883a 	add	r17,r16,r17
   25e14:	10800054 	ori	r2,r2,1
   25e18:	9c400215 	stw	r17,8(r19)
   25e1c:	88800115 	stw	r2,4(r17)
   25e20:	9009883a 	mov	r4,r18
   25e24:	002db240 	call	2db24 <__malloc_unlock>
   25e28:	80800204 	addi	r2,r16,8
   25e2c:	003f7106 	br	25bf4 <_gp+0xfffead3c>
   25e30:	00c00504 	movi	r3,20
   25e34:	18804a2e 	bgeu	r3,r2,25f60 <_malloc_r+0x610>
   25e38:	00c01504 	movi	r3,84
   25e3c:	18806e36 	bltu	r3,r2,25ff8 <_malloc_r+0x6a8>
   25e40:	8804d33a 	srli	r2,r17,12
   25e44:	12001bc4 	addi	r8,r2,111
   25e48:	11c01b84 	addi	r7,r2,110
   25e4c:	4209883a 	add	r4,r8,r8
   25e50:	003edd06 	br	259c8 <_gp+0xfffeab10>
   25e54:	3804d27a 	srli	r2,r7,9
   25e58:	00c00104 	movi	r3,4
   25e5c:	1880442e 	bgeu	r3,r2,25f70 <_malloc_r+0x620>
   25e60:	00c00504 	movi	r3,20
   25e64:	18808136 	bltu	r3,r2,2606c <_malloc_r+0x71c>
   25e68:	11401704 	addi	r5,r2,92
   25e6c:	10c016c4 	addi	r3,r2,91
   25e70:	294b883a 	add	r5,r5,r5
   25e74:	294b883a 	add	r5,r5,r5
   25e78:	294b883a 	add	r5,r5,r5
   25e7c:	994b883a 	add	r5,r19,r5
   25e80:	28800017 	ldw	r2,0(r5)
   25e84:	018000f4 	movhi	r6,3
   25e88:	297ffe04 	addi	r5,r5,-8
   25e8c:	3185e204 	addi	r6,r6,6024
   25e90:	28806526 	beq	r5,r2,26028 <_malloc_r+0x6d8>
   25e94:	01bfff04 	movi	r6,-4
   25e98:	10c00117 	ldw	r3,4(r2)
   25e9c:	1986703a 	and	r3,r3,r6
   25ea0:	38c0022e 	bgeu	r7,r3,25eac <_malloc_r+0x55c>
   25ea4:	10800217 	ldw	r2,8(r2)
   25ea8:	28bffb1e 	bne	r5,r2,25e98 <_gp+0xfffeafe0>
   25eac:	11400317 	ldw	r5,12(r2)
   25eb0:	98c00117 	ldw	r3,4(r19)
   25eb4:	81400315 	stw	r5,12(r16)
   25eb8:	80800215 	stw	r2,8(r16)
   25ebc:	2c000215 	stw	r16,8(r5)
   25ec0:	14000315 	stw	r16,12(r2)
   25ec4:	003ef806 	br	25aa8 <_gp+0xfffeabf0>
   25ec8:	88c00054 	ori	r3,r17,1
   25ecc:	80c00115 	stw	r3,4(r16)
   25ed0:	8463883a 	add	r17,r16,r17
   25ed4:	34400515 	stw	r17,20(r6)
   25ed8:	34400415 	stw	r17,16(r6)
   25edc:	10c00054 	ori	r3,r2,1
   25ee0:	8a000315 	stw	r8,12(r17)
   25ee4:	8a000215 	stw	r8,8(r17)
   25ee8:	88c00115 	stw	r3,4(r17)
   25eec:	88a3883a 	add	r17,r17,r2
   25ef0:	88800015 	stw	r2,0(r17)
   25ef4:	9009883a 	mov	r4,r18
   25ef8:	002db240 	call	2db24 <__malloc_unlock>
   25efc:	80800204 	addi	r2,r16,8
   25f00:	003f3c06 	br	25bf4 <_gp+0xfffead3c>
   25f04:	30c00117 	ldw	r3,4(r6)
   25f08:	003ee706 	br	25aa8 <_gp+0xfffeabf0>
   25f0c:	5ac00044 	addi	r11,r11,1
   25f10:	588000cc 	andi	r2,r11,3
   25f14:	31800204 	addi	r6,r6,8
   25f18:	103efd1e 	bne	r2,zero,25b10 <_gp+0xfffeac58>
   25f1c:	00002406 	br	25fb0 <_malloc_r+0x660>
   25f20:	14000317 	ldw	r16,12(r2)
   25f24:	143f251e 	bne	r2,r16,25bbc <_gp+0xfffead04>
   25f28:	21000084 	addi	r4,r4,2
   25f2c:	003ebc06 	br	25a20 <_gp+0xfffeab68>
   25f30:	8085883a 	add	r2,r16,r2
   25f34:	10c00117 	ldw	r3,4(r2)
   25f38:	81000317 	ldw	r4,12(r16)
   25f3c:	81400217 	ldw	r5,8(r16)
   25f40:	18c00054 	ori	r3,r3,1
   25f44:	10c00115 	stw	r3,4(r2)
   25f48:	29000315 	stw	r4,12(r5)
   25f4c:	21400215 	stw	r5,8(r4)
   25f50:	9009883a 	mov	r4,r18
   25f54:	002db240 	call	2db24 <__malloc_unlock>
   25f58:	80800204 	addi	r2,r16,8
   25f5c:	003f2506 	br	25bf4 <_gp+0xfffead3c>
   25f60:	12001704 	addi	r8,r2,92
   25f64:	11c016c4 	addi	r7,r2,91
   25f68:	4209883a 	add	r4,r8,r8
   25f6c:	003e9606 	br	259c8 <_gp+0xfffeab10>
   25f70:	3804d1ba 	srli	r2,r7,6
   25f74:	11400e44 	addi	r5,r2,57
   25f78:	10c00e04 	addi	r3,r2,56
   25f7c:	294b883a 	add	r5,r5,r5
   25f80:	003fbc06 	br	25e74 <_gp+0xfffeafbc>
   25f84:	84ff5926 	beq	r16,r19,25cec <_gp+0xfffeae34>
   25f88:	008000f4 	movhi	r2,3
   25f8c:	1085e204 	addi	r2,r2,6024
   25f90:	14000217 	ldw	r16,8(r2)
   25f94:	00bfff04 	movi	r2,-4
   25f98:	80c00117 	ldw	r3,4(r16)
   25f9c:	1886703a 	and	r3,r3,r2
   25fa0:	003f9106 	br	25de8 <_gp+0xfffeaf30>
   25fa4:	60800217 	ldw	r2,8(r12)
   25fa8:	213fffc4 	addi	r4,r4,-1
   25fac:	1300651e 	bne	r2,r12,26144 <_malloc_r+0x7f4>
   25fb0:	208000cc 	andi	r2,r4,3
   25fb4:	633ffe04 	addi	r12,r12,-8
   25fb8:	103ffa1e 	bne	r2,zero,25fa4 <_gp+0xfffeb0ec>
   25fbc:	98800117 	ldw	r2,4(r19)
   25fc0:	0146303a 	nor	r3,zero,r5
   25fc4:	1884703a 	and	r2,r3,r2
   25fc8:	98800115 	stw	r2,4(r19)
   25fcc:	294b883a 	add	r5,r5,r5
   25fd0:	117f2836 	bltu	r2,r5,25c74 <_gp+0xfffeadbc>
   25fd4:	283f2726 	beq	r5,zero,25c74 <_gp+0xfffeadbc>
   25fd8:	2886703a 	and	r3,r5,r2
   25fdc:	5809883a 	mov	r4,r11
   25fe0:	183ec31e 	bne	r3,zero,25af0 <_gp+0xfffeac38>
   25fe4:	294b883a 	add	r5,r5,r5
   25fe8:	2886703a 	and	r3,r5,r2
   25fec:	21000104 	addi	r4,r4,4
   25ff0:	183ffc26 	beq	r3,zero,25fe4 <_gp+0xfffeb12c>
   25ff4:	003ebe06 	br	25af0 <_gp+0xfffeac38>
   25ff8:	00c05504 	movi	r3,340
   25ffc:	18801236 	bltu	r3,r2,26048 <_malloc_r+0x6f8>
   26000:	8804d3fa 	srli	r2,r17,15
   26004:	12001e04 	addi	r8,r2,120
   26008:	11c01dc4 	addi	r7,r2,119
   2600c:	4209883a 	add	r4,r8,r8
   26010:	003e6d06 	br	259c8 <_gp+0xfffeab10>
   26014:	00c40004 	movi	r3,4096
   26018:	003f4606 	br	25d34 <_gp+0xfffeae7c>
   2601c:	00800044 	movi	r2,1
   26020:	a0800115 	stw	r2,4(r20)
   26024:	003f7406 	br	25df8 <_gp+0xfffeaf40>
   26028:	1805d0ba 	srai	r2,r3,2
   2602c:	01c00044 	movi	r7,1
   26030:	30c00117 	ldw	r3,4(r6)
   26034:	388e983a 	sll	r7,r7,r2
   26038:	2805883a 	mov	r2,r5
   2603c:	38c6b03a 	or	r3,r7,r3
   26040:	30c00115 	stw	r3,4(r6)
   26044:	003f9b06 	br	25eb4 <_gp+0xfffeaffc>
   26048:	00c15504 	movi	r3,1364
   2604c:	18801a36 	bltu	r3,r2,260b8 <_malloc_r+0x768>
   26050:	8804d4ba 	srli	r2,r17,18
   26054:	12001f44 	addi	r8,r2,125
   26058:	11c01f04 	addi	r7,r2,124
   2605c:	4209883a 	add	r4,r8,r8
   26060:	003e5906 	br	259c8 <_gp+0xfffeab10>
   26064:	ad400404 	addi	r21,r21,16
   26068:	003f1706 	br	25cc8 <_gp+0xfffeae10>
   2606c:	00c01504 	movi	r3,84
   26070:	18802336 	bltu	r3,r2,26100 <_malloc_r+0x7b0>
   26074:	3804d33a 	srli	r2,r7,12
   26078:	11401bc4 	addi	r5,r2,111
   2607c:	10c01b84 	addi	r3,r2,110
   26080:	294b883a 	add	r5,r5,r5
   26084:	003f7b06 	br	25e74 <_gp+0xfffeafbc>
   26088:	9c000217 	ldw	r16,8(r19)
   2608c:	00bfff04 	movi	r2,-4
   26090:	80c00117 	ldw	r3,4(r16)
   26094:	1886703a 	and	r3,r3,r2
   26098:	003f5306 	br	25de8 <_gp+0xfffeaf30>
   2609c:	3083ffcc 	andi	r2,r6,4095
   260a0:	103f181e 	bne	r2,zero,25d04 <_gp+0xfffeae4c>
   260a4:	99000217 	ldw	r4,8(r19)
   260a8:	b545883a 	add	r2,r22,r21
   260ac:	10800054 	ori	r2,r2,1
   260b0:	20800115 	stw	r2,4(r4)
   260b4:	003f3e06 	br	25db0 <_gp+0xfffeaef8>
   260b8:	01003f84 	movi	r4,254
   260bc:	02001fc4 	movi	r8,127
   260c0:	01c01f84 	movi	r7,126
   260c4:	003e4006 	br	259c8 <_gp+0xfffeab10>
   260c8:	008000f4 	movhi	r2,3
   260cc:	108bb104 	addi	r2,r2,11972
   260d0:	15000015 	stw	r20,0(r2)
   260d4:	003f1106 	br	25d1c <_gp+0xfffeae64>
   260d8:	00800044 	movi	r2,1
   260dc:	002b883a 	mov	r21,zero
   260e0:	003f1f06 	br	25d60 <_gp+0xfffeaea8>
   260e4:	81400204 	addi	r5,r16,8
   260e8:	9009883a 	mov	r4,r18
   260ec:	0024d580 	call	24d58 <_free_r>
   260f0:	008000f4 	movhi	r2,3
   260f4:	1092d304 	addi	r2,r2,19276
   260f8:	10c00017 	ldw	r3,0(r2)
   260fc:	003f2c06 	br	25db0 <_gp+0xfffeaef8>
   26100:	00c05504 	movi	r3,340
   26104:	18800536 	bltu	r3,r2,2611c <_malloc_r+0x7cc>
   26108:	3804d3fa 	srli	r2,r7,15
   2610c:	11401e04 	addi	r5,r2,120
   26110:	10c01dc4 	addi	r3,r2,119
   26114:	294b883a 	add	r5,r5,r5
   26118:	003f5606 	br	25e74 <_gp+0xfffeafbc>
   2611c:	00c15504 	movi	r3,1364
   26120:	18800536 	bltu	r3,r2,26138 <_malloc_r+0x7e8>
   26124:	3804d4ba 	srli	r2,r7,18
   26128:	11401f44 	addi	r5,r2,125
   2612c:	10c01f04 	addi	r3,r2,124
   26130:	294b883a 	add	r5,r5,r5
   26134:	003f4f06 	br	25e74 <_gp+0xfffeafbc>
   26138:	01403f84 	movi	r5,254
   2613c:	00c01f84 	movi	r3,126
   26140:	003f4c06 	br	25e74 <_gp+0xfffeafbc>
   26144:	98800117 	ldw	r2,4(r19)
   26148:	003fa006 	br	25fcc <_gp+0xfffeb114>
   2614c:	8808d0fa 	srli	r4,r17,3
   26150:	20800044 	addi	r2,r4,1
   26154:	1085883a 	add	r2,r2,r2
   26158:	003e9006 	br	25b9c <_gp+0xfffeace4>

0002615c <memchr>:
   2615c:	208000cc 	andi	r2,r4,3
   26160:	280f883a 	mov	r7,r5
   26164:	10003426 	beq	r2,zero,26238 <memchr+0xdc>
   26168:	30bfffc4 	addi	r2,r6,-1
   2616c:	30001a26 	beq	r6,zero,261d8 <memchr+0x7c>
   26170:	20c00003 	ldbu	r3,0(r4)
   26174:	29803fcc 	andi	r6,r5,255
   26178:	30c0051e 	bne	r6,r3,26190 <memchr+0x34>
   2617c:	00001806 	br	261e0 <memchr+0x84>
   26180:	10001526 	beq	r2,zero,261d8 <memchr+0x7c>
   26184:	20c00003 	ldbu	r3,0(r4)
   26188:	10bfffc4 	addi	r2,r2,-1
   2618c:	30c01426 	beq	r6,r3,261e0 <memchr+0x84>
   26190:	21000044 	addi	r4,r4,1
   26194:	20c000cc 	andi	r3,r4,3
   26198:	183ff91e 	bne	r3,zero,26180 <_gp+0xfffeb2c8>
   2619c:	020000c4 	movi	r8,3
   261a0:	40801136 	bltu	r8,r2,261e8 <memchr+0x8c>
   261a4:	10000c26 	beq	r2,zero,261d8 <memchr+0x7c>
   261a8:	20c00003 	ldbu	r3,0(r4)
   261ac:	29403fcc 	andi	r5,r5,255
   261b0:	28c00b26 	beq	r5,r3,261e0 <memchr+0x84>
   261b4:	20c00044 	addi	r3,r4,1
   261b8:	39803fcc 	andi	r6,r7,255
   261bc:	2089883a 	add	r4,r4,r2
   261c0:	00000306 	br	261d0 <memchr+0x74>
   261c4:	18c00044 	addi	r3,r3,1
   261c8:	197fffc3 	ldbu	r5,-1(r3)
   261cc:	31400526 	beq	r6,r5,261e4 <memchr+0x88>
   261d0:	1805883a 	mov	r2,r3
   261d4:	20fffb1e 	bne	r4,r3,261c4 <_gp+0xfffeb30c>
   261d8:	0005883a 	mov	r2,zero
   261dc:	f800283a 	ret
   261e0:	2005883a 	mov	r2,r4
   261e4:	f800283a 	ret
   261e8:	28c03fcc 	andi	r3,r5,255
   261ec:	1812923a 	slli	r9,r3,8
   261f0:	02ffbff4 	movhi	r11,65279
   261f4:	02a02074 	movhi	r10,32897
   261f8:	48d2b03a 	or	r9,r9,r3
   261fc:	4806943a 	slli	r3,r9,16
   26200:	5affbfc4 	addi	r11,r11,-257
   26204:	52a02004 	addi	r10,r10,-32640
   26208:	48d2b03a 	or	r9,r9,r3
   2620c:	20c00017 	ldw	r3,0(r4)
   26210:	48c6f03a 	xor	r3,r9,r3
   26214:	1acd883a 	add	r6,r3,r11
   26218:	00c6303a 	nor	r3,zero,r3
   2621c:	30c6703a 	and	r3,r6,r3
   26220:	1a86703a 	and	r3,r3,r10
   26224:	183fe01e 	bne	r3,zero,261a8 <_gp+0xfffeb2f0>
   26228:	10bfff04 	addi	r2,r2,-4
   2622c:	21000104 	addi	r4,r4,4
   26230:	40bff636 	bltu	r8,r2,2620c <_gp+0xfffeb354>
   26234:	003fdb06 	br	261a4 <_gp+0xfffeb2ec>
   26238:	3005883a 	mov	r2,r6
   2623c:	003fd706 	br	2619c <_gp+0xfffeb2e4>

00026240 <memcpy>:
   26240:	defffd04 	addi	sp,sp,-12
   26244:	dfc00215 	stw	ra,8(sp)
   26248:	dc400115 	stw	r17,4(sp)
   2624c:	dc000015 	stw	r16,0(sp)
   26250:	00c003c4 	movi	r3,15
   26254:	2005883a 	mov	r2,r4
   26258:	1980452e 	bgeu	r3,r6,26370 <memcpy+0x130>
   2625c:	2906b03a 	or	r3,r5,r4
   26260:	18c000cc 	andi	r3,r3,3
   26264:	1800441e 	bne	r3,zero,26378 <memcpy+0x138>
   26268:	347ffc04 	addi	r17,r6,-16
   2626c:	8822d13a 	srli	r17,r17,4
   26270:	28c00104 	addi	r3,r5,4
   26274:	23400104 	addi	r13,r4,4
   26278:	8820913a 	slli	r16,r17,4
   2627c:	2b000204 	addi	r12,r5,8
   26280:	22c00204 	addi	r11,r4,8
   26284:	84000504 	addi	r16,r16,20
   26288:	2a800304 	addi	r10,r5,12
   2628c:	22400304 	addi	r9,r4,12
   26290:	2c21883a 	add	r16,r5,r16
   26294:	2811883a 	mov	r8,r5
   26298:	200f883a 	mov	r7,r4
   2629c:	41000017 	ldw	r4,0(r8)
   262a0:	1fc00017 	ldw	ra,0(r3)
   262a4:	63c00017 	ldw	r15,0(r12)
   262a8:	39000015 	stw	r4,0(r7)
   262ac:	53800017 	ldw	r14,0(r10)
   262b0:	6fc00015 	stw	ra,0(r13)
   262b4:	5bc00015 	stw	r15,0(r11)
   262b8:	4b800015 	stw	r14,0(r9)
   262bc:	18c00404 	addi	r3,r3,16
   262c0:	39c00404 	addi	r7,r7,16
   262c4:	42000404 	addi	r8,r8,16
   262c8:	6b400404 	addi	r13,r13,16
   262cc:	63000404 	addi	r12,r12,16
   262d0:	5ac00404 	addi	r11,r11,16
   262d4:	52800404 	addi	r10,r10,16
   262d8:	4a400404 	addi	r9,r9,16
   262dc:	1c3fef1e 	bne	r3,r16,2629c <_gp+0xfffeb3e4>
   262e0:	89c00044 	addi	r7,r17,1
   262e4:	380e913a 	slli	r7,r7,4
   262e8:	310003cc 	andi	r4,r6,15
   262ec:	02c000c4 	movi	r11,3
   262f0:	11c7883a 	add	r3,r2,r7
   262f4:	29cb883a 	add	r5,r5,r7
   262f8:	5900212e 	bgeu	r11,r4,26380 <memcpy+0x140>
   262fc:	1813883a 	mov	r9,r3
   26300:	2811883a 	mov	r8,r5
   26304:	200f883a 	mov	r7,r4
   26308:	42800017 	ldw	r10,0(r8)
   2630c:	4a400104 	addi	r9,r9,4
   26310:	39ffff04 	addi	r7,r7,-4
   26314:	4abfff15 	stw	r10,-4(r9)
   26318:	42000104 	addi	r8,r8,4
   2631c:	59fffa36 	bltu	r11,r7,26308 <_gp+0xfffeb450>
   26320:	213fff04 	addi	r4,r4,-4
   26324:	2008d0ba 	srli	r4,r4,2
   26328:	318000cc 	andi	r6,r6,3
   2632c:	21000044 	addi	r4,r4,1
   26330:	2109883a 	add	r4,r4,r4
   26334:	2109883a 	add	r4,r4,r4
   26338:	1907883a 	add	r3,r3,r4
   2633c:	290b883a 	add	r5,r5,r4
   26340:	30000626 	beq	r6,zero,2635c <memcpy+0x11c>
   26344:	198d883a 	add	r6,r3,r6
   26348:	29c00003 	ldbu	r7,0(r5)
   2634c:	18c00044 	addi	r3,r3,1
   26350:	29400044 	addi	r5,r5,1
   26354:	19ffffc5 	stb	r7,-1(r3)
   26358:	19bffb1e 	bne	r3,r6,26348 <_gp+0xfffeb490>
   2635c:	dfc00217 	ldw	ra,8(sp)
   26360:	dc400117 	ldw	r17,4(sp)
   26364:	dc000017 	ldw	r16,0(sp)
   26368:	dec00304 	addi	sp,sp,12
   2636c:	f800283a 	ret
   26370:	2007883a 	mov	r3,r4
   26374:	003ff206 	br	26340 <_gp+0xfffeb488>
   26378:	2007883a 	mov	r3,r4
   2637c:	003ff106 	br	26344 <_gp+0xfffeb48c>
   26380:	200d883a 	mov	r6,r4
   26384:	003fee06 	br	26340 <_gp+0xfffeb488>

00026388 <memmove>:
   26388:	2005883a 	mov	r2,r4
   2638c:	29000b2e 	bgeu	r5,r4,263bc <memmove+0x34>
   26390:	298f883a 	add	r7,r5,r6
   26394:	21c0092e 	bgeu	r4,r7,263bc <memmove+0x34>
   26398:	2187883a 	add	r3,r4,r6
   2639c:	198bc83a 	sub	r5,r3,r6
   263a0:	30004826 	beq	r6,zero,264c4 <memmove+0x13c>
   263a4:	39ffffc4 	addi	r7,r7,-1
   263a8:	39000003 	ldbu	r4,0(r7)
   263ac:	18ffffc4 	addi	r3,r3,-1
   263b0:	19000005 	stb	r4,0(r3)
   263b4:	28fffb1e 	bne	r5,r3,263a4 <_gp+0xfffeb4ec>
   263b8:	f800283a 	ret
   263bc:	00c003c4 	movi	r3,15
   263c0:	1980412e 	bgeu	r3,r6,264c8 <memmove+0x140>
   263c4:	2886b03a 	or	r3,r5,r2
   263c8:	18c000cc 	andi	r3,r3,3
   263cc:	1800401e 	bne	r3,zero,264d0 <memmove+0x148>
   263d0:	33fffc04 	addi	r15,r6,-16
   263d4:	781ed13a 	srli	r15,r15,4
   263d8:	28c00104 	addi	r3,r5,4
   263dc:	13400104 	addi	r13,r2,4
   263e0:	781c913a 	slli	r14,r15,4
   263e4:	2b000204 	addi	r12,r5,8
   263e8:	12c00204 	addi	r11,r2,8
   263ec:	73800504 	addi	r14,r14,20
   263f0:	2a800304 	addi	r10,r5,12
   263f4:	12400304 	addi	r9,r2,12
   263f8:	2b9d883a 	add	r14,r5,r14
   263fc:	2811883a 	mov	r8,r5
   26400:	100f883a 	mov	r7,r2
   26404:	41000017 	ldw	r4,0(r8)
   26408:	39c00404 	addi	r7,r7,16
   2640c:	18c00404 	addi	r3,r3,16
   26410:	393ffc15 	stw	r4,-16(r7)
   26414:	193ffc17 	ldw	r4,-16(r3)
   26418:	6b400404 	addi	r13,r13,16
   2641c:	5ac00404 	addi	r11,r11,16
   26420:	693ffc15 	stw	r4,-16(r13)
   26424:	61000017 	ldw	r4,0(r12)
   26428:	4a400404 	addi	r9,r9,16
   2642c:	42000404 	addi	r8,r8,16
   26430:	593ffc15 	stw	r4,-16(r11)
   26434:	51000017 	ldw	r4,0(r10)
   26438:	63000404 	addi	r12,r12,16
   2643c:	52800404 	addi	r10,r10,16
   26440:	493ffc15 	stw	r4,-16(r9)
   26444:	1bbfef1e 	bne	r3,r14,26404 <_gp+0xfffeb54c>
   26448:	79000044 	addi	r4,r15,1
   2644c:	2008913a 	slli	r4,r4,4
   26450:	328003cc 	andi	r10,r6,15
   26454:	02c000c4 	movi	r11,3
   26458:	1107883a 	add	r3,r2,r4
   2645c:	290b883a 	add	r5,r5,r4
   26460:	5a801e2e 	bgeu	r11,r10,264dc <memmove+0x154>
   26464:	1813883a 	mov	r9,r3
   26468:	2811883a 	mov	r8,r5
   2646c:	500f883a 	mov	r7,r10
   26470:	41000017 	ldw	r4,0(r8)
   26474:	4a400104 	addi	r9,r9,4
   26478:	39ffff04 	addi	r7,r7,-4
   2647c:	493fff15 	stw	r4,-4(r9)
   26480:	42000104 	addi	r8,r8,4
   26484:	59fffa36 	bltu	r11,r7,26470 <_gp+0xfffeb5b8>
   26488:	513fff04 	addi	r4,r10,-4
   2648c:	2008d0ba 	srli	r4,r4,2
   26490:	318000cc 	andi	r6,r6,3
   26494:	21000044 	addi	r4,r4,1
   26498:	2109883a 	add	r4,r4,r4
   2649c:	2109883a 	add	r4,r4,r4
   264a0:	1907883a 	add	r3,r3,r4
   264a4:	290b883a 	add	r5,r5,r4
   264a8:	30000b26 	beq	r6,zero,264d8 <memmove+0x150>
   264ac:	198d883a 	add	r6,r3,r6
   264b0:	29c00003 	ldbu	r7,0(r5)
   264b4:	18c00044 	addi	r3,r3,1
   264b8:	29400044 	addi	r5,r5,1
   264bc:	19ffffc5 	stb	r7,-1(r3)
   264c0:	19bffb1e 	bne	r3,r6,264b0 <_gp+0xfffeb5f8>
   264c4:	f800283a 	ret
   264c8:	1007883a 	mov	r3,r2
   264cc:	003ff606 	br	264a8 <_gp+0xfffeb5f0>
   264d0:	1007883a 	mov	r3,r2
   264d4:	003ff506 	br	264ac <_gp+0xfffeb5f4>
   264d8:	f800283a 	ret
   264dc:	500d883a 	mov	r6,r10
   264e0:	003ff106 	br	264a8 <_gp+0xfffeb5f0>

000264e4 <memset>:
   264e4:	20c000cc 	andi	r3,r4,3
   264e8:	2005883a 	mov	r2,r4
   264ec:	18004426 	beq	r3,zero,26600 <memset+0x11c>
   264f0:	31ffffc4 	addi	r7,r6,-1
   264f4:	30004026 	beq	r6,zero,265f8 <memset+0x114>
   264f8:	2813883a 	mov	r9,r5
   264fc:	200d883a 	mov	r6,r4
   26500:	2007883a 	mov	r3,r4
   26504:	00000406 	br	26518 <memset+0x34>
   26508:	3a3fffc4 	addi	r8,r7,-1
   2650c:	31800044 	addi	r6,r6,1
   26510:	38003926 	beq	r7,zero,265f8 <memset+0x114>
   26514:	400f883a 	mov	r7,r8
   26518:	18c00044 	addi	r3,r3,1
   2651c:	32400005 	stb	r9,0(r6)
   26520:	1a0000cc 	andi	r8,r3,3
   26524:	403ff81e 	bne	r8,zero,26508 <_gp+0xfffeb650>
   26528:	010000c4 	movi	r4,3
   2652c:	21c02d2e 	bgeu	r4,r7,265e4 <memset+0x100>
   26530:	29003fcc 	andi	r4,r5,255
   26534:	200c923a 	slli	r6,r4,8
   26538:	3108b03a 	or	r4,r6,r4
   2653c:	200c943a 	slli	r6,r4,16
   26540:	218cb03a 	or	r6,r4,r6
   26544:	010003c4 	movi	r4,15
   26548:	21c0182e 	bgeu	r4,r7,265ac <memset+0xc8>
   2654c:	3b3ffc04 	addi	r12,r7,-16
   26550:	6018d13a 	srli	r12,r12,4
   26554:	1a000104 	addi	r8,r3,4
   26558:	1ac00204 	addi	r11,r3,8
   2655c:	6008913a 	slli	r4,r12,4
   26560:	1a800304 	addi	r10,r3,12
   26564:	1813883a 	mov	r9,r3
   26568:	21000504 	addi	r4,r4,20
   2656c:	1909883a 	add	r4,r3,r4
   26570:	49800015 	stw	r6,0(r9)
   26574:	41800015 	stw	r6,0(r8)
   26578:	59800015 	stw	r6,0(r11)
   2657c:	51800015 	stw	r6,0(r10)
   26580:	42000404 	addi	r8,r8,16
   26584:	4a400404 	addi	r9,r9,16
   26588:	5ac00404 	addi	r11,r11,16
   2658c:	52800404 	addi	r10,r10,16
   26590:	413ff71e 	bne	r8,r4,26570 <_gp+0xfffeb6b8>
   26594:	63000044 	addi	r12,r12,1
   26598:	6018913a 	slli	r12,r12,4
   2659c:	39c003cc 	andi	r7,r7,15
   265a0:	010000c4 	movi	r4,3
   265a4:	1b07883a 	add	r3,r3,r12
   265a8:	21c00e2e 	bgeu	r4,r7,265e4 <memset+0x100>
   265ac:	1813883a 	mov	r9,r3
   265b0:	3811883a 	mov	r8,r7
   265b4:	010000c4 	movi	r4,3
   265b8:	49800015 	stw	r6,0(r9)
   265bc:	423fff04 	addi	r8,r8,-4
   265c0:	4a400104 	addi	r9,r9,4
   265c4:	223ffc36 	bltu	r4,r8,265b8 <_gp+0xfffeb700>
   265c8:	393fff04 	addi	r4,r7,-4
   265cc:	2008d0ba 	srli	r4,r4,2
   265d0:	39c000cc 	andi	r7,r7,3
   265d4:	21000044 	addi	r4,r4,1
   265d8:	2109883a 	add	r4,r4,r4
   265dc:	2109883a 	add	r4,r4,r4
   265e0:	1907883a 	add	r3,r3,r4
   265e4:	38000526 	beq	r7,zero,265fc <memset+0x118>
   265e8:	19cf883a 	add	r7,r3,r7
   265ec:	19400005 	stb	r5,0(r3)
   265f0:	18c00044 	addi	r3,r3,1
   265f4:	38fffd1e 	bne	r7,r3,265ec <_gp+0xfffeb734>
   265f8:	f800283a 	ret
   265fc:	f800283a 	ret
   26600:	2007883a 	mov	r3,r4
   26604:	300f883a 	mov	r7,r6
   26608:	003fc706 	br	26528 <_gp+0xfffeb670>

0002660c <_Balloc>:
   2660c:	20801317 	ldw	r2,76(r4)
   26610:	defffc04 	addi	sp,sp,-16
   26614:	dc400115 	stw	r17,4(sp)
   26618:	dc000015 	stw	r16,0(sp)
   2661c:	dfc00315 	stw	ra,12(sp)
   26620:	dc800215 	stw	r18,8(sp)
   26624:	2023883a 	mov	r17,r4
   26628:	2821883a 	mov	r16,r5
   2662c:	10000f26 	beq	r2,zero,2666c <_Balloc+0x60>
   26630:	8407883a 	add	r3,r16,r16
   26634:	18c7883a 	add	r3,r3,r3
   26638:	10c7883a 	add	r3,r2,r3
   2663c:	18800017 	ldw	r2,0(r3)
   26640:	10001126 	beq	r2,zero,26688 <_Balloc+0x7c>
   26644:	11000017 	ldw	r4,0(r2)
   26648:	19000015 	stw	r4,0(r3)
   2664c:	10000415 	stw	zero,16(r2)
   26650:	10000315 	stw	zero,12(r2)
   26654:	dfc00317 	ldw	ra,12(sp)
   26658:	dc800217 	ldw	r18,8(sp)
   2665c:	dc400117 	ldw	r17,4(sp)
   26660:	dc000017 	ldw	r16,0(sp)
   26664:	dec00404 	addi	sp,sp,16
   26668:	f800283a 	ret
   2666c:	01800844 	movi	r6,33
   26670:	01400104 	movi	r5,4
   26674:	00296b40 	call	296b4 <_calloc_r>
   26678:	88801315 	stw	r2,76(r17)
   2667c:	103fec1e 	bne	r2,zero,26630 <_gp+0xfffeb778>
   26680:	0005883a 	mov	r2,zero
   26684:	003ff306 	br	26654 <_gp+0xfffeb79c>
   26688:	01400044 	movi	r5,1
   2668c:	2c24983a 	sll	r18,r5,r16
   26690:	8809883a 	mov	r4,r17
   26694:	91800144 	addi	r6,r18,5
   26698:	318d883a 	add	r6,r6,r6
   2669c:	318d883a 	add	r6,r6,r6
   266a0:	00296b40 	call	296b4 <_calloc_r>
   266a4:	103ff626 	beq	r2,zero,26680 <_gp+0xfffeb7c8>
   266a8:	14000115 	stw	r16,4(r2)
   266ac:	14800215 	stw	r18,8(r2)
   266b0:	003fe606 	br	2664c <_gp+0xfffeb794>

000266b4 <_Bfree>:
   266b4:	28000826 	beq	r5,zero,266d8 <_Bfree+0x24>
   266b8:	28c00117 	ldw	r3,4(r5)
   266bc:	20801317 	ldw	r2,76(r4)
   266c0:	18c7883a 	add	r3,r3,r3
   266c4:	18c7883a 	add	r3,r3,r3
   266c8:	10c5883a 	add	r2,r2,r3
   266cc:	10c00017 	ldw	r3,0(r2)
   266d0:	28c00015 	stw	r3,0(r5)
   266d4:	11400015 	stw	r5,0(r2)
   266d8:	f800283a 	ret

000266dc <__multadd>:
   266dc:	defff704 	addi	sp,sp,-36
   266e0:	dc800215 	stw	r18,8(sp)
   266e4:	2c800417 	ldw	r18,16(r5)
   266e8:	dd800615 	stw	r22,24(sp)
   266ec:	dd400515 	stw	r21,20(sp)
   266f0:	dd000415 	stw	r20,16(sp)
   266f4:	dcc00315 	stw	r19,12(sp)
   266f8:	dc400115 	stw	r17,4(sp)
   266fc:	dc000015 	stw	r16,0(sp)
   26700:	dfc00815 	stw	ra,32(sp)
   26704:	ddc00715 	stw	r23,28(sp)
   26708:	2827883a 	mov	r19,r5
   2670c:	2029883a 	mov	r20,r4
   26710:	3023883a 	mov	r17,r6
   26714:	3821883a 	mov	r16,r7
   26718:	2d400504 	addi	r21,r5,20
   2671c:	002d883a 	mov	r22,zero
   26720:	adc00017 	ldw	r23,0(r21)
   26724:	880b883a 	mov	r5,r17
   26728:	ad400104 	addi	r21,r21,4
   2672c:	b93fffcc 	andi	r4,r23,65535
   26730:	00206240 	call	20624 <__mulsi3>
   26734:	b808d43a 	srli	r4,r23,16
   26738:	880b883a 	mov	r5,r17
   2673c:	1421883a 	add	r16,r2,r16
   26740:	00206240 	call	20624 <__mulsi3>
   26744:	800ed43a 	srli	r7,r16,16
   26748:	80ffffcc 	andi	r3,r16,65535
   2674c:	b5800044 	addi	r22,r22,1
   26750:	11c5883a 	add	r2,r2,r7
   26754:	100e943a 	slli	r7,r2,16
   26758:	1020d43a 	srli	r16,r2,16
   2675c:	38c7883a 	add	r3,r7,r3
   26760:	a8ffff15 	stw	r3,-4(r21)
   26764:	b4bfee16 	blt	r22,r18,26720 <_gp+0xfffeb868>
   26768:	80000926 	beq	r16,zero,26790 <__multadd+0xb4>
   2676c:	98800217 	ldw	r2,8(r19)
   26770:	9080130e 	bge	r18,r2,267c0 <__multadd+0xe4>
   26774:	90800144 	addi	r2,r18,5
   26778:	1085883a 	add	r2,r2,r2
   2677c:	1085883a 	add	r2,r2,r2
   26780:	9885883a 	add	r2,r19,r2
   26784:	14000015 	stw	r16,0(r2)
   26788:	94800044 	addi	r18,r18,1
   2678c:	9c800415 	stw	r18,16(r19)
   26790:	9805883a 	mov	r2,r19
   26794:	dfc00817 	ldw	ra,32(sp)
   26798:	ddc00717 	ldw	r23,28(sp)
   2679c:	dd800617 	ldw	r22,24(sp)
   267a0:	dd400517 	ldw	r21,20(sp)
   267a4:	dd000417 	ldw	r20,16(sp)
   267a8:	dcc00317 	ldw	r19,12(sp)
   267ac:	dc800217 	ldw	r18,8(sp)
   267b0:	dc400117 	ldw	r17,4(sp)
   267b4:	dc000017 	ldw	r16,0(sp)
   267b8:	dec00904 	addi	sp,sp,36
   267bc:	f800283a 	ret
   267c0:	99400117 	ldw	r5,4(r19)
   267c4:	a009883a 	mov	r4,r20
   267c8:	29400044 	addi	r5,r5,1
   267cc:	002660c0 	call	2660c <_Balloc>
   267d0:	99800417 	ldw	r6,16(r19)
   267d4:	99400304 	addi	r5,r19,12
   267d8:	11000304 	addi	r4,r2,12
   267dc:	31800084 	addi	r6,r6,2
   267e0:	318d883a 	add	r6,r6,r6
   267e4:	318d883a 	add	r6,r6,r6
   267e8:	1023883a 	mov	r17,r2
   267ec:	00262400 	call	26240 <memcpy>
   267f0:	98000a26 	beq	r19,zero,2681c <__multadd+0x140>
   267f4:	98c00117 	ldw	r3,4(r19)
   267f8:	a0801317 	ldw	r2,76(r20)
   267fc:	18c7883a 	add	r3,r3,r3
   26800:	18c7883a 	add	r3,r3,r3
   26804:	10c5883a 	add	r2,r2,r3
   26808:	10c00017 	ldw	r3,0(r2)
   2680c:	98c00015 	stw	r3,0(r19)
   26810:	14c00015 	stw	r19,0(r2)
   26814:	8827883a 	mov	r19,r17
   26818:	003fd606 	br	26774 <_gp+0xfffeb8bc>
   2681c:	8827883a 	mov	r19,r17
   26820:	003fd406 	br	26774 <_gp+0xfffeb8bc>

00026824 <__s2b>:
   26824:	defff904 	addi	sp,sp,-28
   26828:	dc400115 	stw	r17,4(sp)
   2682c:	dc000015 	stw	r16,0(sp)
   26830:	2023883a 	mov	r17,r4
   26834:	2821883a 	mov	r16,r5
   26838:	39000204 	addi	r4,r7,8
   2683c:	01400244 	movi	r5,9
   26840:	dcc00315 	stw	r19,12(sp)
   26844:	dc800215 	stw	r18,8(sp)
   26848:	dfc00615 	stw	ra,24(sp)
   2684c:	dd400515 	stw	r21,20(sp)
   26850:	dd000415 	stw	r20,16(sp)
   26854:	3825883a 	mov	r18,r7
   26858:	3027883a 	mov	r19,r6
   2685c:	002ab0c0 	call	2ab0c <__divsi3>
   26860:	00c00044 	movi	r3,1
   26864:	000b883a 	mov	r5,zero
   26868:	1880030e 	bge	r3,r2,26878 <__s2b+0x54>
   2686c:	18c7883a 	add	r3,r3,r3
   26870:	29400044 	addi	r5,r5,1
   26874:	18bffd16 	blt	r3,r2,2686c <_gp+0xfffeb9b4>
   26878:	8809883a 	mov	r4,r17
   2687c:	002660c0 	call	2660c <_Balloc>
   26880:	d8c00717 	ldw	r3,28(sp)
   26884:	10c00515 	stw	r3,20(r2)
   26888:	00c00044 	movi	r3,1
   2688c:	10c00415 	stw	r3,16(r2)
   26890:	00c00244 	movi	r3,9
   26894:	1cc0210e 	bge	r3,r19,2691c <__s2b+0xf8>
   26898:	80eb883a 	add	r21,r16,r3
   2689c:	a829883a 	mov	r20,r21
   268a0:	84e1883a 	add	r16,r16,r19
   268a4:	a1c00007 	ldb	r7,0(r20)
   268a8:	01800284 	movi	r6,10
   268ac:	a5000044 	addi	r20,r20,1
   268b0:	100b883a 	mov	r5,r2
   268b4:	39fff404 	addi	r7,r7,-48
   268b8:	8809883a 	mov	r4,r17
   268bc:	00266dc0 	call	266dc <__multadd>
   268c0:	a43ff81e 	bne	r20,r16,268a4 <_gp+0xfffeb9ec>
   268c4:	ace1883a 	add	r16,r21,r19
   268c8:	843ffe04 	addi	r16,r16,-8
   268cc:	9c800a0e 	bge	r19,r18,268f8 <__s2b+0xd4>
   268d0:	94e5c83a 	sub	r18,r18,r19
   268d4:	84a5883a 	add	r18,r16,r18
   268d8:	81c00007 	ldb	r7,0(r16)
   268dc:	01800284 	movi	r6,10
   268e0:	84000044 	addi	r16,r16,1
   268e4:	100b883a 	mov	r5,r2
   268e8:	39fff404 	addi	r7,r7,-48
   268ec:	8809883a 	mov	r4,r17
   268f0:	00266dc0 	call	266dc <__multadd>
   268f4:	84bff81e 	bne	r16,r18,268d8 <_gp+0xfffeba20>
   268f8:	dfc00617 	ldw	ra,24(sp)
   268fc:	dd400517 	ldw	r21,20(sp)
   26900:	dd000417 	ldw	r20,16(sp)
   26904:	dcc00317 	ldw	r19,12(sp)
   26908:	dc800217 	ldw	r18,8(sp)
   2690c:	dc400117 	ldw	r17,4(sp)
   26910:	dc000017 	ldw	r16,0(sp)
   26914:	dec00704 	addi	sp,sp,28
   26918:	f800283a 	ret
   2691c:	84000284 	addi	r16,r16,10
   26920:	1827883a 	mov	r19,r3
   26924:	003fe906 	br	268cc <_gp+0xfffeba14>

00026928 <__hi0bits>:
   26928:	20bfffec 	andhi	r2,r4,65535
   2692c:	1000141e 	bne	r2,zero,26980 <__hi0bits+0x58>
   26930:	2008943a 	slli	r4,r4,16
   26934:	00800404 	movi	r2,16
   26938:	20ffc02c 	andhi	r3,r4,65280
   2693c:	1800021e 	bne	r3,zero,26948 <__hi0bits+0x20>
   26940:	2008923a 	slli	r4,r4,8
   26944:	10800204 	addi	r2,r2,8
   26948:	20fc002c 	andhi	r3,r4,61440
   2694c:	1800021e 	bne	r3,zero,26958 <__hi0bits+0x30>
   26950:	2008913a 	slli	r4,r4,4
   26954:	10800104 	addi	r2,r2,4
   26958:	20f0002c 	andhi	r3,r4,49152
   2695c:	1800031e 	bne	r3,zero,2696c <__hi0bits+0x44>
   26960:	2109883a 	add	r4,r4,r4
   26964:	10800084 	addi	r2,r2,2
   26968:	2109883a 	add	r4,r4,r4
   2696c:	20000316 	blt	r4,zero,2697c <__hi0bits+0x54>
   26970:	2110002c 	andhi	r4,r4,16384
   26974:	2000041e 	bne	r4,zero,26988 <__hi0bits+0x60>
   26978:	00800804 	movi	r2,32
   2697c:	f800283a 	ret
   26980:	0005883a 	mov	r2,zero
   26984:	003fec06 	br	26938 <_gp+0xfffeba80>
   26988:	10800044 	addi	r2,r2,1
   2698c:	f800283a 	ret

00026990 <__lo0bits>:
   26990:	20c00017 	ldw	r3,0(r4)
   26994:	188001cc 	andi	r2,r3,7
   26998:	10000826 	beq	r2,zero,269bc <__lo0bits+0x2c>
   2699c:	1880004c 	andi	r2,r3,1
   269a0:	1000211e 	bne	r2,zero,26a28 <__lo0bits+0x98>
   269a4:	1880008c 	andi	r2,r3,2
   269a8:	1000211e 	bne	r2,zero,26a30 <__lo0bits+0xa0>
   269ac:	1806d0ba 	srli	r3,r3,2
   269b0:	00800084 	movi	r2,2
   269b4:	20c00015 	stw	r3,0(r4)
   269b8:	f800283a 	ret
   269bc:	18bfffcc 	andi	r2,r3,65535
   269c0:	10001326 	beq	r2,zero,26a10 <__lo0bits+0x80>
   269c4:	0005883a 	mov	r2,zero
   269c8:	19403fcc 	andi	r5,r3,255
   269cc:	2800021e 	bne	r5,zero,269d8 <__lo0bits+0x48>
   269d0:	1806d23a 	srli	r3,r3,8
   269d4:	10800204 	addi	r2,r2,8
   269d8:	194003cc 	andi	r5,r3,15
   269dc:	2800021e 	bne	r5,zero,269e8 <__lo0bits+0x58>
   269e0:	1806d13a 	srli	r3,r3,4
   269e4:	10800104 	addi	r2,r2,4
   269e8:	194000cc 	andi	r5,r3,3
   269ec:	2800021e 	bne	r5,zero,269f8 <__lo0bits+0x68>
   269f0:	1806d0ba 	srli	r3,r3,2
   269f4:	10800084 	addi	r2,r2,2
   269f8:	1940004c 	andi	r5,r3,1
   269fc:	2800081e 	bne	r5,zero,26a20 <__lo0bits+0x90>
   26a00:	1806d07a 	srli	r3,r3,1
   26a04:	1800051e 	bne	r3,zero,26a1c <__lo0bits+0x8c>
   26a08:	00800804 	movi	r2,32
   26a0c:	f800283a 	ret
   26a10:	1806d43a 	srli	r3,r3,16
   26a14:	00800404 	movi	r2,16
   26a18:	003feb06 	br	269c8 <_gp+0xfffebb10>
   26a1c:	10800044 	addi	r2,r2,1
   26a20:	20c00015 	stw	r3,0(r4)
   26a24:	f800283a 	ret
   26a28:	0005883a 	mov	r2,zero
   26a2c:	f800283a 	ret
   26a30:	1806d07a 	srli	r3,r3,1
   26a34:	00800044 	movi	r2,1
   26a38:	20c00015 	stw	r3,0(r4)
   26a3c:	f800283a 	ret

00026a40 <__i2b>:
   26a40:	defffd04 	addi	sp,sp,-12
   26a44:	dc000015 	stw	r16,0(sp)
   26a48:	04000044 	movi	r16,1
   26a4c:	dc400115 	stw	r17,4(sp)
   26a50:	2823883a 	mov	r17,r5
   26a54:	800b883a 	mov	r5,r16
   26a58:	dfc00215 	stw	ra,8(sp)
   26a5c:	002660c0 	call	2660c <_Balloc>
   26a60:	14400515 	stw	r17,20(r2)
   26a64:	14000415 	stw	r16,16(r2)
   26a68:	dfc00217 	ldw	ra,8(sp)
   26a6c:	dc400117 	ldw	r17,4(sp)
   26a70:	dc000017 	ldw	r16,0(sp)
   26a74:	dec00304 	addi	sp,sp,12
   26a78:	f800283a 	ret

00026a7c <__multiply>:
   26a7c:	deffef04 	addi	sp,sp,-68
   26a80:	dc400815 	stw	r17,32(sp)
   26a84:	dc000715 	stw	r16,28(sp)
   26a88:	34400417 	ldw	r17,16(r6)
   26a8c:	2c000417 	ldw	r16,16(r5)
   26a90:	dd800d15 	stw	r22,52(sp)
   26a94:	dc800915 	stw	r18,36(sp)
   26a98:	dfc01015 	stw	ra,64(sp)
   26a9c:	df000f15 	stw	fp,60(sp)
   26aa0:	ddc00e15 	stw	r23,56(sp)
   26aa4:	dd400c15 	stw	r21,48(sp)
   26aa8:	dd000b15 	stw	r20,44(sp)
   26aac:	dcc00a15 	stw	r19,40(sp)
   26ab0:	2825883a 	mov	r18,r5
   26ab4:	302d883a 	mov	r22,r6
   26ab8:	8440050e 	bge	r16,r17,26ad0 <__multiply+0x54>
   26abc:	8007883a 	mov	r3,r16
   26ac0:	3025883a 	mov	r18,r6
   26ac4:	8821883a 	mov	r16,r17
   26ac8:	282d883a 	mov	r22,r5
   26acc:	1823883a 	mov	r17,r3
   26ad0:	90800217 	ldw	r2,8(r18)
   26ad4:	8447883a 	add	r3,r16,r17
   26ad8:	d8c00215 	stw	r3,8(sp)
   26adc:	91400117 	ldw	r5,4(r18)
   26ae0:	10c0010e 	bge	r2,r3,26ae8 <__multiply+0x6c>
   26ae4:	29400044 	addi	r5,r5,1
   26ae8:	002660c0 	call	2660c <_Balloc>
   26aec:	d8c00217 	ldw	r3,8(sp)
   26af0:	d8800615 	stw	r2,24(sp)
   26af4:	18eb883a 	add	r21,r3,r3
   26af8:	ad6b883a 	add	r21,r21,r21
   26afc:	10c00504 	addi	r3,r2,20
   26b00:	1d6b883a 	add	r21,r3,r21
   26b04:	d8c00115 	stw	r3,4(sp)
   26b08:	dd400315 	stw	r21,12(sp)
   26b0c:	1805883a 	mov	r2,r3
   26b10:	1d40042e 	bgeu	r3,r21,26b24 <__multiply+0xa8>
   26b14:	d8c00317 	ldw	r3,12(sp)
   26b18:	10000015 	stw	zero,0(r2)
   26b1c:	10800104 	addi	r2,r2,4
   26b20:	10fffc36 	bltu	r2,r3,26b14 <_gp+0xfffebc5c>
   26b24:	8c63883a 	add	r17,r17,r17
   26b28:	b5800504 	addi	r22,r22,20
   26b2c:	8c63883a 	add	r17,r17,r17
   26b30:	94800504 	addi	r18,r18,20
   26b34:	8421883a 	add	r16,r16,r16
   26b38:	b463883a 	add	r17,r22,r17
   26b3c:	8421883a 	add	r16,r16,r16
   26b40:	dd800015 	stw	r22,0(sp)
   26b44:	dc800415 	stw	r18,16(sp)
   26b48:	dc400515 	stw	r17,20(sp)
   26b4c:	9429883a 	add	r20,r18,r16
   26b50:	b4404f2e 	bgeu	r22,r17,26c90 <__multiply+0x214>
   26b54:	d8c00017 	ldw	r3,0(sp)
   26b58:	1c800017 	ldw	r18,0(r3)
   26b5c:	947fffcc 	andi	r17,r18,65535
   26b60:	88001e26 	beq	r17,zero,26bdc <__multiply+0x160>
   26b64:	dd800117 	ldw	r22,4(sp)
   26b68:	dd400417 	ldw	r21,16(sp)
   26b6c:	0027883a 	mov	r19,zero
   26b70:	ac800017 	ldw	r18,0(r21)
   26b74:	b4000017 	ldw	r16,0(r22)
   26b78:	880b883a 	mov	r5,r17
   26b7c:	913fffcc 	andi	r4,r18,65535
   26b80:	00206240 	call	20624 <__mulsi3>
   26b84:	9008d43a 	srli	r4,r18,16
   26b88:	84bfffcc 	andi	r18,r16,65535
   26b8c:	1485883a 	add	r2,r2,r18
   26b90:	14e5883a 	add	r18,r2,r19
   26b94:	8020d43a 	srli	r16,r16,16
   26b98:	9026d43a 	srli	r19,r18,16
   26b9c:	880b883a 	mov	r5,r17
   26ba0:	00206240 	call	20624 <__mulsi3>
   26ba4:	1405883a 	add	r2,r2,r16
   26ba8:	14e1883a 	add	r16,r2,r19
   26bac:	90ffffcc 	andi	r3,r18,65535
   26bb0:	8024943a 	slli	r18,r16,16
   26bb4:	ad400104 	addi	r21,r21,4
   26bb8:	b005883a 	mov	r2,r22
   26bbc:	90c6b03a 	or	r3,r18,r3
   26bc0:	b0c00015 	stw	r3,0(r22)
   26bc4:	8026d43a 	srli	r19,r16,16
   26bc8:	b5800104 	addi	r22,r22,4
   26bcc:	ad3fe836 	bltu	r21,r20,26b70 <_gp+0xfffebcb8>
   26bd0:	d8c00017 	ldw	r3,0(sp)
   26bd4:	14c00115 	stw	r19,4(r2)
   26bd8:	1c800017 	ldw	r18,0(r3)
   26bdc:	9024d43a 	srli	r18,r18,16
   26be0:	90002226 	beq	r18,zero,26c6c <__multiply+0x1f0>
   26be4:	d8c00117 	ldw	r3,4(sp)
   26be8:	dd800417 	ldw	r22,16(sp)
   26bec:	002f883a 	mov	r23,zero
   26bf0:	1f000017 	ldw	fp,0(r3)
   26bf4:	1823883a 	mov	r17,r3
   26bf8:	182b883a 	mov	r21,r3
   26bfc:	e021883a 	mov	r16,fp
   26c00:	00000106 	br	26c08 <__multiply+0x18c>
   26c04:	982b883a 	mov	r21,r19
   26c08:	b100000b 	ldhu	r4,0(r22)
   26c0c:	8020d43a 	srli	r16,r16,16
   26c10:	900b883a 	mov	r5,r18
   26c14:	00206240 	call	20624 <__mulsi3>
   26c18:	1405883a 	add	r2,r2,r16
   26c1c:	15ef883a 	add	r23,r2,r23
   26c20:	b804943a 	slli	r2,r23,16
   26c24:	e0ffffcc 	andi	r3,fp,65535
   26c28:	8c400104 	addi	r17,r17,4
   26c2c:	10c6b03a 	or	r3,r2,r3
   26c30:	88ffff15 	stw	r3,-4(r17)
   26c34:	b5800104 	addi	r22,r22,4
   26c38:	b13fff17 	ldw	r4,-4(r22)
   26c3c:	acc00104 	addi	r19,r21,4
   26c40:	900b883a 	mov	r5,r18
   26c44:	2008d43a 	srli	r4,r4,16
   26c48:	9c000017 	ldw	r16,0(r19)
   26c4c:	00206240 	call	20624 <__mulsi3>
   26c50:	b806d43a 	srli	r3,r23,16
   26c54:	813fffcc 	andi	r4,r16,65535
   26c58:	1105883a 	add	r2,r2,r4
   26c5c:	10f9883a 	add	fp,r2,r3
   26c60:	e02ed43a 	srli	r23,fp,16
   26c64:	b53fe736 	bltu	r22,r20,26c04 <_gp+0xfffebd4c>
   26c68:	af000115 	stw	fp,4(r21)
   26c6c:	d8c00017 	ldw	r3,0(sp)
   26c70:	d9000517 	ldw	r4,20(sp)
   26c74:	18c00104 	addi	r3,r3,4
   26c78:	d8c00015 	stw	r3,0(sp)
   26c7c:	d8c00117 	ldw	r3,4(sp)
   26c80:	18c00104 	addi	r3,r3,4
   26c84:	d8c00115 	stw	r3,4(sp)
   26c88:	d8c00017 	ldw	r3,0(sp)
   26c8c:	193fb136 	bltu	r3,r4,26b54 <_gp+0xfffebc9c>
   26c90:	d8c00217 	ldw	r3,8(sp)
   26c94:	00c00c0e 	bge	zero,r3,26cc8 <__multiply+0x24c>
   26c98:	d8c00317 	ldw	r3,12(sp)
   26c9c:	18bfff17 	ldw	r2,-4(r3)
   26ca0:	1d7fff04 	addi	r21,r3,-4
   26ca4:	10000326 	beq	r2,zero,26cb4 <__multiply+0x238>
   26ca8:	00000706 	br	26cc8 <__multiply+0x24c>
   26cac:	a8800017 	ldw	r2,0(r21)
   26cb0:	1000051e 	bne	r2,zero,26cc8 <__multiply+0x24c>
   26cb4:	d8c00217 	ldw	r3,8(sp)
   26cb8:	ad7fff04 	addi	r21,r21,-4
   26cbc:	18ffffc4 	addi	r3,r3,-1
   26cc0:	d8c00215 	stw	r3,8(sp)
   26cc4:	183ff91e 	bne	r3,zero,26cac <_gp+0xfffebdf4>
   26cc8:	d8c00617 	ldw	r3,24(sp)
   26ccc:	d9000217 	ldw	r4,8(sp)
   26cd0:	1805883a 	mov	r2,r3
   26cd4:	19000415 	stw	r4,16(r3)
   26cd8:	dfc01017 	ldw	ra,64(sp)
   26cdc:	df000f17 	ldw	fp,60(sp)
   26ce0:	ddc00e17 	ldw	r23,56(sp)
   26ce4:	dd800d17 	ldw	r22,52(sp)
   26ce8:	dd400c17 	ldw	r21,48(sp)
   26cec:	dd000b17 	ldw	r20,44(sp)
   26cf0:	dcc00a17 	ldw	r19,40(sp)
   26cf4:	dc800917 	ldw	r18,36(sp)
   26cf8:	dc400817 	ldw	r17,32(sp)
   26cfc:	dc000717 	ldw	r16,28(sp)
   26d00:	dec01104 	addi	sp,sp,68
   26d04:	f800283a 	ret

00026d08 <__pow5mult>:
   26d08:	defffa04 	addi	sp,sp,-24
   26d0c:	dcc00315 	stw	r19,12(sp)
   26d10:	dc000015 	stw	r16,0(sp)
   26d14:	dfc00515 	stw	ra,20(sp)
   26d18:	dd000415 	stw	r20,16(sp)
   26d1c:	dc800215 	stw	r18,8(sp)
   26d20:	dc400115 	stw	r17,4(sp)
   26d24:	308000cc 	andi	r2,r6,3
   26d28:	3021883a 	mov	r16,r6
   26d2c:	2027883a 	mov	r19,r4
   26d30:	10002f1e 	bne	r2,zero,26df0 <__pow5mult+0xe8>
   26d34:	2825883a 	mov	r18,r5
   26d38:	8021d0ba 	srai	r16,r16,2
   26d3c:	80001a26 	beq	r16,zero,26da8 <__pow5mult+0xa0>
   26d40:	9c401217 	ldw	r17,72(r19)
   26d44:	8800061e 	bne	r17,zero,26d60 <__pow5mult+0x58>
   26d48:	00003406 	br	26e1c <__pow5mult+0x114>
   26d4c:	8021d07a 	srai	r16,r16,1
   26d50:	80001526 	beq	r16,zero,26da8 <__pow5mult+0xa0>
   26d54:	88800017 	ldw	r2,0(r17)
   26d58:	10001c26 	beq	r2,zero,26dcc <__pow5mult+0xc4>
   26d5c:	1023883a 	mov	r17,r2
   26d60:	8080004c 	andi	r2,r16,1
   26d64:	103ff926 	beq	r2,zero,26d4c <_gp+0xfffebe94>
   26d68:	880d883a 	mov	r6,r17
   26d6c:	900b883a 	mov	r5,r18
   26d70:	9809883a 	mov	r4,r19
   26d74:	0026a7c0 	call	26a7c <__multiply>
   26d78:	90001b26 	beq	r18,zero,26de8 <__pow5mult+0xe0>
   26d7c:	91000117 	ldw	r4,4(r18)
   26d80:	98c01317 	ldw	r3,76(r19)
   26d84:	8021d07a 	srai	r16,r16,1
   26d88:	2109883a 	add	r4,r4,r4
   26d8c:	2109883a 	add	r4,r4,r4
   26d90:	1907883a 	add	r3,r3,r4
   26d94:	19000017 	ldw	r4,0(r3)
   26d98:	91000015 	stw	r4,0(r18)
   26d9c:	1c800015 	stw	r18,0(r3)
   26da0:	1025883a 	mov	r18,r2
   26da4:	803feb1e 	bne	r16,zero,26d54 <_gp+0xfffebe9c>
   26da8:	9005883a 	mov	r2,r18
   26dac:	dfc00517 	ldw	ra,20(sp)
   26db0:	dd000417 	ldw	r20,16(sp)
   26db4:	dcc00317 	ldw	r19,12(sp)
   26db8:	dc800217 	ldw	r18,8(sp)
   26dbc:	dc400117 	ldw	r17,4(sp)
   26dc0:	dc000017 	ldw	r16,0(sp)
   26dc4:	dec00604 	addi	sp,sp,24
   26dc8:	f800283a 	ret
   26dcc:	880d883a 	mov	r6,r17
   26dd0:	880b883a 	mov	r5,r17
   26dd4:	9809883a 	mov	r4,r19
   26dd8:	0026a7c0 	call	26a7c <__multiply>
   26ddc:	88800015 	stw	r2,0(r17)
   26de0:	10000015 	stw	zero,0(r2)
   26de4:	003fdd06 	br	26d5c <_gp+0xfffebea4>
   26de8:	1025883a 	mov	r18,r2
   26dec:	003fd706 	br	26d4c <_gp+0xfffebe94>
   26df0:	10bfffc4 	addi	r2,r2,-1
   26df4:	1085883a 	add	r2,r2,r2
   26df8:	00c000f4 	movhi	r3,3
   26dfc:	18c37c04 	addi	r3,r3,3568
   26e00:	1085883a 	add	r2,r2,r2
   26e04:	1885883a 	add	r2,r3,r2
   26e08:	11800017 	ldw	r6,0(r2)
   26e0c:	000f883a 	mov	r7,zero
   26e10:	00266dc0 	call	266dc <__multadd>
   26e14:	1025883a 	mov	r18,r2
   26e18:	003fc706 	br	26d38 <_gp+0xfffebe80>
   26e1c:	05000044 	movi	r20,1
   26e20:	a00b883a 	mov	r5,r20
   26e24:	9809883a 	mov	r4,r19
   26e28:	002660c0 	call	2660c <_Balloc>
   26e2c:	1023883a 	mov	r17,r2
   26e30:	00809c44 	movi	r2,625
   26e34:	88800515 	stw	r2,20(r17)
   26e38:	8d000415 	stw	r20,16(r17)
   26e3c:	9c401215 	stw	r17,72(r19)
   26e40:	88000015 	stw	zero,0(r17)
   26e44:	003fc606 	br	26d60 <_gp+0xfffebea8>

00026e48 <__lshift>:
   26e48:	defff904 	addi	sp,sp,-28
   26e4c:	dd400515 	stw	r21,20(sp)
   26e50:	dcc00315 	stw	r19,12(sp)
   26e54:	302bd17a 	srai	r21,r6,5
   26e58:	2cc00417 	ldw	r19,16(r5)
   26e5c:	28800217 	ldw	r2,8(r5)
   26e60:	dd000415 	stw	r20,16(sp)
   26e64:	ace7883a 	add	r19,r21,r19
   26e68:	dc800215 	stw	r18,8(sp)
   26e6c:	dc400115 	stw	r17,4(sp)
   26e70:	dc000015 	stw	r16,0(sp)
   26e74:	dfc00615 	stw	ra,24(sp)
   26e78:	9c000044 	addi	r16,r19,1
   26e7c:	2823883a 	mov	r17,r5
   26e80:	3029883a 	mov	r20,r6
   26e84:	2025883a 	mov	r18,r4
   26e88:	29400117 	ldw	r5,4(r5)
   26e8c:	1400030e 	bge	r2,r16,26e9c <__lshift+0x54>
   26e90:	1085883a 	add	r2,r2,r2
   26e94:	29400044 	addi	r5,r5,1
   26e98:	143ffd16 	blt	r2,r16,26e90 <_gp+0xfffebfd8>
   26e9c:	9009883a 	mov	r4,r18
   26ea0:	002660c0 	call	2660c <_Balloc>
   26ea4:	10c00504 	addi	r3,r2,20
   26ea8:	0540070e 	bge	zero,r21,26ec8 <__lshift+0x80>
   26eac:	ad6b883a 	add	r21,r21,r21
   26eb0:	ad6b883a 	add	r21,r21,r21
   26eb4:	1809883a 	mov	r4,r3
   26eb8:	1d47883a 	add	r3,r3,r21
   26ebc:	20000015 	stw	zero,0(r4)
   26ec0:	21000104 	addi	r4,r4,4
   26ec4:	193ffd1e 	bne	r3,r4,26ebc <_gp+0xfffec004>
   26ec8:	8a000417 	ldw	r8,16(r17)
   26ecc:	89000504 	addi	r4,r17,20
   26ed0:	a18007cc 	andi	r6,r20,31
   26ed4:	4211883a 	add	r8,r8,r8
   26ed8:	4211883a 	add	r8,r8,r8
   26edc:	2211883a 	add	r8,r4,r8
   26ee0:	30002326 	beq	r6,zero,26f70 <__lshift+0x128>
   26ee4:	02400804 	movi	r9,32
   26ee8:	4993c83a 	sub	r9,r9,r6
   26eec:	000b883a 	mov	r5,zero
   26ef0:	21c00017 	ldw	r7,0(r4)
   26ef4:	1815883a 	mov	r10,r3
   26ef8:	18c00104 	addi	r3,r3,4
   26efc:	398e983a 	sll	r7,r7,r6
   26f00:	21000104 	addi	r4,r4,4
   26f04:	394ab03a 	or	r5,r7,r5
   26f08:	197fff15 	stw	r5,-4(r3)
   26f0c:	217fff17 	ldw	r5,-4(r4)
   26f10:	2a4ad83a 	srl	r5,r5,r9
   26f14:	223ff636 	bltu	r4,r8,26ef0 <_gp+0xfffec038>
   26f18:	51400115 	stw	r5,4(r10)
   26f1c:	28001a1e 	bne	r5,zero,26f88 <__lshift+0x140>
   26f20:	843fffc4 	addi	r16,r16,-1
   26f24:	14000415 	stw	r16,16(r2)
   26f28:	88000826 	beq	r17,zero,26f4c <__lshift+0x104>
   26f2c:	89000117 	ldw	r4,4(r17)
   26f30:	90c01317 	ldw	r3,76(r18)
   26f34:	2109883a 	add	r4,r4,r4
   26f38:	2109883a 	add	r4,r4,r4
   26f3c:	1907883a 	add	r3,r3,r4
   26f40:	19000017 	ldw	r4,0(r3)
   26f44:	89000015 	stw	r4,0(r17)
   26f48:	1c400015 	stw	r17,0(r3)
   26f4c:	dfc00617 	ldw	ra,24(sp)
   26f50:	dd400517 	ldw	r21,20(sp)
   26f54:	dd000417 	ldw	r20,16(sp)
   26f58:	dcc00317 	ldw	r19,12(sp)
   26f5c:	dc800217 	ldw	r18,8(sp)
   26f60:	dc400117 	ldw	r17,4(sp)
   26f64:	dc000017 	ldw	r16,0(sp)
   26f68:	dec00704 	addi	sp,sp,28
   26f6c:	f800283a 	ret
   26f70:	21400017 	ldw	r5,0(r4)
   26f74:	18c00104 	addi	r3,r3,4
   26f78:	21000104 	addi	r4,r4,4
   26f7c:	197fff15 	stw	r5,-4(r3)
   26f80:	223ffb36 	bltu	r4,r8,26f70 <_gp+0xfffec0b8>
   26f84:	003fe606 	br	26f20 <_gp+0xfffec068>
   26f88:	9c000084 	addi	r16,r19,2
   26f8c:	003fe406 	br	26f20 <_gp+0xfffec068>

00026f90 <__mcmp>:
   26f90:	20800417 	ldw	r2,16(r4)
   26f94:	28c00417 	ldw	r3,16(r5)
   26f98:	10c5c83a 	sub	r2,r2,r3
   26f9c:	1000111e 	bne	r2,zero,26fe4 <__mcmp+0x54>
   26fa0:	18c7883a 	add	r3,r3,r3
   26fa4:	18c7883a 	add	r3,r3,r3
   26fa8:	21000504 	addi	r4,r4,20
   26fac:	29400504 	addi	r5,r5,20
   26fb0:	20c5883a 	add	r2,r4,r3
   26fb4:	28cb883a 	add	r5,r5,r3
   26fb8:	00000106 	br	26fc0 <__mcmp+0x30>
   26fbc:	20800a2e 	bgeu	r4,r2,26fe8 <__mcmp+0x58>
   26fc0:	10bfff04 	addi	r2,r2,-4
   26fc4:	297fff04 	addi	r5,r5,-4
   26fc8:	11800017 	ldw	r6,0(r2)
   26fcc:	28c00017 	ldw	r3,0(r5)
   26fd0:	30fffa26 	beq	r6,r3,26fbc <_gp+0xfffec104>
   26fd4:	30c00236 	bltu	r6,r3,26fe0 <__mcmp+0x50>
   26fd8:	00800044 	movi	r2,1
   26fdc:	f800283a 	ret
   26fe0:	00bfffc4 	movi	r2,-1
   26fe4:	f800283a 	ret
   26fe8:	0005883a 	mov	r2,zero
   26fec:	f800283a 	ret

00026ff0 <__mdiff>:
   26ff0:	28c00417 	ldw	r3,16(r5)
   26ff4:	30800417 	ldw	r2,16(r6)
   26ff8:	defffa04 	addi	sp,sp,-24
   26ffc:	dcc00315 	stw	r19,12(sp)
   27000:	dc800215 	stw	r18,8(sp)
   27004:	dfc00515 	stw	ra,20(sp)
   27008:	dd000415 	stw	r20,16(sp)
   2700c:	dc400115 	stw	r17,4(sp)
   27010:	dc000015 	stw	r16,0(sp)
   27014:	1887c83a 	sub	r3,r3,r2
   27018:	2825883a 	mov	r18,r5
   2701c:	3027883a 	mov	r19,r6
   27020:	1800141e 	bne	r3,zero,27074 <__mdiff+0x84>
   27024:	1085883a 	add	r2,r2,r2
   27028:	1085883a 	add	r2,r2,r2
   2702c:	2a000504 	addi	r8,r5,20
   27030:	34000504 	addi	r16,r6,20
   27034:	4087883a 	add	r3,r8,r2
   27038:	8085883a 	add	r2,r16,r2
   2703c:	00000106 	br	27044 <__mdiff+0x54>
   27040:	40c0592e 	bgeu	r8,r3,271a8 <__mdiff+0x1b8>
   27044:	18ffff04 	addi	r3,r3,-4
   27048:	10bfff04 	addi	r2,r2,-4
   2704c:	19c00017 	ldw	r7,0(r3)
   27050:	11400017 	ldw	r5,0(r2)
   27054:	397ffa26 	beq	r7,r5,27040 <_gp+0xfffec188>
   27058:	3940592e 	bgeu	r7,r5,271c0 <__mdiff+0x1d0>
   2705c:	9005883a 	mov	r2,r18
   27060:	4023883a 	mov	r17,r8
   27064:	9825883a 	mov	r18,r19
   27068:	05000044 	movi	r20,1
   2706c:	1027883a 	mov	r19,r2
   27070:	00000406 	br	27084 <__mdiff+0x94>
   27074:	18005616 	blt	r3,zero,271d0 <__mdiff+0x1e0>
   27078:	34400504 	addi	r17,r6,20
   2707c:	2c000504 	addi	r16,r5,20
   27080:	0029883a 	mov	r20,zero
   27084:	91400117 	ldw	r5,4(r18)
   27088:	002660c0 	call	2660c <_Balloc>
   2708c:	92400417 	ldw	r9,16(r18)
   27090:	9b000417 	ldw	r12,16(r19)
   27094:	12c00504 	addi	r11,r2,20
   27098:	4a51883a 	add	r8,r9,r9
   2709c:	6319883a 	add	r12,r12,r12
   270a0:	4211883a 	add	r8,r8,r8
   270a4:	6319883a 	add	r12,r12,r12
   270a8:	15000315 	stw	r20,12(r2)
   270ac:	8211883a 	add	r8,r16,r8
   270b0:	8b19883a 	add	r12,r17,r12
   270b4:	0007883a 	mov	r3,zero
   270b8:	81400017 	ldw	r5,0(r16)
   270bc:	89c00017 	ldw	r7,0(r17)
   270c0:	59800104 	addi	r6,r11,4
   270c4:	293fffcc 	andi	r4,r5,65535
   270c8:	20c7883a 	add	r3,r4,r3
   270cc:	393fffcc 	andi	r4,r7,65535
   270d0:	1909c83a 	sub	r4,r3,r4
   270d4:	280ad43a 	srli	r5,r5,16
   270d8:	380ed43a 	srli	r7,r7,16
   270dc:	2007d43a 	srai	r3,r4,16
   270e0:	213fffcc 	andi	r4,r4,65535
   270e4:	29cbc83a 	sub	r5,r5,r7
   270e8:	28c7883a 	add	r3,r5,r3
   270ec:	180a943a 	slli	r5,r3,16
   270f0:	8c400104 	addi	r17,r17,4
   270f4:	84000104 	addi	r16,r16,4
   270f8:	2908b03a 	or	r4,r5,r4
   270fc:	59000015 	stw	r4,0(r11)
   27100:	1807d43a 	srai	r3,r3,16
   27104:	3015883a 	mov	r10,r6
   27108:	3017883a 	mov	r11,r6
   2710c:	8b3fea36 	bltu	r17,r12,270b8 <_gp+0xfffec200>
   27110:	8200162e 	bgeu	r16,r8,2716c <__mdiff+0x17c>
   27114:	8017883a 	mov	r11,r16
   27118:	59400017 	ldw	r5,0(r11)
   2711c:	31800104 	addi	r6,r6,4
   27120:	5ac00104 	addi	r11,r11,4
   27124:	293fffcc 	andi	r4,r5,65535
   27128:	20c7883a 	add	r3,r4,r3
   2712c:	280ed43a 	srli	r7,r5,16
   27130:	180bd43a 	srai	r5,r3,16
   27134:	193fffcc 	andi	r4,r3,65535
   27138:	3947883a 	add	r3,r7,r5
   2713c:	180a943a 	slli	r5,r3,16
   27140:	1807d43a 	srai	r3,r3,16
   27144:	2908b03a 	or	r4,r5,r4
   27148:	313fff15 	stw	r4,-4(r6)
   2714c:	5a3ff236 	bltu	r11,r8,27118 <_gp+0xfffec260>
   27150:	0406303a 	nor	r3,zero,r16
   27154:	1a07883a 	add	r3,r3,r8
   27158:	1806d0ba 	srli	r3,r3,2
   2715c:	18c00044 	addi	r3,r3,1
   27160:	18c7883a 	add	r3,r3,r3
   27164:	18c7883a 	add	r3,r3,r3
   27168:	50d5883a 	add	r10,r10,r3
   2716c:	50ffff04 	addi	r3,r10,-4
   27170:	2000041e 	bne	r4,zero,27184 <__mdiff+0x194>
   27174:	18ffff04 	addi	r3,r3,-4
   27178:	19000017 	ldw	r4,0(r3)
   2717c:	4a7fffc4 	addi	r9,r9,-1
   27180:	203ffc26 	beq	r4,zero,27174 <_gp+0xfffec2bc>
   27184:	12400415 	stw	r9,16(r2)
   27188:	dfc00517 	ldw	ra,20(sp)
   2718c:	dd000417 	ldw	r20,16(sp)
   27190:	dcc00317 	ldw	r19,12(sp)
   27194:	dc800217 	ldw	r18,8(sp)
   27198:	dc400117 	ldw	r17,4(sp)
   2719c:	dc000017 	ldw	r16,0(sp)
   271a0:	dec00604 	addi	sp,sp,24
   271a4:	f800283a 	ret
   271a8:	000b883a 	mov	r5,zero
   271ac:	002660c0 	call	2660c <_Balloc>
   271b0:	00c00044 	movi	r3,1
   271b4:	10c00415 	stw	r3,16(r2)
   271b8:	10000515 	stw	zero,20(r2)
   271bc:	003ff206 	br	27188 <_gp+0xfffec2d0>
   271c0:	8023883a 	mov	r17,r16
   271c4:	0029883a 	mov	r20,zero
   271c8:	4021883a 	mov	r16,r8
   271cc:	003fad06 	br	27084 <_gp+0xfffec1cc>
   271d0:	9005883a 	mov	r2,r18
   271d4:	94400504 	addi	r17,r18,20
   271d8:	9c000504 	addi	r16,r19,20
   271dc:	9825883a 	mov	r18,r19
   271e0:	05000044 	movi	r20,1
   271e4:	1027883a 	mov	r19,r2
   271e8:	003fa606 	br	27084 <_gp+0xfffec1cc>

000271ec <__ulp>:
   271ec:	295ffc2c 	andhi	r5,r5,32752
   271f0:	00bf3034 	movhi	r2,64704
   271f4:	2887883a 	add	r3,r5,r2
   271f8:	00c0020e 	bge	zero,r3,27204 <__ulp+0x18>
   271fc:	0005883a 	mov	r2,zero
   27200:	f800283a 	ret
   27204:	00c7c83a 	sub	r3,zero,r3
   27208:	1807d53a 	srai	r3,r3,20
   2720c:	008004c4 	movi	r2,19
   27210:	10c00b0e 	bge	r2,r3,27240 <__ulp+0x54>
   27214:	18bffb04 	addi	r2,r3,-20
   27218:	01000784 	movi	r4,30
   2721c:	0007883a 	mov	r3,zero
   27220:	20800516 	blt	r4,r2,27238 <__ulp+0x4c>
   27224:	010007c4 	movi	r4,31
   27228:	2089c83a 	sub	r4,r4,r2
   2722c:	00800044 	movi	r2,1
   27230:	1104983a 	sll	r2,r2,r4
   27234:	f800283a 	ret
   27238:	00800044 	movi	r2,1
   2723c:	f800283a 	ret
   27240:	01400234 	movhi	r5,8
   27244:	28c7d83a 	sra	r3,r5,r3
   27248:	0005883a 	mov	r2,zero
   2724c:	f800283a 	ret

00027250 <__b2d>:
   27250:	defffa04 	addi	sp,sp,-24
   27254:	dc000015 	stw	r16,0(sp)
   27258:	24000417 	ldw	r16,16(r4)
   2725c:	dc400115 	stw	r17,4(sp)
   27260:	24400504 	addi	r17,r4,20
   27264:	8421883a 	add	r16,r16,r16
   27268:	8421883a 	add	r16,r16,r16
   2726c:	8c21883a 	add	r16,r17,r16
   27270:	dc800215 	stw	r18,8(sp)
   27274:	84bfff17 	ldw	r18,-4(r16)
   27278:	dd000415 	stw	r20,16(sp)
   2727c:	dcc00315 	stw	r19,12(sp)
   27280:	9009883a 	mov	r4,r18
   27284:	2829883a 	mov	r20,r5
   27288:	dfc00515 	stw	ra,20(sp)
   2728c:	00269280 	call	26928 <__hi0bits>
   27290:	00c00804 	movi	r3,32
   27294:	1889c83a 	sub	r4,r3,r2
   27298:	a1000015 	stw	r4,0(r20)
   2729c:	01000284 	movi	r4,10
   272a0:	84ffff04 	addi	r19,r16,-4
   272a4:	20801216 	blt	r4,r2,272f0 <__b2d+0xa0>
   272a8:	018002c4 	movi	r6,11
   272ac:	308dc83a 	sub	r6,r6,r2
   272b0:	9186d83a 	srl	r3,r18,r6
   272b4:	18cffc34 	orhi	r3,r3,16368
   272b8:	8cc0212e 	bgeu	r17,r19,27340 <__b2d+0xf0>
   272bc:	813ffe17 	ldw	r4,-8(r16)
   272c0:	218cd83a 	srl	r6,r4,r6
   272c4:	10800544 	addi	r2,r2,21
   272c8:	9084983a 	sll	r2,r18,r2
   272cc:	1184b03a 	or	r2,r2,r6
   272d0:	dfc00517 	ldw	ra,20(sp)
   272d4:	dd000417 	ldw	r20,16(sp)
   272d8:	dcc00317 	ldw	r19,12(sp)
   272dc:	dc800217 	ldw	r18,8(sp)
   272e0:	dc400117 	ldw	r17,4(sp)
   272e4:	dc000017 	ldw	r16,0(sp)
   272e8:	dec00604 	addi	sp,sp,24
   272ec:	f800283a 	ret
   272f0:	8cc00f2e 	bgeu	r17,r19,27330 <__b2d+0xe0>
   272f4:	117ffd44 	addi	r5,r2,-11
   272f8:	80bffe17 	ldw	r2,-8(r16)
   272fc:	28000e26 	beq	r5,zero,27338 <__b2d+0xe8>
   27300:	1949c83a 	sub	r4,r3,r5
   27304:	9164983a 	sll	r18,r18,r5
   27308:	1106d83a 	srl	r3,r2,r4
   2730c:	81bffe04 	addi	r6,r16,-8
   27310:	948ffc34 	orhi	r18,r18,16368
   27314:	90c6b03a 	or	r3,r18,r3
   27318:	89800e2e 	bgeu	r17,r6,27354 <__b2d+0x104>
   2731c:	81bffd17 	ldw	r6,-12(r16)
   27320:	1144983a 	sll	r2,r2,r5
   27324:	310ad83a 	srl	r5,r6,r4
   27328:	2884b03a 	or	r2,r5,r2
   2732c:	003fe806 	br	272d0 <_gp+0xfffec418>
   27330:	10bffd44 	addi	r2,r2,-11
   27334:	1000041e 	bne	r2,zero,27348 <__b2d+0xf8>
   27338:	90cffc34 	orhi	r3,r18,16368
   2733c:	003fe406 	br	272d0 <_gp+0xfffec418>
   27340:	000d883a 	mov	r6,zero
   27344:	003fdf06 	br	272c4 <_gp+0xfffec40c>
   27348:	90a4983a 	sll	r18,r18,r2
   2734c:	0005883a 	mov	r2,zero
   27350:	003ff906 	br	27338 <_gp+0xfffec480>
   27354:	1144983a 	sll	r2,r2,r5
   27358:	003fdd06 	br	272d0 <_gp+0xfffec418>

0002735c <__d2b>:
   2735c:	defff804 	addi	sp,sp,-32
   27360:	dc000215 	stw	r16,8(sp)
   27364:	3021883a 	mov	r16,r6
   27368:	dc400315 	stw	r17,12(sp)
   2736c:	8022907a 	slli	r17,r16,1
   27370:	dd000615 	stw	r20,24(sp)
   27374:	2829883a 	mov	r20,r5
   27378:	01400044 	movi	r5,1
   2737c:	dcc00515 	stw	r19,20(sp)
   27380:	dc800415 	stw	r18,16(sp)
   27384:	dfc00715 	stw	ra,28(sp)
   27388:	3825883a 	mov	r18,r7
   2738c:	8822d57a 	srli	r17,r17,21
   27390:	002660c0 	call	2660c <_Balloc>
   27394:	1027883a 	mov	r19,r2
   27398:	00800434 	movhi	r2,16
   2739c:	10bfffc4 	addi	r2,r2,-1
   273a0:	808c703a 	and	r6,r16,r2
   273a4:	88000126 	beq	r17,zero,273ac <__d2b+0x50>
   273a8:	31800434 	orhi	r6,r6,16
   273ac:	d9800015 	stw	r6,0(sp)
   273b0:	a0002426 	beq	r20,zero,27444 <__d2b+0xe8>
   273b4:	d9000104 	addi	r4,sp,4
   273b8:	dd000115 	stw	r20,4(sp)
   273bc:	00269900 	call	26990 <__lo0bits>
   273c0:	d8c00017 	ldw	r3,0(sp)
   273c4:	10002f1e 	bne	r2,zero,27484 <__d2b+0x128>
   273c8:	d9000117 	ldw	r4,4(sp)
   273cc:	99000515 	stw	r4,20(r19)
   273d0:	1821003a 	cmpeq	r16,r3,zero
   273d4:	01000084 	movi	r4,2
   273d8:	2421c83a 	sub	r16,r4,r16
   273dc:	98c00615 	stw	r3,24(r19)
   273e0:	9c000415 	stw	r16,16(r19)
   273e4:	88001f1e 	bne	r17,zero,27464 <__d2b+0x108>
   273e8:	10bef384 	addi	r2,r2,-1074
   273ec:	90800015 	stw	r2,0(r18)
   273f0:	00900034 	movhi	r2,16384
   273f4:	10bfffc4 	addi	r2,r2,-1
   273f8:	8085883a 	add	r2,r16,r2
   273fc:	1085883a 	add	r2,r2,r2
   27400:	1085883a 	add	r2,r2,r2
   27404:	9885883a 	add	r2,r19,r2
   27408:	11000517 	ldw	r4,20(r2)
   2740c:	8020917a 	slli	r16,r16,5
   27410:	00269280 	call	26928 <__hi0bits>
   27414:	d8c00817 	ldw	r3,32(sp)
   27418:	8085c83a 	sub	r2,r16,r2
   2741c:	18800015 	stw	r2,0(r3)
   27420:	9805883a 	mov	r2,r19
   27424:	dfc00717 	ldw	ra,28(sp)
   27428:	dd000617 	ldw	r20,24(sp)
   2742c:	dcc00517 	ldw	r19,20(sp)
   27430:	dc800417 	ldw	r18,16(sp)
   27434:	dc400317 	ldw	r17,12(sp)
   27438:	dc000217 	ldw	r16,8(sp)
   2743c:	dec00804 	addi	sp,sp,32
   27440:	f800283a 	ret
   27444:	d809883a 	mov	r4,sp
   27448:	00269900 	call	26990 <__lo0bits>
   2744c:	d8c00017 	ldw	r3,0(sp)
   27450:	04000044 	movi	r16,1
   27454:	9c000415 	stw	r16,16(r19)
   27458:	98c00515 	stw	r3,20(r19)
   2745c:	10800804 	addi	r2,r2,32
   27460:	883fe126 	beq	r17,zero,273e8 <_gp+0xfffec530>
   27464:	00c00d44 	movi	r3,53
   27468:	8c7ef344 	addi	r17,r17,-1075
   2746c:	88a3883a 	add	r17,r17,r2
   27470:	1885c83a 	sub	r2,r3,r2
   27474:	d8c00817 	ldw	r3,32(sp)
   27478:	94400015 	stw	r17,0(r18)
   2747c:	18800015 	stw	r2,0(r3)
   27480:	003fe706 	br	27420 <_gp+0xfffec568>
   27484:	01000804 	movi	r4,32
   27488:	2089c83a 	sub	r4,r4,r2
   2748c:	1908983a 	sll	r4,r3,r4
   27490:	d9400117 	ldw	r5,4(sp)
   27494:	1886d83a 	srl	r3,r3,r2
   27498:	2148b03a 	or	r4,r4,r5
   2749c:	99000515 	stw	r4,20(r19)
   274a0:	d8c00015 	stw	r3,0(sp)
   274a4:	003fca06 	br	273d0 <_gp+0xfffec518>

000274a8 <__ratio>:
   274a8:	defff904 	addi	sp,sp,-28
   274ac:	dc400315 	stw	r17,12(sp)
   274b0:	2823883a 	mov	r17,r5
   274b4:	d9400104 	addi	r5,sp,4
   274b8:	dfc00615 	stw	ra,24(sp)
   274bc:	dcc00515 	stw	r19,20(sp)
   274c0:	dc800415 	stw	r18,16(sp)
   274c4:	2027883a 	mov	r19,r4
   274c8:	dc000215 	stw	r16,8(sp)
   274cc:	00272500 	call	27250 <__b2d>
   274d0:	d80b883a 	mov	r5,sp
   274d4:	8809883a 	mov	r4,r17
   274d8:	1025883a 	mov	r18,r2
   274dc:	1821883a 	mov	r16,r3
   274e0:	00272500 	call	27250 <__b2d>
   274e4:	8a000417 	ldw	r8,16(r17)
   274e8:	99000417 	ldw	r4,16(r19)
   274ec:	d9400117 	ldw	r5,4(sp)
   274f0:	2209c83a 	sub	r4,r4,r8
   274f4:	2010917a 	slli	r8,r4,5
   274f8:	d9000017 	ldw	r4,0(sp)
   274fc:	2909c83a 	sub	r4,r5,r4
   27500:	4109883a 	add	r4,r8,r4
   27504:	01000e0e 	bge	zero,r4,27540 <__ratio+0x98>
   27508:	2008953a 	slli	r4,r4,20
   2750c:	2421883a 	add	r16,r4,r16
   27510:	100d883a 	mov	r6,r2
   27514:	180f883a 	mov	r7,r3
   27518:	9009883a 	mov	r4,r18
   2751c:	800b883a 	mov	r5,r16
   27520:	002b56c0 	call	2b56c <__divdf3>
   27524:	dfc00617 	ldw	ra,24(sp)
   27528:	dcc00517 	ldw	r19,20(sp)
   2752c:	dc800417 	ldw	r18,16(sp)
   27530:	dc400317 	ldw	r17,12(sp)
   27534:	dc000217 	ldw	r16,8(sp)
   27538:	dec00704 	addi	sp,sp,28
   2753c:	f800283a 	ret
   27540:	2008953a 	slli	r4,r4,20
   27544:	1907c83a 	sub	r3,r3,r4
   27548:	003ff106 	br	27510 <_gp+0xfffec658>

0002754c <_mprec_log10>:
   2754c:	defffe04 	addi	sp,sp,-8
   27550:	dc000015 	stw	r16,0(sp)
   27554:	dfc00115 	stw	ra,4(sp)
   27558:	008005c4 	movi	r2,23
   2755c:	2021883a 	mov	r16,r4
   27560:	11000d0e 	bge	r2,r4,27598 <_mprec_log10+0x4c>
   27564:	0005883a 	mov	r2,zero
   27568:	00cffc34 	movhi	r3,16368
   2756c:	843fffc4 	addi	r16,r16,-1
   27570:	000d883a 	mov	r6,zero
   27574:	01d00934 	movhi	r7,16420
   27578:	1009883a 	mov	r4,r2
   2757c:	180b883a 	mov	r5,r3
   27580:	002c1940 	call	2c194 <__muldf3>
   27584:	803ff91e 	bne	r16,zero,2756c <_gp+0xfffec6b4>
   27588:	dfc00117 	ldw	ra,4(sp)
   2758c:	dc000017 	ldw	r16,0(sp)
   27590:	dec00204 	addi	sp,sp,8
   27594:	f800283a 	ret
   27598:	202090fa 	slli	r16,r4,3
   2759c:	008000f4 	movhi	r2,3
   275a0:	10839304 	addi	r2,r2,3660
   275a4:	1421883a 	add	r16,r2,r16
   275a8:	80800017 	ldw	r2,0(r16)
   275ac:	80c00117 	ldw	r3,4(r16)
   275b0:	dfc00117 	ldw	ra,4(sp)
   275b4:	dc000017 	ldw	r16,0(sp)
   275b8:	dec00204 	addi	sp,sp,8
   275bc:	f800283a 	ret

000275c0 <__copybits>:
   275c0:	297fffc4 	addi	r5,r5,-1
   275c4:	280fd17a 	srai	r7,r5,5
   275c8:	30c00417 	ldw	r3,16(r6)
   275cc:	30800504 	addi	r2,r6,20
   275d0:	39c00044 	addi	r7,r7,1
   275d4:	18c7883a 	add	r3,r3,r3
   275d8:	39cf883a 	add	r7,r7,r7
   275dc:	18c7883a 	add	r3,r3,r3
   275e0:	39cf883a 	add	r7,r7,r7
   275e4:	10c7883a 	add	r3,r2,r3
   275e8:	21cf883a 	add	r7,r4,r7
   275ec:	10c00d2e 	bgeu	r2,r3,27624 <__copybits+0x64>
   275f0:	200b883a 	mov	r5,r4
   275f4:	12000017 	ldw	r8,0(r2)
   275f8:	29400104 	addi	r5,r5,4
   275fc:	10800104 	addi	r2,r2,4
   27600:	2a3fff15 	stw	r8,-4(r5)
   27604:	10fffb36 	bltu	r2,r3,275f4 <_gp+0xfffec73c>
   27608:	1985c83a 	sub	r2,r3,r6
   2760c:	10bffac4 	addi	r2,r2,-21
   27610:	1004d0ba 	srli	r2,r2,2
   27614:	10800044 	addi	r2,r2,1
   27618:	1085883a 	add	r2,r2,r2
   2761c:	1085883a 	add	r2,r2,r2
   27620:	2089883a 	add	r4,r4,r2
   27624:	21c0032e 	bgeu	r4,r7,27634 <__copybits+0x74>
   27628:	20000015 	stw	zero,0(r4)
   2762c:	21000104 	addi	r4,r4,4
   27630:	21fffd36 	bltu	r4,r7,27628 <_gp+0xfffec770>
   27634:	f800283a 	ret

00027638 <__any_on>:
   27638:	20c00417 	ldw	r3,16(r4)
   2763c:	2805d17a 	srai	r2,r5,5
   27640:	21000504 	addi	r4,r4,20
   27644:	18800d0e 	bge	r3,r2,2767c <__any_on+0x44>
   27648:	18c7883a 	add	r3,r3,r3
   2764c:	18c7883a 	add	r3,r3,r3
   27650:	20c7883a 	add	r3,r4,r3
   27654:	20c0192e 	bgeu	r4,r3,276bc <__any_on+0x84>
   27658:	18bfff17 	ldw	r2,-4(r3)
   2765c:	18ffff04 	addi	r3,r3,-4
   27660:	1000041e 	bne	r2,zero,27674 <__any_on+0x3c>
   27664:	20c0142e 	bgeu	r4,r3,276b8 <__any_on+0x80>
   27668:	18ffff04 	addi	r3,r3,-4
   2766c:	19400017 	ldw	r5,0(r3)
   27670:	283ffc26 	beq	r5,zero,27664 <_gp+0xfffec7ac>
   27674:	00800044 	movi	r2,1
   27678:	f800283a 	ret
   2767c:	10c00a0e 	bge	r2,r3,276a8 <__any_on+0x70>
   27680:	1085883a 	add	r2,r2,r2
   27684:	1085883a 	add	r2,r2,r2
   27688:	294007cc 	andi	r5,r5,31
   2768c:	2087883a 	add	r3,r4,r2
   27690:	283ff026 	beq	r5,zero,27654 <_gp+0xfffec79c>
   27694:	19800017 	ldw	r6,0(r3)
   27698:	3144d83a 	srl	r2,r6,r5
   2769c:	114a983a 	sll	r5,r2,r5
   276a0:	317ff41e 	bne	r6,r5,27674 <_gp+0xfffec7bc>
   276a4:	003feb06 	br	27654 <_gp+0xfffec79c>
   276a8:	1085883a 	add	r2,r2,r2
   276ac:	1085883a 	add	r2,r2,r2
   276b0:	2087883a 	add	r3,r4,r2
   276b4:	003fe706 	br	27654 <_gp+0xfffec79c>
   276b8:	f800283a 	ret
   276bc:	0005883a 	mov	r2,zero
   276c0:	f800283a 	ret

000276c4 <_realloc_r>:
   276c4:	defff604 	addi	sp,sp,-40
   276c8:	dc800215 	stw	r18,8(sp)
   276cc:	dfc00915 	stw	ra,36(sp)
   276d0:	df000815 	stw	fp,32(sp)
   276d4:	ddc00715 	stw	r23,28(sp)
   276d8:	dd800615 	stw	r22,24(sp)
   276dc:	dd400515 	stw	r21,20(sp)
   276e0:	dd000415 	stw	r20,16(sp)
   276e4:	dcc00315 	stw	r19,12(sp)
   276e8:	dc400115 	stw	r17,4(sp)
   276ec:	dc000015 	stw	r16,0(sp)
   276f0:	3025883a 	mov	r18,r6
   276f4:	2800b726 	beq	r5,zero,279d4 <_realloc_r+0x310>
   276f8:	282b883a 	mov	r21,r5
   276fc:	2029883a 	mov	r20,r4
   27700:	002db000 	call	2db00 <__malloc_lock>
   27704:	a8bfff17 	ldw	r2,-4(r21)
   27708:	043fff04 	movi	r16,-4
   2770c:	90c002c4 	addi	r3,r18,11
   27710:	01000584 	movi	r4,22
   27714:	acfffe04 	addi	r19,r21,-8
   27718:	1420703a 	and	r16,r2,r16
   2771c:	20c0332e 	bgeu	r4,r3,277ec <_realloc_r+0x128>
   27720:	047ffe04 	movi	r17,-8
   27724:	1c62703a 	and	r17,r3,r17
   27728:	8807883a 	mov	r3,r17
   2772c:	88005816 	blt	r17,zero,27890 <_realloc_r+0x1cc>
   27730:	8c805736 	bltu	r17,r18,27890 <_realloc_r+0x1cc>
   27734:	80c0300e 	bge	r16,r3,277f8 <_realloc_r+0x134>
   27738:	070000f4 	movhi	fp,3
   2773c:	e705e204 	addi	fp,fp,6024
   27740:	e1c00217 	ldw	r7,8(fp)
   27744:	9c09883a 	add	r4,r19,r16
   27748:	22000117 	ldw	r8,4(r4)
   2774c:	21c06326 	beq	r4,r7,278dc <_realloc_r+0x218>
   27750:	017fff84 	movi	r5,-2
   27754:	414a703a 	and	r5,r8,r5
   27758:	214b883a 	add	r5,r4,r5
   2775c:	29800117 	ldw	r6,4(r5)
   27760:	3180004c 	andi	r6,r6,1
   27764:	30003f26 	beq	r6,zero,27864 <_realloc_r+0x1a0>
   27768:	1080004c 	andi	r2,r2,1
   2776c:	10008326 	beq	r2,zero,2797c <_realloc_r+0x2b8>
   27770:	900b883a 	mov	r5,r18
   27774:	a009883a 	mov	r4,r20
   27778:	00259500 	call	25950 <_malloc_r>
   2777c:	1025883a 	mov	r18,r2
   27780:	10011e26 	beq	r2,zero,27bfc <_realloc_r+0x538>
   27784:	a93fff17 	ldw	r4,-4(r21)
   27788:	10fffe04 	addi	r3,r2,-8
   2778c:	00bfff84 	movi	r2,-2
   27790:	2084703a 	and	r2,r4,r2
   27794:	9885883a 	add	r2,r19,r2
   27798:	1880ee26 	beq	r3,r2,27b54 <_realloc_r+0x490>
   2779c:	81bfff04 	addi	r6,r16,-4
   277a0:	00800904 	movi	r2,36
   277a4:	1180b836 	bltu	r2,r6,27a88 <_realloc_r+0x3c4>
   277a8:	00c004c4 	movi	r3,19
   277ac:	19809636 	bltu	r3,r6,27a08 <_realloc_r+0x344>
   277b0:	9005883a 	mov	r2,r18
   277b4:	a807883a 	mov	r3,r21
   277b8:	19000017 	ldw	r4,0(r3)
   277bc:	11000015 	stw	r4,0(r2)
   277c0:	19000117 	ldw	r4,4(r3)
   277c4:	11000115 	stw	r4,4(r2)
   277c8:	18c00217 	ldw	r3,8(r3)
   277cc:	10c00215 	stw	r3,8(r2)
   277d0:	a80b883a 	mov	r5,r21
   277d4:	a009883a 	mov	r4,r20
   277d8:	0024d580 	call	24d58 <_free_r>
   277dc:	a009883a 	mov	r4,r20
   277e0:	002db240 	call	2db24 <__malloc_unlock>
   277e4:	9005883a 	mov	r2,r18
   277e8:	00001206 	br	27834 <_realloc_r+0x170>
   277ec:	00c00404 	movi	r3,16
   277f0:	1823883a 	mov	r17,r3
   277f4:	003fce06 	br	27730 <_gp+0xfffec878>
   277f8:	a825883a 	mov	r18,r21
   277fc:	8445c83a 	sub	r2,r16,r17
   27800:	00c003c4 	movi	r3,15
   27804:	18802636 	bltu	r3,r2,278a0 <_realloc_r+0x1dc>
   27808:	99800117 	ldw	r6,4(r19)
   2780c:	9c07883a 	add	r3,r19,r16
   27810:	3180004c 	andi	r6,r6,1
   27814:	3420b03a 	or	r16,r6,r16
   27818:	9c000115 	stw	r16,4(r19)
   2781c:	18800117 	ldw	r2,4(r3)
   27820:	10800054 	ori	r2,r2,1
   27824:	18800115 	stw	r2,4(r3)
   27828:	a009883a 	mov	r4,r20
   2782c:	002db240 	call	2db24 <__malloc_unlock>
   27830:	9005883a 	mov	r2,r18
   27834:	dfc00917 	ldw	ra,36(sp)
   27838:	df000817 	ldw	fp,32(sp)
   2783c:	ddc00717 	ldw	r23,28(sp)
   27840:	dd800617 	ldw	r22,24(sp)
   27844:	dd400517 	ldw	r21,20(sp)
   27848:	dd000417 	ldw	r20,16(sp)
   2784c:	dcc00317 	ldw	r19,12(sp)
   27850:	dc800217 	ldw	r18,8(sp)
   27854:	dc400117 	ldw	r17,4(sp)
   27858:	dc000017 	ldw	r16,0(sp)
   2785c:	dec00a04 	addi	sp,sp,40
   27860:	f800283a 	ret
   27864:	017fff04 	movi	r5,-4
   27868:	414a703a 	and	r5,r8,r5
   2786c:	814d883a 	add	r6,r16,r5
   27870:	30c01f16 	blt	r6,r3,278f0 <_realloc_r+0x22c>
   27874:	20800317 	ldw	r2,12(r4)
   27878:	20c00217 	ldw	r3,8(r4)
   2787c:	a825883a 	mov	r18,r21
   27880:	3021883a 	mov	r16,r6
   27884:	18800315 	stw	r2,12(r3)
   27888:	10c00215 	stw	r3,8(r2)
   2788c:	003fdb06 	br	277fc <_gp+0xfffec944>
   27890:	00800304 	movi	r2,12
   27894:	a0800015 	stw	r2,0(r20)
   27898:	0005883a 	mov	r2,zero
   2789c:	003fe506 	br	27834 <_gp+0xfffec97c>
   278a0:	98c00117 	ldw	r3,4(r19)
   278a4:	9c4b883a 	add	r5,r19,r17
   278a8:	11000054 	ori	r4,r2,1
   278ac:	18c0004c 	andi	r3,r3,1
   278b0:	1c62b03a 	or	r17,r3,r17
   278b4:	9c400115 	stw	r17,4(r19)
   278b8:	29000115 	stw	r4,4(r5)
   278bc:	2885883a 	add	r2,r5,r2
   278c0:	10c00117 	ldw	r3,4(r2)
   278c4:	29400204 	addi	r5,r5,8
   278c8:	a009883a 	mov	r4,r20
   278cc:	18c00054 	ori	r3,r3,1
   278d0:	10c00115 	stw	r3,4(r2)
   278d4:	0024d580 	call	24d58 <_free_r>
   278d8:	003fd306 	br	27828 <_gp+0xfffec970>
   278dc:	017fff04 	movi	r5,-4
   278e0:	414a703a 	and	r5,r8,r5
   278e4:	89800404 	addi	r6,r17,16
   278e8:	8151883a 	add	r8,r16,r5
   278ec:	4180590e 	bge	r8,r6,27a54 <_realloc_r+0x390>
   278f0:	1080004c 	andi	r2,r2,1
   278f4:	103f9e1e 	bne	r2,zero,27770 <_gp+0xfffec8b8>
   278f8:	adbffe17 	ldw	r22,-8(r21)
   278fc:	00bfff04 	movi	r2,-4
   27900:	9dadc83a 	sub	r22,r19,r22
   27904:	b1800117 	ldw	r6,4(r22)
   27908:	3084703a 	and	r2,r6,r2
   2790c:	20002026 	beq	r4,zero,27990 <_realloc_r+0x2cc>
   27910:	80af883a 	add	r23,r16,r2
   27914:	b96f883a 	add	r23,r23,r5
   27918:	21c05f26 	beq	r4,r7,27a98 <_realloc_r+0x3d4>
   2791c:	b8c01c16 	blt	r23,r3,27990 <_realloc_r+0x2cc>
   27920:	20800317 	ldw	r2,12(r4)
   27924:	20c00217 	ldw	r3,8(r4)
   27928:	81bfff04 	addi	r6,r16,-4
   2792c:	01000904 	movi	r4,36
   27930:	18800315 	stw	r2,12(r3)
   27934:	10c00215 	stw	r3,8(r2)
   27938:	b0c00217 	ldw	r3,8(r22)
   2793c:	b0800317 	ldw	r2,12(r22)
   27940:	b4800204 	addi	r18,r22,8
   27944:	18800315 	stw	r2,12(r3)
   27948:	10c00215 	stw	r3,8(r2)
   2794c:	21801b36 	bltu	r4,r6,279bc <_realloc_r+0x2f8>
   27950:	008004c4 	movi	r2,19
   27954:	1180352e 	bgeu	r2,r6,27a2c <_realloc_r+0x368>
   27958:	a8800017 	ldw	r2,0(r21)
   2795c:	b0800215 	stw	r2,8(r22)
   27960:	a8800117 	ldw	r2,4(r21)
   27964:	b0800315 	stw	r2,12(r22)
   27968:	008006c4 	movi	r2,27
   2796c:	11807f36 	bltu	r2,r6,27b6c <_realloc_r+0x4a8>
   27970:	b0800404 	addi	r2,r22,16
   27974:	ad400204 	addi	r21,r21,8
   27978:	00002d06 	br	27a30 <_realloc_r+0x36c>
   2797c:	adbffe17 	ldw	r22,-8(r21)
   27980:	00bfff04 	movi	r2,-4
   27984:	9dadc83a 	sub	r22,r19,r22
   27988:	b1000117 	ldw	r4,4(r22)
   2798c:	2084703a 	and	r2,r4,r2
   27990:	b03f7726 	beq	r22,zero,27770 <_gp+0xfffec8b8>
   27994:	80af883a 	add	r23,r16,r2
   27998:	b8ff7516 	blt	r23,r3,27770 <_gp+0xfffec8b8>
   2799c:	b0800317 	ldw	r2,12(r22)
   279a0:	b0c00217 	ldw	r3,8(r22)
   279a4:	81bfff04 	addi	r6,r16,-4
   279a8:	01000904 	movi	r4,36
   279ac:	18800315 	stw	r2,12(r3)
   279b0:	10c00215 	stw	r3,8(r2)
   279b4:	b4800204 	addi	r18,r22,8
   279b8:	21bfe52e 	bgeu	r4,r6,27950 <_gp+0xfffeca98>
   279bc:	a80b883a 	mov	r5,r21
   279c0:	9009883a 	mov	r4,r18
   279c4:	00263880 	call	26388 <memmove>
   279c8:	b821883a 	mov	r16,r23
   279cc:	b027883a 	mov	r19,r22
   279d0:	003f8a06 	br	277fc <_gp+0xfffec944>
   279d4:	300b883a 	mov	r5,r6
   279d8:	dfc00917 	ldw	ra,36(sp)
   279dc:	df000817 	ldw	fp,32(sp)
   279e0:	ddc00717 	ldw	r23,28(sp)
   279e4:	dd800617 	ldw	r22,24(sp)
   279e8:	dd400517 	ldw	r21,20(sp)
   279ec:	dd000417 	ldw	r20,16(sp)
   279f0:	dcc00317 	ldw	r19,12(sp)
   279f4:	dc800217 	ldw	r18,8(sp)
   279f8:	dc400117 	ldw	r17,4(sp)
   279fc:	dc000017 	ldw	r16,0(sp)
   27a00:	dec00a04 	addi	sp,sp,40
   27a04:	00259501 	jmpi	25950 <_malloc_r>
   27a08:	a8c00017 	ldw	r3,0(r21)
   27a0c:	90c00015 	stw	r3,0(r18)
   27a10:	a8c00117 	ldw	r3,4(r21)
   27a14:	90c00115 	stw	r3,4(r18)
   27a18:	00c006c4 	movi	r3,27
   27a1c:	19804536 	bltu	r3,r6,27b34 <_realloc_r+0x470>
   27a20:	90800204 	addi	r2,r18,8
   27a24:	a8c00204 	addi	r3,r21,8
   27a28:	003f6306 	br	277b8 <_gp+0xfffec900>
   27a2c:	9005883a 	mov	r2,r18
   27a30:	a8c00017 	ldw	r3,0(r21)
   27a34:	b821883a 	mov	r16,r23
   27a38:	b027883a 	mov	r19,r22
   27a3c:	10c00015 	stw	r3,0(r2)
   27a40:	a8c00117 	ldw	r3,4(r21)
   27a44:	10c00115 	stw	r3,4(r2)
   27a48:	a8c00217 	ldw	r3,8(r21)
   27a4c:	10c00215 	stw	r3,8(r2)
   27a50:	003f6a06 	br	277fc <_gp+0xfffec944>
   27a54:	9c67883a 	add	r19,r19,r17
   27a58:	4445c83a 	sub	r2,r8,r17
   27a5c:	e4c00215 	stw	r19,8(fp)
   27a60:	10800054 	ori	r2,r2,1
   27a64:	98800115 	stw	r2,4(r19)
   27a68:	a8bfff17 	ldw	r2,-4(r21)
   27a6c:	a009883a 	mov	r4,r20
   27a70:	1080004c 	andi	r2,r2,1
   27a74:	1462b03a 	or	r17,r2,r17
   27a78:	ac7fff15 	stw	r17,-4(r21)
   27a7c:	002db240 	call	2db24 <__malloc_unlock>
   27a80:	a805883a 	mov	r2,r21
   27a84:	003f6b06 	br	27834 <_gp+0xfffec97c>
   27a88:	a80b883a 	mov	r5,r21
   27a8c:	9009883a 	mov	r4,r18
   27a90:	00263880 	call	26388 <memmove>
   27a94:	003f4e06 	br	277d0 <_gp+0xfffec918>
   27a98:	89000404 	addi	r4,r17,16
   27a9c:	b93fbc16 	blt	r23,r4,27990 <_gp+0xfffecad8>
   27aa0:	b0800317 	ldw	r2,12(r22)
   27aa4:	b0c00217 	ldw	r3,8(r22)
   27aa8:	81bfff04 	addi	r6,r16,-4
   27aac:	01000904 	movi	r4,36
   27ab0:	18800315 	stw	r2,12(r3)
   27ab4:	10c00215 	stw	r3,8(r2)
   27ab8:	b4800204 	addi	r18,r22,8
   27abc:	21804336 	bltu	r4,r6,27bcc <_realloc_r+0x508>
   27ac0:	008004c4 	movi	r2,19
   27ac4:	11803f2e 	bgeu	r2,r6,27bc4 <_realloc_r+0x500>
   27ac8:	a8800017 	ldw	r2,0(r21)
   27acc:	b0800215 	stw	r2,8(r22)
   27ad0:	a8800117 	ldw	r2,4(r21)
   27ad4:	b0800315 	stw	r2,12(r22)
   27ad8:	008006c4 	movi	r2,27
   27adc:	11803f36 	bltu	r2,r6,27bdc <_realloc_r+0x518>
   27ae0:	b0800404 	addi	r2,r22,16
   27ae4:	ad400204 	addi	r21,r21,8
   27ae8:	a8c00017 	ldw	r3,0(r21)
   27aec:	10c00015 	stw	r3,0(r2)
   27af0:	a8c00117 	ldw	r3,4(r21)
   27af4:	10c00115 	stw	r3,4(r2)
   27af8:	a8c00217 	ldw	r3,8(r21)
   27afc:	10c00215 	stw	r3,8(r2)
   27b00:	b447883a 	add	r3,r22,r17
   27b04:	bc45c83a 	sub	r2,r23,r17
   27b08:	e0c00215 	stw	r3,8(fp)
   27b0c:	10800054 	ori	r2,r2,1
   27b10:	18800115 	stw	r2,4(r3)
   27b14:	b0800117 	ldw	r2,4(r22)
   27b18:	a009883a 	mov	r4,r20
   27b1c:	1080004c 	andi	r2,r2,1
   27b20:	1462b03a 	or	r17,r2,r17
   27b24:	b4400115 	stw	r17,4(r22)
   27b28:	002db240 	call	2db24 <__malloc_unlock>
   27b2c:	9005883a 	mov	r2,r18
   27b30:	003f4006 	br	27834 <_gp+0xfffec97c>
   27b34:	a8c00217 	ldw	r3,8(r21)
   27b38:	90c00215 	stw	r3,8(r18)
   27b3c:	a8c00317 	ldw	r3,12(r21)
   27b40:	90c00315 	stw	r3,12(r18)
   27b44:	30801126 	beq	r6,r2,27b8c <_realloc_r+0x4c8>
   27b48:	90800404 	addi	r2,r18,16
   27b4c:	a8c00404 	addi	r3,r21,16
   27b50:	003f1906 	br	277b8 <_gp+0xfffec900>
   27b54:	90ffff17 	ldw	r3,-4(r18)
   27b58:	00bfff04 	movi	r2,-4
   27b5c:	a825883a 	mov	r18,r21
   27b60:	1884703a 	and	r2,r3,r2
   27b64:	80a1883a 	add	r16,r16,r2
   27b68:	003f2406 	br	277fc <_gp+0xfffec944>
   27b6c:	a8800217 	ldw	r2,8(r21)
   27b70:	b0800415 	stw	r2,16(r22)
   27b74:	a8800317 	ldw	r2,12(r21)
   27b78:	b0800515 	stw	r2,20(r22)
   27b7c:	31000a26 	beq	r6,r4,27ba8 <_realloc_r+0x4e4>
   27b80:	b0800604 	addi	r2,r22,24
   27b84:	ad400404 	addi	r21,r21,16
   27b88:	003fa906 	br	27a30 <_gp+0xfffecb78>
   27b8c:	a9000417 	ldw	r4,16(r21)
   27b90:	90800604 	addi	r2,r18,24
   27b94:	a8c00604 	addi	r3,r21,24
   27b98:	91000415 	stw	r4,16(r18)
   27b9c:	a9000517 	ldw	r4,20(r21)
   27ba0:	91000515 	stw	r4,20(r18)
   27ba4:	003f0406 	br	277b8 <_gp+0xfffec900>
   27ba8:	a8c00417 	ldw	r3,16(r21)
   27bac:	ad400604 	addi	r21,r21,24
   27bb0:	b0800804 	addi	r2,r22,32
   27bb4:	b0c00615 	stw	r3,24(r22)
   27bb8:	a8ffff17 	ldw	r3,-4(r21)
   27bbc:	b0c00715 	stw	r3,28(r22)
   27bc0:	003f9b06 	br	27a30 <_gp+0xfffecb78>
   27bc4:	9005883a 	mov	r2,r18
   27bc8:	003fc706 	br	27ae8 <_gp+0xfffecc30>
   27bcc:	a80b883a 	mov	r5,r21
   27bd0:	9009883a 	mov	r4,r18
   27bd4:	00263880 	call	26388 <memmove>
   27bd8:	003fc906 	br	27b00 <_gp+0xfffecc48>
   27bdc:	a8800217 	ldw	r2,8(r21)
   27be0:	b0800415 	stw	r2,16(r22)
   27be4:	a8800317 	ldw	r2,12(r21)
   27be8:	b0800515 	stw	r2,20(r22)
   27bec:	31000726 	beq	r6,r4,27c0c <_realloc_r+0x548>
   27bf0:	b0800604 	addi	r2,r22,24
   27bf4:	ad400404 	addi	r21,r21,16
   27bf8:	003fbb06 	br	27ae8 <_gp+0xfffecc30>
   27bfc:	a009883a 	mov	r4,r20
   27c00:	002db240 	call	2db24 <__malloc_unlock>
   27c04:	0005883a 	mov	r2,zero
   27c08:	003f0a06 	br	27834 <_gp+0xfffec97c>
   27c0c:	a8c00417 	ldw	r3,16(r21)
   27c10:	ad400604 	addi	r21,r21,24
   27c14:	b0800804 	addi	r2,r22,32
   27c18:	b0c00615 	stw	r3,24(r22)
   27c1c:	a8ffff17 	ldw	r3,-4(r21)
   27c20:	b0c00715 	stw	r3,28(r22)
   27c24:	003fb006 	br	27ae8 <_gp+0xfffecc30>

00027c28 <__fpclassifyd>:
   27c28:	00a00034 	movhi	r2,32768
   27c2c:	10bfffc4 	addi	r2,r2,-1
   27c30:	2884703a 	and	r2,r5,r2
   27c34:	10000726 	beq	r2,zero,27c54 <__fpclassifyd+0x2c>
   27c38:	00fffc34 	movhi	r3,65520
   27c3c:	019ff834 	movhi	r6,32736
   27c40:	28c7883a 	add	r3,r5,r3
   27c44:	31bfffc4 	addi	r6,r6,-1
   27c48:	30c00536 	bltu	r6,r3,27c60 <__fpclassifyd+0x38>
   27c4c:	00800104 	movi	r2,4
   27c50:	f800283a 	ret
   27c54:	2000021e 	bne	r4,zero,27c60 <__fpclassifyd+0x38>
   27c58:	00800084 	movi	r2,2
   27c5c:	f800283a 	ret
   27c60:	00dffc34 	movhi	r3,32752
   27c64:	019ff834 	movhi	r6,32736
   27c68:	28cb883a 	add	r5,r5,r3
   27c6c:	31bfffc4 	addi	r6,r6,-1
   27c70:	317ff62e 	bgeu	r6,r5,27c4c <_gp+0xfffecd94>
   27c74:	01400434 	movhi	r5,16
   27c78:	297fffc4 	addi	r5,r5,-1
   27c7c:	28800236 	bltu	r5,r2,27c88 <__fpclassifyd+0x60>
   27c80:	008000c4 	movi	r2,3
   27c84:	f800283a 	ret
   27c88:	10c00226 	beq	r2,r3,27c94 <__fpclassifyd+0x6c>
   27c8c:	0005883a 	mov	r2,zero
   27c90:	f800283a 	ret
   27c94:	2005003a 	cmpeq	r2,r4,zero
   27c98:	f800283a 	ret

00027c9c <_sbrk_r>:
   27c9c:	defffd04 	addi	sp,sp,-12
   27ca0:	dc000015 	stw	r16,0(sp)
   27ca4:	040000f4 	movhi	r16,3
   27ca8:	dc400115 	stw	r17,4(sp)
   27cac:	8412cb04 	addi	r16,r16,19244
   27cb0:	2023883a 	mov	r17,r4
   27cb4:	2809883a 	mov	r4,r5
   27cb8:	dfc00215 	stw	ra,8(sp)
   27cbc:	80000015 	stw	zero,0(r16)
   27cc0:	002dd0c0 	call	2dd0c <sbrk>
   27cc4:	00ffffc4 	movi	r3,-1
   27cc8:	10c00526 	beq	r2,r3,27ce0 <_sbrk_r+0x44>
   27ccc:	dfc00217 	ldw	ra,8(sp)
   27cd0:	dc400117 	ldw	r17,4(sp)
   27cd4:	dc000017 	ldw	r16,0(sp)
   27cd8:	dec00304 	addi	sp,sp,12
   27cdc:	f800283a 	ret
   27ce0:	80c00017 	ldw	r3,0(r16)
   27ce4:	183ff926 	beq	r3,zero,27ccc <_gp+0xfffece14>
   27ce8:	88c00015 	stw	r3,0(r17)
   27cec:	003ff706 	br	27ccc <_gp+0xfffece14>

00027cf0 <__sread>:
   27cf0:	defffe04 	addi	sp,sp,-8
   27cf4:	dc000015 	stw	r16,0(sp)
   27cf8:	2821883a 	mov	r16,r5
   27cfc:	2940038f 	ldh	r5,14(r5)
   27d00:	dfc00115 	stw	ra,4(sp)
   27d04:	0029bac0 	call	29bac <_read_r>
   27d08:	10000716 	blt	r2,zero,27d28 <__sread+0x38>
   27d0c:	80c01417 	ldw	r3,80(r16)
   27d10:	1887883a 	add	r3,r3,r2
   27d14:	80c01415 	stw	r3,80(r16)
   27d18:	dfc00117 	ldw	ra,4(sp)
   27d1c:	dc000017 	ldw	r16,0(sp)
   27d20:	dec00204 	addi	sp,sp,8
   27d24:	f800283a 	ret
   27d28:	80c0030b 	ldhu	r3,12(r16)
   27d2c:	18fbffcc 	andi	r3,r3,61439
   27d30:	80c0030d 	sth	r3,12(r16)
   27d34:	dfc00117 	ldw	ra,4(sp)
   27d38:	dc000017 	ldw	r16,0(sp)
   27d3c:	dec00204 	addi	sp,sp,8
   27d40:	f800283a 	ret

00027d44 <__seofread>:
   27d44:	0005883a 	mov	r2,zero
   27d48:	f800283a 	ret

00027d4c <__swrite>:
   27d4c:	2880030b 	ldhu	r2,12(r5)
   27d50:	defffb04 	addi	sp,sp,-20
   27d54:	dcc00315 	stw	r19,12(sp)
   27d58:	dc800215 	stw	r18,8(sp)
   27d5c:	dc400115 	stw	r17,4(sp)
   27d60:	dc000015 	stw	r16,0(sp)
   27d64:	dfc00415 	stw	ra,16(sp)
   27d68:	10c0400c 	andi	r3,r2,256
   27d6c:	2821883a 	mov	r16,r5
   27d70:	2023883a 	mov	r17,r4
   27d74:	3025883a 	mov	r18,r6
   27d78:	3827883a 	mov	r19,r7
   27d7c:	18000526 	beq	r3,zero,27d94 <__swrite+0x48>
   27d80:	2940038f 	ldh	r5,14(r5)
   27d84:	01c00084 	movi	r7,2
   27d88:	000d883a 	mov	r6,zero
   27d8c:	0029b4c0 	call	29b4c <_lseek_r>
   27d90:	8080030b 	ldhu	r2,12(r16)
   27d94:	8140038f 	ldh	r5,14(r16)
   27d98:	10bbffcc 	andi	r2,r2,61439
   27d9c:	980f883a 	mov	r7,r19
   27da0:	900d883a 	mov	r6,r18
   27da4:	8809883a 	mov	r4,r17
   27da8:	8080030d 	sth	r2,12(r16)
   27dac:	dfc00417 	ldw	ra,16(sp)
   27db0:	dcc00317 	ldw	r19,12(sp)
   27db4:	dc800217 	ldw	r18,8(sp)
   27db8:	dc400117 	ldw	r17,4(sp)
   27dbc:	dc000017 	ldw	r16,0(sp)
   27dc0:	dec00504 	addi	sp,sp,20
   27dc4:	00296001 	jmpi	29600 <_write_r>

00027dc8 <__sseek>:
   27dc8:	defffe04 	addi	sp,sp,-8
   27dcc:	dc000015 	stw	r16,0(sp)
   27dd0:	2821883a 	mov	r16,r5
   27dd4:	2940038f 	ldh	r5,14(r5)
   27dd8:	dfc00115 	stw	ra,4(sp)
   27ddc:	0029b4c0 	call	29b4c <_lseek_r>
   27de0:	00ffffc4 	movi	r3,-1
   27de4:	10c00826 	beq	r2,r3,27e08 <__sseek+0x40>
   27de8:	80c0030b 	ldhu	r3,12(r16)
   27dec:	80801415 	stw	r2,80(r16)
   27df0:	18c40014 	ori	r3,r3,4096
   27df4:	80c0030d 	sth	r3,12(r16)
   27df8:	dfc00117 	ldw	ra,4(sp)
   27dfc:	dc000017 	ldw	r16,0(sp)
   27e00:	dec00204 	addi	sp,sp,8
   27e04:	f800283a 	ret
   27e08:	80c0030b 	ldhu	r3,12(r16)
   27e0c:	18fbffcc 	andi	r3,r3,61439
   27e10:	80c0030d 	sth	r3,12(r16)
   27e14:	dfc00117 	ldw	ra,4(sp)
   27e18:	dc000017 	ldw	r16,0(sp)
   27e1c:	dec00204 	addi	sp,sp,8
   27e20:	f800283a 	ret

00027e24 <__sclose>:
   27e24:	2940038f 	ldh	r5,14(r5)
   27e28:	00296601 	jmpi	29660 <_close_r>

00027e2c <strcmp>:
   27e2c:	2144b03a 	or	r2,r4,r5
   27e30:	108000cc 	andi	r2,r2,3
   27e34:	1000171e 	bne	r2,zero,27e94 <strcmp+0x68>
   27e38:	20800017 	ldw	r2,0(r4)
   27e3c:	28c00017 	ldw	r3,0(r5)
   27e40:	10c0141e 	bne	r2,r3,27e94 <strcmp+0x68>
   27e44:	027fbff4 	movhi	r9,65279
   27e48:	4a7fbfc4 	addi	r9,r9,-257
   27e4c:	0086303a 	nor	r3,zero,r2
   27e50:	02202074 	movhi	r8,32897
   27e54:	1245883a 	add	r2,r2,r9
   27e58:	42202004 	addi	r8,r8,-32640
   27e5c:	10c4703a 	and	r2,r2,r3
   27e60:	1204703a 	and	r2,r2,r8
   27e64:	10000226 	beq	r2,zero,27e70 <strcmp+0x44>
   27e68:	00002306 	br	27ef8 <strcmp+0xcc>
   27e6c:	1000221e 	bne	r2,zero,27ef8 <strcmp+0xcc>
   27e70:	21000104 	addi	r4,r4,4
   27e74:	20c00017 	ldw	r3,0(r4)
   27e78:	29400104 	addi	r5,r5,4
   27e7c:	29800017 	ldw	r6,0(r5)
   27e80:	1a4f883a 	add	r7,r3,r9
   27e84:	00c4303a 	nor	r2,zero,r3
   27e88:	3884703a 	and	r2,r7,r2
   27e8c:	1204703a 	and	r2,r2,r8
   27e90:	19bff626 	beq	r3,r6,27e6c <_gp+0xfffecfb4>
   27e94:	20800003 	ldbu	r2,0(r4)
   27e98:	10c03fcc 	andi	r3,r2,255
   27e9c:	18c0201c 	xori	r3,r3,128
   27ea0:	18ffe004 	addi	r3,r3,-128
   27ea4:	18000c26 	beq	r3,zero,27ed8 <strcmp+0xac>
   27ea8:	29800007 	ldb	r6,0(r5)
   27eac:	19800326 	beq	r3,r6,27ebc <strcmp+0x90>
   27eb0:	00001306 	br	27f00 <strcmp+0xd4>
   27eb4:	29800007 	ldb	r6,0(r5)
   27eb8:	11800b1e 	bne	r2,r6,27ee8 <strcmp+0xbc>
   27ebc:	21000044 	addi	r4,r4,1
   27ec0:	20c00003 	ldbu	r3,0(r4)
   27ec4:	29400044 	addi	r5,r5,1
   27ec8:	18803fcc 	andi	r2,r3,255
   27ecc:	1080201c 	xori	r2,r2,128
   27ed0:	10bfe004 	addi	r2,r2,-128
   27ed4:	103ff71e 	bne	r2,zero,27eb4 <_gp+0xfffecffc>
   27ed8:	0007883a 	mov	r3,zero
   27edc:	28800003 	ldbu	r2,0(r5)
   27ee0:	1885c83a 	sub	r2,r3,r2
   27ee4:	f800283a 	ret
   27ee8:	28800003 	ldbu	r2,0(r5)
   27eec:	18c03fcc 	andi	r3,r3,255
   27ef0:	1885c83a 	sub	r2,r3,r2
   27ef4:	f800283a 	ret
   27ef8:	0005883a 	mov	r2,zero
   27efc:	f800283a 	ret
   27f00:	10c03fcc 	andi	r3,r2,255
   27f04:	003ff506 	br	27edc <_gp+0xfffed024>

00027f08 <__sprint_r.part.0>:
   27f08:	28801917 	ldw	r2,100(r5)
   27f0c:	defff604 	addi	sp,sp,-40
   27f10:	dd400515 	stw	r21,20(sp)
   27f14:	dfc00915 	stw	ra,36(sp)
   27f18:	df000815 	stw	fp,32(sp)
   27f1c:	ddc00715 	stw	r23,28(sp)
   27f20:	dd800615 	stw	r22,24(sp)
   27f24:	dd000415 	stw	r20,16(sp)
   27f28:	dcc00315 	stw	r19,12(sp)
   27f2c:	dc800215 	stw	r18,8(sp)
   27f30:	dc400115 	stw	r17,4(sp)
   27f34:	dc000015 	stw	r16,0(sp)
   27f38:	1088000c 	andi	r2,r2,8192
   27f3c:	302b883a 	mov	r21,r6
   27f40:	10002e26 	beq	r2,zero,27ffc <__sprint_r.part.0+0xf4>
   27f44:	30800217 	ldw	r2,8(r6)
   27f48:	35800017 	ldw	r22,0(r6)
   27f4c:	10002926 	beq	r2,zero,27ff4 <__sprint_r.part.0+0xec>
   27f50:	2827883a 	mov	r19,r5
   27f54:	2029883a 	mov	r20,r4
   27f58:	b5c00104 	addi	r23,r22,4
   27f5c:	04bfffc4 	movi	r18,-1
   27f60:	bc400017 	ldw	r17,0(r23)
   27f64:	b4000017 	ldw	r16,0(r22)
   27f68:	0039883a 	mov	fp,zero
   27f6c:	8822d0ba 	srli	r17,r17,2
   27f70:	8800031e 	bne	r17,zero,27f80 <__sprint_r.part.0+0x78>
   27f74:	00001806 	br	27fd8 <__sprint_r.part.0+0xd0>
   27f78:	84000104 	addi	r16,r16,4
   27f7c:	8f001526 	beq	r17,fp,27fd4 <__sprint_r.part.0+0xcc>
   27f80:	81400017 	ldw	r5,0(r16)
   27f84:	980d883a 	mov	r6,r19
   27f88:	a009883a 	mov	r4,r20
   27f8c:	00299f80 	call	299f8 <_fputwc_r>
   27f90:	e7000044 	addi	fp,fp,1
   27f94:	14bff81e 	bne	r2,r18,27f78 <_gp+0xfffed0c0>
   27f98:	9005883a 	mov	r2,r18
   27f9c:	a8000215 	stw	zero,8(r21)
   27fa0:	a8000115 	stw	zero,4(r21)
   27fa4:	dfc00917 	ldw	ra,36(sp)
   27fa8:	df000817 	ldw	fp,32(sp)
   27fac:	ddc00717 	ldw	r23,28(sp)
   27fb0:	dd800617 	ldw	r22,24(sp)
   27fb4:	dd400517 	ldw	r21,20(sp)
   27fb8:	dd000417 	ldw	r20,16(sp)
   27fbc:	dcc00317 	ldw	r19,12(sp)
   27fc0:	dc800217 	ldw	r18,8(sp)
   27fc4:	dc400117 	ldw	r17,4(sp)
   27fc8:	dc000017 	ldw	r16,0(sp)
   27fcc:	dec00a04 	addi	sp,sp,40
   27fd0:	f800283a 	ret
   27fd4:	a8800217 	ldw	r2,8(r21)
   27fd8:	8c63883a 	add	r17,r17,r17
   27fdc:	8c63883a 	add	r17,r17,r17
   27fe0:	1445c83a 	sub	r2,r2,r17
   27fe4:	a8800215 	stw	r2,8(r21)
   27fe8:	b5800204 	addi	r22,r22,8
   27fec:	bdc00204 	addi	r23,r23,8
   27ff0:	103fdb1e 	bne	r2,zero,27f60 <_gp+0xfffed0a8>
   27ff4:	0005883a 	mov	r2,zero
   27ff8:	003fe806 	br	27f9c <_gp+0xfffed0e4>
   27ffc:	00250680 	call	25068 <__sfvwrite_r>
   28000:	003fe606 	br	27f9c <_gp+0xfffed0e4>

00028004 <__sprint_r>:
   28004:	30c00217 	ldw	r3,8(r6)
   28008:	18000126 	beq	r3,zero,28010 <__sprint_r+0xc>
   2800c:	0027f081 	jmpi	27f08 <__sprint_r.part.0>
   28010:	30000115 	stw	zero,4(r6)
   28014:	0005883a 	mov	r2,zero
   28018:	f800283a 	ret

0002801c <___vfiprintf_internal_r>:
   2801c:	deffca04 	addi	sp,sp,-216
   28020:	dd403115 	stw	r21,196(sp)
   28024:	dfc03515 	stw	ra,212(sp)
   28028:	df003415 	stw	fp,208(sp)
   2802c:	ddc03315 	stw	r23,204(sp)
   28030:	dd803215 	stw	r22,200(sp)
   28034:	dd003015 	stw	r20,192(sp)
   28038:	dcc02f15 	stw	r19,188(sp)
   2803c:	dc802e15 	stw	r18,184(sp)
   28040:	dc402d15 	stw	r17,180(sp)
   28044:	dc002c15 	stw	r16,176(sp)
   28048:	d9002115 	stw	r4,132(sp)
   2804c:	d9402015 	stw	r5,128(sp)
   28050:	d9c02215 	stw	r7,136(sp)
   28054:	302b883a 	mov	r21,r6
   28058:	20000226 	beq	r4,zero,28064 <___vfiprintf_internal_r+0x48>
   2805c:	20800e17 	ldw	r2,56(r4)
   28060:	1000cf26 	beq	r2,zero,283a0 <___vfiprintf_internal_r+0x384>
   28064:	d8c02017 	ldw	r3,128(sp)
   28068:	1880030b 	ldhu	r2,12(r3)
   2806c:	10c8000c 	andi	r3,r2,8192
   28070:	1800071e 	bne	r3,zero,28090 <___vfiprintf_internal_r+0x74>
   28074:	d9402017 	ldw	r5,128(sp)
   28078:	00f7ffc4 	movi	r3,-8193
   2807c:	10880014 	ori	r2,r2,8192
   28080:	29001917 	ldw	r4,100(r5)
   28084:	2880030d 	sth	r2,12(r5)
   28088:	20c6703a 	and	r3,r4,r3
   2808c:	28c01915 	stw	r3,100(r5)
   28090:	10c0020c 	andi	r3,r2,8
   28094:	1800a526 	beq	r3,zero,2832c <___vfiprintf_internal_r+0x310>
   28098:	d9002017 	ldw	r4,128(sp)
   2809c:	20c00417 	ldw	r3,16(r4)
   280a0:	1800a226 	beq	r3,zero,2832c <___vfiprintf_internal_r+0x310>
   280a4:	1080068c 	andi	r2,r2,26
   280a8:	00c00284 	movi	r3,10
   280ac:	10c0a826 	beq	r2,r3,28350 <___vfiprintf_internal_r+0x334>
   280b0:	d9001a04 	addi	r4,sp,104
   280b4:	d94019c4 	addi	r5,sp,103
   280b8:	048000f4 	movhi	r18,3
   280bc:	2145c83a 	sub	r2,r4,r5
   280c0:	9483c504 	addi	r18,r18,3860
   280c4:	d9001e15 	stw	r4,120(sp)
   280c8:	d9401f15 	stw	r5,124(sp)
   280cc:	dec01a15 	stw	sp,104(sp)
   280d0:	d8001c15 	stw	zero,112(sp)
   280d4:	d8001b15 	stw	zero,108(sp)
   280d8:	d811883a 	mov	r8,sp
   280dc:	d8002615 	stw	zero,152(sp)
   280e0:	d8002415 	stw	zero,144(sp)
   280e4:	d8802815 	stw	r2,160(sp)
   280e8:	a82d883a 	mov	r22,r21
   280ec:	b0800007 	ldb	r2,0(r22)
   280f0:	10040d26 	beq	r2,zero,29128 <___vfiprintf_internal_r+0x110c>
   280f4:	00c00944 	movi	r3,37
   280f8:	b029883a 	mov	r20,r22
   280fc:	10c0021e 	bne	r2,r3,28108 <___vfiprintf_internal_r+0xec>
   28100:	00001606 	br	2815c <___vfiprintf_internal_r+0x140>
   28104:	10c00326 	beq	r2,r3,28114 <___vfiprintf_internal_r+0xf8>
   28108:	a5000044 	addi	r20,r20,1
   2810c:	a0800007 	ldb	r2,0(r20)
   28110:	103ffc1e 	bne	r2,zero,28104 <_gp+0xfffed24c>
   28114:	a5a1c83a 	sub	r16,r20,r22
   28118:	80001026 	beq	r16,zero,2815c <___vfiprintf_internal_r+0x140>
   2811c:	d8c01c17 	ldw	r3,112(sp)
   28120:	d8801b17 	ldw	r2,108(sp)
   28124:	45800015 	stw	r22,0(r8)
   28128:	80c7883a 	add	r3,r16,r3
   2812c:	10800044 	addi	r2,r2,1
   28130:	44000115 	stw	r16,4(r8)
   28134:	d8c01c15 	stw	r3,112(sp)
   28138:	d8801b15 	stw	r2,108(sp)
   2813c:	010001c4 	movi	r4,7
   28140:	2080750e 	bge	r4,r2,28318 <___vfiprintf_internal_r+0x2fc>
   28144:	1803951e 	bne	r3,zero,28f9c <___vfiprintf_internal_r+0xf80>
   28148:	d8c02417 	ldw	r3,144(sp)
   2814c:	d8001b15 	stw	zero,108(sp)
   28150:	d811883a 	mov	r8,sp
   28154:	1c07883a 	add	r3,r3,r16
   28158:	d8c02415 	stw	r3,144(sp)
   2815c:	a0800007 	ldb	r2,0(r20)
   28160:	1002e026 	beq	r2,zero,28ce4 <___vfiprintf_internal_r+0xcc8>
   28164:	a5800044 	addi	r22,r20,1
   28168:	a0c00047 	ldb	r3,1(r20)
   2816c:	d8001d85 	stb	zero,118(sp)
   28170:	0027883a 	mov	r19,zero
   28174:	d8002305 	stb	zero,140(sp)
   28178:	043fffc4 	movi	r16,-1
   2817c:	d8002515 	stw	zero,148(sp)
   28180:	0023883a 	mov	r17,zero
   28184:	05001604 	movi	r20,88
   28188:	05400244 	movi	r21,9
   2818c:	402f883a 	mov	r23,r8
   28190:	b5800044 	addi	r22,r22,1
   28194:	18bff804 	addi	r2,r3,-32
   28198:	a0827736 	bltu	r20,r2,28b78 <___vfiprintf_internal_r+0xb5c>
   2819c:	100490ba 	slli	r2,r2,2
   281a0:	010000f4 	movhi	r4,3
   281a4:	21206d04 	addi	r4,r4,-32332
   281a8:	1105883a 	add	r2,r2,r4
   281ac:	10800017 	ldw	r2,0(r2)
   281b0:	1000683a 	jmp	r2
   281b4:	00028878 	rdprs	zero,zero,2593
   281b8:	00028b78 	rdprs	zero,zero,2605
   281bc:	00028b78 	rdprs	zero,zero,2605
   281c0:	00028894 	movui	zero,2594
   281c4:	00028b78 	rdprs	zero,zero,2605
   281c8:	00028b78 	rdprs	zero,zero,2605
   281cc:	00028b78 	rdprs	zero,zero,2605
   281d0:	00028b78 	rdprs	zero,zero,2605
   281d4:	00028b78 	rdprs	zero,zero,2605
   281d8:	00028b78 	rdprs	zero,zero,2605
   281dc:	00028a9c 	xori	zero,zero,2602
   281e0:	00028ac0 	call	28ac <__alt_mem_onchip_memory2-0x1d754>
   281e4:	00028b78 	rdprs	zero,zero,2605
   281e8:	000283b8 	rdprs	zero,zero,2574
   281ec:	00028ad4 	movui	zero,2603
   281f0:	00028b78 	rdprs	zero,zero,2605
   281f4:	000288a0 	cmpeqi	zero,zero,2594
   281f8:	000288ac 	andhi	zero,zero,2594
   281fc:	000288ac 	andhi	zero,zero,2594
   28200:	000288ac 	andhi	zero,zero,2594
   28204:	000288ac 	andhi	zero,zero,2594
   28208:	000288ac 	andhi	zero,zero,2594
   2820c:	000288ac 	andhi	zero,zero,2594
   28210:	000288ac 	andhi	zero,zero,2594
   28214:	000288ac 	andhi	zero,zero,2594
   28218:	000288ac 	andhi	zero,zero,2594
   2821c:	00028b78 	rdprs	zero,zero,2605
   28220:	00028b78 	rdprs	zero,zero,2605
   28224:	00028b78 	rdprs	zero,zero,2605
   28228:	00028b78 	rdprs	zero,zero,2605
   2822c:	00028b78 	rdprs	zero,zero,2605
   28230:	00028b78 	rdprs	zero,zero,2605
   28234:	00028b78 	rdprs	zero,zero,2605
   28238:	00028b78 	rdprs	zero,zero,2605
   2823c:	00028b78 	rdprs	zero,zero,2605
   28240:	00028b78 	rdprs	zero,zero,2605
   28244:	000288ec 	andhi	zero,zero,2595
   28248:	00028b78 	rdprs	zero,zero,2605
   2824c:	00028b78 	rdprs	zero,zero,2605
   28250:	00028b78 	rdprs	zero,zero,2605
   28254:	00028b78 	rdprs	zero,zero,2605
   28258:	00028b78 	rdprs	zero,zero,2605
   2825c:	00028b78 	rdprs	zero,zero,2605
   28260:	00028b78 	rdprs	zero,zero,2605
   28264:	00028b78 	rdprs	zero,zero,2605
   28268:	00028b78 	rdprs	zero,zero,2605
   2826c:	00028b78 	rdprs	zero,zero,2605
   28270:	00028928 	cmpgeui	zero,zero,2596
   28274:	00028b78 	rdprs	zero,zero,2605
   28278:	00028b78 	rdprs	zero,zero,2605
   2827c:	00028b78 	rdprs	zero,zero,2605
   28280:	00028b78 	rdprs	zero,zero,2605
   28284:	00028b78 	rdprs	zero,zero,2605
   28288:	00028984 	movi	zero,2598
   2828c:	00028b78 	rdprs	zero,zero,2605
   28290:	00028b78 	rdprs	zero,zero,2605
   28294:	000289f8 	rdprs	zero,zero,2599
   28298:	00028b78 	rdprs	zero,zero,2605
   2829c:	00028b78 	rdprs	zero,zero,2605
   282a0:	00028b78 	rdprs	zero,zero,2605
   282a4:	00028b78 	rdprs	zero,zero,2605
   282a8:	00028b78 	rdprs	zero,zero,2605
   282ac:	00028b78 	rdprs	zero,zero,2605
   282b0:	00028b78 	rdprs	zero,zero,2605
   282b4:	00028b78 	rdprs	zero,zero,2605
   282b8:	00028b78 	rdprs	zero,zero,2605
   282bc:	00028b78 	rdprs	zero,zero,2605
   282c0:	000287a0 	cmpeqi	zero,zero,2590
   282c4:	000287d0 	cmplti	zero,zero,2591
   282c8:	00028b78 	rdprs	zero,zero,2605
   282cc:	00028b78 	rdprs	zero,zero,2605
   282d0:	00028b78 	rdprs	zero,zero,2605
   282d4:	00028b20 	cmpeqi	zero,zero,2604
   282d8:	000287d0 	cmplti	zero,zero,2591
   282dc:	00028b78 	rdprs	zero,zero,2605
   282e0:	00028b78 	rdprs	zero,zero,2605
   282e4:	00028678 	rdprs	zero,zero,2585
   282e8:	00028b78 	rdprs	zero,zero,2605
   282ec:	0002868c 	andi	zero,zero,2586
   282f0:	000286c4 	movi	zero,2587
   282f4:	000283c4 	movi	zero,2575
   282f8:	0002866c 	andhi	zero,zero,2585
   282fc:	00028b78 	rdprs	zero,zero,2605
   28300:	00028a38 	rdprs	zero,zero,2600
   28304:	00028b78 	rdprs	zero,zero,2605
   28308:	00028a84 	movi	zero,2602
   2830c:	00028b78 	rdprs	zero,zero,2605
   28310:	00028b78 	rdprs	zero,zero,2605
   28314:	00028748 	cmpgei	zero,zero,2589
   28318:	42000204 	addi	r8,r8,8
   2831c:	d8c02417 	ldw	r3,144(sp)
   28320:	1c07883a 	add	r3,r3,r16
   28324:	d8c02415 	stw	r3,144(sp)
   28328:	003f8c06 	br	2815c <_gp+0xfffed2a4>
   2832c:	d9402017 	ldw	r5,128(sp)
   28330:	d9002117 	ldw	r4,132(sp)
   28334:	0022bd80 	call	22bd8 <__swsetup_r>
   28338:	1003c11e 	bne	r2,zero,29240 <___vfiprintf_internal_r+0x1224>
   2833c:	d9402017 	ldw	r5,128(sp)
   28340:	00c00284 	movi	r3,10
   28344:	2880030b 	ldhu	r2,12(r5)
   28348:	1080068c 	andi	r2,r2,26
   2834c:	10ff581e 	bne	r2,r3,280b0 <_gp+0xfffed1f8>
   28350:	d8c02017 	ldw	r3,128(sp)
   28354:	1880038f 	ldh	r2,14(r3)
   28358:	103f5516 	blt	r2,zero,280b0 <_gp+0xfffed1f8>
   2835c:	d9c02217 	ldw	r7,136(sp)
   28360:	d9002117 	ldw	r4,132(sp)
   28364:	a80d883a 	mov	r6,r21
   28368:	180b883a 	mov	r5,r3
   2836c:	00295440 	call	29544 <__sbprintf>
   28370:	dfc03517 	ldw	ra,212(sp)
   28374:	df003417 	ldw	fp,208(sp)
   28378:	ddc03317 	ldw	r23,204(sp)
   2837c:	dd803217 	ldw	r22,200(sp)
   28380:	dd403117 	ldw	r21,196(sp)
   28384:	dd003017 	ldw	r20,192(sp)
   28388:	dcc02f17 	ldw	r19,188(sp)
   2838c:	dc802e17 	ldw	r18,184(sp)
   28390:	dc402d17 	ldw	r17,180(sp)
   28394:	dc002c17 	ldw	r16,176(sp)
   28398:	dec03604 	addi	sp,sp,216
   2839c:	f800283a 	ret
   283a0:	0024be40 	call	24be4 <__sinit>
   283a4:	003f2f06 	br	28064 <_gp+0xfffed1ac>
   283a8:	d8c02517 	ldw	r3,148(sp)
   283ac:	d8802215 	stw	r2,136(sp)
   283b0:	00c7c83a 	sub	r3,zero,r3
   283b4:	d8c02515 	stw	r3,148(sp)
   283b8:	8c400114 	ori	r17,r17,4
   283bc:	b0c00007 	ldb	r3,0(r22)
   283c0:	003f7306 	br	28190 <_gp+0xfffed2d8>
   283c4:	00800c04 	movi	r2,48
   283c8:	d9402217 	ldw	r5,136(sp)
   283cc:	d8801d05 	stb	r2,116(sp)
   283d0:	00801e04 	movi	r2,120
   283d4:	d8801d45 	stb	r2,117(sp)
   283d8:	d8001d85 	stb	zero,118(sp)
   283dc:	b811883a 	mov	r8,r23
   283e0:	28c00104 	addi	r3,r5,4
   283e4:	2cc00017 	ldw	r19,0(r5)
   283e8:	0029883a 	mov	r20,zero
   283ec:	88800094 	ori	r2,r17,2
   283f0:	80032516 	blt	r16,zero,29088 <___vfiprintf_internal_r+0x106c>
   283f4:	00bfdfc4 	movi	r2,-129
   283f8:	88a2703a 	and	r17,r17,r2
   283fc:	d8c02215 	stw	r3,136(sp)
   28400:	8c400094 	ori	r17,r17,2
   28404:	98032a1e 	bne	r19,zero,290b0 <___vfiprintf_internal_r+0x1094>
   28408:	008000f4 	movhi	r2,3
   2840c:	10836404 	addi	r2,r2,3472
   28410:	d8802615 	stw	r2,152(sp)
   28414:	002b883a 	mov	r21,zero
   28418:	8001741e 	bne	r16,zero,289ec <___vfiprintf_internal_r+0x9d0>
   2841c:	0021883a 	mov	r16,zero
   28420:	0029883a 	mov	r20,zero
   28424:	ddc01a04 	addi	r23,sp,104
   28428:	8027883a 	mov	r19,r16
   2842c:	8500010e 	bge	r16,r20,28434 <___vfiprintf_internal_r+0x418>
   28430:	a027883a 	mov	r19,r20
   28434:	ad403fcc 	andi	r21,r21,255
   28438:	ad40201c 	xori	r21,r21,128
   2843c:	ad7fe004 	addi	r21,r21,-128
   28440:	a8000126 	beq	r21,zero,28448 <___vfiprintf_internal_r+0x42c>
   28444:	9cc00044 	addi	r19,r19,1
   28448:	89c0008c 	andi	r7,r17,2
   2844c:	38000126 	beq	r7,zero,28454 <___vfiprintf_internal_r+0x438>
   28450:	9cc00084 	addi	r19,r19,2
   28454:	88c0210c 	andi	r3,r17,132
   28458:	1801dd1e 	bne	r3,zero,28bd0 <___vfiprintf_internal_r+0xbb4>
   2845c:	d9402517 	ldw	r5,148(sp)
   28460:	2cebc83a 	sub	r21,r5,r19
   28464:	0541da0e 	bge	zero,r21,28bd0 <___vfiprintf_internal_r+0xbb4>
   28468:	07000404 	movi	fp,16
   2846c:	d8801c17 	ldw	r2,112(sp)
   28470:	e543be0e 	bge	fp,r21,2936c <___vfiprintf_internal_r+0x1350>
   28474:	014000f4 	movhi	r5,3
   28478:	2943c904 	addi	r5,r5,3876
   2847c:	dc002715 	stw	r16,156(sp)
   28480:	d9801b17 	ldw	r6,108(sp)
   28484:	a821883a 	mov	r16,r21
   28488:	d9402315 	stw	r5,140(sp)
   2848c:	028001c4 	movi	r10,7
   28490:	d9c02915 	stw	r7,164(sp)
   28494:	182b883a 	mov	r21,r3
   28498:	00000506 	br	284b0 <___vfiprintf_internal_r+0x494>
   2849c:	31000084 	addi	r4,r6,2
   284a0:	42000204 	addi	r8,r8,8
   284a4:	180d883a 	mov	r6,r3
   284a8:	843ffc04 	addi	r16,r16,-16
   284ac:	e4000f0e 	bge	fp,r16,284ec <___vfiprintf_internal_r+0x4d0>
   284b0:	010000f4 	movhi	r4,3
   284b4:	10800404 	addi	r2,r2,16
   284b8:	30c00044 	addi	r3,r6,1
   284bc:	2103c904 	addi	r4,r4,3876
   284c0:	41000015 	stw	r4,0(r8)
   284c4:	47000115 	stw	fp,4(r8)
   284c8:	d8801c15 	stw	r2,112(sp)
   284cc:	d8c01b15 	stw	r3,108(sp)
   284d0:	50fff20e 	bge	r10,r3,2849c <_gp+0xfffed5e4>
   284d4:	1001b21e 	bne	r2,zero,28ba0 <___vfiprintf_internal_r+0xb84>
   284d8:	843ffc04 	addi	r16,r16,-16
   284dc:	000d883a 	mov	r6,zero
   284e0:	01000044 	movi	r4,1
   284e4:	d811883a 	mov	r8,sp
   284e8:	e43ff116 	blt	fp,r16,284b0 <_gp+0xfffed5f8>
   284ec:	a807883a 	mov	r3,r21
   284f0:	d9c02917 	ldw	r7,164(sp)
   284f4:	802b883a 	mov	r21,r16
   284f8:	dc002717 	ldw	r16,156(sp)
   284fc:	d9402317 	ldw	r5,140(sp)
   28500:	a885883a 	add	r2,r21,r2
   28504:	45400115 	stw	r21,4(r8)
   28508:	41400015 	stw	r5,0(r8)
   2850c:	d8801c15 	stw	r2,112(sp)
   28510:	d9001b15 	stw	r4,108(sp)
   28514:	014001c4 	movi	r5,7
   28518:	29026216 	blt	r5,r4,28ea4 <___vfiprintf_internal_r+0xe88>
   2851c:	d9801d87 	ldb	r6,118(sp)
   28520:	42000204 	addi	r8,r8,8
   28524:	21400044 	addi	r5,r4,1
   28528:	3001ae1e 	bne	r6,zero,28be4 <___vfiprintf_internal_r+0xbc8>
   2852c:	3801bb26 	beq	r7,zero,28c1c <___vfiprintf_internal_r+0xc00>
   28530:	d9001d04 	addi	r4,sp,116
   28534:	10800084 	addi	r2,r2,2
   28538:	41000015 	stw	r4,0(r8)
   2853c:	01000084 	movi	r4,2
   28540:	41000115 	stw	r4,4(r8)
   28544:	d8801c15 	stw	r2,112(sp)
   28548:	d9401b15 	stw	r5,108(sp)
   2854c:	010001c4 	movi	r4,7
   28550:	2142680e 	bge	r4,r5,28ef4 <___vfiprintf_internal_r+0xed8>
   28554:	1002b11e 	bne	r2,zero,2901c <___vfiprintf_internal_r+0x1000>
   28558:	01802004 	movi	r6,128
   2855c:	01400044 	movi	r5,1
   28560:	0009883a 	mov	r4,zero
   28564:	d811883a 	mov	r8,sp
   28568:	1981ae1e 	bne	r3,r6,28c24 <___vfiprintf_internal_r+0xc08>
   2856c:	d8c02517 	ldw	r3,148(sp)
   28570:	1cf9c83a 	sub	fp,r3,r19
   28574:	0701ab0e 	bge	zero,fp,28c24 <___vfiprintf_internal_r+0xc08>
   28578:	05400404 	movi	r21,16
   2857c:	af03a90e 	bge	r21,fp,29424 <___vfiprintf_internal_r+0x1408>
   28580:	014000f4 	movhi	r5,3
   28584:	2943c504 	addi	r5,r5,3860
   28588:	d9402315 	stw	r5,140(sp)
   2858c:	01c001c4 	movi	r7,7
   28590:	00000506 	br	285a8 <___vfiprintf_internal_r+0x58c>
   28594:	21800084 	addi	r6,r4,2
   28598:	42000204 	addi	r8,r8,8
   2859c:	1809883a 	mov	r4,r3
   285a0:	e73ffc04 	addi	fp,fp,-16
   285a4:	af000d0e 	bge	r21,fp,285dc <___vfiprintf_internal_r+0x5c0>
   285a8:	10800404 	addi	r2,r2,16
   285ac:	20c00044 	addi	r3,r4,1
   285b0:	44800015 	stw	r18,0(r8)
   285b4:	45400115 	stw	r21,4(r8)
   285b8:	d8801c15 	stw	r2,112(sp)
   285bc:	d8c01b15 	stw	r3,108(sp)
   285c0:	38fff40e 	bge	r7,r3,28594 <_gp+0xfffed6dc>
   285c4:	10022b1e 	bne	r2,zero,28e74 <___vfiprintf_internal_r+0xe58>
   285c8:	e73ffc04 	addi	fp,fp,-16
   285cc:	01800044 	movi	r6,1
   285d0:	0009883a 	mov	r4,zero
   285d4:	d811883a 	mov	r8,sp
   285d8:	af3ff316 	blt	r21,fp,285a8 <_gp+0xfffed6f0>
   285dc:	d8c02317 	ldw	r3,140(sp)
   285e0:	1705883a 	add	r2,r2,fp
   285e4:	47000115 	stw	fp,4(r8)
   285e8:	40c00015 	stw	r3,0(r8)
   285ec:	d8801c15 	stw	r2,112(sp)
   285f0:	d9801b15 	stw	r6,108(sp)
   285f4:	00c001c4 	movi	r3,7
   285f8:	19829416 	blt	r3,r6,2904c <___vfiprintf_internal_r+0x1030>
   285fc:	8521c83a 	sub	r16,r16,r20
   28600:	42000204 	addi	r8,r8,8
   28604:	31400044 	addi	r5,r6,1
   28608:	3009883a 	mov	r4,r6
   2860c:	04018716 	blt	zero,r16,28c2c <___vfiprintf_internal_r+0xc10>
   28610:	a085883a 	add	r2,r20,r2
   28614:	45c00015 	stw	r23,0(r8)
   28618:	45000115 	stw	r20,4(r8)
   2861c:	d8801c15 	stw	r2,112(sp)
   28620:	d9401b15 	stw	r5,108(sp)
   28624:	00c001c4 	movi	r3,7
   28628:	1941c20e 	bge	r3,r5,28d34 <___vfiprintf_internal_r+0xd18>
   2862c:	1002531e 	bne	r2,zero,28f7c <___vfiprintf_internal_r+0xf60>
   28630:	d8001b15 	stw	zero,108(sp)
   28634:	8c40010c 	andi	r17,r17,4
   28638:	88023226 	beq	r17,zero,28f04 <___vfiprintf_internal_r+0xee8>
   2863c:	d9002517 	ldw	r4,148(sp)
   28640:	24e3c83a 	sub	r17,r4,r19
   28644:	04432916 	blt	zero,r17,292ec <___vfiprintf_internal_r+0x12d0>
   28648:	d8802517 	ldw	r2,148(sp)
   2864c:	14c0010e 	bge	r2,r19,28654 <___vfiprintf_internal_r+0x638>
   28650:	9805883a 	mov	r2,r19
   28654:	d8c02417 	ldw	r3,144(sp)
   28658:	1887883a 	add	r3,r3,r2
   2865c:	d8c02415 	stw	r3,144(sp)
   28660:	d8001b15 	stw	zero,108(sp)
   28664:	d811883a 	mov	r8,sp
   28668:	003ea006 	br	280ec <_gp+0xfffed234>
   2866c:	8c400814 	ori	r17,r17,32
   28670:	b0c00007 	ldb	r3,0(r22)
   28674:	003ec606 	br	28190 <_gp+0xfffed2d8>
   28678:	b0c00007 	ldb	r3,0(r22)
   2867c:	00801b04 	movi	r2,108
   28680:	18832026 	beq	r3,r2,29304 <___vfiprintf_internal_r+0x12e8>
   28684:	8c400414 	ori	r17,r17,16
   28688:	003ec106 	br	28190 <_gp+0xfffed2d8>
   2868c:	9cc03fcc 	andi	r19,r19,255
   28690:	b811883a 	mov	r8,r23
   28694:	9803981e 	bne	r19,zero,294f8 <___vfiprintf_internal_r+0x14dc>
   28698:	8880080c 	andi	r2,r17,32
   2869c:	1002be26 	beq	r2,zero,29198 <___vfiprintf_internal_r+0x117c>
   286a0:	d9002217 	ldw	r4,136(sp)
   286a4:	d9402417 	ldw	r5,144(sp)
   286a8:	20800017 	ldw	r2,0(r4)
   286ac:	2807d7fa 	srai	r3,r5,31
   286b0:	21000104 	addi	r4,r4,4
   286b4:	d9002215 	stw	r4,136(sp)
   286b8:	11400015 	stw	r5,0(r2)
   286bc:	10c00115 	stw	r3,4(r2)
   286c0:	003e8a06 	br	280ec <_gp+0xfffed234>
   286c4:	9cc03fcc 	andi	r19,r19,255
   286c8:	b811883a 	mov	r8,r23
   286cc:	9803871e 	bne	r19,zero,294ec <___vfiprintf_internal_r+0x14d0>
   286d0:	8880080c 	andi	r2,r17,32
   286d4:	10009a26 	beq	r2,zero,28940 <___vfiprintf_internal_r+0x924>
   286d8:	d9002217 	ldw	r4,136(sp)
   286dc:	d8001d85 	stb	zero,118(sp)
   286e0:	20800204 	addi	r2,r4,8
   286e4:	24c00017 	ldw	r19,0(r4)
   286e8:	25000117 	ldw	r20,4(r4)
   286ec:	8002a416 	blt	r16,zero,29180 <___vfiprintf_internal_r+0x1164>
   286f0:	013fdfc4 	movi	r4,-129
   286f4:	9d06b03a 	or	r3,r19,r20
   286f8:	d8802215 	stw	r2,136(sp)
   286fc:	8922703a 	and	r17,r17,r4
   28700:	18009b26 	beq	r3,zero,28970 <___vfiprintf_internal_r+0x954>
   28704:	002b883a 	mov	r21,zero
   28708:	ddc01a04 	addi	r23,sp,104
   2870c:	9806d0fa 	srli	r3,r19,3
   28710:	a008977a 	slli	r4,r20,29
   28714:	a028d0fa 	srli	r20,r20,3
   28718:	9cc001cc 	andi	r19,r19,7
   2871c:	98800c04 	addi	r2,r19,48
   28720:	bdffffc4 	addi	r23,r23,-1
   28724:	20e6b03a 	or	r19,r4,r3
   28728:	b8800005 	stb	r2,0(r23)
   2872c:	9d06b03a 	or	r3,r19,r20
   28730:	183ff61e 	bne	r3,zero,2870c <_gp+0xfffed854>
   28734:	88c0004c 	andi	r3,r17,1
   28738:	18021f1e 	bne	r3,zero,28fb8 <___vfiprintf_internal_r+0xf9c>
   2873c:	d9401e17 	ldw	r5,120(sp)
   28740:	2de9c83a 	sub	r20,r5,r23
   28744:	003f3806 	br	28428 <_gp+0xfffed570>
   28748:	9cc03fcc 	andi	r19,r19,255
   2874c:	b811883a 	mov	r8,r23
   28750:	98034f1e 	bne	r19,zero,29490 <___vfiprintf_internal_r+0x1474>
   28754:	008000f4 	movhi	r2,3
   28758:	10836404 	addi	r2,r2,3472
   2875c:	d8802615 	stw	r2,152(sp)
   28760:	8880080c 	andi	r2,r17,32
   28764:	1000ac26 	beq	r2,zero,28a18 <___vfiprintf_internal_r+0x9fc>
   28768:	d9002217 	ldw	r4,136(sp)
   2876c:	24c00017 	ldw	r19,0(r4)
   28770:	25000117 	ldw	r20,4(r4)
   28774:	21000204 	addi	r4,r4,8
   28778:	d9002215 	stw	r4,136(sp)
   2877c:	8880004c 	andi	r2,r17,1
   28780:	1001e726 	beq	r2,zero,28f20 <___vfiprintf_internal_r+0xf04>
   28784:	9d04b03a 	or	r2,r19,r20
   28788:	10025c1e 	bne	r2,zero,290fc <___vfiprintf_internal_r+0x10e0>
   2878c:	d8001d85 	stb	zero,118(sp)
   28790:	80024416 	blt	r16,zero,290a4 <___vfiprintf_internal_r+0x1088>
   28794:	00bfdfc4 	movi	r2,-129
   28798:	88a2703a 	and	r17,r17,r2
   2879c:	003f1d06 	br	28414 <_gp+0xfffed55c>
   287a0:	d8c02217 	ldw	r3,136(sp)
   287a4:	04c00044 	movi	r19,1
   287a8:	b811883a 	mov	r8,r23
   287ac:	18800017 	ldw	r2,0(r3)
   287b0:	18c00104 	addi	r3,r3,4
   287b4:	d8001d85 	stb	zero,118(sp)
   287b8:	d8801005 	stb	r2,64(sp)
   287bc:	d8c02215 	stw	r3,136(sp)
   287c0:	9829883a 	mov	r20,r19
   287c4:	ddc01004 	addi	r23,sp,64
   287c8:	0021883a 	mov	r16,zero
   287cc:	003f1e06 	br	28448 <_gp+0xfffed590>
   287d0:	9cc03fcc 	andi	r19,r19,255
   287d4:	b811883a 	mov	r8,r23
   287d8:	9803331e 	bne	r19,zero,294a8 <___vfiprintf_internal_r+0x148c>
   287dc:	8880080c 	andi	r2,r17,32
   287e0:	10004826 	beq	r2,zero,28904 <___vfiprintf_internal_r+0x8e8>
   287e4:	d9002217 	ldw	r4,136(sp)
   287e8:	20800117 	ldw	r2,4(r4)
   287ec:	24c00017 	ldw	r19,0(r4)
   287f0:	21000204 	addi	r4,r4,8
   287f4:	d9002215 	stw	r4,136(sp)
   287f8:	1029883a 	mov	r20,r2
   287fc:	10024c16 	blt	r2,zero,29130 <___vfiprintf_internal_r+0x1114>
   28800:	dd401d83 	ldbu	r21,118(sp)
   28804:	80007116 	blt	r16,zero,289cc <___vfiprintf_internal_r+0x9b0>
   28808:	00ffdfc4 	movi	r3,-129
   2880c:	9d04b03a 	or	r2,r19,r20
   28810:	88e2703a 	and	r17,r17,r3
   28814:	1000d126 	beq	r2,zero,28b5c <___vfiprintf_internal_r+0xb40>
   28818:	a0023526 	beq	r20,zero,290f0 <___vfiprintf_internal_r+0x10d4>
   2881c:	ddc01a04 	addi	r23,sp,104
   28820:	4039883a 	mov	fp,r8
   28824:	9809883a 	mov	r4,r19
   28828:	a00b883a 	mov	r5,r20
   2882c:	01800284 	movi	r6,10
   28830:	000f883a 	mov	r7,zero
   28834:	002a5480 	call	2a548 <__umoddi3>
   28838:	10800c04 	addi	r2,r2,48
   2883c:	bdffffc4 	addi	r23,r23,-1
   28840:	9809883a 	mov	r4,r19
   28844:	a00b883a 	mov	r5,r20
   28848:	b8800005 	stb	r2,0(r23)
   2884c:	01800284 	movi	r6,10
   28850:	000f883a 	mov	r7,zero
   28854:	0029f4c0 	call	29f4c <__udivdi3>
   28858:	1027883a 	mov	r19,r2
   2885c:	10c4b03a 	or	r2,r2,r3
   28860:	1829883a 	mov	r20,r3
   28864:	103fef1e 	bne	r2,zero,28824 <_gp+0xfffed96c>
   28868:	d9001e17 	ldw	r4,120(sp)
   2886c:	e011883a 	mov	r8,fp
   28870:	25e9c83a 	sub	r20,r4,r23
   28874:	003eec06 	br	28428 <_gp+0xfffed570>
   28878:	d8802307 	ldb	r2,140(sp)
   2887c:	1002361e 	bne	r2,zero,29158 <___vfiprintf_internal_r+0x113c>
   28880:	00c00804 	movi	r3,32
   28884:	d8c02305 	stb	r3,140(sp)
   28888:	04c00044 	movi	r19,1
   2888c:	b0c00007 	ldb	r3,0(r22)
   28890:	003e3f06 	br	28190 <_gp+0xfffed2d8>
   28894:	8c400054 	ori	r17,r17,1
   28898:	b0c00007 	ldb	r3,0(r22)
   2889c:	003e3c06 	br	28190 <_gp+0xfffed2d8>
   288a0:	8c402014 	ori	r17,r17,128
   288a4:	b0c00007 	ldb	r3,0(r22)
   288a8:	003e3906 	br	28190 <_gp+0xfffed2d8>
   288ac:	dc002715 	stw	r16,156(sp)
   288b0:	d8002515 	stw	zero,148(sp)
   288b4:	1f3ff404 	addi	fp,r3,-48
   288b8:	0009883a 	mov	r4,zero
   288bc:	b021883a 	mov	r16,r22
   288c0:	01400284 	movi	r5,10
   288c4:	00206240 	call	20624 <__mulsi3>
   288c8:	80c00007 	ldb	r3,0(r16)
   288cc:	e089883a 	add	r4,fp,r2
   288d0:	b5800044 	addi	r22,r22,1
   288d4:	1f3ff404 	addi	fp,r3,-48
   288d8:	b021883a 	mov	r16,r22
   288dc:	af3ff82e 	bgeu	r21,fp,288c0 <_gp+0xfffeda08>
   288e0:	d9002515 	stw	r4,148(sp)
   288e4:	dc002717 	ldw	r16,156(sp)
   288e8:	003e2a06 	br	28194 <_gp+0xfffed2dc>
   288ec:	9cc03fcc 	andi	r19,r19,255
   288f0:	b811883a 	mov	r8,r23
   288f4:	9802e91e 	bne	r19,zero,2949c <___vfiprintf_internal_r+0x1480>
   288f8:	8c400414 	ori	r17,r17,16
   288fc:	8880080c 	andi	r2,r17,32
   28900:	103fb81e 	bne	r2,zero,287e4 <_gp+0xfffed92c>
   28904:	8880040c 	andi	r2,r17,16
   28908:	10022e26 	beq	r2,zero,291c4 <___vfiprintf_internal_r+0x11a8>
   2890c:	d9402217 	ldw	r5,136(sp)
   28910:	2cc00017 	ldw	r19,0(r5)
   28914:	29400104 	addi	r5,r5,4
   28918:	d9402215 	stw	r5,136(sp)
   2891c:	9829d7fa 	srai	r20,r19,31
   28920:	a005883a 	mov	r2,r20
   28924:	003fb506 	br	287fc <_gp+0xfffed944>
   28928:	9cc03fcc 	andi	r19,r19,255
   2892c:	b811883a 	mov	r8,r23
   28930:	9802fa1e 	bne	r19,zero,2951c <___vfiprintf_internal_r+0x1500>
   28934:	8c400414 	ori	r17,r17,16
   28938:	8880080c 	andi	r2,r17,32
   2893c:	103f661e 	bne	r2,zero,286d8 <_gp+0xfffed820>
   28940:	8880040c 	andi	r2,r17,16
   28944:	10020626 	beq	r2,zero,29160 <___vfiprintf_internal_r+0x1144>
   28948:	d9402217 	ldw	r5,136(sp)
   2894c:	d8001d85 	stb	zero,118(sp)
   28950:	0029883a 	mov	r20,zero
   28954:	28800104 	addi	r2,r5,4
   28958:	2cc00017 	ldw	r19,0(r5)
   2895c:	80020816 	blt	r16,zero,29180 <___vfiprintf_internal_r+0x1164>
   28960:	00ffdfc4 	movi	r3,-129
   28964:	d8802215 	stw	r2,136(sp)
   28968:	88e2703a 	and	r17,r17,r3
   2896c:	983f651e 	bne	r19,zero,28704 <_gp+0xfffed84c>
   28970:	002b883a 	mov	r21,zero
   28974:	8002cf26 	beq	r16,zero,294b4 <___vfiprintf_internal_r+0x1498>
   28978:	0027883a 	mov	r19,zero
   2897c:	0029883a 	mov	r20,zero
   28980:	003f6106 	br	28708 <_gp+0xfffed850>
   28984:	9cc03fcc 	andi	r19,r19,255
   28988:	b811883a 	mov	r8,r23
   2898c:	9802e01e 	bne	r19,zero,29510 <___vfiprintf_internal_r+0x14f4>
   28990:	8c400414 	ori	r17,r17,16
   28994:	8880080c 	andi	r2,r17,32
   28998:	1000641e 	bne	r2,zero,28b2c <___vfiprintf_internal_r+0xb10>
   2899c:	8880040c 	andi	r2,r17,16
   289a0:	1001c81e 	bne	r2,zero,290c4 <___vfiprintf_internal_r+0x10a8>
   289a4:	8880100c 	andi	r2,r17,64
   289a8:	d8001d85 	stb	zero,118(sp)
   289ac:	1002281e 	bne	r2,zero,29250 <___vfiprintf_internal_r+0x1234>
   289b0:	d9002217 	ldw	r4,136(sp)
   289b4:	0029883a 	mov	r20,zero
   289b8:	20800104 	addi	r2,r4,4
   289bc:	24c00017 	ldw	r19,0(r4)
   289c0:	8001c60e 	bge	r16,zero,290dc <___vfiprintf_internal_r+0x10c0>
   289c4:	d8802215 	stw	r2,136(sp)
   289c8:	002b883a 	mov	r21,zero
   289cc:	9d04b03a 	or	r2,r19,r20
   289d0:	103f911e 	bne	r2,zero,28818 <_gp+0xfffed960>
   289d4:	00800044 	movi	r2,1
   289d8:	10803fcc 	andi	r2,r2,255
   289dc:	00c00044 	movi	r3,1
   289e0:	10c05f26 	beq	r2,r3,28b60 <___vfiprintf_internal_r+0xb44>
   289e4:	00c00084 	movi	r3,2
   289e8:	10ffe31e 	bne	r2,r3,28978 <_gp+0xfffedac0>
   289ec:	0027883a 	mov	r19,zero
   289f0:	0029883a 	mov	r20,zero
   289f4:	00015106 	br	28f3c <___vfiprintf_internal_r+0xf20>
   289f8:	9cc03fcc 	andi	r19,r19,255
   289fc:	b811883a 	mov	r8,r23
   28a00:	9802c01e 	bne	r19,zero,29504 <___vfiprintf_internal_r+0x14e8>
   28a04:	014000f4 	movhi	r5,3
   28a08:	29435f04 	addi	r5,r5,3452
   28a0c:	d9402615 	stw	r5,152(sp)
   28a10:	8880080c 	andi	r2,r17,32
   28a14:	103f541e 	bne	r2,zero,28768 <_gp+0xfffed8b0>
   28a18:	8880040c 	andi	r2,r17,16
   28a1c:	1001f226 	beq	r2,zero,291e8 <___vfiprintf_internal_r+0x11cc>
   28a20:	d9402217 	ldw	r5,136(sp)
   28a24:	0029883a 	mov	r20,zero
   28a28:	2cc00017 	ldw	r19,0(r5)
   28a2c:	29400104 	addi	r5,r5,4
   28a30:	d9402215 	stw	r5,136(sp)
   28a34:	003f5106 	br	2877c <_gp+0xfffed8c4>
   28a38:	d8c02217 	ldw	r3,136(sp)
   28a3c:	b811883a 	mov	r8,r23
   28a40:	d8001d85 	stb	zero,118(sp)
   28a44:	1dc00017 	ldw	r23,0(r3)
   28a48:	1f000104 	addi	fp,r3,4
   28a4c:	b8025926 	beq	r23,zero,293b4 <___vfiprintf_internal_r+0x1398>
   28a50:	80023316 	blt	r16,zero,29320 <___vfiprintf_internal_r+0x1304>
   28a54:	800d883a 	mov	r6,r16
   28a58:	000b883a 	mov	r5,zero
   28a5c:	b809883a 	mov	r4,r23
   28a60:	da002a15 	stw	r8,168(sp)
   28a64:	002615c0 	call	2615c <memchr>
   28a68:	da002a17 	ldw	r8,168(sp)
   28a6c:	10026826 	beq	r2,zero,29410 <___vfiprintf_internal_r+0x13f4>
   28a70:	15e9c83a 	sub	r20,r2,r23
   28a74:	dd401d83 	ldbu	r21,118(sp)
   28a78:	df002215 	stw	fp,136(sp)
   28a7c:	0021883a 	mov	r16,zero
   28a80:	003e6906 	br	28428 <_gp+0xfffed570>
   28a84:	9cc03fcc 	andi	r19,r19,255
   28a88:	b811883a 	mov	r8,r23
   28a8c:	983fc126 	beq	r19,zero,28994 <_gp+0xfffedadc>
   28a90:	d8c02303 	ldbu	r3,140(sp)
   28a94:	d8c01d85 	stb	r3,118(sp)
   28a98:	003fbe06 	br	28994 <_gp+0xfffedadc>
   28a9c:	d9002217 	ldw	r4,136(sp)
   28aa0:	d9402217 	ldw	r5,136(sp)
   28aa4:	21000017 	ldw	r4,0(r4)
   28aa8:	28800104 	addi	r2,r5,4
   28aac:	d9002515 	stw	r4,148(sp)
   28ab0:	203e3d16 	blt	r4,zero,283a8 <_gp+0xfffed4f0>
   28ab4:	d8802215 	stw	r2,136(sp)
   28ab8:	b0c00007 	ldb	r3,0(r22)
   28abc:	003db406 	br	28190 <_gp+0xfffed2d8>
   28ac0:	00c00ac4 	movi	r3,43
   28ac4:	d8c02305 	stb	r3,140(sp)
   28ac8:	04c00044 	movi	r19,1
   28acc:	b0c00007 	ldb	r3,0(r22)
   28ad0:	003daf06 	br	28190 <_gp+0xfffed2d8>
   28ad4:	b0c00007 	ldb	r3,0(r22)
   28ad8:	01000a84 	movi	r4,42
   28adc:	b4000044 	addi	r16,r22,1
   28ae0:	19025e26 	beq	r3,r4,2945c <___vfiprintf_internal_r+0x1440>
   28ae4:	1f3ff404 	addi	fp,r3,-48
   28ae8:	0009883a 	mov	r4,zero
   28aec:	af025236 	bltu	r21,fp,29438 <___vfiprintf_internal_r+0x141c>
   28af0:	01400284 	movi	r5,10
   28af4:	00206240 	call	20624 <__mulsi3>
   28af8:	80c00007 	ldb	r3,0(r16)
   28afc:	1709883a 	add	r4,r2,fp
   28b00:	85800044 	addi	r22,r16,1
   28b04:	1f3ff404 	addi	fp,r3,-48
   28b08:	b021883a 	mov	r16,r22
   28b0c:	af3ff82e 	bgeu	r21,fp,28af0 <_gp+0xfffedc38>
   28b10:	2021883a 	mov	r16,r4
   28b14:	203d9f0e 	bge	r4,zero,28194 <_gp+0xfffed2dc>
   28b18:	043fffc4 	movi	r16,-1
   28b1c:	003d9d06 	br	28194 <_gp+0xfffed2dc>
   28b20:	8c401014 	ori	r17,r17,64
   28b24:	b0c00007 	ldb	r3,0(r22)
   28b28:	003d9906 	br	28190 <_gp+0xfffed2d8>
   28b2c:	d9002217 	ldw	r4,136(sp)
   28b30:	d8001d85 	stb	zero,118(sp)
   28b34:	20c00204 	addi	r3,r4,8
   28b38:	24c00017 	ldw	r19,0(r4)
   28b3c:	25000117 	ldw	r20,4(r4)
   28b40:	8001e716 	blt	r16,zero,292e0 <___vfiprintf_internal_r+0x12c4>
   28b44:	013fdfc4 	movi	r4,-129
   28b48:	9d04b03a 	or	r2,r19,r20
   28b4c:	d8c02215 	stw	r3,136(sp)
   28b50:	8922703a 	and	r17,r17,r4
   28b54:	002b883a 	mov	r21,zero
   28b58:	103f2f1e 	bne	r2,zero,28818 <_gp+0xfffed960>
   28b5c:	803e2f26 	beq	r16,zero,2841c <_gp+0xfffed564>
   28b60:	0027883a 	mov	r19,zero
   28b64:	9cc00c04 	addi	r19,r19,48
   28b68:	dcc019c5 	stb	r19,103(sp)
   28b6c:	dd002817 	ldw	r20,160(sp)
   28b70:	ddc019c4 	addi	r23,sp,103
   28b74:	003e2c06 	br	28428 <_gp+0xfffed570>
   28b78:	9cc03fcc 	andi	r19,r19,255
   28b7c:	b811883a 	mov	r8,r23
   28b80:	9802571e 	bne	r19,zero,294e0 <___vfiprintf_internal_r+0x14c4>
   28b84:	18005726 	beq	r3,zero,28ce4 <___vfiprintf_internal_r+0xcc8>
   28b88:	04c00044 	movi	r19,1
   28b8c:	d8c01005 	stb	r3,64(sp)
   28b90:	d8001d85 	stb	zero,118(sp)
   28b94:	9829883a 	mov	r20,r19
   28b98:	ddc01004 	addi	r23,sp,64
   28b9c:	003f0a06 	br	287c8 <_gp+0xfffed910>
   28ba0:	d9402017 	ldw	r5,128(sp)
   28ba4:	d9002117 	ldw	r4,132(sp)
   28ba8:	d9801a04 	addi	r6,sp,104
   28bac:	da802a15 	stw	r10,168(sp)
   28bb0:	0027f080 	call	27f08 <__sprint_r.part.0>
   28bb4:	da802a17 	ldw	r10,168(sp)
   28bb8:	1000501e 	bne	r2,zero,28cfc <___vfiprintf_internal_r+0xce0>
   28bbc:	d9801b17 	ldw	r6,108(sp)
   28bc0:	d8801c17 	ldw	r2,112(sp)
   28bc4:	d811883a 	mov	r8,sp
   28bc8:	31000044 	addi	r4,r6,1
   28bcc:	003e3606 	br	284a8 <_gp+0xfffed5f0>
   28bd0:	d9001b17 	ldw	r4,108(sp)
   28bd4:	d8801c17 	ldw	r2,112(sp)
   28bd8:	21400044 	addi	r5,r4,1
   28bdc:	d9801d87 	ldb	r6,118(sp)
   28be0:	303e5226 	beq	r6,zero,2852c <_gp+0xfffed674>
   28be4:	01800044 	movi	r6,1
   28be8:	d9001d84 	addi	r4,sp,118
   28bec:	1185883a 	add	r2,r2,r6
   28bf0:	41000015 	stw	r4,0(r8)
   28bf4:	41800115 	stw	r6,4(r8)
   28bf8:	d8801c15 	stw	r2,112(sp)
   28bfc:	d9401b15 	stw	r5,108(sp)
   28c00:	010001c4 	movi	r4,7
   28c04:	2140b00e 	bge	r4,r5,28ec8 <___vfiprintf_internal_r+0xeac>
   28c08:	1000f61e 	bne	r2,zero,28fe4 <___vfiprintf_internal_r+0xfc8>
   28c0c:	3800b31e 	bne	r7,zero,28edc <___vfiprintf_internal_r+0xec0>
   28c10:	0009883a 	mov	r4,zero
   28c14:	300b883a 	mov	r5,r6
   28c18:	d811883a 	mov	r8,sp
   28c1c:	01802004 	movi	r6,128
   28c20:	19be5226 	beq	r3,r6,2856c <_gp+0xfffed6b4>
   28c24:	8521c83a 	sub	r16,r16,r20
   28c28:	043e790e 	bge	zero,r16,28610 <_gp+0xfffed758>
   28c2c:	05400404 	movi	r21,16
   28c30:	ac01b00e 	bge	r21,r16,292f4 <___vfiprintf_internal_r+0x12d8>
   28c34:	014000f4 	movhi	r5,3
   28c38:	2943c504 	addi	r5,r5,3860
   28c3c:	d9402315 	stw	r5,140(sp)
   28c40:	070001c4 	movi	fp,7
   28c44:	00000506 	br	28c5c <___vfiprintf_internal_r+0xc40>
   28c48:	21400084 	addi	r5,r4,2
   28c4c:	42000204 	addi	r8,r8,8
   28c50:	1809883a 	mov	r4,r3
   28c54:	843ffc04 	addi	r16,r16,-16
   28c58:	ac000d0e 	bge	r21,r16,28c90 <___vfiprintf_internal_r+0xc74>
   28c5c:	10800404 	addi	r2,r2,16
   28c60:	20c00044 	addi	r3,r4,1
   28c64:	44800015 	stw	r18,0(r8)
   28c68:	45400115 	stw	r21,4(r8)
   28c6c:	d8801c15 	stw	r2,112(sp)
   28c70:	d8c01b15 	stw	r3,108(sp)
   28c74:	e0fff40e 	bge	fp,r3,28c48 <_gp+0xfffedd90>
   28c78:	1000101e 	bne	r2,zero,28cbc <___vfiprintf_internal_r+0xca0>
   28c7c:	843ffc04 	addi	r16,r16,-16
   28c80:	01400044 	movi	r5,1
   28c84:	0009883a 	mov	r4,zero
   28c88:	d811883a 	mov	r8,sp
   28c8c:	ac3ff316 	blt	r21,r16,28c5c <_gp+0xfffedda4>
   28c90:	d8c02317 	ldw	r3,140(sp)
   28c94:	1405883a 	add	r2,r2,r16
   28c98:	44000115 	stw	r16,4(r8)
   28c9c:	40c00015 	stw	r3,0(r8)
   28ca0:	d8801c15 	stw	r2,112(sp)
   28ca4:	d9401b15 	stw	r5,108(sp)
   28ca8:	00c001c4 	movi	r3,7
   28cac:	19401916 	blt	r3,r5,28d14 <___vfiprintf_internal_r+0xcf8>
   28cb0:	42000204 	addi	r8,r8,8
   28cb4:	29400044 	addi	r5,r5,1
   28cb8:	003e5506 	br	28610 <_gp+0xfffed758>
   28cbc:	d9402017 	ldw	r5,128(sp)
   28cc0:	d9002117 	ldw	r4,132(sp)
   28cc4:	d9801a04 	addi	r6,sp,104
   28cc8:	0027f080 	call	27f08 <__sprint_r.part.0>
   28ccc:	10000b1e 	bne	r2,zero,28cfc <___vfiprintf_internal_r+0xce0>
   28cd0:	d9001b17 	ldw	r4,108(sp)
   28cd4:	d8801c17 	ldw	r2,112(sp)
   28cd8:	d811883a 	mov	r8,sp
   28cdc:	21400044 	addi	r5,r4,1
   28ce0:	003fdc06 	br	28c54 <_gp+0xfffedd9c>
   28ce4:	d8801c17 	ldw	r2,112(sp)
   28ce8:	10000426 	beq	r2,zero,28cfc <___vfiprintf_internal_r+0xce0>
   28cec:	d9402017 	ldw	r5,128(sp)
   28cf0:	d9002117 	ldw	r4,132(sp)
   28cf4:	d9801a04 	addi	r6,sp,104
   28cf8:	0027f080 	call	27f08 <__sprint_r.part.0>
   28cfc:	d9402017 	ldw	r5,128(sp)
   28d00:	2880030b 	ldhu	r2,12(r5)
   28d04:	1080100c 	andi	r2,r2,64
   28d08:	10014d1e 	bne	r2,zero,29240 <___vfiprintf_internal_r+0x1224>
   28d0c:	d8802417 	ldw	r2,144(sp)
   28d10:	003d9706 	br	28370 <_gp+0xfffed4b8>
   28d14:	1000d21e 	bne	r2,zero,29060 <___vfiprintf_internal_r+0x1044>
   28d18:	00c00044 	movi	r3,1
   28d1c:	a005883a 	mov	r2,r20
   28d20:	ddc00015 	stw	r23,0(sp)
   28d24:	dd000115 	stw	r20,4(sp)
   28d28:	dd001c15 	stw	r20,112(sp)
   28d2c:	d8c01b15 	stw	r3,108(sp)
   28d30:	d811883a 	mov	r8,sp
   28d34:	42000204 	addi	r8,r8,8
   28d38:	8c40010c 	andi	r17,r17,4
   28d3c:	88004026 	beq	r17,zero,28e40 <___vfiprintf_internal_r+0xe24>
   28d40:	d9002517 	ldw	r4,148(sp)
   28d44:	24e3c83a 	sub	r17,r4,r19
   28d48:	04403d0e 	bge	zero,r17,28e40 <___vfiprintf_internal_r+0xe24>
   28d4c:	04000404 	movi	r16,16
   28d50:	8441a90e 	bge	r16,r17,293f8 <___vfiprintf_internal_r+0x13dc>
   28d54:	00c000f4 	movhi	r3,3
   28d58:	18c3c904 	addi	r3,r3,3876
   28d5c:	d9001b17 	ldw	r4,108(sp)
   28d60:	d8c02315 	stw	r3,140(sp)
   28d64:	050001c4 	movi	r20,7
   28d68:	dd402117 	ldw	r21,132(sp)
   28d6c:	ddc02017 	ldw	r23,128(sp)
   28d70:	00000506 	br	28d88 <___vfiprintf_internal_r+0xd6c>
   28d74:	21400084 	addi	r5,r4,2
   28d78:	42000204 	addi	r8,r8,8
   28d7c:	1809883a 	mov	r4,r3
   28d80:	8c7ffc04 	addi	r17,r17,-16
   28d84:	84400f0e 	bge	r16,r17,28dc4 <___vfiprintf_internal_r+0xda8>
   28d88:	014000f4 	movhi	r5,3
   28d8c:	10800404 	addi	r2,r2,16
   28d90:	20c00044 	addi	r3,r4,1
   28d94:	2943c904 	addi	r5,r5,3876
   28d98:	41400015 	stw	r5,0(r8)
   28d9c:	44000115 	stw	r16,4(r8)
   28da0:	d8801c15 	stw	r2,112(sp)
   28da4:	d8c01b15 	stw	r3,108(sp)
   28da8:	a0fff20e 	bge	r20,r3,28d74 <_gp+0xfffedebc>
   28dac:	1000141e 	bne	r2,zero,28e00 <___vfiprintf_internal_r+0xde4>
   28db0:	8c7ffc04 	addi	r17,r17,-16
   28db4:	01400044 	movi	r5,1
   28db8:	0009883a 	mov	r4,zero
   28dbc:	d811883a 	mov	r8,sp
   28dc0:	847ff116 	blt	r16,r17,28d88 <_gp+0xfffeded0>
   28dc4:	d8c02317 	ldw	r3,140(sp)
   28dc8:	1445883a 	add	r2,r2,r17
   28dcc:	44400115 	stw	r17,4(r8)
   28dd0:	40c00015 	stw	r3,0(r8)
   28dd4:	d8801c15 	stw	r2,112(sp)
   28dd8:	d9401b15 	stw	r5,108(sp)
   28ddc:	00c001c4 	movi	r3,7
   28de0:	1940170e 	bge	r3,r5,28e40 <___vfiprintf_internal_r+0xe24>
   28de4:	1000101e 	bne	r2,zero,28e28 <___vfiprintf_internal_r+0xe0c>
   28de8:	d8802517 	ldw	r2,148(sp)
   28dec:	14c11616 	blt	r2,r19,29248 <___vfiprintf_internal_r+0x122c>
   28df0:	d9002417 	ldw	r4,144(sp)
   28df4:	2089883a 	add	r4,r4,r2
   28df8:	d9002415 	stw	r4,144(sp)
   28dfc:	003e1806 	br	28660 <_gp+0xfffed7a8>
   28e00:	d9801a04 	addi	r6,sp,104
   28e04:	b80b883a 	mov	r5,r23
   28e08:	a809883a 	mov	r4,r21
   28e0c:	0027f080 	call	27f08 <__sprint_r.part.0>
   28e10:	103fba1e 	bne	r2,zero,28cfc <_gp+0xfffede44>
   28e14:	d9001b17 	ldw	r4,108(sp)
   28e18:	d8801c17 	ldw	r2,112(sp)
   28e1c:	d811883a 	mov	r8,sp
   28e20:	21400044 	addi	r5,r4,1
   28e24:	003fd606 	br	28d80 <_gp+0xfffedec8>
   28e28:	d9402017 	ldw	r5,128(sp)
   28e2c:	d9002117 	ldw	r4,132(sp)
   28e30:	d9801a04 	addi	r6,sp,104
   28e34:	0027f080 	call	27f08 <__sprint_r.part.0>
   28e38:	103fb01e 	bne	r2,zero,28cfc <_gp+0xfffede44>
   28e3c:	d8801c17 	ldw	r2,112(sp)
   28e40:	d8c02517 	ldw	r3,148(sp)
   28e44:	1cc0010e 	bge	r3,r19,28e4c <___vfiprintf_internal_r+0xe30>
   28e48:	9807883a 	mov	r3,r19
   28e4c:	d9002417 	ldw	r4,144(sp)
   28e50:	20c9883a 	add	r4,r4,r3
   28e54:	d9002415 	stw	r4,144(sp)
   28e58:	103e0126 	beq	r2,zero,28660 <_gp+0xfffed7a8>
   28e5c:	d9402017 	ldw	r5,128(sp)
   28e60:	d9002117 	ldw	r4,132(sp)
   28e64:	d9801a04 	addi	r6,sp,104
   28e68:	0027f080 	call	27f08 <__sprint_r.part.0>
   28e6c:	103dfc26 	beq	r2,zero,28660 <_gp+0xfffed7a8>
   28e70:	003fa206 	br	28cfc <_gp+0xfffede44>
   28e74:	d9402017 	ldw	r5,128(sp)
   28e78:	d9002117 	ldw	r4,132(sp)
   28e7c:	d9801a04 	addi	r6,sp,104
   28e80:	d9c02b15 	stw	r7,172(sp)
   28e84:	0027f080 	call	27f08 <__sprint_r.part.0>
   28e88:	d9c02b17 	ldw	r7,172(sp)
   28e8c:	103f9b1e 	bne	r2,zero,28cfc <_gp+0xfffede44>
   28e90:	d9001b17 	ldw	r4,108(sp)
   28e94:	d8801c17 	ldw	r2,112(sp)
   28e98:	d811883a 	mov	r8,sp
   28e9c:	21800044 	addi	r6,r4,1
   28ea0:	003dbf06 	br	285a0 <_gp+0xfffed6e8>
   28ea4:	1000d81e 	bne	r2,zero,29208 <___vfiprintf_internal_r+0x11ec>
   28ea8:	d9001d87 	ldb	r4,118(sp)
   28eac:	20000a26 	beq	r4,zero,28ed8 <___vfiprintf_internal_r+0xebc>
   28eb0:	00800044 	movi	r2,1
   28eb4:	d9001d84 	addi	r4,sp,118
   28eb8:	100b883a 	mov	r5,r2
   28ebc:	d9000015 	stw	r4,0(sp)
   28ec0:	d8800115 	stw	r2,4(sp)
   28ec4:	d811883a 	mov	r8,sp
   28ec8:	2809883a 	mov	r4,r5
   28ecc:	42000204 	addi	r8,r8,8
   28ed0:	29400044 	addi	r5,r5,1
   28ed4:	003d9506 	br	2852c <_gp+0xfffed674>
   28ed8:	3800fd26 	beq	r7,zero,292d0 <___vfiprintf_internal_r+0x12b4>
   28edc:	00800084 	movi	r2,2
   28ee0:	d9001d04 	addi	r4,sp,116
   28ee4:	d9000015 	stw	r4,0(sp)
   28ee8:	d8800115 	stw	r2,4(sp)
   28eec:	01400044 	movi	r5,1
   28ef0:	d811883a 	mov	r8,sp
   28ef4:	2809883a 	mov	r4,r5
   28ef8:	42000204 	addi	r8,r8,8
   28efc:	29400044 	addi	r5,r5,1
   28f00:	003f4606 	br	28c1c <_gp+0xfffedd64>
   28f04:	d8802517 	ldw	r2,148(sp)
   28f08:	14c0010e 	bge	r2,r19,28f10 <___vfiprintf_internal_r+0xef4>
   28f0c:	9805883a 	mov	r2,r19
   28f10:	d9402417 	ldw	r5,144(sp)
   28f14:	288b883a 	add	r5,r5,r2
   28f18:	d9402415 	stw	r5,144(sp)
   28f1c:	003dd006 	br	28660 <_gp+0xfffed7a8>
   28f20:	d8001d85 	stb	zero,118(sp)
   28f24:	80005d16 	blt	r16,zero,2909c <___vfiprintf_internal_r+0x1080>
   28f28:	00ffdfc4 	movi	r3,-129
   28f2c:	9d04b03a 	or	r2,r19,r20
   28f30:	88e2703a 	and	r17,r17,r3
   28f34:	103d3726 	beq	r2,zero,28414 <_gp+0xfffed55c>
   28f38:	002b883a 	mov	r21,zero
   28f3c:	d9002617 	ldw	r4,152(sp)
   28f40:	ddc01a04 	addi	r23,sp,104
   28f44:	988003cc 	andi	r2,r19,15
   28f48:	a006973a 	slli	r3,r20,28
   28f4c:	2085883a 	add	r2,r4,r2
   28f50:	9826d13a 	srli	r19,r19,4
   28f54:	10800003 	ldbu	r2,0(r2)
   28f58:	a028d13a 	srli	r20,r20,4
   28f5c:	bdffffc4 	addi	r23,r23,-1
   28f60:	1ce6b03a 	or	r19,r3,r19
   28f64:	b8800005 	stb	r2,0(r23)
   28f68:	9d04b03a 	or	r2,r19,r20
   28f6c:	103ff51e 	bne	r2,zero,28f44 <_gp+0xfffee08c>
   28f70:	d8801e17 	ldw	r2,120(sp)
   28f74:	15e9c83a 	sub	r20,r2,r23
   28f78:	003d2b06 	br	28428 <_gp+0xfffed570>
   28f7c:	d9402017 	ldw	r5,128(sp)
   28f80:	d9002117 	ldw	r4,132(sp)
   28f84:	d9801a04 	addi	r6,sp,104
   28f88:	0027f080 	call	27f08 <__sprint_r.part.0>
   28f8c:	103f5b1e 	bne	r2,zero,28cfc <_gp+0xfffede44>
   28f90:	d8801c17 	ldw	r2,112(sp)
   28f94:	d811883a 	mov	r8,sp
   28f98:	003f6706 	br	28d38 <_gp+0xfffede80>
   28f9c:	d9402017 	ldw	r5,128(sp)
   28fa0:	d9002117 	ldw	r4,132(sp)
   28fa4:	d9801a04 	addi	r6,sp,104
   28fa8:	0027f080 	call	27f08 <__sprint_r.part.0>
   28fac:	103f531e 	bne	r2,zero,28cfc <_gp+0xfffede44>
   28fb0:	d811883a 	mov	r8,sp
   28fb4:	003cd906 	br	2831c <_gp+0xfffed464>
   28fb8:	10803fcc 	andi	r2,r2,255
   28fbc:	1080201c 	xori	r2,r2,128
   28fc0:	10bfe004 	addi	r2,r2,-128
   28fc4:	00c00c04 	movi	r3,48
   28fc8:	10ffe926 	beq	r2,r3,28f70 <_gp+0xfffee0b8>
   28fcc:	b8ffffc5 	stb	r3,-1(r23)
   28fd0:	d8c01e17 	ldw	r3,120(sp)
   28fd4:	b8bfffc4 	addi	r2,r23,-1
   28fd8:	102f883a 	mov	r23,r2
   28fdc:	18a9c83a 	sub	r20,r3,r2
   28fe0:	003d1106 	br	28428 <_gp+0xfffed570>
   28fe4:	d9402017 	ldw	r5,128(sp)
   28fe8:	d9002117 	ldw	r4,132(sp)
   28fec:	d9801a04 	addi	r6,sp,104
   28ff0:	d8c02a15 	stw	r3,168(sp)
   28ff4:	d9c02b15 	stw	r7,172(sp)
   28ff8:	0027f080 	call	27f08 <__sprint_r.part.0>
   28ffc:	d8c02a17 	ldw	r3,168(sp)
   29000:	d9c02b17 	ldw	r7,172(sp)
   29004:	103f3d1e 	bne	r2,zero,28cfc <_gp+0xfffede44>
   29008:	d9001b17 	ldw	r4,108(sp)
   2900c:	d8801c17 	ldw	r2,112(sp)
   29010:	d811883a 	mov	r8,sp
   29014:	21400044 	addi	r5,r4,1
   29018:	003d4406 	br	2852c <_gp+0xfffed674>
   2901c:	d9402017 	ldw	r5,128(sp)
   29020:	d9002117 	ldw	r4,132(sp)
   29024:	d9801a04 	addi	r6,sp,104
   29028:	d8c02a15 	stw	r3,168(sp)
   2902c:	0027f080 	call	27f08 <__sprint_r.part.0>
   29030:	d8c02a17 	ldw	r3,168(sp)
   29034:	103f311e 	bne	r2,zero,28cfc <_gp+0xfffede44>
   29038:	d9001b17 	ldw	r4,108(sp)
   2903c:	d8801c17 	ldw	r2,112(sp)
   29040:	d811883a 	mov	r8,sp
   29044:	21400044 	addi	r5,r4,1
   29048:	003ef406 	br	28c1c <_gp+0xfffedd64>
   2904c:	1000bd1e 	bne	r2,zero,29344 <___vfiprintf_internal_r+0x1328>
   29050:	01400044 	movi	r5,1
   29054:	0009883a 	mov	r4,zero
   29058:	d811883a 	mov	r8,sp
   2905c:	003ef106 	br	28c24 <_gp+0xfffedd6c>
   29060:	d9402017 	ldw	r5,128(sp)
   29064:	d9002117 	ldw	r4,132(sp)
   29068:	d9801a04 	addi	r6,sp,104
   2906c:	0027f080 	call	27f08 <__sprint_r.part.0>
   29070:	103f221e 	bne	r2,zero,28cfc <_gp+0xfffede44>
   29074:	d9401b17 	ldw	r5,108(sp)
   29078:	d8801c17 	ldw	r2,112(sp)
   2907c:	d811883a 	mov	r8,sp
   29080:	29400044 	addi	r5,r5,1
   29084:	003d6206 	br	28610 <_gp+0xfffed758>
   29088:	014000f4 	movhi	r5,3
   2908c:	29436404 	addi	r5,r5,3472
   29090:	d9402615 	stw	r5,152(sp)
   29094:	d8c02215 	stw	r3,136(sp)
   29098:	1023883a 	mov	r17,r2
   2909c:	9d04b03a 	or	r2,r19,r20
   290a0:	103fa51e 	bne	r2,zero,28f38 <_gp+0xfffee080>
   290a4:	002b883a 	mov	r21,zero
   290a8:	00800084 	movi	r2,2
   290ac:	003e4a06 	br	289d8 <_gp+0xfffedb20>
   290b0:	014000f4 	movhi	r5,3
   290b4:	29436404 	addi	r5,r5,3472
   290b8:	002b883a 	mov	r21,zero
   290bc:	d9402615 	stw	r5,152(sp)
   290c0:	003f9e06 	br	28f3c <_gp+0xfffee084>
   290c4:	d9402217 	ldw	r5,136(sp)
   290c8:	d8001d85 	stb	zero,118(sp)
   290cc:	0029883a 	mov	r20,zero
   290d0:	28800104 	addi	r2,r5,4
   290d4:	2cc00017 	ldw	r19,0(r5)
   290d8:	803e3a16 	blt	r16,zero,289c4 <_gp+0xfffedb0c>
   290dc:	00ffdfc4 	movi	r3,-129
   290e0:	d8802215 	stw	r2,136(sp)
   290e4:	88e2703a 	and	r17,r17,r3
   290e8:	002b883a 	mov	r21,zero
   290ec:	983e9b26 	beq	r19,zero,28b5c <_gp+0xfffedca4>
   290f0:	00800244 	movi	r2,9
   290f4:	14fdc936 	bltu	r2,r19,2881c <_gp+0xfffed964>
   290f8:	003e9a06 	br	28b64 <_gp+0xfffedcac>
   290fc:	00800c04 	movi	r2,48
   29100:	d8c01d45 	stb	r3,117(sp)
   29104:	d8801d05 	stb	r2,116(sp)
   29108:	d8001d85 	stb	zero,118(sp)
   2910c:	88c00094 	ori	r3,r17,2
   29110:	80009c16 	blt	r16,zero,29384 <___vfiprintf_internal_r+0x1368>
   29114:	00bfdfc4 	movi	r2,-129
   29118:	88a2703a 	and	r17,r17,r2
   2911c:	8c400094 	ori	r17,r17,2
   29120:	002b883a 	mov	r21,zero
   29124:	003f8506 	br	28f3c <_gp+0xfffee084>
   29128:	b029883a 	mov	r20,r22
   2912c:	003c0b06 	br	2815c <_gp+0xfffed2a4>
   29130:	04e7c83a 	sub	r19,zero,r19
   29134:	05400b44 	movi	r21,45
   29138:	9804c03a 	cmpne	r2,r19,zero
   2913c:	0529c83a 	sub	r20,zero,r20
   29140:	dd401d85 	stb	r21,118(sp)
   29144:	a0a9c83a 	sub	r20,r20,r2
   29148:	80009716 	blt	r16,zero,293a8 <___vfiprintf_internal_r+0x138c>
   2914c:	00bfdfc4 	movi	r2,-129
   29150:	88a2703a 	and	r17,r17,r2
   29154:	003db006 	br	28818 <_gp+0xfffed960>
   29158:	b0c00007 	ldb	r3,0(r22)
   2915c:	003c0c06 	br	28190 <_gp+0xfffed2d8>
   29160:	8880100c 	andi	r2,r17,64
   29164:	d8001d85 	stb	zero,118(sp)
   29168:	1000461e 	bne	r2,zero,29284 <___vfiprintf_internal_r+0x1268>
   2916c:	d9002217 	ldw	r4,136(sp)
   29170:	0029883a 	mov	r20,zero
   29174:	20800104 	addi	r2,r4,4
   29178:	24c00017 	ldw	r19,0(r4)
   2917c:	803df80e 	bge	r16,zero,28960 <_gp+0xfffedaa8>
   29180:	9d06b03a 	or	r3,r19,r20
   29184:	d8802215 	stw	r2,136(sp)
   29188:	183d5e1e 	bne	r3,zero,28704 <_gp+0xfffed84c>
   2918c:	002b883a 	mov	r21,zero
   29190:	0005883a 	mov	r2,zero
   29194:	003e1006 	br	289d8 <_gp+0xfffedb20>
   29198:	8880040c 	andi	r2,r17,16
   2919c:	1000321e 	bne	r2,zero,29268 <___vfiprintf_internal_r+0x124c>
   291a0:	8c40100c 	andi	r17,r17,64
   291a4:	88008d26 	beq	r17,zero,293dc <___vfiprintf_internal_r+0x13c0>
   291a8:	d9402217 	ldw	r5,136(sp)
   291ac:	d8c02417 	ldw	r3,144(sp)
   291b0:	28800017 	ldw	r2,0(r5)
   291b4:	29400104 	addi	r5,r5,4
   291b8:	d9402215 	stw	r5,136(sp)
   291bc:	10c0000d 	sth	r3,0(r2)
   291c0:	003bca06 	br	280ec <_gp+0xfffed234>
   291c4:	8880100c 	andi	r2,r17,64
   291c8:	10003a26 	beq	r2,zero,292b4 <___vfiprintf_internal_r+0x1298>
   291cc:	d8802217 	ldw	r2,136(sp)
   291d0:	14c0000f 	ldh	r19,0(r2)
   291d4:	10800104 	addi	r2,r2,4
   291d8:	d8802215 	stw	r2,136(sp)
   291dc:	9829d7fa 	srai	r20,r19,31
   291e0:	a005883a 	mov	r2,r20
   291e4:	003d8506 	br	287fc <_gp+0xfffed944>
   291e8:	8880100c 	andi	r2,r17,64
   291ec:	10002b26 	beq	r2,zero,2929c <___vfiprintf_internal_r+0x1280>
   291f0:	d8802217 	ldw	r2,136(sp)
   291f4:	0029883a 	mov	r20,zero
   291f8:	14c0000b 	ldhu	r19,0(r2)
   291fc:	10800104 	addi	r2,r2,4
   29200:	d8802215 	stw	r2,136(sp)
   29204:	003d5d06 	br	2877c <_gp+0xfffed8c4>
   29208:	d9402017 	ldw	r5,128(sp)
   2920c:	d9002117 	ldw	r4,132(sp)
   29210:	d9801a04 	addi	r6,sp,104
   29214:	d8c02a15 	stw	r3,168(sp)
   29218:	d9c02b15 	stw	r7,172(sp)
   2921c:	0027f080 	call	27f08 <__sprint_r.part.0>
   29220:	d8c02a17 	ldw	r3,168(sp)
   29224:	d9c02b17 	ldw	r7,172(sp)
   29228:	103eb41e 	bne	r2,zero,28cfc <_gp+0xfffede44>
   2922c:	d9001b17 	ldw	r4,108(sp)
   29230:	d8801c17 	ldw	r2,112(sp)
   29234:	d811883a 	mov	r8,sp
   29238:	21400044 	addi	r5,r4,1
   2923c:	003e6706 	br	28bdc <_gp+0xfffedd24>
   29240:	00bfffc4 	movi	r2,-1
   29244:	003c4a06 	br	28370 <_gp+0xfffed4b8>
   29248:	9805883a 	mov	r2,r19
   2924c:	003ee806 	br	28df0 <_gp+0xfffedf38>
   29250:	d8c02217 	ldw	r3,136(sp)
   29254:	0029883a 	mov	r20,zero
   29258:	18800104 	addi	r2,r3,4
   2925c:	1cc0000b 	ldhu	r19,0(r3)
   29260:	803f9e0e 	bge	r16,zero,290dc <_gp+0xfffee224>
   29264:	003dd706 	br	289c4 <_gp+0xfffedb0c>
   29268:	d8c02217 	ldw	r3,136(sp)
   2926c:	d9002417 	ldw	r4,144(sp)
   29270:	18800017 	ldw	r2,0(r3)
   29274:	18c00104 	addi	r3,r3,4
   29278:	d8c02215 	stw	r3,136(sp)
   2927c:	11000015 	stw	r4,0(r2)
   29280:	003b9a06 	br	280ec <_gp+0xfffed234>
   29284:	d8c02217 	ldw	r3,136(sp)
   29288:	0029883a 	mov	r20,zero
   2928c:	18800104 	addi	r2,r3,4
   29290:	1cc0000b 	ldhu	r19,0(r3)
   29294:	803db20e 	bge	r16,zero,28960 <_gp+0xfffedaa8>
   29298:	003fb906 	br	29180 <_gp+0xfffee2c8>
   2929c:	d9002217 	ldw	r4,136(sp)
   292a0:	0029883a 	mov	r20,zero
   292a4:	24c00017 	ldw	r19,0(r4)
   292a8:	21000104 	addi	r4,r4,4
   292ac:	d9002215 	stw	r4,136(sp)
   292b0:	003d3206 	br	2877c <_gp+0xfffed8c4>
   292b4:	d8c02217 	ldw	r3,136(sp)
   292b8:	1cc00017 	ldw	r19,0(r3)
   292bc:	18c00104 	addi	r3,r3,4
   292c0:	d8c02215 	stw	r3,136(sp)
   292c4:	9829d7fa 	srai	r20,r19,31
   292c8:	a005883a 	mov	r2,r20
   292cc:	003d4b06 	br	287fc <_gp+0xfffed944>
   292d0:	0009883a 	mov	r4,zero
   292d4:	01400044 	movi	r5,1
   292d8:	d811883a 	mov	r8,sp
   292dc:	003e4f06 	br	28c1c <_gp+0xfffedd64>
   292e0:	d8c02215 	stw	r3,136(sp)
   292e4:	002b883a 	mov	r21,zero
   292e8:	003db806 	br	289cc <_gp+0xfffedb14>
   292ec:	d811883a 	mov	r8,sp
   292f0:	003e9606 	br	28d4c <_gp+0xfffede94>
   292f4:	010000f4 	movhi	r4,3
   292f8:	2103c504 	addi	r4,r4,3860
   292fc:	d9002315 	stw	r4,140(sp)
   29300:	003e6306 	br	28c90 <_gp+0xfffeddd8>
   29304:	b0c00043 	ldbu	r3,1(r22)
   29308:	8c400814 	ori	r17,r17,32
   2930c:	b5800044 	addi	r22,r22,1
   29310:	18c03fcc 	andi	r3,r3,255
   29314:	18c0201c 	xori	r3,r3,128
   29318:	18ffe004 	addi	r3,r3,-128
   2931c:	003b9c06 	br	28190 <_gp+0xfffed2d8>
   29320:	b809883a 	mov	r4,r23
   29324:	da002a15 	stw	r8,168(sp)
   29328:	002078c0 	call	2078c <strlen>
   2932c:	1029883a 	mov	r20,r2
   29330:	dd401d83 	ldbu	r21,118(sp)
   29334:	df002215 	stw	fp,136(sp)
   29338:	0021883a 	mov	r16,zero
   2933c:	da002a17 	ldw	r8,168(sp)
   29340:	003c3906 	br	28428 <_gp+0xfffed570>
   29344:	d9402017 	ldw	r5,128(sp)
   29348:	d9002117 	ldw	r4,132(sp)
   2934c:	d9801a04 	addi	r6,sp,104
   29350:	0027f080 	call	27f08 <__sprint_r.part.0>
   29354:	103e691e 	bne	r2,zero,28cfc <_gp+0xfffede44>
   29358:	d9001b17 	ldw	r4,108(sp)
   2935c:	d8801c17 	ldw	r2,112(sp)
   29360:	d811883a 	mov	r8,sp
   29364:	21400044 	addi	r5,r4,1
   29368:	003e2e06 	br	28c24 <_gp+0xfffedd6c>
   2936c:	010000f4 	movhi	r4,3
   29370:	2103c904 	addi	r4,r4,3876
   29374:	d9002315 	stw	r4,140(sp)
   29378:	d9001b17 	ldw	r4,108(sp)
   2937c:	21000044 	addi	r4,r4,1
   29380:	003c5e06 	br	284fc <_gp+0xfffed644>
   29384:	002b883a 	mov	r21,zero
   29388:	00800084 	movi	r2,2
   2938c:	10803fcc 	andi	r2,r2,255
   29390:	01000044 	movi	r4,1
   29394:	11002b26 	beq	r2,r4,29444 <___vfiprintf_internal_r+0x1428>
   29398:	01000084 	movi	r4,2
   2939c:	11002b1e 	bne	r2,r4,2944c <___vfiprintf_internal_r+0x1430>
   293a0:	1823883a 	mov	r17,r3
   293a4:	003ee506 	br	28f3c <_gp+0xfffee084>
   293a8:	8807883a 	mov	r3,r17
   293ac:	00800044 	movi	r2,1
   293b0:	003ff606 	br	2938c <_gp+0xfffee4d4>
   293b4:	00800184 	movi	r2,6
   293b8:	1400012e 	bgeu	r2,r16,293c0 <___vfiprintf_internal_r+0x13a4>
   293bc:	1021883a 	mov	r16,r2
   293c0:	8029883a 	mov	r20,r16
   293c4:	8027883a 	mov	r19,r16
   293c8:	80002216 	blt	r16,zero,29454 <___vfiprintf_internal_r+0x1438>
   293cc:	05c000f4 	movhi	r23,3
   293d0:	df002215 	stw	fp,136(sp)
   293d4:	bdc36904 	addi	r23,r23,3492
   293d8:	003cfb06 	br	287c8 <_gp+0xfffed910>
   293dc:	d9002217 	ldw	r4,136(sp)
   293e0:	d9402417 	ldw	r5,144(sp)
   293e4:	20800017 	ldw	r2,0(r4)
   293e8:	21000104 	addi	r4,r4,4
   293ec:	d9002215 	stw	r4,136(sp)
   293f0:	11400015 	stw	r5,0(r2)
   293f4:	003b3d06 	br	280ec <_gp+0xfffed234>
   293f8:	014000f4 	movhi	r5,3
   293fc:	2943c904 	addi	r5,r5,3876
   29400:	d9402315 	stw	r5,140(sp)
   29404:	d9401b17 	ldw	r5,108(sp)
   29408:	29400044 	addi	r5,r5,1
   2940c:	003e6d06 	br	28dc4 <_gp+0xfffedf0c>
   29410:	8029883a 	mov	r20,r16
   29414:	dd401d83 	ldbu	r21,118(sp)
   29418:	df002215 	stw	fp,136(sp)
   2941c:	0021883a 	mov	r16,zero
   29420:	003c0106 	br	28428 <_gp+0xfffed570>
   29424:	00c000f4 	movhi	r3,3
   29428:	18c3c504 	addi	r3,r3,3860
   2942c:	d8c02315 	stw	r3,140(sp)
   29430:	280d883a 	mov	r6,r5
   29434:	003c6906 	br	285dc <_gp+0xfffed724>
   29438:	802d883a 	mov	r22,r16
   2943c:	0021883a 	mov	r16,zero
   29440:	003b5406 	br	28194 <_gp+0xfffed2dc>
   29444:	1823883a 	mov	r17,r3
   29448:	003cf306 	br	28818 <_gp+0xfffed960>
   2944c:	1823883a 	mov	r17,r3
   29450:	003cad06 	br	28708 <_gp+0xfffed850>
   29454:	0027883a 	mov	r19,zero
   29458:	003fdc06 	br	293cc <_gp+0xfffee514>
   2945c:	d9402217 	ldw	r5,136(sp)
   29460:	8005883a 	mov	r2,r16
   29464:	b0c00043 	ldbu	r3,1(r22)
   29468:	2c000017 	ldw	r16,0(r5)
   2946c:	29000104 	addi	r4,r5,4
   29470:	d9002215 	stw	r4,136(sp)
   29474:	102d883a 	mov	r22,r2
   29478:	803fa50e 	bge	r16,zero,29310 <_gp+0xfffee458>
   2947c:	18c03fcc 	andi	r3,r3,255
   29480:	18c0201c 	xori	r3,r3,128
   29484:	043fffc4 	movi	r16,-1
   29488:	18ffe004 	addi	r3,r3,-128
   2948c:	003b4006 	br	28190 <_gp+0xfffed2d8>
   29490:	d9402303 	ldbu	r5,140(sp)
   29494:	d9401d85 	stb	r5,118(sp)
   29498:	003cae06 	br	28754 <_gp+0xfffed89c>
   2949c:	d8c02303 	ldbu	r3,140(sp)
   294a0:	d8c01d85 	stb	r3,118(sp)
   294a4:	003d1406 	br	288f8 <_gp+0xfffeda40>
   294a8:	d8c02303 	ldbu	r3,140(sp)
   294ac:	d8c01d85 	stb	r3,118(sp)
   294b0:	003cca06 	br	287dc <_gp+0xfffed924>
   294b4:	8880004c 	andi	r2,r17,1
   294b8:	002b883a 	mov	r21,zero
   294bc:	10000526 	beq	r2,zero,294d4 <___vfiprintf_internal_r+0x14b8>
   294c0:	00800c04 	movi	r2,48
   294c4:	d88019c5 	stb	r2,103(sp)
   294c8:	dd002817 	ldw	r20,160(sp)
   294cc:	ddc019c4 	addi	r23,sp,103
   294d0:	003bd506 	br	28428 <_gp+0xfffed570>
   294d4:	0029883a 	mov	r20,zero
   294d8:	ddc01a04 	addi	r23,sp,104
   294dc:	003bd206 	br	28428 <_gp+0xfffed570>
   294e0:	d9002303 	ldbu	r4,140(sp)
   294e4:	d9001d85 	stb	r4,118(sp)
   294e8:	003da606 	br	28b84 <_gp+0xfffedccc>
   294ec:	d8c02303 	ldbu	r3,140(sp)
   294f0:	d8c01d85 	stb	r3,118(sp)
   294f4:	003c7606 	br	286d0 <_gp+0xfffed818>
   294f8:	d8c02303 	ldbu	r3,140(sp)
   294fc:	d8c01d85 	stb	r3,118(sp)
   29500:	003c6506 	br	28698 <_gp+0xfffed7e0>
   29504:	d9002303 	ldbu	r4,140(sp)
   29508:	d9001d85 	stb	r4,118(sp)
   2950c:	003d3d06 	br	28a04 <_gp+0xfffedb4c>
   29510:	d8c02303 	ldbu	r3,140(sp)
   29514:	d8c01d85 	stb	r3,118(sp)
   29518:	003d1d06 	br	28990 <_gp+0xfffedad8>
   2951c:	d8c02303 	ldbu	r3,140(sp)
   29520:	d8c01d85 	stb	r3,118(sp)
   29524:	003d0306 	br	28934 <_gp+0xfffeda7c>

00029528 <__vfiprintf_internal>:
   29528:	008000f4 	movhi	r2,3
   2952c:	108baf04 	addi	r2,r2,11964
   29530:	300f883a 	mov	r7,r6
   29534:	280d883a 	mov	r6,r5
   29538:	200b883a 	mov	r5,r4
   2953c:	11000017 	ldw	r4,0(r2)
   29540:	002801c1 	jmpi	2801c <___vfiprintf_internal_r>

00029544 <__sbprintf>:
   29544:	2880030b 	ldhu	r2,12(r5)
   29548:	2ac01917 	ldw	r11,100(r5)
   2954c:	2a80038b 	ldhu	r10,14(r5)
   29550:	2a400717 	ldw	r9,28(r5)
   29554:	2a000917 	ldw	r8,36(r5)
   29558:	defee204 	addi	sp,sp,-1144
   2955c:	00c10004 	movi	r3,1024
   29560:	dc011a15 	stw	r16,1128(sp)
   29564:	10bfff4c 	andi	r2,r2,65533
   29568:	2821883a 	mov	r16,r5
   2956c:	d8cb883a 	add	r5,sp,r3
   29570:	dc811c15 	stw	r18,1136(sp)
   29574:	dc411b15 	stw	r17,1132(sp)
   29578:	dfc11d15 	stw	ra,1140(sp)
   2957c:	2025883a 	mov	r18,r4
   29580:	d881030d 	sth	r2,1036(sp)
   29584:	dac11915 	stw	r11,1124(sp)
   29588:	da81038d 	sth	r10,1038(sp)
   2958c:	da410715 	stw	r9,1052(sp)
   29590:	da010915 	stw	r8,1060(sp)
   29594:	dec10015 	stw	sp,1024(sp)
   29598:	dec10415 	stw	sp,1040(sp)
   2959c:	d8c10215 	stw	r3,1032(sp)
   295a0:	d8c10515 	stw	r3,1044(sp)
   295a4:	d8010615 	stw	zero,1048(sp)
   295a8:	002801c0 	call	2801c <___vfiprintf_internal_r>
   295ac:	1023883a 	mov	r17,r2
   295b0:	10000416 	blt	r2,zero,295c4 <__sbprintf+0x80>
   295b4:	d9410004 	addi	r5,sp,1024
   295b8:	9009883a 	mov	r4,r18
   295bc:	00247f80 	call	247f8 <_fflush_r>
   295c0:	10000d1e 	bne	r2,zero,295f8 <__sbprintf+0xb4>
   295c4:	d881030b 	ldhu	r2,1036(sp)
   295c8:	1080100c 	andi	r2,r2,64
   295cc:	10000326 	beq	r2,zero,295dc <__sbprintf+0x98>
   295d0:	8080030b 	ldhu	r2,12(r16)
   295d4:	10801014 	ori	r2,r2,64
   295d8:	8080030d 	sth	r2,12(r16)
   295dc:	8805883a 	mov	r2,r17
   295e0:	dfc11d17 	ldw	ra,1140(sp)
   295e4:	dc811c17 	ldw	r18,1136(sp)
   295e8:	dc411b17 	ldw	r17,1132(sp)
   295ec:	dc011a17 	ldw	r16,1128(sp)
   295f0:	dec11e04 	addi	sp,sp,1144
   295f4:	f800283a 	ret
   295f8:	047fffc4 	movi	r17,-1
   295fc:	003ff106 	br	295c4 <_gp+0xfffee70c>

00029600 <_write_r>:
   29600:	defffd04 	addi	sp,sp,-12
   29604:	2805883a 	mov	r2,r5
   29608:	dc000015 	stw	r16,0(sp)
   2960c:	040000f4 	movhi	r16,3
   29610:	dc400115 	stw	r17,4(sp)
   29614:	300b883a 	mov	r5,r6
   29618:	8412cb04 	addi	r16,r16,19244
   2961c:	2023883a 	mov	r17,r4
   29620:	380d883a 	mov	r6,r7
   29624:	1009883a 	mov	r4,r2
   29628:	dfc00215 	stw	ra,8(sp)
   2962c:	80000015 	stw	zero,0(r16)
   29630:	002de280 	call	2de28 <write>
   29634:	00ffffc4 	movi	r3,-1
   29638:	10c00526 	beq	r2,r3,29650 <_write_r+0x50>
   2963c:	dfc00217 	ldw	ra,8(sp)
   29640:	dc400117 	ldw	r17,4(sp)
   29644:	dc000017 	ldw	r16,0(sp)
   29648:	dec00304 	addi	sp,sp,12
   2964c:	f800283a 	ret
   29650:	80c00017 	ldw	r3,0(r16)
   29654:	183ff926 	beq	r3,zero,2963c <_gp+0xfffee784>
   29658:	88c00015 	stw	r3,0(r17)
   2965c:	003ff706 	br	2963c <_gp+0xfffee784>

00029660 <_close_r>:
   29660:	defffd04 	addi	sp,sp,-12
   29664:	dc000015 	stw	r16,0(sp)
   29668:	040000f4 	movhi	r16,3
   2966c:	dc400115 	stw	r17,4(sp)
   29670:	8412cb04 	addi	r16,r16,19244
   29674:	2023883a 	mov	r17,r4
   29678:	2809883a 	mov	r4,r5
   2967c:	dfc00215 	stw	ra,8(sp)
   29680:	80000015 	stw	zero,0(r16)
   29684:	002d5a00 	call	2d5a0 <close>
   29688:	00ffffc4 	movi	r3,-1
   2968c:	10c00526 	beq	r2,r3,296a4 <_close_r+0x44>
   29690:	dfc00217 	ldw	ra,8(sp)
   29694:	dc400117 	ldw	r17,4(sp)
   29698:	dc000017 	ldw	r16,0(sp)
   2969c:	dec00304 	addi	sp,sp,12
   296a0:	f800283a 	ret
   296a4:	80c00017 	ldw	r3,0(r16)
   296a8:	183ff926 	beq	r3,zero,29690 <_gp+0xfffee7d8>
   296ac:	88c00015 	stw	r3,0(r17)
   296b0:	003ff706 	br	29690 <_gp+0xfffee7d8>

000296b4 <_calloc_r>:
   296b4:	defffe04 	addi	sp,sp,-8
   296b8:	2805883a 	mov	r2,r5
   296bc:	dc000015 	stw	r16,0(sp)
   296c0:	300b883a 	mov	r5,r6
   296c4:	2021883a 	mov	r16,r4
   296c8:	1009883a 	mov	r4,r2
   296cc:	dfc00115 	stw	ra,4(sp)
   296d0:	00206240 	call	20624 <__mulsi3>
   296d4:	100b883a 	mov	r5,r2
   296d8:	8009883a 	mov	r4,r16
   296dc:	00259500 	call	25950 <_malloc_r>
   296e0:	10002926 	beq	r2,zero,29788 <_calloc_r+0xd4>
   296e4:	11bfff17 	ldw	r6,-4(r2)
   296e8:	1021883a 	mov	r16,r2
   296ec:	00bfff04 	movi	r2,-4
   296f0:	308c703a 	and	r6,r6,r2
   296f4:	00c00904 	movi	r3,36
   296f8:	308d883a 	add	r6,r6,r2
   296fc:	19801636 	bltu	r3,r6,29758 <_calloc_r+0xa4>
   29700:	008004c4 	movi	r2,19
   29704:	11800b2e 	bgeu	r2,r6,29734 <_calloc_r+0x80>
   29708:	80000015 	stw	zero,0(r16)
   2970c:	80000115 	stw	zero,4(r16)
   29710:	008006c4 	movi	r2,27
   29714:	11801a2e 	bgeu	r2,r6,29780 <_calloc_r+0xcc>
   29718:	80000215 	stw	zero,8(r16)
   2971c:	80000315 	stw	zero,12(r16)
   29720:	30c0151e 	bne	r6,r3,29778 <_calloc_r+0xc4>
   29724:	80000415 	stw	zero,16(r16)
   29728:	80800604 	addi	r2,r16,24
   2972c:	80000515 	stw	zero,20(r16)
   29730:	00000106 	br	29738 <_calloc_r+0x84>
   29734:	8005883a 	mov	r2,r16
   29738:	10000015 	stw	zero,0(r2)
   2973c:	10000115 	stw	zero,4(r2)
   29740:	10000215 	stw	zero,8(r2)
   29744:	8005883a 	mov	r2,r16
   29748:	dfc00117 	ldw	ra,4(sp)
   2974c:	dc000017 	ldw	r16,0(sp)
   29750:	dec00204 	addi	sp,sp,8
   29754:	f800283a 	ret
   29758:	000b883a 	mov	r5,zero
   2975c:	8009883a 	mov	r4,r16
   29760:	00264e40 	call	264e4 <memset>
   29764:	8005883a 	mov	r2,r16
   29768:	dfc00117 	ldw	ra,4(sp)
   2976c:	dc000017 	ldw	r16,0(sp)
   29770:	dec00204 	addi	sp,sp,8
   29774:	f800283a 	ret
   29778:	80800404 	addi	r2,r16,16
   2977c:	003fee06 	br	29738 <_gp+0xfffee880>
   29780:	80800204 	addi	r2,r16,8
   29784:	003fec06 	br	29738 <_gp+0xfffee880>
   29788:	0005883a 	mov	r2,zero
   2978c:	003fee06 	br	29748 <_gp+0xfffee890>

00029790 <_fclose_r>:
   29790:	28003926 	beq	r5,zero,29878 <_fclose_r+0xe8>
   29794:	defffc04 	addi	sp,sp,-16
   29798:	dc400115 	stw	r17,4(sp)
   2979c:	dc000015 	stw	r16,0(sp)
   297a0:	dfc00315 	stw	ra,12(sp)
   297a4:	dc800215 	stw	r18,8(sp)
   297a8:	2023883a 	mov	r17,r4
   297ac:	2821883a 	mov	r16,r5
   297b0:	20000226 	beq	r4,zero,297bc <_fclose_r+0x2c>
   297b4:	20800e17 	ldw	r2,56(r4)
   297b8:	10002726 	beq	r2,zero,29858 <_fclose_r+0xc8>
   297bc:	8080030f 	ldh	r2,12(r16)
   297c0:	1000071e 	bne	r2,zero,297e0 <_fclose_r+0x50>
   297c4:	0005883a 	mov	r2,zero
   297c8:	dfc00317 	ldw	ra,12(sp)
   297cc:	dc800217 	ldw	r18,8(sp)
   297d0:	dc400117 	ldw	r17,4(sp)
   297d4:	dc000017 	ldw	r16,0(sp)
   297d8:	dec00404 	addi	sp,sp,16
   297dc:	f800283a 	ret
   297e0:	800b883a 	mov	r5,r16
   297e4:	8809883a 	mov	r4,r17
   297e8:	00245dc0 	call	245dc <__sflush_r>
   297ec:	1025883a 	mov	r18,r2
   297f0:	80800b17 	ldw	r2,44(r16)
   297f4:	10000426 	beq	r2,zero,29808 <_fclose_r+0x78>
   297f8:	81400717 	ldw	r5,28(r16)
   297fc:	8809883a 	mov	r4,r17
   29800:	103ee83a 	callr	r2
   29804:	10001616 	blt	r2,zero,29860 <_fclose_r+0xd0>
   29808:	8080030b 	ldhu	r2,12(r16)
   2980c:	1080200c 	andi	r2,r2,128
   29810:	1000151e 	bne	r2,zero,29868 <_fclose_r+0xd8>
   29814:	81400c17 	ldw	r5,48(r16)
   29818:	28000526 	beq	r5,zero,29830 <_fclose_r+0xa0>
   2981c:	80801004 	addi	r2,r16,64
   29820:	28800226 	beq	r5,r2,2982c <_fclose_r+0x9c>
   29824:	8809883a 	mov	r4,r17
   29828:	0024d580 	call	24d58 <_free_r>
   2982c:	80000c15 	stw	zero,48(r16)
   29830:	81401117 	ldw	r5,68(r16)
   29834:	28000326 	beq	r5,zero,29844 <_fclose_r+0xb4>
   29838:	8809883a 	mov	r4,r17
   2983c:	0024d580 	call	24d58 <_free_r>
   29840:	80001115 	stw	zero,68(r16)
   29844:	0024bf40 	call	24bf4 <__sfp_lock_acquire>
   29848:	8000030d 	sth	zero,12(r16)
   2984c:	0024bf80 	call	24bf8 <__sfp_lock_release>
   29850:	9005883a 	mov	r2,r18
   29854:	003fdc06 	br	297c8 <_gp+0xfffee910>
   29858:	0024be40 	call	24be4 <__sinit>
   2985c:	003fd706 	br	297bc <_gp+0xfffee904>
   29860:	04bfffc4 	movi	r18,-1
   29864:	003fe806 	br	29808 <_gp+0xfffee950>
   29868:	81400417 	ldw	r5,16(r16)
   2986c:	8809883a 	mov	r4,r17
   29870:	0024d580 	call	24d58 <_free_r>
   29874:	003fe706 	br	29814 <_gp+0xfffee95c>
   29878:	0005883a 	mov	r2,zero
   2987c:	f800283a 	ret

00029880 <fclose>:
   29880:	008000f4 	movhi	r2,3
   29884:	108baf04 	addi	r2,r2,11964
   29888:	200b883a 	mov	r5,r4
   2988c:	11000017 	ldw	r4,0(r2)
   29890:	00297901 	jmpi	29790 <_fclose_r>

00029894 <__fputwc>:
   29894:	defff804 	addi	sp,sp,-32
   29898:	dcc00415 	stw	r19,16(sp)
   2989c:	dc800315 	stw	r18,12(sp)
   298a0:	dc000115 	stw	r16,4(sp)
   298a4:	dfc00715 	stw	ra,28(sp)
   298a8:	dd400615 	stw	r21,24(sp)
   298ac:	dd000515 	stw	r20,20(sp)
   298b0:	dc400215 	stw	r17,8(sp)
   298b4:	2027883a 	mov	r19,r4
   298b8:	2825883a 	mov	r18,r5
   298bc:	3021883a 	mov	r16,r6
   298c0:	00257400 	call	25740 <__locale_mb_cur_max>
   298c4:	00c00044 	movi	r3,1
   298c8:	10c03e26 	beq	r2,r3,299c4 <__fputwc+0x130>
   298cc:	81c01704 	addi	r7,r16,92
   298d0:	900d883a 	mov	r6,r18
   298d4:	d80b883a 	mov	r5,sp
   298d8:	9809883a 	mov	r4,r19
   298dc:	0029d640 	call	29d64 <_wcrtomb_r>
   298e0:	1029883a 	mov	r20,r2
   298e4:	00bfffc4 	movi	r2,-1
   298e8:	a0802026 	beq	r20,r2,2996c <__fputwc+0xd8>
   298ec:	d9400003 	ldbu	r5,0(sp)
   298f0:	a0001c26 	beq	r20,zero,29964 <__fputwc+0xd0>
   298f4:	0023883a 	mov	r17,zero
   298f8:	05400284 	movi	r21,10
   298fc:	00000906 	br	29924 <__fputwc+0x90>
   29900:	80800017 	ldw	r2,0(r16)
   29904:	11400005 	stb	r5,0(r2)
   29908:	80c00017 	ldw	r3,0(r16)
   2990c:	18c00044 	addi	r3,r3,1
   29910:	80c00015 	stw	r3,0(r16)
   29914:	8c400044 	addi	r17,r17,1
   29918:	dc45883a 	add	r2,sp,r17
   2991c:	8d00112e 	bgeu	r17,r20,29964 <__fputwc+0xd0>
   29920:	11400003 	ldbu	r5,0(r2)
   29924:	80c00217 	ldw	r3,8(r16)
   29928:	18ffffc4 	addi	r3,r3,-1
   2992c:	80c00215 	stw	r3,8(r16)
   29930:	183ff30e 	bge	r3,zero,29900 <_gp+0xfffeea48>
   29934:	80800617 	ldw	r2,24(r16)
   29938:	18801916 	blt	r3,r2,299a0 <__fputwc+0x10c>
   2993c:	80800017 	ldw	r2,0(r16)
   29940:	11400005 	stb	r5,0(r2)
   29944:	80800017 	ldw	r2,0(r16)
   29948:	10c00003 	ldbu	r3,0(r2)
   2994c:	10800044 	addi	r2,r2,1
   29950:	1d402326 	beq	r3,r21,299e0 <__fputwc+0x14c>
   29954:	80800015 	stw	r2,0(r16)
   29958:	8c400044 	addi	r17,r17,1
   2995c:	dc45883a 	add	r2,sp,r17
   29960:	8d3fef36 	bltu	r17,r20,29920 <_gp+0xfffeea68>
   29964:	9005883a 	mov	r2,r18
   29968:	00000406 	br	2997c <__fputwc+0xe8>
   2996c:	80c0030b 	ldhu	r3,12(r16)
   29970:	a005883a 	mov	r2,r20
   29974:	18c01014 	ori	r3,r3,64
   29978:	80c0030d 	sth	r3,12(r16)
   2997c:	dfc00717 	ldw	ra,28(sp)
   29980:	dd400617 	ldw	r21,24(sp)
   29984:	dd000517 	ldw	r20,20(sp)
   29988:	dcc00417 	ldw	r19,16(sp)
   2998c:	dc800317 	ldw	r18,12(sp)
   29990:	dc400217 	ldw	r17,8(sp)
   29994:	dc000117 	ldw	r16,4(sp)
   29998:	dec00804 	addi	sp,sp,32
   2999c:	f800283a 	ret
   299a0:	800d883a 	mov	r6,r16
   299a4:	29403fcc 	andi	r5,r5,255
   299a8:	9809883a 	mov	r4,r19
   299ac:	0029c0c0 	call	29c0c <__swbuf_r>
   299b0:	10bfffe0 	cmpeqi	r2,r2,-1
   299b4:	10803fcc 	andi	r2,r2,255
   299b8:	103fd626 	beq	r2,zero,29914 <_gp+0xfffeea5c>
   299bc:	00bfffc4 	movi	r2,-1
   299c0:	003fee06 	br	2997c <_gp+0xfffeeac4>
   299c4:	90ffffc4 	addi	r3,r18,-1
   299c8:	01003f84 	movi	r4,254
   299cc:	20ffbf36 	bltu	r4,r3,298cc <_gp+0xfffeea14>
   299d0:	900b883a 	mov	r5,r18
   299d4:	dc800005 	stb	r18,0(sp)
   299d8:	1029883a 	mov	r20,r2
   299dc:	003fc506 	br	298f4 <_gp+0xfffeea3c>
   299e0:	800d883a 	mov	r6,r16
   299e4:	a80b883a 	mov	r5,r21
   299e8:	9809883a 	mov	r4,r19
   299ec:	0029c0c0 	call	29c0c <__swbuf_r>
   299f0:	10bfffe0 	cmpeqi	r2,r2,-1
   299f4:	003fef06 	br	299b4 <_gp+0xfffeeafc>

000299f8 <_fputwc_r>:
   299f8:	3080030b 	ldhu	r2,12(r6)
   299fc:	10c8000c 	andi	r3,r2,8192
   29a00:	1800051e 	bne	r3,zero,29a18 <_fputwc_r+0x20>
   29a04:	30c01917 	ldw	r3,100(r6)
   29a08:	10880014 	ori	r2,r2,8192
   29a0c:	3080030d 	sth	r2,12(r6)
   29a10:	18880014 	ori	r2,r3,8192
   29a14:	30801915 	stw	r2,100(r6)
   29a18:	00298941 	jmpi	29894 <__fputwc>

00029a1c <fputwc>:
   29a1c:	008000f4 	movhi	r2,3
   29a20:	defffc04 	addi	sp,sp,-16
   29a24:	108baf04 	addi	r2,r2,11964
   29a28:	dc000115 	stw	r16,4(sp)
   29a2c:	14000017 	ldw	r16,0(r2)
   29a30:	dc400215 	stw	r17,8(sp)
   29a34:	dfc00315 	stw	ra,12(sp)
   29a38:	2023883a 	mov	r17,r4
   29a3c:	80000226 	beq	r16,zero,29a48 <fputwc+0x2c>
   29a40:	80800e17 	ldw	r2,56(r16)
   29a44:	10001026 	beq	r2,zero,29a88 <fputwc+0x6c>
   29a48:	2880030b 	ldhu	r2,12(r5)
   29a4c:	10c8000c 	andi	r3,r2,8192
   29a50:	1800051e 	bne	r3,zero,29a68 <fputwc+0x4c>
   29a54:	28c01917 	ldw	r3,100(r5)
   29a58:	10880014 	ori	r2,r2,8192
   29a5c:	2880030d 	sth	r2,12(r5)
   29a60:	18880014 	ori	r2,r3,8192
   29a64:	28801915 	stw	r2,100(r5)
   29a68:	280d883a 	mov	r6,r5
   29a6c:	8009883a 	mov	r4,r16
   29a70:	880b883a 	mov	r5,r17
   29a74:	dfc00317 	ldw	ra,12(sp)
   29a78:	dc400217 	ldw	r17,8(sp)
   29a7c:	dc000117 	ldw	r16,4(sp)
   29a80:	dec00404 	addi	sp,sp,16
   29a84:	00298941 	jmpi	29894 <__fputwc>
   29a88:	8009883a 	mov	r4,r16
   29a8c:	d9400015 	stw	r5,0(sp)
   29a90:	0024be40 	call	24be4 <__sinit>
   29a94:	d9400017 	ldw	r5,0(sp)
   29a98:	003feb06 	br	29a48 <_gp+0xfffeeb90>

00029a9c <_fstat_r>:
   29a9c:	defffd04 	addi	sp,sp,-12
   29aa0:	2805883a 	mov	r2,r5
   29aa4:	dc000015 	stw	r16,0(sp)
   29aa8:	040000f4 	movhi	r16,3
   29aac:	dc400115 	stw	r17,4(sp)
   29ab0:	8412cb04 	addi	r16,r16,19244
   29ab4:	2023883a 	mov	r17,r4
   29ab8:	300b883a 	mov	r5,r6
   29abc:	1009883a 	mov	r4,r2
   29ac0:	dfc00215 	stw	ra,8(sp)
   29ac4:	80000015 	stw	zero,0(r16)
   29ac8:	002d6e00 	call	2d6e0 <fstat>
   29acc:	00ffffc4 	movi	r3,-1
   29ad0:	10c00526 	beq	r2,r3,29ae8 <_fstat_r+0x4c>
   29ad4:	dfc00217 	ldw	ra,8(sp)
   29ad8:	dc400117 	ldw	r17,4(sp)
   29adc:	dc000017 	ldw	r16,0(sp)
   29ae0:	dec00304 	addi	sp,sp,12
   29ae4:	f800283a 	ret
   29ae8:	80c00017 	ldw	r3,0(r16)
   29aec:	183ff926 	beq	r3,zero,29ad4 <_gp+0xfffeec1c>
   29af0:	88c00015 	stw	r3,0(r17)
   29af4:	003ff706 	br	29ad4 <_gp+0xfffeec1c>

00029af8 <_isatty_r>:
   29af8:	defffd04 	addi	sp,sp,-12
   29afc:	dc000015 	stw	r16,0(sp)
   29b00:	040000f4 	movhi	r16,3
   29b04:	dc400115 	stw	r17,4(sp)
   29b08:	8412cb04 	addi	r16,r16,19244
   29b0c:	2023883a 	mov	r17,r4
   29b10:	2809883a 	mov	r4,r5
   29b14:	dfc00215 	stw	ra,8(sp)
   29b18:	80000015 	stw	zero,0(r16)
   29b1c:	002d7d40 	call	2d7d4 <isatty>
   29b20:	00ffffc4 	movi	r3,-1
   29b24:	10c00526 	beq	r2,r3,29b3c <_isatty_r+0x44>
   29b28:	dfc00217 	ldw	ra,8(sp)
   29b2c:	dc400117 	ldw	r17,4(sp)
   29b30:	dc000017 	ldw	r16,0(sp)
   29b34:	dec00304 	addi	sp,sp,12
   29b38:	f800283a 	ret
   29b3c:	80c00017 	ldw	r3,0(r16)
   29b40:	183ff926 	beq	r3,zero,29b28 <_gp+0xfffeec70>
   29b44:	88c00015 	stw	r3,0(r17)
   29b48:	003ff706 	br	29b28 <_gp+0xfffeec70>

00029b4c <_lseek_r>:
   29b4c:	defffd04 	addi	sp,sp,-12
   29b50:	2805883a 	mov	r2,r5
   29b54:	dc000015 	stw	r16,0(sp)
   29b58:	040000f4 	movhi	r16,3
   29b5c:	dc400115 	stw	r17,4(sp)
   29b60:	300b883a 	mov	r5,r6
   29b64:	8412cb04 	addi	r16,r16,19244
   29b68:	2023883a 	mov	r17,r4
   29b6c:	380d883a 	mov	r6,r7
   29b70:	1009883a 	mov	r4,r2
   29b74:	dfc00215 	stw	ra,8(sp)
   29b78:	80000015 	stw	zero,0(r16)
   29b7c:	002d9a80 	call	2d9a8 <lseek>
   29b80:	00ffffc4 	movi	r3,-1
   29b84:	10c00526 	beq	r2,r3,29b9c <_lseek_r+0x50>
   29b88:	dfc00217 	ldw	ra,8(sp)
   29b8c:	dc400117 	ldw	r17,4(sp)
   29b90:	dc000017 	ldw	r16,0(sp)
   29b94:	dec00304 	addi	sp,sp,12
   29b98:	f800283a 	ret
   29b9c:	80c00017 	ldw	r3,0(r16)
   29ba0:	183ff926 	beq	r3,zero,29b88 <_gp+0xfffeecd0>
   29ba4:	88c00015 	stw	r3,0(r17)
   29ba8:	003ff706 	br	29b88 <_gp+0xfffeecd0>

00029bac <_read_r>:
   29bac:	defffd04 	addi	sp,sp,-12
   29bb0:	2805883a 	mov	r2,r5
   29bb4:	dc000015 	stw	r16,0(sp)
   29bb8:	040000f4 	movhi	r16,3
   29bbc:	dc400115 	stw	r17,4(sp)
   29bc0:	300b883a 	mov	r5,r6
   29bc4:	8412cb04 	addi	r16,r16,19244
   29bc8:	2023883a 	mov	r17,r4
   29bcc:	380d883a 	mov	r6,r7
   29bd0:	1009883a 	mov	r4,r2
   29bd4:	dfc00215 	stw	ra,8(sp)
   29bd8:	80000015 	stw	zero,0(r16)
   29bdc:	002db840 	call	2db84 <read>
   29be0:	00ffffc4 	movi	r3,-1
   29be4:	10c00526 	beq	r2,r3,29bfc <_read_r+0x50>
   29be8:	dfc00217 	ldw	ra,8(sp)
   29bec:	dc400117 	ldw	r17,4(sp)
   29bf0:	dc000017 	ldw	r16,0(sp)
   29bf4:	dec00304 	addi	sp,sp,12
   29bf8:	f800283a 	ret
   29bfc:	80c00017 	ldw	r3,0(r16)
   29c00:	183ff926 	beq	r3,zero,29be8 <_gp+0xfffeed30>
   29c04:	88c00015 	stw	r3,0(r17)
   29c08:	003ff706 	br	29be8 <_gp+0xfffeed30>

00029c0c <__swbuf_r>:
   29c0c:	defffb04 	addi	sp,sp,-20
   29c10:	dcc00315 	stw	r19,12(sp)
   29c14:	dc800215 	stw	r18,8(sp)
   29c18:	dc000015 	stw	r16,0(sp)
   29c1c:	dfc00415 	stw	ra,16(sp)
   29c20:	dc400115 	stw	r17,4(sp)
   29c24:	2025883a 	mov	r18,r4
   29c28:	2827883a 	mov	r19,r5
   29c2c:	3021883a 	mov	r16,r6
   29c30:	20000226 	beq	r4,zero,29c3c <__swbuf_r+0x30>
   29c34:	20800e17 	ldw	r2,56(r4)
   29c38:	10004226 	beq	r2,zero,29d44 <__swbuf_r+0x138>
   29c3c:	80800617 	ldw	r2,24(r16)
   29c40:	8100030b 	ldhu	r4,12(r16)
   29c44:	80800215 	stw	r2,8(r16)
   29c48:	2080020c 	andi	r2,r4,8
   29c4c:	10003626 	beq	r2,zero,29d28 <__swbuf_r+0x11c>
   29c50:	80c00417 	ldw	r3,16(r16)
   29c54:	18003426 	beq	r3,zero,29d28 <__swbuf_r+0x11c>
   29c58:	2088000c 	andi	r2,r4,8192
   29c5c:	9c403fcc 	andi	r17,r19,255
   29c60:	10001a26 	beq	r2,zero,29ccc <__swbuf_r+0xc0>
   29c64:	80800017 	ldw	r2,0(r16)
   29c68:	81000517 	ldw	r4,20(r16)
   29c6c:	10c7c83a 	sub	r3,r2,r3
   29c70:	1900200e 	bge	r3,r4,29cf4 <__swbuf_r+0xe8>
   29c74:	18c00044 	addi	r3,r3,1
   29c78:	81000217 	ldw	r4,8(r16)
   29c7c:	11400044 	addi	r5,r2,1
   29c80:	81400015 	stw	r5,0(r16)
   29c84:	213fffc4 	addi	r4,r4,-1
   29c88:	81000215 	stw	r4,8(r16)
   29c8c:	14c00005 	stb	r19,0(r2)
   29c90:	80800517 	ldw	r2,20(r16)
   29c94:	10c01e26 	beq	r2,r3,29d10 <__swbuf_r+0x104>
   29c98:	8080030b 	ldhu	r2,12(r16)
   29c9c:	1080004c 	andi	r2,r2,1
   29ca0:	10000226 	beq	r2,zero,29cac <__swbuf_r+0xa0>
   29ca4:	00800284 	movi	r2,10
   29ca8:	88801926 	beq	r17,r2,29d10 <__swbuf_r+0x104>
   29cac:	8805883a 	mov	r2,r17
   29cb0:	dfc00417 	ldw	ra,16(sp)
   29cb4:	dcc00317 	ldw	r19,12(sp)
   29cb8:	dc800217 	ldw	r18,8(sp)
   29cbc:	dc400117 	ldw	r17,4(sp)
   29cc0:	dc000017 	ldw	r16,0(sp)
   29cc4:	dec00504 	addi	sp,sp,20
   29cc8:	f800283a 	ret
   29ccc:	81401917 	ldw	r5,100(r16)
   29cd0:	00b7ffc4 	movi	r2,-8193
   29cd4:	21080014 	ori	r4,r4,8192
   29cd8:	2884703a 	and	r2,r5,r2
   29cdc:	80801915 	stw	r2,100(r16)
   29ce0:	80800017 	ldw	r2,0(r16)
   29ce4:	8100030d 	sth	r4,12(r16)
   29ce8:	81000517 	ldw	r4,20(r16)
   29cec:	10c7c83a 	sub	r3,r2,r3
   29cf0:	193fe016 	blt	r3,r4,29c74 <_gp+0xfffeedbc>
   29cf4:	800b883a 	mov	r5,r16
   29cf8:	9009883a 	mov	r4,r18
   29cfc:	00247f80 	call	247f8 <_fflush_r>
   29d00:	1000071e 	bne	r2,zero,29d20 <__swbuf_r+0x114>
   29d04:	80800017 	ldw	r2,0(r16)
   29d08:	00c00044 	movi	r3,1
   29d0c:	003fda06 	br	29c78 <_gp+0xfffeedc0>
   29d10:	800b883a 	mov	r5,r16
   29d14:	9009883a 	mov	r4,r18
   29d18:	00247f80 	call	247f8 <_fflush_r>
   29d1c:	103fe326 	beq	r2,zero,29cac <_gp+0xfffeedf4>
   29d20:	00bfffc4 	movi	r2,-1
   29d24:	003fe206 	br	29cb0 <_gp+0xfffeedf8>
   29d28:	800b883a 	mov	r5,r16
   29d2c:	9009883a 	mov	r4,r18
   29d30:	0022bd80 	call	22bd8 <__swsetup_r>
   29d34:	103ffa1e 	bne	r2,zero,29d20 <_gp+0xfffeee68>
   29d38:	8100030b 	ldhu	r4,12(r16)
   29d3c:	80c00417 	ldw	r3,16(r16)
   29d40:	003fc506 	br	29c58 <_gp+0xfffeeda0>
   29d44:	0024be40 	call	24be4 <__sinit>
   29d48:	003fbc06 	br	29c3c <_gp+0xfffeed84>

00029d4c <__swbuf>:
   29d4c:	008000f4 	movhi	r2,3
   29d50:	108baf04 	addi	r2,r2,11964
   29d54:	280d883a 	mov	r6,r5
   29d58:	200b883a 	mov	r5,r4
   29d5c:	11000017 	ldw	r4,0(r2)
   29d60:	0029c0c1 	jmpi	29c0c <__swbuf_r>

00029d64 <_wcrtomb_r>:
   29d64:	defff604 	addi	sp,sp,-40
   29d68:	008000f4 	movhi	r2,3
   29d6c:	dc800815 	stw	r18,32(sp)
   29d70:	dc400715 	stw	r17,28(sp)
   29d74:	dc000615 	stw	r16,24(sp)
   29d78:	108bb304 	addi	r2,r2,11980
   29d7c:	dfc00915 	stw	ra,36(sp)
   29d80:	2021883a 	mov	r16,r4
   29d84:	3823883a 	mov	r17,r7
   29d88:	14800017 	ldw	r18,0(r2)
   29d8c:	28001426 	beq	r5,zero,29de0 <_wcrtomb_r+0x7c>
   29d90:	d9400415 	stw	r5,16(sp)
   29d94:	d9800515 	stw	r6,20(sp)
   29d98:	00257340 	call	25734 <__locale_charset>
   29d9c:	d9800517 	ldw	r6,20(sp)
   29da0:	d9400417 	ldw	r5,16(sp)
   29da4:	100f883a 	mov	r7,r2
   29da8:	dc400015 	stw	r17,0(sp)
   29dac:	8009883a 	mov	r4,r16
   29db0:	903ee83a 	callr	r18
   29db4:	00ffffc4 	movi	r3,-1
   29db8:	10c0031e 	bne	r2,r3,29dc8 <_wcrtomb_r+0x64>
   29dbc:	88000015 	stw	zero,0(r17)
   29dc0:	00c02284 	movi	r3,138
   29dc4:	80c00015 	stw	r3,0(r16)
   29dc8:	dfc00917 	ldw	ra,36(sp)
   29dcc:	dc800817 	ldw	r18,32(sp)
   29dd0:	dc400717 	ldw	r17,28(sp)
   29dd4:	dc000617 	ldw	r16,24(sp)
   29dd8:	dec00a04 	addi	sp,sp,40
   29ddc:	f800283a 	ret
   29de0:	00257340 	call	25734 <__locale_charset>
   29de4:	100f883a 	mov	r7,r2
   29de8:	dc400015 	stw	r17,0(sp)
   29dec:	000d883a 	mov	r6,zero
   29df0:	d9400104 	addi	r5,sp,4
   29df4:	8009883a 	mov	r4,r16
   29df8:	903ee83a 	callr	r18
   29dfc:	003fed06 	br	29db4 <_gp+0xfffeeefc>

00029e00 <wcrtomb>:
   29e00:	defff604 	addi	sp,sp,-40
   29e04:	008000f4 	movhi	r2,3
   29e08:	dc800615 	stw	r18,24(sp)
   29e0c:	dc400515 	stw	r17,20(sp)
   29e10:	108baf04 	addi	r2,r2,11964
   29e14:	dfc00915 	stw	ra,36(sp)
   29e18:	dd000815 	stw	r20,32(sp)
   29e1c:	dcc00715 	stw	r19,28(sp)
   29e20:	dc000415 	stw	r16,16(sp)
   29e24:	3025883a 	mov	r18,r6
   29e28:	14400017 	ldw	r17,0(r2)
   29e2c:	20001926 	beq	r4,zero,29e94 <wcrtomb+0x94>
   29e30:	008000f4 	movhi	r2,3
   29e34:	108bb304 	addi	r2,r2,11980
   29e38:	15000017 	ldw	r20,0(r2)
   29e3c:	2021883a 	mov	r16,r4
   29e40:	2827883a 	mov	r19,r5
   29e44:	00257340 	call	25734 <__locale_charset>
   29e48:	100f883a 	mov	r7,r2
   29e4c:	dc800015 	stw	r18,0(sp)
   29e50:	980d883a 	mov	r6,r19
   29e54:	800b883a 	mov	r5,r16
   29e58:	8809883a 	mov	r4,r17
   29e5c:	a03ee83a 	callr	r20
   29e60:	00ffffc4 	movi	r3,-1
   29e64:	10c0031e 	bne	r2,r3,29e74 <wcrtomb+0x74>
   29e68:	90000015 	stw	zero,0(r18)
   29e6c:	00c02284 	movi	r3,138
   29e70:	88c00015 	stw	r3,0(r17)
   29e74:	dfc00917 	ldw	ra,36(sp)
   29e78:	dd000817 	ldw	r20,32(sp)
   29e7c:	dcc00717 	ldw	r19,28(sp)
   29e80:	dc800617 	ldw	r18,24(sp)
   29e84:	dc400517 	ldw	r17,20(sp)
   29e88:	dc000417 	ldw	r16,16(sp)
   29e8c:	dec00a04 	addi	sp,sp,40
   29e90:	f800283a 	ret
   29e94:	008000f4 	movhi	r2,3
   29e98:	108bb304 	addi	r2,r2,11980
   29e9c:	14000017 	ldw	r16,0(r2)
   29ea0:	00257340 	call	25734 <__locale_charset>
   29ea4:	100f883a 	mov	r7,r2
   29ea8:	dc800015 	stw	r18,0(sp)
   29eac:	000d883a 	mov	r6,zero
   29eb0:	d9400104 	addi	r5,sp,4
   29eb4:	8809883a 	mov	r4,r17
   29eb8:	803ee83a 	callr	r16
   29ebc:	003fe806 	br	29e60 <_gp+0xfffeefa8>

00029ec0 <__ascii_wctomb>:
   29ec0:	28000526 	beq	r5,zero,29ed8 <__ascii_wctomb+0x18>
   29ec4:	00803fc4 	movi	r2,255
   29ec8:	11800536 	bltu	r2,r6,29ee0 <__ascii_wctomb+0x20>
   29ecc:	29800005 	stb	r6,0(r5)
   29ed0:	00800044 	movi	r2,1
   29ed4:	f800283a 	ret
   29ed8:	0005883a 	mov	r2,zero
   29edc:	f800283a 	ret
   29ee0:	00802284 	movi	r2,138
   29ee4:	20800015 	stw	r2,0(r4)
   29ee8:	00bfffc4 	movi	r2,-1
   29eec:	f800283a 	ret

00029ef0 <_wctomb_r>:
   29ef0:	008000f4 	movhi	r2,3
   29ef4:	defff904 	addi	sp,sp,-28
   29ef8:	108bb304 	addi	r2,r2,11980
   29efc:	dfc00615 	stw	ra,24(sp)
   29f00:	dc400515 	stw	r17,20(sp)
   29f04:	dc000415 	stw	r16,16(sp)
   29f08:	3823883a 	mov	r17,r7
   29f0c:	14000017 	ldw	r16,0(r2)
   29f10:	d9000115 	stw	r4,4(sp)
   29f14:	d9400215 	stw	r5,8(sp)
   29f18:	d9800315 	stw	r6,12(sp)
   29f1c:	00257340 	call	25734 <__locale_charset>
   29f20:	d9800317 	ldw	r6,12(sp)
   29f24:	d9400217 	ldw	r5,8(sp)
   29f28:	d9000117 	ldw	r4,4(sp)
   29f2c:	100f883a 	mov	r7,r2
   29f30:	dc400015 	stw	r17,0(sp)
   29f34:	803ee83a 	callr	r16
   29f38:	dfc00617 	ldw	ra,24(sp)
   29f3c:	dc400517 	ldw	r17,20(sp)
   29f40:	dc000417 	ldw	r16,16(sp)
   29f44:	dec00704 	addi	sp,sp,28
   29f48:	f800283a 	ret

00029f4c <__udivdi3>:
   29f4c:	defff404 	addi	sp,sp,-48
   29f50:	dcc00515 	stw	r19,20(sp)
   29f54:	dc000215 	stw	r16,8(sp)
   29f58:	dfc00b15 	stw	ra,44(sp)
   29f5c:	df000a15 	stw	fp,40(sp)
   29f60:	ddc00915 	stw	r23,36(sp)
   29f64:	dd800815 	stw	r22,32(sp)
   29f68:	dd400715 	stw	r21,28(sp)
   29f6c:	dd000615 	stw	r20,24(sp)
   29f70:	dc800415 	stw	r18,16(sp)
   29f74:	dc400315 	stw	r17,12(sp)
   29f78:	2027883a 	mov	r19,r4
   29f7c:	2821883a 	mov	r16,r5
   29f80:	3800461e 	bne	r7,zero,2a09c <__udivdi3+0x150>
   29f84:	3023883a 	mov	r17,r6
   29f88:	2025883a 	mov	r18,r4
   29f8c:	2980572e 	bgeu	r5,r6,2a0ec <__udivdi3+0x1a0>
   29f90:	00bfffd4 	movui	r2,65535
   29f94:	282d883a 	mov	r22,r5
   29f98:	1180b236 	bltu	r2,r6,2a264 <__udivdi3+0x318>
   29f9c:	00803fc4 	movi	r2,255
   29fa0:	1185803a 	cmpltu	r2,r2,r6
   29fa4:	100490fa 	slli	r2,r2,3
   29fa8:	3086d83a 	srl	r3,r6,r2
   29fac:	010000f4 	movhi	r4,3
   29fb0:	2103cd04 	addi	r4,r4,3892
   29fb4:	20c7883a 	add	r3,r4,r3
   29fb8:	18c00003 	ldbu	r3,0(r3)
   29fbc:	1885883a 	add	r2,r3,r2
   29fc0:	00c00804 	movi	r3,32
   29fc4:	1887c83a 	sub	r3,r3,r2
   29fc8:	18000526 	beq	r3,zero,29fe0 <__udivdi3+0x94>
   29fcc:	80e0983a 	sll	r16,r16,r3
   29fd0:	9884d83a 	srl	r2,r19,r2
   29fd4:	30e2983a 	sll	r17,r6,r3
   29fd8:	98e4983a 	sll	r18,r19,r3
   29fdc:	142cb03a 	or	r22,r2,r16
   29fe0:	882ad43a 	srli	r21,r17,16
   29fe4:	b009883a 	mov	r4,r22
   29fe8:	8d3fffcc 	andi	r20,r17,65535
   29fec:	a80b883a 	mov	r5,r21
   29ff0:	002ac680 	call	2ac68 <__umodsi3>
   29ff4:	b009883a 	mov	r4,r22
   29ff8:	a80b883a 	mov	r5,r21
   29ffc:	1027883a 	mov	r19,r2
   2a000:	002ac040 	call	2ac04 <__udivsi3>
   2a004:	100b883a 	mov	r5,r2
   2a008:	a009883a 	mov	r4,r20
   2a00c:	102d883a 	mov	r22,r2
   2a010:	00206240 	call	20624 <__mulsi3>
   2a014:	9826943a 	slli	r19,r19,16
   2a018:	9006d43a 	srli	r3,r18,16
   2a01c:	1cc6b03a 	or	r3,r3,r19
   2a020:	1880052e 	bgeu	r3,r2,2a038 <__udivdi3+0xec>
   2a024:	1c47883a 	add	r3,r3,r17
   2a028:	b13fffc4 	addi	r4,r22,-1
   2a02c:	1c400136 	bltu	r3,r17,2a034 <__udivdi3+0xe8>
   2a030:	18814236 	bltu	r3,r2,2a53c <__udivdi3+0x5f0>
   2a034:	202d883a 	mov	r22,r4
   2a038:	18a1c83a 	sub	r16,r3,r2
   2a03c:	8009883a 	mov	r4,r16
   2a040:	a80b883a 	mov	r5,r21
   2a044:	002ac680 	call	2ac68 <__umodsi3>
   2a048:	1027883a 	mov	r19,r2
   2a04c:	8009883a 	mov	r4,r16
   2a050:	a80b883a 	mov	r5,r21
   2a054:	9826943a 	slli	r19,r19,16
   2a058:	002ac040 	call	2ac04 <__udivsi3>
   2a05c:	100b883a 	mov	r5,r2
   2a060:	a009883a 	mov	r4,r20
   2a064:	94bfffcc 	andi	r18,r18,65535
   2a068:	1021883a 	mov	r16,r2
   2a06c:	94e4b03a 	or	r18,r18,r19
   2a070:	00206240 	call	20624 <__mulsi3>
   2a074:	9080052e 	bgeu	r18,r2,2a08c <__udivdi3+0x140>
   2a078:	8ca5883a 	add	r18,r17,r18
   2a07c:	80ffffc4 	addi	r3,r16,-1
   2a080:	94410c36 	bltu	r18,r17,2a4b4 <__udivdi3+0x568>
   2a084:	90810b2e 	bgeu	r18,r2,2a4b4 <__udivdi3+0x568>
   2a088:	843fff84 	addi	r16,r16,-2
   2a08c:	b004943a 	slli	r2,r22,16
   2a090:	0007883a 	mov	r3,zero
   2a094:	1404b03a 	or	r2,r2,r16
   2a098:	00005e06 	br	2a214 <__udivdi3+0x2c8>
   2a09c:	29c05b36 	bltu	r5,r7,2a20c <__udivdi3+0x2c0>
   2a0a0:	00bfffd4 	movui	r2,65535
   2a0a4:	11c0672e 	bgeu	r2,r7,2a244 <__udivdi3+0x2f8>
   2a0a8:	00804034 	movhi	r2,256
   2a0ac:	10bfffc4 	addi	r2,r2,-1
   2a0b0:	11c10a36 	bltu	r2,r7,2a4dc <__udivdi3+0x590>
   2a0b4:	00800404 	movi	r2,16
   2a0b8:	3886d83a 	srl	r3,r7,r2
   2a0bc:	010000f4 	movhi	r4,3
   2a0c0:	2103cd04 	addi	r4,r4,3892
   2a0c4:	20c7883a 	add	r3,r4,r3
   2a0c8:	18c00003 	ldbu	r3,0(r3)
   2a0cc:	05c00804 	movi	r23,32
   2a0d0:	1885883a 	add	r2,r3,r2
   2a0d4:	b8afc83a 	sub	r23,r23,r2
   2a0d8:	b800671e 	bne	r23,zero,2a278 <__udivdi3+0x32c>
   2a0dc:	3c010536 	bltu	r7,r16,2a4f4 <__udivdi3+0x5a8>
   2a0e0:	9985403a 	cmpgeu	r2,r19,r6
   2a0e4:	0007883a 	mov	r3,zero
   2a0e8:	00004a06 	br	2a214 <__udivdi3+0x2c8>
   2a0ec:	3000041e 	bne	r6,zero,2a100 <__udivdi3+0x1b4>
   2a0f0:	000b883a 	mov	r5,zero
   2a0f4:	01000044 	movi	r4,1
   2a0f8:	002ac040 	call	2ac04 <__udivsi3>
   2a0fc:	1023883a 	mov	r17,r2
   2a100:	00bfffd4 	movui	r2,65535
   2a104:	1440532e 	bgeu	r2,r17,2a254 <__udivdi3+0x308>
   2a108:	00804034 	movhi	r2,256
   2a10c:	10bfffc4 	addi	r2,r2,-1
   2a110:	1440f436 	bltu	r2,r17,2a4e4 <__udivdi3+0x598>
   2a114:	00800404 	movi	r2,16
   2a118:	8886d83a 	srl	r3,r17,r2
   2a11c:	010000f4 	movhi	r4,3
   2a120:	2103cd04 	addi	r4,r4,3892
   2a124:	20c7883a 	add	r3,r4,r3
   2a128:	18c00003 	ldbu	r3,0(r3)
   2a12c:	1885883a 	add	r2,r3,r2
   2a130:	00c00804 	movi	r3,32
   2a134:	1887c83a 	sub	r3,r3,r2
   2a138:	1800a51e 	bne	r3,zero,2a3d0 <__udivdi3+0x484>
   2a13c:	882ad43a 	srli	r21,r17,16
   2a140:	8461c83a 	sub	r16,r16,r17
   2a144:	8d3fffcc 	andi	r20,r17,65535
   2a148:	00c00044 	movi	r3,1
   2a14c:	a80b883a 	mov	r5,r21
   2a150:	8009883a 	mov	r4,r16
   2a154:	d8c00115 	stw	r3,4(sp)
   2a158:	002ac680 	call	2ac68 <__umodsi3>
   2a15c:	a80b883a 	mov	r5,r21
   2a160:	8009883a 	mov	r4,r16
   2a164:	1027883a 	mov	r19,r2
   2a168:	002ac040 	call	2ac04 <__udivsi3>
   2a16c:	a00b883a 	mov	r5,r20
   2a170:	1009883a 	mov	r4,r2
   2a174:	102d883a 	mov	r22,r2
   2a178:	00206240 	call	20624 <__mulsi3>
   2a17c:	9826943a 	slli	r19,r19,16
   2a180:	900ed43a 	srli	r7,r18,16
   2a184:	d8c00117 	ldw	r3,4(sp)
   2a188:	3cceb03a 	or	r7,r7,r19
   2a18c:	3880052e 	bgeu	r7,r2,2a1a4 <__udivdi3+0x258>
   2a190:	3c4f883a 	add	r7,r7,r17
   2a194:	b13fffc4 	addi	r4,r22,-1
   2a198:	3c400136 	bltu	r7,r17,2a1a0 <__udivdi3+0x254>
   2a19c:	3880e436 	bltu	r7,r2,2a530 <__udivdi3+0x5e4>
   2a1a0:	202d883a 	mov	r22,r4
   2a1a4:	38a1c83a 	sub	r16,r7,r2
   2a1a8:	8009883a 	mov	r4,r16
   2a1ac:	a80b883a 	mov	r5,r21
   2a1b0:	d8c00115 	stw	r3,4(sp)
   2a1b4:	002ac680 	call	2ac68 <__umodsi3>
   2a1b8:	1027883a 	mov	r19,r2
   2a1bc:	8009883a 	mov	r4,r16
   2a1c0:	a80b883a 	mov	r5,r21
   2a1c4:	9826943a 	slli	r19,r19,16
   2a1c8:	002ac040 	call	2ac04 <__udivsi3>
   2a1cc:	a00b883a 	mov	r5,r20
   2a1d0:	1009883a 	mov	r4,r2
   2a1d4:	94bfffcc 	andi	r18,r18,65535
   2a1d8:	1021883a 	mov	r16,r2
   2a1dc:	94e4b03a 	or	r18,r18,r19
   2a1e0:	00206240 	call	20624 <__mulsi3>
   2a1e4:	d8c00117 	ldw	r3,4(sp)
   2a1e8:	9080052e 	bgeu	r18,r2,2a200 <__udivdi3+0x2b4>
   2a1ec:	8ca5883a 	add	r18,r17,r18
   2a1f0:	813fffc4 	addi	r4,r16,-1
   2a1f4:	9440ad36 	bltu	r18,r17,2a4ac <__udivdi3+0x560>
   2a1f8:	9080ac2e 	bgeu	r18,r2,2a4ac <__udivdi3+0x560>
   2a1fc:	843fff84 	addi	r16,r16,-2
   2a200:	b004943a 	slli	r2,r22,16
   2a204:	1404b03a 	or	r2,r2,r16
   2a208:	00000206 	br	2a214 <__udivdi3+0x2c8>
   2a20c:	0007883a 	mov	r3,zero
   2a210:	0005883a 	mov	r2,zero
   2a214:	dfc00b17 	ldw	ra,44(sp)
   2a218:	df000a17 	ldw	fp,40(sp)
   2a21c:	ddc00917 	ldw	r23,36(sp)
   2a220:	dd800817 	ldw	r22,32(sp)
   2a224:	dd400717 	ldw	r21,28(sp)
   2a228:	dd000617 	ldw	r20,24(sp)
   2a22c:	dcc00517 	ldw	r19,20(sp)
   2a230:	dc800417 	ldw	r18,16(sp)
   2a234:	dc400317 	ldw	r17,12(sp)
   2a238:	dc000217 	ldw	r16,8(sp)
   2a23c:	dec00c04 	addi	sp,sp,48
   2a240:	f800283a 	ret
   2a244:	00803fc4 	movi	r2,255
   2a248:	11c5803a 	cmpltu	r2,r2,r7
   2a24c:	100490fa 	slli	r2,r2,3
   2a250:	003f9906 	br	2a0b8 <_gp+0xfffef200>
   2a254:	00803fc4 	movi	r2,255
   2a258:	1445803a 	cmpltu	r2,r2,r17
   2a25c:	100490fa 	slli	r2,r2,3
   2a260:	003fad06 	br	2a118 <_gp+0xfffef260>
   2a264:	00804034 	movhi	r2,256
   2a268:	10bfffc4 	addi	r2,r2,-1
   2a26c:	11809f36 	bltu	r2,r6,2a4ec <__udivdi3+0x5a0>
   2a270:	00800404 	movi	r2,16
   2a274:	003f4c06 	br	29fa8 <_gp+0xfffef0f0>
   2a278:	3dce983a 	sll	r7,r7,r23
   2a27c:	30b8d83a 	srl	fp,r6,r2
   2a280:	80a2d83a 	srl	r17,r16,r2
   2a284:	35cc983a 	sll	r6,r6,r23
   2a288:	3f38b03a 	or	fp,r7,fp
   2a28c:	e024d43a 	srli	r18,fp,16
   2a290:	9884d83a 	srl	r2,r19,r2
   2a294:	85e0983a 	sll	r16,r16,r23
   2a298:	8809883a 	mov	r4,r17
   2a29c:	900b883a 	mov	r5,r18
   2a2a0:	d9800015 	stw	r6,0(sp)
   2a2a4:	1420b03a 	or	r16,r2,r16
   2a2a8:	002ac680 	call	2ac68 <__umodsi3>
   2a2ac:	900b883a 	mov	r5,r18
   2a2b0:	8809883a 	mov	r4,r17
   2a2b4:	1029883a 	mov	r20,r2
   2a2b8:	e5bfffcc 	andi	r22,fp,65535
   2a2bc:	002ac040 	call	2ac04 <__udivsi3>
   2a2c0:	100b883a 	mov	r5,r2
   2a2c4:	b009883a 	mov	r4,r22
   2a2c8:	102b883a 	mov	r21,r2
   2a2cc:	00206240 	call	20624 <__mulsi3>
   2a2d0:	a028943a 	slli	r20,r20,16
   2a2d4:	8006d43a 	srli	r3,r16,16
   2a2d8:	1d06b03a 	or	r3,r3,r20
   2a2dc:	1880042e 	bgeu	r3,r2,2a2f0 <__udivdi3+0x3a4>
   2a2e0:	1f07883a 	add	r3,r3,fp
   2a2e4:	a93fffc4 	addi	r4,r21,-1
   2a2e8:	1f00892e 	bgeu	r3,fp,2a510 <__udivdi3+0x5c4>
   2a2ec:	202b883a 	mov	r21,r4
   2a2f0:	18a3c83a 	sub	r17,r3,r2
   2a2f4:	8809883a 	mov	r4,r17
   2a2f8:	900b883a 	mov	r5,r18
   2a2fc:	002ac680 	call	2ac68 <__umodsi3>
   2a300:	1029883a 	mov	r20,r2
   2a304:	8809883a 	mov	r4,r17
   2a308:	900b883a 	mov	r5,r18
   2a30c:	a028943a 	slli	r20,r20,16
   2a310:	002ac040 	call	2ac04 <__udivsi3>
   2a314:	100b883a 	mov	r5,r2
   2a318:	b009883a 	mov	r4,r22
   2a31c:	843fffcc 	andi	r16,r16,65535
   2a320:	1023883a 	mov	r17,r2
   2a324:	8520b03a 	or	r16,r16,r20
   2a328:	00206240 	call	20624 <__mulsi3>
   2a32c:	8080042e 	bgeu	r16,r2,2a340 <__udivdi3+0x3f4>
   2a330:	8721883a 	add	r16,r16,fp
   2a334:	88ffffc4 	addi	r3,r17,-1
   2a338:	8700712e 	bgeu	r16,fp,2a500 <__udivdi3+0x5b4>
   2a33c:	1823883a 	mov	r17,r3
   2a340:	a80e943a 	slli	r7,r21,16
   2a344:	d8c00017 	ldw	r3,0(sp)
   2a348:	80a1c83a 	sub	r16,r16,r2
   2a34c:	3c64b03a 	or	r18,r7,r17
   2a350:	1d3fffcc 	andi	r20,r3,65535
   2a354:	9022d43a 	srli	r17,r18,16
   2a358:	95bfffcc 	andi	r22,r18,65535
   2a35c:	a00b883a 	mov	r5,r20
   2a360:	b009883a 	mov	r4,r22
   2a364:	182ad43a 	srli	r21,r3,16
   2a368:	00206240 	call	20624 <__mulsi3>
   2a36c:	a00b883a 	mov	r5,r20
   2a370:	8809883a 	mov	r4,r17
   2a374:	1039883a 	mov	fp,r2
   2a378:	00206240 	call	20624 <__mulsi3>
   2a37c:	8809883a 	mov	r4,r17
   2a380:	a80b883a 	mov	r5,r21
   2a384:	1029883a 	mov	r20,r2
   2a388:	00206240 	call	20624 <__mulsi3>
   2a38c:	a80b883a 	mov	r5,r21
   2a390:	b009883a 	mov	r4,r22
   2a394:	1023883a 	mov	r17,r2
   2a398:	00206240 	call	20624 <__mulsi3>
   2a39c:	e006d43a 	srli	r3,fp,16
   2a3a0:	1505883a 	add	r2,r2,r20
   2a3a4:	1887883a 	add	r3,r3,r2
   2a3a8:	1d00022e 	bgeu	r3,r20,2a3b4 <__udivdi3+0x468>
   2a3ac:	00800074 	movhi	r2,1
   2a3b0:	88a3883a 	add	r17,r17,r2
   2a3b4:	1804d43a 	srli	r2,r3,16
   2a3b8:	1463883a 	add	r17,r2,r17
   2a3bc:	84404436 	bltu	r16,r17,2a4d0 <__udivdi3+0x584>
   2a3c0:	84403e26 	beq	r16,r17,2a4bc <__udivdi3+0x570>
   2a3c4:	9005883a 	mov	r2,r18
   2a3c8:	0007883a 	mov	r3,zero
   2a3cc:	003f9106 	br	2a214 <_gp+0xfffef35c>
   2a3d0:	88e2983a 	sll	r17,r17,r3
   2a3d4:	80aed83a 	srl	r23,r16,r2
   2a3d8:	80e0983a 	sll	r16,r16,r3
   2a3dc:	882ad43a 	srli	r21,r17,16
   2a3e0:	9884d83a 	srl	r2,r19,r2
   2a3e4:	b809883a 	mov	r4,r23
   2a3e8:	a80b883a 	mov	r5,r21
   2a3ec:	98e4983a 	sll	r18,r19,r3
   2a3f0:	142cb03a 	or	r22,r2,r16
   2a3f4:	002ac680 	call	2ac68 <__umodsi3>
   2a3f8:	b809883a 	mov	r4,r23
   2a3fc:	a80b883a 	mov	r5,r21
   2a400:	1027883a 	mov	r19,r2
   2a404:	8d3fffcc 	andi	r20,r17,65535
   2a408:	002ac040 	call	2ac04 <__udivsi3>
   2a40c:	a009883a 	mov	r4,r20
   2a410:	100b883a 	mov	r5,r2
   2a414:	102f883a 	mov	r23,r2
   2a418:	00206240 	call	20624 <__mulsi3>
   2a41c:	9826943a 	slli	r19,r19,16
   2a420:	b008d43a 	srli	r4,r22,16
   2a424:	24c8b03a 	or	r4,r4,r19
   2a428:	2080062e 	bgeu	r4,r2,2a444 <__udivdi3+0x4f8>
   2a42c:	2449883a 	add	r4,r4,r17
   2a430:	b8ffffc4 	addi	r3,r23,-1
   2a434:	24403c36 	bltu	r4,r17,2a528 <__udivdi3+0x5dc>
   2a438:	20803b2e 	bgeu	r4,r2,2a528 <__udivdi3+0x5dc>
   2a43c:	bdffff84 	addi	r23,r23,-2
   2a440:	2449883a 	add	r4,r4,r17
   2a444:	20a1c83a 	sub	r16,r4,r2
   2a448:	a80b883a 	mov	r5,r21
   2a44c:	8009883a 	mov	r4,r16
   2a450:	002ac680 	call	2ac68 <__umodsi3>
   2a454:	a80b883a 	mov	r5,r21
   2a458:	8009883a 	mov	r4,r16
   2a45c:	1027883a 	mov	r19,r2
   2a460:	002ac040 	call	2ac04 <__udivsi3>
   2a464:	a009883a 	mov	r4,r20
   2a468:	100b883a 	mov	r5,r2
   2a46c:	9826943a 	slli	r19,r19,16
   2a470:	1039883a 	mov	fp,r2
   2a474:	00206240 	call	20624 <__mulsi3>
   2a478:	b13fffcc 	andi	r4,r22,65535
   2a47c:	24c8b03a 	or	r4,r4,r19
   2a480:	2080062e 	bgeu	r4,r2,2a49c <__udivdi3+0x550>
   2a484:	2449883a 	add	r4,r4,r17
   2a488:	e0ffffc4 	addi	r3,fp,-1
   2a48c:	24402436 	bltu	r4,r17,2a520 <__udivdi3+0x5d4>
   2a490:	2080232e 	bgeu	r4,r2,2a520 <__udivdi3+0x5d4>
   2a494:	e73fff84 	addi	fp,fp,-2
   2a498:	2449883a 	add	r4,r4,r17
   2a49c:	b82e943a 	slli	r23,r23,16
   2a4a0:	20a1c83a 	sub	r16,r4,r2
   2a4a4:	bf06b03a 	or	r3,r23,fp
   2a4a8:	003f2806 	br	2a14c <_gp+0xfffef294>
   2a4ac:	2021883a 	mov	r16,r4
   2a4b0:	003f5306 	br	2a200 <_gp+0xfffef348>
   2a4b4:	1821883a 	mov	r16,r3
   2a4b8:	003ef406 	br	2a08c <_gp+0xfffef1d4>
   2a4bc:	1806943a 	slli	r3,r3,16
   2a4c0:	9de6983a 	sll	r19,r19,r23
   2a4c4:	e73fffcc 	andi	fp,fp,65535
   2a4c8:	1f07883a 	add	r3,r3,fp
   2a4cc:	98ffbd2e 	bgeu	r19,r3,2a3c4 <_gp+0xfffef50c>
   2a4d0:	90bfffc4 	addi	r2,r18,-1
   2a4d4:	0007883a 	mov	r3,zero
   2a4d8:	003f4e06 	br	2a214 <_gp+0xfffef35c>
   2a4dc:	00800604 	movi	r2,24
   2a4e0:	003ef506 	br	2a0b8 <_gp+0xfffef200>
   2a4e4:	00800604 	movi	r2,24
   2a4e8:	003f0b06 	br	2a118 <_gp+0xfffef260>
   2a4ec:	00800604 	movi	r2,24
   2a4f0:	003ead06 	br	29fa8 <_gp+0xfffef0f0>
   2a4f4:	0007883a 	mov	r3,zero
   2a4f8:	00800044 	movi	r2,1
   2a4fc:	003f4506 	br	2a214 <_gp+0xfffef35c>
   2a500:	80bf8e2e 	bgeu	r16,r2,2a33c <_gp+0xfffef484>
   2a504:	8c7fff84 	addi	r17,r17,-2
   2a508:	8721883a 	add	r16,r16,fp
   2a50c:	003f8c06 	br	2a340 <_gp+0xfffef488>
   2a510:	18bf762e 	bgeu	r3,r2,2a2ec <_gp+0xfffef434>
   2a514:	ad7fff84 	addi	r21,r21,-2
   2a518:	1f07883a 	add	r3,r3,fp
   2a51c:	003f7406 	br	2a2f0 <_gp+0xfffef438>
   2a520:	1839883a 	mov	fp,r3
   2a524:	003fdd06 	br	2a49c <_gp+0xfffef5e4>
   2a528:	182f883a 	mov	r23,r3
   2a52c:	003fc506 	br	2a444 <_gp+0xfffef58c>
   2a530:	b5bfff84 	addi	r22,r22,-2
   2a534:	3c4f883a 	add	r7,r7,r17
   2a538:	003f1a06 	br	2a1a4 <_gp+0xfffef2ec>
   2a53c:	b5bfff84 	addi	r22,r22,-2
   2a540:	1c47883a 	add	r3,r3,r17
   2a544:	003ebc06 	br	2a038 <_gp+0xfffef180>

0002a548 <__umoddi3>:
   2a548:	defff304 	addi	sp,sp,-52
   2a54c:	df000b15 	stw	fp,44(sp)
   2a550:	dc400415 	stw	r17,16(sp)
   2a554:	dc000315 	stw	r16,12(sp)
   2a558:	dfc00c15 	stw	ra,48(sp)
   2a55c:	ddc00a15 	stw	r23,40(sp)
   2a560:	dd800915 	stw	r22,36(sp)
   2a564:	dd400815 	stw	r21,32(sp)
   2a568:	dd000715 	stw	r20,28(sp)
   2a56c:	dcc00615 	stw	r19,24(sp)
   2a570:	dc800515 	stw	r18,20(sp)
   2a574:	2021883a 	mov	r16,r4
   2a578:	2823883a 	mov	r17,r5
   2a57c:	2839883a 	mov	fp,r5
   2a580:	3800401e 	bne	r7,zero,2a684 <__umoddi3+0x13c>
   2a584:	3027883a 	mov	r19,r6
   2a588:	2029883a 	mov	r20,r4
   2a58c:	2980552e 	bgeu	r5,r6,2a6e4 <__umoddi3+0x19c>
   2a590:	00bfffd4 	movui	r2,65535
   2a594:	1180a236 	bltu	r2,r6,2a820 <__umoddi3+0x2d8>
   2a598:	01003fc4 	movi	r4,255
   2a59c:	2189803a 	cmpltu	r4,r4,r6
   2a5a0:	200890fa 	slli	r4,r4,3
   2a5a4:	3104d83a 	srl	r2,r6,r4
   2a5a8:	00c000f4 	movhi	r3,3
   2a5ac:	18c3cd04 	addi	r3,r3,3892
   2a5b0:	1885883a 	add	r2,r3,r2
   2a5b4:	10c00003 	ldbu	r3,0(r2)
   2a5b8:	00800804 	movi	r2,32
   2a5bc:	1909883a 	add	r4,r3,r4
   2a5c0:	1125c83a 	sub	r18,r2,r4
   2a5c4:	90000526 	beq	r18,zero,2a5dc <__umoddi3+0x94>
   2a5c8:	8ca2983a 	sll	r17,r17,r18
   2a5cc:	8108d83a 	srl	r4,r16,r4
   2a5d0:	34a6983a 	sll	r19,r6,r18
   2a5d4:	84a8983a 	sll	r20,r16,r18
   2a5d8:	2478b03a 	or	fp,r4,r17
   2a5dc:	982cd43a 	srli	r22,r19,16
   2a5e0:	e009883a 	mov	r4,fp
   2a5e4:	9dffffcc 	andi	r23,r19,65535
   2a5e8:	b00b883a 	mov	r5,r22
   2a5ec:	002ac680 	call	2ac68 <__umodsi3>
   2a5f0:	b00b883a 	mov	r5,r22
   2a5f4:	e009883a 	mov	r4,fp
   2a5f8:	102b883a 	mov	r21,r2
   2a5fc:	002ac040 	call	2ac04 <__udivsi3>
   2a600:	100b883a 	mov	r5,r2
   2a604:	b809883a 	mov	r4,r23
   2a608:	00206240 	call	20624 <__mulsi3>
   2a60c:	a82a943a 	slli	r21,r21,16
   2a610:	a006d43a 	srli	r3,r20,16
   2a614:	1d46b03a 	or	r3,r3,r21
   2a618:	1880032e 	bgeu	r3,r2,2a628 <__umoddi3+0xe0>
   2a61c:	1cc7883a 	add	r3,r3,r19
   2a620:	1cc00136 	bltu	r3,r19,2a628 <__umoddi3+0xe0>
   2a624:	18813136 	bltu	r3,r2,2aaec <__umoddi3+0x5a4>
   2a628:	18a1c83a 	sub	r16,r3,r2
   2a62c:	b00b883a 	mov	r5,r22
   2a630:	8009883a 	mov	r4,r16
   2a634:	002ac680 	call	2ac68 <__umodsi3>
   2a638:	b00b883a 	mov	r5,r22
   2a63c:	8009883a 	mov	r4,r16
   2a640:	1023883a 	mov	r17,r2
   2a644:	002ac040 	call	2ac04 <__udivsi3>
   2a648:	100b883a 	mov	r5,r2
   2a64c:	b809883a 	mov	r4,r23
   2a650:	8822943a 	slli	r17,r17,16
   2a654:	00206240 	call	20624 <__mulsi3>
   2a658:	a0ffffcc 	andi	r3,r20,65535
   2a65c:	1c46b03a 	or	r3,r3,r17
   2a660:	1880042e 	bgeu	r3,r2,2a674 <__umoddi3+0x12c>
   2a664:	1cc7883a 	add	r3,r3,r19
   2a668:	1cc00236 	bltu	r3,r19,2a674 <__umoddi3+0x12c>
   2a66c:	1880012e 	bgeu	r3,r2,2a674 <__umoddi3+0x12c>
   2a670:	1cc7883a 	add	r3,r3,r19
   2a674:	1885c83a 	sub	r2,r3,r2
   2a678:	1484d83a 	srl	r2,r2,r18
   2a67c:	0007883a 	mov	r3,zero
   2a680:	00005306 	br	2a7d0 <__umoddi3+0x288>
   2a684:	29c05036 	bltu	r5,r7,2a7c8 <__umoddi3+0x280>
   2a688:	00bfffd4 	movui	r2,65535
   2a68c:	11c05c2e 	bgeu	r2,r7,2a800 <__umoddi3+0x2b8>
   2a690:	00804034 	movhi	r2,256
   2a694:	10bfffc4 	addi	r2,r2,-1
   2a698:	11c10636 	bltu	r2,r7,2aab4 <__umoddi3+0x56c>
   2a69c:	01000404 	movi	r4,16
   2a6a0:	3904d83a 	srl	r2,r7,r4
   2a6a4:	00c000f4 	movhi	r3,3
   2a6a8:	18c3cd04 	addi	r3,r3,3892
   2a6ac:	1885883a 	add	r2,r3,r2
   2a6b0:	14c00003 	ldbu	r19,0(r2)
   2a6b4:	00c00804 	movi	r3,32
   2a6b8:	9927883a 	add	r19,r19,r4
   2a6bc:	1ce9c83a 	sub	r20,r3,r19
   2a6c0:	a0005c1e 	bne	r20,zero,2a834 <__umoddi3+0x2ec>
   2a6c4:	3c400136 	bltu	r7,r17,2a6cc <__umoddi3+0x184>
   2a6c8:	81810a36 	bltu	r16,r6,2aaf4 <__umoddi3+0x5ac>
   2a6cc:	8185c83a 	sub	r2,r16,r6
   2a6d0:	89e3c83a 	sub	r17,r17,r7
   2a6d4:	8089803a 	cmpltu	r4,r16,r2
   2a6d8:	8939c83a 	sub	fp,r17,r4
   2a6dc:	e007883a 	mov	r3,fp
   2a6e0:	00003b06 	br	2a7d0 <__umoddi3+0x288>
   2a6e4:	3000041e 	bne	r6,zero,2a6f8 <__umoddi3+0x1b0>
   2a6e8:	000b883a 	mov	r5,zero
   2a6ec:	01000044 	movi	r4,1
   2a6f0:	002ac040 	call	2ac04 <__udivsi3>
   2a6f4:	1027883a 	mov	r19,r2
   2a6f8:	00bfffd4 	movui	r2,65535
   2a6fc:	14c0442e 	bgeu	r2,r19,2a810 <__umoddi3+0x2c8>
   2a700:	00804034 	movhi	r2,256
   2a704:	10bfffc4 	addi	r2,r2,-1
   2a708:	14c0ec36 	bltu	r2,r19,2aabc <__umoddi3+0x574>
   2a70c:	00800404 	movi	r2,16
   2a710:	9886d83a 	srl	r3,r19,r2
   2a714:	010000f4 	movhi	r4,3
   2a718:	2103cd04 	addi	r4,r4,3892
   2a71c:	20c7883a 	add	r3,r4,r3
   2a720:	18c00003 	ldbu	r3,0(r3)
   2a724:	1887883a 	add	r3,r3,r2
   2a728:	00800804 	movi	r2,32
   2a72c:	10e5c83a 	sub	r18,r2,r3
   2a730:	9000ab1e 	bne	r18,zero,2a9e0 <__umoddi3+0x498>
   2a734:	982cd43a 	srli	r22,r19,16
   2a738:	8ce3c83a 	sub	r17,r17,r19
   2a73c:	9dffffcc 	andi	r23,r19,65535
   2a740:	b00b883a 	mov	r5,r22
   2a744:	8809883a 	mov	r4,r17
   2a748:	002ac680 	call	2ac68 <__umodsi3>
   2a74c:	b00b883a 	mov	r5,r22
   2a750:	8809883a 	mov	r4,r17
   2a754:	102b883a 	mov	r21,r2
   2a758:	002ac040 	call	2ac04 <__udivsi3>
   2a75c:	b80b883a 	mov	r5,r23
   2a760:	1009883a 	mov	r4,r2
   2a764:	00206240 	call	20624 <__mulsi3>
   2a768:	a82a943a 	slli	r21,r21,16
   2a76c:	a006d43a 	srli	r3,r20,16
   2a770:	1d46b03a 	or	r3,r3,r21
   2a774:	1880042e 	bgeu	r3,r2,2a788 <__umoddi3+0x240>
   2a778:	1cc7883a 	add	r3,r3,r19
   2a77c:	1cc00236 	bltu	r3,r19,2a788 <__umoddi3+0x240>
   2a780:	1880012e 	bgeu	r3,r2,2a788 <__umoddi3+0x240>
   2a784:	1cc7883a 	add	r3,r3,r19
   2a788:	18a1c83a 	sub	r16,r3,r2
   2a78c:	b00b883a 	mov	r5,r22
   2a790:	8009883a 	mov	r4,r16
   2a794:	002ac680 	call	2ac68 <__umodsi3>
   2a798:	1023883a 	mov	r17,r2
   2a79c:	b00b883a 	mov	r5,r22
   2a7a0:	8009883a 	mov	r4,r16
   2a7a4:	002ac040 	call	2ac04 <__udivsi3>
   2a7a8:	8822943a 	slli	r17,r17,16
   2a7ac:	b80b883a 	mov	r5,r23
   2a7b0:	1009883a 	mov	r4,r2
   2a7b4:	00206240 	call	20624 <__mulsi3>
   2a7b8:	a53fffcc 	andi	r20,r20,65535
   2a7bc:	a446b03a 	or	r3,r20,r17
   2a7c0:	18bfac2e 	bgeu	r3,r2,2a674 <_gp+0xfffef7bc>
   2a7c4:	003fa706 	br	2a664 <_gp+0xfffef7ac>
   2a7c8:	2005883a 	mov	r2,r4
   2a7cc:	2807883a 	mov	r3,r5
   2a7d0:	dfc00c17 	ldw	ra,48(sp)
   2a7d4:	df000b17 	ldw	fp,44(sp)
   2a7d8:	ddc00a17 	ldw	r23,40(sp)
   2a7dc:	dd800917 	ldw	r22,36(sp)
   2a7e0:	dd400817 	ldw	r21,32(sp)
   2a7e4:	dd000717 	ldw	r20,28(sp)
   2a7e8:	dcc00617 	ldw	r19,24(sp)
   2a7ec:	dc800517 	ldw	r18,20(sp)
   2a7f0:	dc400417 	ldw	r17,16(sp)
   2a7f4:	dc000317 	ldw	r16,12(sp)
   2a7f8:	dec00d04 	addi	sp,sp,52
   2a7fc:	f800283a 	ret
   2a800:	04c03fc4 	movi	r19,255
   2a804:	99c9803a 	cmpltu	r4,r19,r7
   2a808:	200890fa 	slli	r4,r4,3
   2a80c:	003fa406 	br	2a6a0 <_gp+0xfffef7e8>
   2a810:	00803fc4 	movi	r2,255
   2a814:	14c5803a 	cmpltu	r2,r2,r19
   2a818:	100490fa 	slli	r2,r2,3
   2a81c:	003fbc06 	br	2a710 <_gp+0xfffef858>
   2a820:	00804034 	movhi	r2,256
   2a824:	10bfffc4 	addi	r2,r2,-1
   2a828:	1180a636 	bltu	r2,r6,2aac4 <__umoddi3+0x57c>
   2a82c:	01000404 	movi	r4,16
   2a830:	003f5c06 	br	2a5a4 <_gp+0xfffef6ec>
   2a834:	3d0e983a 	sll	r7,r7,r20
   2a838:	34ead83a 	srl	r21,r6,r19
   2a83c:	8cc6d83a 	srl	r3,r17,r19
   2a840:	8d10983a 	sll	r8,r17,r20
   2a844:	3d6ab03a 	or	r21,r7,r21
   2a848:	a82cd43a 	srli	r22,r21,16
   2a84c:	84e2d83a 	srl	r17,r16,r19
   2a850:	1809883a 	mov	r4,r3
   2a854:	b00b883a 	mov	r5,r22
   2a858:	8a22b03a 	or	r17,r17,r8
   2a85c:	3524983a 	sll	r18,r6,r20
   2a860:	dc400015 	stw	r17,0(sp)
   2a864:	d8c00115 	stw	r3,4(sp)
   2a868:	002ac680 	call	2ac68 <__umodsi3>
   2a86c:	d8c00117 	ldw	r3,4(sp)
   2a870:	b00b883a 	mov	r5,r22
   2a874:	1039883a 	mov	fp,r2
   2a878:	1809883a 	mov	r4,r3
   2a87c:	002ac040 	call	2ac04 <__udivsi3>
   2a880:	adffffcc 	andi	r23,r21,65535
   2a884:	100b883a 	mov	r5,r2
   2a888:	b809883a 	mov	r4,r23
   2a88c:	1023883a 	mov	r17,r2
   2a890:	00206240 	call	20624 <__mulsi3>
   2a894:	d9400017 	ldw	r5,0(sp)
   2a898:	e008943a 	slli	r4,fp,16
   2a89c:	8520983a 	sll	r16,r16,r20
   2a8a0:	2806d43a 	srli	r3,r5,16
   2a8a4:	1906b03a 	or	r3,r3,r4
   2a8a8:	1880042e 	bgeu	r3,r2,2a8bc <__umoddi3+0x374>
   2a8ac:	1d47883a 	add	r3,r3,r21
   2a8b0:	893fffc4 	addi	r4,r17,-1
   2a8b4:	1d40892e 	bgeu	r3,r21,2aadc <__umoddi3+0x594>
   2a8b8:	2023883a 	mov	r17,r4
   2a8bc:	18b9c83a 	sub	fp,r3,r2
   2a8c0:	b00b883a 	mov	r5,r22
   2a8c4:	e009883a 	mov	r4,fp
   2a8c8:	002ac680 	call	2ac68 <__umodsi3>
   2a8cc:	b00b883a 	mov	r5,r22
   2a8d0:	e009883a 	mov	r4,fp
   2a8d4:	d8800215 	stw	r2,8(sp)
   2a8d8:	002ac040 	call	2ac04 <__udivsi3>
   2a8dc:	100b883a 	mov	r5,r2
   2a8e0:	b809883a 	mov	r4,r23
   2a8e4:	102d883a 	mov	r22,r2
   2a8e8:	00206240 	call	20624 <__mulsi3>
   2a8ec:	d9800217 	ldw	r6,8(sp)
   2a8f0:	d8c00017 	ldw	r3,0(sp)
   2a8f4:	300c943a 	slli	r6,r6,16
   2a8f8:	1a3fffcc 	andi	r8,r3,65535
   2a8fc:	4190b03a 	or	r8,r8,r6
   2a900:	4080042e 	bgeu	r8,r2,2a914 <__umoddi3+0x3cc>
   2a904:	4551883a 	add	r8,r8,r21
   2a908:	b0ffffc4 	addi	r3,r22,-1
   2a90c:	45406f2e 	bgeu	r8,r21,2aacc <__umoddi3+0x584>
   2a910:	182d883a 	mov	r22,r3
   2a914:	880e943a 	slli	r7,r17,16
   2a918:	9006d43a 	srli	r3,r18,16
   2a91c:	91bfffcc 	andi	r6,r18,65535
   2a920:	3dacb03a 	or	r22,r7,r22
   2a924:	b02ed43a 	srli	r23,r22,16
   2a928:	b5bfffcc 	andi	r22,r22,65535
   2a92c:	300b883a 	mov	r5,r6
   2a930:	b009883a 	mov	r4,r22
   2a934:	40a3c83a 	sub	r17,r8,r2
   2a938:	d8c00115 	stw	r3,4(sp)
   2a93c:	d9800215 	stw	r6,8(sp)
   2a940:	00206240 	call	20624 <__mulsi3>
   2a944:	d9800217 	ldw	r6,8(sp)
   2a948:	b809883a 	mov	r4,r23
   2a94c:	1039883a 	mov	fp,r2
   2a950:	300b883a 	mov	r5,r6
   2a954:	00206240 	call	20624 <__mulsi3>
   2a958:	d8c00117 	ldw	r3,4(sp)
   2a95c:	b809883a 	mov	r4,r23
   2a960:	d8800215 	stw	r2,8(sp)
   2a964:	180b883a 	mov	r5,r3
   2a968:	00206240 	call	20624 <__mulsi3>
   2a96c:	d8c00117 	ldw	r3,4(sp)
   2a970:	b009883a 	mov	r4,r22
   2a974:	102f883a 	mov	r23,r2
   2a978:	180b883a 	mov	r5,r3
   2a97c:	00206240 	call	20624 <__mulsi3>
   2a980:	d9800217 	ldw	r6,8(sp)
   2a984:	e006d43a 	srli	r3,fp,16
   2a988:	1185883a 	add	r2,r2,r6
   2a98c:	1885883a 	add	r2,r3,r2
   2a990:	1180022e 	bgeu	r2,r6,2a99c <__umoddi3+0x454>
   2a994:	00c00074 	movhi	r3,1
   2a998:	b8ef883a 	add	r23,r23,r3
   2a99c:	1006d43a 	srli	r3,r2,16
   2a9a0:	1004943a 	slli	r2,r2,16
   2a9a4:	e73fffcc 	andi	fp,fp,65535
   2a9a8:	1dc7883a 	add	r3,r3,r23
   2a9ac:	1739883a 	add	fp,r2,fp
   2a9b0:	88c03a36 	bltu	r17,r3,2aa9c <__umoddi3+0x554>
   2a9b4:	88c05126 	beq	r17,r3,2aafc <__umoddi3+0x5b4>
   2a9b8:	88c9c83a 	sub	r4,r17,r3
   2a9bc:	e00f883a 	mov	r7,fp
   2a9c0:	81cfc83a 	sub	r7,r16,r7
   2a9c4:	81c7803a 	cmpltu	r3,r16,r7
   2a9c8:	20c7c83a 	sub	r3,r4,r3
   2a9cc:	1cc4983a 	sll	r2,r3,r19
   2a9d0:	3d0ed83a 	srl	r7,r7,r20
   2a9d4:	1d06d83a 	srl	r3,r3,r20
   2a9d8:	11c4b03a 	or	r2,r2,r7
   2a9dc:	003f7c06 	br	2a7d0 <_gp+0xfffef918>
   2a9e0:	9ca6983a 	sll	r19,r19,r18
   2a9e4:	88f8d83a 	srl	fp,r17,r3
   2a9e8:	80c4d83a 	srl	r2,r16,r3
   2a9ec:	982cd43a 	srli	r22,r19,16
   2a9f0:	8ca2983a 	sll	r17,r17,r18
   2a9f4:	e009883a 	mov	r4,fp
   2a9f8:	b00b883a 	mov	r5,r22
   2a9fc:	146ab03a 	or	r21,r2,r17
   2aa00:	002ac680 	call	2ac68 <__umodsi3>
   2aa04:	b00b883a 	mov	r5,r22
   2aa08:	e009883a 	mov	r4,fp
   2aa0c:	1029883a 	mov	r20,r2
   2aa10:	9dffffcc 	andi	r23,r19,65535
   2aa14:	002ac040 	call	2ac04 <__udivsi3>
   2aa18:	b809883a 	mov	r4,r23
   2aa1c:	100b883a 	mov	r5,r2
   2aa20:	00206240 	call	20624 <__mulsi3>
   2aa24:	a008943a 	slli	r4,r20,16
   2aa28:	a806d43a 	srli	r3,r21,16
   2aa2c:	84a8983a 	sll	r20,r16,r18
   2aa30:	1906b03a 	or	r3,r3,r4
   2aa34:	1880042e 	bgeu	r3,r2,2aa48 <__umoddi3+0x500>
   2aa38:	1cc7883a 	add	r3,r3,r19
   2aa3c:	1cc00236 	bltu	r3,r19,2aa48 <__umoddi3+0x500>
   2aa40:	1880012e 	bgeu	r3,r2,2aa48 <__umoddi3+0x500>
   2aa44:	1cc7883a 	add	r3,r3,r19
   2aa48:	18a3c83a 	sub	r17,r3,r2
   2aa4c:	b00b883a 	mov	r5,r22
   2aa50:	8809883a 	mov	r4,r17
   2aa54:	002ac680 	call	2ac68 <__umodsi3>
   2aa58:	b00b883a 	mov	r5,r22
   2aa5c:	8809883a 	mov	r4,r17
   2aa60:	1021883a 	mov	r16,r2
   2aa64:	002ac040 	call	2ac04 <__udivsi3>
   2aa68:	100b883a 	mov	r5,r2
   2aa6c:	b809883a 	mov	r4,r23
   2aa70:	8020943a 	slli	r16,r16,16
   2aa74:	00206240 	call	20624 <__mulsi3>
   2aa78:	a8ffffcc 	andi	r3,r21,65535
   2aa7c:	1c06b03a 	or	r3,r3,r16
   2aa80:	1880042e 	bgeu	r3,r2,2aa94 <__umoddi3+0x54c>
   2aa84:	1cc7883a 	add	r3,r3,r19
   2aa88:	1cc00236 	bltu	r3,r19,2aa94 <__umoddi3+0x54c>
   2aa8c:	1880012e 	bgeu	r3,r2,2aa94 <__umoddi3+0x54c>
   2aa90:	1cc7883a 	add	r3,r3,r19
   2aa94:	18a3c83a 	sub	r17,r3,r2
   2aa98:	003f2906 	br	2a740 <_gp+0xfffef888>
   2aa9c:	e48fc83a 	sub	r7,fp,r18
   2aaa0:	1d49c83a 	sub	r4,r3,r21
   2aaa4:	e1f9803a 	cmpltu	fp,fp,r7
   2aaa8:	2739c83a 	sub	fp,r4,fp
   2aaac:	8f09c83a 	sub	r4,r17,fp
   2aab0:	003fc306 	br	2a9c0 <_gp+0xfffefb08>
   2aab4:	01000604 	movi	r4,24
   2aab8:	003ef906 	br	2a6a0 <_gp+0xfffef7e8>
   2aabc:	00800604 	movi	r2,24
   2aac0:	003f1306 	br	2a710 <_gp+0xfffef858>
   2aac4:	01000604 	movi	r4,24
   2aac8:	003eb606 	br	2a5a4 <_gp+0xfffef6ec>
   2aacc:	40bf902e 	bgeu	r8,r2,2a910 <_gp+0xfffefa58>
   2aad0:	b5bfff84 	addi	r22,r22,-2
   2aad4:	4551883a 	add	r8,r8,r21
   2aad8:	003f8e06 	br	2a914 <_gp+0xfffefa5c>
   2aadc:	18bf762e 	bgeu	r3,r2,2a8b8 <_gp+0xfffefa00>
   2aae0:	8c7fff84 	addi	r17,r17,-2
   2aae4:	1d47883a 	add	r3,r3,r21
   2aae8:	003f7406 	br	2a8bc <_gp+0xfffefa04>
   2aaec:	1cc7883a 	add	r3,r3,r19
   2aaf0:	003ecd06 	br	2a628 <_gp+0xfffef770>
   2aaf4:	8005883a 	mov	r2,r16
   2aaf8:	003ef806 	br	2a6dc <_gp+0xfffef824>
   2aafc:	873fe736 	bltu	r16,fp,2aa9c <_gp+0xfffefbe4>
   2ab00:	e00f883a 	mov	r7,fp
   2ab04:	0009883a 	mov	r4,zero
   2ab08:	003fad06 	br	2a9c0 <_gp+0xfffefb08>

0002ab0c <__divsi3>:
   2ab0c:	20001b16 	blt	r4,zero,2ab7c <__divsi3+0x70>
   2ab10:	000f883a 	mov	r7,zero
   2ab14:	28001616 	blt	r5,zero,2ab70 <__divsi3+0x64>
   2ab18:	200d883a 	mov	r6,r4
   2ab1c:	29001a2e 	bgeu	r5,r4,2ab88 <__divsi3+0x7c>
   2ab20:	00800804 	movi	r2,32
   2ab24:	00c00044 	movi	r3,1
   2ab28:	00000106 	br	2ab30 <__divsi3+0x24>
   2ab2c:	10000d26 	beq	r2,zero,2ab64 <__divsi3+0x58>
   2ab30:	294b883a 	add	r5,r5,r5
   2ab34:	10bfffc4 	addi	r2,r2,-1
   2ab38:	18c7883a 	add	r3,r3,r3
   2ab3c:	293ffb36 	bltu	r5,r4,2ab2c <_gp+0xfffefc74>
   2ab40:	0005883a 	mov	r2,zero
   2ab44:	18000726 	beq	r3,zero,2ab64 <__divsi3+0x58>
   2ab48:	0005883a 	mov	r2,zero
   2ab4c:	31400236 	bltu	r6,r5,2ab58 <__divsi3+0x4c>
   2ab50:	314dc83a 	sub	r6,r6,r5
   2ab54:	10c4b03a 	or	r2,r2,r3
   2ab58:	1806d07a 	srli	r3,r3,1
   2ab5c:	280ad07a 	srli	r5,r5,1
   2ab60:	183ffa1e 	bne	r3,zero,2ab4c <_gp+0xfffefc94>
   2ab64:	38000126 	beq	r7,zero,2ab6c <__divsi3+0x60>
   2ab68:	0085c83a 	sub	r2,zero,r2
   2ab6c:	f800283a 	ret
   2ab70:	014bc83a 	sub	r5,zero,r5
   2ab74:	39c0005c 	xori	r7,r7,1
   2ab78:	003fe706 	br	2ab18 <_gp+0xfffefc60>
   2ab7c:	0109c83a 	sub	r4,zero,r4
   2ab80:	01c00044 	movi	r7,1
   2ab84:	003fe306 	br	2ab14 <_gp+0xfffefc5c>
   2ab88:	00c00044 	movi	r3,1
   2ab8c:	003fee06 	br	2ab48 <_gp+0xfffefc90>

0002ab90 <__modsi3>:
   2ab90:	20001716 	blt	r4,zero,2abf0 <__modsi3+0x60>
   2ab94:	000f883a 	mov	r7,zero
   2ab98:	2005883a 	mov	r2,r4
   2ab9c:	28001216 	blt	r5,zero,2abe8 <__modsi3+0x58>
   2aba0:	2900162e 	bgeu	r5,r4,2abfc <__modsi3+0x6c>
   2aba4:	01800804 	movi	r6,32
   2aba8:	00c00044 	movi	r3,1
   2abac:	00000106 	br	2abb4 <__modsi3+0x24>
   2abb0:	30000a26 	beq	r6,zero,2abdc <__modsi3+0x4c>
   2abb4:	294b883a 	add	r5,r5,r5
   2abb8:	31bfffc4 	addi	r6,r6,-1
   2abbc:	18c7883a 	add	r3,r3,r3
   2abc0:	293ffb36 	bltu	r5,r4,2abb0 <_gp+0xfffefcf8>
   2abc4:	18000526 	beq	r3,zero,2abdc <__modsi3+0x4c>
   2abc8:	1806d07a 	srli	r3,r3,1
   2abcc:	11400136 	bltu	r2,r5,2abd4 <__modsi3+0x44>
   2abd0:	1145c83a 	sub	r2,r2,r5
   2abd4:	280ad07a 	srli	r5,r5,1
   2abd8:	183ffb1e 	bne	r3,zero,2abc8 <_gp+0xfffefd10>
   2abdc:	38000126 	beq	r7,zero,2abe4 <__modsi3+0x54>
   2abe0:	0085c83a 	sub	r2,zero,r2
   2abe4:	f800283a 	ret
   2abe8:	014bc83a 	sub	r5,zero,r5
   2abec:	003fec06 	br	2aba0 <_gp+0xfffefce8>
   2abf0:	0109c83a 	sub	r4,zero,r4
   2abf4:	01c00044 	movi	r7,1
   2abf8:	003fe706 	br	2ab98 <_gp+0xfffefce0>
   2abfc:	00c00044 	movi	r3,1
   2ac00:	003ff106 	br	2abc8 <_gp+0xfffefd10>

0002ac04 <__udivsi3>:
   2ac04:	200d883a 	mov	r6,r4
   2ac08:	2900152e 	bgeu	r5,r4,2ac60 <__udivsi3+0x5c>
   2ac0c:	28001416 	blt	r5,zero,2ac60 <__udivsi3+0x5c>
   2ac10:	00800804 	movi	r2,32
   2ac14:	00c00044 	movi	r3,1
   2ac18:	00000206 	br	2ac24 <__udivsi3+0x20>
   2ac1c:	10000e26 	beq	r2,zero,2ac58 <__udivsi3+0x54>
   2ac20:	28000516 	blt	r5,zero,2ac38 <__udivsi3+0x34>
   2ac24:	294b883a 	add	r5,r5,r5
   2ac28:	10bfffc4 	addi	r2,r2,-1
   2ac2c:	18c7883a 	add	r3,r3,r3
   2ac30:	293ffa36 	bltu	r5,r4,2ac1c <_gp+0xfffefd64>
   2ac34:	18000826 	beq	r3,zero,2ac58 <__udivsi3+0x54>
   2ac38:	0005883a 	mov	r2,zero
   2ac3c:	31400236 	bltu	r6,r5,2ac48 <__udivsi3+0x44>
   2ac40:	314dc83a 	sub	r6,r6,r5
   2ac44:	10c4b03a 	or	r2,r2,r3
   2ac48:	1806d07a 	srli	r3,r3,1
   2ac4c:	280ad07a 	srli	r5,r5,1
   2ac50:	183ffa1e 	bne	r3,zero,2ac3c <_gp+0xfffefd84>
   2ac54:	f800283a 	ret
   2ac58:	0005883a 	mov	r2,zero
   2ac5c:	f800283a 	ret
   2ac60:	00c00044 	movi	r3,1
   2ac64:	003ff406 	br	2ac38 <_gp+0xfffefd80>

0002ac68 <__umodsi3>:
   2ac68:	2005883a 	mov	r2,r4
   2ac6c:	2900122e 	bgeu	r5,r4,2acb8 <__umodsi3+0x50>
   2ac70:	28001116 	blt	r5,zero,2acb8 <__umodsi3+0x50>
   2ac74:	01800804 	movi	r6,32
   2ac78:	00c00044 	movi	r3,1
   2ac7c:	00000206 	br	2ac88 <__umodsi3+0x20>
   2ac80:	30000c26 	beq	r6,zero,2acb4 <__umodsi3+0x4c>
   2ac84:	28000516 	blt	r5,zero,2ac9c <__umodsi3+0x34>
   2ac88:	294b883a 	add	r5,r5,r5
   2ac8c:	31bfffc4 	addi	r6,r6,-1
   2ac90:	18c7883a 	add	r3,r3,r3
   2ac94:	293ffa36 	bltu	r5,r4,2ac80 <_gp+0xfffefdc8>
   2ac98:	18000626 	beq	r3,zero,2acb4 <__umodsi3+0x4c>
   2ac9c:	1806d07a 	srli	r3,r3,1
   2aca0:	11400136 	bltu	r2,r5,2aca8 <__umodsi3+0x40>
   2aca4:	1145c83a 	sub	r2,r2,r5
   2aca8:	280ad07a 	srli	r5,r5,1
   2acac:	183ffb1e 	bne	r3,zero,2ac9c <_gp+0xfffefde4>
   2acb0:	f800283a 	ret
   2acb4:	f800283a 	ret
   2acb8:	00c00044 	movi	r3,1
   2acbc:	003ff706 	br	2ac9c <_gp+0xfffefde4>

0002acc0 <__adddf3>:
   2acc0:	02c00434 	movhi	r11,16
   2acc4:	5affffc4 	addi	r11,r11,-1
   2acc8:	2806d7fa 	srli	r3,r5,31
   2accc:	2ad4703a 	and	r10,r5,r11
   2acd0:	3ad2703a 	and	r9,r7,r11
   2acd4:	3804d53a 	srli	r2,r7,20
   2acd8:	3018d77a 	srli	r12,r6,29
   2acdc:	280ad53a 	srli	r5,r5,20
   2ace0:	501490fa 	slli	r10,r10,3
   2ace4:	2010d77a 	srli	r8,r4,29
   2ace8:	481290fa 	slli	r9,r9,3
   2acec:	380ed7fa 	srli	r7,r7,31
   2acf0:	defffb04 	addi	sp,sp,-20
   2acf4:	dc800215 	stw	r18,8(sp)
   2acf8:	dc400115 	stw	r17,4(sp)
   2acfc:	dc000015 	stw	r16,0(sp)
   2ad00:	dfc00415 	stw	ra,16(sp)
   2ad04:	dcc00315 	stw	r19,12(sp)
   2ad08:	1c803fcc 	andi	r18,r3,255
   2ad0c:	2c01ffcc 	andi	r16,r5,2047
   2ad10:	5210b03a 	or	r8,r10,r8
   2ad14:	202290fa 	slli	r17,r4,3
   2ad18:	1081ffcc 	andi	r2,r2,2047
   2ad1c:	4b12b03a 	or	r9,r9,r12
   2ad20:	300c90fa 	slli	r6,r6,3
   2ad24:	91c07526 	beq	r18,r7,2aefc <__adddf3+0x23c>
   2ad28:	8087c83a 	sub	r3,r16,r2
   2ad2c:	00c0ab0e 	bge	zero,r3,2afdc <__adddf3+0x31c>
   2ad30:	10002a1e 	bne	r2,zero,2addc <__adddf3+0x11c>
   2ad34:	4984b03a 	or	r2,r9,r6
   2ad38:	1000961e 	bne	r2,zero,2af94 <__adddf3+0x2d4>
   2ad3c:	888001cc 	andi	r2,r17,7
   2ad40:	10000726 	beq	r2,zero,2ad60 <__adddf3+0xa0>
   2ad44:	888003cc 	andi	r2,r17,15
   2ad48:	00c00104 	movi	r3,4
   2ad4c:	10c00426 	beq	r2,r3,2ad60 <__adddf3+0xa0>
   2ad50:	88c7883a 	add	r3,r17,r3
   2ad54:	1c63803a 	cmpltu	r17,r3,r17
   2ad58:	4451883a 	add	r8,r8,r17
   2ad5c:	1823883a 	mov	r17,r3
   2ad60:	4080202c 	andhi	r2,r8,128
   2ad64:	10005926 	beq	r2,zero,2aecc <__adddf3+0x20c>
   2ad68:	84000044 	addi	r16,r16,1
   2ad6c:	0081ffc4 	movi	r2,2047
   2ad70:	8080ba26 	beq	r16,r2,2b05c <__adddf3+0x39c>
   2ad74:	00bfe034 	movhi	r2,65408
   2ad78:	10bfffc4 	addi	r2,r2,-1
   2ad7c:	4090703a 	and	r8,r8,r2
   2ad80:	4004977a 	slli	r2,r8,29
   2ad84:	4010927a 	slli	r8,r8,9
   2ad88:	8822d0fa 	srli	r17,r17,3
   2ad8c:	8401ffcc 	andi	r16,r16,2047
   2ad90:	4010d33a 	srli	r8,r8,12
   2ad94:	9007883a 	mov	r3,r18
   2ad98:	1444b03a 	or	r2,r2,r17
   2ad9c:	8401ffcc 	andi	r16,r16,2047
   2ada0:	8020953a 	slli	r16,r16,20
   2ada4:	18c03fcc 	andi	r3,r3,255
   2ada8:	01000434 	movhi	r4,16
   2adac:	213fffc4 	addi	r4,r4,-1
   2adb0:	180697fa 	slli	r3,r3,31
   2adb4:	4110703a 	and	r8,r8,r4
   2adb8:	4410b03a 	or	r8,r8,r16
   2adbc:	40c6b03a 	or	r3,r8,r3
   2adc0:	dfc00417 	ldw	ra,16(sp)
   2adc4:	dcc00317 	ldw	r19,12(sp)
   2adc8:	dc800217 	ldw	r18,8(sp)
   2adcc:	dc400117 	ldw	r17,4(sp)
   2add0:	dc000017 	ldw	r16,0(sp)
   2add4:	dec00504 	addi	sp,sp,20
   2add8:	f800283a 	ret
   2addc:	0081ffc4 	movi	r2,2047
   2ade0:	80bfd626 	beq	r16,r2,2ad3c <_gp+0xfffefe84>
   2ade4:	4a402034 	orhi	r9,r9,128
   2ade8:	00800e04 	movi	r2,56
   2adec:	10c09f16 	blt	r2,r3,2b06c <__adddf3+0x3ac>
   2adf0:	008007c4 	movi	r2,31
   2adf4:	10c0c216 	blt	r2,r3,2b100 <__adddf3+0x440>
   2adf8:	00800804 	movi	r2,32
   2adfc:	10c5c83a 	sub	r2,r2,r3
   2ae00:	488a983a 	sll	r5,r9,r2
   2ae04:	30c8d83a 	srl	r4,r6,r3
   2ae08:	3084983a 	sll	r2,r6,r2
   2ae0c:	48c6d83a 	srl	r3,r9,r3
   2ae10:	290cb03a 	or	r6,r5,r4
   2ae14:	1004c03a 	cmpne	r2,r2,zero
   2ae18:	308cb03a 	or	r6,r6,r2
   2ae1c:	898dc83a 	sub	r6,r17,r6
   2ae20:	89a3803a 	cmpltu	r17,r17,r6
   2ae24:	40d1c83a 	sub	r8,r8,r3
   2ae28:	4451c83a 	sub	r8,r8,r17
   2ae2c:	3023883a 	mov	r17,r6
   2ae30:	4080202c 	andhi	r2,r8,128
   2ae34:	10002326 	beq	r2,zero,2aec4 <__adddf3+0x204>
   2ae38:	04c02034 	movhi	r19,128
   2ae3c:	9cffffc4 	addi	r19,r19,-1
   2ae40:	44e6703a 	and	r19,r8,r19
   2ae44:	98007626 	beq	r19,zero,2b020 <__adddf3+0x360>
   2ae48:	9809883a 	mov	r4,r19
   2ae4c:	002d5000 	call	2d500 <__clzsi2>
   2ae50:	10fffe04 	addi	r3,r2,-8
   2ae54:	010007c4 	movi	r4,31
   2ae58:	20c07716 	blt	r4,r3,2b038 <__adddf3+0x378>
   2ae5c:	00800804 	movi	r2,32
   2ae60:	10c5c83a 	sub	r2,r2,r3
   2ae64:	8884d83a 	srl	r2,r17,r2
   2ae68:	98d0983a 	sll	r8,r19,r3
   2ae6c:	88e2983a 	sll	r17,r17,r3
   2ae70:	1204b03a 	or	r2,r2,r8
   2ae74:	1c007416 	blt	r3,r16,2b048 <__adddf3+0x388>
   2ae78:	1c21c83a 	sub	r16,r3,r16
   2ae7c:	82000044 	addi	r8,r16,1
   2ae80:	00c007c4 	movi	r3,31
   2ae84:	1a009116 	blt	r3,r8,2b0cc <__adddf3+0x40c>
   2ae88:	00c00804 	movi	r3,32
   2ae8c:	1a07c83a 	sub	r3,r3,r8
   2ae90:	8a08d83a 	srl	r4,r17,r8
   2ae94:	88e2983a 	sll	r17,r17,r3
   2ae98:	10c6983a 	sll	r3,r2,r3
   2ae9c:	1210d83a 	srl	r8,r2,r8
   2aea0:	8804c03a 	cmpne	r2,r17,zero
   2aea4:	1906b03a 	or	r3,r3,r4
   2aea8:	18a2b03a 	or	r17,r3,r2
   2aeac:	0021883a 	mov	r16,zero
   2aeb0:	003fa206 	br	2ad3c <_gp+0xfffefe84>
   2aeb4:	1890b03a 	or	r8,r3,r2
   2aeb8:	40017d26 	beq	r8,zero,2b4b0 <__adddf3+0x7f0>
   2aebc:	1011883a 	mov	r8,r2
   2aec0:	1823883a 	mov	r17,r3
   2aec4:	888001cc 	andi	r2,r17,7
   2aec8:	103f9e1e 	bne	r2,zero,2ad44 <_gp+0xfffefe8c>
   2aecc:	4004977a 	slli	r2,r8,29
   2aed0:	8822d0fa 	srli	r17,r17,3
   2aed4:	4010d0fa 	srli	r8,r8,3
   2aed8:	9007883a 	mov	r3,r18
   2aedc:	1444b03a 	or	r2,r2,r17
   2aee0:	0101ffc4 	movi	r4,2047
   2aee4:	81002426 	beq	r16,r4,2af78 <__adddf3+0x2b8>
   2aee8:	8120703a 	and	r16,r16,r4
   2aeec:	01000434 	movhi	r4,16
   2aef0:	213fffc4 	addi	r4,r4,-1
   2aef4:	4110703a 	and	r8,r8,r4
   2aef8:	003fa806 	br	2ad9c <_gp+0xfffefee4>
   2aefc:	8089c83a 	sub	r4,r16,r2
   2af00:	01005e0e 	bge	zero,r4,2b07c <__adddf3+0x3bc>
   2af04:	10002b26 	beq	r2,zero,2afb4 <__adddf3+0x2f4>
   2af08:	0081ffc4 	movi	r2,2047
   2af0c:	80bf8b26 	beq	r16,r2,2ad3c <_gp+0xfffefe84>
   2af10:	4a402034 	orhi	r9,r9,128
   2af14:	00800e04 	movi	r2,56
   2af18:	1100a40e 	bge	r2,r4,2b1ac <__adddf3+0x4ec>
   2af1c:	498cb03a 	or	r6,r9,r6
   2af20:	300ac03a 	cmpne	r5,r6,zero
   2af24:	0013883a 	mov	r9,zero
   2af28:	2c4b883a 	add	r5,r5,r17
   2af2c:	2c63803a 	cmpltu	r17,r5,r17
   2af30:	4a11883a 	add	r8,r9,r8
   2af34:	8a11883a 	add	r8,r17,r8
   2af38:	2823883a 	mov	r17,r5
   2af3c:	4080202c 	andhi	r2,r8,128
   2af40:	103fe026 	beq	r2,zero,2aec4 <_gp+0xffff000c>
   2af44:	84000044 	addi	r16,r16,1
   2af48:	0081ffc4 	movi	r2,2047
   2af4c:	8080d226 	beq	r16,r2,2b298 <__adddf3+0x5d8>
   2af50:	00bfe034 	movhi	r2,65408
   2af54:	10bfffc4 	addi	r2,r2,-1
   2af58:	4090703a 	and	r8,r8,r2
   2af5c:	880ad07a 	srli	r5,r17,1
   2af60:	400897fa 	slli	r4,r8,31
   2af64:	88c0004c 	andi	r3,r17,1
   2af68:	28e2b03a 	or	r17,r5,r3
   2af6c:	4010d07a 	srli	r8,r8,1
   2af70:	2462b03a 	or	r17,r4,r17
   2af74:	003f7106 	br	2ad3c <_gp+0xfffefe84>
   2af78:	4088b03a 	or	r4,r8,r2
   2af7c:	20014526 	beq	r4,zero,2b494 <__adddf3+0x7d4>
   2af80:	01000434 	movhi	r4,16
   2af84:	42000234 	orhi	r8,r8,8
   2af88:	213fffc4 	addi	r4,r4,-1
   2af8c:	4110703a 	and	r8,r8,r4
   2af90:	003f8206 	br	2ad9c <_gp+0xfffefee4>
   2af94:	18ffffc4 	addi	r3,r3,-1
   2af98:	1800491e 	bne	r3,zero,2b0c0 <__adddf3+0x400>
   2af9c:	898bc83a 	sub	r5,r17,r6
   2afa0:	8963803a 	cmpltu	r17,r17,r5
   2afa4:	4251c83a 	sub	r8,r8,r9
   2afa8:	4451c83a 	sub	r8,r8,r17
   2afac:	2823883a 	mov	r17,r5
   2afb0:	003f9f06 	br	2ae30 <_gp+0xfffeff78>
   2afb4:	4984b03a 	or	r2,r9,r6
   2afb8:	103f6026 	beq	r2,zero,2ad3c <_gp+0xfffefe84>
   2afbc:	213fffc4 	addi	r4,r4,-1
   2afc0:	2000931e 	bne	r4,zero,2b210 <__adddf3+0x550>
   2afc4:	898d883a 	add	r6,r17,r6
   2afc8:	3463803a 	cmpltu	r17,r6,r17
   2afcc:	4251883a 	add	r8,r8,r9
   2afd0:	8a11883a 	add	r8,r17,r8
   2afd4:	3023883a 	mov	r17,r6
   2afd8:	003fd806 	br	2af3c <_gp+0xffff0084>
   2afdc:	1800541e 	bne	r3,zero,2b130 <__adddf3+0x470>
   2afe0:	80800044 	addi	r2,r16,1
   2afe4:	1081ffcc 	andi	r2,r2,2047
   2afe8:	00c00044 	movi	r3,1
   2afec:	1880a00e 	bge	r3,r2,2b270 <__adddf3+0x5b0>
   2aff0:	8989c83a 	sub	r4,r17,r6
   2aff4:	8905803a 	cmpltu	r2,r17,r4
   2aff8:	4267c83a 	sub	r19,r8,r9
   2affc:	98a7c83a 	sub	r19,r19,r2
   2b000:	9880202c 	andhi	r2,r19,128
   2b004:	10006326 	beq	r2,zero,2b194 <__adddf3+0x4d4>
   2b008:	3463c83a 	sub	r17,r6,r17
   2b00c:	4a07c83a 	sub	r3,r9,r8
   2b010:	344d803a 	cmpltu	r6,r6,r17
   2b014:	19a7c83a 	sub	r19,r3,r6
   2b018:	3825883a 	mov	r18,r7
   2b01c:	983f8a1e 	bne	r19,zero,2ae48 <_gp+0xfffeff90>
   2b020:	8809883a 	mov	r4,r17
   2b024:	002d5000 	call	2d500 <__clzsi2>
   2b028:	10800804 	addi	r2,r2,32
   2b02c:	10fffe04 	addi	r3,r2,-8
   2b030:	010007c4 	movi	r4,31
   2b034:	20ff890e 	bge	r4,r3,2ae5c <_gp+0xfffeffa4>
   2b038:	10bff604 	addi	r2,r2,-40
   2b03c:	8884983a 	sll	r2,r17,r2
   2b040:	0023883a 	mov	r17,zero
   2b044:	1c3f8c0e 	bge	r3,r16,2ae78 <_gp+0xfffeffc0>
   2b048:	023fe034 	movhi	r8,65408
   2b04c:	423fffc4 	addi	r8,r8,-1
   2b050:	80e1c83a 	sub	r16,r16,r3
   2b054:	1210703a 	and	r8,r2,r8
   2b058:	003f3806 	br	2ad3c <_gp+0xfffefe84>
   2b05c:	9007883a 	mov	r3,r18
   2b060:	0011883a 	mov	r8,zero
   2b064:	0005883a 	mov	r2,zero
   2b068:	003f4c06 	br	2ad9c <_gp+0xfffefee4>
   2b06c:	498cb03a 	or	r6,r9,r6
   2b070:	300cc03a 	cmpne	r6,r6,zero
   2b074:	0007883a 	mov	r3,zero
   2b078:	003f6806 	br	2ae1c <_gp+0xfffeff64>
   2b07c:	20009c1e 	bne	r4,zero,2b2f0 <__adddf3+0x630>
   2b080:	80800044 	addi	r2,r16,1
   2b084:	1141ffcc 	andi	r5,r2,2047
   2b088:	01000044 	movi	r4,1
   2b08c:	2140670e 	bge	r4,r5,2b22c <__adddf3+0x56c>
   2b090:	0101ffc4 	movi	r4,2047
   2b094:	11007f26 	beq	r2,r4,2b294 <__adddf3+0x5d4>
   2b098:	898d883a 	add	r6,r17,r6
   2b09c:	4247883a 	add	r3,r8,r9
   2b0a0:	3451803a 	cmpltu	r8,r6,r17
   2b0a4:	40d1883a 	add	r8,r8,r3
   2b0a8:	402297fa 	slli	r17,r8,31
   2b0ac:	300cd07a 	srli	r6,r6,1
   2b0b0:	4010d07a 	srli	r8,r8,1
   2b0b4:	1021883a 	mov	r16,r2
   2b0b8:	89a2b03a 	or	r17,r17,r6
   2b0bc:	003f1f06 	br	2ad3c <_gp+0xfffefe84>
   2b0c0:	0081ffc4 	movi	r2,2047
   2b0c4:	80bf481e 	bne	r16,r2,2ade8 <_gp+0xfffeff30>
   2b0c8:	003f1c06 	br	2ad3c <_gp+0xfffefe84>
   2b0cc:	843ff844 	addi	r16,r16,-31
   2b0d0:	01000804 	movi	r4,32
   2b0d4:	1406d83a 	srl	r3,r2,r16
   2b0d8:	41005026 	beq	r8,r4,2b21c <__adddf3+0x55c>
   2b0dc:	01001004 	movi	r4,64
   2b0e0:	2211c83a 	sub	r8,r4,r8
   2b0e4:	1204983a 	sll	r2,r2,r8
   2b0e8:	88a2b03a 	or	r17,r17,r2
   2b0ec:	8822c03a 	cmpne	r17,r17,zero
   2b0f0:	1c62b03a 	or	r17,r3,r17
   2b0f4:	0011883a 	mov	r8,zero
   2b0f8:	0021883a 	mov	r16,zero
   2b0fc:	003f7106 	br	2aec4 <_gp+0xffff000c>
   2b100:	193ff804 	addi	r4,r3,-32
   2b104:	00800804 	movi	r2,32
   2b108:	4908d83a 	srl	r4,r9,r4
   2b10c:	18804526 	beq	r3,r2,2b224 <__adddf3+0x564>
   2b110:	00801004 	movi	r2,64
   2b114:	10c5c83a 	sub	r2,r2,r3
   2b118:	4886983a 	sll	r3,r9,r2
   2b11c:	198cb03a 	or	r6,r3,r6
   2b120:	300cc03a 	cmpne	r6,r6,zero
   2b124:	218cb03a 	or	r6,r4,r6
   2b128:	0007883a 	mov	r3,zero
   2b12c:	003f3b06 	br	2ae1c <_gp+0xfffeff64>
   2b130:	80002a26 	beq	r16,zero,2b1dc <__adddf3+0x51c>
   2b134:	0101ffc4 	movi	r4,2047
   2b138:	11006826 	beq	r2,r4,2b2dc <__adddf3+0x61c>
   2b13c:	00c7c83a 	sub	r3,zero,r3
   2b140:	42002034 	orhi	r8,r8,128
   2b144:	01000e04 	movi	r4,56
   2b148:	20c07c16 	blt	r4,r3,2b33c <__adddf3+0x67c>
   2b14c:	010007c4 	movi	r4,31
   2b150:	20c0da16 	blt	r4,r3,2b4bc <__adddf3+0x7fc>
   2b154:	01000804 	movi	r4,32
   2b158:	20c9c83a 	sub	r4,r4,r3
   2b15c:	4114983a 	sll	r10,r8,r4
   2b160:	88cad83a 	srl	r5,r17,r3
   2b164:	8908983a 	sll	r4,r17,r4
   2b168:	40c6d83a 	srl	r3,r8,r3
   2b16c:	5162b03a 	or	r17,r10,r5
   2b170:	2008c03a 	cmpne	r4,r4,zero
   2b174:	8922b03a 	or	r17,r17,r4
   2b178:	3463c83a 	sub	r17,r6,r17
   2b17c:	48c7c83a 	sub	r3,r9,r3
   2b180:	344d803a 	cmpltu	r6,r6,r17
   2b184:	1991c83a 	sub	r8,r3,r6
   2b188:	1021883a 	mov	r16,r2
   2b18c:	3825883a 	mov	r18,r7
   2b190:	003f2706 	br	2ae30 <_gp+0xfffeff78>
   2b194:	24d0b03a 	or	r8,r4,r19
   2b198:	40001b1e 	bne	r8,zero,2b208 <__adddf3+0x548>
   2b19c:	0005883a 	mov	r2,zero
   2b1a0:	0007883a 	mov	r3,zero
   2b1a4:	0021883a 	mov	r16,zero
   2b1a8:	003f4d06 	br	2aee0 <_gp+0xffff0028>
   2b1ac:	008007c4 	movi	r2,31
   2b1b0:	11003c16 	blt	r2,r4,2b2a4 <__adddf3+0x5e4>
   2b1b4:	00800804 	movi	r2,32
   2b1b8:	1105c83a 	sub	r2,r2,r4
   2b1bc:	488e983a 	sll	r7,r9,r2
   2b1c0:	310ad83a 	srl	r5,r6,r4
   2b1c4:	3084983a 	sll	r2,r6,r2
   2b1c8:	4912d83a 	srl	r9,r9,r4
   2b1cc:	394ab03a 	or	r5,r7,r5
   2b1d0:	1004c03a 	cmpne	r2,r2,zero
   2b1d4:	288ab03a 	or	r5,r5,r2
   2b1d8:	003f5306 	br	2af28 <_gp+0xffff0070>
   2b1dc:	4448b03a 	or	r4,r8,r17
   2b1e0:	20003e26 	beq	r4,zero,2b2dc <__adddf3+0x61c>
   2b1e4:	00c6303a 	nor	r3,zero,r3
   2b1e8:	18003a1e 	bne	r3,zero,2b2d4 <__adddf3+0x614>
   2b1ec:	3463c83a 	sub	r17,r6,r17
   2b1f0:	4a07c83a 	sub	r3,r9,r8
   2b1f4:	344d803a 	cmpltu	r6,r6,r17
   2b1f8:	1991c83a 	sub	r8,r3,r6
   2b1fc:	1021883a 	mov	r16,r2
   2b200:	3825883a 	mov	r18,r7
   2b204:	003f0a06 	br	2ae30 <_gp+0xfffeff78>
   2b208:	2023883a 	mov	r17,r4
   2b20c:	003f0d06 	br	2ae44 <_gp+0xfffeff8c>
   2b210:	0081ffc4 	movi	r2,2047
   2b214:	80bf3f1e 	bne	r16,r2,2af14 <_gp+0xffff005c>
   2b218:	003ec806 	br	2ad3c <_gp+0xfffefe84>
   2b21c:	0005883a 	mov	r2,zero
   2b220:	003fb106 	br	2b0e8 <_gp+0xffff0230>
   2b224:	0007883a 	mov	r3,zero
   2b228:	003fbc06 	br	2b11c <_gp+0xffff0264>
   2b22c:	4444b03a 	or	r2,r8,r17
   2b230:	8000871e 	bne	r16,zero,2b450 <__adddf3+0x790>
   2b234:	1000ba26 	beq	r2,zero,2b520 <__adddf3+0x860>
   2b238:	4984b03a 	or	r2,r9,r6
   2b23c:	103ebf26 	beq	r2,zero,2ad3c <_gp+0xfffefe84>
   2b240:	8985883a 	add	r2,r17,r6
   2b244:	4247883a 	add	r3,r8,r9
   2b248:	1451803a 	cmpltu	r8,r2,r17
   2b24c:	40d1883a 	add	r8,r8,r3
   2b250:	40c0202c 	andhi	r3,r8,128
   2b254:	1023883a 	mov	r17,r2
   2b258:	183f1a26 	beq	r3,zero,2aec4 <_gp+0xffff000c>
   2b25c:	00bfe034 	movhi	r2,65408
   2b260:	10bfffc4 	addi	r2,r2,-1
   2b264:	2021883a 	mov	r16,r4
   2b268:	4090703a 	and	r8,r8,r2
   2b26c:	003eb306 	br	2ad3c <_gp+0xfffefe84>
   2b270:	4444b03a 	or	r2,r8,r17
   2b274:	8000291e 	bne	r16,zero,2b31c <__adddf3+0x65c>
   2b278:	10004b1e 	bne	r2,zero,2b3a8 <__adddf3+0x6e8>
   2b27c:	4990b03a 	or	r8,r9,r6
   2b280:	40008b26 	beq	r8,zero,2b4b0 <__adddf3+0x7f0>
   2b284:	4811883a 	mov	r8,r9
   2b288:	3023883a 	mov	r17,r6
   2b28c:	3825883a 	mov	r18,r7
   2b290:	003eaa06 	br	2ad3c <_gp+0xfffefe84>
   2b294:	1021883a 	mov	r16,r2
   2b298:	0011883a 	mov	r8,zero
   2b29c:	0005883a 	mov	r2,zero
   2b2a0:	003f0f06 	br	2aee0 <_gp+0xffff0028>
   2b2a4:	217ff804 	addi	r5,r4,-32
   2b2a8:	00800804 	movi	r2,32
   2b2ac:	494ad83a 	srl	r5,r9,r5
   2b2b0:	20807d26 	beq	r4,r2,2b4a8 <__adddf3+0x7e8>
   2b2b4:	00801004 	movi	r2,64
   2b2b8:	1109c83a 	sub	r4,r2,r4
   2b2bc:	4912983a 	sll	r9,r9,r4
   2b2c0:	498cb03a 	or	r6,r9,r6
   2b2c4:	300cc03a 	cmpne	r6,r6,zero
   2b2c8:	298ab03a 	or	r5,r5,r6
   2b2cc:	0013883a 	mov	r9,zero
   2b2d0:	003f1506 	br	2af28 <_gp+0xffff0070>
   2b2d4:	0101ffc4 	movi	r4,2047
   2b2d8:	113f9a1e 	bne	r2,r4,2b144 <_gp+0xffff028c>
   2b2dc:	4811883a 	mov	r8,r9
   2b2e0:	3023883a 	mov	r17,r6
   2b2e4:	1021883a 	mov	r16,r2
   2b2e8:	3825883a 	mov	r18,r7
   2b2ec:	003e9306 	br	2ad3c <_gp+0xfffefe84>
   2b2f0:	8000161e 	bne	r16,zero,2b34c <__adddf3+0x68c>
   2b2f4:	444ab03a 	or	r5,r8,r17
   2b2f8:	28005126 	beq	r5,zero,2b440 <__adddf3+0x780>
   2b2fc:	0108303a 	nor	r4,zero,r4
   2b300:	20004d1e 	bne	r4,zero,2b438 <__adddf3+0x778>
   2b304:	89a3883a 	add	r17,r17,r6
   2b308:	4253883a 	add	r9,r8,r9
   2b30c:	898d803a 	cmpltu	r6,r17,r6
   2b310:	3251883a 	add	r8,r6,r9
   2b314:	1021883a 	mov	r16,r2
   2b318:	003f0806 	br	2af3c <_gp+0xffff0084>
   2b31c:	1000301e 	bne	r2,zero,2b3e0 <__adddf3+0x720>
   2b320:	4984b03a 	or	r2,r9,r6
   2b324:	10007126 	beq	r2,zero,2b4ec <__adddf3+0x82c>
   2b328:	4811883a 	mov	r8,r9
   2b32c:	3023883a 	mov	r17,r6
   2b330:	3825883a 	mov	r18,r7
   2b334:	0401ffc4 	movi	r16,2047
   2b338:	003e8006 	br	2ad3c <_gp+0xfffefe84>
   2b33c:	4462b03a 	or	r17,r8,r17
   2b340:	8822c03a 	cmpne	r17,r17,zero
   2b344:	0007883a 	mov	r3,zero
   2b348:	003f8b06 	br	2b178 <_gp+0xffff02c0>
   2b34c:	0141ffc4 	movi	r5,2047
   2b350:	11403b26 	beq	r2,r5,2b440 <__adddf3+0x780>
   2b354:	0109c83a 	sub	r4,zero,r4
   2b358:	42002034 	orhi	r8,r8,128
   2b35c:	01400e04 	movi	r5,56
   2b360:	29006716 	blt	r5,r4,2b500 <__adddf3+0x840>
   2b364:	014007c4 	movi	r5,31
   2b368:	29007016 	blt	r5,r4,2b52c <__adddf3+0x86c>
   2b36c:	01400804 	movi	r5,32
   2b370:	290bc83a 	sub	r5,r5,r4
   2b374:	4154983a 	sll	r10,r8,r5
   2b378:	890ed83a 	srl	r7,r17,r4
   2b37c:	894a983a 	sll	r5,r17,r5
   2b380:	4108d83a 	srl	r4,r8,r4
   2b384:	51e2b03a 	or	r17,r10,r7
   2b388:	280ac03a 	cmpne	r5,r5,zero
   2b38c:	8962b03a 	or	r17,r17,r5
   2b390:	89a3883a 	add	r17,r17,r6
   2b394:	2253883a 	add	r9,r4,r9
   2b398:	898d803a 	cmpltu	r6,r17,r6
   2b39c:	3251883a 	add	r8,r6,r9
   2b3a0:	1021883a 	mov	r16,r2
   2b3a4:	003ee506 	br	2af3c <_gp+0xffff0084>
   2b3a8:	4984b03a 	or	r2,r9,r6
   2b3ac:	103e6326 	beq	r2,zero,2ad3c <_gp+0xfffefe84>
   2b3b0:	8987c83a 	sub	r3,r17,r6
   2b3b4:	88c9803a 	cmpltu	r4,r17,r3
   2b3b8:	4245c83a 	sub	r2,r8,r9
   2b3bc:	1105c83a 	sub	r2,r2,r4
   2b3c0:	1100202c 	andhi	r4,r2,128
   2b3c4:	203ebb26 	beq	r4,zero,2aeb4 <_gp+0xfffefffc>
   2b3c8:	3463c83a 	sub	r17,r6,r17
   2b3cc:	4a07c83a 	sub	r3,r9,r8
   2b3d0:	344d803a 	cmpltu	r6,r6,r17
   2b3d4:	1991c83a 	sub	r8,r3,r6
   2b3d8:	3825883a 	mov	r18,r7
   2b3dc:	003e5706 	br	2ad3c <_gp+0xfffefe84>
   2b3e0:	4984b03a 	or	r2,r9,r6
   2b3e4:	10002e26 	beq	r2,zero,2b4a0 <__adddf3+0x7e0>
   2b3e8:	4004d0fa 	srli	r2,r8,3
   2b3ec:	8822d0fa 	srli	r17,r17,3
   2b3f0:	4010977a 	slli	r8,r8,29
   2b3f4:	10c0022c 	andhi	r3,r2,8
   2b3f8:	4462b03a 	or	r17,r8,r17
   2b3fc:	18000826 	beq	r3,zero,2b420 <__adddf3+0x760>
   2b400:	4808d0fa 	srli	r4,r9,3
   2b404:	20c0022c 	andhi	r3,r4,8
   2b408:	1800051e 	bne	r3,zero,2b420 <__adddf3+0x760>
   2b40c:	300cd0fa 	srli	r6,r6,3
   2b410:	4806977a 	slli	r3,r9,29
   2b414:	2005883a 	mov	r2,r4
   2b418:	3825883a 	mov	r18,r7
   2b41c:	19a2b03a 	or	r17,r3,r6
   2b420:	8810d77a 	srli	r8,r17,29
   2b424:	100490fa 	slli	r2,r2,3
   2b428:	882290fa 	slli	r17,r17,3
   2b42c:	0401ffc4 	movi	r16,2047
   2b430:	4090b03a 	or	r8,r8,r2
   2b434:	003e4106 	br	2ad3c <_gp+0xfffefe84>
   2b438:	0141ffc4 	movi	r5,2047
   2b43c:	117fc71e 	bne	r2,r5,2b35c <_gp+0xffff04a4>
   2b440:	4811883a 	mov	r8,r9
   2b444:	3023883a 	mov	r17,r6
   2b448:	1021883a 	mov	r16,r2
   2b44c:	003e3b06 	br	2ad3c <_gp+0xfffefe84>
   2b450:	10002f26 	beq	r2,zero,2b510 <__adddf3+0x850>
   2b454:	4984b03a 	or	r2,r9,r6
   2b458:	10001126 	beq	r2,zero,2b4a0 <__adddf3+0x7e0>
   2b45c:	4004d0fa 	srli	r2,r8,3
   2b460:	8822d0fa 	srli	r17,r17,3
   2b464:	4010977a 	slli	r8,r8,29
   2b468:	10c0022c 	andhi	r3,r2,8
   2b46c:	4462b03a 	or	r17,r8,r17
   2b470:	183feb26 	beq	r3,zero,2b420 <_gp+0xffff0568>
   2b474:	4808d0fa 	srli	r4,r9,3
   2b478:	20c0022c 	andhi	r3,r4,8
   2b47c:	183fe81e 	bne	r3,zero,2b420 <_gp+0xffff0568>
   2b480:	300cd0fa 	srli	r6,r6,3
   2b484:	4806977a 	slli	r3,r9,29
   2b488:	2005883a 	mov	r2,r4
   2b48c:	19a2b03a 	or	r17,r3,r6
   2b490:	003fe306 	br	2b420 <_gp+0xffff0568>
   2b494:	0011883a 	mov	r8,zero
   2b498:	0005883a 	mov	r2,zero
   2b49c:	003e3f06 	br	2ad9c <_gp+0xfffefee4>
   2b4a0:	0401ffc4 	movi	r16,2047
   2b4a4:	003e2506 	br	2ad3c <_gp+0xfffefe84>
   2b4a8:	0013883a 	mov	r9,zero
   2b4ac:	003f8406 	br	2b2c0 <_gp+0xffff0408>
   2b4b0:	0005883a 	mov	r2,zero
   2b4b4:	0007883a 	mov	r3,zero
   2b4b8:	003e8906 	br	2aee0 <_gp+0xffff0028>
   2b4bc:	197ff804 	addi	r5,r3,-32
   2b4c0:	01000804 	movi	r4,32
   2b4c4:	414ad83a 	srl	r5,r8,r5
   2b4c8:	19002426 	beq	r3,r4,2b55c <__adddf3+0x89c>
   2b4cc:	01001004 	movi	r4,64
   2b4d0:	20c7c83a 	sub	r3,r4,r3
   2b4d4:	40c6983a 	sll	r3,r8,r3
   2b4d8:	1c46b03a 	or	r3,r3,r17
   2b4dc:	1806c03a 	cmpne	r3,r3,zero
   2b4e0:	28e2b03a 	or	r17,r5,r3
   2b4e4:	0007883a 	mov	r3,zero
   2b4e8:	003f2306 	br	2b178 <_gp+0xffff02c0>
   2b4ec:	0007883a 	mov	r3,zero
   2b4f0:	5811883a 	mov	r8,r11
   2b4f4:	00bfffc4 	movi	r2,-1
   2b4f8:	0401ffc4 	movi	r16,2047
   2b4fc:	003e7806 	br	2aee0 <_gp+0xffff0028>
   2b500:	4462b03a 	or	r17,r8,r17
   2b504:	8822c03a 	cmpne	r17,r17,zero
   2b508:	0009883a 	mov	r4,zero
   2b50c:	003fa006 	br	2b390 <_gp+0xffff04d8>
   2b510:	4811883a 	mov	r8,r9
   2b514:	3023883a 	mov	r17,r6
   2b518:	0401ffc4 	movi	r16,2047
   2b51c:	003e0706 	br	2ad3c <_gp+0xfffefe84>
   2b520:	4811883a 	mov	r8,r9
   2b524:	3023883a 	mov	r17,r6
   2b528:	003e0406 	br	2ad3c <_gp+0xfffefe84>
   2b52c:	21fff804 	addi	r7,r4,-32
   2b530:	01400804 	movi	r5,32
   2b534:	41ced83a 	srl	r7,r8,r7
   2b538:	21400a26 	beq	r4,r5,2b564 <__adddf3+0x8a4>
   2b53c:	01401004 	movi	r5,64
   2b540:	2909c83a 	sub	r4,r5,r4
   2b544:	4108983a 	sll	r4,r8,r4
   2b548:	2448b03a 	or	r4,r4,r17
   2b54c:	2008c03a 	cmpne	r4,r4,zero
   2b550:	3922b03a 	or	r17,r7,r4
   2b554:	0009883a 	mov	r4,zero
   2b558:	003f8d06 	br	2b390 <_gp+0xffff04d8>
   2b55c:	0007883a 	mov	r3,zero
   2b560:	003fdd06 	br	2b4d8 <_gp+0xffff0620>
   2b564:	0009883a 	mov	r4,zero
   2b568:	003ff706 	br	2b548 <_gp+0xffff0690>

0002b56c <__divdf3>:
   2b56c:	defff004 	addi	sp,sp,-64
   2b570:	dc800815 	stw	r18,32(sp)
   2b574:	2824d53a 	srli	r18,r5,20
   2b578:	dd800c15 	stw	r22,48(sp)
   2b57c:	282cd7fa 	srli	r22,r5,31
   2b580:	dc000615 	stw	r16,24(sp)
   2b584:	04000434 	movhi	r16,16
   2b588:	843fffc4 	addi	r16,r16,-1
   2b58c:	dfc00f15 	stw	ra,60(sp)
   2b590:	df000e15 	stw	fp,56(sp)
   2b594:	ddc00d15 	stw	r23,52(sp)
   2b598:	dd400b15 	stw	r21,44(sp)
   2b59c:	dd000a15 	stw	r20,40(sp)
   2b5a0:	dcc00915 	stw	r19,36(sp)
   2b5a4:	dc400715 	stw	r17,28(sp)
   2b5a8:	9481ffcc 	andi	r18,r18,2047
   2b5ac:	2c20703a 	and	r16,r5,r16
   2b5b0:	b2003fcc 	andi	r8,r22,255
   2b5b4:	90006126 	beq	r18,zero,2b73c <__divdf3+0x1d0>
   2b5b8:	0081ffc4 	movi	r2,2047
   2b5bc:	202b883a 	mov	r21,r4
   2b5c0:	90803726 	beq	r18,r2,2b6a0 <__divdf3+0x134>
   2b5c4:	80800434 	orhi	r2,r16,16
   2b5c8:	100490fa 	slli	r2,r2,3
   2b5cc:	2020d77a 	srli	r16,r4,29
   2b5d0:	202a90fa 	slli	r21,r4,3
   2b5d4:	94bf0044 	addi	r18,r18,-1023
   2b5d8:	80a0b03a 	or	r16,r16,r2
   2b5dc:	0013883a 	mov	r9,zero
   2b5e0:	000b883a 	mov	r5,zero
   2b5e4:	3806d53a 	srli	r3,r7,20
   2b5e8:	382ed7fa 	srli	r23,r7,31
   2b5ec:	04400434 	movhi	r17,16
   2b5f0:	8c7fffc4 	addi	r17,r17,-1
   2b5f4:	18c1ffcc 	andi	r3,r3,2047
   2b5f8:	3029883a 	mov	r20,r6
   2b5fc:	3c62703a 	and	r17,r7,r17
   2b600:	bf003fcc 	andi	fp,r23,255
   2b604:	18006e26 	beq	r3,zero,2b7c0 <__divdf3+0x254>
   2b608:	0081ffc4 	movi	r2,2047
   2b60c:	18806626 	beq	r3,r2,2b7a8 <__divdf3+0x23c>
   2b610:	88800434 	orhi	r2,r17,16
   2b614:	100490fa 	slli	r2,r2,3
   2b618:	3022d77a 	srli	r17,r6,29
   2b61c:	302890fa 	slli	r20,r6,3
   2b620:	18ff0044 	addi	r3,r3,-1023
   2b624:	88a2b03a 	or	r17,r17,r2
   2b628:	000f883a 	mov	r7,zero
   2b62c:	b5e6f03a 	xor	r19,r22,r23
   2b630:	3a4cb03a 	or	r6,r7,r9
   2b634:	008003c4 	movi	r2,15
   2b638:	9809883a 	mov	r4,r19
   2b63c:	90c7c83a 	sub	r3,r18,r3
   2b640:	9cc03fcc 	andi	r19,r19,255
   2b644:	11809636 	bltu	r2,r6,2b8a0 <__divdf3+0x334>
   2b648:	300c90ba 	slli	r6,r6,2
   2b64c:	008000f4 	movhi	r2,3
   2b650:	10ad9804 	addi	r2,r2,-18848
   2b654:	308d883a 	add	r6,r6,r2
   2b658:	30800017 	ldw	r2,0(r6)
   2b65c:	1000683a 	jmp	r2
   2b660:	0002b8a0 	cmpeqi	zero,zero,2786
   2b664:	0002b6d8 	cmpnei	zero,zero,2779
   2b668:	0002b890 	cmplti	zero,zero,2786
   2b66c:	0002b6cc 	andi	zero,zero,2779
   2b670:	0002b890 	cmplti	zero,zero,2786
   2b674:	0002b864 	muli	zero,zero,2785
   2b678:	0002b890 	cmplti	zero,zero,2786
   2b67c:	0002b6cc 	andi	zero,zero,2779
   2b680:	0002b6d8 	cmpnei	zero,zero,2779
   2b684:	0002b6d8 	cmpnei	zero,zero,2779
   2b688:	0002b864 	muli	zero,zero,2785
   2b68c:	0002b6cc 	andi	zero,zero,2779
   2b690:	0002b6bc 	xorhi	zero,zero,2778
   2b694:	0002b6bc 	xorhi	zero,zero,2778
   2b698:	0002b6bc 	xorhi	zero,zero,2778
   2b69c:	0002bc28 	cmpgeui	zero,zero,2800
   2b6a0:	2404b03a 	or	r2,r4,r16
   2b6a4:	10006c1e 	bne	r2,zero,2b858 <__divdf3+0x2ec>
   2b6a8:	02400204 	movi	r9,8
   2b6ac:	0021883a 	mov	r16,zero
   2b6b0:	002b883a 	mov	r21,zero
   2b6b4:	01400084 	movi	r5,2
   2b6b8:	003fca06 	br	2b5e4 <_gp+0xffff072c>
   2b6bc:	8023883a 	mov	r17,r16
   2b6c0:	a829883a 	mov	r20,r21
   2b6c4:	4039883a 	mov	fp,r8
   2b6c8:	280f883a 	mov	r7,r5
   2b6cc:	00800084 	movi	r2,2
   2b6d0:	3881601e 	bne	r7,r2,2bc54 <__divdf3+0x6e8>
   2b6d4:	e027883a 	mov	r19,fp
   2b6d8:	9900004c 	andi	r4,r19,1
   2b6dc:	0081ffc4 	movi	r2,2047
   2b6e0:	0021883a 	mov	r16,zero
   2b6e4:	002b883a 	mov	r21,zero
   2b6e8:	1004953a 	slli	r2,r2,20
   2b6ec:	20c03fcc 	andi	r3,r4,255
   2b6f0:	01400434 	movhi	r5,16
   2b6f4:	297fffc4 	addi	r5,r5,-1
   2b6f8:	180697fa 	slli	r3,r3,31
   2b6fc:	8160703a 	and	r16,r16,r5
   2b700:	80a0b03a 	or	r16,r16,r2
   2b704:	80c6b03a 	or	r3,r16,r3
   2b708:	a805883a 	mov	r2,r21
   2b70c:	dfc00f17 	ldw	ra,60(sp)
   2b710:	df000e17 	ldw	fp,56(sp)
   2b714:	ddc00d17 	ldw	r23,52(sp)
   2b718:	dd800c17 	ldw	r22,48(sp)
   2b71c:	dd400b17 	ldw	r21,44(sp)
   2b720:	dd000a17 	ldw	r20,40(sp)
   2b724:	dcc00917 	ldw	r19,36(sp)
   2b728:	dc800817 	ldw	r18,32(sp)
   2b72c:	dc400717 	ldw	r17,28(sp)
   2b730:	dc000617 	ldw	r16,24(sp)
   2b734:	dec01004 	addi	sp,sp,64
   2b738:	f800283a 	ret
   2b73c:	2404b03a 	or	r2,r4,r16
   2b740:	2023883a 	mov	r17,r4
   2b744:	10003f26 	beq	r2,zero,2b844 <__divdf3+0x2d8>
   2b748:	80015e26 	beq	r16,zero,2bcc4 <__divdf3+0x758>
   2b74c:	8009883a 	mov	r4,r16
   2b750:	d9800215 	stw	r6,8(sp)
   2b754:	d9c00515 	stw	r7,20(sp)
   2b758:	da000415 	stw	r8,16(sp)
   2b75c:	002d5000 	call	2d500 <__clzsi2>
   2b760:	d9800217 	ldw	r6,8(sp)
   2b764:	d9c00517 	ldw	r7,20(sp)
   2b768:	da000417 	ldw	r8,16(sp)
   2b76c:	113ffd44 	addi	r4,r2,-11
   2b770:	00c00704 	movi	r3,28
   2b774:	19014f16 	blt	r3,r4,2bcb4 <__divdf3+0x748>
   2b778:	00c00744 	movi	r3,29
   2b77c:	157ffe04 	addi	r21,r2,-8
   2b780:	1907c83a 	sub	r3,r3,r4
   2b784:	8560983a 	sll	r16,r16,r21
   2b788:	88c6d83a 	srl	r3,r17,r3
   2b78c:	8d6a983a 	sll	r21,r17,r21
   2b790:	1c20b03a 	or	r16,r3,r16
   2b794:	1080fcc4 	addi	r2,r2,1011
   2b798:	00a5c83a 	sub	r18,zero,r2
   2b79c:	0013883a 	mov	r9,zero
   2b7a0:	000b883a 	mov	r5,zero
   2b7a4:	003f8f06 	br	2b5e4 <_gp+0xffff072c>
   2b7a8:	3444b03a 	or	r2,r6,r17
   2b7ac:	1000231e 	bne	r2,zero,2b83c <__divdf3+0x2d0>
   2b7b0:	0023883a 	mov	r17,zero
   2b7b4:	0029883a 	mov	r20,zero
   2b7b8:	01c00084 	movi	r7,2
   2b7bc:	003f9b06 	br	2b62c <_gp+0xffff0774>
   2b7c0:	3444b03a 	or	r2,r6,r17
   2b7c4:	10001926 	beq	r2,zero,2b82c <__divdf3+0x2c0>
   2b7c8:	88014b26 	beq	r17,zero,2bcf8 <__divdf3+0x78c>
   2b7cc:	8809883a 	mov	r4,r17
   2b7d0:	d9400115 	stw	r5,4(sp)
   2b7d4:	d9800215 	stw	r6,8(sp)
   2b7d8:	da000415 	stw	r8,16(sp)
   2b7dc:	da400315 	stw	r9,12(sp)
   2b7e0:	002d5000 	call	2d500 <__clzsi2>
   2b7e4:	d9400117 	ldw	r5,4(sp)
   2b7e8:	d9800217 	ldw	r6,8(sp)
   2b7ec:	da000417 	ldw	r8,16(sp)
   2b7f0:	da400317 	ldw	r9,12(sp)
   2b7f4:	113ffd44 	addi	r4,r2,-11
   2b7f8:	00c00704 	movi	r3,28
   2b7fc:	19013a16 	blt	r3,r4,2bce8 <__divdf3+0x77c>
   2b800:	00c00744 	movi	r3,29
   2b804:	153ffe04 	addi	r20,r2,-8
   2b808:	1907c83a 	sub	r3,r3,r4
   2b80c:	8d22983a 	sll	r17,r17,r20
   2b810:	30c6d83a 	srl	r3,r6,r3
   2b814:	3528983a 	sll	r20,r6,r20
   2b818:	1c62b03a 	or	r17,r3,r17
   2b81c:	1080fcc4 	addi	r2,r2,1011
   2b820:	0087c83a 	sub	r3,zero,r2
   2b824:	000f883a 	mov	r7,zero
   2b828:	003f8006 	br	2b62c <_gp+0xffff0774>
   2b82c:	0023883a 	mov	r17,zero
   2b830:	0029883a 	mov	r20,zero
   2b834:	01c00044 	movi	r7,1
   2b838:	003f7c06 	br	2b62c <_gp+0xffff0774>
   2b83c:	01c000c4 	movi	r7,3
   2b840:	003f7a06 	br	2b62c <_gp+0xffff0774>
   2b844:	02400104 	movi	r9,4
   2b848:	0021883a 	mov	r16,zero
   2b84c:	002b883a 	mov	r21,zero
   2b850:	01400044 	movi	r5,1
   2b854:	003f6306 	br	2b5e4 <_gp+0xffff072c>
   2b858:	02400304 	movi	r9,12
   2b85c:	014000c4 	movi	r5,3
   2b860:	003f6006 	br	2b5e4 <_gp+0xffff072c>
   2b864:	04000434 	movhi	r16,16
   2b868:	0009883a 	mov	r4,zero
   2b86c:	843fffc4 	addi	r16,r16,-1
   2b870:	057fffc4 	movi	r21,-1
   2b874:	0081ffc4 	movi	r2,2047
   2b878:	003f9b06 	br	2b6e8 <_gp+0xffff0830>
   2b87c:	00c00044 	movi	r3,1
   2b880:	1887c83a 	sub	r3,r3,r2
   2b884:	01000e04 	movi	r4,56
   2b888:	20c1530e 	bge	r4,r3,2bdd8 <__divdf3+0x86c>
   2b88c:	9900004c 	andi	r4,r19,1
   2b890:	0005883a 	mov	r2,zero
   2b894:	0021883a 	mov	r16,zero
   2b898:	002b883a 	mov	r21,zero
   2b89c:	003f9206 	br	2b6e8 <_gp+0xffff0830>
   2b8a0:	8c012e36 	bltu	r17,r16,2bd5c <__divdf3+0x7f0>
   2b8a4:	84412c26 	beq	r16,r17,2bd58 <__divdf3+0x7ec>
   2b8a8:	a82f883a 	mov	r23,r21
   2b8ac:	18ffffc4 	addi	r3,r3,-1
   2b8b0:	002b883a 	mov	r21,zero
   2b8b4:	a004d63a 	srli	r2,r20,24
   2b8b8:	8822923a 	slli	r17,r17,8
   2b8bc:	a028923a 	slli	r20,r20,8
   2b8c0:	8009883a 	mov	r4,r16
   2b8c4:	88acb03a 	or	r22,r17,r2
   2b8c8:	dd000015 	stw	r20,0(sp)
   2b8cc:	b028d43a 	srli	r20,r22,16
   2b8d0:	d8c00215 	stw	r3,8(sp)
   2b8d4:	b4bfffcc 	andi	r18,r22,65535
   2b8d8:	a00b883a 	mov	r5,r20
   2b8dc:	002ac040 	call	2ac04 <__udivsi3>
   2b8e0:	100b883a 	mov	r5,r2
   2b8e4:	9009883a 	mov	r4,r18
   2b8e8:	1023883a 	mov	r17,r2
   2b8ec:	00206240 	call	20624 <__mulsi3>
   2b8f0:	8009883a 	mov	r4,r16
   2b8f4:	a00b883a 	mov	r5,r20
   2b8f8:	1039883a 	mov	fp,r2
   2b8fc:	002ac680 	call	2ac68 <__umodsi3>
   2b900:	1004943a 	slli	r2,r2,16
   2b904:	b808d43a 	srli	r4,r23,16
   2b908:	d8c00217 	ldw	r3,8(sp)
   2b90c:	2084b03a 	or	r2,r4,r2
   2b910:	1700062e 	bgeu	r2,fp,2b92c <__divdf3+0x3c0>
   2b914:	1585883a 	add	r2,r2,r22
   2b918:	893fffc4 	addi	r4,r17,-1
   2b91c:	15811d36 	bltu	r2,r22,2bd94 <__divdf3+0x828>
   2b920:	17011c2e 	bgeu	r2,fp,2bd94 <__divdf3+0x828>
   2b924:	8c7fff84 	addi	r17,r17,-2
   2b928:	1585883a 	add	r2,r2,r22
   2b92c:	1739c83a 	sub	fp,r2,fp
   2b930:	a00b883a 	mov	r5,r20
   2b934:	e009883a 	mov	r4,fp
   2b938:	d8c00215 	stw	r3,8(sp)
   2b93c:	002ac040 	call	2ac04 <__udivsi3>
   2b940:	100b883a 	mov	r5,r2
   2b944:	9009883a 	mov	r4,r18
   2b948:	1021883a 	mov	r16,r2
   2b94c:	00206240 	call	20624 <__mulsi3>
   2b950:	a00b883a 	mov	r5,r20
   2b954:	e009883a 	mov	r4,fp
   2b958:	d8800415 	stw	r2,16(sp)
   2b95c:	002ac680 	call	2ac68 <__umodsi3>
   2b960:	1004943a 	slli	r2,r2,16
   2b964:	da000417 	ldw	r8,16(sp)
   2b968:	bdffffcc 	andi	r23,r23,65535
   2b96c:	b884b03a 	or	r2,r23,r2
   2b970:	d8c00217 	ldw	r3,8(sp)
   2b974:	1200062e 	bgeu	r2,r8,2b990 <__divdf3+0x424>
   2b978:	1585883a 	add	r2,r2,r22
   2b97c:	813fffc4 	addi	r4,r16,-1
   2b980:	15810236 	bltu	r2,r22,2bd8c <__divdf3+0x820>
   2b984:	1201012e 	bgeu	r2,r8,2bd8c <__divdf3+0x820>
   2b988:	843fff84 	addi	r16,r16,-2
   2b98c:	1585883a 	add	r2,r2,r22
   2b990:	8822943a 	slli	r17,r17,16
   2b994:	d9800017 	ldw	r6,0(sp)
   2b998:	1211c83a 	sub	r8,r2,r8
   2b99c:	8c22b03a 	or	r17,r17,r16
   2b9a0:	373fffcc 	andi	fp,r6,65535
   2b9a4:	8abfffcc 	andi	r10,r17,65535
   2b9a8:	8820d43a 	srli	r16,r17,16
   2b9ac:	5009883a 	mov	r4,r10
   2b9b0:	e00b883a 	mov	r5,fp
   2b9b4:	302ed43a 	srli	r23,r6,16
   2b9b8:	d8c00215 	stw	r3,8(sp)
   2b9bc:	da000415 	stw	r8,16(sp)
   2b9c0:	da800115 	stw	r10,4(sp)
   2b9c4:	00206240 	call	20624 <__mulsi3>
   2b9c8:	800b883a 	mov	r5,r16
   2b9cc:	e009883a 	mov	r4,fp
   2b9d0:	d8800515 	stw	r2,20(sp)
   2b9d4:	00206240 	call	20624 <__mulsi3>
   2b9d8:	8009883a 	mov	r4,r16
   2b9dc:	b80b883a 	mov	r5,r23
   2b9e0:	d8800315 	stw	r2,12(sp)
   2b9e4:	00206240 	call	20624 <__mulsi3>
   2b9e8:	da800117 	ldw	r10,4(sp)
   2b9ec:	b80b883a 	mov	r5,r23
   2b9f0:	1021883a 	mov	r16,r2
   2b9f4:	5009883a 	mov	r4,r10
   2b9f8:	00206240 	call	20624 <__mulsi3>
   2b9fc:	d9c00517 	ldw	r7,20(sp)
   2ba00:	da400317 	ldw	r9,12(sp)
   2ba04:	d8c00217 	ldw	r3,8(sp)
   2ba08:	3808d43a 	srli	r4,r7,16
   2ba0c:	1245883a 	add	r2,r2,r9
   2ba10:	da000417 	ldw	r8,16(sp)
   2ba14:	2085883a 	add	r2,r4,r2
   2ba18:	1240022e 	bgeu	r2,r9,2ba24 <__divdf3+0x4b8>
   2ba1c:	01000074 	movhi	r4,1
   2ba20:	8121883a 	add	r16,r16,r4
   2ba24:	1008d43a 	srli	r4,r2,16
   2ba28:	1004943a 	slli	r2,r2,16
   2ba2c:	39ffffcc 	andi	r7,r7,65535
   2ba30:	2409883a 	add	r4,r4,r16
   2ba34:	11c5883a 	add	r2,r2,r7
   2ba38:	4100bb36 	bltu	r8,r4,2bd28 <__divdf3+0x7bc>
   2ba3c:	4100d726 	beq	r8,r4,2bd9c <__divdf3+0x830>
   2ba40:	4109c83a 	sub	r4,r8,r4
   2ba44:	a8a1c83a 	sub	r16,r21,r2
   2ba48:	ac2b803a 	cmpltu	r21,r21,r16
   2ba4c:	256bc83a 	sub	r21,r4,r21
   2ba50:	b540d926 	beq	r22,r21,2bdb8 <__divdf3+0x84c>
   2ba54:	a00b883a 	mov	r5,r20
   2ba58:	a809883a 	mov	r4,r21
   2ba5c:	d8c00215 	stw	r3,8(sp)
   2ba60:	002ac040 	call	2ac04 <__udivsi3>
   2ba64:	100b883a 	mov	r5,r2
   2ba68:	9009883a 	mov	r4,r18
   2ba6c:	d8800515 	stw	r2,20(sp)
   2ba70:	00206240 	call	20624 <__mulsi3>
   2ba74:	a809883a 	mov	r4,r21
   2ba78:	a00b883a 	mov	r5,r20
   2ba7c:	d8800415 	stw	r2,16(sp)
   2ba80:	002ac680 	call	2ac68 <__umodsi3>
   2ba84:	1004943a 	slli	r2,r2,16
   2ba88:	8008d43a 	srli	r4,r16,16
   2ba8c:	da000417 	ldw	r8,16(sp)
   2ba90:	d8c00217 	ldw	r3,8(sp)
   2ba94:	2084b03a 	or	r2,r4,r2
   2ba98:	d9c00517 	ldw	r7,20(sp)
   2ba9c:	1200062e 	bgeu	r2,r8,2bab8 <__divdf3+0x54c>
   2baa0:	1585883a 	add	r2,r2,r22
   2baa4:	393fffc4 	addi	r4,r7,-1
   2baa8:	1580c536 	bltu	r2,r22,2bdc0 <__divdf3+0x854>
   2baac:	1200c42e 	bgeu	r2,r8,2bdc0 <__divdf3+0x854>
   2bab0:	39ffff84 	addi	r7,r7,-2
   2bab4:	1585883a 	add	r2,r2,r22
   2bab8:	122bc83a 	sub	r21,r2,r8
   2babc:	a00b883a 	mov	r5,r20
   2bac0:	a809883a 	mov	r4,r21
   2bac4:	d8c00215 	stw	r3,8(sp)
   2bac8:	d9c00515 	stw	r7,20(sp)
   2bacc:	002ac040 	call	2ac04 <__udivsi3>
   2bad0:	9009883a 	mov	r4,r18
   2bad4:	100b883a 	mov	r5,r2
   2bad8:	d8800415 	stw	r2,16(sp)
   2badc:	00206240 	call	20624 <__mulsi3>
   2bae0:	a809883a 	mov	r4,r21
   2bae4:	a00b883a 	mov	r5,r20
   2bae8:	1025883a 	mov	r18,r2
   2baec:	002ac680 	call	2ac68 <__umodsi3>
   2baf0:	1004943a 	slli	r2,r2,16
   2baf4:	813fffcc 	andi	r4,r16,65535
   2baf8:	d8c00217 	ldw	r3,8(sp)
   2bafc:	20a0b03a 	or	r16,r4,r2
   2bb00:	d9c00517 	ldw	r7,20(sp)
   2bb04:	da000417 	ldw	r8,16(sp)
   2bb08:	8480062e 	bgeu	r16,r18,2bb24 <__divdf3+0x5b8>
   2bb0c:	85a1883a 	add	r16,r16,r22
   2bb10:	40bfffc4 	addi	r2,r8,-1
   2bb14:	8580ac36 	bltu	r16,r22,2bdc8 <__divdf3+0x85c>
   2bb18:	8480ab2e 	bgeu	r16,r18,2bdc8 <__divdf3+0x85c>
   2bb1c:	423fff84 	addi	r8,r8,-2
   2bb20:	85a1883a 	add	r16,r16,r22
   2bb24:	3804943a 	slli	r2,r7,16
   2bb28:	84a1c83a 	sub	r16,r16,r18
   2bb2c:	e009883a 	mov	r4,fp
   2bb30:	1228b03a 	or	r20,r2,r8
   2bb34:	a1ffffcc 	andi	r7,r20,65535
   2bb38:	a024d43a 	srli	r18,r20,16
   2bb3c:	380b883a 	mov	r5,r7
   2bb40:	d8c00215 	stw	r3,8(sp)
   2bb44:	d9c00515 	stw	r7,20(sp)
   2bb48:	00206240 	call	20624 <__mulsi3>
   2bb4c:	900b883a 	mov	r5,r18
   2bb50:	e009883a 	mov	r4,fp
   2bb54:	102b883a 	mov	r21,r2
   2bb58:	00206240 	call	20624 <__mulsi3>
   2bb5c:	900b883a 	mov	r5,r18
   2bb60:	b809883a 	mov	r4,r23
   2bb64:	1039883a 	mov	fp,r2
   2bb68:	00206240 	call	20624 <__mulsi3>
   2bb6c:	d9c00517 	ldw	r7,20(sp)
   2bb70:	b80b883a 	mov	r5,r23
   2bb74:	1025883a 	mov	r18,r2
   2bb78:	3809883a 	mov	r4,r7
   2bb7c:	00206240 	call	20624 <__mulsi3>
   2bb80:	a808d43a 	srli	r4,r21,16
   2bb84:	1705883a 	add	r2,r2,fp
   2bb88:	d8c00217 	ldw	r3,8(sp)
   2bb8c:	2085883a 	add	r2,r4,r2
   2bb90:	1700022e 	bgeu	r2,fp,2bb9c <__divdf3+0x630>
   2bb94:	01000074 	movhi	r4,1
   2bb98:	9125883a 	add	r18,r18,r4
   2bb9c:	1008d43a 	srli	r4,r2,16
   2bba0:	1004943a 	slli	r2,r2,16
   2bba4:	ad7fffcc 	andi	r21,r21,65535
   2bba8:	2489883a 	add	r4,r4,r18
   2bbac:	1545883a 	add	r2,r2,r21
   2bbb0:	81003836 	bltu	r16,r4,2bc94 <__divdf3+0x728>
   2bbb4:	81003626 	beq	r16,r4,2bc90 <__divdf3+0x724>
   2bbb8:	a5000054 	ori	r20,r20,1
   2bbbc:	1880ffc4 	addi	r2,r3,1023
   2bbc0:	00bf2e0e 	bge	zero,r2,2b87c <_gp+0xffff09c4>
   2bbc4:	a10001cc 	andi	r4,r20,7
   2bbc8:	20000726 	beq	r4,zero,2bbe8 <__divdf3+0x67c>
   2bbcc:	a10003cc 	andi	r4,r20,15
   2bbd0:	01400104 	movi	r5,4
   2bbd4:	21400426 	beq	r4,r5,2bbe8 <__divdf3+0x67c>
   2bbd8:	a149883a 	add	r4,r20,r5
   2bbdc:	2529803a 	cmpltu	r20,r4,r20
   2bbe0:	8d23883a 	add	r17,r17,r20
   2bbe4:	2029883a 	mov	r20,r4
   2bbe8:	8900402c 	andhi	r4,r17,256
   2bbec:	20000426 	beq	r4,zero,2bc00 <__divdf3+0x694>
   2bbf0:	18810004 	addi	r2,r3,1024
   2bbf4:	00ffc034 	movhi	r3,65280
   2bbf8:	18ffffc4 	addi	r3,r3,-1
   2bbfc:	88e2703a 	and	r17,r17,r3
   2bc00:	00c1ff84 	movi	r3,2046
   2bc04:	18beb416 	blt	r3,r2,2b6d8 <_gp+0xffff0820>
   2bc08:	a028d0fa 	srli	r20,r20,3
   2bc0c:	882a977a 	slli	r21,r17,29
   2bc10:	8820927a 	slli	r16,r17,9
   2bc14:	1081ffcc 	andi	r2,r2,2047
   2bc18:	ad2ab03a 	or	r21,r21,r20
   2bc1c:	8020d33a 	srli	r16,r16,12
   2bc20:	9900004c 	andi	r4,r19,1
   2bc24:	003eb006 	br	2b6e8 <_gp+0xffff0830>
   2bc28:	8080022c 	andhi	r2,r16,8
   2bc2c:	10001226 	beq	r2,zero,2bc78 <__divdf3+0x70c>
   2bc30:	8880022c 	andhi	r2,r17,8
   2bc34:	1000101e 	bne	r2,zero,2bc78 <__divdf3+0x70c>
   2bc38:	00800434 	movhi	r2,16
   2bc3c:	8c000234 	orhi	r16,r17,8
   2bc40:	10bfffc4 	addi	r2,r2,-1
   2bc44:	b809883a 	mov	r4,r23
   2bc48:	80a0703a 	and	r16,r16,r2
   2bc4c:	a02b883a 	mov	r21,r20
   2bc50:	003f0806 	br	2b874 <_gp+0xffff09bc>
   2bc54:	008000c4 	movi	r2,3
   2bc58:	3880b126 	beq	r7,r2,2bf20 <__divdf3+0x9b4>
   2bc5c:	00800044 	movi	r2,1
   2bc60:	38805b1e 	bne	r7,r2,2bdd0 <__divdf3+0x864>
   2bc64:	e009883a 	mov	r4,fp
   2bc68:	0005883a 	mov	r2,zero
   2bc6c:	0021883a 	mov	r16,zero
   2bc70:	002b883a 	mov	r21,zero
   2bc74:	003e9c06 	br	2b6e8 <_gp+0xffff0830>
   2bc78:	00800434 	movhi	r2,16
   2bc7c:	84000234 	orhi	r16,r16,8
   2bc80:	10bfffc4 	addi	r2,r2,-1
   2bc84:	b009883a 	mov	r4,r22
   2bc88:	80a0703a 	and	r16,r16,r2
   2bc8c:	003ef906 	br	2b874 <_gp+0xffff09bc>
   2bc90:	103fca26 	beq	r2,zero,2bbbc <_gp+0xffff0d04>
   2bc94:	b421883a 	add	r16,r22,r16
   2bc98:	a17fffc4 	addi	r5,r20,-1
   2bc9c:	8580422e 	bgeu	r16,r22,2bda8 <__divdf3+0x83c>
   2bca0:	2829883a 	mov	r20,r5
   2bca4:	813fc41e 	bne	r16,r4,2bbb8 <_gp+0xffff0d00>
   2bca8:	d9800017 	ldw	r6,0(sp)
   2bcac:	30bfc21e 	bne	r6,r2,2bbb8 <_gp+0xffff0d00>
   2bcb0:	003fc206 	br	2bbbc <_gp+0xffff0d04>
   2bcb4:	143ff604 	addi	r16,r2,-40
   2bcb8:	8c20983a 	sll	r16,r17,r16
   2bcbc:	002b883a 	mov	r21,zero
   2bcc0:	003eb406 	br	2b794 <_gp+0xffff08dc>
   2bcc4:	d9800215 	stw	r6,8(sp)
   2bcc8:	d9c00515 	stw	r7,20(sp)
   2bccc:	da000415 	stw	r8,16(sp)
   2bcd0:	002d5000 	call	2d500 <__clzsi2>
   2bcd4:	10800804 	addi	r2,r2,32
   2bcd8:	da000417 	ldw	r8,16(sp)
   2bcdc:	d9c00517 	ldw	r7,20(sp)
   2bce0:	d9800217 	ldw	r6,8(sp)
   2bce4:	003ea106 	br	2b76c <_gp+0xffff08b4>
   2bce8:	147ff604 	addi	r17,r2,-40
   2bcec:	3462983a 	sll	r17,r6,r17
   2bcf0:	0029883a 	mov	r20,zero
   2bcf4:	003ec906 	br	2b81c <_gp+0xffff0964>
   2bcf8:	3009883a 	mov	r4,r6
   2bcfc:	d9400115 	stw	r5,4(sp)
   2bd00:	d9800215 	stw	r6,8(sp)
   2bd04:	da000415 	stw	r8,16(sp)
   2bd08:	da400315 	stw	r9,12(sp)
   2bd0c:	002d5000 	call	2d500 <__clzsi2>
   2bd10:	10800804 	addi	r2,r2,32
   2bd14:	da400317 	ldw	r9,12(sp)
   2bd18:	da000417 	ldw	r8,16(sp)
   2bd1c:	d9800217 	ldw	r6,8(sp)
   2bd20:	d9400117 	ldw	r5,4(sp)
   2bd24:	003eb306 	br	2b7f4 <_gp+0xffff093c>
   2bd28:	d9800017 	ldw	r6,0(sp)
   2bd2c:	a9ab883a 	add	r21,r21,r6
   2bd30:	a98b803a 	cmpltu	r5,r21,r6
   2bd34:	2d8b883a 	add	r5,r5,r22
   2bd38:	2a11883a 	add	r8,r5,r8
   2bd3c:	897fffc4 	addi	r5,r17,-1
   2bd40:	b2000c2e 	bgeu	r22,r8,2bd74 <__divdf3+0x808>
   2bd44:	41003f36 	bltu	r8,r4,2be44 <__divdf3+0x8d8>
   2bd48:	22006c26 	beq	r4,r8,2befc <__divdf3+0x990>
   2bd4c:	4109c83a 	sub	r4,r8,r4
   2bd50:	2823883a 	mov	r17,r5
   2bd54:	003f3b06 	br	2ba44 <_gp+0xffff0b8c>
   2bd58:	ad3ed336 	bltu	r21,r20,2b8a8 <_gp+0xffff09f0>
   2bd5c:	a804d07a 	srli	r2,r21,1
   2bd60:	802e97fa 	slli	r23,r16,31
   2bd64:	a82a97fa 	slli	r21,r21,31
   2bd68:	8020d07a 	srli	r16,r16,1
   2bd6c:	b8aeb03a 	or	r23,r23,r2
   2bd70:	003ed006 	br	2b8b4 <_gp+0xffff09fc>
   2bd74:	b23ff51e 	bne	r22,r8,2bd4c <_gp+0xffff0e94>
   2bd78:	d9800017 	ldw	r6,0(sp)
   2bd7c:	a9bff12e 	bgeu	r21,r6,2bd44 <_gp+0xffff0e8c>
   2bd80:	b109c83a 	sub	r4,r22,r4
   2bd84:	2823883a 	mov	r17,r5
   2bd88:	003f2e06 	br	2ba44 <_gp+0xffff0b8c>
   2bd8c:	2021883a 	mov	r16,r4
   2bd90:	003eff06 	br	2b990 <_gp+0xffff0ad8>
   2bd94:	2023883a 	mov	r17,r4
   2bd98:	003ee406 	br	2b92c <_gp+0xffff0a74>
   2bd9c:	a8bfe236 	bltu	r21,r2,2bd28 <_gp+0xffff0e70>
   2bda0:	0009883a 	mov	r4,zero
   2bda4:	003f2706 	br	2ba44 <_gp+0xffff0b8c>
   2bda8:	81002d36 	bltu	r16,r4,2be60 <__divdf3+0x8f4>
   2bdac:	24005626 	beq	r4,r16,2bf08 <__divdf3+0x99c>
   2bdb0:	2829883a 	mov	r20,r5
   2bdb4:	003f8006 	br	2bbb8 <_gp+0xffff0d00>
   2bdb8:	053fffc4 	movi	r20,-1
   2bdbc:	003f7f06 	br	2bbbc <_gp+0xffff0d04>
   2bdc0:	200f883a 	mov	r7,r4
   2bdc4:	003f3c06 	br	2bab8 <_gp+0xffff0c00>
   2bdc8:	1011883a 	mov	r8,r2
   2bdcc:	003f5506 	br	2bb24 <_gp+0xffff0c6c>
   2bdd0:	e027883a 	mov	r19,fp
   2bdd4:	003f7906 	br	2bbbc <_gp+0xffff0d04>
   2bdd8:	010007c4 	movi	r4,31
   2bddc:	20c02816 	blt	r4,r3,2be80 <__divdf3+0x914>
   2bde0:	00800804 	movi	r2,32
   2bde4:	10c5c83a 	sub	r2,r2,r3
   2bde8:	888a983a 	sll	r5,r17,r2
   2bdec:	a0c8d83a 	srl	r4,r20,r3
   2bdf0:	a084983a 	sll	r2,r20,r2
   2bdf4:	88e2d83a 	srl	r17,r17,r3
   2bdf8:	2906b03a 	or	r3,r5,r4
   2bdfc:	1004c03a 	cmpne	r2,r2,zero
   2be00:	1886b03a 	or	r3,r3,r2
   2be04:	188001cc 	andi	r2,r3,7
   2be08:	10000726 	beq	r2,zero,2be28 <__divdf3+0x8bc>
   2be0c:	188003cc 	andi	r2,r3,15
   2be10:	01000104 	movi	r4,4
   2be14:	11000426 	beq	r2,r4,2be28 <__divdf3+0x8bc>
   2be18:	1805883a 	mov	r2,r3
   2be1c:	10c00104 	addi	r3,r2,4
   2be20:	1885803a 	cmpltu	r2,r3,r2
   2be24:	88a3883a 	add	r17,r17,r2
   2be28:	8880202c 	andhi	r2,r17,128
   2be2c:	10002926 	beq	r2,zero,2bed4 <__divdf3+0x968>
   2be30:	9900004c 	andi	r4,r19,1
   2be34:	00800044 	movi	r2,1
   2be38:	0021883a 	mov	r16,zero
   2be3c:	002b883a 	mov	r21,zero
   2be40:	003e2906 	br	2b6e8 <_gp+0xffff0830>
   2be44:	d9800017 	ldw	r6,0(sp)
   2be48:	8c7fff84 	addi	r17,r17,-2
   2be4c:	a9ab883a 	add	r21,r21,r6
   2be50:	a98b803a 	cmpltu	r5,r21,r6
   2be54:	2d8b883a 	add	r5,r5,r22
   2be58:	2a11883a 	add	r8,r5,r8
   2be5c:	003ef806 	br	2ba40 <_gp+0xffff0b88>
   2be60:	d9800017 	ldw	r6,0(sp)
   2be64:	318f883a 	add	r7,r6,r6
   2be68:	398b803a 	cmpltu	r5,r7,r6
   2be6c:	2d8d883a 	add	r6,r5,r22
   2be70:	81a1883a 	add	r16,r16,r6
   2be74:	a17fff84 	addi	r5,r20,-2
   2be78:	d9c00015 	stw	r7,0(sp)
   2be7c:	003f8806 	br	2bca0 <_gp+0xffff0de8>
   2be80:	013ff844 	movi	r4,-31
   2be84:	2085c83a 	sub	r2,r4,r2
   2be88:	8888d83a 	srl	r4,r17,r2
   2be8c:	00800804 	movi	r2,32
   2be90:	18802126 	beq	r3,r2,2bf18 <__divdf3+0x9ac>
   2be94:	04001004 	movi	r16,64
   2be98:	80c7c83a 	sub	r3,r16,r3
   2be9c:	88e0983a 	sll	r16,r17,r3
   2bea0:	8504b03a 	or	r2,r16,r20
   2bea4:	1004c03a 	cmpne	r2,r2,zero
   2bea8:	2084b03a 	or	r2,r4,r2
   2beac:	144001cc 	andi	r17,r2,7
   2beb0:	88000d1e 	bne	r17,zero,2bee8 <__divdf3+0x97c>
   2beb4:	0021883a 	mov	r16,zero
   2beb8:	102ad0fa 	srli	r21,r2,3
   2bebc:	9900004c 	andi	r4,r19,1
   2bec0:	0005883a 	mov	r2,zero
   2bec4:	ac6ab03a 	or	r21,r21,r17
   2bec8:	003e0706 	br	2b6e8 <_gp+0xffff0830>
   2becc:	1007883a 	mov	r3,r2
   2bed0:	0023883a 	mov	r17,zero
   2bed4:	8820927a 	slli	r16,r17,9
   2bed8:	1805883a 	mov	r2,r3
   2bedc:	8822977a 	slli	r17,r17,29
   2bee0:	8020d33a 	srli	r16,r16,12
   2bee4:	003ff406 	br	2beb8 <_gp+0xffff1000>
   2bee8:	10c003cc 	andi	r3,r2,15
   2beec:	01000104 	movi	r4,4
   2bef0:	193ff626 	beq	r3,r4,2becc <_gp+0xffff1014>
   2bef4:	0023883a 	mov	r17,zero
   2bef8:	003fc806 	br	2be1c <_gp+0xffff0f64>
   2befc:	a8bfd136 	bltu	r21,r2,2be44 <_gp+0xffff0f8c>
   2bf00:	2823883a 	mov	r17,r5
   2bf04:	003fa606 	br	2bda0 <_gp+0xffff0ee8>
   2bf08:	d9800017 	ldw	r6,0(sp)
   2bf0c:	30bfd436 	bltu	r6,r2,2be60 <_gp+0xffff0fa8>
   2bf10:	2829883a 	mov	r20,r5
   2bf14:	003f6406 	br	2bca8 <_gp+0xffff0df0>
   2bf18:	0021883a 	mov	r16,zero
   2bf1c:	003fe006 	br	2bea0 <_gp+0xffff0fe8>
   2bf20:	00800434 	movhi	r2,16
   2bf24:	8c000234 	orhi	r16,r17,8
   2bf28:	10bfffc4 	addi	r2,r2,-1
   2bf2c:	e009883a 	mov	r4,fp
   2bf30:	80a0703a 	and	r16,r16,r2
   2bf34:	a02b883a 	mov	r21,r20
   2bf38:	003e4e06 	br	2b874 <_gp+0xffff09bc>

0002bf3c <__eqdf2>:
   2bf3c:	2804d53a 	srli	r2,r5,20
   2bf40:	3806d53a 	srli	r3,r7,20
   2bf44:	02000434 	movhi	r8,16
   2bf48:	423fffc4 	addi	r8,r8,-1
   2bf4c:	1081ffcc 	andi	r2,r2,2047
   2bf50:	0281ffc4 	movi	r10,2047
   2bf54:	2a12703a 	and	r9,r5,r8
   2bf58:	18c1ffcc 	andi	r3,r3,2047
   2bf5c:	3a10703a 	and	r8,r7,r8
   2bf60:	280ad7fa 	srli	r5,r5,31
   2bf64:	380ed7fa 	srli	r7,r7,31
   2bf68:	12801026 	beq	r2,r10,2bfac <__eqdf2+0x70>
   2bf6c:	0281ffc4 	movi	r10,2047
   2bf70:	1a800a26 	beq	r3,r10,2bf9c <__eqdf2+0x60>
   2bf74:	10c00226 	beq	r2,r3,2bf80 <__eqdf2+0x44>
   2bf78:	00800044 	movi	r2,1
   2bf7c:	f800283a 	ret
   2bf80:	4a3ffd1e 	bne	r9,r8,2bf78 <_gp+0xffff10c0>
   2bf84:	21bffc1e 	bne	r4,r6,2bf78 <_gp+0xffff10c0>
   2bf88:	29c00c26 	beq	r5,r7,2bfbc <__eqdf2+0x80>
   2bf8c:	103ffa1e 	bne	r2,zero,2bf78 <_gp+0xffff10c0>
   2bf90:	2244b03a 	or	r2,r4,r9
   2bf94:	1004c03a 	cmpne	r2,r2,zero
   2bf98:	f800283a 	ret
   2bf9c:	3214b03a 	or	r10,r6,r8
   2bfa0:	503ff426 	beq	r10,zero,2bf74 <_gp+0xffff10bc>
   2bfa4:	00800044 	movi	r2,1
   2bfa8:	f800283a 	ret
   2bfac:	2254b03a 	or	r10,r4,r9
   2bfb0:	503fee26 	beq	r10,zero,2bf6c <_gp+0xffff10b4>
   2bfb4:	00800044 	movi	r2,1
   2bfb8:	f800283a 	ret
   2bfbc:	0005883a 	mov	r2,zero
   2bfc0:	f800283a 	ret

0002bfc4 <__gedf2>:
   2bfc4:	2804d53a 	srli	r2,r5,20
   2bfc8:	3806d53a 	srli	r3,r7,20
   2bfcc:	02000434 	movhi	r8,16
   2bfd0:	423fffc4 	addi	r8,r8,-1
   2bfd4:	1081ffcc 	andi	r2,r2,2047
   2bfd8:	0241ffc4 	movi	r9,2047
   2bfdc:	2a14703a 	and	r10,r5,r8
   2bfe0:	18c1ffcc 	andi	r3,r3,2047
   2bfe4:	3a10703a 	and	r8,r7,r8
   2bfe8:	280ad7fa 	srli	r5,r5,31
   2bfec:	380ed7fa 	srli	r7,r7,31
   2bff0:	12401d26 	beq	r2,r9,2c068 <__gedf2+0xa4>
   2bff4:	0241ffc4 	movi	r9,2047
   2bff8:	1a401226 	beq	r3,r9,2c044 <__gedf2+0x80>
   2bffc:	1000081e 	bne	r2,zero,2c020 <__gedf2+0x5c>
   2c000:	2296b03a 	or	r11,r4,r10
   2c004:	5813003a 	cmpeq	r9,r11,zero
   2c008:	1800091e 	bne	r3,zero,2c030 <__gedf2+0x6c>
   2c00c:	3218b03a 	or	r12,r6,r8
   2c010:	6000071e 	bne	r12,zero,2c030 <__gedf2+0x6c>
   2c014:	0005883a 	mov	r2,zero
   2c018:	5800101e 	bne	r11,zero,2c05c <__gedf2+0x98>
   2c01c:	f800283a 	ret
   2c020:	18000c1e 	bne	r3,zero,2c054 <__gedf2+0x90>
   2c024:	3212b03a 	or	r9,r6,r8
   2c028:	48000c26 	beq	r9,zero,2c05c <__gedf2+0x98>
   2c02c:	0013883a 	mov	r9,zero
   2c030:	39c03fcc 	andi	r7,r7,255
   2c034:	48000826 	beq	r9,zero,2c058 <__gedf2+0x94>
   2c038:	38000926 	beq	r7,zero,2c060 <__gedf2+0x9c>
   2c03c:	00800044 	movi	r2,1
   2c040:	f800283a 	ret
   2c044:	3212b03a 	or	r9,r6,r8
   2c048:	483fec26 	beq	r9,zero,2bffc <_gp+0xffff1144>
   2c04c:	00bfff84 	movi	r2,-2
   2c050:	f800283a 	ret
   2c054:	39c03fcc 	andi	r7,r7,255
   2c058:	29c00626 	beq	r5,r7,2c074 <__gedf2+0xb0>
   2c05c:	283ff726 	beq	r5,zero,2c03c <_gp+0xffff1184>
   2c060:	00bfffc4 	movi	r2,-1
   2c064:	f800283a 	ret
   2c068:	2292b03a 	or	r9,r4,r10
   2c06c:	483fe126 	beq	r9,zero,2bff4 <_gp+0xffff113c>
   2c070:	003ff606 	br	2c04c <_gp+0xffff1194>
   2c074:	18bff916 	blt	r3,r2,2c05c <_gp+0xffff11a4>
   2c078:	10c00316 	blt	r2,r3,2c088 <__gedf2+0xc4>
   2c07c:	42bff736 	bltu	r8,r10,2c05c <_gp+0xffff11a4>
   2c080:	52000326 	beq	r10,r8,2c090 <__gedf2+0xcc>
   2c084:	5200042e 	bgeu	r10,r8,2c098 <__gedf2+0xd4>
   2c088:	283fec1e 	bne	r5,zero,2c03c <_gp+0xffff1184>
   2c08c:	003ff406 	br	2c060 <_gp+0xffff11a8>
   2c090:	313ff236 	bltu	r6,r4,2c05c <_gp+0xffff11a4>
   2c094:	21bffc36 	bltu	r4,r6,2c088 <_gp+0xffff11d0>
   2c098:	0005883a 	mov	r2,zero
   2c09c:	f800283a 	ret

0002c0a0 <__ledf2>:
   2c0a0:	2804d53a 	srli	r2,r5,20
   2c0a4:	3810d53a 	srli	r8,r7,20
   2c0a8:	00c00434 	movhi	r3,16
   2c0ac:	18ffffc4 	addi	r3,r3,-1
   2c0b0:	1081ffcc 	andi	r2,r2,2047
   2c0b4:	0241ffc4 	movi	r9,2047
   2c0b8:	28d4703a 	and	r10,r5,r3
   2c0bc:	4201ffcc 	andi	r8,r8,2047
   2c0c0:	38c6703a 	and	r3,r7,r3
   2c0c4:	280ad7fa 	srli	r5,r5,31
   2c0c8:	380ed7fa 	srli	r7,r7,31
   2c0cc:	12401f26 	beq	r2,r9,2c14c <__ledf2+0xac>
   2c0d0:	0241ffc4 	movi	r9,2047
   2c0d4:	42401426 	beq	r8,r9,2c128 <__ledf2+0x88>
   2c0d8:	1000091e 	bne	r2,zero,2c100 <__ledf2+0x60>
   2c0dc:	2296b03a 	or	r11,r4,r10
   2c0e0:	5813003a 	cmpeq	r9,r11,zero
   2c0e4:	29403fcc 	andi	r5,r5,255
   2c0e8:	40000a1e 	bne	r8,zero,2c114 <__ledf2+0x74>
   2c0ec:	30d8b03a 	or	r12,r6,r3
   2c0f0:	6000081e 	bne	r12,zero,2c114 <__ledf2+0x74>
   2c0f4:	0005883a 	mov	r2,zero
   2c0f8:	5800111e 	bne	r11,zero,2c140 <__ledf2+0xa0>
   2c0fc:	f800283a 	ret
   2c100:	29403fcc 	andi	r5,r5,255
   2c104:	40000c1e 	bne	r8,zero,2c138 <__ledf2+0x98>
   2c108:	30d2b03a 	or	r9,r6,r3
   2c10c:	48000c26 	beq	r9,zero,2c140 <__ledf2+0xa0>
   2c110:	0013883a 	mov	r9,zero
   2c114:	39c03fcc 	andi	r7,r7,255
   2c118:	48000826 	beq	r9,zero,2c13c <__ledf2+0x9c>
   2c11c:	38001126 	beq	r7,zero,2c164 <__ledf2+0xc4>
   2c120:	00800044 	movi	r2,1
   2c124:	f800283a 	ret
   2c128:	30d2b03a 	or	r9,r6,r3
   2c12c:	483fea26 	beq	r9,zero,2c0d8 <_gp+0xffff1220>
   2c130:	00800084 	movi	r2,2
   2c134:	f800283a 	ret
   2c138:	39c03fcc 	andi	r7,r7,255
   2c13c:	39400726 	beq	r7,r5,2c15c <__ledf2+0xbc>
   2c140:	2800081e 	bne	r5,zero,2c164 <__ledf2+0xc4>
   2c144:	00800044 	movi	r2,1
   2c148:	f800283a 	ret
   2c14c:	2292b03a 	or	r9,r4,r10
   2c150:	483fdf26 	beq	r9,zero,2c0d0 <_gp+0xffff1218>
   2c154:	00800084 	movi	r2,2
   2c158:	f800283a 	ret
   2c15c:	4080030e 	bge	r8,r2,2c16c <__ledf2+0xcc>
   2c160:	383fef26 	beq	r7,zero,2c120 <_gp+0xffff1268>
   2c164:	00bfffc4 	movi	r2,-1
   2c168:	f800283a 	ret
   2c16c:	123feb16 	blt	r2,r8,2c11c <_gp+0xffff1264>
   2c170:	1abff336 	bltu	r3,r10,2c140 <_gp+0xffff1288>
   2c174:	50c00326 	beq	r10,r3,2c184 <__ledf2+0xe4>
   2c178:	50c0042e 	bgeu	r10,r3,2c18c <__ledf2+0xec>
   2c17c:	283fe81e 	bne	r5,zero,2c120 <_gp+0xffff1268>
   2c180:	003ff806 	br	2c164 <_gp+0xffff12ac>
   2c184:	313fee36 	bltu	r6,r4,2c140 <_gp+0xffff1288>
   2c188:	21bffc36 	bltu	r4,r6,2c17c <_gp+0xffff12c4>
   2c18c:	0005883a 	mov	r2,zero
   2c190:	f800283a 	ret

0002c194 <__muldf3>:
   2c194:	deffee04 	addi	sp,sp,-72
   2c198:	dd000c15 	stw	r20,48(sp)
   2c19c:	2828d53a 	srli	r20,r5,20
   2c1a0:	ddc00f15 	stw	r23,60(sp)
   2c1a4:	282ed7fa 	srli	r23,r5,31
   2c1a8:	dc000815 	stw	r16,32(sp)
   2c1ac:	04000434 	movhi	r16,16
   2c1b0:	dcc00b15 	stw	r19,44(sp)
   2c1b4:	843fffc4 	addi	r16,r16,-1
   2c1b8:	dfc01115 	stw	ra,68(sp)
   2c1bc:	df001015 	stw	fp,64(sp)
   2c1c0:	dd800e15 	stw	r22,56(sp)
   2c1c4:	dd400d15 	stw	r21,52(sp)
   2c1c8:	dc800a15 	stw	r18,40(sp)
   2c1cc:	dc400915 	stw	r17,36(sp)
   2c1d0:	a501ffcc 	andi	r20,r20,2047
   2c1d4:	2c20703a 	and	r16,r5,r16
   2c1d8:	b827883a 	mov	r19,r23
   2c1dc:	ba403fcc 	andi	r9,r23,255
   2c1e0:	a0006026 	beq	r20,zero,2c364 <__muldf3+0x1d0>
   2c1e4:	0081ffc4 	movi	r2,2047
   2c1e8:	202d883a 	mov	r22,r4
   2c1ec:	a0803626 	beq	r20,r2,2c2c8 <__muldf3+0x134>
   2c1f0:	84000434 	orhi	r16,r16,16
   2c1f4:	200ad77a 	srli	r5,r4,29
   2c1f8:	800490fa 	slli	r2,r16,3
   2c1fc:	202c90fa 	slli	r22,r4,3
   2c200:	a53f0044 	addi	r20,r20,-1023
   2c204:	28a0b03a 	or	r16,r5,r2
   2c208:	002b883a 	mov	r21,zero
   2c20c:	000b883a 	mov	r5,zero
   2c210:	3804d53a 	srli	r2,r7,20
   2c214:	3838d7fa 	srli	fp,r7,31
   2c218:	04400434 	movhi	r17,16
   2c21c:	8c7fffc4 	addi	r17,r17,-1
   2c220:	1081ffcc 	andi	r2,r2,2047
   2c224:	3025883a 	mov	r18,r6
   2c228:	3c62703a 	and	r17,r7,r17
   2c22c:	e2803fcc 	andi	r10,fp,255
   2c230:	10006d26 	beq	r2,zero,2c3e8 <__muldf3+0x254>
   2c234:	00c1ffc4 	movi	r3,2047
   2c238:	10c06526 	beq	r2,r3,2c3d0 <__muldf3+0x23c>
   2c23c:	8c400434 	orhi	r17,r17,16
   2c240:	300ed77a 	srli	r7,r6,29
   2c244:	880690fa 	slli	r3,r17,3
   2c248:	302490fa 	slli	r18,r6,3
   2c24c:	10bf0044 	addi	r2,r2,-1023
   2c250:	38e2b03a 	or	r17,r7,r3
   2c254:	000f883a 	mov	r7,zero
   2c258:	a087883a 	add	r3,r20,r2
   2c25c:	010003c4 	movi	r4,15
   2c260:	3d44b03a 	or	r2,r7,r21
   2c264:	e5ccf03a 	xor	r6,fp,r23
   2c268:	1a000044 	addi	r8,r3,1
   2c26c:	20809b36 	bltu	r4,r2,2c4dc <__muldf3+0x348>
   2c270:	100490ba 	slli	r2,r2,2
   2c274:	010000f4 	movhi	r4,3
   2c278:	2130a204 	addi	r4,r4,-15736
   2c27c:	1105883a 	add	r2,r2,r4
   2c280:	10800017 	ldw	r2,0(r2)
   2c284:	1000683a 	jmp	r2
   2c288:	0002c4dc 	xori	zero,zero,2835
   2c28c:	0002c2e8 	cmpgeui	zero,zero,2827
   2c290:	0002c2e8 	cmpgeui	zero,zero,2827
   2c294:	0002c2e4 	muli	zero,zero,2827
   2c298:	0002c4b8 	rdprs	zero,zero,2834
   2c29c:	0002c4b8 	rdprs	zero,zero,2834
   2c2a0:	0002c4a0 	cmpeqi	zero,zero,2834
   2c2a4:	0002c2e4 	muli	zero,zero,2827
   2c2a8:	0002c4b8 	rdprs	zero,zero,2834
   2c2ac:	0002c4a0 	cmpeqi	zero,zero,2834
   2c2b0:	0002c4b8 	rdprs	zero,zero,2834
   2c2b4:	0002c2e4 	muli	zero,zero,2827
   2c2b8:	0002c4c8 	cmpgei	zero,zero,2835
   2c2bc:	0002c4c8 	cmpgei	zero,zero,2835
   2c2c0:	0002c4c8 	cmpgei	zero,zero,2835
   2c2c4:	0002c828 	cmpgeui	zero,zero,2848
   2c2c8:	2404b03a 	or	r2,r4,r16
   2c2cc:	1000711e 	bne	r2,zero,2c494 <__muldf3+0x300>
   2c2d0:	05400204 	movi	r21,8
   2c2d4:	0021883a 	mov	r16,zero
   2c2d8:	002d883a 	mov	r22,zero
   2c2dc:	01400084 	movi	r5,2
   2c2e0:	003fcb06 	br	2c210 <_gp+0xffff1358>
   2c2e4:	500d883a 	mov	r6,r10
   2c2e8:	00800084 	movi	r2,2
   2c2ec:	38805926 	beq	r7,r2,2c454 <__muldf3+0x2c0>
   2c2f0:	008000c4 	movi	r2,3
   2c2f4:	3881bb26 	beq	r7,r2,2c9e4 <__muldf3+0x850>
   2c2f8:	00800044 	movi	r2,1
   2c2fc:	3881961e 	bne	r7,r2,2c958 <__muldf3+0x7c4>
   2c300:	3027883a 	mov	r19,r6
   2c304:	0005883a 	mov	r2,zero
   2c308:	0021883a 	mov	r16,zero
   2c30c:	002d883a 	mov	r22,zero
   2c310:	1004953a 	slli	r2,r2,20
   2c314:	98c03fcc 	andi	r3,r19,255
   2c318:	04400434 	movhi	r17,16
   2c31c:	8c7fffc4 	addi	r17,r17,-1
   2c320:	180697fa 	slli	r3,r3,31
   2c324:	8460703a 	and	r16,r16,r17
   2c328:	80a0b03a 	or	r16,r16,r2
   2c32c:	80c6b03a 	or	r3,r16,r3
   2c330:	b005883a 	mov	r2,r22
   2c334:	dfc01117 	ldw	ra,68(sp)
   2c338:	df001017 	ldw	fp,64(sp)
   2c33c:	ddc00f17 	ldw	r23,60(sp)
   2c340:	dd800e17 	ldw	r22,56(sp)
   2c344:	dd400d17 	ldw	r21,52(sp)
   2c348:	dd000c17 	ldw	r20,48(sp)
   2c34c:	dcc00b17 	ldw	r19,44(sp)
   2c350:	dc800a17 	ldw	r18,40(sp)
   2c354:	dc400917 	ldw	r17,36(sp)
   2c358:	dc000817 	ldw	r16,32(sp)
   2c35c:	dec01204 	addi	sp,sp,72
   2c360:	f800283a 	ret
   2c364:	2404b03a 	or	r2,r4,r16
   2c368:	202b883a 	mov	r21,r4
   2c36c:	10004426 	beq	r2,zero,2c480 <__muldf3+0x2ec>
   2c370:	80015126 	beq	r16,zero,2c8b8 <__muldf3+0x724>
   2c374:	8009883a 	mov	r4,r16
   2c378:	d9800715 	stw	r6,28(sp)
   2c37c:	d9c00215 	stw	r7,8(sp)
   2c380:	da400415 	stw	r9,16(sp)
   2c384:	002d5000 	call	2d500 <__clzsi2>
   2c388:	d9800717 	ldw	r6,28(sp)
   2c38c:	d9c00217 	ldw	r7,8(sp)
   2c390:	da400417 	ldw	r9,16(sp)
   2c394:	113ffd44 	addi	r4,r2,-11
   2c398:	00c00704 	movi	r3,28
   2c39c:	19014216 	blt	r3,r4,2c8a8 <__muldf3+0x714>
   2c3a0:	00c00744 	movi	r3,29
   2c3a4:	15bffe04 	addi	r22,r2,-8
   2c3a8:	1907c83a 	sub	r3,r3,r4
   2c3ac:	85a0983a 	sll	r16,r16,r22
   2c3b0:	a8c6d83a 	srl	r3,r21,r3
   2c3b4:	adac983a 	sll	r22,r21,r22
   2c3b8:	1c20b03a 	or	r16,r3,r16
   2c3bc:	1080fcc4 	addi	r2,r2,1011
   2c3c0:	00a9c83a 	sub	r20,zero,r2
   2c3c4:	002b883a 	mov	r21,zero
   2c3c8:	000b883a 	mov	r5,zero
   2c3cc:	003f9006 	br	2c210 <_gp+0xffff1358>
   2c3d0:	3446b03a 	or	r3,r6,r17
   2c3d4:	1800281e 	bne	r3,zero,2c478 <__muldf3+0x2e4>
   2c3d8:	0023883a 	mov	r17,zero
   2c3dc:	0025883a 	mov	r18,zero
   2c3e0:	01c00084 	movi	r7,2
   2c3e4:	003f9c06 	br	2c258 <_gp+0xffff13a0>
   2c3e8:	3446b03a 	or	r3,r6,r17
   2c3ec:	18001e26 	beq	r3,zero,2c468 <__muldf3+0x2d4>
   2c3f0:	88012126 	beq	r17,zero,2c878 <__muldf3+0x6e4>
   2c3f4:	8809883a 	mov	r4,r17
   2c3f8:	d9400215 	stw	r5,8(sp)
   2c3fc:	d9800715 	stw	r6,28(sp)
   2c400:	da400415 	stw	r9,16(sp)
   2c404:	da800315 	stw	r10,12(sp)
   2c408:	002d5000 	call	2d500 <__clzsi2>
   2c40c:	d9400217 	ldw	r5,8(sp)
   2c410:	d9800717 	ldw	r6,28(sp)
   2c414:	da400417 	ldw	r9,16(sp)
   2c418:	da800317 	ldw	r10,12(sp)
   2c41c:	113ffd44 	addi	r4,r2,-11
   2c420:	00c00704 	movi	r3,28
   2c424:	19011016 	blt	r3,r4,2c868 <__muldf3+0x6d4>
   2c428:	00c00744 	movi	r3,29
   2c42c:	14bffe04 	addi	r18,r2,-8
   2c430:	1907c83a 	sub	r3,r3,r4
   2c434:	8ca2983a 	sll	r17,r17,r18
   2c438:	30c6d83a 	srl	r3,r6,r3
   2c43c:	34a4983a 	sll	r18,r6,r18
   2c440:	1c62b03a 	or	r17,r3,r17
   2c444:	1080fcc4 	addi	r2,r2,1011
   2c448:	0085c83a 	sub	r2,zero,r2
   2c44c:	000f883a 	mov	r7,zero
   2c450:	003f8106 	br	2c258 <_gp+0xffff13a0>
   2c454:	3027883a 	mov	r19,r6
   2c458:	0081ffc4 	movi	r2,2047
   2c45c:	0021883a 	mov	r16,zero
   2c460:	002d883a 	mov	r22,zero
   2c464:	003faa06 	br	2c310 <_gp+0xffff1458>
   2c468:	0023883a 	mov	r17,zero
   2c46c:	0025883a 	mov	r18,zero
   2c470:	01c00044 	movi	r7,1
   2c474:	003f7806 	br	2c258 <_gp+0xffff13a0>
   2c478:	01c000c4 	movi	r7,3
   2c47c:	003f7606 	br	2c258 <_gp+0xffff13a0>
   2c480:	05400104 	movi	r21,4
   2c484:	0021883a 	mov	r16,zero
   2c488:	002d883a 	mov	r22,zero
   2c48c:	01400044 	movi	r5,1
   2c490:	003f5f06 	br	2c210 <_gp+0xffff1358>
   2c494:	05400304 	movi	r21,12
   2c498:	014000c4 	movi	r5,3
   2c49c:	003f5c06 	br	2c210 <_gp+0xffff1358>
   2c4a0:	04000434 	movhi	r16,16
   2c4a4:	0027883a 	mov	r19,zero
   2c4a8:	843fffc4 	addi	r16,r16,-1
   2c4ac:	05bfffc4 	movi	r22,-1
   2c4b0:	0081ffc4 	movi	r2,2047
   2c4b4:	003f9606 	br	2c310 <_gp+0xffff1458>
   2c4b8:	8023883a 	mov	r17,r16
   2c4bc:	b025883a 	mov	r18,r22
   2c4c0:	280f883a 	mov	r7,r5
   2c4c4:	003f8806 	br	2c2e8 <_gp+0xffff1430>
   2c4c8:	8023883a 	mov	r17,r16
   2c4cc:	b025883a 	mov	r18,r22
   2c4d0:	480d883a 	mov	r6,r9
   2c4d4:	280f883a 	mov	r7,r5
   2c4d8:	003f8306 	br	2c2e8 <_gp+0xffff1430>
   2c4dc:	b026d43a 	srli	r19,r22,16
   2c4e0:	902ed43a 	srli	r23,r18,16
   2c4e4:	b5bfffcc 	andi	r22,r22,65535
   2c4e8:	94bfffcc 	andi	r18,r18,65535
   2c4ec:	b00b883a 	mov	r5,r22
   2c4f0:	9009883a 	mov	r4,r18
   2c4f4:	d8c00515 	stw	r3,20(sp)
   2c4f8:	d9800715 	stw	r6,28(sp)
   2c4fc:	da000615 	stw	r8,24(sp)
   2c500:	00206240 	call	20624 <__mulsi3>
   2c504:	980b883a 	mov	r5,r19
   2c508:	9009883a 	mov	r4,r18
   2c50c:	1029883a 	mov	r20,r2
   2c510:	00206240 	call	20624 <__mulsi3>
   2c514:	b80b883a 	mov	r5,r23
   2c518:	9809883a 	mov	r4,r19
   2c51c:	102b883a 	mov	r21,r2
   2c520:	00206240 	call	20624 <__mulsi3>
   2c524:	b809883a 	mov	r4,r23
   2c528:	b00b883a 	mov	r5,r22
   2c52c:	1039883a 	mov	fp,r2
   2c530:	00206240 	call	20624 <__mulsi3>
   2c534:	a008d43a 	srli	r4,r20,16
   2c538:	1545883a 	add	r2,r2,r21
   2c53c:	d8c00517 	ldw	r3,20(sp)
   2c540:	2085883a 	add	r2,r4,r2
   2c544:	d9800717 	ldw	r6,28(sp)
   2c548:	da000617 	ldw	r8,24(sp)
   2c54c:	1540022e 	bgeu	r2,r21,2c558 <__muldf3+0x3c4>
   2c550:	01000074 	movhi	r4,1
   2c554:	e139883a 	add	fp,fp,r4
   2c558:	100e943a 	slli	r7,r2,16
   2c55c:	1004d43a 	srli	r2,r2,16
   2c560:	882ad43a 	srli	r21,r17,16
   2c564:	a53fffcc 	andi	r20,r20,65535
   2c568:	8c7fffcc 	andi	r17,r17,65535
   2c56c:	3d29883a 	add	r20,r7,r20
   2c570:	b00b883a 	mov	r5,r22
   2c574:	8809883a 	mov	r4,r17
   2c578:	d8c00515 	stw	r3,20(sp)
   2c57c:	d9800715 	stw	r6,28(sp)
   2c580:	da000615 	stw	r8,24(sp)
   2c584:	dd000115 	stw	r20,4(sp)
   2c588:	d8800015 	stw	r2,0(sp)
   2c58c:	00206240 	call	20624 <__mulsi3>
   2c590:	980b883a 	mov	r5,r19
   2c594:	8809883a 	mov	r4,r17
   2c598:	d8800215 	stw	r2,8(sp)
   2c59c:	00206240 	call	20624 <__mulsi3>
   2c5a0:	9809883a 	mov	r4,r19
   2c5a4:	a80b883a 	mov	r5,r21
   2c5a8:	1029883a 	mov	r20,r2
   2c5ac:	00206240 	call	20624 <__mulsi3>
   2c5b0:	b00b883a 	mov	r5,r22
   2c5b4:	a809883a 	mov	r4,r21
   2c5b8:	d8800415 	stw	r2,16(sp)
   2c5bc:	00206240 	call	20624 <__mulsi3>
   2c5c0:	d9c00217 	ldw	r7,8(sp)
   2c5c4:	1505883a 	add	r2,r2,r20
   2c5c8:	d8c00517 	ldw	r3,20(sp)
   2c5cc:	3826d43a 	srli	r19,r7,16
   2c5d0:	d9800717 	ldw	r6,28(sp)
   2c5d4:	da000617 	ldw	r8,24(sp)
   2c5d8:	9885883a 	add	r2,r19,r2
   2c5dc:	da400417 	ldw	r9,16(sp)
   2c5e0:	1500022e 	bgeu	r2,r20,2c5ec <__muldf3+0x458>
   2c5e4:	01000074 	movhi	r4,1
   2c5e8:	4913883a 	add	r9,r9,r4
   2c5ec:	1028d43a 	srli	r20,r2,16
   2c5f0:	1004943a 	slli	r2,r2,16
   2c5f4:	802cd43a 	srli	r22,r16,16
   2c5f8:	843fffcc 	andi	r16,r16,65535
   2c5fc:	3cffffcc 	andi	r19,r7,65535
   2c600:	9009883a 	mov	r4,r18
   2c604:	800b883a 	mov	r5,r16
   2c608:	a269883a 	add	r20,r20,r9
   2c60c:	d8c00515 	stw	r3,20(sp)
   2c610:	d9800715 	stw	r6,28(sp)
   2c614:	da000615 	stw	r8,24(sp)
   2c618:	14e7883a 	add	r19,r2,r19
   2c61c:	00206240 	call	20624 <__mulsi3>
   2c620:	9009883a 	mov	r4,r18
   2c624:	b00b883a 	mov	r5,r22
   2c628:	d8800315 	stw	r2,12(sp)
   2c62c:	00206240 	call	20624 <__mulsi3>
   2c630:	b809883a 	mov	r4,r23
   2c634:	b00b883a 	mov	r5,r22
   2c638:	d8800215 	stw	r2,8(sp)
   2c63c:	00206240 	call	20624 <__mulsi3>
   2c640:	b80b883a 	mov	r5,r23
   2c644:	8009883a 	mov	r4,r16
   2c648:	d8800415 	stw	r2,16(sp)
   2c64c:	00206240 	call	20624 <__mulsi3>
   2c650:	da800317 	ldw	r10,12(sp)
   2c654:	d9c00217 	ldw	r7,8(sp)
   2c658:	d9000017 	ldw	r4,0(sp)
   2c65c:	502ed43a 	srli	r23,r10,16
   2c660:	11c5883a 	add	r2,r2,r7
   2c664:	24e5883a 	add	r18,r4,r19
   2c668:	b885883a 	add	r2,r23,r2
   2c66c:	d8c00517 	ldw	r3,20(sp)
   2c670:	d9800717 	ldw	r6,28(sp)
   2c674:	da000617 	ldw	r8,24(sp)
   2c678:	da400417 	ldw	r9,16(sp)
   2c67c:	11c0022e 	bgeu	r2,r7,2c688 <__muldf3+0x4f4>
   2c680:	01000074 	movhi	r4,1
   2c684:	4913883a 	add	r9,r9,r4
   2c688:	100ed43a 	srli	r7,r2,16
   2c68c:	1004943a 	slli	r2,r2,16
   2c690:	55ffffcc 	andi	r23,r10,65535
   2c694:	3a53883a 	add	r9,r7,r9
   2c698:	8809883a 	mov	r4,r17
   2c69c:	800b883a 	mov	r5,r16
   2c6a0:	d8c00515 	stw	r3,20(sp)
   2c6a4:	d9800715 	stw	r6,28(sp)
   2c6a8:	da000615 	stw	r8,24(sp)
   2c6ac:	da400415 	stw	r9,16(sp)
   2c6b0:	15ef883a 	add	r23,r2,r23
   2c6b4:	00206240 	call	20624 <__mulsi3>
   2c6b8:	8809883a 	mov	r4,r17
   2c6bc:	b00b883a 	mov	r5,r22
   2c6c0:	d8800215 	stw	r2,8(sp)
   2c6c4:	00206240 	call	20624 <__mulsi3>
   2c6c8:	b00b883a 	mov	r5,r22
   2c6cc:	a809883a 	mov	r4,r21
   2c6d0:	d8800315 	stw	r2,12(sp)
   2c6d4:	00206240 	call	20624 <__mulsi3>
   2c6d8:	8009883a 	mov	r4,r16
   2c6dc:	a80b883a 	mov	r5,r21
   2c6e0:	1023883a 	mov	r17,r2
   2c6e4:	00206240 	call	20624 <__mulsi3>
   2c6e8:	d9c00217 	ldw	r7,8(sp)
   2c6ec:	da800317 	ldw	r10,12(sp)
   2c6f0:	d8c00517 	ldw	r3,20(sp)
   2c6f4:	3808d43a 	srli	r4,r7,16
   2c6f8:	1285883a 	add	r2,r2,r10
   2c6fc:	d9800717 	ldw	r6,28(sp)
   2c700:	2085883a 	add	r2,r4,r2
   2c704:	da000617 	ldw	r8,24(sp)
   2c708:	da400417 	ldw	r9,16(sp)
   2c70c:	1280022e 	bgeu	r2,r10,2c718 <__muldf3+0x584>
   2c710:	01000074 	movhi	r4,1
   2c714:	8923883a 	add	r17,r17,r4
   2c718:	1008943a 	slli	r4,r2,16
   2c71c:	39ffffcc 	andi	r7,r7,65535
   2c720:	e4b9883a 	add	fp,fp,r18
   2c724:	21cf883a 	add	r7,r4,r7
   2c728:	e4e7803a 	cmpltu	r19,fp,r19
   2c72c:	3d0f883a 	add	r7,r7,r20
   2c730:	bf39883a 	add	fp,r23,fp
   2c734:	99c9883a 	add	r4,r19,r7
   2c738:	e5ef803a 	cmpltu	r23,fp,r23
   2c73c:	490b883a 	add	r5,r9,r4
   2c740:	1004d43a 	srli	r2,r2,16
   2c744:	b965883a 	add	r18,r23,r5
   2c748:	24c9803a 	cmpltu	r4,r4,r19
   2c74c:	3d29803a 	cmpltu	r20,r7,r20
   2c750:	a128b03a 	or	r20,r20,r4
   2c754:	95ef803a 	cmpltu	r23,r18,r23
   2c758:	2a53803a 	cmpltu	r9,r5,r9
   2c75c:	a0a9883a 	add	r20,r20,r2
   2c760:	4deeb03a 	or	r23,r9,r23
   2c764:	a5ef883a 	add	r23,r20,r23
   2c768:	bc63883a 	add	r17,r23,r17
   2c76c:	e004927a 	slli	r2,fp,9
   2c770:	d9000117 	ldw	r4,4(sp)
   2c774:	882e927a 	slli	r23,r17,9
   2c778:	9022d5fa 	srli	r17,r18,23
   2c77c:	e038d5fa 	srli	fp,fp,23
   2c780:	1104b03a 	or	r2,r2,r4
   2c784:	9024927a 	slli	r18,r18,9
   2c788:	1004c03a 	cmpne	r2,r2,zero
   2c78c:	bc62b03a 	or	r17,r23,r17
   2c790:	1738b03a 	or	fp,r2,fp
   2c794:	8880402c 	andhi	r2,r17,256
   2c798:	e4a4b03a 	or	r18,fp,r18
   2c79c:	10000726 	beq	r2,zero,2c7bc <__muldf3+0x628>
   2c7a0:	9006d07a 	srli	r3,r18,1
   2c7a4:	880497fa 	slli	r2,r17,31
   2c7a8:	9480004c 	andi	r18,r18,1
   2c7ac:	8822d07a 	srli	r17,r17,1
   2c7b0:	1ca4b03a 	or	r18,r3,r18
   2c7b4:	14a4b03a 	or	r18,r2,r18
   2c7b8:	4007883a 	mov	r3,r8
   2c7bc:	1880ffc4 	addi	r2,r3,1023
   2c7c0:	0080460e 	bge	zero,r2,2c8dc <__muldf3+0x748>
   2c7c4:	910001cc 	andi	r4,r18,7
   2c7c8:	20000726 	beq	r4,zero,2c7e8 <__muldf3+0x654>
   2c7cc:	910003cc 	andi	r4,r18,15
   2c7d0:	01400104 	movi	r5,4
   2c7d4:	21400426 	beq	r4,r5,2c7e8 <__muldf3+0x654>
   2c7d8:	9149883a 	add	r4,r18,r5
   2c7dc:	24a5803a 	cmpltu	r18,r4,r18
   2c7e0:	8ca3883a 	add	r17,r17,r18
   2c7e4:	2025883a 	mov	r18,r4
   2c7e8:	8900402c 	andhi	r4,r17,256
   2c7ec:	20000426 	beq	r4,zero,2c800 <__muldf3+0x66c>
   2c7f0:	18810004 	addi	r2,r3,1024
   2c7f4:	00ffc034 	movhi	r3,65280
   2c7f8:	18ffffc4 	addi	r3,r3,-1
   2c7fc:	88e2703a 	and	r17,r17,r3
   2c800:	00c1ff84 	movi	r3,2046
   2c804:	18bf1316 	blt	r3,r2,2c454 <_gp+0xffff159c>
   2c808:	882c977a 	slli	r22,r17,29
   2c80c:	9024d0fa 	srli	r18,r18,3
   2c810:	8822927a 	slli	r17,r17,9
   2c814:	1081ffcc 	andi	r2,r2,2047
   2c818:	b4acb03a 	or	r22,r22,r18
   2c81c:	8820d33a 	srli	r16,r17,12
   2c820:	3027883a 	mov	r19,r6
   2c824:	003eba06 	br	2c310 <_gp+0xffff1458>
   2c828:	8080022c 	andhi	r2,r16,8
   2c82c:	10000926 	beq	r2,zero,2c854 <__muldf3+0x6c0>
   2c830:	8880022c 	andhi	r2,r17,8
   2c834:	1000071e 	bne	r2,zero,2c854 <__muldf3+0x6c0>
   2c838:	00800434 	movhi	r2,16
   2c83c:	8c000234 	orhi	r16,r17,8
   2c840:	10bfffc4 	addi	r2,r2,-1
   2c844:	e027883a 	mov	r19,fp
   2c848:	80a0703a 	and	r16,r16,r2
   2c84c:	902d883a 	mov	r22,r18
   2c850:	003f1706 	br	2c4b0 <_gp+0xffff15f8>
   2c854:	00800434 	movhi	r2,16
   2c858:	84000234 	orhi	r16,r16,8
   2c85c:	10bfffc4 	addi	r2,r2,-1
   2c860:	80a0703a 	and	r16,r16,r2
   2c864:	003f1206 	br	2c4b0 <_gp+0xffff15f8>
   2c868:	147ff604 	addi	r17,r2,-40
   2c86c:	3462983a 	sll	r17,r6,r17
   2c870:	0025883a 	mov	r18,zero
   2c874:	003ef306 	br	2c444 <_gp+0xffff158c>
   2c878:	3009883a 	mov	r4,r6
   2c87c:	d9400215 	stw	r5,8(sp)
   2c880:	d9800715 	stw	r6,28(sp)
   2c884:	da400415 	stw	r9,16(sp)
   2c888:	da800315 	stw	r10,12(sp)
   2c88c:	002d5000 	call	2d500 <__clzsi2>
   2c890:	10800804 	addi	r2,r2,32
   2c894:	da800317 	ldw	r10,12(sp)
   2c898:	da400417 	ldw	r9,16(sp)
   2c89c:	d9800717 	ldw	r6,28(sp)
   2c8a0:	d9400217 	ldw	r5,8(sp)
   2c8a4:	003edd06 	br	2c41c <_gp+0xffff1564>
   2c8a8:	143ff604 	addi	r16,r2,-40
   2c8ac:	ac20983a 	sll	r16,r21,r16
   2c8b0:	002d883a 	mov	r22,zero
   2c8b4:	003ec106 	br	2c3bc <_gp+0xffff1504>
   2c8b8:	d9800715 	stw	r6,28(sp)
   2c8bc:	d9c00215 	stw	r7,8(sp)
   2c8c0:	da400415 	stw	r9,16(sp)
   2c8c4:	002d5000 	call	2d500 <__clzsi2>
   2c8c8:	10800804 	addi	r2,r2,32
   2c8cc:	da400417 	ldw	r9,16(sp)
   2c8d0:	d9c00217 	ldw	r7,8(sp)
   2c8d4:	d9800717 	ldw	r6,28(sp)
   2c8d8:	003eae06 	br	2c394 <_gp+0xffff14dc>
   2c8dc:	00c00044 	movi	r3,1
   2c8e0:	1887c83a 	sub	r3,r3,r2
   2c8e4:	01000e04 	movi	r4,56
   2c8e8:	20fe8516 	blt	r4,r3,2c300 <_gp+0xffff1448>
   2c8ec:	010007c4 	movi	r4,31
   2c8f0:	20c01b16 	blt	r4,r3,2c960 <__muldf3+0x7cc>
   2c8f4:	00800804 	movi	r2,32
   2c8f8:	10c5c83a 	sub	r2,r2,r3
   2c8fc:	888a983a 	sll	r5,r17,r2
   2c900:	90c8d83a 	srl	r4,r18,r3
   2c904:	9084983a 	sll	r2,r18,r2
   2c908:	88e2d83a 	srl	r17,r17,r3
   2c90c:	2906b03a 	or	r3,r5,r4
   2c910:	1004c03a 	cmpne	r2,r2,zero
   2c914:	1886b03a 	or	r3,r3,r2
   2c918:	188001cc 	andi	r2,r3,7
   2c91c:	10000726 	beq	r2,zero,2c93c <__muldf3+0x7a8>
   2c920:	188003cc 	andi	r2,r3,15
   2c924:	01000104 	movi	r4,4
   2c928:	11000426 	beq	r2,r4,2c93c <__muldf3+0x7a8>
   2c92c:	1805883a 	mov	r2,r3
   2c930:	10c00104 	addi	r3,r2,4
   2c934:	1885803a 	cmpltu	r2,r3,r2
   2c938:	88a3883a 	add	r17,r17,r2
   2c93c:	8880202c 	andhi	r2,r17,128
   2c940:	10001c26 	beq	r2,zero,2c9b4 <__muldf3+0x820>
   2c944:	3027883a 	mov	r19,r6
   2c948:	00800044 	movi	r2,1
   2c94c:	0021883a 	mov	r16,zero
   2c950:	002d883a 	mov	r22,zero
   2c954:	003e6e06 	br	2c310 <_gp+0xffff1458>
   2c958:	4007883a 	mov	r3,r8
   2c95c:	003f9706 	br	2c7bc <_gp+0xffff1904>
   2c960:	017ff844 	movi	r5,-31
   2c964:	2885c83a 	sub	r2,r5,r2
   2c968:	888ad83a 	srl	r5,r17,r2
   2c96c:	00800804 	movi	r2,32
   2c970:	18801a26 	beq	r3,r2,2c9dc <__muldf3+0x848>
   2c974:	01001004 	movi	r4,64
   2c978:	20c7c83a 	sub	r3,r4,r3
   2c97c:	88e2983a 	sll	r17,r17,r3
   2c980:	8ca4b03a 	or	r18,r17,r18
   2c984:	9004c03a 	cmpne	r2,r18,zero
   2c988:	2884b03a 	or	r2,r5,r2
   2c98c:	144001cc 	andi	r17,r2,7
   2c990:	88000d1e 	bne	r17,zero,2c9c8 <__muldf3+0x834>
   2c994:	0021883a 	mov	r16,zero
   2c998:	102cd0fa 	srli	r22,r2,3
   2c99c:	3027883a 	mov	r19,r6
   2c9a0:	0005883a 	mov	r2,zero
   2c9a4:	b46cb03a 	or	r22,r22,r17
   2c9a8:	003e5906 	br	2c310 <_gp+0xffff1458>
   2c9ac:	1007883a 	mov	r3,r2
   2c9b0:	0023883a 	mov	r17,zero
   2c9b4:	8820927a 	slli	r16,r17,9
   2c9b8:	1805883a 	mov	r2,r3
   2c9bc:	8822977a 	slli	r17,r17,29
   2c9c0:	8020d33a 	srli	r16,r16,12
   2c9c4:	003ff406 	br	2c998 <_gp+0xffff1ae0>
   2c9c8:	10c003cc 	andi	r3,r2,15
   2c9cc:	01000104 	movi	r4,4
   2c9d0:	193ff626 	beq	r3,r4,2c9ac <_gp+0xffff1af4>
   2c9d4:	0023883a 	mov	r17,zero
   2c9d8:	003fd506 	br	2c930 <_gp+0xffff1a78>
   2c9dc:	0023883a 	mov	r17,zero
   2c9e0:	003fe706 	br	2c980 <_gp+0xffff1ac8>
   2c9e4:	00800434 	movhi	r2,16
   2c9e8:	8c000234 	orhi	r16,r17,8
   2c9ec:	10bfffc4 	addi	r2,r2,-1
   2c9f0:	3027883a 	mov	r19,r6
   2c9f4:	80a0703a 	and	r16,r16,r2
   2c9f8:	902d883a 	mov	r22,r18
   2c9fc:	003eac06 	br	2c4b0 <_gp+0xffff15f8>

0002ca00 <__subdf3>:
   2ca00:	02000434 	movhi	r8,16
   2ca04:	423fffc4 	addi	r8,r8,-1
   2ca08:	defffb04 	addi	sp,sp,-20
   2ca0c:	2a14703a 	and	r10,r5,r8
   2ca10:	3812d53a 	srli	r9,r7,20
   2ca14:	3a10703a 	and	r8,r7,r8
   2ca18:	2006d77a 	srli	r3,r4,29
   2ca1c:	3004d77a 	srli	r2,r6,29
   2ca20:	dc000015 	stw	r16,0(sp)
   2ca24:	501490fa 	slli	r10,r10,3
   2ca28:	2820d53a 	srli	r16,r5,20
   2ca2c:	401090fa 	slli	r8,r8,3
   2ca30:	dc800215 	stw	r18,8(sp)
   2ca34:	dc400115 	stw	r17,4(sp)
   2ca38:	dfc00415 	stw	ra,16(sp)
   2ca3c:	202290fa 	slli	r17,r4,3
   2ca40:	dcc00315 	stw	r19,12(sp)
   2ca44:	4a41ffcc 	andi	r9,r9,2047
   2ca48:	0101ffc4 	movi	r4,2047
   2ca4c:	2824d7fa 	srli	r18,r5,31
   2ca50:	8401ffcc 	andi	r16,r16,2047
   2ca54:	50c6b03a 	or	r3,r10,r3
   2ca58:	380ed7fa 	srli	r7,r7,31
   2ca5c:	408ab03a 	or	r5,r8,r2
   2ca60:	300c90fa 	slli	r6,r6,3
   2ca64:	49009626 	beq	r9,r4,2ccc0 <__subdf3+0x2c0>
   2ca68:	39c0005c 	xori	r7,r7,1
   2ca6c:	8245c83a 	sub	r2,r16,r9
   2ca70:	3c807426 	beq	r7,r18,2cc44 <__subdf3+0x244>
   2ca74:	0080af0e 	bge	zero,r2,2cd34 <__subdf3+0x334>
   2ca78:	48002a1e 	bne	r9,zero,2cb24 <__subdf3+0x124>
   2ca7c:	2988b03a 	or	r4,r5,r6
   2ca80:	20009a1e 	bne	r4,zero,2ccec <__subdf3+0x2ec>
   2ca84:	888001cc 	andi	r2,r17,7
   2ca88:	10000726 	beq	r2,zero,2caa8 <__subdf3+0xa8>
   2ca8c:	888003cc 	andi	r2,r17,15
   2ca90:	01000104 	movi	r4,4
   2ca94:	11000426 	beq	r2,r4,2caa8 <__subdf3+0xa8>
   2ca98:	890b883a 	add	r5,r17,r4
   2ca9c:	2c63803a 	cmpltu	r17,r5,r17
   2caa0:	1c47883a 	add	r3,r3,r17
   2caa4:	2823883a 	mov	r17,r5
   2caa8:	1880202c 	andhi	r2,r3,128
   2caac:	10005926 	beq	r2,zero,2cc14 <__subdf3+0x214>
   2cab0:	84000044 	addi	r16,r16,1
   2cab4:	0081ffc4 	movi	r2,2047
   2cab8:	8080be26 	beq	r16,r2,2cdb4 <__subdf3+0x3b4>
   2cabc:	017fe034 	movhi	r5,65408
   2cac0:	297fffc4 	addi	r5,r5,-1
   2cac4:	1946703a 	and	r3,r3,r5
   2cac8:	1804977a 	slli	r2,r3,29
   2cacc:	1806927a 	slli	r3,r3,9
   2cad0:	8822d0fa 	srli	r17,r17,3
   2cad4:	8401ffcc 	andi	r16,r16,2047
   2cad8:	180ad33a 	srli	r5,r3,12
   2cadc:	9100004c 	andi	r4,r18,1
   2cae0:	1444b03a 	or	r2,r2,r17
   2cae4:	80c1ffcc 	andi	r3,r16,2047
   2cae8:	1820953a 	slli	r16,r3,20
   2caec:	20c03fcc 	andi	r3,r4,255
   2caf0:	180897fa 	slli	r4,r3,31
   2caf4:	00c00434 	movhi	r3,16
   2caf8:	18ffffc4 	addi	r3,r3,-1
   2cafc:	28c6703a 	and	r3,r5,r3
   2cb00:	1c06b03a 	or	r3,r3,r16
   2cb04:	1906b03a 	or	r3,r3,r4
   2cb08:	dfc00417 	ldw	ra,16(sp)
   2cb0c:	dcc00317 	ldw	r19,12(sp)
   2cb10:	dc800217 	ldw	r18,8(sp)
   2cb14:	dc400117 	ldw	r17,4(sp)
   2cb18:	dc000017 	ldw	r16,0(sp)
   2cb1c:	dec00504 	addi	sp,sp,20
   2cb20:	f800283a 	ret
   2cb24:	0101ffc4 	movi	r4,2047
   2cb28:	813fd626 	beq	r16,r4,2ca84 <_gp+0xffff1bcc>
   2cb2c:	29402034 	orhi	r5,r5,128
   2cb30:	01000e04 	movi	r4,56
   2cb34:	2080a316 	blt	r4,r2,2cdc4 <__subdf3+0x3c4>
   2cb38:	010007c4 	movi	r4,31
   2cb3c:	2080c616 	blt	r4,r2,2ce58 <__subdf3+0x458>
   2cb40:	01000804 	movi	r4,32
   2cb44:	2089c83a 	sub	r4,r4,r2
   2cb48:	2910983a 	sll	r8,r5,r4
   2cb4c:	308ed83a 	srl	r7,r6,r2
   2cb50:	3108983a 	sll	r4,r6,r4
   2cb54:	2884d83a 	srl	r2,r5,r2
   2cb58:	41ccb03a 	or	r6,r8,r7
   2cb5c:	2008c03a 	cmpne	r4,r4,zero
   2cb60:	310cb03a 	or	r6,r6,r4
   2cb64:	898dc83a 	sub	r6,r17,r6
   2cb68:	89a3803a 	cmpltu	r17,r17,r6
   2cb6c:	1887c83a 	sub	r3,r3,r2
   2cb70:	1c47c83a 	sub	r3,r3,r17
   2cb74:	3023883a 	mov	r17,r6
   2cb78:	1880202c 	andhi	r2,r3,128
   2cb7c:	10002326 	beq	r2,zero,2cc0c <__subdf3+0x20c>
   2cb80:	04c02034 	movhi	r19,128
   2cb84:	9cffffc4 	addi	r19,r19,-1
   2cb88:	1ce6703a 	and	r19,r3,r19
   2cb8c:	98007a26 	beq	r19,zero,2cd78 <__subdf3+0x378>
   2cb90:	9809883a 	mov	r4,r19
   2cb94:	002d5000 	call	2d500 <__clzsi2>
   2cb98:	113ffe04 	addi	r4,r2,-8
   2cb9c:	00c007c4 	movi	r3,31
   2cba0:	19007b16 	blt	r3,r4,2cd90 <__subdf3+0x390>
   2cba4:	00800804 	movi	r2,32
   2cba8:	1105c83a 	sub	r2,r2,r4
   2cbac:	8884d83a 	srl	r2,r17,r2
   2cbb0:	9906983a 	sll	r3,r19,r4
   2cbb4:	8922983a 	sll	r17,r17,r4
   2cbb8:	10c4b03a 	or	r2,r2,r3
   2cbbc:	24007816 	blt	r4,r16,2cda0 <__subdf3+0x3a0>
   2cbc0:	2421c83a 	sub	r16,r4,r16
   2cbc4:	80c00044 	addi	r3,r16,1
   2cbc8:	010007c4 	movi	r4,31
   2cbcc:	20c09516 	blt	r4,r3,2ce24 <__subdf3+0x424>
   2cbd0:	01400804 	movi	r5,32
   2cbd4:	28cbc83a 	sub	r5,r5,r3
   2cbd8:	88c8d83a 	srl	r4,r17,r3
   2cbdc:	8962983a 	sll	r17,r17,r5
   2cbe0:	114a983a 	sll	r5,r2,r5
   2cbe4:	10c6d83a 	srl	r3,r2,r3
   2cbe8:	8804c03a 	cmpne	r2,r17,zero
   2cbec:	290ab03a 	or	r5,r5,r4
   2cbf0:	28a2b03a 	or	r17,r5,r2
   2cbf4:	0021883a 	mov	r16,zero
   2cbf8:	003fa206 	br	2ca84 <_gp+0xffff1bcc>
   2cbfc:	2090b03a 	or	r8,r4,r2
   2cc00:	40018e26 	beq	r8,zero,2d23c <__subdf3+0x83c>
   2cc04:	1007883a 	mov	r3,r2
   2cc08:	2023883a 	mov	r17,r4
   2cc0c:	888001cc 	andi	r2,r17,7
   2cc10:	103f9e1e 	bne	r2,zero,2ca8c <_gp+0xffff1bd4>
   2cc14:	1804977a 	slli	r2,r3,29
   2cc18:	8822d0fa 	srli	r17,r17,3
   2cc1c:	1810d0fa 	srli	r8,r3,3
   2cc20:	9100004c 	andi	r4,r18,1
   2cc24:	1444b03a 	or	r2,r2,r17
   2cc28:	00c1ffc4 	movi	r3,2047
   2cc2c:	80c02826 	beq	r16,r3,2ccd0 <__subdf3+0x2d0>
   2cc30:	01400434 	movhi	r5,16
   2cc34:	297fffc4 	addi	r5,r5,-1
   2cc38:	80e0703a 	and	r16,r16,r3
   2cc3c:	414a703a 	and	r5,r8,r5
   2cc40:	003fa806 	br	2cae4 <_gp+0xffff1c2c>
   2cc44:	0080630e 	bge	zero,r2,2cdd4 <__subdf3+0x3d4>
   2cc48:	48003026 	beq	r9,zero,2cd0c <__subdf3+0x30c>
   2cc4c:	0101ffc4 	movi	r4,2047
   2cc50:	813f8c26 	beq	r16,r4,2ca84 <_gp+0xffff1bcc>
   2cc54:	29402034 	orhi	r5,r5,128
   2cc58:	01000e04 	movi	r4,56
   2cc5c:	2080a90e 	bge	r4,r2,2cf04 <__subdf3+0x504>
   2cc60:	298cb03a 	or	r6,r5,r6
   2cc64:	3012c03a 	cmpne	r9,r6,zero
   2cc68:	0005883a 	mov	r2,zero
   2cc6c:	4c53883a 	add	r9,r9,r17
   2cc70:	4c63803a 	cmpltu	r17,r9,r17
   2cc74:	10c7883a 	add	r3,r2,r3
   2cc78:	88c7883a 	add	r3,r17,r3
   2cc7c:	4823883a 	mov	r17,r9
   2cc80:	1880202c 	andhi	r2,r3,128
   2cc84:	1000d026 	beq	r2,zero,2cfc8 <__subdf3+0x5c8>
   2cc88:	84000044 	addi	r16,r16,1
   2cc8c:	0081ffc4 	movi	r2,2047
   2cc90:	8080fe26 	beq	r16,r2,2d08c <__subdf3+0x68c>
   2cc94:	00bfe034 	movhi	r2,65408
   2cc98:	10bfffc4 	addi	r2,r2,-1
   2cc9c:	1886703a 	and	r3,r3,r2
   2cca0:	880ad07a 	srli	r5,r17,1
   2cca4:	180497fa 	slli	r2,r3,31
   2cca8:	8900004c 	andi	r4,r17,1
   2ccac:	2922b03a 	or	r17,r5,r4
   2ccb0:	1806d07a 	srli	r3,r3,1
   2ccb4:	1462b03a 	or	r17,r2,r17
   2ccb8:	3825883a 	mov	r18,r7
   2ccbc:	003f7106 	br	2ca84 <_gp+0xffff1bcc>
   2ccc0:	2984b03a 	or	r2,r5,r6
   2ccc4:	103f6826 	beq	r2,zero,2ca68 <_gp+0xffff1bb0>
   2ccc8:	39c03fcc 	andi	r7,r7,255
   2cccc:	003f6706 	br	2ca6c <_gp+0xffff1bb4>
   2ccd0:	4086b03a 	or	r3,r8,r2
   2ccd4:	18015226 	beq	r3,zero,2d220 <__subdf3+0x820>
   2ccd8:	00c00434 	movhi	r3,16
   2ccdc:	41400234 	orhi	r5,r8,8
   2cce0:	18ffffc4 	addi	r3,r3,-1
   2cce4:	28ca703a 	and	r5,r5,r3
   2cce8:	003f7e06 	br	2cae4 <_gp+0xffff1c2c>
   2ccec:	10bfffc4 	addi	r2,r2,-1
   2ccf0:	1000491e 	bne	r2,zero,2ce18 <__subdf3+0x418>
   2ccf4:	898fc83a 	sub	r7,r17,r6
   2ccf8:	89e3803a 	cmpltu	r17,r17,r7
   2ccfc:	1947c83a 	sub	r3,r3,r5
   2cd00:	1c47c83a 	sub	r3,r3,r17
   2cd04:	3823883a 	mov	r17,r7
   2cd08:	003f9b06 	br	2cb78 <_gp+0xffff1cc0>
   2cd0c:	2988b03a 	or	r4,r5,r6
   2cd10:	203f5c26 	beq	r4,zero,2ca84 <_gp+0xffff1bcc>
   2cd14:	10bfffc4 	addi	r2,r2,-1
   2cd18:	1000931e 	bne	r2,zero,2cf68 <__subdf3+0x568>
   2cd1c:	898d883a 	add	r6,r17,r6
   2cd20:	3463803a 	cmpltu	r17,r6,r17
   2cd24:	1947883a 	add	r3,r3,r5
   2cd28:	88c7883a 	add	r3,r17,r3
   2cd2c:	3023883a 	mov	r17,r6
   2cd30:	003fd306 	br	2cc80 <_gp+0xffff1dc8>
   2cd34:	1000541e 	bne	r2,zero,2ce88 <__subdf3+0x488>
   2cd38:	80800044 	addi	r2,r16,1
   2cd3c:	1081ffcc 	andi	r2,r2,2047
   2cd40:	01000044 	movi	r4,1
   2cd44:	2080a20e 	bge	r4,r2,2cfd0 <__subdf3+0x5d0>
   2cd48:	8989c83a 	sub	r4,r17,r6
   2cd4c:	8905803a 	cmpltu	r2,r17,r4
   2cd50:	1967c83a 	sub	r19,r3,r5
   2cd54:	98a7c83a 	sub	r19,r19,r2
   2cd58:	9880202c 	andhi	r2,r19,128
   2cd5c:	10006326 	beq	r2,zero,2ceec <__subdf3+0x4ec>
   2cd60:	3463c83a 	sub	r17,r6,r17
   2cd64:	28c7c83a 	sub	r3,r5,r3
   2cd68:	344d803a 	cmpltu	r6,r6,r17
   2cd6c:	19a7c83a 	sub	r19,r3,r6
   2cd70:	3825883a 	mov	r18,r7
   2cd74:	983f861e 	bne	r19,zero,2cb90 <_gp+0xffff1cd8>
   2cd78:	8809883a 	mov	r4,r17
   2cd7c:	002d5000 	call	2d500 <__clzsi2>
   2cd80:	10800804 	addi	r2,r2,32
   2cd84:	113ffe04 	addi	r4,r2,-8
   2cd88:	00c007c4 	movi	r3,31
   2cd8c:	193f850e 	bge	r3,r4,2cba4 <_gp+0xffff1cec>
   2cd90:	10bff604 	addi	r2,r2,-40
   2cd94:	8884983a 	sll	r2,r17,r2
   2cd98:	0023883a 	mov	r17,zero
   2cd9c:	243f880e 	bge	r4,r16,2cbc0 <_gp+0xffff1d08>
   2cda0:	00ffe034 	movhi	r3,65408
   2cda4:	18ffffc4 	addi	r3,r3,-1
   2cda8:	8121c83a 	sub	r16,r16,r4
   2cdac:	10c6703a 	and	r3,r2,r3
   2cdb0:	003f3406 	br	2ca84 <_gp+0xffff1bcc>
   2cdb4:	9100004c 	andi	r4,r18,1
   2cdb8:	000b883a 	mov	r5,zero
   2cdbc:	0005883a 	mov	r2,zero
   2cdc0:	003f4806 	br	2cae4 <_gp+0xffff1c2c>
   2cdc4:	298cb03a 	or	r6,r5,r6
   2cdc8:	300cc03a 	cmpne	r6,r6,zero
   2cdcc:	0005883a 	mov	r2,zero
   2cdd0:	003f6406 	br	2cb64 <_gp+0xffff1cac>
   2cdd4:	10009a1e 	bne	r2,zero,2d040 <__subdf3+0x640>
   2cdd8:	82400044 	addi	r9,r16,1
   2cddc:	4881ffcc 	andi	r2,r9,2047
   2cde0:	02800044 	movi	r10,1
   2cde4:	5080670e 	bge	r10,r2,2cf84 <__subdf3+0x584>
   2cde8:	0081ffc4 	movi	r2,2047
   2cdec:	4880af26 	beq	r9,r2,2d0ac <__subdf3+0x6ac>
   2cdf0:	898d883a 	add	r6,r17,r6
   2cdf4:	1945883a 	add	r2,r3,r5
   2cdf8:	3447803a 	cmpltu	r3,r6,r17
   2cdfc:	1887883a 	add	r3,r3,r2
   2ce00:	182297fa 	slli	r17,r3,31
   2ce04:	300cd07a 	srli	r6,r6,1
   2ce08:	1806d07a 	srli	r3,r3,1
   2ce0c:	4821883a 	mov	r16,r9
   2ce10:	89a2b03a 	or	r17,r17,r6
   2ce14:	003f1b06 	br	2ca84 <_gp+0xffff1bcc>
   2ce18:	0101ffc4 	movi	r4,2047
   2ce1c:	813f441e 	bne	r16,r4,2cb30 <_gp+0xffff1c78>
   2ce20:	003f1806 	br	2ca84 <_gp+0xffff1bcc>
   2ce24:	843ff844 	addi	r16,r16,-31
   2ce28:	01400804 	movi	r5,32
   2ce2c:	1408d83a 	srl	r4,r2,r16
   2ce30:	19405026 	beq	r3,r5,2cf74 <__subdf3+0x574>
   2ce34:	01401004 	movi	r5,64
   2ce38:	28c7c83a 	sub	r3,r5,r3
   2ce3c:	10c4983a 	sll	r2,r2,r3
   2ce40:	88a2b03a 	or	r17,r17,r2
   2ce44:	8822c03a 	cmpne	r17,r17,zero
   2ce48:	2462b03a 	or	r17,r4,r17
   2ce4c:	0007883a 	mov	r3,zero
   2ce50:	0021883a 	mov	r16,zero
   2ce54:	003f6d06 	br	2cc0c <_gp+0xffff1d54>
   2ce58:	11fff804 	addi	r7,r2,-32
   2ce5c:	01000804 	movi	r4,32
   2ce60:	29ced83a 	srl	r7,r5,r7
   2ce64:	11004526 	beq	r2,r4,2cf7c <__subdf3+0x57c>
   2ce68:	01001004 	movi	r4,64
   2ce6c:	2089c83a 	sub	r4,r4,r2
   2ce70:	2904983a 	sll	r2,r5,r4
   2ce74:	118cb03a 	or	r6,r2,r6
   2ce78:	300cc03a 	cmpne	r6,r6,zero
   2ce7c:	398cb03a 	or	r6,r7,r6
   2ce80:	0005883a 	mov	r2,zero
   2ce84:	003f3706 	br	2cb64 <_gp+0xffff1cac>
   2ce88:	80002a26 	beq	r16,zero,2cf34 <__subdf3+0x534>
   2ce8c:	0101ffc4 	movi	r4,2047
   2ce90:	49006626 	beq	r9,r4,2d02c <__subdf3+0x62c>
   2ce94:	0085c83a 	sub	r2,zero,r2
   2ce98:	18c02034 	orhi	r3,r3,128
   2ce9c:	01000e04 	movi	r4,56
   2cea0:	20807e16 	blt	r4,r2,2d09c <__subdf3+0x69c>
   2cea4:	010007c4 	movi	r4,31
   2cea8:	2080e716 	blt	r4,r2,2d248 <__subdf3+0x848>
   2ceac:	01000804 	movi	r4,32
   2ceb0:	2089c83a 	sub	r4,r4,r2
   2ceb4:	1914983a 	sll	r10,r3,r4
   2ceb8:	8890d83a 	srl	r8,r17,r2
   2cebc:	8908983a 	sll	r4,r17,r4
   2cec0:	1884d83a 	srl	r2,r3,r2
   2cec4:	5222b03a 	or	r17,r10,r8
   2cec8:	2006c03a 	cmpne	r3,r4,zero
   2cecc:	88e2b03a 	or	r17,r17,r3
   2ced0:	3463c83a 	sub	r17,r6,r17
   2ced4:	2885c83a 	sub	r2,r5,r2
   2ced8:	344d803a 	cmpltu	r6,r6,r17
   2cedc:	1187c83a 	sub	r3,r2,r6
   2cee0:	4821883a 	mov	r16,r9
   2cee4:	3825883a 	mov	r18,r7
   2cee8:	003f2306 	br	2cb78 <_gp+0xffff1cc0>
   2ceec:	24d0b03a 	or	r8,r4,r19
   2cef0:	40001b1e 	bne	r8,zero,2cf60 <__subdf3+0x560>
   2cef4:	0005883a 	mov	r2,zero
   2cef8:	0009883a 	mov	r4,zero
   2cefc:	0021883a 	mov	r16,zero
   2cf00:	003f4906 	br	2cc28 <_gp+0xffff1d70>
   2cf04:	010007c4 	movi	r4,31
   2cf08:	20803a16 	blt	r4,r2,2cff4 <__subdf3+0x5f4>
   2cf0c:	01000804 	movi	r4,32
   2cf10:	2089c83a 	sub	r4,r4,r2
   2cf14:	2912983a 	sll	r9,r5,r4
   2cf18:	3090d83a 	srl	r8,r6,r2
   2cf1c:	3108983a 	sll	r4,r6,r4
   2cf20:	2884d83a 	srl	r2,r5,r2
   2cf24:	4a12b03a 	or	r9,r9,r8
   2cf28:	2008c03a 	cmpne	r4,r4,zero
   2cf2c:	4912b03a 	or	r9,r9,r4
   2cf30:	003f4e06 	br	2cc6c <_gp+0xffff1db4>
   2cf34:	1c48b03a 	or	r4,r3,r17
   2cf38:	20003c26 	beq	r4,zero,2d02c <__subdf3+0x62c>
   2cf3c:	0084303a 	nor	r2,zero,r2
   2cf40:	1000381e 	bne	r2,zero,2d024 <__subdf3+0x624>
   2cf44:	3463c83a 	sub	r17,r6,r17
   2cf48:	28c5c83a 	sub	r2,r5,r3
   2cf4c:	344d803a 	cmpltu	r6,r6,r17
   2cf50:	1187c83a 	sub	r3,r2,r6
   2cf54:	4821883a 	mov	r16,r9
   2cf58:	3825883a 	mov	r18,r7
   2cf5c:	003f0606 	br	2cb78 <_gp+0xffff1cc0>
   2cf60:	2023883a 	mov	r17,r4
   2cf64:	003f0906 	br	2cb8c <_gp+0xffff1cd4>
   2cf68:	0101ffc4 	movi	r4,2047
   2cf6c:	813f3a1e 	bne	r16,r4,2cc58 <_gp+0xffff1da0>
   2cf70:	003ec406 	br	2ca84 <_gp+0xffff1bcc>
   2cf74:	0005883a 	mov	r2,zero
   2cf78:	003fb106 	br	2ce40 <_gp+0xffff1f88>
   2cf7c:	0005883a 	mov	r2,zero
   2cf80:	003fbc06 	br	2ce74 <_gp+0xffff1fbc>
   2cf84:	1c44b03a 	or	r2,r3,r17
   2cf88:	80008e1e 	bne	r16,zero,2d1c4 <__subdf3+0x7c4>
   2cf8c:	1000c826 	beq	r2,zero,2d2b0 <__subdf3+0x8b0>
   2cf90:	2984b03a 	or	r2,r5,r6
   2cf94:	103ebb26 	beq	r2,zero,2ca84 <_gp+0xffff1bcc>
   2cf98:	8989883a 	add	r4,r17,r6
   2cf9c:	1945883a 	add	r2,r3,r5
   2cfa0:	2447803a 	cmpltu	r3,r4,r17
   2cfa4:	1887883a 	add	r3,r3,r2
   2cfa8:	1880202c 	andhi	r2,r3,128
   2cfac:	2023883a 	mov	r17,r4
   2cfb0:	103f1626 	beq	r2,zero,2cc0c <_gp+0xffff1d54>
   2cfb4:	00bfe034 	movhi	r2,65408
   2cfb8:	10bfffc4 	addi	r2,r2,-1
   2cfbc:	5021883a 	mov	r16,r10
   2cfc0:	1886703a 	and	r3,r3,r2
   2cfc4:	003eaf06 	br	2ca84 <_gp+0xffff1bcc>
   2cfc8:	3825883a 	mov	r18,r7
   2cfcc:	003f0f06 	br	2cc0c <_gp+0xffff1d54>
   2cfd0:	1c44b03a 	or	r2,r3,r17
   2cfd4:	8000251e 	bne	r16,zero,2d06c <__subdf3+0x66c>
   2cfd8:	1000661e 	bne	r2,zero,2d174 <__subdf3+0x774>
   2cfdc:	2990b03a 	or	r8,r5,r6
   2cfe0:	40009626 	beq	r8,zero,2d23c <__subdf3+0x83c>
   2cfe4:	2807883a 	mov	r3,r5
   2cfe8:	3023883a 	mov	r17,r6
   2cfec:	3825883a 	mov	r18,r7
   2cff0:	003ea406 	br	2ca84 <_gp+0xffff1bcc>
   2cff4:	127ff804 	addi	r9,r2,-32
   2cff8:	01000804 	movi	r4,32
   2cffc:	2a52d83a 	srl	r9,r5,r9
   2d000:	11008c26 	beq	r2,r4,2d234 <__subdf3+0x834>
   2d004:	01001004 	movi	r4,64
   2d008:	2085c83a 	sub	r2,r4,r2
   2d00c:	2884983a 	sll	r2,r5,r2
   2d010:	118cb03a 	or	r6,r2,r6
   2d014:	300cc03a 	cmpne	r6,r6,zero
   2d018:	4992b03a 	or	r9,r9,r6
   2d01c:	0005883a 	mov	r2,zero
   2d020:	003f1206 	br	2cc6c <_gp+0xffff1db4>
   2d024:	0101ffc4 	movi	r4,2047
   2d028:	493f9c1e 	bne	r9,r4,2ce9c <_gp+0xffff1fe4>
   2d02c:	2807883a 	mov	r3,r5
   2d030:	3023883a 	mov	r17,r6
   2d034:	4821883a 	mov	r16,r9
   2d038:	3825883a 	mov	r18,r7
   2d03c:	003e9106 	br	2ca84 <_gp+0xffff1bcc>
   2d040:	80001f1e 	bne	r16,zero,2d0c0 <__subdf3+0x6c0>
   2d044:	1c48b03a 	or	r4,r3,r17
   2d048:	20005a26 	beq	r4,zero,2d1b4 <__subdf3+0x7b4>
   2d04c:	0084303a 	nor	r2,zero,r2
   2d050:	1000561e 	bne	r2,zero,2d1ac <__subdf3+0x7ac>
   2d054:	89a3883a 	add	r17,r17,r6
   2d058:	1945883a 	add	r2,r3,r5
   2d05c:	898d803a 	cmpltu	r6,r17,r6
   2d060:	3087883a 	add	r3,r6,r2
   2d064:	4821883a 	mov	r16,r9
   2d068:	003f0506 	br	2cc80 <_gp+0xffff1dc8>
   2d06c:	10002b1e 	bne	r2,zero,2d11c <__subdf3+0x71c>
   2d070:	2984b03a 	or	r2,r5,r6
   2d074:	10008026 	beq	r2,zero,2d278 <__subdf3+0x878>
   2d078:	2807883a 	mov	r3,r5
   2d07c:	3023883a 	mov	r17,r6
   2d080:	3825883a 	mov	r18,r7
   2d084:	0401ffc4 	movi	r16,2047
   2d088:	003e7e06 	br	2ca84 <_gp+0xffff1bcc>
   2d08c:	3809883a 	mov	r4,r7
   2d090:	0011883a 	mov	r8,zero
   2d094:	0005883a 	mov	r2,zero
   2d098:	003ee306 	br	2cc28 <_gp+0xffff1d70>
   2d09c:	1c62b03a 	or	r17,r3,r17
   2d0a0:	8822c03a 	cmpne	r17,r17,zero
   2d0a4:	0005883a 	mov	r2,zero
   2d0a8:	003f8906 	br	2ced0 <_gp+0xffff2018>
   2d0ac:	3809883a 	mov	r4,r7
   2d0b0:	4821883a 	mov	r16,r9
   2d0b4:	0011883a 	mov	r8,zero
   2d0b8:	0005883a 	mov	r2,zero
   2d0bc:	003eda06 	br	2cc28 <_gp+0xffff1d70>
   2d0c0:	0101ffc4 	movi	r4,2047
   2d0c4:	49003b26 	beq	r9,r4,2d1b4 <__subdf3+0x7b4>
   2d0c8:	0085c83a 	sub	r2,zero,r2
   2d0cc:	18c02034 	orhi	r3,r3,128
   2d0d0:	01000e04 	movi	r4,56
   2d0d4:	20806e16 	blt	r4,r2,2d290 <__subdf3+0x890>
   2d0d8:	010007c4 	movi	r4,31
   2d0dc:	20807716 	blt	r4,r2,2d2bc <__subdf3+0x8bc>
   2d0e0:	01000804 	movi	r4,32
   2d0e4:	2089c83a 	sub	r4,r4,r2
   2d0e8:	1914983a 	sll	r10,r3,r4
   2d0ec:	8890d83a 	srl	r8,r17,r2
   2d0f0:	8908983a 	sll	r4,r17,r4
   2d0f4:	1884d83a 	srl	r2,r3,r2
   2d0f8:	5222b03a 	or	r17,r10,r8
   2d0fc:	2006c03a 	cmpne	r3,r4,zero
   2d100:	88e2b03a 	or	r17,r17,r3
   2d104:	89a3883a 	add	r17,r17,r6
   2d108:	1145883a 	add	r2,r2,r5
   2d10c:	898d803a 	cmpltu	r6,r17,r6
   2d110:	3087883a 	add	r3,r6,r2
   2d114:	4821883a 	mov	r16,r9
   2d118:	003ed906 	br	2cc80 <_gp+0xffff1dc8>
   2d11c:	2984b03a 	or	r2,r5,r6
   2d120:	10004226 	beq	r2,zero,2d22c <__subdf3+0x82c>
   2d124:	1808d0fa 	srli	r4,r3,3
   2d128:	8822d0fa 	srli	r17,r17,3
   2d12c:	1806977a 	slli	r3,r3,29
   2d130:	2080022c 	andhi	r2,r4,8
   2d134:	1c62b03a 	or	r17,r3,r17
   2d138:	10000826 	beq	r2,zero,2d15c <__subdf3+0x75c>
   2d13c:	2812d0fa 	srli	r9,r5,3
   2d140:	4880022c 	andhi	r2,r9,8
   2d144:	1000051e 	bne	r2,zero,2d15c <__subdf3+0x75c>
   2d148:	300cd0fa 	srli	r6,r6,3
   2d14c:	2804977a 	slli	r2,r5,29
   2d150:	4809883a 	mov	r4,r9
   2d154:	3825883a 	mov	r18,r7
   2d158:	11a2b03a 	or	r17,r2,r6
   2d15c:	8806d77a 	srli	r3,r17,29
   2d160:	200890fa 	slli	r4,r4,3
   2d164:	882290fa 	slli	r17,r17,3
   2d168:	0401ffc4 	movi	r16,2047
   2d16c:	1906b03a 	or	r3,r3,r4
   2d170:	003e4406 	br	2ca84 <_gp+0xffff1bcc>
   2d174:	2984b03a 	or	r2,r5,r6
   2d178:	103e4226 	beq	r2,zero,2ca84 <_gp+0xffff1bcc>
   2d17c:	8989c83a 	sub	r4,r17,r6
   2d180:	8911803a 	cmpltu	r8,r17,r4
   2d184:	1945c83a 	sub	r2,r3,r5
   2d188:	1205c83a 	sub	r2,r2,r8
   2d18c:	1200202c 	andhi	r8,r2,128
   2d190:	403e9a26 	beq	r8,zero,2cbfc <_gp+0xffff1d44>
   2d194:	3463c83a 	sub	r17,r6,r17
   2d198:	28c5c83a 	sub	r2,r5,r3
   2d19c:	344d803a 	cmpltu	r6,r6,r17
   2d1a0:	1187c83a 	sub	r3,r2,r6
   2d1a4:	3825883a 	mov	r18,r7
   2d1a8:	003e3606 	br	2ca84 <_gp+0xffff1bcc>
   2d1ac:	0101ffc4 	movi	r4,2047
   2d1b0:	493fc71e 	bne	r9,r4,2d0d0 <_gp+0xffff2218>
   2d1b4:	2807883a 	mov	r3,r5
   2d1b8:	3023883a 	mov	r17,r6
   2d1bc:	4821883a 	mov	r16,r9
   2d1c0:	003e3006 	br	2ca84 <_gp+0xffff1bcc>
   2d1c4:	10003626 	beq	r2,zero,2d2a0 <__subdf3+0x8a0>
   2d1c8:	2984b03a 	or	r2,r5,r6
   2d1cc:	10001726 	beq	r2,zero,2d22c <__subdf3+0x82c>
   2d1d0:	1808d0fa 	srli	r4,r3,3
   2d1d4:	8822d0fa 	srli	r17,r17,3
   2d1d8:	1806977a 	slli	r3,r3,29
   2d1dc:	2080022c 	andhi	r2,r4,8
   2d1e0:	1c62b03a 	or	r17,r3,r17
   2d1e4:	10000726 	beq	r2,zero,2d204 <__subdf3+0x804>
   2d1e8:	2812d0fa 	srli	r9,r5,3
   2d1ec:	4880022c 	andhi	r2,r9,8
   2d1f0:	1000041e 	bne	r2,zero,2d204 <__subdf3+0x804>
   2d1f4:	300cd0fa 	srli	r6,r6,3
   2d1f8:	2804977a 	slli	r2,r5,29
   2d1fc:	4809883a 	mov	r4,r9
   2d200:	11a2b03a 	or	r17,r2,r6
   2d204:	8806d77a 	srli	r3,r17,29
   2d208:	200890fa 	slli	r4,r4,3
   2d20c:	882290fa 	slli	r17,r17,3
   2d210:	3825883a 	mov	r18,r7
   2d214:	1906b03a 	or	r3,r3,r4
   2d218:	0401ffc4 	movi	r16,2047
   2d21c:	003e1906 	br	2ca84 <_gp+0xffff1bcc>
   2d220:	000b883a 	mov	r5,zero
   2d224:	0005883a 	mov	r2,zero
   2d228:	003e2e06 	br	2cae4 <_gp+0xffff1c2c>
   2d22c:	0401ffc4 	movi	r16,2047
   2d230:	003e1406 	br	2ca84 <_gp+0xffff1bcc>
   2d234:	0005883a 	mov	r2,zero
   2d238:	003f7506 	br	2d010 <_gp+0xffff2158>
   2d23c:	0005883a 	mov	r2,zero
   2d240:	0009883a 	mov	r4,zero
   2d244:	003e7806 	br	2cc28 <_gp+0xffff1d70>
   2d248:	123ff804 	addi	r8,r2,-32
   2d24c:	01000804 	movi	r4,32
   2d250:	1a10d83a 	srl	r8,r3,r8
   2d254:	11002526 	beq	r2,r4,2d2ec <__subdf3+0x8ec>
   2d258:	01001004 	movi	r4,64
   2d25c:	2085c83a 	sub	r2,r4,r2
   2d260:	1884983a 	sll	r2,r3,r2
   2d264:	1444b03a 	or	r2,r2,r17
   2d268:	1004c03a 	cmpne	r2,r2,zero
   2d26c:	40a2b03a 	or	r17,r8,r2
   2d270:	0005883a 	mov	r2,zero
   2d274:	003f1606 	br	2ced0 <_gp+0xffff2018>
   2d278:	02000434 	movhi	r8,16
   2d27c:	0009883a 	mov	r4,zero
   2d280:	423fffc4 	addi	r8,r8,-1
   2d284:	00bfffc4 	movi	r2,-1
   2d288:	0401ffc4 	movi	r16,2047
   2d28c:	003e6606 	br	2cc28 <_gp+0xffff1d70>
   2d290:	1c62b03a 	or	r17,r3,r17
   2d294:	8822c03a 	cmpne	r17,r17,zero
   2d298:	0005883a 	mov	r2,zero
   2d29c:	003f9906 	br	2d104 <_gp+0xffff224c>
   2d2a0:	2807883a 	mov	r3,r5
   2d2a4:	3023883a 	mov	r17,r6
   2d2a8:	0401ffc4 	movi	r16,2047
   2d2ac:	003df506 	br	2ca84 <_gp+0xffff1bcc>
   2d2b0:	2807883a 	mov	r3,r5
   2d2b4:	3023883a 	mov	r17,r6
   2d2b8:	003df206 	br	2ca84 <_gp+0xffff1bcc>
   2d2bc:	123ff804 	addi	r8,r2,-32
   2d2c0:	01000804 	movi	r4,32
   2d2c4:	1a10d83a 	srl	r8,r3,r8
   2d2c8:	11000a26 	beq	r2,r4,2d2f4 <__subdf3+0x8f4>
   2d2cc:	01001004 	movi	r4,64
   2d2d0:	2085c83a 	sub	r2,r4,r2
   2d2d4:	1884983a 	sll	r2,r3,r2
   2d2d8:	1444b03a 	or	r2,r2,r17
   2d2dc:	1004c03a 	cmpne	r2,r2,zero
   2d2e0:	40a2b03a 	or	r17,r8,r2
   2d2e4:	0005883a 	mov	r2,zero
   2d2e8:	003f8606 	br	2d104 <_gp+0xffff224c>
   2d2ec:	0005883a 	mov	r2,zero
   2d2f0:	003fdc06 	br	2d264 <_gp+0xffff23ac>
   2d2f4:	0005883a 	mov	r2,zero
   2d2f8:	003ff706 	br	2d2d8 <_gp+0xffff2420>

0002d2fc <__fixdfsi>:
   2d2fc:	280cd53a 	srli	r6,r5,20
   2d300:	00c00434 	movhi	r3,16
   2d304:	18ffffc4 	addi	r3,r3,-1
   2d308:	3181ffcc 	andi	r6,r6,2047
   2d30c:	01c0ff84 	movi	r7,1022
   2d310:	28c6703a 	and	r3,r5,r3
   2d314:	280ad7fa 	srli	r5,r5,31
   2d318:	3980120e 	bge	r7,r6,2d364 <__fixdfsi+0x68>
   2d31c:	00810744 	movi	r2,1053
   2d320:	11800c16 	blt	r2,r6,2d354 <__fixdfsi+0x58>
   2d324:	00810cc4 	movi	r2,1075
   2d328:	1185c83a 	sub	r2,r2,r6
   2d32c:	01c007c4 	movi	r7,31
   2d330:	18c00434 	orhi	r3,r3,16
   2d334:	38800d16 	blt	r7,r2,2d36c <__fixdfsi+0x70>
   2d338:	31befb44 	addi	r6,r6,-1043
   2d33c:	2084d83a 	srl	r2,r4,r2
   2d340:	1986983a 	sll	r3,r3,r6
   2d344:	1884b03a 	or	r2,r3,r2
   2d348:	28000726 	beq	r5,zero,2d368 <__fixdfsi+0x6c>
   2d34c:	0085c83a 	sub	r2,zero,r2
   2d350:	f800283a 	ret
   2d354:	00a00034 	movhi	r2,32768
   2d358:	10bfffc4 	addi	r2,r2,-1
   2d35c:	2885883a 	add	r2,r5,r2
   2d360:	f800283a 	ret
   2d364:	0005883a 	mov	r2,zero
   2d368:	f800283a 	ret
   2d36c:	008104c4 	movi	r2,1043
   2d370:	1185c83a 	sub	r2,r2,r6
   2d374:	1884d83a 	srl	r2,r3,r2
   2d378:	003ff306 	br	2d348 <_gp+0xffff2490>

0002d37c <__floatsidf>:
   2d37c:	defffd04 	addi	sp,sp,-12
   2d380:	dfc00215 	stw	ra,8(sp)
   2d384:	dc400115 	stw	r17,4(sp)
   2d388:	dc000015 	stw	r16,0(sp)
   2d38c:	20002b26 	beq	r4,zero,2d43c <__floatsidf+0xc0>
   2d390:	2023883a 	mov	r17,r4
   2d394:	2020d7fa 	srli	r16,r4,31
   2d398:	20002d16 	blt	r4,zero,2d450 <__floatsidf+0xd4>
   2d39c:	8809883a 	mov	r4,r17
   2d3a0:	002d5000 	call	2d500 <__clzsi2>
   2d3a4:	01410784 	movi	r5,1054
   2d3a8:	288bc83a 	sub	r5,r5,r2
   2d3ac:	01010cc4 	movi	r4,1075
   2d3b0:	2149c83a 	sub	r4,r4,r5
   2d3b4:	00c007c4 	movi	r3,31
   2d3b8:	1900160e 	bge	r3,r4,2d414 <__floatsidf+0x98>
   2d3bc:	00c104c4 	movi	r3,1043
   2d3c0:	1947c83a 	sub	r3,r3,r5
   2d3c4:	88c6983a 	sll	r3,r17,r3
   2d3c8:	00800434 	movhi	r2,16
   2d3cc:	10bfffc4 	addi	r2,r2,-1
   2d3d0:	1886703a 	and	r3,r3,r2
   2d3d4:	2941ffcc 	andi	r5,r5,2047
   2d3d8:	800d883a 	mov	r6,r16
   2d3dc:	0005883a 	mov	r2,zero
   2d3e0:	280a953a 	slli	r5,r5,20
   2d3e4:	31803fcc 	andi	r6,r6,255
   2d3e8:	01000434 	movhi	r4,16
   2d3ec:	300c97fa 	slli	r6,r6,31
   2d3f0:	213fffc4 	addi	r4,r4,-1
   2d3f4:	1906703a 	and	r3,r3,r4
   2d3f8:	1946b03a 	or	r3,r3,r5
   2d3fc:	1986b03a 	or	r3,r3,r6
   2d400:	dfc00217 	ldw	ra,8(sp)
   2d404:	dc400117 	ldw	r17,4(sp)
   2d408:	dc000017 	ldw	r16,0(sp)
   2d40c:	dec00304 	addi	sp,sp,12
   2d410:	f800283a 	ret
   2d414:	00c002c4 	movi	r3,11
   2d418:	1887c83a 	sub	r3,r3,r2
   2d41c:	88c6d83a 	srl	r3,r17,r3
   2d420:	8904983a 	sll	r2,r17,r4
   2d424:	01000434 	movhi	r4,16
   2d428:	213fffc4 	addi	r4,r4,-1
   2d42c:	2941ffcc 	andi	r5,r5,2047
   2d430:	1906703a 	and	r3,r3,r4
   2d434:	800d883a 	mov	r6,r16
   2d438:	003fe906 	br	2d3e0 <_gp+0xffff2528>
   2d43c:	000d883a 	mov	r6,zero
   2d440:	000b883a 	mov	r5,zero
   2d444:	0007883a 	mov	r3,zero
   2d448:	0005883a 	mov	r2,zero
   2d44c:	003fe406 	br	2d3e0 <_gp+0xffff2528>
   2d450:	0123c83a 	sub	r17,zero,r4
   2d454:	003fd106 	br	2d39c <_gp+0xffff24e4>

0002d458 <__floatunsidf>:
   2d458:	defffe04 	addi	sp,sp,-8
   2d45c:	dc000015 	stw	r16,0(sp)
   2d460:	dfc00115 	stw	ra,4(sp)
   2d464:	2021883a 	mov	r16,r4
   2d468:	20002226 	beq	r4,zero,2d4f4 <__floatunsidf+0x9c>
   2d46c:	002d5000 	call	2d500 <__clzsi2>
   2d470:	01010784 	movi	r4,1054
   2d474:	2089c83a 	sub	r4,r4,r2
   2d478:	01810cc4 	movi	r6,1075
   2d47c:	310dc83a 	sub	r6,r6,r4
   2d480:	00c007c4 	movi	r3,31
   2d484:	1980120e 	bge	r3,r6,2d4d0 <__floatunsidf+0x78>
   2d488:	00c104c4 	movi	r3,1043
   2d48c:	1907c83a 	sub	r3,r3,r4
   2d490:	80ca983a 	sll	r5,r16,r3
   2d494:	00800434 	movhi	r2,16
   2d498:	10bfffc4 	addi	r2,r2,-1
   2d49c:	2101ffcc 	andi	r4,r4,2047
   2d4a0:	0021883a 	mov	r16,zero
   2d4a4:	288a703a 	and	r5,r5,r2
   2d4a8:	2008953a 	slli	r4,r4,20
   2d4ac:	00c00434 	movhi	r3,16
   2d4b0:	18ffffc4 	addi	r3,r3,-1
   2d4b4:	28c6703a 	and	r3,r5,r3
   2d4b8:	8005883a 	mov	r2,r16
   2d4bc:	1906b03a 	or	r3,r3,r4
   2d4c0:	dfc00117 	ldw	ra,4(sp)
   2d4c4:	dc000017 	ldw	r16,0(sp)
   2d4c8:	dec00204 	addi	sp,sp,8
   2d4cc:	f800283a 	ret
   2d4d0:	00c002c4 	movi	r3,11
   2d4d4:	188bc83a 	sub	r5,r3,r2
   2d4d8:	814ad83a 	srl	r5,r16,r5
   2d4dc:	00c00434 	movhi	r3,16
   2d4e0:	18ffffc4 	addi	r3,r3,-1
   2d4e4:	81a0983a 	sll	r16,r16,r6
   2d4e8:	2101ffcc 	andi	r4,r4,2047
   2d4ec:	28ca703a 	and	r5,r5,r3
   2d4f0:	003fed06 	br	2d4a8 <_gp+0xffff25f0>
   2d4f4:	0009883a 	mov	r4,zero
   2d4f8:	000b883a 	mov	r5,zero
   2d4fc:	003fea06 	br	2d4a8 <_gp+0xffff25f0>

0002d500 <__clzsi2>:
   2d500:	00bfffd4 	movui	r2,65535
   2d504:	11000536 	bltu	r2,r4,2d51c <__clzsi2+0x1c>
   2d508:	00803fc4 	movi	r2,255
   2d50c:	11000f36 	bltu	r2,r4,2d54c <__clzsi2+0x4c>
   2d510:	00800804 	movi	r2,32
   2d514:	0007883a 	mov	r3,zero
   2d518:	00000506 	br	2d530 <__clzsi2+0x30>
   2d51c:	00804034 	movhi	r2,256
   2d520:	10bfffc4 	addi	r2,r2,-1
   2d524:	11000c2e 	bgeu	r2,r4,2d558 <__clzsi2+0x58>
   2d528:	00800204 	movi	r2,8
   2d52c:	00c00604 	movi	r3,24
   2d530:	20c8d83a 	srl	r4,r4,r3
   2d534:	00c000f4 	movhi	r3,3
   2d538:	18c3cd04 	addi	r3,r3,3892
   2d53c:	1909883a 	add	r4,r3,r4
   2d540:	20c00003 	ldbu	r3,0(r4)
   2d544:	10c5c83a 	sub	r2,r2,r3
   2d548:	f800283a 	ret
   2d54c:	00800604 	movi	r2,24
   2d550:	00c00204 	movi	r3,8
   2d554:	003ff606 	br	2d530 <_gp+0xffff2678>
   2d558:	00800404 	movi	r2,16
   2d55c:	1007883a 	mov	r3,r2
   2d560:	003ff306 	br	2d530 <_gp+0xffff2678>

0002d564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d564:	defffe04 	addi	sp,sp,-8
   2d568:	dfc00115 	stw	ra,4(sp)
   2d56c:	df000015 	stw	fp,0(sp)
   2d570:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d574:	d0a00b17 	ldw	r2,-32724(gp)
   2d578:	10000326 	beq	r2,zero,2d588 <alt_get_errno+0x24>
   2d57c:	d0a00b17 	ldw	r2,-32724(gp)
   2d580:	103ee83a 	callr	r2
   2d584:	00000106 	br	2d58c <alt_get_errno+0x28>
   2d588:	d0a71d04 	addi	r2,gp,-25484
}
   2d58c:	e037883a 	mov	sp,fp
   2d590:	dfc00117 	ldw	ra,4(sp)
   2d594:	df000017 	ldw	fp,0(sp)
   2d598:	dec00204 	addi	sp,sp,8
   2d59c:	f800283a 	ret

0002d5a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2d5a0:	defffb04 	addi	sp,sp,-20
   2d5a4:	dfc00415 	stw	ra,16(sp)
   2d5a8:	df000315 	stw	fp,12(sp)
   2d5ac:	df000304 	addi	fp,sp,12
   2d5b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2d5b4:	e0bfff17 	ldw	r2,-4(fp)
   2d5b8:	10000816 	blt	r2,zero,2d5dc <close+0x3c>
   2d5bc:	01400304 	movi	r5,12
   2d5c0:	e13fff17 	ldw	r4,-4(fp)
   2d5c4:	00206240 	call	20624 <__mulsi3>
   2d5c8:	1007883a 	mov	r3,r2
   2d5cc:	008000f4 	movhi	r2,3
   2d5d0:	1086ee04 	addi	r2,r2,7096
   2d5d4:	1885883a 	add	r2,r3,r2
   2d5d8:	00000106 	br	2d5e0 <close+0x40>
   2d5dc:	0005883a 	mov	r2,zero
   2d5e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2d5e4:	e0bffd17 	ldw	r2,-12(fp)
   2d5e8:	10001926 	beq	r2,zero,2d650 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2d5ec:	e0bffd17 	ldw	r2,-12(fp)
   2d5f0:	10800017 	ldw	r2,0(r2)
   2d5f4:	10800417 	ldw	r2,16(r2)
   2d5f8:	10000626 	beq	r2,zero,2d614 <close+0x74>
   2d5fc:	e0bffd17 	ldw	r2,-12(fp)
   2d600:	10800017 	ldw	r2,0(r2)
   2d604:	10800417 	ldw	r2,16(r2)
   2d608:	e13ffd17 	ldw	r4,-12(fp)
   2d60c:	103ee83a 	callr	r2
   2d610:	00000106 	br	2d618 <close+0x78>
   2d614:	0005883a 	mov	r2,zero
   2d618:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2d61c:	e13fff17 	ldw	r4,-4(fp)
   2d620:	002dc880 	call	2dc88 <alt_release_fd>
    if (rval < 0)
   2d624:	e0bffe17 	ldw	r2,-8(fp)
   2d628:	1000070e 	bge	r2,zero,2d648 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   2d62c:	002d5640 	call	2d564 <alt_get_errno>
   2d630:	1007883a 	mov	r3,r2
   2d634:	e0bffe17 	ldw	r2,-8(fp)
   2d638:	0085c83a 	sub	r2,zero,r2
   2d63c:	18800015 	stw	r2,0(r3)
      return -1;
   2d640:	00bfffc4 	movi	r2,-1
   2d644:	00000706 	br	2d664 <close+0xc4>
    }
    return 0;
   2d648:	0005883a 	mov	r2,zero
   2d64c:	00000506 	br	2d664 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d650:	002d5640 	call	2d564 <alt_get_errno>
   2d654:	1007883a 	mov	r3,r2
   2d658:	00801444 	movi	r2,81
   2d65c:	18800015 	stw	r2,0(r3)
    return -1;
   2d660:	00bfffc4 	movi	r2,-1
  }
}
   2d664:	e037883a 	mov	sp,fp
   2d668:	dfc00117 	ldw	ra,4(sp)
   2d66c:	df000017 	ldw	fp,0(sp)
   2d670:	dec00204 	addi	sp,sp,8
   2d674:	f800283a 	ret

0002d678 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2d678:	defffc04 	addi	sp,sp,-16
   2d67c:	df000315 	stw	fp,12(sp)
   2d680:	df000304 	addi	fp,sp,12
   2d684:	e13ffd15 	stw	r4,-12(fp)
   2d688:	e17ffe15 	stw	r5,-8(fp)
   2d68c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2d690:	e0bfff17 	ldw	r2,-4(fp)
}
   2d694:	e037883a 	mov	sp,fp
   2d698:	df000017 	ldw	fp,0(sp)
   2d69c:	dec00104 	addi	sp,sp,4
   2d6a0:	f800283a 	ret

0002d6a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d6a4:	defffe04 	addi	sp,sp,-8
   2d6a8:	dfc00115 	stw	ra,4(sp)
   2d6ac:	df000015 	stw	fp,0(sp)
   2d6b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d6b4:	d0a00b17 	ldw	r2,-32724(gp)
   2d6b8:	10000326 	beq	r2,zero,2d6c8 <alt_get_errno+0x24>
   2d6bc:	d0a00b17 	ldw	r2,-32724(gp)
   2d6c0:	103ee83a 	callr	r2
   2d6c4:	00000106 	br	2d6cc <alt_get_errno+0x28>
   2d6c8:	d0a71d04 	addi	r2,gp,-25484
}
   2d6cc:	e037883a 	mov	sp,fp
   2d6d0:	dfc00117 	ldw	ra,4(sp)
   2d6d4:	df000017 	ldw	fp,0(sp)
   2d6d8:	dec00204 	addi	sp,sp,8
   2d6dc:	f800283a 	ret

0002d6e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2d6e0:	defffb04 	addi	sp,sp,-20
   2d6e4:	dfc00415 	stw	ra,16(sp)
   2d6e8:	df000315 	stw	fp,12(sp)
   2d6ec:	df000304 	addi	fp,sp,12
   2d6f0:	e13ffe15 	stw	r4,-8(fp)
   2d6f4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d6f8:	e0bffe17 	ldw	r2,-8(fp)
   2d6fc:	10000816 	blt	r2,zero,2d720 <fstat+0x40>
   2d700:	01400304 	movi	r5,12
   2d704:	e13ffe17 	ldw	r4,-8(fp)
   2d708:	00206240 	call	20624 <__mulsi3>
   2d70c:	1007883a 	mov	r3,r2
   2d710:	008000f4 	movhi	r2,3
   2d714:	1086ee04 	addi	r2,r2,7096
   2d718:	1885883a 	add	r2,r3,r2
   2d71c:	00000106 	br	2d724 <fstat+0x44>
   2d720:	0005883a 	mov	r2,zero
   2d724:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2d728:	e0bffd17 	ldw	r2,-12(fp)
   2d72c:	10001026 	beq	r2,zero,2d770 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2d730:	e0bffd17 	ldw	r2,-12(fp)
   2d734:	10800017 	ldw	r2,0(r2)
   2d738:	10800817 	ldw	r2,32(r2)
   2d73c:	10000726 	beq	r2,zero,2d75c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   2d740:	e0bffd17 	ldw	r2,-12(fp)
   2d744:	10800017 	ldw	r2,0(r2)
   2d748:	10800817 	ldw	r2,32(r2)
   2d74c:	e17fff17 	ldw	r5,-4(fp)
   2d750:	e13ffd17 	ldw	r4,-12(fp)
   2d754:	103ee83a 	callr	r2
   2d758:	00000a06 	br	2d784 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2d75c:	e0bfff17 	ldw	r2,-4(fp)
   2d760:	00c80004 	movi	r3,8192
   2d764:	10c00115 	stw	r3,4(r2)
      return 0;
   2d768:	0005883a 	mov	r2,zero
   2d76c:	00000506 	br	2d784 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d770:	002d6a40 	call	2d6a4 <alt_get_errno>
   2d774:	1007883a 	mov	r3,r2
   2d778:	00801444 	movi	r2,81
   2d77c:	18800015 	stw	r2,0(r3)
    return -1;
   2d780:	00bfffc4 	movi	r2,-1
  }
}
   2d784:	e037883a 	mov	sp,fp
   2d788:	dfc00117 	ldw	ra,4(sp)
   2d78c:	df000017 	ldw	fp,0(sp)
   2d790:	dec00204 	addi	sp,sp,8
   2d794:	f800283a 	ret

0002d798 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d798:	defffe04 	addi	sp,sp,-8
   2d79c:	dfc00115 	stw	ra,4(sp)
   2d7a0:	df000015 	stw	fp,0(sp)
   2d7a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d7a8:	d0a00b17 	ldw	r2,-32724(gp)
   2d7ac:	10000326 	beq	r2,zero,2d7bc <alt_get_errno+0x24>
   2d7b0:	d0a00b17 	ldw	r2,-32724(gp)
   2d7b4:	103ee83a 	callr	r2
   2d7b8:	00000106 	br	2d7c0 <alt_get_errno+0x28>
   2d7bc:	d0a71d04 	addi	r2,gp,-25484
}
   2d7c0:	e037883a 	mov	sp,fp
   2d7c4:	dfc00117 	ldw	ra,4(sp)
   2d7c8:	df000017 	ldw	fp,0(sp)
   2d7cc:	dec00204 	addi	sp,sp,8
   2d7d0:	f800283a 	ret

0002d7d4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2d7d4:	deffed04 	addi	sp,sp,-76
   2d7d8:	dfc01215 	stw	ra,72(sp)
   2d7dc:	df001115 	stw	fp,68(sp)
   2d7e0:	df001104 	addi	fp,sp,68
   2d7e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d7e8:	e0bfff17 	ldw	r2,-4(fp)
   2d7ec:	10000816 	blt	r2,zero,2d810 <isatty+0x3c>
   2d7f0:	01400304 	movi	r5,12
   2d7f4:	e13fff17 	ldw	r4,-4(fp)
   2d7f8:	00206240 	call	20624 <__mulsi3>
   2d7fc:	1007883a 	mov	r3,r2
   2d800:	008000f4 	movhi	r2,3
   2d804:	1086ee04 	addi	r2,r2,7096
   2d808:	1885883a 	add	r2,r3,r2
   2d80c:	00000106 	br	2d814 <isatty+0x40>
   2d810:	0005883a 	mov	r2,zero
   2d814:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2d818:	e0bfef17 	ldw	r2,-68(fp)
   2d81c:	10000e26 	beq	r2,zero,2d858 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2d820:	e0bfef17 	ldw	r2,-68(fp)
   2d824:	10800017 	ldw	r2,0(r2)
   2d828:	10800817 	ldw	r2,32(r2)
   2d82c:	1000021e 	bne	r2,zero,2d838 <isatty+0x64>
    {
      return 1;
   2d830:	00800044 	movi	r2,1
   2d834:	00000d06 	br	2d86c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2d838:	e0bff004 	addi	r2,fp,-64
   2d83c:	100b883a 	mov	r5,r2
   2d840:	e13fff17 	ldw	r4,-4(fp)
   2d844:	002d6e00 	call	2d6e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2d848:	e0bff117 	ldw	r2,-60(fp)
   2d84c:	10880020 	cmpeqi	r2,r2,8192
   2d850:	10803fcc 	andi	r2,r2,255
   2d854:	00000506 	br	2d86c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d858:	002d7980 	call	2d798 <alt_get_errno>
   2d85c:	1007883a 	mov	r3,r2
   2d860:	00801444 	movi	r2,81
   2d864:	18800015 	stw	r2,0(r3)
    return 0;
   2d868:	0005883a 	mov	r2,zero
  }
}
   2d86c:	e037883a 	mov	sp,fp
   2d870:	dfc00117 	ldw	ra,4(sp)
   2d874:	df000017 	ldw	fp,0(sp)
   2d878:	dec00204 	addi	sp,sp,8
   2d87c:	f800283a 	ret

0002d880 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2d880:	defffc04 	addi	sp,sp,-16
   2d884:	df000315 	stw	fp,12(sp)
   2d888:	df000304 	addi	fp,sp,12
   2d88c:	e13ffd15 	stw	r4,-12(fp)
   2d890:	e17ffe15 	stw	r5,-8(fp)
   2d894:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2d898:	e0fffe17 	ldw	r3,-8(fp)
   2d89c:	e0bffd17 	ldw	r2,-12(fp)
   2d8a0:	18800c26 	beq	r3,r2,2d8d4 <alt_load_section+0x54>
  {
    while( to != end )
   2d8a4:	00000806 	br	2d8c8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   2d8a8:	e0bffe17 	ldw	r2,-8(fp)
   2d8ac:	10c00104 	addi	r3,r2,4
   2d8b0:	e0fffe15 	stw	r3,-8(fp)
   2d8b4:	e0fffd17 	ldw	r3,-12(fp)
   2d8b8:	19000104 	addi	r4,r3,4
   2d8bc:	e13ffd15 	stw	r4,-12(fp)
   2d8c0:	18c00017 	ldw	r3,0(r3)
   2d8c4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2d8c8:	e0fffe17 	ldw	r3,-8(fp)
   2d8cc:	e0bfff17 	ldw	r2,-4(fp)
   2d8d0:	18bff51e 	bne	r3,r2,2d8a8 <_gp+0xffff29f0>
    {
      *to++ = *from++;
    }
  }
}
   2d8d4:	0001883a 	nop
   2d8d8:	e037883a 	mov	sp,fp
   2d8dc:	df000017 	ldw	fp,0(sp)
   2d8e0:	dec00104 	addi	sp,sp,4
   2d8e4:	f800283a 	ret

0002d8e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2d8e8:	defffe04 	addi	sp,sp,-8
   2d8ec:	dfc00115 	stw	ra,4(sp)
   2d8f0:	df000015 	stw	fp,0(sp)
   2d8f4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2d8f8:	018000f4 	movhi	r6,3
   2d8fc:	318bc004 	addi	r6,r6,12032
   2d900:	014000f4 	movhi	r5,3
   2d904:	2944bb04 	addi	r5,r5,4844
   2d908:	010000f4 	movhi	r4,3
   2d90c:	210bc004 	addi	r4,r4,12032
   2d910:	002d8800 	call	2d880 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2d914:	018000b4 	movhi	r6,2
   2d918:	31808c04 	addi	r6,r6,560
   2d91c:	014000b4 	movhi	r5,2
   2d920:	29400804 	addi	r5,r5,32
   2d924:	010000b4 	movhi	r4,2
   2d928:	21000804 	addi	r4,r4,32
   2d92c:	002d8800 	call	2d880 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2d930:	018000f4 	movhi	r6,3
   2d934:	3184bb04 	addi	r6,r6,4844
   2d938:	014000f4 	movhi	r5,3
   2d93c:	29435204 	addi	r5,r5,3400
   2d940:	010000f4 	movhi	r4,3
   2d944:	21035204 	addi	r4,r4,3400
   2d948:	002d8800 	call	2d880 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2d94c:	002fc900 	call	2fc90 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2d950:	002fe500 	call	2fe50 <alt_icache_flush_all>
}
   2d954:	0001883a 	nop
   2d958:	e037883a 	mov	sp,fp
   2d95c:	dfc00117 	ldw	ra,4(sp)
   2d960:	df000017 	ldw	fp,0(sp)
   2d964:	dec00204 	addi	sp,sp,8
   2d968:	f800283a 	ret

0002d96c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d96c:	defffe04 	addi	sp,sp,-8
   2d970:	dfc00115 	stw	ra,4(sp)
   2d974:	df000015 	stw	fp,0(sp)
   2d978:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d97c:	d0a00b17 	ldw	r2,-32724(gp)
   2d980:	10000326 	beq	r2,zero,2d990 <alt_get_errno+0x24>
   2d984:	d0a00b17 	ldw	r2,-32724(gp)
   2d988:	103ee83a 	callr	r2
   2d98c:	00000106 	br	2d994 <alt_get_errno+0x28>
   2d990:	d0a71d04 	addi	r2,gp,-25484
}
   2d994:	e037883a 	mov	sp,fp
   2d998:	dfc00117 	ldw	ra,4(sp)
   2d99c:	df000017 	ldw	fp,0(sp)
   2d9a0:	dec00204 	addi	sp,sp,8
   2d9a4:	f800283a 	ret

0002d9a8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2d9a8:	defff904 	addi	sp,sp,-28
   2d9ac:	dfc00615 	stw	ra,24(sp)
   2d9b0:	df000515 	stw	fp,20(sp)
   2d9b4:	df000504 	addi	fp,sp,20
   2d9b8:	e13ffd15 	stw	r4,-12(fp)
   2d9bc:	e17ffe15 	stw	r5,-8(fp)
   2d9c0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2d9c4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d9c8:	e0bffd17 	ldw	r2,-12(fp)
   2d9cc:	10000816 	blt	r2,zero,2d9f0 <lseek+0x48>
   2d9d0:	01400304 	movi	r5,12
   2d9d4:	e13ffd17 	ldw	r4,-12(fp)
   2d9d8:	00206240 	call	20624 <__mulsi3>
   2d9dc:	1007883a 	mov	r3,r2
   2d9e0:	008000f4 	movhi	r2,3
   2d9e4:	1086ee04 	addi	r2,r2,7096
   2d9e8:	1885883a 	add	r2,r3,r2
   2d9ec:	00000106 	br	2d9f4 <lseek+0x4c>
   2d9f0:	0005883a 	mov	r2,zero
   2d9f4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2d9f8:	e0bffc17 	ldw	r2,-16(fp)
   2d9fc:	10001026 	beq	r2,zero,2da40 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2da00:	e0bffc17 	ldw	r2,-16(fp)
   2da04:	10800017 	ldw	r2,0(r2)
   2da08:	10800717 	ldw	r2,28(r2)
   2da0c:	10000926 	beq	r2,zero,2da34 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2da10:	e0bffc17 	ldw	r2,-16(fp)
   2da14:	10800017 	ldw	r2,0(r2)
   2da18:	10800717 	ldw	r2,28(r2)
   2da1c:	e1bfff17 	ldw	r6,-4(fp)
   2da20:	e17ffe17 	ldw	r5,-8(fp)
   2da24:	e13ffc17 	ldw	r4,-16(fp)
   2da28:	103ee83a 	callr	r2
   2da2c:	e0bffb15 	stw	r2,-20(fp)
   2da30:	00000506 	br	2da48 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2da34:	00bfde84 	movi	r2,-134
   2da38:	e0bffb15 	stw	r2,-20(fp)
   2da3c:	00000206 	br	2da48 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   2da40:	00bfebc4 	movi	r2,-81
   2da44:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2da48:	e0bffb17 	ldw	r2,-20(fp)
   2da4c:	1000070e 	bge	r2,zero,2da6c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   2da50:	002d96c0 	call	2d96c <alt_get_errno>
   2da54:	1007883a 	mov	r3,r2
   2da58:	e0bffb17 	ldw	r2,-20(fp)
   2da5c:	0085c83a 	sub	r2,zero,r2
   2da60:	18800015 	stw	r2,0(r3)
    rc = -1;
   2da64:	00bfffc4 	movi	r2,-1
   2da68:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2da6c:	e0bffb17 	ldw	r2,-20(fp)
}
   2da70:	e037883a 	mov	sp,fp
   2da74:	dfc00117 	ldw	ra,4(sp)
   2da78:	df000017 	ldw	fp,0(sp)
   2da7c:	dec00204 	addi	sp,sp,8
   2da80:	f800283a 	ret

0002da84 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2da84:	defffd04 	addi	sp,sp,-12
   2da88:	dfc00215 	stw	ra,8(sp)
   2da8c:	df000115 	stw	fp,4(sp)
   2da90:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2da94:	0009883a 	mov	r4,zero
   2da98:	002df5c0 	call	2df5c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2da9c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2daa0:	002df940 	call	2df94 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2daa4:	018000f4 	movhi	r6,3
   2daa8:	31841004 	addi	r6,r6,4160
   2daac:	014000f4 	movhi	r5,3
   2dab0:	29441004 	addi	r5,r5,4160
   2dab4:	010000f4 	movhi	r4,3
   2dab8:	21041004 	addi	r4,r4,4160
   2dabc:	00301f40 	call	301f4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2dac0:	002fd900 	call	2fd90 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2dac4:	010000f4 	movhi	r4,3
   2dac8:	213f7c04 	addi	r4,r4,-528
   2dacc:	00309b40 	call	309b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2dad0:	d0a71e17 	ldw	r2,-25480(gp)
   2dad4:	d0e71f17 	ldw	r3,-25476(gp)
   2dad8:	d1272017 	ldw	r4,-25472(gp)
   2dadc:	200d883a 	mov	r6,r4
   2dae0:	180b883a 	mov	r5,r3
   2dae4:	1009883a 	mov	r4,r2
   2dae8:	00205400 	call	20540 <main>
   2daec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2daf0:	01000044 	movi	r4,1
   2daf4:	002d5a00 	call	2d5a0 <close>
  exit (result);
   2daf8:	e13fff17 	ldw	r4,-4(fp)
   2dafc:	00309c80 	call	309c8 <exit>

0002db00 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2db00:	defffe04 	addi	sp,sp,-8
   2db04:	df000115 	stw	fp,4(sp)
   2db08:	df000104 	addi	fp,sp,4
   2db0c:	e13fff15 	stw	r4,-4(fp)
}
   2db10:	0001883a 	nop
   2db14:	e037883a 	mov	sp,fp
   2db18:	df000017 	ldw	fp,0(sp)
   2db1c:	dec00104 	addi	sp,sp,4
   2db20:	f800283a 	ret

0002db24 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2db24:	defffe04 	addi	sp,sp,-8
   2db28:	df000115 	stw	fp,4(sp)
   2db2c:	df000104 	addi	fp,sp,4
   2db30:	e13fff15 	stw	r4,-4(fp)
}
   2db34:	0001883a 	nop
   2db38:	e037883a 	mov	sp,fp
   2db3c:	df000017 	ldw	fp,0(sp)
   2db40:	dec00104 	addi	sp,sp,4
   2db44:	f800283a 	ret

0002db48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2db48:	defffe04 	addi	sp,sp,-8
   2db4c:	dfc00115 	stw	ra,4(sp)
   2db50:	df000015 	stw	fp,0(sp)
   2db54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2db58:	d0a00b17 	ldw	r2,-32724(gp)
   2db5c:	10000326 	beq	r2,zero,2db6c <alt_get_errno+0x24>
   2db60:	d0a00b17 	ldw	r2,-32724(gp)
   2db64:	103ee83a 	callr	r2
   2db68:	00000106 	br	2db70 <alt_get_errno+0x28>
   2db6c:	d0a71d04 	addi	r2,gp,-25484
}
   2db70:	e037883a 	mov	sp,fp
   2db74:	dfc00117 	ldw	ra,4(sp)
   2db78:	df000017 	ldw	fp,0(sp)
   2db7c:	dec00204 	addi	sp,sp,8
   2db80:	f800283a 	ret

0002db84 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2db84:	defff904 	addi	sp,sp,-28
   2db88:	dfc00615 	stw	ra,24(sp)
   2db8c:	df000515 	stw	fp,20(sp)
   2db90:	df000504 	addi	fp,sp,20
   2db94:	e13ffd15 	stw	r4,-12(fp)
   2db98:	e17ffe15 	stw	r5,-8(fp)
   2db9c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2dba0:	e0bffd17 	ldw	r2,-12(fp)
   2dba4:	10000816 	blt	r2,zero,2dbc8 <read+0x44>
   2dba8:	01400304 	movi	r5,12
   2dbac:	e13ffd17 	ldw	r4,-12(fp)
   2dbb0:	00206240 	call	20624 <__mulsi3>
   2dbb4:	1007883a 	mov	r3,r2
   2dbb8:	008000f4 	movhi	r2,3
   2dbbc:	1086ee04 	addi	r2,r2,7096
   2dbc0:	1885883a 	add	r2,r3,r2
   2dbc4:	00000106 	br	2dbcc <read+0x48>
   2dbc8:	0005883a 	mov	r2,zero
   2dbcc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2dbd0:	e0bffb17 	ldw	r2,-20(fp)
   2dbd4:	10002226 	beq	r2,zero,2dc60 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2dbd8:	e0bffb17 	ldw	r2,-20(fp)
   2dbdc:	10800217 	ldw	r2,8(r2)
   2dbe0:	108000cc 	andi	r2,r2,3
   2dbe4:	10800060 	cmpeqi	r2,r2,1
   2dbe8:	1000181e 	bne	r2,zero,2dc4c <read+0xc8>
        (fd->dev->read))
   2dbec:	e0bffb17 	ldw	r2,-20(fp)
   2dbf0:	10800017 	ldw	r2,0(r2)
   2dbf4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2dbf8:	10001426 	beq	r2,zero,2dc4c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2dbfc:	e0bffb17 	ldw	r2,-20(fp)
   2dc00:	10800017 	ldw	r2,0(r2)
   2dc04:	10800517 	ldw	r2,20(r2)
   2dc08:	e0ffff17 	ldw	r3,-4(fp)
   2dc0c:	180d883a 	mov	r6,r3
   2dc10:	e17ffe17 	ldw	r5,-8(fp)
   2dc14:	e13ffb17 	ldw	r4,-20(fp)
   2dc18:	103ee83a 	callr	r2
   2dc1c:	e0bffc15 	stw	r2,-16(fp)
   2dc20:	e0bffc17 	ldw	r2,-16(fp)
   2dc24:	1000070e 	bge	r2,zero,2dc44 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   2dc28:	002db480 	call	2db48 <alt_get_errno>
   2dc2c:	1007883a 	mov	r3,r2
   2dc30:	e0bffc17 	ldw	r2,-16(fp)
   2dc34:	0085c83a 	sub	r2,zero,r2
   2dc38:	18800015 	stw	r2,0(r3)
          return -1;
   2dc3c:	00bfffc4 	movi	r2,-1
   2dc40:	00000c06 	br	2dc74 <read+0xf0>
        }
        return rval;
   2dc44:	e0bffc17 	ldw	r2,-16(fp)
   2dc48:	00000a06 	br	2dc74 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2dc4c:	002db480 	call	2db48 <alt_get_errno>
   2dc50:	1007883a 	mov	r3,r2
   2dc54:	00800344 	movi	r2,13
   2dc58:	18800015 	stw	r2,0(r3)
   2dc5c:	00000406 	br	2dc70 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2dc60:	002db480 	call	2db48 <alt_get_errno>
   2dc64:	1007883a 	mov	r3,r2
   2dc68:	00801444 	movi	r2,81
   2dc6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2dc70:	00bfffc4 	movi	r2,-1
}
   2dc74:	e037883a 	mov	sp,fp
   2dc78:	dfc00117 	ldw	ra,4(sp)
   2dc7c:	df000017 	ldw	fp,0(sp)
   2dc80:	dec00204 	addi	sp,sp,8
   2dc84:	f800283a 	ret

0002dc88 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2dc88:	defffc04 	addi	sp,sp,-16
   2dc8c:	dfc00315 	stw	ra,12(sp)
   2dc90:	df000215 	stw	fp,8(sp)
   2dc94:	dc000115 	stw	r16,4(sp)
   2dc98:	df000204 	addi	fp,sp,8
   2dc9c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   2dca0:	e0bffe17 	ldw	r2,-8(fp)
   2dca4:	108000d0 	cmplti	r2,r2,3
   2dca8:	1000111e 	bne	r2,zero,2dcf0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   2dcac:	040000f4 	movhi	r16,3
   2dcb0:	8406ee04 	addi	r16,r16,7096
   2dcb4:	e0bffe17 	ldw	r2,-8(fp)
   2dcb8:	01400304 	movi	r5,12
   2dcbc:	1009883a 	mov	r4,r2
   2dcc0:	00206240 	call	20624 <__mulsi3>
   2dcc4:	8085883a 	add	r2,r16,r2
   2dcc8:	10800204 	addi	r2,r2,8
   2dccc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2dcd0:	040000f4 	movhi	r16,3
   2dcd4:	8406ee04 	addi	r16,r16,7096
   2dcd8:	e0bffe17 	ldw	r2,-8(fp)
   2dcdc:	01400304 	movi	r5,12
   2dce0:	1009883a 	mov	r4,r2
   2dce4:	00206240 	call	20624 <__mulsi3>
   2dce8:	8085883a 	add	r2,r16,r2
   2dcec:	10000015 	stw	zero,0(r2)
  }
}
   2dcf0:	0001883a 	nop
   2dcf4:	e6ffff04 	addi	sp,fp,-4
   2dcf8:	dfc00217 	ldw	ra,8(sp)
   2dcfc:	df000117 	ldw	fp,4(sp)
   2dd00:	dc000017 	ldw	r16,0(sp)
   2dd04:	dec00304 	addi	sp,sp,12
   2dd08:	f800283a 	ret

0002dd0c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2dd0c:	defff904 	addi	sp,sp,-28
   2dd10:	df000615 	stw	fp,24(sp)
   2dd14:	df000604 	addi	fp,sp,24
   2dd18:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2dd1c:	0005303a 	rdctl	r2,status
   2dd20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2dd24:	e0fffe17 	ldw	r3,-8(fp)
   2dd28:	00bfff84 	movi	r2,-2
   2dd2c:	1884703a 	and	r2,r3,r2
   2dd30:	1001703a 	wrctl	status,r2
  
  return context;
   2dd34:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2dd38:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2dd3c:	d0a00c17 	ldw	r2,-32720(gp)
   2dd40:	10c000c4 	addi	r3,r2,3
   2dd44:	00bfff04 	movi	r2,-4
   2dd48:	1884703a 	and	r2,r3,r2
   2dd4c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2dd50:	d0e00c17 	ldw	r3,-32720(gp)
   2dd54:	e0bfff17 	ldw	r2,-4(fp)
   2dd58:	1887883a 	add	r3,r3,r2
   2dd5c:	00800134 	movhi	r2,4
   2dd60:	10a1a804 	addi	r2,r2,-31072
   2dd64:	10c0062e 	bgeu	r2,r3,2dd80 <sbrk+0x74>
   2dd68:	e0bffb17 	ldw	r2,-20(fp)
   2dd6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2dd70:	e0bffa17 	ldw	r2,-24(fp)
   2dd74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2dd78:	00bfffc4 	movi	r2,-1
   2dd7c:	00000b06 	br	2ddac <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2dd80:	d0a00c17 	ldw	r2,-32720(gp)
   2dd84:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   2dd88:	d0e00c17 	ldw	r3,-32720(gp)
   2dd8c:	e0bfff17 	ldw	r2,-4(fp)
   2dd90:	1885883a 	add	r2,r3,r2
   2dd94:	d0a00c15 	stw	r2,-32720(gp)
   2dd98:	e0bffb17 	ldw	r2,-20(fp)
   2dd9c:	e0bffc15 	stw	r2,-16(fp)
   2dda0:	e0bffc17 	ldw	r2,-16(fp)
   2dda4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2dda8:	e0bffd17 	ldw	r2,-12(fp)
} 
   2ddac:	e037883a 	mov	sp,fp
   2ddb0:	df000017 	ldw	fp,0(sp)
   2ddb4:	dec00104 	addi	sp,sp,4
   2ddb8:	f800283a 	ret

0002ddbc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   2ddbc:	defffd04 	addi	sp,sp,-12
   2ddc0:	dfc00215 	stw	ra,8(sp)
   2ddc4:	df000115 	stw	fp,4(sp)
   2ddc8:	df000104 	addi	fp,sp,4
   2ddcc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   2ddd0:	e13fff17 	ldw	r4,-4(fp)
   2ddd4:	002fb380 	call	2fb38 <alt_busy_sleep>
}
   2ddd8:	e037883a 	mov	sp,fp
   2dddc:	dfc00117 	ldw	ra,4(sp)
   2dde0:	df000017 	ldw	fp,0(sp)
   2dde4:	dec00204 	addi	sp,sp,8
   2dde8:	f800283a 	ret

0002ddec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2ddec:	defffe04 	addi	sp,sp,-8
   2ddf0:	dfc00115 	stw	ra,4(sp)
   2ddf4:	df000015 	stw	fp,0(sp)
   2ddf8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2ddfc:	d0a00b17 	ldw	r2,-32724(gp)
   2de00:	10000326 	beq	r2,zero,2de10 <alt_get_errno+0x24>
   2de04:	d0a00b17 	ldw	r2,-32724(gp)
   2de08:	103ee83a 	callr	r2
   2de0c:	00000106 	br	2de14 <alt_get_errno+0x28>
   2de10:	d0a71d04 	addi	r2,gp,-25484
}
   2de14:	e037883a 	mov	sp,fp
   2de18:	dfc00117 	ldw	ra,4(sp)
   2de1c:	df000017 	ldw	fp,0(sp)
   2de20:	dec00204 	addi	sp,sp,8
   2de24:	f800283a 	ret

0002de28 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2de28:	defff904 	addi	sp,sp,-28
   2de2c:	dfc00615 	stw	ra,24(sp)
   2de30:	df000515 	stw	fp,20(sp)
   2de34:	df000504 	addi	fp,sp,20
   2de38:	e13ffd15 	stw	r4,-12(fp)
   2de3c:	e17ffe15 	stw	r5,-8(fp)
   2de40:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2de44:	e0bffd17 	ldw	r2,-12(fp)
   2de48:	10000816 	blt	r2,zero,2de6c <write+0x44>
   2de4c:	01400304 	movi	r5,12
   2de50:	e13ffd17 	ldw	r4,-12(fp)
   2de54:	00206240 	call	20624 <__mulsi3>
   2de58:	1007883a 	mov	r3,r2
   2de5c:	008000f4 	movhi	r2,3
   2de60:	1086ee04 	addi	r2,r2,7096
   2de64:	1885883a 	add	r2,r3,r2
   2de68:	00000106 	br	2de70 <write+0x48>
   2de6c:	0005883a 	mov	r2,zero
   2de70:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2de74:	e0bffb17 	ldw	r2,-20(fp)
   2de78:	10002126 	beq	r2,zero,2df00 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2de7c:	e0bffb17 	ldw	r2,-20(fp)
   2de80:	10800217 	ldw	r2,8(r2)
   2de84:	108000cc 	andi	r2,r2,3
   2de88:	10001826 	beq	r2,zero,2deec <write+0xc4>
   2de8c:	e0bffb17 	ldw	r2,-20(fp)
   2de90:	10800017 	ldw	r2,0(r2)
   2de94:	10800617 	ldw	r2,24(r2)
   2de98:	10001426 	beq	r2,zero,2deec <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2de9c:	e0bffb17 	ldw	r2,-20(fp)
   2dea0:	10800017 	ldw	r2,0(r2)
   2dea4:	10800617 	ldw	r2,24(r2)
   2dea8:	e0ffff17 	ldw	r3,-4(fp)
   2deac:	180d883a 	mov	r6,r3
   2deb0:	e17ffe17 	ldw	r5,-8(fp)
   2deb4:	e13ffb17 	ldw	r4,-20(fp)
   2deb8:	103ee83a 	callr	r2
   2debc:	e0bffc15 	stw	r2,-16(fp)
   2dec0:	e0bffc17 	ldw	r2,-16(fp)
   2dec4:	1000070e 	bge	r2,zero,2dee4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   2dec8:	002ddec0 	call	2ddec <alt_get_errno>
   2decc:	1007883a 	mov	r3,r2
   2ded0:	e0bffc17 	ldw	r2,-16(fp)
   2ded4:	0085c83a 	sub	r2,zero,r2
   2ded8:	18800015 	stw	r2,0(r3)
        return -1;
   2dedc:	00bfffc4 	movi	r2,-1
   2dee0:	00000c06 	br	2df14 <write+0xec>
      }
      return rval;
   2dee4:	e0bffc17 	ldw	r2,-16(fp)
   2dee8:	00000a06 	br	2df14 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2deec:	002ddec0 	call	2ddec <alt_get_errno>
   2def0:	1007883a 	mov	r3,r2
   2def4:	00800344 	movi	r2,13
   2def8:	18800015 	stw	r2,0(r3)
   2defc:	00000406 	br	2df10 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2df00:	002ddec0 	call	2ddec <alt_get_errno>
   2df04:	1007883a 	mov	r3,r2
   2df08:	00801444 	movi	r2,81
   2df0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2df10:	00bfffc4 	movi	r2,-1
}
   2df14:	e037883a 	mov	sp,fp
   2df18:	dfc00117 	ldw	ra,4(sp)
   2df1c:	df000017 	ldw	fp,0(sp)
   2df20:	dec00204 	addi	sp,sp,8
   2df24:	f800283a 	ret

0002df28 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2df28:	defffd04 	addi	sp,sp,-12
   2df2c:	dfc00215 	stw	ra,8(sp)
   2df30:	df000115 	stw	fp,4(sp)
   2df34:	df000104 	addi	fp,sp,4
   2df38:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2df3c:	d1600804 	addi	r5,gp,-32736
   2df40:	e13fff17 	ldw	r4,-4(fp)
   2df44:	002fcec0 	call	2fcec <alt_dev_llist_insert>
}
   2df48:	e037883a 	mov	sp,fp
   2df4c:	dfc00117 	ldw	ra,4(sp)
   2df50:	df000017 	ldw	fp,0(sp)
   2df54:	dec00204 	addi	sp,sp,8
   2df58:	f800283a 	ret

0002df5c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2df5c:	defffd04 	addi	sp,sp,-12
   2df60:	dfc00215 	stw	ra,8(sp)
   2df64:	df000115 	stw	fp,4(sp)
   2df68:	df000104 	addi	fp,sp,4
   2df6c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   2df70:	00306980 	call	30698 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2df74:	00800044 	movi	r2,1
   2df78:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2df7c:	0001883a 	nop
   2df80:	e037883a 	mov	sp,fp
   2df84:	dfc00117 	ldw	ra,4(sp)
   2df88:	df000017 	ldw	fp,0(sp)
   2df8c:	dec00204 	addi	sp,sp,8
   2df90:	f800283a 	ret

0002df94 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2df94:	defffe04 	addi	sp,sp,-8
   2df98:	dfc00115 	stw	ra,4(sp)
   2df9c:	df000015 	stw	fp,0(sp)
   2dfa0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   2dfa4:	000d883a 	mov	r6,zero
   2dfa8:	000b883a 	mov	r5,zero
   2dfac:	010000f4 	movhi	r4,3
   2dfb0:	21075804 	addi	r4,r4,7520
   2dfb4:	002e15c0 	call	2e15c <altera_avalon_jtag_uart_init>
   2dfb8:	010000f4 	movhi	r4,3
   2dfbc:	21074e04 	addi	r4,r4,7480
   2dfc0:	002df280 	call	2df28 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_0, lcd_0);
   2dfc4:	010000f4 	movhi	r4,3
   2dfc8:	210b7004 	addi	r4,r4,11712
   2dfcc:	002f8780 	call	2f878 <altera_avalon_lcd_16207_init>
   2dfd0:	010000f4 	movhi	r4,3
   2dfd4:	210b6604 	addi	r4,r4,11672
   2dfd8:	002df280 	call	2df28 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   2dfdc:	0001883a 	nop
}
   2dfe0:	0001883a 	nop
   2dfe4:	e037883a 	mov	sp,fp
   2dfe8:	dfc00117 	ldw	ra,4(sp)
   2dfec:	df000017 	ldw	fp,0(sp)
   2dff0:	dec00204 	addi	sp,sp,8
   2dff4:	f800283a 	ret

0002dff8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2dff8:	defffa04 	addi	sp,sp,-24
   2dffc:	dfc00515 	stw	ra,20(sp)
   2e000:	df000415 	stw	fp,16(sp)
   2e004:	df000404 	addi	fp,sp,16
   2e008:	e13ffd15 	stw	r4,-12(fp)
   2e00c:	e17ffe15 	stw	r5,-8(fp)
   2e010:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e014:	e0bffd17 	ldw	r2,-12(fp)
   2e018:	10800017 	ldw	r2,0(r2)
   2e01c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2e020:	e0bffc17 	ldw	r2,-16(fp)
   2e024:	10c00a04 	addi	r3,r2,40
   2e028:	e0bffd17 	ldw	r2,-12(fp)
   2e02c:	10800217 	ldw	r2,8(r2)
   2e030:	100f883a 	mov	r7,r2
   2e034:	e1bfff17 	ldw	r6,-4(fp)
   2e038:	e17ffe17 	ldw	r5,-8(fp)
   2e03c:	1809883a 	mov	r4,r3
   2e040:	002e6200 	call	2e620 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2e044:	e037883a 	mov	sp,fp
   2e048:	dfc00117 	ldw	ra,4(sp)
   2e04c:	df000017 	ldw	fp,0(sp)
   2e050:	dec00204 	addi	sp,sp,8
   2e054:	f800283a 	ret

0002e058 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2e058:	defffa04 	addi	sp,sp,-24
   2e05c:	dfc00515 	stw	ra,20(sp)
   2e060:	df000415 	stw	fp,16(sp)
   2e064:	df000404 	addi	fp,sp,16
   2e068:	e13ffd15 	stw	r4,-12(fp)
   2e06c:	e17ffe15 	stw	r5,-8(fp)
   2e070:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e074:	e0bffd17 	ldw	r2,-12(fp)
   2e078:	10800017 	ldw	r2,0(r2)
   2e07c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2e080:	e0bffc17 	ldw	r2,-16(fp)
   2e084:	10c00a04 	addi	r3,r2,40
   2e088:	e0bffd17 	ldw	r2,-12(fp)
   2e08c:	10800217 	ldw	r2,8(r2)
   2e090:	100f883a 	mov	r7,r2
   2e094:	e1bfff17 	ldw	r6,-4(fp)
   2e098:	e17ffe17 	ldw	r5,-8(fp)
   2e09c:	1809883a 	mov	r4,r3
   2e0a0:	002e83c0 	call	2e83c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2e0a4:	e037883a 	mov	sp,fp
   2e0a8:	dfc00117 	ldw	ra,4(sp)
   2e0ac:	df000017 	ldw	fp,0(sp)
   2e0b0:	dec00204 	addi	sp,sp,8
   2e0b4:	f800283a 	ret

0002e0b8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2e0b8:	defffc04 	addi	sp,sp,-16
   2e0bc:	dfc00315 	stw	ra,12(sp)
   2e0c0:	df000215 	stw	fp,8(sp)
   2e0c4:	df000204 	addi	fp,sp,8
   2e0c8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e0cc:	e0bfff17 	ldw	r2,-4(fp)
   2e0d0:	10800017 	ldw	r2,0(r2)
   2e0d4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2e0d8:	e0bffe17 	ldw	r2,-8(fp)
   2e0dc:	10c00a04 	addi	r3,r2,40
   2e0e0:	e0bfff17 	ldw	r2,-4(fp)
   2e0e4:	10800217 	ldw	r2,8(r2)
   2e0e8:	100b883a 	mov	r5,r2
   2e0ec:	1809883a 	mov	r4,r3
   2e0f0:	002e4c80 	call	2e4c8 <altera_avalon_jtag_uart_close>
}
   2e0f4:	e037883a 	mov	sp,fp
   2e0f8:	dfc00117 	ldw	ra,4(sp)
   2e0fc:	df000017 	ldw	fp,0(sp)
   2e100:	dec00204 	addi	sp,sp,8
   2e104:	f800283a 	ret

0002e108 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2e108:	defffa04 	addi	sp,sp,-24
   2e10c:	dfc00515 	stw	ra,20(sp)
   2e110:	df000415 	stw	fp,16(sp)
   2e114:	df000404 	addi	fp,sp,16
   2e118:	e13ffd15 	stw	r4,-12(fp)
   2e11c:	e17ffe15 	stw	r5,-8(fp)
   2e120:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2e124:	e0bffd17 	ldw	r2,-12(fp)
   2e128:	10800017 	ldw	r2,0(r2)
   2e12c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2e130:	e0bffc17 	ldw	r2,-16(fp)
   2e134:	10800a04 	addi	r2,r2,40
   2e138:	e1bfff17 	ldw	r6,-4(fp)
   2e13c:	e17ffe17 	ldw	r5,-8(fp)
   2e140:	1009883a 	mov	r4,r2
   2e144:	002e5300 	call	2e530 <altera_avalon_jtag_uart_ioctl>
}
   2e148:	e037883a 	mov	sp,fp
   2e14c:	dfc00117 	ldw	ra,4(sp)
   2e150:	df000017 	ldw	fp,0(sp)
   2e154:	dec00204 	addi	sp,sp,8
   2e158:	f800283a 	ret

0002e15c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2e15c:	defffa04 	addi	sp,sp,-24
   2e160:	dfc00515 	stw	ra,20(sp)
   2e164:	df000415 	stw	fp,16(sp)
   2e168:	df000404 	addi	fp,sp,16
   2e16c:	e13ffd15 	stw	r4,-12(fp)
   2e170:	e17ffe15 	stw	r5,-8(fp)
   2e174:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e178:	e0bffd17 	ldw	r2,-12(fp)
   2e17c:	00c00044 	movi	r3,1
   2e180:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2e184:	e0bffd17 	ldw	r2,-12(fp)
   2e188:	10800017 	ldw	r2,0(r2)
   2e18c:	10800104 	addi	r2,r2,4
   2e190:	1007883a 	mov	r3,r2
   2e194:	e0bffd17 	ldw	r2,-12(fp)
   2e198:	10800817 	ldw	r2,32(r2)
   2e19c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2e1a0:	e0bffe17 	ldw	r2,-8(fp)
   2e1a4:	e0ffff17 	ldw	r3,-4(fp)
   2e1a8:	d8000015 	stw	zero,0(sp)
   2e1ac:	e1fffd17 	ldw	r7,-12(fp)
   2e1b0:	018000f4 	movhi	r6,3
   2e1b4:	31b88704 	addi	r6,r6,-7652
   2e1b8:	180b883a 	mov	r5,r3
   2e1bc:	1009883a 	mov	r4,r2
   2e1c0:	002fe700 	call	2fe70 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2e1c4:	e0bffd17 	ldw	r2,-12(fp)
   2e1c8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2e1cc:	e0bffd17 	ldw	r2,-12(fp)
   2e1d0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2e1d4:	d0e72217 	ldw	r3,-25464(gp)
   2e1d8:	e1fffd17 	ldw	r7,-12(fp)
   2e1dc:	018000f4 	movhi	r6,3
   2e1e0:	31b90a04 	addi	r6,r6,-7128
   2e1e4:	180b883a 	mov	r5,r3
   2e1e8:	1009883a 	mov	r4,r2
   2e1ec:	002fa0c0 	call	2fa0c <alt_alarm_start>
   2e1f0:	1000040e 	bge	r2,zero,2e204 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2e1f4:	e0fffd17 	ldw	r3,-12(fp)
   2e1f8:	00a00034 	movhi	r2,32768
   2e1fc:	10bfffc4 	addi	r2,r2,-1
   2e200:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2e204:	0001883a 	nop
   2e208:	e037883a 	mov	sp,fp
   2e20c:	dfc00117 	ldw	ra,4(sp)
   2e210:	df000017 	ldw	fp,0(sp)
   2e214:	dec00204 	addi	sp,sp,8
   2e218:	f800283a 	ret

0002e21c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2e21c:	defff804 	addi	sp,sp,-32
   2e220:	df000715 	stw	fp,28(sp)
   2e224:	df000704 	addi	fp,sp,28
   2e228:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2e22c:	e0bfff17 	ldw	r2,-4(fp)
   2e230:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2e234:	e0bffb17 	ldw	r2,-20(fp)
   2e238:	10800017 	ldw	r2,0(r2)
   2e23c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e240:	e0bffc17 	ldw	r2,-16(fp)
   2e244:	10800104 	addi	r2,r2,4
   2e248:	10800037 	ldwio	r2,0(r2)
   2e24c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2e250:	e0bffd17 	ldw	r2,-12(fp)
   2e254:	1080c00c 	andi	r2,r2,768
   2e258:	10006d26 	beq	r2,zero,2e410 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2e25c:	e0bffd17 	ldw	r2,-12(fp)
   2e260:	1080400c 	andi	r2,r2,256
   2e264:	10003526 	beq	r2,zero,2e33c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2e268:	00800074 	movhi	r2,1
   2e26c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e270:	e0bffb17 	ldw	r2,-20(fp)
   2e274:	10800a17 	ldw	r2,40(r2)
   2e278:	10800044 	addi	r2,r2,1
   2e27c:	1081ffcc 	andi	r2,r2,2047
   2e280:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2e284:	e0bffb17 	ldw	r2,-20(fp)
   2e288:	10c00b17 	ldw	r3,44(r2)
   2e28c:	e0bffe17 	ldw	r2,-8(fp)
   2e290:	18801526 	beq	r3,r2,2e2e8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2e294:	e0bffc17 	ldw	r2,-16(fp)
   2e298:	10800037 	ldwio	r2,0(r2)
   2e29c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2e2a0:	e0bff917 	ldw	r2,-28(fp)
   2e2a4:	10a0000c 	andi	r2,r2,32768
   2e2a8:	10001126 	beq	r2,zero,2e2f0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2e2ac:	e0bffb17 	ldw	r2,-20(fp)
   2e2b0:	10800a17 	ldw	r2,40(r2)
   2e2b4:	e0fff917 	ldw	r3,-28(fp)
   2e2b8:	1809883a 	mov	r4,r3
   2e2bc:	e0fffb17 	ldw	r3,-20(fp)
   2e2c0:	1885883a 	add	r2,r3,r2
   2e2c4:	10800e04 	addi	r2,r2,56
   2e2c8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e2cc:	e0bffb17 	ldw	r2,-20(fp)
   2e2d0:	10800a17 	ldw	r2,40(r2)
   2e2d4:	10800044 	addi	r2,r2,1
   2e2d8:	10c1ffcc 	andi	r3,r2,2047
   2e2dc:	e0bffb17 	ldw	r2,-20(fp)
   2e2e0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2e2e4:	003fe206 	br	2e270 <_gp+0xffff33b8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2e2e8:	0001883a 	nop
   2e2ec:	00000106 	br	2e2f4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2e2f0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2e2f4:	e0bff917 	ldw	r2,-28(fp)
   2e2f8:	10bfffec 	andhi	r2,r2,65535
   2e2fc:	10000f26 	beq	r2,zero,2e33c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e300:	e0bffb17 	ldw	r2,-20(fp)
   2e304:	10c00817 	ldw	r3,32(r2)
   2e308:	00bfff84 	movi	r2,-2
   2e30c:	1886703a 	and	r3,r3,r2
   2e310:	e0bffb17 	ldw	r2,-20(fp)
   2e314:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2e318:	e0bffc17 	ldw	r2,-16(fp)
   2e31c:	10800104 	addi	r2,r2,4
   2e320:	1007883a 	mov	r3,r2
   2e324:	e0bffb17 	ldw	r2,-20(fp)
   2e328:	10800817 	ldw	r2,32(r2)
   2e32c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e330:	e0bffc17 	ldw	r2,-16(fp)
   2e334:	10800104 	addi	r2,r2,4
   2e338:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2e33c:	e0bffd17 	ldw	r2,-12(fp)
   2e340:	1080800c 	andi	r2,r2,512
   2e344:	103fbe26 	beq	r2,zero,2e240 <_gp+0xffff3388>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2e348:	e0bffd17 	ldw	r2,-12(fp)
   2e34c:	1004d43a 	srli	r2,r2,16
   2e350:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2e354:	00001406 	br	2e3a8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2e358:	e0bffc17 	ldw	r2,-16(fp)
   2e35c:	e0fffb17 	ldw	r3,-20(fp)
   2e360:	18c00d17 	ldw	r3,52(r3)
   2e364:	e13ffb17 	ldw	r4,-20(fp)
   2e368:	20c7883a 	add	r3,r4,r3
   2e36c:	18c20e04 	addi	r3,r3,2104
   2e370:	18c00003 	ldbu	r3,0(r3)
   2e374:	18c03fcc 	andi	r3,r3,255
   2e378:	18c0201c 	xori	r3,r3,128
   2e37c:	18ffe004 	addi	r3,r3,-128
   2e380:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e384:	e0bffb17 	ldw	r2,-20(fp)
   2e388:	10800d17 	ldw	r2,52(r2)
   2e38c:	10800044 	addi	r2,r2,1
   2e390:	10c1ffcc 	andi	r3,r2,2047
   2e394:	e0bffb17 	ldw	r2,-20(fp)
   2e398:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2e39c:	e0bffa17 	ldw	r2,-24(fp)
   2e3a0:	10bfffc4 	addi	r2,r2,-1
   2e3a4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2e3a8:	e0bffa17 	ldw	r2,-24(fp)
   2e3ac:	10000526 	beq	r2,zero,2e3c4 <altera_avalon_jtag_uart_irq+0x1a8>
   2e3b0:	e0bffb17 	ldw	r2,-20(fp)
   2e3b4:	10c00d17 	ldw	r3,52(r2)
   2e3b8:	e0bffb17 	ldw	r2,-20(fp)
   2e3bc:	10800c17 	ldw	r2,48(r2)
   2e3c0:	18bfe51e 	bne	r3,r2,2e358 <_gp+0xffff34a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2e3c4:	e0bffa17 	ldw	r2,-24(fp)
   2e3c8:	103f9d26 	beq	r2,zero,2e240 <_gp+0xffff3388>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2e3cc:	e0bffb17 	ldw	r2,-20(fp)
   2e3d0:	10c00817 	ldw	r3,32(r2)
   2e3d4:	00bfff44 	movi	r2,-3
   2e3d8:	1886703a 	and	r3,r3,r2
   2e3dc:	e0bffb17 	ldw	r2,-20(fp)
   2e3e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2e3e4:	e0bffb17 	ldw	r2,-20(fp)
   2e3e8:	10800017 	ldw	r2,0(r2)
   2e3ec:	10800104 	addi	r2,r2,4
   2e3f0:	1007883a 	mov	r3,r2
   2e3f4:	e0bffb17 	ldw	r2,-20(fp)
   2e3f8:	10800817 	ldw	r2,32(r2)
   2e3fc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e400:	e0bffc17 	ldw	r2,-16(fp)
   2e404:	10800104 	addi	r2,r2,4
   2e408:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2e40c:	003f8c06 	br	2e240 <_gp+0xffff3388>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   2e410:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2e414:	0001883a 	nop
   2e418:	e037883a 	mov	sp,fp
   2e41c:	df000017 	ldw	fp,0(sp)
   2e420:	dec00104 	addi	sp,sp,4
   2e424:	f800283a 	ret

0002e428 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2e428:	defff804 	addi	sp,sp,-32
   2e42c:	df000715 	stw	fp,28(sp)
   2e430:	df000704 	addi	fp,sp,28
   2e434:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2e438:	e0bffb17 	ldw	r2,-20(fp)
   2e43c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2e440:	e0bff917 	ldw	r2,-28(fp)
   2e444:	10800017 	ldw	r2,0(r2)
   2e448:	10800104 	addi	r2,r2,4
   2e44c:	10800037 	ldwio	r2,0(r2)
   2e450:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2e454:	e0bffa17 	ldw	r2,-24(fp)
   2e458:	1081000c 	andi	r2,r2,1024
   2e45c:	10000b26 	beq	r2,zero,2e48c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2e460:	e0bff917 	ldw	r2,-28(fp)
   2e464:	10800017 	ldw	r2,0(r2)
   2e468:	10800104 	addi	r2,r2,4
   2e46c:	1007883a 	mov	r3,r2
   2e470:	e0bff917 	ldw	r2,-28(fp)
   2e474:	10800817 	ldw	r2,32(r2)
   2e478:	10810014 	ori	r2,r2,1024
   2e47c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2e480:	e0bff917 	ldw	r2,-28(fp)
   2e484:	10000915 	stw	zero,36(r2)
   2e488:	00000a06 	br	2e4b4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2e48c:	e0bff917 	ldw	r2,-28(fp)
   2e490:	10c00917 	ldw	r3,36(r2)
   2e494:	00a00034 	movhi	r2,32768
   2e498:	10bfff04 	addi	r2,r2,-4
   2e49c:	10c00536 	bltu	r2,r3,2e4b4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   2e4a0:	e0bff917 	ldw	r2,-28(fp)
   2e4a4:	10800917 	ldw	r2,36(r2)
   2e4a8:	10c00044 	addi	r3,r2,1
   2e4ac:	e0bff917 	ldw	r2,-28(fp)
   2e4b0:	10c00915 	stw	r3,36(r2)
   2e4b4:	d0a72217 	ldw	r2,-25464(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2e4b8:	e037883a 	mov	sp,fp
   2e4bc:	df000017 	ldw	fp,0(sp)
   2e4c0:	dec00104 	addi	sp,sp,4
   2e4c4:	f800283a 	ret

0002e4c8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2e4c8:	defffd04 	addi	sp,sp,-12
   2e4cc:	df000215 	stw	fp,8(sp)
   2e4d0:	df000204 	addi	fp,sp,8
   2e4d4:	e13ffe15 	stw	r4,-8(fp)
   2e4d8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2e4dc:	00000506 	br	2e4f4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2e4e0:	e0bfff17 	ldw	r2,-4(fp)
   2e4e4:	1090000c 	andi	r2,r2,16384
   2e4e8:	10000226 	beq	r2,zero,2e4f4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2e4ec:	00bffd44 	movi	r2,-11
   2e4f0:	00000b06 	br	2e520 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2e4f4:	e0bffe17 	ldw	r2,-8(fp)
   2e4f8:	10c00d17 	ldw	r3,52(r2)
   2e4fc:	e0bffe17 	ldw	r2,-8(fp)
   2e500:	10800c17 	ldw	r2,48(r2)
   2e504:	18800526 	beq	r3,r2,2e51c <altera_avalon_jtag_uart_close+0x54>
   2e508:	e0bffe17 	ldw	r2,-8(fp)
   2e50c:	10c00917 	ldw	r3,36(r2)
   2e510:	e0bffe17 	ldw	r2,-8(fp)
   2e514:	10800117 	ldw	r2,4(r2)
   2e518:	18bff136 	bltu	r3,r2,2e4e0 <_gp+0xffff3628>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2e51c:	0005883a 	mov	r2,zero
}
   2e520:	e037883a 	mov	sp,fp
   2e524:	df000017 	ldw	fp,0(sp)
   2e528:	dec00104 	addi	sp,sp,4
   2e52c:	f800283a 	ret

0002e530 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2e530:	defffa04 	addi	sp,sp,-24
   2e534:	df000515 	stw	fp,20(sp)
   2e538:	df000504 	addi	fp,sp,20
   2e53c:	e13ffd15 	stw	r4,-12(fp)
   2e540:	e17ffe15 	stw	r5,-8(fp)
   2e544:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2e548:	00bff9c4 	movi	r2,-25
   2e54c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2e550:	e0bffe17 	ldw	r2,-8(fp)
   2e554:	10da8060 	cmpeqi	r3,r2,27137
   2e558:	1800031e 	bne	r3,zero,2e568 <altera_avalon_jtag_uart_ioctl+0x38>
   2e55c:	109a80a0 	cmpeqi	r2,r2,27138
   2e560:	1000181e 	bne	r2,zero,2e5c4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   2e564:	00002906 	br	2e60c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2e568:	e0bffd17 	ldw	r2,-12(fp)
   2e56c:	10c00117 	ldw	r3,4(r2)
   2e570:	00a00034 	movhi	r2,32768
   2e574:	10bfffc4 	addi	r2,r2,-1
   2e578:	18802126 	beq	r3,r2,2e600 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   2e57c:	e0bfff17 	ldw	r2,-4(fp)
   2e580:	10800017 	ldw	r2,0(r2)
   2e584:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2e588:	e0bffc17 	ldw	r2,-16(fp)
   2e58c:	10800090 	cmplti	r2,r2,2
   2e590:	1000061e 	bne	r2,zero,2e5ac <altera_avalon_jtag_uart_ioctl+0x7c>
   2e594:	e0fffc17 	ldw	r3,-16(fp)
   2e598:	00a00034 	movhi	r2,32768
   2e59c:	10bfffc4 	addi	r2,r2,-1
   2e5a0:	18800226 	beq	r3,r2,2e5ac <altera_avalon_jtag_uart_ioctl+0x7c>
   2e5a4:	e0bffc17 	ldw	r2,-16(fp)
   2e5a8:	00000206 	br	2e5b4 <altera_avalon_jtag_uart_ioctl+0x84>
   2e5ac:	00a00034 	movhi	r2,32768
   2e5b0:	10bfff84 	addi	r2,r2,-2
   2e5b4:	e0fffd17 	ldw	r3,-12(fp)
   2e5b8:	18800115 	stw	r2,4(r3)
      rc = 0;
   2e5bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2e5c0:	00000f06 	br	2e600 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2e5c4:	e0bffd17 	ldw	r2,-12(fp)
   2e5c8:	10c00117 	ldw	r3,4(r2)
   2e5cc:	00a00034 	movhi	r2,32768
   2e5d0:	10bfffc4 	addi	r2,r2,-1
   2e5d4:	18800c26 	beq	r3,r2,2e608 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2e5d8:	e0bffd17 	ldw	r2,-12(fp)
   2e5dc:	10c00917 	ldw	r3,36(r2)
   2e5e0:	e0bffd17 	ldw	r2,-12(fp)
   2e5e4:	10800117 	ldw	r2,4(r2)
   2e5e8:	1885803a 	cmpltu	r2,r3,r2
   2e5ec:	10c03fcc 	andi	r3,r2,255
   2e5f0:	e0bfff17 	ldw	r2,-4(fp)
   2e5f4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2e5f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2e5fc:	00000206 	br	2e608 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2e600:	0001883a 	nop
   2e604:	00000106 	br	2e60c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2e608:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2e60c:	e0bffb17 	ldw	r2,-20(fp)
}
   2e610:	e037883a 	mov	sp,fp
   2e614:	df000017 	ldw	fp,0(sp)
   2e618:	dec00104 	addi	sp,sp,4
   2e61c:	f800283a 	ret

0002e620 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2e620:	defff304 	addi	sp,sp,-52
   2e624:	dfc00c15 	stw	ra,48(sp)
   2e628:	df000b15 	stw	fp,44(sp)
   2e62c:	df000b04 	addi	fp,sp,44
   2e630:	e13ffc15 	stw	r4,-16(fp)
   2e634:	e17ffd15 	stw	r5,-12(fp)
   2e638:	e1bffe15 	stw	r6,-8(fp)
   2e63c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2e640:	e0bffd17 	ldw	r2,-12(fp)
   2e644:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2e648:	00004706 	br	2e768 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2e64c:	e0bffc17 	ldw	r2,-16(fp)
   2e650:	10800a17 	ldw	r2,40(r2)
   2e654:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2e658:	e0bffc17 	ldw	r2,-16(fp)
   2e65c:	10800b17 	ldw	r2,44(r2)
   2e660:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2e664:	e0fff717 	ldw	r3,-36(fp)
   2e668:	e0bff817 	ldw	r2,-32(fp)
   2e66c:	18800536 	bltu	r3,r2,2e684 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2e670:	e0fff717 	ldw	r3,-36(fp)
   2e674:	e0bff817 	ldw	r2,-32(fp)
   2e678:	1885c83a 	sub	r2,r3,r2
   2e67c:	e0bff615 	stw	r2,-40(fp)
   2e680:	00000406 	br	2e694 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2e684:	00c20004 	movi	r3,2048
   2e688:	e0bff817 	ldw	r2,-32(fp)
   2e68c:	1885c83a 	sub	r2,r3,r2
   2e690:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2e694:	e0bff617 	ldw	r2,-40(fp)
   2e698:	10001e26 	beq	r2,zero,2e714 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2e69c:	e0fffe17 	ldw	r3,-8(fp)
   2e6a0:	e0bff617 	ldw	r2,-40(fp)
   2e6a4:	1880022e 	bgeu	r3,r2,2e6b0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   2e6a8:	e0bffe17 	ldw	r2,-8(fp)
   2e6ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2e6b0:	e0bffc17 	ldw	r2,-16(fp)
   2e6b4:	10c00e04 	addi	r3,r2,56
   2e6b8:	e0bff817 	ldw	r2,-32(fp)
   2e6bc:	1885883a 	add	r2,r3,r2
   2e6c0:	e1bff617 	ldw	r6,-40(fp)
   2e6c4:	100b883a 	mov	r5,r2
   2e6c8:	e13ff517 	ldw	r4,-44(fp)
   2e6cc:	00262400 	call	26240 <memcpy>
      ptr   += n;
   2e6d0:	e0fff517 	ldw	r3,-44(fp)
   2e6d4:	e0bff617 	ldw	r2,-40(fp)
   2e6d8:	1885883a 	add	r2,r3,r2
   2e6dc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2e6e0:	e0fffe17 	ldw	r3,-8(fp)
   2e6e4:	e0bff617 	ldw	r2,-40(fp)
   2e6e8:	1885c83a 	sub	r2,r3,r2
   2e6ec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e6f0:	e0fff817 	ldw	r3,-32(fp)
   2e6f4:	e0bff617 	ldw	r2,-40(fp)
   2e6f8:	1885883a 	add	r2,r3,r2
   2e6fc:	10c1ffcc 	andi	r3,r2,2047
   2e700:	e0bffc17 	ldw	r2,-16(fp)
   2e704:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2e708:	e0bffe17 	ldw	r2,-8(fp)
   2e70c:	00bfcf16 	blt	zero,r2,2e64c <_gp+0xffff3794>
   2e710:	00000106 	br	2e718 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   2e714:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2e718:	e0fff517 	ldw	r3,-44(fp)
   2e71c:	e0bffd17 	ldw	r2,-12(fp)
   2e720:	1880141e 	bne	r3,r2,2e774 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2e724:	e0bfff17 	ldw	r2,-4(fp)
   2e728:	1090000c 	andi	r2,r2,16384
   2e72c:	1000131e 	bne	r2,zero,2e77c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2e730:	0001883a 	nop
   2e734:	e0bffc17 	ldw	r2,-16(fp)
   2e738:	10c00a17 	ldw	r3,40(r2)
   2e73c:	e0bff717 	ldw	r2,-36(fp)
   2e740:	1880051e 	bne	r3,r2,2e758 <altera_avalon_jtag_uart_read+0x138>
   2e744:	e0bffc17 	ldw	r2,-16(fp)
   2e748:	10c00917 	ldw	r3,36(r2)
   2e74c:	e0bffc17 	ldw	r2,-16(fp)
   2e750:	10800117 	ldw	r2,4(r2)
   2e754:	18bff736 	bltu	r3,r2,2e734 <_gp+0xffff387c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2e758:	e0bffc17 	ldw	r2,-16(fp)
   2e75c:	10c00a17 	ldw	r3,40(r2)
   2e760:	e0bff717 	ldw	r2,-36(fp)
   2e764:	18800726 	beq	r3,r2,2e784 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2e768:	e0bffe17 	ldw	r2,-8(fp)
   2e76c:	00bfb716 	blt	zero,r2,2e64c <_gp+0xffff3794>
   2e770:	00000506 	br	2e788 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2e774:	0001883a 	nop
   2e778:	00000306 	br	2e788 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2e77c:	0001883a 	nop
   2e780:	00000106 	br	2e788 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2e784:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2e788:	e0fff517 	ldw	r3,-44(fp)
   2e78c:	e0bffd17 	ldw	r2,-12(fp)
   2e790:	18801826 	beq	r3,r2,2e7f4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e794:	0005303a 	rdctl	r2,status
   2e798:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e79c:	e0fffb17 	ldw	r3,-20(fp)
   2e7a0:	00bfff84 	movi	r2,-2
   2e7a4:	1884703a 	and	r2,r3,r2
   2e7a8:	1001703a 	wrctl	status,r2
  
  return context;
   2e7ac:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2e7b0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e7b4:	e0bffc17 	ldw	r2,-16(fp)
   2e7b8:	10800817 	ldw	r2,32(r2)
   2e7bc:	10c00054 	ori	r3,r2,1
   2e7c0:	e0bffc17 	ldw	r2,-16(fp)
   2e7c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2e7c8:	e0bffc17 	ldw	r2,-16(fp)
   2e7cc:	10800017 	ldw	r2,0(r2)
   2e7d0:	10800104 	addi	r2,r2,4
   2e7d4:	1007883a 	mov	r3,r2
   2e7d8:	e0bffc17 	ldw	r2,-16(fp)
   2e7dc:	10800817 	ldw	r2,32(r2)
   2e7e0:	18800035 	stwio	r2,0(r3)
   2e7e4:	e0bffa17 	ldw	r2,-24(fp)
   2e7e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e7ec:	e0bff917 	ldw	r2,-28(fp)
   2e7f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2e7f4:	e0fff517 	ldw	r3,-44(fp)
   2e7f8:	e0bffd17 	ldw	r2,-12(fp)
   2e7fc:	18800426 	beq	r3,r2,2e810 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   2e800:	e0fff517 	ldw	r3,-44(fp)
   2e804:	e0bffd17 	ldw	r2,-12(fp)
   2e808:	1885c83a 	sub	r2,r3,r2
   2e80c:	00000606 	br	2e828 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   2e810:	e0bfff17 	ldw	r2,-4(fp)
   2e814:	1090000c 	andi	r2,r2,16384
   2e818:	10000226 	beq	r2,zero,2e824 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2e81c:	00bffd44 	movi	r2,-11
   2e820:	00000106 	br	2e828 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   2e824:	00bffec4 	movi	r2,-5
}
   2e828:	e037883a 	mov	sp,fp
   2e82c:	dfc00117 	ldw	ra,4(sp)
   2e830:	df000017 	ldw	fp,0(sp)
   2e834:	dec00204 	addi	sp,sp,8
   2e838:	f800283a 	ret

0002e83c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2e83c:	defff304 	addi	sp,sp,-52
   2e840:	dfc00c15 	stw	ra,48(sp)
   2e844:	df000b15 	stw	fp,44(sp)
   2e848:	df000b04 	addi	fp,sp,44
   2e84c:	e13ffc15 	stw	r4,-16(fp)
   2e850:	e17ffd15 	stw	r5,-12(fp)
   2e854:	e1bffe15 	stw	r6,-8(fp)
   2e858:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2e85c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2e860:	e0bffd17 	ldw	r2,-12(fp)
   2e864:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2e868:	00003706 	br	2e948 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2e86c:	e0bffc17 	ldw	r2,-16(fp)
   2e870:	10800c17 	ldw	r2,48(r2)
   2e874:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   2e878:	e0bffc17 	ldw	r2,-16(fp)
   2e87c:	10800d17 	ldw	r2,52(r2)
   2e880:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2e884:	e0fff917 	ldw	r3,-28(fp)
   2e888:	e0bff517 	ldw	r2,-44(fp)
   2e88c:	1880062e 	bgeu	r3,r2,2e8a8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2e890:	e0fff517 	ldw	r3,-44(fp)
   2e894:	e0bff917 	ldw	r2,-28(fp)
   2e898:	1885c83a 	sub	r2,r3,r2
   2e89c:	10bfffc4 	addi	r2,r2,-1
   2e8a0:	e0bff615 	stw	r2,-40(fp)
   2e8a4:	00000b06 	br	2e8d4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2e8a8:	e0bff517 	ldw	r2,-44(fp)
   2e8ac:	10000526 	beq	r2,zero,2e8c4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2e8b0:	00c20004 	movi	r3,2048
   2e8b4:	e0bff917 	ldw	r2,-28(fp)
   2e8b8:	1885c83a 	sub	r2,r3,r2
   2e8bc:	e0bff615 	stw	r2,-40(fp)
   2e8c0:	00000406 	br	2e8d4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2e8c4:	00c1ffc4 	movi	r3,2047
   2e8c8:	e0bff917 	ldw	r2,-28(fp)
   2e8cc:	1885c83a 	sub	r2,r3,r2
   2e8d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2e8d4:	e0bff617 	ldw	r2,-40(fp)
   2e8d8:	10001e26 	beq	r2,zero,2e954 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2e8dc:	e0fffe17 	ldw	r3,-8(fp)
   2e8e0:	e0bff617 	ldw	r2,-40(fp)
   2e8e4:	1880022e 	bgeu	r3,r2,2e8f0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2e8e8:	e0bffe17 	ldw	r2,-8(fp)
   2e8ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2e8f0:	e0bffc17 	ldw	r2,-16(fp)
   2e8f4:	10c20e04 	addi	r3,r2,2104
   2e8f8:	e0bff917 	ldw	r2,-28(fp)
   2e8fc:	1885883a 	add	r2,r3,r2
   2e900:	e1bff617 	ldw	r6,-40(fp)
   2e904:	e17ffd17 	ldw	r5,-12(fp)
   2e908:	1009883a 	mov	r4,r2
   2e90c:	00262400 	call	26240 <memcpy>
      ptr   += n;
   2e910:	e0fffd17 	ldw	r3,-12(fp)
   2e914:	e0bff617 	ldw	r2,-40(fp)
   2e918:	1885883a 	add	r2,r3,r2
   2e91c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2e920:	e0fffe17 	ldw	r3,-8(fp)
   2e924:	e0bff617 	ldw	r2,-40(fp)
   2e928:	1885c83a 	sub	r2,r3,r2
   2e92c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e930:	e0fff917 	ldw	r3,-28(fp)
   2e934:	e0bff617 	ldw	r2,-40(fp)
   2e938:	1885883a 	add	r2,r3,r2
   2e93c:	10c1ffcc 	andi	r3,r2,2047
   2e940:	e0bffc17 	ldw	r2,-16(fp)
   2e944:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2e948:	e0bffe17 	ldw	r2,-8(fp)
   2e94c:	00bfc716 	blt	zero,r2,2e86c <_gp+0xffff39b4>
   2e950:	00000106 	br	2e958 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2e954:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e958:	0005303a 	rdctl	r2,status
   2e95c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e960:	e0fffb17 	ldw	r3,-20(fp)
   2e964:	00bfff84 	movi	r2,-2
   2e968:	1884703a 	and	r2,r3,r2
   2e96c:	1001703a 	wrctl	status,r2
  
  return context;
   2e970:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2e974:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2e978:	e0bffc17 	ldw	r2,-16(fp)
   2e97c:	10800817 	ldw	r2,32(r2)
   2e980:	10c00094 	ori	r3,r2,2
   2e984:	e0bffc17 	ldw	r2,-16(fp)
   2e988:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2e98c:	e0bffc17 	ldw	r2,-16(fp)
   2e990:	10800017 	ldw	r2,0(r2)
   2e994:	10800104 	addi	r2,r2,4
   2e998:	1007883a 	mov	r3,r2
   2e99c:	e0bffc17 	ldw	r2,-16(fp)
   2e9a0:	10800817 	ldw	r2,32(r2)
   2e9a4:	18800035 	stwio	r2,0(r3)
   2e9a8:	e0bffa17 	ldw	r2,-24(fp)
   2e9ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e9b0:	e0bff817 	ldw	r2,-32(fp)
   2e9b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2e9b8:	e0bffe17 	ldw	r2,-8(fp)
   2e9bc:	0080100e 	bge	zero,r2,2ea00 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   2e9c0:	e0bfff17 	ldw	r2,-4(fp)
   2e9c4:	1090000c 	andi	r2,r2,16384
   2e9c8:	1000101e 	bne	r2,zero,2ea0c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2e9cc:	0001883a 	nop
   2e9d0:	e0bffc17 	ldw	r2,-16(fp)
   2e9d4:	10c00d17 	ldw	r3,52(r2)
   2e9d8:	e0bff517 	ldw	r2,-44(fp)
   2e9dc:	1880051e 	bne	r3,r2,2e9f4 <altera_avalon_jtag_uart_write+0x1b8>
   2e9e0:	e0bffc17 	ldw	r2,-16(fp)
   2e9e4:	10c00917 	ldw	r3,36(r2)
   2e9e8:	e0bffc17 	ldw	r2,-16(fp)
   2e9ec:	10800117 	ldw	r2,4(r2)
   2e9f0:	18bff736 	bltu	r3,r2,2e9d0 <_gp+0xffff3b18>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2e9f4:	e0bffc17 	ldw	r2,-16(fp)
   2e9f8:	10800917 	ldw	r2,36(r2)
   2e9fc:	1000051e 	bne	r2,zero,2ea14 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2ea00:	e0bffe17 	ldw	r2,-8(fp)
   2ea04:	00bfd016 	blt	zero,r2,2e948 <_gp+0xffff3a90>
   2ea08:	00000306 	br	2ea18 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2ea0c:	0001883a 	nop
   2ea10:	00000106 	br	2ea18 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   2ea14:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2ea18:	e0fffd17 	ldw	r3,-12(fp)
   2ea1c:	e0bff717 	ldw	r2,-36(fp)
   2ea20:	18800426 	beq	r3,r2,2ea34 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2ea24:	e0fffd17 	ldw	r3,-12(fp)
   2ea28:	e0bff717 	ldw	r2,-36(fp)
   2ea2c:	1885c83a 	sub	r2,r3,r2
   2ea30:	00000606 	br	2ea4c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2ea34:	e0bfff17 	ldw	r2,-4(fp)
   2ea38:	1090000c 	andi	r2,r2,16384
   2ea3c:	10000226 	beq	r2,zero,2ea48 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2ea40:	00bffd44 	movi	r2,-11
   2ea44:	00000106 	br	2ea4c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2ea48:	00bffec4 	movi	r2,-5
}
   2ea4c:	e037883a 	mov	sp,fp
   2ea50:	dfc00117 	ldw	ra,4(sp)
   2ea54:	df000017 	ldw	fp,0(sp)
   2ea58:	dec00204 	addi	sp,sp,8
   2ea5c:	f800283a 	ret

0002ea60 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
   2ea60:	defffa04 	addi	sp,sp,-24
   2ea64:	dfc00515 	stw	ra,20(sp)
   2ea68:	df000415 	stw	fp,16(sp)
   2ea6c:	df000404 	addi	fp,sp,16
   2ea70:	e13ffe15 	stw	r4,-8(fp)
   2ea74:	2805883a 	mov	r2,r5
   2ea78:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   2ea7c:	e0bffe17 	ldw	r2,-8(fp)
   2ea80:	10800017 	ldw	r2,0(r2)
   2ea84:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   2ea88:	008003f4 	movhi	r2,15
   2ea8c:	10909004 	addi	r2,r2,16960
   2ea90:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   2ea94:	e0bffe17 	ldw	r2,-8(fp)
   2ea98:	10800803 	ldbu	r2,32(r2)
   2ea9c:	10803fcc 	andi	r2,r2,255
   2eaa0:	1080201c 	xori	r2,r2,128
   2eaa4:	10bfe004 	addi	r2,r2,-128
   2eaa8:	1000151e 	bne	r2,zero,2eb00 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   2eaac:	00000906 	br	2ead4 <lcd_write_command+0x74>
    if (--i == 0)
   2eab0:	e0bffc17 	ldw	r2,-16(fp)
   2eab4:	10bfffc4 	addi	r2,r2,-1
   2eab8:	e0bffc15 	stw	r2,-16(fp)
   2eabc:	e0bffc17 	ldw	r2,-16(fp)
   2eac0:	1000041e 	bne	r2,zero,2ead4 <lcd_write_command+0x74>
    {
      sp->broken = 1;
   2eac4:	e0bffe17 	ldw	r2,-8(fp)
   2eac8:	00c00044 	movi	r3,1
   2eacc:	10c00805 	stb	r3,32(r2)
      return;
   2ead0:	00000c06 	br	2eb04 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   2ead4:	e0bffd17 	ldw	r2,-12(fp)
   2ead8:	10800104 	addi	r2,r2,4
   2eadc:	10800037 	ldwio	r2,0(r2)
   2eae0:	1080200c 	andi	r2,r2,128
   2eae4:	103ff21e 	bne	r2,zero,2eab0 <_gp+0xffff3bf8>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   2eae8:	01001904 	movi	r4,100
   2eaec:	002ddbc0 	call	2ddbc <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
   2eaf0:	e0bffd17 	ldw	r2,-12(fp)
   2eaf4:	e0ffff03 	ldbu	r3,-4(fp)
   2eaf8:	10c00035 	stwio	r3,0(r2)
   2eafc:	00000106 	br	2eb04 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   2eb00:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
   2eb04:	e037883a 	mov	sp,fp
   2eb08:	dfc00117 	ldw	ra,4(sp)
   2eb0c:	df000017 	ldw	fp,0(sp)
   2eb10:	dec00204 	addi	sp,sp,8
   2eb14:	f800283a 	ret

0002eb18 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
   2eb18:	defffa04 	addi	sp,sp,-24
   2eb1c:	dfc00515 	stw	ra,20(sp)
   2eb20:	df000415 	stw	fp,16(sp)
   2eb24:	df000404 	addi	fp,sp,16
   2eb28:	e13ffe15 	stw	r4,-8(fp)
   2eb2c:	2805883a 	mov	r2,r5
   2eb30:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   2eb34:	e0bffe17 	ldw	r2,-8(fp)
   2eb38:	10800017 	ldw	r2,0(r2)
   2eb3c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   2eb40:	008003f4 	movhi	r2,15
   2eb44:	10909004 	addi	r2,r2,16960
   2eb48:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   2eb4c:	e0bffe17 	ldw	r2,-8(fp)
   2eb50:	10800803 	ldbu	r2,32(r2)
   2eb54:	10803fcc 	andi	r2,r2,255
   2eb58:	1080201c 	xori	r2,r2,128
   2eb5c:	10bfe004 	addi	r2,r2,-128
   2eb60:	10001d1e 	bne	r2,zero,2ebd8 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   2eb64:	00000906 	br	2eb8c <lcd_write_data+0x74>
    if (--i == 0)
   2eb68:	e0bffc17 	ldw	r2,-16(fp)
   2eb6c:	10bfffc4 	addi	r2,r2,-1
   2eb70:	e0bffc15 	stw	r2,-16(fp)
   2eb74:	e0bffc17 	ldw	r2,-16(fp)
   2eb78:	1000041e 	bne	r2,zero,2eb8c <lcd_write_data+0x74>
    {
      sp->broken = 1;
   2eb7c:	e0bffe17 	ldw	r2,-8(fp)
   2eb80:	00c00044 	movi	r3,1
   2eb84:	10c00805 	stb	r3,32(r2)
      return;
   2eb88:	00001406 	br	2ebdc <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   2eb8c:	e0bffd17 	ldw	r2,-12(fp)
   2eb90:	10800104 	addi	r2,r2,4
   2eb94:	10800037 	ldwio	r2,0(r2)
   2eb98:	1080200c 	andi	r2,r2,128
   2eb9c:	103ff21e 	bne	r2,zero,2eb68 <_gp+0xffff3cb0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   2eba0:	01001904 	movi	r4,100
   2eba4:	002ddbc0 	call	2ddbc <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
   2eba8:	e0bffd17 	ldw	r2,-12(fp)
   2ebac:	10800204 	addi	r2,r2,8
   2ebb0:	1007883a 	mov	r3,r2
   2ebb4:	e0bfff03 	ldbu	r2,-4(fp)
   2ebb8:	18800035 	stwio	r2,0(r3)

  sp->address++;
   2ebbc:	e0bffe17 	ldw	r2,-8(fp)
   2ebc0:	108008c3 	ldbu	r2,35(r2)
   2ebc4:	10800044 	addi	r2,r2,1
   2ebc8:	1007883a 	mov	r3,r2
   2ebcc:	e0bffe17 	ldw	r2,-8(fp)
   2ebd0:	10c008c5 	stb	r3,35(r2)
   2ebd4:	00000106 	br	2ebdc <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   2ebd8:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
   2ebdc:	e037883a 	mov	sp,fp
   2ebe0:	dfc00117 	ldw	ra,4(sp)
   2ebe4:	df000017 	ldw	fp,0(sp)
   2ebe8:	dec00204 	addi	sp,sp,8
   2ebec:	f800283a 	ret

0002ebf0 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
   2ebf0:	defffb04 	addi	sp,sp,-20
   2ebf4:	dfc00415 	stw	ra,16(sp)
   2ebf8:	df000315 	stw	fp,12(sp)
   2ebfc:	dc000215 	stw	r16,8(sp)
   2ec00:	df000304 	addi	fp,sp,12
   2ec04:	e13ffe15 	stw	r4,-8(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
   2ec08:	01400044 	movi	r5,1
   2ec0c:	e13ffe17 	ldw	r4,-8(fp)
   2ec10:	002ea600 	call	2ea60 <lcd_write_command>

  sp->x = 0;
   2ec14:	e0bffe17 	ldw	r2,-8(fp)
   2ec18:	10000845 	stb	zero,33(r2)
  sp->y = 0;
   2ec1c:	e0bffe17 	ldw	r2,-8(fp)
   2ec20:	10000885 	stb	zero,34(r2)
  sp->address = 0;
   2ec24:	e0bffe17 	ldw	r2,-8(fp)
   2ec28:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2ec2c:	e03ffd15 	stw	zero,-12(fp)
   2ec30:	00001f06 	br	2ecb0 <lcd_clear_screen+0xc0>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
   2ec34:	014018c4 	movi	r5,99
   2ec38:	e13ffd17 	ldw	r4,-12(fp)
   2ec3c:	00206240 	call	20624 <__mulsi3>
   2ec40:	10801004 	addi	r2,r2,64
   2ec44:	e0fffe17 	ldw	r3,-8(fp)
   2ec48:	1885883a 	add	r2,r3,r2
   2ec4c:	01801444 	movi	r6,81
   2ec50:	01400804 	movi	r5,32
   2ec54:	1009883a 	mov	r4,r2
   2ec58:	00264e40 	call	264e4 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
   2ec5c:	014018c4 	movi	r5,99
   2ec60:	e13ffd17 	ldw	r4,-12(fp)
   2ec64:	00206240 	call	20624 <__mulsi3>
   2ec68:	10800c04 	addi	r2,r2,48
   2ec6c:	e0fffe17 	ldw	r3,-8(fp)
   2ec70:	1885883a 	add	r2,r3,r2
   2ec74:	01800404 	movi	r6,16
   2ec78:	01400804 	movi	r5,32
   2ec7c:	1009883a 	mov	r4,r2
   2ec80:	00264e40 	call	264e4 <memset>
    sp->line[y].width = 0;
   2ec84:	e43ffe17 	ldw	r16,-8(fp)
   2ec88:	e0bffd17 	ldw	r2,-12(fp)
   2ec8c:	014018c4 	movi	r5,99
   2ec90:	1009883a 	mov	r4,r2
   2ec94:	00206240 	call	20624 <__mulsi3>
   2ec98:	8085883a 	add	r2,r16,r2
   2ec9c:	10802444 	addi	r2,r2,145
   2eca0:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2eca4:	e0bffd17 	ldw	r2,-12(fp)
   2eca8:	10800044 	addi	r2,r2,1
   2ecac:	e0bffd15 	stw	r2,-12(fp)
   2ecb0:	e0bffd17 	ldw	r2,-12(fp)
   2ecb4:	10800090 	cmplti	r2,r2,2
   2ecb8:	103fde1e 	bne	r2,zero,2ec34 <_gp+0xffff3d7c>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
   2ecbc:	0001883a 	nop
   2ecc0:	e6ffff04 	addi	sp,fp,-4
   2ecc4:	dfc00217 	ldw	ra,8(sp)
   2ecc8:	df000117 	ldw	fp,4(sp)
   2eccc:	dc000017 	ldw	r16,0(sp)
   2ecd0:	dec00304 	addi	sp,sp,12
   2ecd4:	f800283a 	ret

0002ecd8 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
   2ecd8:	defff504 	addi	sp,sp,-44
   2ecdc:	dfc00a15 	stw	ra,40(sp)
   2ece0:	df000915 	stw	fp,36(sp)
   2ece4:	dc400815 	stw	r17,32(sp)
   2ece8:	dc000715 	stw	r16,28(sp)
   2ecec:	df000904 	addi	fp,sp,36
   2ecf0:	e13ffd15 	stw	r4,-12(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
   2ecf4:	e0bffd17 	ldw	r2,-12(fp)
   2ecf8:	10800943 	ldbu	r2,37(r2)
   2ecfc:	10803fcc 	andi	r2,r2,255
   2ed00:	e0bffa15 	stw	r2,-24(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2ed04:	e03ff715 	stw	zero,-36(fp)
   2ed08:	00007206 	br	2eed4 <lcd_repaint_screen+0x1fc>
  {
    int width  = sp->line[y].width;
   2ed0c:	e43ffd17 	ldw	r16,-12(fp)
   2ed10:	e0bff717 	ldw	r2,-36(fp)
   2ed14:	014018c4 	movi	r5,99
   2ed18:	1009883a 	mov	r4,r2
   2ed1c:	00206240 	call	20624 <__mulsi3>
   2ed20:	8085883a 	add	r2,r16,r2
   2ed24:	10802444 	addi	r2,r2,145
   2ed28:	10800003 	ldbu	r2,0(r2)
   2ed2c:	10803fcc 	andi	r2,r2,255
   2ed30:	1080201c 	xori	r2,r2,128
   2ed34:	10bfe004 	addi	r2,r2,-128
   2ed38:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   2ed3c:	e43ffd17 	ldw	r16,-12(fp)
   2ed40:	e0bff717 	ldw	r2,-36(fp)
   2ed44:	014018c4 	movi	r5,99
   2ed48:	1009883a 	mov	r4,r2
   2ed4c:	00206240 	call	20624 <__mulsi3>
   2ed50:	8085883a 	add	r2,r16,r2
   2ed54:	10802484 	addi	r2,r2,146
   2ed58:	10800003 	ldbu	r2,0(r2)
   2ed5c:	10803fcc 	andi	r2,r2,255
   2ed60:	e17ffa17 	ldw	r5,-24(fp)
   2ed64:	1009883a 	mov	r4,r2
   2ed68:	00206240 	call	20624 <__mulsi3>
   2ed6c:	1005d23a 	srai	r2,r2,8
   2ed70:	e0bff915 	stw	r2,-28(fp)
    if (offset >= width)
   2ed74:	e0fff917 	ldw	r3,-28(fp)
   2ed78:	e0bffb17 	ldw	r2,-20(fp)
   2ed7c:	18800116 	blt	r3,r2,2ed84 <lcd_repaint_screen+0xac>
      offset = 0;
   2ed80:	e03ff915 	stw	zero,-28(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   2ed84:	e03ff815 	stw	zero,-32(fp)
   2ed88:	00004c06 	br	2eebc <lcd_repaint_screen+0x1e4>
    {
      char c = sp->line[y].data[(x + offset) % width];
   2ed8c:	e0fff817 	ldw	r3,-32(fp)
   2ed90:	e0bff917 	ldw	r2,-28(fp)
   2ed94:	1885883a 	add	r2,r3,r2
   2ed98:	e17ffb17 	ldw	r5,-20(fp)
   2ed9c:	1009883a 	mov	r4,r2
   2eda0:	002ab900 	call	2ab90 <__modsi3>
   2eda4:	1023883a 	mov	r17,r2
   2eda8:	e43ffd17 	ldw	r16,-12(fp)
   2edac:	e0bff717 	ldw	r2,-36(fp)
   2edb0:	014018c4 	movi	r5,99
   2edb4:	1009883a 	mov	r4,r2
   2edb8:	00206240 	call	20624 <__mulsi3>
   2edbc:	8085883a 	add	r2,r16,r2
   2edc0:	1445883a 	add	r2,r2,r17
   2edc4:	10801004 	addi	r2,r2,64
   2edc8:	10800003 	ldbu	r2,0(r2)
   2edcc:	e0bffc05 	stb	r2,-16(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   2edd0:	e43ffd17 	ldw	r16,-12(fp)
   2edd4:	e0bff717 	ldw	r2,-36(fp)
   2edd8:	014018c4 	movi	r5,99
   2eddc:	1009883a 	mov	r4,r2
   2ede0:	00206240 	call	20624 <__mulsi3>
   2ede4:	8087883a 	add	r3,r16,r2
   2ede8:	e0bff817 	ldw	r2,-32(fp)
   2edec:	1885883a 	add	r2,r3,r2
   2edf0:	10800c04 	addi	r2,r2,48
   2edf4:	10800003 	ldbu	r2,0(r2)
   2edf8:	10c03fcc 	andi	r3,r2,255
   2edfc:	18c0201c 	xori	r3,r3,128
   2ee00:	18ffe004 	addi	r3,r3,-128
   2ee04:	e0bffc07 	ldb	r2,-16(fp)
   2ee08:	18802926 	beq	r3,r2,2eeb0 <lcd_repaint_screen+0x1d8>
      {
        unsigned char address = x + colstart[y];
   2ee0c:	e0fff717 	ldw	r3,-36(fp)
   2ee10:	d0a00d04 	addi	r2,gp,-32716
   2ee14:	1885883a 	add	r2,r3,r2
   2ee18:	10800003 	ldbu	r2,0(r2)
   2ee1c:	1007883a 	mov	r3,r2
   2ee20:	e0bff817 	ldw	r2,-32(fp)
   2ee24:	1885883a 	add	r2,r3,r2
   2ee28:	e0bffc45 	stb	r2,-15(fp)

        if (address != sp->address)
   2ee2c:	e0fffc43 	ldbu	r3,-15(fp)
   2ee30:	e0bffd17 	ldw	r2,-12(fp)
   2ee34:	108008c3 	ldbu	r2,35(r2)
   2ee38:	10803fcc 	andi	r2,r2,255
   2ee3c:	1080201c 	xori	r2,r2,128
   2ee40:	10bfe004 	addi	r2,r2,-128
   2ee44:	18800a26 	beq	r3,r2,2ee70 <lcd_repaint_screen+0x198>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   2ee48:	e0fffc43 	ldbu	r3,-15(fp)
   2ee4c:	00bfe004 	movi	r2,-128
   2ee50:	1884b03a 	or	r2,r3,r2
   2ee54:	10803fcc 	andi	r2,r2,255
   2ee58:	100b883a 	mov	r5,r2
   2ee5c:	e13ffd17 	ldw	r4,-12(fp)
   2ee60:	002ea600 	call	2ea60 <lcd_write_command>
          sp->address = address;
   2ee64:	e0fffc43 	ldbu	r3,-15(fp)
   2ee68:	e0bffd17 	ldw	r2,-12(fp)
   2ee6c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   2ee70:	e0bffc03 	ldbu	r2,-16(fp)
   2ee74:	10803fcc 	andi	r2,r2,255
   2ee78:	100b883a 	mov	r5,r2
   2ee7c:	e13ffd17 	ldw	r4,-12(fp)
   2ee80:	002eb180 	call	2eb18 <lcd_write_data>
        sp->line[y].visible[x] = c;
   2ee84:	e43ffd17 	ldw	r16,-12(fp)
   2ee88:	e0bff717 	ldw	r2,-36(fp)
   2ee8c:	014018c4 	movi	r5,99
   2ee90:	1009883a 	mov	r4,r2
   2ee94:	00206240 	call	20624 <__mulsi3>
   2ee98:	8087883a 	add	r3,r16,r2
   2ee9c:	e0bff817 	ldw	r2,-32(fp)
   2eea0:	1885883a 	add	r2,r3,r2
   2eea4:	10800c04 	addi	r2,r2,48
   2eea8:	e0fffc03 	ldbu	r3,-16(fp)
   2eeac:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   2eeb0:	e0bff817 	ldw	r2,-32(fp)
   2eeb4:	10800044 	addi	r2,r2,1
   2eeb8:	e0bff815 	stw	r2,-32(fp)
   2eebc:	e0bff817 	ldw	r2,-32(fp)
   2eec0:	10800410 	cmplti	r2,r2,16
   2eec4:	103fb11e 	bne	r2,zero,2ed8c <_gp+0xffff3ed4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2eec8:	e0bff717 	ldw	r2,-36(fp)
   2eecc:	10800044 	addi	r2,r2,1
   2eed0:	e0bff715 	stw	r2,-36(fp)
   2eed4:	e0bff717 	ldw	r2,-36(fp)
   2eed8:	10800090 	cmplti	r2,r2,2
   2eedc:	103f8b1e 	bne	r2,zero,2ed0c <_gp+0xffff3e54>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   2eee0:	0001883a 	nop
   2eee4:	e6fffe04 	addi	sp,fp,-8
   2eee8:	dfc00317 	ldw	ra,12(sp)
   2eeec:	df000217 	ldw	fp,8(sp)
   2eef0:	dc400117 	ldw	r17,4(sp)
   2eef4:	dc000017 	ldw	r16,0(sp)
   2eef8:	dec00404 	addi	sp,sp,16
   2eefc:	f800283a 	ret

0002ef00 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   2ef00:	defffb04 	addi	sp,sp,-20
   2ef04:	dfc00415 	stw	ra,16(sp)
   2ef08:	df000315 	stw	fp,12(sp)
   2ef0c:	dc000215 	stw	r16,8(sp)
   2ef10:	df000304 	addi	fp,sp,12
   2ef14:	e13ffe15 	stw	r4,-8(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2ef18:	e03ffd15 	stw	zero,-12(fp)
   2ef1c:	00002206 	br	2efa8 <lcd_scroll_up+0xa8>
  {
    if (y < ALT_LCD_HEIGHT-1)
   2ef20:	e0bffd17 	ldw	r2,-12(fp)
   2ef24:	00801316 	blt	zero,r2,2ef74 <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   2ef28:	014018c4 	movi	r5,99
   2ef2c:	e13ffd17 	ldw	r4,-12(fp)
   2ef30:	00206240 	call	20624 <__mulsi3>
   2ef34:	10801004 	addi	r2,r2,64
   2ef38:	e0fffe17 	ldw	r3,-8(fp)
   2ef3c:	18a1883a 	add	r16,r3,r2
   2ef40:	e0bffd17 	ldw	r2,-12(fp)
   2ef44:	10800044 	addi	r2,r2,1
   2ef48:	014018c4 	movi	r5,99
   2ef4c:	1009883a 	mov	r4,r2
   2ef50:	00206240 	call	20624 <__mulsi3>
   2ef54:	10801004 	addi	r2,r2,64
   2ef58:	e0fffe17 	ldw	r3,-8(fp)
   2ef5c:	1885883a 	add	r2,r3,r2
   2ef60:	01801404 	movi	r6,80
   2ef64:	100b883a 	mov	r5,r2
   2ef68:	8009883a 	mov	r4,r16
   2ef6c:	00262400 	call	26240 <memcpy>
   2ef70:	00000a06 	br	2ef9c <lcd_scroll_up+0x9c>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   2ef74:	014018c4 	movi	r5,99
   2ef78:	e13ffd17 	ldw	r4,-12(fp)
   2ef7c:	00206240 	call	20624 <__mulsi3>
   2ef80:	10801004 	addi	r2,r2,64
   2ef84:	e0fffe17 	ldw	r3,-8(fp)
   2ef88:	1885883a 	add	r2,r3,r2
   2ef8c:	01801404 	movi	r6,80
   2ef90:	01400804 	movi	r5,32
   2ef94:	1009883a 	mov	r4,r2
   2ef98:	00264e40 	call	264e4 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2ef9c:	e0bffd17 	ldw	r2,-12(fp)
   2efa0:	10800044 	addi	r2,r2,1
   2efa4:	e0bffd15 	stw	r2,-12(fp)
   2efa8:	e0bffd17 	ldw	r2,-12(fp)
   2efac:	10800090 	cmplti	r2,r2,2
   2efb0:	103fdb1e 	bne	r2,zero,2ef20 <_gp+0xffff4068>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   2efb4:	e0bffe17 	ldw	r2,-8(fp)
   2efb8:	10800883 	ldbu	r2,34(r2)
   2efbc:	10bfffc4 	addi	r2,r2,-1
   2efc0:	1007883a 	mov	r3,r2
   2efc4:	e0bffe17 	ldw	r2,-8(fp)
   2efc8:	10c00885 	stb	r3,34(r2)
}
   2efcc:	0001883a 	nop
   2efd0:	e6ffff04 	addi	sp,fp,-4
   2efd4:	dfc00217 	ldw	ra,8(sp)
   2efd8:	df000117 	ldw	fp,4(sp)
   2efdc:	dc000017 	ldw	r16,0(sp)
   2efe0:	dec00304 	addi	sp,sp,12
   2efe4:	f800283a 	ret

0002efe8 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   2efe8:	defff904 	addi	sp,sp,-28
   2efec:	dfc00615 	stw	ra,24(sp)
   2eff0:	df000515 	stw	fp,20(sp)
   2eff4:	df000504 	addi	fp,sp,20
   2eff8:	e13ffe15 	stw	r4,-8(fp)
   2effc:	2805883a 	mov	r2,r5
   2f000:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
   2f004:	e03ffb15 	stw	zero,-20(fp)
   2f008:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
   2f00c:	e0bffe17 	ldw	r2,-8(fp)
   2f010:	10800a03 	ldbu	r2,40(r2)
   2f014:	10803fcc 	andi	r2,r2,255
   2f018:	1080201c 	xori	r2,r2,128
   2f01c:	10bfe004 	addi	r2,r2,-128
   2f020:	108016d8 	cmpnei	r2,r2,91
   2f024:	1000451e 	bne	r2,zero,2f13c <lcd_handle_escape+0x154>
  {
    char * ptr = sp->escape+1;
   2f028:	e0bffe17 	ldw	r2,-8(fp)
   2f02c:	10800a04 	addi	r2,r2,40
   2f030:	10800044 	addi	r2,r2,1
   2f034:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
   2f038:	00000e06 	br	2f074 <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   2f03c:	01400284 	movi	r5,10
   2f040:	e13ffb17 	ldw	r4,-20(fp)
   2f044:	00206240 	call	20624 <__mulsi3>
   2f048:	1009883a 	mov	r4,r2
   2f04c:	e0bffd17 	ldw	r2,-12(fp)
   2f050:	10c00044 	addi	r3,r2,1
   2f054:	e0fffd15 	stw	r3,-12(fp)
   2f058:	10800003 	ldbu	r2,0(r2)
   2f05c:	10803fcc 	andi	r2,r2,255
   2f060:	1080201c 	xori	r2,r2,128
   2f064:	10bfe004 	addi	r2,r2,-128
   2f068:	10bff404 	addi	r2,r2,-48
   2f06c:	2085883a 	add	r2,r4,r2
   2f070:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   2f074:	d0e01117 	ldw	r3,-32700(gp)
   2f078:	e0bffd17 	ldw	r2,-12(fp)
   2f07c:	10800003 	ldbu	r2,0(r2)
   2f080:	10803fcc 	andi	r2,r2,255
   2f084:	1080201c 	xori	r2,r2,128
   2f088:	10bfe004 	addi	r2,r2,-128
   2f08c:	10800044 	addi	r2,r2,1
   2f090:	1885883a 	add	r2,r3,r2
   2f094:	10800003 	ldbu	r2,0(r2)
   2f098:	10803fcc 	andi	r2,r2,255
   2f09c:	1080010c 	andi	r2,r2,4
   2f0a0:	103fe61e 	bne	r2,zero,2f03c <_gp+0xffff4184>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   2f0a4:	e0bffd17 	ldw	r2,-12(fp)
   2f0a8:	10800003 	ldbu	r2,0(r2)
   2f0ac:	10803fcc 	andi	r2,r2,255
   2f0b0:	1080201c 	xori	r2,r2,128
   2f0b4:	10bfe004 	addi	r2,r2,-128
   2f0b8:	10800ed8 	cmpnei	r2,r2,59
   2f0bc:	1000211e 	bne	r2,zero,2f144 <lcd_handle_escape+0x15c>
    {
      ptr++;
   2f0c0:	e0bffd17 	ldw	r2,-12(fp)
   2f0c4:	10800044 	addi	r2,r2,1
   2f0c8:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
   2f0cc:	00000e06 	br	2f108 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   2f0d0:	01400284 	movi	r5,10
   2f0d4:	e13ffc17 	ldw	r4,-16(fp)
   2f0d8:	00206240 	call	20624 <__mulsi3>
   2f0dc:	1009883a 	mov	r4,r2
   2f0e0:	e0bffd17 	ldw	r2,-12(fp)
   2f0e4:	10c00044 	addi	r3,r2,1
   2f0e8:	e0fffd15 	stw	r3,-12(fp)
   2f0ec:	10800003 	ldbu	r2,0(r2)
   2f0f0:	10803fcc 	andi	r2,r2,255
   2f0f4:	1080201c 	xori	r2,r2,128
   2f0f8:	10bfe004 	addi	r2,r2,-128
   2f0fc:	10bff404 	addi	r2,r2,-48
   2f100:	2085883a 	add	r2,r4,r2
   2f104:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   2f108:	d0e01117 	ldw	r3,-32700(gp)
   2f10c:	e0bffd17 	ldw	r2,-12(fp)
   2f110:	10800003 	ldbu	r2,0(r2)
   2f114:	10803fcc 	andi	r2,r2,255
   2f118:	1080201c 	xori	r2,r2,128
   2f11c:	10bfe004 	addi	r2,r2,-128
   2f120:	10800044 	addi	r2,r2,1
   2f124:	1885883a 	add	r2,r3,r2
   2f128:	10800003 	ldbu	r2,0(r2)
   2f12c:	10803fcc 	andi	r2,r2,255
   2f130:	1080010c 	andi	r2,r2,4
   2f134:	103fe61e 	bne	r2,zero,2f0d0 <_gp+0xffff4218>
   2f138:	00000206 	br	2f144 <lcd_handle_escape+0x15c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   2f13c:	00bfffc4 	movi	r2,-1
   2f140:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
   2f144:	e0bfff07 	ldb	r2,-4(fp)
   2f148:	10c012a0 	cmpeqi	r3,r2,74
   2f14c:	1800291e 	bne	r3,zero,2f1f4 <lcd_handle_escape+0x20c>
   2f150:	10c012c8 	cmpgei	r3,r2,75
   2f154:	1800031e 	bne	r3,zero,2f164 <lcd_handle_escape+0x17c>
   2f158:	10801220 	cmpeqi	r2,r2,72
   2f15c:	1000061e 	bne	r2,zero,2f178 <lcd_handle_escape+0x190>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   2f160:	00004c06 	br	2f294 <lcd_handle_escape+0x2ac>
    }
  }
  else
    parm1 = -1;

  switch (c)
   2f164:	10c012e0 	cmpeqi	r3,r2,75
   2f168:	1800281e 	bne	r3,zero,2f20c <lcd_handle_escape+0x224>
   2f16c:	108019a0 	cmpeqi	r2,r2,102
   2f170:	1000011e 	bne	r2,zero,2f178 <lcd_handle_escape+0x190>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   2f174:	00004706 	br	2f294 <lcd_handle_escape+0x2ac>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   2f178:	e0bffc17 	ldw	r2,-16(fp)
   2f17c:	0080050e 	bge	zero,r2,2f194 <lcd_handle_escape+0x1ac>
      sp->x = parm2 - 1;
   2f180:	e0bffc17 	ldw	r2,-16(fp)
   2f184:	10bfffc4 	addi	r2,r2,-1
   2f188:	1007883a 	mov	r3,r2
   2f18c:	e0bffe17 	ldw	r2,-8(fp)
   2f190:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   2f194:	e0bffb17 	ldw	r2,-20(fp)
   2f198:	0080390e 	bge	zero,r2,2f280 <lcd_handle_escape+0x298>
    {
      sp->y = parm1 - 1;
   2f19c:	e0bffb17 	ldw	r2,-20(fp)
   2f1a0:	10bfffc4 	addi	r2,r2,-1
   2f1a4:	1007883a 	mov	r3,r2
   2f1a8:	e0bffe17 	ldw	r2,-8(fp)
   2f1ac:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   2f1b0:	e0bffe17 	ldw	r2,-8(fp)
   2f1b4:	10800883 	ldbu	r2,34(r2)
   2f1b8:	10803fcc 	andi	r2,r2,255
   2f1bc:	10800170 	cmpltui	r2,r2,5
   2f1c0:	1000061e 	bne	r2,zero,2f1dc <lcd_handle_escape+0x1f4>
        sp->y = ALT_LCD_HEIGHT * 2;
   2f1c4:	e0bffe17 	ldw	r2,-8(fp)
   2f1c8:	00c00104 	movi	r3,4
   2f1cc:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
   2f1d0:	00000206 	br	2f1dc <lcd_handle_escape+0x1f4>
        lcd_scroll_up(sp);
   2f1d4:	e13ffe17 	ldw	r4,-8(fp)
   2f1d8:	002ef000 	call	2ef00 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   2f1dc:	e0bffe17 	ldw	r2,-8(fp)
   2f1e0:	10800883 	ldbu	r2,34(r2)
   2f1e4:	10803fcc 	andi	r2,r2,255
   2f1e8:	108000e8 	cmpgeui	r2,r2,3
   2f1ec:	103ff91e 	bne	r2,zero,2f1d4 <_gp+0xffff431c>
        lcd_scroll_up(sp);
    }
    break;
   2f1f0:	00002306 	br	2f280 <lcd_handle_escape+0x298>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   2f1f4:	e0bffb17 	ldw	r2,-20(fp)
   2f1f8:	10800098 	cmpnei	r2,r2,2
   2f1fc:	1000221e 	bne	r2,zero,2f288 <lcd_handle_escape+0x2a0>
      lcd_clear_screen(sp);
   2f200:	e13ffe17 	ldw	r4,-8(fp)
   2f204:	002ebf00 	call	2ebf0 <lcd_clear_screen>
    break;
   2f208:	00001f06 	br	2f288 <lcd_handle_escape+0x2a0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   2f20c:	e0bffb17 	ldw	r2,-20(fp)
   2f210:	00801f16 	blt	zero,r2,2f290 <lcd_handle_escape+0x2a8>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   2f214:	e0bffe17 	ldw	r2,-8(fp)
   2f218:	10800843 	ldbu	r2,33(r2)
   2f21c:	10803fcc 	andi	r2,r2,255
   2f220:	10801428 	cmpgeui	r2,r2,80
   2f224:	10001a1e 	bne	r2,zero,2f290 <lcd_handle_escape+0x2a8>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   2f228:	e0bffe17 	ldw	r2,-8(fp)
   2f22c:	10800883 	ldbu	r2,34(r2)
   2f230:	10803fcc 	andi	r2,r2,255
   2f234:	014018c4 	movi	r5,99
   2f238:	1009883a 	mov	r4,r2
   2f23c:	00206240 	call	20624 <__mulsi3>
   2f240:	10801004 	addi	r2,r2,64
   2f244:	e0fffe17 	ldw	r3,-8(fp)
   2f248:	1887883a 	add	r3,r3,r2
   2f24c:	e0bffe17 	ldw	r2,-8(fp)
   2f250:	10800843 	ldbu	r2,33(r2)
   2f254:	10803fcc 	andi	r2,r2,255
   2f258:	1889883a 	add	r4,r3,r2
   2f25c:	e0bffe17 	ldw	r2,-8(fp)
   2f260:	10800843 	ldbu	r2,33(r2)
   2f264:	10803fcc 	andi	r2,r2,255
   2f268:	00c01404 	movi	r3,80
   2f26c:	1885c83a 	sub	r2,r3,r2
   2f270:	100d883a 	mov	r6,r2
   2f274:	01400804 	movi	r5,32
   2f278:	00264e40 	call	264e4 <memset>
    }
    break;
   2f27c:	00000406 	br	2f290 <lcd_handle_escape+0x2a8>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
   2f280:	0001883a 	nop
   2f284:	00000306 	br	2f294 <lcd_handle_escape+0x2ac>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
   2f288:	0001883a 	nop
   2f28c:	00000106 	br	2f294 <lcd_handle_escape+0x2ac>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
   2f290:	0001883a 	nop
  }
}
   2f294:	0001883a 	nop
   2f298:	e037883a 	mov	sp,fp
   2f29c:	dfc00117 	ldw	ra,4(sp)
   2f2a0:	df000017 	ldw	fp,0(sp)
   2f2a4:	dec00204 	addi	sp,sp,8
   2f2a8:	f800283a 	ret

0002f2ac <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   2f2ac:	defff104 	addi	sp,sp,-60
   2f2b0:	dfc00e15 	stw	ra,56(sp)
   2f2b4:	df000d15 	stw	fp,52(sp)
   2f2b8:	dc400c15 	stw	r17,48(sp)
   2f2bc:	dc000b15 	stw	r16,44(sp)
   2f2c0:	df000d04 	addi	fp,sp,52
   2f2c4:	e13ffa15 	stw	r4,-24(fp)
   2f2c8:	e17ffb15 	stw	r5,-20(fp)
   2f2cc:	e1bffc15 	stw	r6,-16(fp)
   2f2d0:	e1fffd15 	stw	r7,-12(fp)
  const char* end = ptr + len;
   2f2d4:	e0bffc17 	ldw	r2,-16(fp)
   2f2d8:	e0fffb17 	ldw	r3,-20(fp)
   2f2dc:	1885883a 	add	r2,r3,r2
   2f2e0:	e0bff615 	stw	r2,-40(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   2f2e4:	e0bffa17 	ldw	r2,-24(fp)
   2f2e8:	00c00044 	movi	r3,1
   2f2ec:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
   2f2f0:	00009b06 	br	2f560 <altera_avalon_lcd_16207_write+0x2b4>
  {
    char c = *ptr;
   2f2f4:	e0bffb17 	ldw	r2,-20(fp)
   2f2f8:	10800003 	ldbu	r2,0(r2)
   2f2fc:	e0bff705 	stb	r2,-36(fp)

    if (sp->esccount >= 0)
   2f300:	e0bffa17 	ldw	r2,-24(fp)
   2f304:	10800903 	ldbu	r2,36(r2)
   2f308:	10803fcc 	andi	r2,r2,255
   2f30c:	1080201c 	xori	r2,r2,128
   2f310:	10bfe004 	addi	r2,r2,-128
   2f314:	10003716 	blt	r2,zero,2f3f4 <altera_avalon_lcd_16207_write+0x148>
    {
      unsigned int esccount = sp->esccount;
   2f318:	e0bffa17 	ldw	r2,-24(fp)
   2f31c:	10800903 	ldbu	r2,36(r2)
   2f320:	10803fcc 	andi	r2,r2,255
   2f324:	1080201c 	xori	r2,r2,128
   2f328:	10bfe004 	addi	r2,r2,-128
   2f32c:	e0bff815 	stw	r2,-32(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   2f330:	e0bff817 	ldw	r2,-32(fp)
   2f334:	1000031e 	bne	r2,zero,2f344 <altera_avalon_lcd_16207_write+0x98>
   2f338:	e0bff707 	ldb	r2,-36(fp)
   2f33c:	108016d8 	cmpnei	r2,r2,91
   2f340:	10000d1e 	bne	r2,zero,2f378 <altera_avalon_lcd_16207_write+0xcc>
   2f344:	e0bff817 	ldw	r2,-32(fp)
   2f348:	10001826 	beq	r2,zero,2f3ac <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
   2f34c:	d0e01117 	ldw	r3,-32700(gp)
   2f350:	e0bff707 	ldb	r2,-36(fp)
   2f354:	10800044 	addi	r2,r2,1
   2f358:	1885883a 	add	r2,r3,r2
   2f35c:	10800003 	ldbu	r2,0(r2)
   2f360:	10803fcc 	andi	r2,r2,255
   2f364:	1080010c 	andi	r2,r2,4
   2f368:	1000101e 	bne	r2,zero,2f3ac <altera_avalon_lcd_16207_write+0x100>
   2f36c:	e0bff707 	ldb	r2,-36(fp)
   2f370:	10800ee0 	cmpeqi	r2,r2,59
   2f374:	10000d1e 	bne	r2,zero,2f3ac <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
   2f378:	e0fffa17 	ldw	r3,-24(fp)
   2f37c:	e0bff817 	ldw	r2,-32(fp)
   2f380:	1885883a 	add	r2,r3,r2
   2f384:	10800a04 	addi	r2,r2,40
   2f388:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   2f38c:	e0bff707 	ldb	r2,-36(fp)
   2f390:	100b883a 	mov	r5,r2
   2f394:	e13ffa17 	ldw	r4,-24(fp)
   2f398:	002efe80 	call	2efe8 <lcd_handle_escape>

        sp->esccount = -1;
   2f39c:	e0bffa17 	ldw	r2,-24(fp)
   2f3a0:	00ffffc4 	movi	r3,-1
   2f3a4:	10c00905 	stb	r3,36(r2)
   2f3a8:	00006a06 	br	2f554 <altera_avalon_lcd_16207_write+0x2a8>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   2f3ac:	e0bffa17 	ldw	r2,-24(fp)
   2f3b0:	10800903 	ldbu	r2,36(r2)
   2f3b4:	10803fcc 	andi	r2,r2,255
   2f3b8:	108001e8 	cmpgeui	r2,r2,7
   2f3bc:	1000651e 	bne	r2,zero,2f554 <altera_avalon_lcd_16207_write+0x2a8>
      {
        sp->escape[esccount] = c;
   2f3c0:	e0fffa17 	ldw	r3,-24(fp)
   2f3c4:	e0bff817 	ldw	r2,-32(fp)
   2f3c8:	1885883a 	add	r2,r3,r2
   2f3cc:	10800a04 	addi	r2,r2,40
   2f3d0:	e0fff703 	ldbu	r3,-36(fp)
   2f3d4:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
   2f3d8:	e0bffa17 	ldw	r2,-24(fp)
   2f3dc:	10800903 	ldbu	r2,36(r2)
   2f3e0:	10800044 	addi	r2,r2,1
   2f3e4:	1007883a 	mov	r3,r2
   2f3e8:	e0bffa17 	ldw	r2,-24(fp)
   2f3ec:	10c00905 	stb	r3,36(r2)
   2f3f0:	00005806 	br	2f554 <altera_avalon_lcd_16207_write+0x2a8>
      }
    }
    else if (c == 27) /* ESC */
   2f3f4:	e0bff707 	ldb	r2,-36(fp)
   2f3f8:	108006d8 	cmpnei	r2,r2,27
   2f3fc:	1000031e 	bne	r2,zero,2f40c <altera_avalon_lcd_16207_write+0x160>
    {
      sp->esccount = 0;
   2f400:	e0bffa17 	ldw	r2,-24(fp)
   2f404:	10000905 	stb	zero,36(r2)
   2f408:	00005206 	br	2f554 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\r')
   2f40c:	e0bff707 	ldb	r2,-36(fp)
   2f410:	10800358 	cmpnei	r2,r2,13
   2f414:	1000031e 	bne	r2,zero,2f424 <altera_avalon_lcd_16207_write+0x178>
    {
      sp->x = 0;
   2f418:	e0bffa17 	ldw	r2,-24(fp)
   2f41c:	10000845 	stb	zero,33(r2)
   2f420:	00004c06 	br	2f554 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\n')
   2f424:	e0bff707 	ldb	r2,-36(fp)
   2f428:	10800298 	cmpnei	r2,r2,10
   2f42c:	1000101e 	bne	r2,zero,2f470 <altera_avalon_lcd_16207_write+0x1c4>
    {
      sp->x = 0;
   2f430:	e0bffa17 	ldw	r2,-24(fp)
   2f434:	10000845 	stb	zero,33(r2)
      sp->y++;
   2f438:	e0bffa17 	ldw	r2,-24(fp)
   2f43c:	10800883 	ldbu	r2,34(r2)
   2f440:	10800044 	addi	r2,r2,1
   2f444:	1007883a 	mov	r3,r2
   2f448:	e0bffa17 	ldw	r2,-24(fp)
   2f44c:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   2f450:	e0bffa17 	ldw	r2,-24(fp)
   2f454:	10800883 	ldbu	r2,34(r2)
   2f458:	10803fcc 	andi	r2,r2,255
   2f45c:	108000f0 	cmpltui	r2,r2,3
   2f460:	10003c1e 	bne	r2,zero,2f554 <altera_avalon_lcd_16207_write+0x2a8>
        lcd_scroll_up(sp);
   2f464:	e13ffa17 	ldw	r4,-24(fp)
   2f468:	002ef000 	call	2ef00 <lcd_scroll_up>
   2f46c:	00003906 	br	2f554 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\b')
   2f470:	e0bff707 	ldb	r2,-36(fp)
   2f474:	10800218 	cmpnei	r2,r2,8
   2f478:	10000b1e 	bne	r2,zero,2f4a8 <altera_avalon_lcd_16207_write+0x1fc>
    {
      if (sp->x > 0)
   2f47c:	e0bffa17 	ldw	r2,-24(fp)
   2f480:	10800843 	ldbu	r2,33(r2)
   2f484:	10803fcc 	andi	r2,r2,255
   2f488:	10003226 	beq	r2,zero,2f554 <altera_avalon_lcd_16207_write+0x2a8>
        sp->x--;
   2f48c:	e0bffa17 	ldw	r2,-24(fp)
   2f490:	10800843 	ldbu	r2,33(r2)
   2f494:	10bfffc4 	addi	r2,r2,-1
   2f498:	1007883a 	mov	r3,r2
   2f49c:	e0bffa17 	ldw	r2,-24(fp)
   2f4a0:	10c00845 	stb	r3,33(r2)
   2f4a4:	00002b06 	br	2f554 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (isprint(c))
   2f4a8:	d0e01117 	ldw	r3,-32700(gp)
   2f4ac:	e0bff707 	ldb	r2,-36(fp)
   2f4b0:	10800044 	addi	r2,r2,1
   2f4b4:	1885883a 	add	r2,r3,r2
   2f4b8:	10800003 	ldbu	r2,0(r2)
   2f4bc:	10803fcc 	andi	r2,r2,255
   2f4c0:	1080201c 	xori	r2,r2,128
   2f4c4:	10bfe004 	addi	r2,r2,-128
   2f4c8:	108025cc 	andi	r2,r2,151
   2f4cc:	10002126 	beq	r2,zero,2f554 <altera_avalon_lcd_16207_write+0x2a8>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   2f4d0:	e0bffa17 	ldw	r2,-24(fp)
   2f4d4:	10800883 	ldbu	r2,34(r2)
   2f4d8:	10803fcc 	andi	r2,r2,255
   2f4dc:	108000b0 	cmpltui	r2,r2,2
   2f4e0:	1000021e 	bne	r2,zero,2f4ec <altera_avalon_lcd_16207_write+0x240>
        lcd_scroll_up(sp);
   2f4e4:	e13ffa17 	ldw	r4,-24(fp)
   2f4e8:	002ef000 	call	2ef00 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   2f4ec:	e0bffa17 	ldw	r2,-24(fp)
   2f4f0:	10800843 	ldbu	r2,33(r2)
   2f4f4:	10803fcc 	andi	r2,r2,255
   2f4f8:	10801428 	cmpgeui	r2,r2,80
   2f4fc:	10000f1e 	bne	r2,zero,2f53c <altera_avalon_lcd_16207_write+0x290>
        sp->line[sp->y].data[sp->x] = c;
   2f500:	e0bffa17 	ldw	r2,-24(fp)
   2f504:	10800883 	ldbu	r2,34(r2)
   2f508:	10c03fcc 	andi	r3,r2,255
   2f50c:	e0bffa17 	ldw	r2,-24(fp)
   2f510:	10800843 	ldbu	r2,33(r2)
   2f514:	14003fcc 	andi	r16,r2,255
   2f518:	e47ffa17 	ldw	r17,-24(fp)
   2f51c:	014018c4 	movi	r5,99
   2f520:	1809883a 	mov	r4,r3
   2f524:	00206240 	call	20624 <__mulsi3>
   2f528:	8885883a 	add	r2,r17,r2
   2f52c:	1405883a 	add	r2,r2,r16
   2f530:	10801004 	addi	r2,r2,64
   2f534:	e0fff703 	ldbu	r3,-36(fp)
   2f538:	10c00005 	stb	r3,0(r2)

      sp->x++;
   2f53c:	e0bffa17 	ldw	r2,-24(fp)
   2f540:	10800843 	ldbu	r2,33(r2)
   2f544:	10800044 	addi	r2,r2,1
   2f548:	1007883a 	mov	r3,r2
   2f54c:	e0bffa17 	ldw	r2,-24(fp)
   2f550:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   2f554:	e0bffb17 	ldw	r2,-20(fp)
   2f558:	10800044 	addi	r2,r2,1
   2f55c:	e0bffb15 	stw	r2,-20(fp)
   2f560:	e0fffb17 	ldw	r3,-20(fp)
   2f564:	e0bff617 	ldw	r2,-40(fp)
   2f568:	18bf6236 	bltu	r3,r2,2f2f4 <_gp+0xffff443c>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   2f56c:	00800404 	movi	r2,16
   2f570:	e0bff415 	stw	r2,-48(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2f574:	e03ff315 	stw	zero,-52(fp)
   2f578:	00003d06 	br	2f670 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   2f57c:	00801404 	movi	r2,80
   2f580:	e0bff515 	stw	r2,-44(fp)
   2f584:	00001306 	br	2f5d4 <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
   2f588:	e0bff517 	ldw	r2,-44(fp)
   2f58c:	143fffc4 	addi	r16,r2,-1
   2f590:	e47ffa17 	ldw	r17,-24(fp)
   2f594:	e0bff317 	ldw	r2,-52(fp)
   2f598:	014018c4 	movi	r5,99
   2f59c:	1009883a 	mov	r4,r2
   2f5a0:	00206240 	call	20624 <__mulsi3>
   2f5a4:	8885883a 	add	r2,r17,r2
   2f5a8:	1405883a 	add	r2,r2,r16
   2f5ac:	10801004 	addi	r2,r2,64
   2f5b0:	10800003 	ldbu	r2,0(r2)
   2f5b4:	10803fcc 	andi	r2,r2,255
   2f5b8:	1080201c 	xori	r2,r2,128
   2f5bc:	10bfe004 	addi	r2,r2,-128
   2f5c0:	10800820 	cmpeqi	r2,r2,32
   2f5c4:	10000626 	beq	r2,zero,2f5e0 <altera_avalon_lcd_16207_write+0x334>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   2f5c8:	e0bff517 	ldw	r2,-44(fp)
   2f5cc:	10bfffc4 	addi	r2,r2,-1
   2f5d0:	e0bff515 	stw	r2,-44(fp)
   2f5d4:	e0bff517 	ldw	r2,-44(fp)
   2f5d8:	00bfeb16 	blt	zero,r2,2f588 <_gp+0xffff46d0>
   2f5dc:	00000106 	br	2f5e4 <altera_avalon_lcd_16207_write+0x338>
      if (sp->line[y].data[width-1] != ' ')
        break;
   2f5e0:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   2f5e4:	e0bff517 	ldw	r2,-44(fp)
   2f5e8:	10800448 	cmpgei	r2,r2,17
   2f5ec:	1000031e 	bne	r2,zero,2f5fc <altera_avalon_lcd_16207_write+0x350>
      width = ALT_LCD_WIDTH;
   2f5f0:	00800404 	movi	r2,16
   2f5f4:	e0bff515 	stw	r2,-44(fp)
   2f5f8:	00000306 	br	2f608 <altera_avalon_lcd_16207_write+0x35c>
    else
      width++;
   2f5fc:	e0bff517 	ldw	r2,-44(fp)
   2f600:	10800044 	addi	r2,r2,1
   2f604:	e0bff515 	stw	r2,-44(fp)

    sp->line[y].width = width;
   2f608:	e0bff517 	ldw	r2,-44(fp)
   2f60c:	1023883a 	mov	r17,r2
   2f610:	e43ffa17 	ldw	r16,-24(fp)
   2f614:	e0bff317 	ldw	r2,-52(fp)
   2f618:	014018c4 	movi	r5,99
   2f61c:	1009883a 	mov	r4,r2
   2f620:	00206240 	call	20624 <__mulsi3>
   2f624:	8085883a 	add	r2,r16,r2
   2f628:	10802444 	addi	r2,r2,145
   2f62c:	14400005 	stb	r17,0(r2)
    if (widthmax < width)
   2f630:	e0fff417 	ldw	r3,-48(fp)
   2f634:	e0bff517 	ldw	r2,-44(fp)
   2f638:	1880020e 	bge	r3,r2,2f644 <altera_avalon_lcd_16207_write+0x398>
      widthmax = width;
   2f63c:	e0bff517 	ldw	r2,-44(fp)
   2f640:	e0bff415 	stw	r2,-48(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   2f644:	e43ffa17 	ldw	r16,-24(fp)
   2f648:	e0bff317 	ldw	r2,-52(fp)
   2f64c:	014018c4 	movi	r5,99
   2f650:	1009883a 	mov	r4,r2
   2f654:	00206240 	call	20624 <__mulsi3>
   2f658:	8085883a 	add	r2,r16,r2
   2f65c:	10802484 	addi	r2,r2,146
   2f660:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2f664:	e0bff317 	ldw	r2,-52(fp)
   2f668:	10800044 	addi	r2,r2,1
   2f66c:	e0bff315 	stw	r2,-52(fp)
   2f670:	e0bff317 	ldw	r2,-52(fp)
   2f674:	10800090 	cmplti	r2,r2,2
   2f678:	103fc01e 	bne	r2,zero,2f57c <_gp+0xffff46c4>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   2f67c:	e0bff417 	ldw	r2,-48(fp)
   2f680:	10800448 	cmpgei	r2,r2,17
   2f684:	1000031e 	bne	r2,zero,2f694 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
   2f688:	e0bffa17 	ldw	r2,-24(fp)
   2f68c:	10000985 	stb	zero,38(r2)
   2f690:	00003406 	br	2f764 <altera_avalon_lcd_16207_write+0x4b8>
  else
  {
    widthmax *= 2;
   2f694:	e0bff417 	ldw	r2,-48(fp)
   2f698:	1085883a 	add	r2,r2,r2
   2f69c:	e0bff415 	stw	r2,-48(fp)
    sp->scrollmax = widthmax;
   2f6a0:	e0bff417 	ldw	r2,-48(fp)
   2f6a4:	1007883a 	mov	r3,r2
   2f6a8:	e0bffa17 	ldw	r2,-24(fp)
   2f6ac:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2f6b0:	e03ff315 	stw	zero,-52(fp)
   2f6b4:	00002806 	br	2f758 <altera_avalon_lcd_16207_write+0x4ac>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   2f6b8:	e43ffa17 	ldw	r16,-24(fp)
   2f6bc:	e0bff317 	ldw	r2,-52(fp)
   2f6c0:	014018c4 	movi	r5,99
   2f6c4:	1009883a 	mov	r4,r2
   2f6c8:	00206240 	call	20624 <__mulsi3>
   2f6cc:	8085883a 	add	r2,r16,r2
   2f6d0:	10802444 	addi	r2,r2,145
   2f6d4:	10800003 	ldbu	r2,0(r2)
   2f6d8:	10803fcc 	andi	r2,r2,255
   2f6dc:	1080201c 	xori	r2,r2,128
   2f6e0:	10bfe004 	addi	r2,r2,-128
   2f6e4:	10800450 	cmplti	r2,r2,17
   2f6e8:	1000181e 	bne	r2,zero,2f74c <altera_avalon_lcd_16207_write+0x4a0>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   2f6ec:	e43ffa17 	ldw	r16,-24(fp)
   2f6f0:	e0bff317 	ldw	r2,-52(fp)
   2f6f4:	014018c4 	movi	r5,99
   2f6f8:	1009883a 	mov	r4,r2
   2f6fc:	00206240 	call	20624 <__mulsi3>
   2f700:	8085883a 	add	r2,r16,r2
   2f704:	10802444 	addi	r2,r2,145
   2f708:	10800003 	ldbu	r2,0(r2)
   2f70c:	10803fcc 	andi	r2,r2,255
   2f710:	1080201c 	xori	r2,r2,128
   2f714:	10bfe004 	addi	r2,r2,-128
   2f718:	1004923a 	slli	r2,r2,8
   2f71c:	e17ff417 	ldw	r5,-48(fp)
   2f720:	1009883a 	mov	r4,r2
   2f724:	002ab0c0 	call	2ab0c <__divsi3>
   2f728:	1023883a 	mov	r17,r2
   2f72c:	e43ffa17 	ldw	r16,-24(fp)
   2f730:	e0bff317 	ldw	r2,-52(fp)
   2f734:	014018c4 	movi	r5,99
   2f738:	1009883a 	mov	r4,r2
   2f73c:	00206240 	call	20624 <__mulsi3>
   2f740:	8085883a 	add	r2,r16,r2
   2f744:	10802484 	addi	r2,r2,146
   2f748:	14400005 	stb	r17,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2f74c:	e0bff317 	ldw	r2,-52(fp)
   2f750:	10800044 	addi	r2,r2,1
   2f754:	e0bff315 	stw	r2,-52(fp)
   2f758:	e0bff317 	ldw	r2,-52(fp)
   2f75c:	10800090 	cmplti	r2,r2,2
   2f760:	103fd51e 	bne	r2,zero,2f6b8 <_gp+0xffff4800>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   2f764:	e0bffa17 	ldw	r2,-24(fp)
   2f768:	10800943 	ldbu	r2,37(r2)
   2f76c:	10803fcc 	andi	r2,r2,255
   2f770:	e0bff915 	stw	r2,-28(fp)

    lcd_repaint_screen(sp);
   2f774:	e13ffa17 	ldw	r4,-24(fp)
   2f778:	002ecd80 	call	2ecd8 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   2f77c:	e0bffa17 	ldw	r2,-24(fp)
   2f780:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   2f784:	e0bffa17 	ldw	r2,-24(fp)
   2f788:	10800943 	ldbu	r2,37(r2)
   2f78c:	10c03fcc 	andi	r3,r2,255
   2f790:	e0bff917 	ldw	r2,-28(fp)
   2f794:	18800426 	beq	r3,r2,2f7a8 <altera_avalon_lcd_16207_write+0x4fc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   2f798:	e0bffa17 	ldw	r2,-24(fp)
   2f79c:	00c00044 	movi	r3,1
   2f7a0:	10c009c5 	stb	r3,39(r2)
  }
   2f7a4:	003fef06 	br	2f764 <_gp+0xffff48ac>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
   2f7a8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   2f7ac:	e0bffc17 	ldw	r2,-16(fp)
}
   2f7b0:	e6fffe04 	addi	sp,fp,-8
   2f7b4:	dfc00317 	ldw	ra,12(sp)
   2f7b8:	df000217 	ldw	fp,8(sp)
   2f7bc:	dc400117 	ldw	r17,4(sp)
   2f7c0:	dc000017 	ldw	r16,0(sp)
   2f7c4:	dec00404 	addi	sp,sp,16
   2f7c8:	f800283a 	ret

0002f7cc <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   2f7cc:	defffc04 	addi	sp,sp,-16
   2f7d0:	dfc00315 	stw	ra,12(sp)
   2f7d4:	df000215 	stw	fp,8(sp)
   2f7d8:	df000204 	addi	fp,sp,8
   2f7dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   2f7e0:	e0bfff17 	ldw	r2,-4(fp)
   2f7e4:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   2f7e8:	e0bffe17 	ldw	r2,-8(fp)
   2f7ec:	10800943 	ldbu	r2,37(r2)
   2f7f0:	10803fcc 	andi	r2,r2,255
   2f7f4:	10c00044 	addi	r3,r2,1
   2f7f8:	e0bffe17 	ldw	r2,-8(fp)
   2f7fc:	10800983 	ldbu	r2,38(r2)
   2f800:	10803fcc 	andi	r2,r2,255
   2f804:	18800316 	blt	r3,r2,2f814 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
   2f808:	e0bffe17 	ldw	r2,-8(fp)
   2f80c:	10000945 	stb	zero,37(r2)
   2f810:	00000606 	br	2f82c <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
   2f814:	e0bffe17 	ldw	r2,-8(fp)
   2f818:	10800943 	ldbu	r2,37(r2)
   2f81c:	10800044 	addi	r2,r2,1
   2f820:	1007883a 	mov	r3,r2
   2f824:	e0bffe17 	ldw	r2,-8(fp)
   2f828:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   2f82c:	e0bffe17 	ldw	r2,-8(fp)
   2f830:	10800983 	ldbu	r2,38(r2)
   2f834:	10803fcc 	andi	r2,r2,255
   2f838:	10000826 	beq	r2,zero,2f85c <alt_lcd_16207_timeout+0x90>
   2f83c:	e0bffe17 	ldw	r2,-8(fp)
   2f840:	108009c3 	ldbu	r2,39(r2)
   2f844:	10803fcc 	andi	r2,r2,255
   2f848:	1080201c 	xori	r2,r2,128
   2f84c:	10bfe004 	addi	r2,r2,-128
   2f850:	1000021e 	bne	r2,zero,2f85c <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
   2f854:	e13ffe17 	ldw	r4,-8(fp)
   2f858:	002ecd80 	call	2ecd8 <lcd_repaint_screen>

  return sp->period;
   2f85c:	e0bffe17 	ldw	r2,-8(fp)
   2f860:	10800717 	ldw	r2,28(r2)
}
   2f864:	e037883a 	mov	sp,fp
   2f868:	dfc00117 	ldw	ra,4(sp)
   2f86c:	df000017 	ldw	fp,0(sp)
   2f870:	dec00204 	addi	sp,sp,8
   2f874:	f800283a 	ret

0002f878 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   2f878:	defffc04 	addi	sp,sp,-16
   2f87c:	dfc00315 	stw	ra,12(sp)
   2f880:	df000215 	stw	fp,8(sp)
   2f884:	df000204 	addi	fp,sp,8
   2f888:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   2f88c:	e0bfff17 	ldw	r2,-4(fp)
   2f890:	10800017 	ldw	r2,0(r2)
   2f894:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   2f898:	e0bfff17 	ldw	r2,-4(fp)
   2f89c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   2f8a0:	010ea604 	movi	r4,15000
   2f8a4:	002ddbc0 	call	2ddbc <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   2f8a8:	e0bffe17 	ldw	r2,-8(fp)
   2f8ac:	00c00c04 	movi	r3,48
   2f8b0:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   2f8b4:	01040104 	movi	r4,4100
   2f8b8:	002ddbc0 	call	2ddbc <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   2f8bc:	e0bffe17 	ldw	r2,-8(fp)
   2f8c0:	00c00c04 	movi	r3,48
   2f8c4:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   2f8c8:	0100fa04 	movi	r4,1000
   2f8cc:	002ddbc0 	call	2ddbc <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   2f8d0:	e0bffe17 	ldw	r2,-8(fp)
   2f8d4:	00c00c04 	movi	r3,48
   2f8d8:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   2f8dc:	01400e04 	movi	r5,56
   2f8e0:	e13fff17 	ldw	r4,-4(fp)
   2f8e4:	002ea600 	call	2ea60 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   2f8e8:	01400204 	movi	r5,8
   2f8ec:	e13fff17 	ldw	r4,-4(fp)
   2f8f0:	002ea600 	call	2ea60 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   2f8f4:	e13fff17 	ldw	r4,-4(fp)
   2f8f8:	002ebf00 	call	2ebf0 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   2f8fc:	01400184 	movi	r5,6
   2f900:	e13fff17 	ldw	r4,-4(fp)
   2f904:	002ea600 	call	2ea60 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   2f908:	01400304 	movi	r5,12
   2f90c:	e13fff17 	ldw	r4,-4(fp)
   2f910:	002ea600 	call	2ea60 <lcd_write_command>

  sp->esccount = -1;
   2f914:	e0bfff17 	ldw	r2,-4(fp)
   2f918:	00ffffc4 	movi	r3,-1
   2f91c:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
   2f920:	e0bfff17 	ldw	r2,-4(fp)
   2f924:	10800a04 	addi	r2,r2,40
   2f928:	01800204 	movi	r6,8
   2f92c:	000b883a 	mov	r5,zero
   2f930:	1009883a 	mov	r4,r2
   2f934:	00264e40 	call	264e4 <memset>

  sp->scrollpos = 0;
   2f938:	e0bfff17 	ldw	r2,-4(fp)
   2f93c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   2f940:	e0bfff17 	ldw	r2,-4(fp)
   2f944:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   2f948:	e0bfff17 	ldw	r2,-4(fp)
   2f94c:	100009c5 	stb	zero,39(r2)
   2f950:	d0a72217 	ldw	r2,-25464(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   2f954:	01400284 	movi	r5,10
   2f958:	1009883a 	mov	r4,r2
   2f95c:	002ac040 	call	2ac04 <__udivsi3>
   2f960:	1007883a 	mov	r3,r2
   2f964:	e0bfff17 	ldw	r2,-4(fp)
   2f968:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   2f96c:	e0bfff17 	ldw	r2,-4(fp)
   2f970:	10c00104 	addi	r3,r2,4
   2f974:	e0bfff17 	ldw	r2,-4(fp)
   2f978:	10800717 	ldw	r2,28(r2)
   2f97c:	e1ffff17 	ldw	r7,-4(fp)
   2f980:	018000f4 	movhi	r6,3
   2f984:	31bdf304 	addi	r6,r6,-2100
   2f988:	100b883a 	mov	r5,r2
   2f98c:	1809883a 	mov	r4,r3
   2f990:	002fa0c0 	call	2fa0c <alt_alarm_start>
}
   2f994:	0001883a 	nop
   2f998:	e037883a 	mov	sp,fp
   2f99c:	dfc00117 	ldw	ra,4(sp)
   2f9a0:	df000017 	ldw	fp,0(sp)
   2f9a4:	dec00204 	addi	sp,sp,8
   2f9a8:	f800283a 	ret

0002f9ac <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2f9ac:	defffa04 	addi	sp,sp,-24
   2f9b0:	dfc00515 	stw	ra,20(sp)
   2f9b4:	df000415 	stw	fp,16(sp)
   2f9b8:	df000404 	addi	fp,sp,16
   2f9bc:	e13ffd15 	stw	r4,-12(fp)
   2f9c0:	e17ffe15 	stw	r5,-8(fp)
   2f9c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   2f9c8:	e0bffd17 	ldw	r2,-12(fp)
   2f9cc:	10800017 	ldw	r2,0(r2)
   2f9d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   2f9d4:	e0bffc17 	ldw	r2,-16(fp)
   2f9d8:	10c00a04 	addi	r3,r2,40
   2f9dc:	e0bffd17 	ldw	r2,-12(fp)
   2f9e0:	10800217 	ldw	r2,8(r2)
   2f9e4:	100f883a 	mov	r7,r2
   2f9e8:	e1bfff17 	ldw	r6,-4(fp)
   2f9ec:	e17ffe17 	ldw	r5,-8(fp)
   2f9f0:	1809883a 	mov	r4,r3
   2f9f4:	002f2ac0 	call	2f2ac <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   2f9f8:	e037883a 	mov	sp,fp
   2f9fc:	dfc00117 	ldw	ra,4(sp)
   2fa00:	df000017 	ldw	fp,0(sp)
   2fa04:	dec00204 	addi	sp,sp,8
   2fa08:	f800283a 	ret

0002fa0c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2fa0c:	defff504 	addi	sp,sp,-44
   2fa10:	df000a15 	stw	fp,40(sp)
   2fa14:	df000a04 	addi	fp,sp,40
   2fa18:	e13ffc15 	stw	r4,-16(fp)
   2fa1c:	e17ffd15 	stw	r5,-12(fp)
   2fa20:	e1bffe15 	stw	r6,-8(fp)
   2fa24:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2fa28:	e03ff615 	stw	zero,-40(fp)
   2fa2c:	d0a72217 	ldw	r2,-25464(gp)
  
  if (alt_ticks_per_second ())
   2fa30:	10003c26 	beq	r2,zero,2fb24 <alt_alarm_start+0x118>
  {
    if (alarm)
   2fa34:	e0bffc17 	ldw	r2,-16(fp)
   2fa38:	10003826 	beq	r2,zero,2fb1c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   2fa3c:	e0bffc17 	ldw	r2,-16(fp)
   2fa40:	e0fffe17 	ldw	r3,-8(fp)
   2fa44:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2fa48:	e0bffc17 	ldw	r2,-16(fp)
   2fa4c:	e0ffff17 	ldw	r3,-4(fp)
   2fa50:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2fa54:	0005303a 	rdctl	r2,status
   2fa58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2fa5c:	e0fff917 	ldw	r3,-28(fp)
   2fa60:	00bfff84 	movi	r2,-2
   2fa64:	1884703a 	and	r2,r3,r2
   2fa68:	1001703a 	wrctl	status,r2
  
  return context;
   2fa6c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   2fa70:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2fa74:	d0a72317 	ldw	r2,-25460(gp)
      
      current_nticks = alt_nticks();
   2fa78:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2fa7c:	e0fffd17 	ldw	r3,-12(fp)
   2fa80:	e0bff617 	ldw	r2,-40(fp)
   2fa84:	1885883a 	add	r2,r3,r2
   2fa88:	10c00044 	addi	r3,r2,1
   2fa8c:	e0bffc17 	ldw	r2,-16(fp)
   2fa90:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2fa94:	e0bffc17 	ldw	r2,-16(fp)
   2fa98:	10c00217 	ldw	r3,8(r2)
   2fa9c:	e0bff617 	ldw	r2,-40(fp)
   2faa0:	1880042e 	bgeu	r3,r2,2fab4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   2faa4:	e0bffc17 	ldw	r2,-16(fp)
   2faa8:	00c00044 	movi	r3,1
   2faac:	10c00405 	stb	r3,16(r2)
   2fab0:	00000206 	br	2fabc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   2fab4:	e0bffc17 	ldw	r2,-16(fp)
   2fab8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2fabc:	e0bffc17 	ldw	r2,-16(fp)
   2fac0:	d0e00f04 	addi	r3,gp,-32708
   2fac4:	e0fffa15 	stw	r3,-24(fp)
   2fac8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2facc:	e0bffb17 	ldw	r2,-20(fp)
   2fad0:	e0fffa17 	ldw	r3,-24(fp)
   2fad4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2fad8:	e0bffa17 	ldw	r2,-24(fp)
   2fadc:	10c00017 	ldw	r3,0(r2)
   2fae0:	e0bffb17 	ldw	r2,-20(fp)
   2fae4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2fae8:	e0bffa17 	ldw	r2,-24(fp)
   2faec:	10800017 	ldw	r2,0(r2)
   2faf0:	e0fffb17 	ldw	r3,-20(fp)
   2faf4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2faf8:	e0bffa17 	ldw	r2,-24(fp)
   2fafc:	e0fffb17 	ldw	r3,-20(fp)
   2fb00:	10c00015 	stw	r3,0(r2)
   2fb04:	e0bff817 	ldw	r2,-32(fp)
   2fb08:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2fb0c:	e0bff717 	ldw	r2,-36(fp)
   2fb10:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2fb14:	0005883a 	mov	r2,zero
   2fb18:	00000306 	br	2fb28 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   2fb1c:	00bffa84 	movi	r2,-22
   2fb20:	00000106 	br	2fb28 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   2fb24:	00bfde84 	movi	r2,-134
  }
}
   2fb28:	e037883a 	mov	sp,fp
   2fb2c:	df000017 	ldw	fp,0(sp)
   2fb30:	dec00104 	addi	sp,sp,4
   2fb34:	f800283a 	ret

0002fb38 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   2fb38:	defffa04 	addi	sp,sp,-24
   2fb3c:	dfc00515 	stw	ra,20(sp)
   2fb40:	df000415 	stw	fp,16(sp)
   2fb44:	df000404 	addi	fp,sp,16
   2fb48:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   2fb4c:	00800244 	movi	r2,9
   2fb50:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   2fb54:	014003f4 	movhi	r5,15
   2fb58:	29509004 	addi	r5,r5,16960
   2fb5c:	e13ffd17 	ldw	r4,-12(fp)
   2fb60:	00206240 	call	20624 <__mulsi3>
   2fb64:	100b883a 	mov	r5,r2
   2fb68:	0100bef4 	movhi	r4,763
   2fb6c:	213c2004 	addi	r4,r4,-3968
   2fb70:	002ac040 	call	2ac04 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   2fb74:	100b883a 	mov	r5,r2
   2fb78:	01200034 	movhi	r4,32768
   2fb7c:	213fffc4 	addi	r4,r4,-1
   2fb80:	002ac040 	call	2ac04 <__udivsi3>
   2fb84:	100b883a 	mov	r5,r2
   2fb88:	e13fff17 	ldw	r4,-4(fp)
   2fb8c:	002ac040 	call	2ac04 <__udivsi3>
   2fb90:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   2fb94:	e0bffe17 	ldw	r2,-8(fp)
   2fb98:	10002a26 	beq	r2,zero,2fc44 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   2fb9c:	e03ffc15 	stw	zero,-16(fp)
   2fba0:	00001706 	br	2fc00 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   2fba4:	00a00034 	movhi	r2,32768
   2fba8:	10bfffc4 	addi	r2,r2,-1
   2fbac:	10bfffc4 	addi	r2,r2,-1
   2fbb0:	103ffe1e 	bne	r2,zero,2fbac <_gp+0xffff4cf4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   2fbb4:	014003f4 	movhi	r5,15
   2fbb8:	29509004 	addi	r5,r5,16960
   2fbbc:	e13ffd17 	ldw	r4,-12(fp)
   2fbc0:	00206240 	call	20624 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   2fbc4:	100b883a 	mov	r5,r2
   2fbc8:	0100bef4 	movhi	r4,763
   2fbcc:	213c2004 	addi	r4,r4,-3968
   2fbd0:	002ac040 	call	2ac04 <__udivsi3>
   2fbd4:	100b883a 	mov	r5,r2
   2fbd8:	01200034 	movhi	r4,32768
   2fbdc:	213fffc4 	addi	r4,r4,-1
   2fbe0:	002ac040 	call	2ac04 <__udivsi3>
   2fbe4:	1007883a 	mov	r3,r2
   2fbe8:	e0bfff17 	ldw	r2,-4(fp)
   2fbec:	10c5c83a 	sub	r2,r2,r3
   2fbf0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   2fbf4:	e0bffc17 	ldw	r2,-16(fp)
   2fbf8:	10800044 	addi	r2,r2,1
   2fbfc:	e0bffc15 	stw	r2,-16(fp)
   2fc00:	e0fffc17 	ldw	r3,-16(fp)
   2fc04:	e0bffe17 	ldw	r2,-8(fp)
   2fc08:	18bfe616 	blt	r3,r2,2fba4 <_gp+0xffff4cec>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2fc0c:	014003f4 	movhi	r5,15
   2fc10:	29509004 	addi	r5,r5,16960
   2fc14:	e13ffd17 	ldw	r4,-12(fp)
   2fc18:	00206240 	call	20624 <__mulsi3>
   2fc1c:	100b883a 	mov	r5,r2
   2fc20:	0100bef4 	movhi	r4,763
   2fc24:	213c2004 	addi	r4,r4,-3968
   2fc28:	002ac040 	call	2ac04 <__udivsi3>
   2fc2c:	e17fff17 	ldw	r5,-4(fp)
   2fc30:	1009883a 	mov	r4,r2
   2fc34:	00206240 	call	20624 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2fc38:	10bfffc4 	addi	r2,r2,-1
   2fc3c:	103ffe1e 	bne	r2,zero,2fc38 <_gp+0xffff4d80>
   2fc40:	00000d06 	br	2fc78 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2fc44:	014003f4 	movhi	r5,15
   2fc48:	29509004 	addi	r5,r5,16960
   2fc4c:	e13ffd17 	ldw	r4,-12(fp)
   2fc50:	00206240 	call	20624 <__mulsi3>
   2fc54:	100b883a 	mov	r5,r2
   2fc58:	0100bef4 	movhi	r4,763
   2fc5c:	213c2004 	addi	r4,r4,-3968
   2fc60:	002ac040 	call	2ac04 <__udivsi3>
   2fc64:	e17fff17 	ldw	r5,-4(fp)
   2fc68:	1009883a 	mov	r4,r2
   2fc6c:	00206240 	call	20624 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2fc70:	10bfffc4 	addi	r2,r2,-1
   2fc74:	00bffe16 	blt	zero,r2,2fc70 <_gp+0xffff4db8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   2fc78:	0005883a 	mov	r2,zero
}
   2fc7c:	e037883a 	mov	sp,fp
   2fc80:	dfc00117 	ldw	ra,4(sp)
   2fc84:	df000017 	ldw	fp,0(sp)
   2fc88:	dec00204 	addi	sp,sp,8
   2fc8c:	f800283a 	ret

0002fc90 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2fc90:	deffff04 	addi	sp,sp,-4
   2fc94:	df000015 	stw	fp,0(sp)
   2fc98:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2fc9c:	0001883a 	nop
   2fca0:	e037883a 	mov	sp,fp
   2fca4:	df000017 	ldw	fp,0(sp)
   2fca8:	dec00104 	addi	sp,sp,4
   2fcac:	f800283a 	ret

0002fcb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2fcb0:	defffe04 	addi	sp,sp,-8
   2fcb4:	dfc00115 	stw	ra,4(sp)
   2fcb8:	df000015 	stw	fp,0(sp)
   2fcbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2fcc0:	d0a00b17 	ldw	r2,-32724(gp)
   2fcc4:	10000326 	beq	r2,zero,2fcd4 <alt_get_errno+0x24>
   2fcc8:	d0a00b17 	ldw	r2,-32724(gp)
   2fccc:	103ee83a 	callr	r2
   2fcd0:	00000106 	br	2fcd8 <alt_get_errno+0x28>
   2fcd4:	d0a71d04 	addi	r2,gp,-25484
}
   2fcd8:	e037883a 	mov	sp,fp
   2fcdc:	dfc00117 	ldw	ra,4(sp)
   2fce0:	df000017 	ldw	fp,0(sp)
   2fce4:	dec00204 	addi	sp,sp,8
   2fce8:	f800283a 	ret

0002fcec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2fcec:	defffa04 	addi	sp,sp,-24
   2fcf0:	dfc00515 	stw	ra,20(sp)
   2fcf4:	df000415 	stw	fp,16(sp)
   2fcf8:	df000404 	addi	fp,sp,16
   2fcfc:	e13ffe15 	stw	r4,-8(fp)
   2fd00:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2fd04:	e0bffe17 	ldw	r2,-8(fp)
   2fd08:	10000326 	beq	r2,zero,2fd18 <alt_dev_llist_insert+0x2c>
   2fd0c:	e0bffe17 	ldw	r2,-8(fp)
   2fd10:	10800217 	ldw	r2,8(r2)
   2fd14:	1000061e 	bne	r2,zero,2fd30 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2fd18:	002fcb00 	call	2fcb0 <alt_get_errno>
   2fd1c:	1007883a 	mov	r3,r2
   2fd20:	00800584 	movi	r2,22
   2fd24:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2fd28:	00bffa84 	movi	r2,-22
   2fd2c:	00001306 	br	2fd7c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2fd30:	e0bffe17 	ldw	r2,-8(fp)
   2fd34:	e0ffff17 	ldw	r3,-4(fp)
   2fd38:	e0fffc15 	stw	r3,-16(fp)
   2fd3c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2fd40:	e0bffd17 	ldw	r2,-12(fp)
   2fd44:	e0fffc17 	ldw	r3,-16(fp)
   2fd48:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2fd4c:	e0bffc17 	ldw	r2,-16(fp)
   2fd50:	10c00017 	ldw	r3,0(r2)
   2fd54:	e0bffd17 	ldw	r2,-12(fp)
   2fd58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2fd5c:	e0bffc17 	ldw	r2,-16(fp)
   2fd60:	10800017 	ldw	r2,0(r2)
   2fd64:	e0fffd17 	ldw	r3,-12(fp)
   2fd68:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2fd6c:	e0bffc17 	ldw	r2,-16(fp)
   2fd70:	e0fffd17 	ldw	r3,-12(fp)
   2fd74:	10c00015 	stw	r3,0(r2)

  return 0;  
   2fd78:	0005883a 	mov	r2,zero
}
   2fd7c:	e037883a 	mov	sp,fp
   2fd80:	dfc00117 	ldw	ra,4(sp)
   2fd84:	df000017 	ldw	fp,0(sp)
   2fd88:	dec00204 	addi	sp,sp,8
   2fd8c:	f800283a 	ret

0002fd90 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2fd90:	defffd04 	addi	sp,sp,-12
   2fd94:	dfc00215 	stw	ra,8(sp)
   2fd98:	df000115 	stw	fp,4(sp)
   2fd9c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2fda0:	008000f4 	movhi	r2,3
   2fda4:	10835104 	addi	r2,r2,3396
   2fda8:	e0bfff15 	stw	r2,-4(fp)
   2fdac:	00000606 	br	2fdc8 <_do_ctors+0x38>
        (*ctor) (); 
   2fdb0:	e0bfff17 	ldw	r2,-4(fp)
   2fdb4:	10800017 	ldw	r2,0(r2)
   2fdb8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2fdbc:	e0bfff17 	ldw	r2,-4(fp)
   2fdc0:	10bfff04 	addi	r2,r2,-4
   2fdc4:	e0bfff15 	stw	r2,-4(fp)
   2fdc8:	e0ffff17 	ldw	r3,-4(fp)
   2fdcc:	008000f4 	movhi	r2,3
   2fdd0:	10835204 	addi	r2,r2,3400
   2fdd4:	18bff62e 	bgeu	r3,r2,2fdb0 <_gp+0xffff4ef8>
        (*ctor) (); 
}
   2fdd8:	0001883a 	nop
   2fddc:	e037883a 	mov	sp,fp
   2fde0:	dfc00117 	ldw	ra,4(sp)
   2fde4:	df000017 	ldw	fp,0(sp)
   2fde8:	dec00204 	addi	sp,sp,8
   2fdec:	f800283a 	ret

0002fdf0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2fdf0:	defffd04 	addi	sp,sp,-12
   2fdf4:	dfc00215 	stw	ra,8(sp)
   2fdf8:	df000115 	stw	fp,4(sp)
   2fdfc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2fe00:	008000f4 	movhi	r2,3
   2fe04:	10835104 	addi	r2,r2,3396
   2fe08:	e0bfff15 	stw	r2,-4(fp)
   2fe0c:	00000606 	br	2fe28 <_do_dtors+0x38>
        (*dtor) (); 
   2fe10:	e0bfff17 	ldw	r2,-4(fp)
   2fe14:	10800017 	ldw	r2,0(r2)
   2fe18:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2fe1c:	e0bfff17 	ldw	r2,-4(fp)
   2fe20:	10bfff04 	addi	r2,r2,-4
   2fe24:	e0bfff15 	stw	r2,-4(fp)
   2fe28:	e0ffff17 	ldw	r3,-4(fp)
   2fe2c:	008000f4 	movhi	r2,3
   2fe30:	10835204 	addi	r2,r2,3400
   2fe34:	18bff62e 	bgeu	r3,r2,2fe10 <_gp+0xffff4f58>
        (*dtor) (); 
}
   2fe38:	0001883a 	nop
   2fe3c:	e037883a 	mov	sp,fp
   2fe40:	dfc00117 	ldw	ra,4(sp)
   2fe44:	df000017 	ldw	fp,0(sp)
   2fe48:	dec00204 	addi	sp,sp,8
   2fe4c:	f800283a 	ret

0002fe50 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2fe50:	deffff04 	addi	sp,sp,-4
   2fe54:	df000015 	stw	fp,0(sp)
   2fe58:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2fe5c:	0001883a 	nop
   2fe60:	e037883a 	mov	sp,fp
   2fe64:	df000017 	ldw	fp,0(sp)
   2fe68:	dec00104 	addi	sp,sp,4
   2fe6c:	f800283a 	ret

0002fe70 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2fe70:	defff904 	addi	sp,sp,-28
   2fe74:	dfc00615 	stw	ra,24(sp)
   2fe78:	df000515 	stw	fp,20(sp)
   2fe7c:	df000504 	addi	fp,sp,20
   2fe80:	e13ffc15 	stw	r4,-16(fp)
   2fe84:	e17ffd15 	stw	r5,-12(fp)
   2fe88:	e1bffe15 	stw	r6,-8(fp)
   2fe8c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2fe90:	e0800217 	ldw	r2,8(fp)
   2fe94:	d8800015 	stw	r2,0(sp)
   2fe98:	e1ffff17 	ldw	r7,-4(fp)
   2fe9c:	e1bffe17 	ldw	r6,-8(fp)
   2fea0:	e17ffd17 	ldw	r5,-12(fp)
   2fea4:	e13ffc17 	ldw	r4,-16(fp)
   2fea8:	00300200 	call	30020 <alt_iic_isr_register>
}  
   2feac:	e037883a 	mov	sp,fp
   2feb0:	dfc00117 	ldw	ra,4(sp)
   2feb4:	df000017 	ldw	fp,0(sp)
   2feb8:	dec00204 	addi	sp,sp,8
   2febc:	f800283a 	ret

0002fec0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2fec0:	defff904 	addi	sp,sp,-28
   2fec4:	df000615 	stw	fp,24(sp)
   2fec8:	df000604 	addi	fp,sp,24
   2fecc:	e13ffe15 	stw	r4,-8(fp)
   2fed0:	e17fff15 	stw	r5,-4(fp)
   2fed4:	e0bfff17 	ldw	r2,-4(fp)
   2fed8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2fedc:	0005303a 	rdctl	r2,status
   2fee0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2fee4:	e0fffb17 	ldw	r3,-20(fp)
   2fee8:	00bfff84 	movi	r2,-2
   2feec:	1884703a 	and	r2,r3,r2
   2fef0:	1001703a 	wrctl	status,r2
  
  return context;
   2fef4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2fef8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2fefc:	00c00044 	movi	r3,1
   2ff00:	e0bffa17 	ldw	r2,-24(fp)
   2ff04:	1884983a 	sll	r2,r3,r2
   2ff08:	1007883a 	mov	r3,r2
   2ff0c:	d0a72117 	ldw	r2,-25468(gp)
   2ff10:	1884b03a 	or	r2,r3,r2
   2ff14:	d0a72115 	stw	r2,-25468(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2ff18:	d0a72117 	ldw	r2,-25468(gp)
   2ff1c:	100170fa 	wrctl	ienable,r2
   2ff20:	e0bffc17 	ldw	r2,-16(fp)
   2ff24:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ff28:	e0bffd17 	ldw	r2,-12(fp)
   2ff2c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2ff30:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2ff34:	0001883a 	nop
}
   2ff38:	e037883a 	mov	sp,fp
   2ff3c:	df000017 	ldw	fp,0(sp)
   2ff40:	dec00104 	addi	sp,sp,4
   2ff44:	f800283a 	ret

0002ff48 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2ff48:	defff904 	addi	sp,sp,-28
   2ff4c:	df000615 	stw	fp,24(sp)
   2ff50:	df000604 	addi	fp,sp,24
   2ff54:	e13ffe15 	stw	r4,-8(fp)
   2ff58:	e17fff15 	stw	r5,-4(fp)
   2ff5c:	e0bfff17 	ldw	r2,-4(fp)
   2ff60:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ff64:	0005303a 	rdctl	r2,status
   2ff68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ff6c:	e0fffb17 	ldw	r3,-20(fp)
   2ff70:	00bfff84 	movi	r2,-2
   2ff74:	1884703a 	and	r2,r3,r2
   2ff78:	1001703a 	wrctl	status,r2
  
  return context;
   2ff7c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2ff80:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2ff84:	00c00044 	movi	r3,1
   2ff88:	e0bffa17 	ldw	r2,-24(fp)
   2ff8c:	1884983a 	sll	r2,r3,r2
   2ff90:	0084303a 	nor	r2,zero,r2
   2ff94:	1007883a 	mov	r3,r2
   2ff98:	d0a72117 	ldw	r2,-25468(gp)
   2ff9c:	1884703a 	and	r2,r3,r2
   2ffa0:	d0a72115 	stw	r2,-25468(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2ffa4:	d0a72117 	ldw	r2,-25468(gp)
   2ffa8:	100170fa 	wrctl	ienable,r2
   2ffac:	e0bffc17 	ldw	r2,-16(fp)
   2ffb0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ffb4:	e0bffd17 	ldw	r2,-12(fp)
   2ffb8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2ffbc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   2ffc0:	0001883a 	nop
}
   2ffc4:	e037883a 	mov	sp,fp
   2ffc8:	df000017 	ldw	fp,0(sp)
   2ffcc:	dec00104 	addi	sp,sp,4
   2ffd0:	f800283a 	ret

0002ffd4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2ffd4:	defffc04 	addi	sp,sp,-16
   2ffd8:	df000315 	stw	fp,12(sp)
   2ffdc:	df000304 	addi	fp,sp,12
   2ffe0:	e13ffe15 	stw	r4,-8(fp)
   2ffe4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2ffe8:	000530fa 	rdctl	r2,ienable
   2ffec:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2fff0:	00c00044 	movi	r3,1
   2fff4:	e0bfff17 	ldw	r2,-4(fp)
   2fff8:	1884983a 	sll	r2,r3,r2
   2fffc:	1007883a 	mov	r3,r2
   30000:	e0bffd17 	ldw	r2,-12(fp)
   30004:	1884703a 	and	r2,r3,r2
   30008:	1004c03a 	cmpne	r2,r2,zero
   3000c:	10803fcc 	andi	r2,r2,255
}
   30010:	e037883a 	mov	sp,fp
   30014:	df000017 	ldw	fp,0(sp)
   30018:	dec00104 	addi	sp,sp,4
   3001c:	f800283a 	ret

00030020 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   30020:	defff504 	addi	sp,sp,-44
   30024:	dfc00a15 	stw	ra,40(sp)
   30028:	df000915 	stw	fp,36(sp)
   3002c:	df000904 	addi	fp,sp,36
   30030:	e13ffc15 	stw	r4,-16(fp)
   30034:	e17ffd15 	stw	r5,-12(fp)
   30038:	e1bffe15 	stw	r6,-8(fp)
   3003c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   30040:	00bffa84 	movi	r2,-22
   30044:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   30048:	e0bffd17 	ldw	r2,-12(fp)
   3004c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   30050:	e0bff817 	ldw	r2,-32(fp)
   30054:	10800808 	cmpgei	r2,r2,32
   30058:	1000271e 	bne	r2,zero,300f8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3005c:	0005303a 	rdctl	r2,status
   30060:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30064:	e0fffb17 	ldw	r3,-20(fp)
   30068:	00bfff84 	movi	r2,-2
   3006c:	1884703a 	and	r2,r3,r2
   30070:	1001703a 	wrctl	status,r2
  
  return context;
   30074:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   30078:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   3007c:	008000f4 	movhi	r2,3
   30080:	1092dd04 	addi	r2,r2,19316
   30084:	e0fff817 	ldw	r3,-32(fp)
   30088:	180690fa 	slli	r3,r3,3
   3008c:	10c5883a 	add	r2,r2,r3
   30090:	e0fffe17 	ldw	r3,-8(fp)
   30094:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   30098:	008000f4 	movhi	r2,3
   3009c:	1092dd04 	addi	r2,r2,19316
   300a0:	e0fff817 	ldw	r3,-32(fp)
   300a4:	180690fa 	slli	r3,r3,3
   300a8:	10c5883a 	add	r2,r2,r3
   300ac:	10800104 	addi	r2,r2,4
   300b0:	e0ffff17 	ldw	r3,-4(fp)
   300b4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   300b8:	e0bffe17 	ldw	r2,-8(fp)
   300bc:	10000526 	beq	r2,zero,300d4 <alt_iic_isr_register+0xb4>
   300c0:	e0bff817 	ldw	r2,-32(fp)
   300c4:	100b883a 	mov	r5,r2
   300c8:	e13ffc17 	ldw	r4,-16(fp)
   300cc:	002fec00 	call	2fec0 <alt_ic_irq_enable>
   300d0:	00000406 	br	300e4 <alt_iic_isr_register+0xc4>
   300d4:	e0bff817 	ldw	r2,-32(fp)
   300d8:	100b883a 	mov	r5,r2
   300dc:	e13ffc17 	ldw	r4,-16(fp)
   300e0:	002ff480 	call	2ff48 <alt_ic_irq_disable>
   300e4:	e0bff715 	stw	r2,-36(fp)
   300e8:	e0bffa17 	ldw	r2,-24(fp)
   300ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   300f0:	e0bff917 	ldw	r2,-28(fp)
   300f4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   300f8:	e0bff717 	ldw	r2,-36(fp)
}
   300fc:	e037883a 	mov	sp,fp
   30100:	dfc00117 	ldw	ra,4(sp)
   30104:	df000017 	ldw	fp,0(sp)
   30108:	dec00204 	addi	sp,sp,8
   3010c:	f800283a 	ret

00030110 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   30110:	defff804 	addi	sp,sp,-32
   30114:	dfc00715 	stw	ra,28(sp)
   30118:	df000615 	stw	fp,24(sp)
   3011c:	dc000515 	stw	r16,20(sp)
   30120:	df000604 	addi	fp,sp,24
   30124:	e13ffb15 	stw	r4,-20(fp)
   30128:	e17ffc15 	stw	r5,-16(fp)
   3012c:	e1bffd15 	stw	r6,-12(fp)
   30130:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   30134:	e1bffe17 	ldw	r6,-8(fp)
   30138:	e17ffd17 	ldw	r5,-12(fp)
   3013c:	e13ffc17 	ldw	r4,-16(fp)
   30140:	00303980 	call	30398 <open>
   30144:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   30148:	e0bffa17 	ldw	r2,-24(fp)
   3014c:	10002216 	blt	r2,zero,301d8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   30150:	040000f4 	movhi	r16,3
   30154:	8406ee04 	addi	r16,r16,7096
   30158:	e0bffa17 	ldw	r2,-24(fp)
   3015c:	01400304 	movi	r5,12
   30160:	1009883a 	mov	r4,r2
   30164:	00206240 	call	20624 <__mulsi3>
   30168:	8085883a 	add	r2,r16,r2
   3016c:	10c00017 	ldw	r3,0(r2)
   30170:	e0bffb17 	ldw	r2,-20(fp)
   30174:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   30178:	040000f4 	movhi	r16,3
   3017c:	8406ee04 	addi	r16,r16,7096
   30180:	e0bffa17 	ldw	r2,-24(fp)
   30184:	01400304 	movi	r5,12
   30188:	1009883a 	mov	r4,r2
   3018c:	00206240 	call	20624 <__mulsi3>
   30190:	8085883a 	add	r2,r16,r2
   30194:	10800104 	addi	r2,r2,4
   30198:	10c00017 	ldw	r3,0(r2)
   3019c:	e0bffb17 	ldw	r2,-20(fp)
   301a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   301a4:	040000f4 	movhi	r16,3
   301a8:	8406ee04 	addi	r16,r16,7096
   301ac:	e0bffa17 	ldw	r2,-24(fp)
   301b0:	01400304 	movi	r5,12
   301b4:	1009883a 	mov	r4,r2
   301b8:	00206240 	call	20624 <__mulsi3>
   301bc:	8085883a 	add	r2,r16,r2
   301c0:	10800204 	addi	r2,r2,8
   301c4:	10c00017 	ldw	r3,0(r2)
   301c8:	e0bffb17 	ldw	r2,-20(fp)
   301cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   301d0:	e13ffa17 	ldw	r4,-24(fp)
   301d4:	002dc880 	call	2dc88 <alt_release_fd>
  }
} 
   301d8:	0001883a 	nop
   301dc:	e6ffff04 	addi	sp,fp,-4
   301e0:	dfc00217 	ldw	ra,8(sp)
   301e4:	df000117 	ldw	fp,4(sp)
   301e8:	dc000017 	ldw	r16,0(sp)
   301ec:	dec00304 	addi	sp,sp,12
   301f0:	f800283a 	ret

000301f4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   301f4:	defffb04 	addi	sp,sp,-20
   301f8:	dfc00415 	stw	ra,16(sp)
   301fc:	df000315 	stw	fp,12(sp)
   30200:	df000304 	addi	fp,sp,12
   30204:	e13ffd15 	stw	r4,-12(fp)
   30208:	e17ffe15 	stw	r5,-8(fp)
   3020c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   30210:	01c07fc4 	movi	r7,511
   30214:	01800044 	movi	r6,1
   30218:	e17ffd17 	ldw	r5,-12(fp)
   3021c:	010000f4 	movhi	r4,3
   30220:	2106f104 	addi	r4,r4,7108
   30224:	00301100 	call	30110 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   30228:	01c07fc4 	movi	r7,511
   3022c:	000d883a 	mov	r6,zero
   30230:	e17ffe17 	ldw	r5,-8(fp)
   30234:	010000f4 	movhi	r4,3
   30238:	2106ee04 	addi	r4,r4,7096
   3023c:	00301100 	call	30110 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   30240:	01c07fc4 	movi	r7,511
   30244:	01800044 	movi	r6,1
   30248:	e17fff17 	ldw	r5,-4(fp)
   3024c:	010000f4 	movhi	r4,3
   30250:	2106f404 	addi	r4,r4,7120
   30254:	00301100 	call	30110 <alt_open_fd>
}  
   30258:	0001883a 	nop
   3025c:	e037883a 	mov	sp,fp
   30260:	dfc00117 	ldw	ra,4(sp)
   30264:	df000017 	ldw	fp,0(sp)
   30268:	dec00204 	addi	sp,sp,8
   3026c:	f800283a 	ret

00030270 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30270:	defffe04 	addi	sp,sp,-8
   30274:	dfc00115 	stw	ra,4(sp)
   30278:	df000015 	stw	fp,0(sp)
   3027c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30280:	d0a00b17 	ldw	r2,-32724(gp)
   30284:	10000326 	beq	r2,zero,30294 <alt_get_errno+0x24>
   30288:	d0a00b17 	ldw	r2,-32724(gp)
   3028c:	103ee83a 	callr	r2
   30290:	00000106 	br	30298 <alt_get_errno+0x28>
   30294:	d0a71d04 	addi	r2,gp,-25484
}
   30298:	e037883a 	mov	sp,fp
   3029c:	dfc00117 	ldw	ra,4(sp)
   302a0:	df000017 	ldw	fp,0(sp)
   302a4:	dec00204 	addi	sp,sp,8
   302a8:	f800283a 	ret

000302ac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   302ac:	defffb04 	addi	sp,sp,-20
   302b0:	dfc00415 	stw	ra,16(sp)
   302b4:	df000315 	stw	fp,12(sp)
   302b8:	dc000215 	stw	r16,8(sp)
   302bc:	df000304 	addi	fp,sp,12
   302c0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   302c4:	e0bffe17 	ldw	r2,-8(fp)
   302c8:	10800217 	ldw	r2,8(r2)
   302cc:	10d00034 	orhi	r3,r2,16384
   302d0:	e0bffe17 	ldw	r2,-8(fp)
   302d4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   302d8:	e03ffd15 	stw	zero,-12(fp)
   302dc:	00002306 	br	3036c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   302e0:	040000f4 	movhi	r16,3
   302e4:	8406ee04 	addi	r16,r16,7096
   302e8:	e0bffd17 	ldw	r2,-12(fp)
   302ec:	01400304 	movi	r5,12
   302f0:	1009883a 	mov	r4,r2
   302f4:	00206240 	call	20624 <__mulsi3>
   302f8:	8085883a 	add	r2,r16,r2
   302fc:	10c00017 	ldw	r3,0(r2)
   30300:	e0bffe17 	ldw	r2,-8(fp)
   30304:	10800017 	ldw	r2,0(r2)
   30308:	1880151e 	bne	r3,r2,30360 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   3030c:	040000f4 	movhi	r16,3
   30310:	8406ee04 	addi	r16,r16,7096
   30314:	e0bffd17 	ldw	r2,-12(fp)
   30318:	01400304 	movi	r5,12
   3031c:	1009883a 	mov	r4,r2
   30320:	00206240 	call	20624 <__mulsi3>
   30324:	8085883a 	add	r2,r16,r2
   30328:	10800204 	addi	r2,r2,8
   3032c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   30330:	10000b0e 	bge	r2,zero,30360 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   30334:	01400304 	movi	r5,12
   30338:	e13ffd17 	ldw	r4,-12(fp)
   3033c:	00206240 	call	20624 <__mulsi3>
   30340:	1007883a 	mov	r3,r2
   30344:	008000f4 	movhi	r2,3
   30348:	1086ee04 	addi	r2,r2,7096
   3034c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   30350:	e0bffe17 	ldw	r2,-8(fp)
   30354:	18800226 	beq	r3,r2,30360 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   30358:	00bffcc4 	movi	r2,-13
   3035c:	00000806 	br	30380 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   30360:	e0bffd17 	ldw	r2,-12(fp)
   30364:	10800044 	addi	r2,r2,1
   30368:	e0bffd15 	stw	r2,-12(fp)
   3036c:	d0a00a17 	ldw	r2,-32728(gp)
   30370:	1007883a 	mov	r3,r2
   30374:	e0bffd17 	ldw	r2,-12(fp)
   30378:	18bfd92e 	bgeu	r3,r2,302e0 <_gp+0xffff5428>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   3037c:	0005883a 	mov	r2,zero
}
   30380:	e6ffff04 	addi	sp,fp,-4
   30384:	dfc00217 	ldw	ra,8(sp)
   30388:	df000117 	ldw	fp,4(sp)
   3038c:	dc000017 	ldw	r16,0(sp)
   30390:	dec00304 	addi	sp,sp,12
   30394:	f800283a 	ret

00030398 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   30398:	defff604 	addi	sp,sp,-40
   3039c:	dfc00915 	stw	ra,36(sp)
   303a0:	df000815 	stw	fp,32(sp)
   303a4:	df000804 	addi	fp,sp,32
   303a8:	e13ffd15 	stw	r4,-12(fp)
   303ac:	e17ffe15 	stw	r5,-8(fp)
   303b0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   303b4:	00bfffc4 	movi	r2,-1
   303b8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   303bc:	00bffb44 	movi	r2,-19
   303c0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   303c4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   303c8:	d1600804 	addi	r5,gp,-32736
   303cc:	e13ffd17 	ldw	r4,-12(fp)
   303d0:	00306bc0 	call	306bc <alt_find_dev>
   303d4:	e0bff815 	stw	r2,-32(fp)
   303d8:	e0bff817 	ldw	r2,-32(fp)
   303dc:	1000051e 	bne	r2,zero,303f4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   303e0:	e13ffd17 	ldw	r4,-12(fp)
   303e4:	003074c0 	call	3074c <alt_find_file>
   303e8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   303ec:	00800044 	movi	r2,1
   303f0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   303f4:	e0bff817 	ldw	r2,-32(fp)
   303f8:	10002b26 	beq	r2,zero,304a8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   303fc:	e13ff817 	ldw	r4,-32(fp)
   30400:	00308540 	call	30854 <alt_get_fd>
   30404:	e0bff915 	stw	r2,-28(fp)
   30408:	e0bff917 	ldw	r2,-28(fp)
   3040c:	1000030e 	bge	r2,zero,3041c <open+0x84>
    {
      status = index;
   30410:	e0bff917 	ldw	r2,-28(fp)
   30414:	e0bffa15 	stw	r2,-24(fp)
   30418:	00002506 	br	304b0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   3041c:	01400304 	movi	r5,12
   30420:	e13ff917 	ldw	r4,-28(fp)
   30424:	00206240 	call	20624 <__mulsi3>
   30428:	1007883a 	mov	r3,r2
   3042c:	008000f4 	movhi	r2,3
   30430:	1086ee04 	addi	r2,r2,7096
   30434:	1885883a 	add	r2,r3,r2
   30438:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   3043c:	e0fffe17 	ldw	r3,-8(fp)
   30440:	00900034 	movhi	r2,16384
   30444:	10bfffc4 	addi	r2,r2,-1
   30448:	1886703a 	and	r3,r3,r2
   3044c:	e0bffc17 	ldw	r2,-16(fp)
   30450:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   30454:	e0bffb17 	ldw	r2,-20(fp)
   30458:	1000051e 	bne	r2,zero,30470 <open+0xd8>
   3045c:	e13ffc17 	ldw	r4,-16(fp)
   30460:	00302ac0 	call	302ac <alt_file_locked>
   30464:	e0bffa15 	stw	r2,-24(fp)
   30468:	e0bffa17 	ldw	r2,-24(fp)
   3046c:	10001016 	blt	r2,zero,304b0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   30470:	e0bff817 	ldw	r2,-32(fp)
   30474:	10800317 	ldw	r2,12(r2)
   30478:	10000826 	beq	r2,zero,3049c <open+0x104>
   3047c:	e0bff817 	ldw	r2,-32(fp)
   30480:	10800317 	ldw	r2,12(r2)
   30484:	e1ffff17 	ldw	r7,-4(fp)
   30488:	e1bffe17 	ldw	r6,-8(fp)
   3048c:	e17ffd17 	ldw	r5,-12(fp)
   30490:	e13ffc17 	ldw	r4,-16(fp)
   30494:	103ee83a 	callr	r2
   30498:	00000106 	br	304a0 <open+0x108>
   3049c:	0005883a 	mov	r2,zero
   304a0:	e0bffa15 	stw	r2,-24(fp)
   304a4:	00000206 	br	304b0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   304a8:	00bffb44 	movi	r2,-19
   304ac:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   304b0:	e0bffa17 	ldw	r2,-24(fp)
   304b4:	1000090e 	bge	r2,zero,304dc <open+0x144>
  {
    alt_release_fd (index);  
   304b8:	e13ff917 	ldw	r4,-28(fp)
   304bc:	002dc880 	call	2dc88 <alt_release_fd>
    ALT_ERRNO = -status;
   304c0:	00302700 	call	30270 <alt_get_errno>
   304c4:	1007883a 	mov	r3,r2
   304c8:	e0bffa17 	ldw	r2,-24(fp)
   304cc:	0085c83a 	sub	r2,zero,r2
   304d0:	18800015 	stw	r2,0(r3)
    return -1;
   304d4:	00bfffc4 	movi	r2,-1
   304d8:	00000106 	br	304e0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   304dc:	e0bff917 	ldw	r2,-28(fp)
}
   304e0:	e037883a 	mov	sp,fp
   304e4:	dfc00117 	ldw	ra,4(sp)
   304e8:	df000017 	ldw	fp,0(sp)
   304ec:	dec00204 	addi	sp,sp,8
   304f0:	f800283a 	ret

000304f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   304f4:	defffa04 	addi	sp,sp,-24
   304f8:	df000515 	stw	fp,20(sp)
   304fc:	df000504 	addi	fp,sp,20
   30500:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30504:	0005303a 	rdctl	r2,status
   30508:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3050c:	e0fffc17 	ldw	r3,-16(fp)
   30510:	00bfff84 	movi	r2,-2
   30514:	1884703a 	and	r2,r3,r2
   30518:	1001703a 	wrctl	status,r2
  
  return context;
   3051c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   30520:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   30524:	e0bfff17 	ldw	r2,-4(fp)
   30528:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   3052c:	e0bffd17 	ldw	r2,-12(fp)
   30530:	10800017 	ldw	r2,0(r2)
   30534:	e0fffd17 	ldw	r3,-12(fp)
   30538:	18c00117 	ldw	r3,4(r3)
   3053c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   30540:	e0bffd17 	ldw	r2,-12(fp)
   30544:	10800117 	ldw	r2,4(r2)
   30548:	e0fffd17 	ldw	r3,-12(fp)
   3054c:	18c00017 	ldw	r3,0(r3)
   30550:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   30554:	e0bffd17 	ldw	r2,-12(fp)
   30558:	e0fffd17 	ldw	r3,-12(fp)
   3055c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   30560:	e0bffd17 	ldw	r2,-12(fp)
   30564:	e0fffd17 	ldw	r3,-12(fp)
   30568:	10c00015 	stw	r3,0(r2)
   3056c:	e0bffb17 	ldw	r2,-20(fp)
   30570:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30574:	e0bffe17 	ldw	r2,-8(fp)
   30578:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   3057c:	0001883a 	nop
   30580:	e037883a 	mov	sp,fp
   30584:	df000017 	ldw	fp,0(sp)
   30588:	dec00104 	addi	sp,sp,4
   3058c:	f800283a 	ret

00030590 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   30590:	defffb04 	addi	sp,sp,-20
   30594:	dfc00415 	stw	ra,16(sp)
   30598:	df000315 	stw	fp,12(sp)
   3059c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   305a0:	d0a00f17 	ldw	r2,-32708(gp)
   305a4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   305a8:	d0a72317 	ldw	r2,-25460(gp)
   305ac:	10800044 	addi	r2,r2,1
   305b0:	d0a72315 	stw	r2,-25460(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   305b4:	00002e06 	br	30670 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   305b8:	e0bffd17 	ldw	r2,-12(fp)
   305bc:	10800017 	ldw	r2,0(r2)
   305c0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   305c4:	e0bffd17 	ldw	r2,-12(fp)
   305c8:	10800403 	ldbu	r2,16(r2)
   305cc:	10803fcc 	andi	r2,r2,255
   305d0:	10000426 	beq	r2,zero,305e4 <alt_tick+0x54>
   305d4:	d0a72317 	ldw	r2,-25460(gp)
   305d8:	1000021e 	bne	r2,zero,305e4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   305dc:	e0bffd17 	ldw	r2,-12(fp)
   305e0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   305e4:	e0bffd17 	ldw	r2,-12(fp)
   305e8:	10800217 	ldw	r2,8(r2)
   305ec:	d0e72317 	ldw	r3,-25460(gp)
   305f0:	18801d36 	bltu	r3,r2,30668 <alt_tick+0xd8>
   305f4:	e0bffd17 	ldw	r2,-12(fp)
   305f8:	10800403 	ldbu	r2,16(r2)
   305fc:	10803fcc 	andi	r2,r2,255
   30600:	1000191e 	bne	r2,zero,30668 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   30604:	e0bffd17 	ldw	r2,-12(fp)
   30608:	10800317 	ldw	r2,12(r2)
   3060c:	e0fffd17 	ldw	r3,-12(fp)
   30610:	18c00517 	ldw	r3,20(r3)
   30614:	1809883a 	mov	r4,r3
   30618:	103ee83a 	callr	r2
   3061c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   30620:	e0bfff17 	ldw	r2,-4(fp)
   30624:	1000031e 	bne	r2,zero,30634 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   30628:	e13ffd17 	ldw	r4,-12(fp)
   3062c:	00304f40 	call	304f4 <alt_alarm_stop>
   30630:	00000d06 	br	30668 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   30634:	e0bffd17 	ldw	r2,-12(fp)
   30638:	10c00217 	ldw	r3,8(r2)
   3063c:	e0bfff17 	ldw	r2,-4(fp)
   30640:	1887883a 	add	r3,r3,r2
   30644:	e0bffd17 	ldw	r2,-12(fp)
   30648:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   3064c:	e0bffd17 	ldw	r2,-12(fp)
   30650:	10c00217 	ldw	r3,8(r2)
   30654:	d0a72317 	ldw	r2,-25460(gp)
   30658:	1880032e 	bgeu	r3,r2,30668 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   3065c:	e0bffd17 	ldw	r2,-12(fp)
   30660:	00c00044 	movi	r3,1
   30664:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   30668:	e0bffe17 	ldw	r2,-8(fp)
   3066c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   30670:	e0fffd17 	ldw	r3,-12(fp)
   30674:	d0a00f04 	addi	r2,gp,-32708
   30678:	18bfcf1e 	bne	r3,r2,305b8 <_gp+0xffff5700>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   3067c:	0001883a 	nop
}
   30680:	0001883a 	nop
   30684:	e037883a 	mov	sp,fp
   30688:	dfc00117 	ldw	ra,4(sp)
   3068c:	df000017 	ldw	fp,0(sp)
   30690:	dec00204 	addi	sp,sp,8
   30694:	f800283a 	ret

00030698 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   30698:	deffff04 	addi	sp,sp,-4
   3069c:	df000015 	stw	fp,0(sp)
   306a0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   306a4:	000170fa 	wrctl	ienable,zero
}
   306a8:	0001883a 	nop
   306ac:	e037883a 	mov	sp,fp
   306b0:	df000017 	ldw	fp,0(sp)
   306b4:	dec00104 	addi	sp,sp,4
   306b8:	f800283a 	ret

000306bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   306bc:	defffa04 	addi	sp,sp,-24
   306c0:	dfc00515 	stw	ra,20(sp)
   306c4:	df000415 	stw	fp,16(sp)
   306c8:	df000404 	addi	fp,sp,16
   306cc:	e13ffe15 	stw	r4,-8(fp)
   306d0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   306d4:	e0bfff17 	ldw	r2,-4(fp)
   306d8:	10800017 	ldw	r2,0(r2)
   306dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   306e0:	e13ffe17 	ldw	r4,-8(fp)
   306e4:	002078c0 	call	2078c <strlen>
   306e8:	10800044 	addi	r2,r2,1
   306ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   306f0:	00000d06 	br	30728 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   306f4:	e0bffc17 	ldw	r2,-16(fp)
   306f8:	10800217 	ldw	r2,8(r2)
   306fc:	e0fffd17 	ldw	r3,-12(fp)
   30700:	180d883a 	mov	r6,r3
   30704:	e17ffe17 	ldw	r5,-8(fp)
   30708:	1009883a 	mov	r4,r2
   3070c:	0030a000 	call	30a00 <memcmp>
   30710:	1000021e 	bne	r2,zero,3071c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   30714:	e0bffc17 	ldw	r2,-16(fp)
   30718:	00000706 	br	30738 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   3071c:	e0bffc17 	ldw	r2,-16(fp)
   30720:	10800017 	ldw	r2,0(r2)
   30724:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   30728:	e0fffc17 	ldw	r3,-16(fp)
   3072c:	e0bfff17 	ldw	r2,-4(fp)
   30730:	18bff01e 	bne	r3,r2,306f4 <_gp+0xffff583c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   30734:	0005883a 	mov	r2,zero
}
   30738:	e037883a 	mov	sp,fp
   3073c:	dfc00117 	ldw	ra,4(sp)
   30740:	df000017 	ldw	fp,0(sp)
   30744:	dec00204 	addi	sp,sp,8
   30748:	f800283a 	ret

0003074c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   3074c:	defffb04 	addi	sp,sp,-20
   30750:	dfc00415 	stw	ra,16(sp)
   30754:	df000315 	stw	fp,12(sp)
   30758:	df000304 	addi	fp,sp,12
   3075c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   30760:	d0a00617 	ldw	r2,-32744(gp)
   30764:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   30768:	00003106 	br	30830 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   3076c:	e0bffd17 	ldw	r2,-12(fp)
   30770:	10800217 	ldw	r2,8(r2)
   30774:	1009883a 	mov	r4,r2
   30778:	002078c0 	call	2078c <strlen>
   3077c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   30780:	e0bffd17 	ldw	r2,-12(fp)
   30784:	10c00217 	ldw	r3,8(r2)
   30788:	e0bffe17 	ldw	r2,-8(fp)
   3078c:	10bfffc4 	addi	r2,r2,-1
   30790:	1885883a 	add	r2,r3,r2
   30794:	10800003 	ldbu	r2,0(r2)
   30798:	10803fcc 	andi	r2,r2,255
   3079c:	1080201c 	xori	r2,r2,128
   307a0:	10bfe004 	addi	r2,r2,-128
   307a4:	10800bd8 	cmpnei	r2,r2,47
   307a8:	1000031e 	bne	r2,zero,307b8 <alt_find_file+0x6c>
    {
      len -= 1;
   307ac:	e0bffe17 	ldw	r2,-8(fp)
   307b0:	10bfffc4 	addi	r2,r2,-1
   307b4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   307b8:	e0bffe17 	ldw	r2,-8(fp)
   307bc:	e0ffff17 	ldw	r3,-4(fp)
   307c0:	1885883a 	add	r2,r3,r2
   307c4:	10800003 	ldbu	r2,0(r2)
   307c8:	10803fcc 	andi	r2,r2,255
   307cc:	1080201c 	xori	r2,r2,128
   307d0:	10bfe004 	addi	r2,r2,-128
   307d4:	10800be0 	cmpeqi	r2,r2,47
   307d8:	1000081e 	bne	r2,zero,307fc <alt_find_file+0xb0>
   307dc:	e0bffe17 	ldw	r2,-8(fp)
   307e0:	e0ffff17 	ldw	r3,-4(fp)
   307e4:	1885883a 	add	r2,r3,r2
   307e8:	10800003 	ldbu	r2,0(r2)
   307ec:	10803fcc 	andi	r2,r2,255
   307f0:	1080201c 	xori	r2,r2,128
   307f4:	10bfe004 	addi	r2,r2,-128
   307f8:	10000a1e 	bne	r2,zero,30824 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   307fc:	e0bffd17 	ldw	r2,-12(fp)
   30800:	10800217 	ldw	r2,8(r2)
   30804:	e0fffe17 	ldw	r3,-8(fp)
   30808:	180d883a 	mov	r6,r3
   3080c:	e17fff17 	ldw	r5,-4(fp)
   30810:	1009883a 	mov	r4,r2
   30814:	0030a000 	call	30a00 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   30818:	1000021e 	bne	r2,zero,30824 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   3081c:	e0bffd17 	ldw	r2,-12(fp)
   30820:	00000706 	br	30840 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   30824:	e0bffd17 	ldw	r2,-12(fp)
   30828:	10800017 	ldw	r2,0(r2)
   3082c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   30830:	e0fffd17 	ldw	r3,-12(fp)
   30834:	d0a00604 	addi	r2,gp,-32744
   30838:	18bfcc1e 	bne	r3,r2,3076c <_gp+0xffff58b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   3083c:	0005883a 	mov	r2,zero
}
   30840:	e037883a 	mov	sp,fp
   30844:	dfc00117 	ldw	ra,4(sp)
   30848:	df000017 	ldw	fp,0(sp)
   3084c:	dec00204 	addi	sp,sp,8
   30850:	f800283a 	ret

00030854 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   30854:	defffa04 	addi	sp,sp,-24
   30858:	dfc00515 	stw	ra,20(sp)
   3085c:	df000415 	stw	fp,16(sp)
   30860:	dc000315 	stw	r16,12(sp)
   30864:	df000404 	addi	fp,sp,16
   30868:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   3086c:	00bffa04 	movi	r2,-24
   30870:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   30874:	e03ffc15 	stw	zero,-16(fp)
   30878:	00001d06 	br	308f0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   3087c:	040000f4 	movhi	r16,3
   30880:	8406ee04 	addi	r16,r16,7096
   30884:	e0bffc17 	ldw	r2,-16(fp)
   30888:	01400304 	movi	r5,12
   3088c:	1009883a 	mov	r4,r2
   30890:	00206240 	call	20624 <__mulsi3>
   30894:	8085883a 	add	r2,r16,r2
   30898:	10800017 	ldw	r2,0(r2)
   3089c:	1000111e 	bne	r2,zero,308e4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   308a0:	040000f4 	movhi	r16,3
   308a4:	8406ee04 	addi	r16,r16,7096
   308a8:	e0bffc17 	ldw	r2,-16(fp)
   308ac:	01400304 	movi	r5,12
   308b0:	1009883a 	mov	r4,r2
   308b4:	00206240 	call	20624 <__mulsi3>
   308b8:	8085883a 	add	r2,r16,r2
   308bc:	e0fffe17 	ldw	r3,-8(fp)
   308c0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   308c4:	d0e00a17 	ldw	r3,-32728(gp)
   308c8:	e0bffc17 	ldw	r2,-16(fp)
   308cc:	1880020e 	bge	r3,r2,308d8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   308d0:	e0bffc17 	ldw	r2,-16(fp)
   308d4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   308d8:	e0bffc17 	ldw	r2,-16(fp)
   308dc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   308e0:	00000606 	br	308fc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   308e4:	e0bffc17 	ldw	r2,-16(fp)
   308e8:	10800044 	addi	r2,r2,1
   308ec:	e0bffc15 	stw	r2,-16(fp)
   308f0:	e0bffc17 	ldw	r2,-16(fp)
   308f4:	10800810 	cmplti	r2,r2,32
   308f8:	103fe01e 	bne	r2,zero,3087c <_gp+0xffff59c4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   308fc:	e0bffd17 	ldw	r2,-12(fp)
}
   30900:	e6ffff04 	addi	sp,fp,-4
   30904:	dfc00217 	ldw	ra,8(sp)
   30908:	df000117 	ldw	fp,4(sp)
   3090c:	dc000017 	ldw	r16,0(sp)
   30910:	dec00304 	addi	sp,sp,12
   30914:	f800283a 	ret

00030918 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   30918:	defffe04 	addi	sp,sp,-8
   3091c:	df000115 	stw	fp,4(sp)
   30920:	df000104 	addi	fp,sp,4
   30924:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   30928:	e0bfff17 	ldw	r2,-4(fp)
   3092c:	10bffe84 	addi	r2,r2,-6
   30930:	10c00428 	cmpgeui	r3,r2,16
   30934:	18001a1e 	bne	r3,zero,309a0 <alt_exception_cause_generated_bad_addr+0x88>
   30938:	100690ba 	slli	r3,r2,2
   3093c:	008000f4 	movhi	r2,3
   30940:	10825404 	addi	r2,r2,2384
   30944:	1885883a 	add	r2,r3,r2
   30948:	10800017 	ldw	r2,0(r2)
   3094c:	1000683a 	jmp	r2
   30950:	00030990 	cmplti	zero,zero,3110
   30954:	00030990 	cmplti	zero,zero,3110
   30958:	000309a0 	cmpeqi	zero,zero,3110
   3095c:	000309a0 	cmpeqi	zero,zero,3110
   30960:	000309a0 	cmpeqi	zero,zero,3110
   30964:	00030990 	cmplti	zero,zero,3110
   30968:	00030998 	cmpnei	zero,zero,3110
   3096c:	000309a0 	cmpeqi	zero,zero,3110
   30970:	00030990 	cmplti	zero,zero,3110
   30974:	00030990 	cmplti	zero,zero,3110
   30978:	000309a0 	cmpeqi	zero,zero,3110
   3097c:	00030990 	cmplti	zero,zero,3110
   30980:	00030998 	cmpnei	zero,zero,3110
   30984:	000309a0 	cmpeqi	zero,zero,3110
   30988:	000309a0 	cmpeqi	zero,zero,3110
   3098c:	00030990 	cmplti	zero,zero,3110
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   30990:	00800044 	movi	r2,1
   30994:	00000306 	br	309a4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   30998:	0005883a 	mov	r2,zero
   3099c:	00000106 	br	309a4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   309a0:	0005883a 	mov	r2,zero
  }
}
   309a4:	e037883a 	mov	sp,fp
   309a8:	df000017 	ldw	fp,0(sp)
   309ac:	dec00104 	addi	sp,sp,4
   309b0:	f800283a 	ret

000309b4 <atexit>:
   309b4:	200b883a 	mov	r5,r4
   309b8:	000f883a 	mov	r7,zero
   309bc:	000d883a 	mov	r6,zero
   309c0:	0009883a 	mov	r4,zero
   309c4:	0030a7c1 	jmpi	30a7c <__register_exitproc>

000309c8 <exit>:
   309c8:	defffe04 	addi	sp,sp,-8
   309cc:	000b883a 	mov	r5,zero
   309d0:	dc000015 	stw	r16,0(sp)
   309d4:	dfc00115 	stw	ra,4(sp)
   309d8:	2021883a 	mov	r16,r4
   309dc:	0030b940 	call	30b94 <__call_exitprocs>
   309e0:	008000f4 	movhi	r2,3
   309e4:	108bae04 	addi	r2,r2,11960
   309e8:	11000017 	ldw	r4,0(r2)
   309ec:	20800f17 	ldw	r2,60(r4)
   309f0:	10000126 	beq	r2,zero,309f8 <exit+0x30>
   309f4:	103ee83a 	callr	r2
   309f8:	8009883a 	mov	r4,r16
   309fc:	0030d140 	call	30d14 <_exit>

00030a00 <memcmp>:
   30a00:	01c000c4 	movi	r7,3
   30a04:	3980192e 	bgeu	r7,r6,30a6c <memcmp+0x6c>
   30a08:	2144b03a 	or	r2,r4,r5
   30a0c:	11c4703a 	and	r2,r2,r7
   30a10:	10000f26 	beq	r2,zero,30a50 <memcmp+0x50>
   30a14:	20800003 	ldbu	r2,0(r4)
   30a18:	28c00003 	ldbu	r3,0(r5)
   30a1c:	10c0151e 	bne	r2,r3,30a74 <memcmp+0x74>
   30a20:	31bfff84 	addi	r6,r6,-2
   30a24:	01ffffc4 	movi	r7,-1
   30a28:	00000406 	br	30a3c <memcmp+0x3c>
   30a2c:	20800003 	ldbu	r2,0(r4)
   30a30:	28c00003 	ldbu	r3,0(r5)
   30a34:	31bfffc4 	addi	r6,r6,-1
   30a38:	10c00e1e 	bne	r2,r3,30a74 <memcmp+0x74>
   30a3c:	21000044 	addi	r4,r4,1
   30a40:	29400044 	addi	r5,r5,1
   30a44:	31fff91e 	bne	r6,r7,30a2c <_gp+0xffff5b74>
   30a48:	0005883a 	mov	r2,zero
   30a4c:	f800283a 	ret
   30a50:	20c00017 	ldw	r3,0(r4)
   30a54:	28800017 	ldw	r2,0(r5)
   30a58:	18bfee1e 	bne	r3,r2,30a14 <_gp+0xffff5b5c>
   30a5c:	31bfff04 	addi	r6,r6,-4
   30a60:	21000104 	addi	r4,r4,4
   30a64:	29400104 	addi	r5,r5,4
   30a68:	39bff936 	bltu	r7,r6,30a50 <_gp+0xffff5b98>
   30a6c:	303fe91e 	bne	r6,zero,30a14 <_gp+0xffff5b5c>
   30a70:	003ff506 	br	30a48 <_gp+0xffff5b90>
   30a74:	10c5c83a 	sub	r2,r2,r3
   30a78:	f800283a 	ret

00030a7c <__register_exitproc>:
   30a7c:	defffa04 	addi	sp,sp,-24
   30a80:	dc000315 	stw	r16,12(sp)
   30a84:	040000f4 	movhi	r16,3
   30a88:	840bae04 	addi	r16,r16,11960
   30a8c:	80c00017 	ldw	r3,0(r16)
   30a90:	dc400415 	stw	r17,16(sp)
   30a94:	dfc00515 	stw	ra,20(sp)
   30a98:	18805217 	ldw	r2,328(r3)
   30a9c:	2023883a 	mov	r17,r4
   30aa0:	10003726 	beq	r2,zero,30b80 <__register_exitproc+0x104>
   30aa4:	10c00117 	ldw	r3,4(r2)
   30aa8:	010007c4 	movi	r4,31
   30aac:	20c00e16 	blt	r4,r3,30ae8 <__register_exitproc+0x6c>
   30ab0:	1a000044 	addi	r8,r3,1
   30ab4:	8800221e 	bne	r17,zero,30b40 <__register_exitproc+0xc4>
   30ab8:	18c00084 	addi	r3,r3,2
   30abc:	18c7883a 	add	r3,r3,r3
   30ac0:	18c7883a 	add	r3,r3,r3
   30ac4:	12000115 	stw	r8,4(r2)
   30ac8:	10c7883a 	add	r3,r2,r3
   30acc:	19400015 	stw	r5,0(r3)
   30ad0:	0005883a 	mov	r2,zero
   30ad4:	dfc00517 	ldw	ra,20(sp)
   30ad8:	dc400417 	ldw	r17,16(sp)
   30adc:	dc000317 	ldw	r16,12(sp)
   30ae0:	dec00604 	addi	sp,sp,24
   30ae4:	f800283a 	ret
   30ae8:	00800034 	movhi	r2,0
   30aec:	10800004 	addi	r2,r2,0
   30af0:	10002626 	beq	r2,zero,30b8c <__register_exitproc+0x110>
   30af4:	01006404 	movi	r4,400
   30af8:	d9400015 	stw	r5,0(sp)
   30afc:	d9800115 	stw	r6,4(sp)
   30b00:	d9c00215 	stw	r7,8(sp)
   30b04:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   30b08:	d9400017 	ldw	r5,0(sp)
   30b0c:	d9800117 	ldw	r6,4(sp)
   30b10:	d9c00217 	ldw	r7,8(sp)
   30b14:	10001d26 	beq	r2,zero,30b8c <__register_exitproc+0x110>
   30b18:	81000017 	ldw	r4,0(r16)
   30b1c:	10000115 	stw	zero,4(r2)
   30b20:	02000044 	movi	r8,1
   30b24:	22405217 	ldw	r9,328(r4)
   30b28:	0007883a 	mov	r3,zero
   30b2c:	12400015 	stw	r9,0(r2)
   30b30:	20805215 	stw	r2,328(r4)
   30b34:	10006215 	stw	zero,392(r2)
   30b38:	10006315 	stw	zero,396(r2)
   30b3c:	883fde26 	beq	r17,zero,30ab8 <_gp+0xffff5c00>
   30b40:	18c9883a 	add	r4,r3,r3
   30b44:	2109883a 	add	r4,r4,r4
   30b48:	1109883a 	add	r4,r2,r4
   30b4c:	21802215 	stw	r6,136(r4)
   30b50:	01800044 	movi	r6,1
   30b54:	12406217 	ldw	r9,392(r2)
   30b58:	30cc983a 	sll	r6,r6,r3
   30b5c:	4992b03a 	or	r9,r9,r6
   30b60:	12406215 	stw	r9,392(r2)
   30b64:	21c04215 	stw	r7,264(r4)
   30b68:	01000084 	movi	r4,2
   30b6c:	893fd21e 	bne	r17,r4,30ab8 <_gp+0xffff5c00>
   30b70:	11006317 	ldw	r4,396(r2)
   30b74:	218cb03a 	or	r6,r4,r6
   30b78:	11806315 	stw	r6,396(r2)
   30b7c:	003fce06 	br	30ab8 <_gp+0xffff5c00>
   30b80:	18805304 	addi	r2,r3,332
   30b84:	18805215 	stw	r2,328(r3)
   30b88:	003fc606 	br	30aa4 <_gp+0xffff5bec>
   30b8c:	00bfffc4 	movi	r2,-1
   30b90:	003fd006 	br	30ad4 <_gp+0xffff5c1c>

00030b94 <__call_exitprocs>:
   30b94:	defff504 	addi	sp,sp,-44
   30b98:	df000915 	stw	fp,36(sp)
   30b9c:	dd400615 	stw	r21,24(sp)
   30ba0:	dc800315 	stw	r18,12(sp)
   30ba4:	dfc00a15 	stw	ra,40(sp)
   30ba8:	ddc00815 	stw	r23,32(sp)
   30bac:	dd800715 	stw	r22,28(sp)
   30bb0:	dd000515 	stw	r20,20(sp)
   30bb4:	dcc00415 	stw	r19,16(sp)
   30bb8:	dc400215 	stw	r17,8(sp)
   30bbc:	dc000115 	stw	r16,4(sp)
   30bc0:	d9000015 	stw	r4,0(sp)
   30bc4:	2839883a 	mov	fp,r5
   30bc8:	04800044 	movi	r18,1
   30bcc:	057fffc4 	movi	r21,-1
   30bd0:	008000f4 	movhi	r2,3
   30bd4:	108bae04 	addi	r2,r2,11960
   30bd8:	12000017 	ldw	r8,0(r2)
   30bdc:	45005217 	ldw	r20,328(r8)
   30be0:	44c05204 	addi	r19,r8,328
   30be4:	a0001c26 	beq	r20,zero,30c58 <__call_exitprocs+0xc4>
   30be8:	a0800117 	ldw	r2,4(r20)
   30bec:	15ffffc4 	addi	r23,r2,-1
   30bf0:	b8000d16 	blt	r23,zero,30c28 <__call_exitprocs+0x94>
   30bf4:	14000044 	addi	r16,r2,1
   30bf8:	8421883a 	add	r16,r16,r16
   30bfc:	8421883a 	add	r16,r16,r16
   30c00:	84402004 	addi	r17,r16,128
   30c04:	a463883a 	add	r17,r20,r17
   30c08:	a421883a 	add	r16,r20,r16
   30c0c:	e0001e26 	beq	fp,zero,30c88 <__call_exitprocs+0xf4>
   30c10:	80804017 	ldw	r2,256(r16)
   30c14:	e0801c26 	beq	fp,r2,30c88 <__call_exitprocs+0xf4>
   30c18:	bdffffc4 	addi	r23,r23,-1
   30c1c:	843fff04 	addi	r16,r16,-4
   30c20:	8c7fff04 	addi	r17,r17,-4
   30c24:	bd7ff91e 	bne	r23,r21,30c0c <_gp+0xffff5d54>
   30c28:	00800034 	movhi	r2,0
   30c2c:	10800004 	addi	r2,r2,0
   30c30:	10000926 	beq	r2,zero,30c58 <__call_exitprocs+0xc4>
   30c34:	a0800117 	ldw	r2,4(r20)
   30c38:	1000301e 	bne	r2,zero,30cfc <__call_exitprocs+0x168>
   30c3c:	a0800017 	ldw	r2,0(r20)
   30c40:	10003226 	beq	r2,zero,30d0c <__call_exitprocs+0x178>
   30c44:	a009883a 	mov	r4,r20
   30c48:	98800015 	stw	r2,0(r19)
   30c4c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   30c50:	9d000017 	ldw	r20,0(r19)
   30c54:	a03fe41e 	bne	r20,zero,30be8 <_gp+0xffff5d30>
   30c58:	dfc00a17 	ldw	ra,40(sp)
   30c5c:	df000917 	ldw	fp,36(sp)
   30c60:	ddc00817 	ldw	r23,32(sp)
   30c64:	dd800717 	ldw	r22,28(sp)
   30c68:	dd400617 	ldw	r21,24(sp)
   30c6c:	dd000517 	ldw	r20,20(sp)
   30c70:	dcc00417 	ldw	r19,16(sp)
   30c74:	dc800317 	ldw	r18,12(sp)
   30c78:	dc400217 	ldw	r17,8(sp)
   30c7c:	dc000117 	ldw	r16,4(sp)
   30c80:	dec00b04 	addi	sp,sp,44
   30c84:	f800283a 	ret
   30c88:	a0800117 	ldw	r2,4(r20)
   30c8c:	80c00017 	ldw	r3,0(r16)
   30c90:	10bfffc4 	addi	r2,r2,-1
   30c94:	15c01426 	beq	r2,r23,30ce8 <__call_exitprocs+0x154>
   30c98:	80000015 	stw	zero,0(r16)
   30c9c:	183fde26 	beq	r3,zero,30c18 <_gp+0xffff5d60>
   30ca0:	95c8983a 	sll	r4,r18,r23
   30ca4:	a0806217 	ldw	r2,392(r20)
   30ca8:	a5800117 	ldw	r22,4(r20)
   30cac:	2084703a 	and	r2,r4,r2
   30cb0:	10000b26 	beq	r2,zero,30ce0 <__call_exitprocs+0x14c>
   30cb4:	a0806317 	ldw	r2,396(r20)
   30cb8:	2088703a 	and	r4,r4,r2
   30cbc:	20000c1e 	bne	r4,zero,30cf0 <__call_exitprocs+0x15c>
   30cc0:	89400017 	ldw	r5,0(r17)
   30cc4:	d9000017 	ldw	r4,0(sp)
   30cc8:	183ee83a 	callr	r3
   30ccc:	a0800117 	ldw	r2,4(r20)
   30cd0:	15bfbf1e 	bne	r2,r22,30bd0 <_gp+0xffff5d18>
   30cd4:	98800017 	ldw	r2,0(r19)
   30cd8:	153fcf26 	beq	r2,r20,30c18 <_gp+0xffff5d60>
   30cdc:	003fbc06 	br	30bd0 <_gp+0xffff5d18>
   30ce0:	183ee83a 	callr	r3
   30ce4:	003ff906 	br	30ccc <_gp+0xffff5e14>
   30ce8:	a5c00115 	stw	r23,4(r20)
   30cec:	003feb06 	br	30c9c <_gp+0xffff5de4>
   30cf0:	89000017 	ldw	r4,0(r17)
   30cf4:	183ee83a 	callr	r3
   30cf8:	003ff406 	br	30ccc <_gp+0xffff5e14>
   30cfc:	a0800017 	ldw	r2,0(r20)
   30d00:	a027883a 	mov	r19,r20
   30d04:	1029883a 	mov	r20,r2
   30d08:	003fb606 	br	30be4 <_gp+0xffff5d2c>
   30d0c:	0005883a 	mov	r2,zero
   30d10:	003ffb06 	br	30d00 <_gp+0xffff5e48>

00030d14 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   30d14:	defffd04 	addi	sp,sp,-12
   30d18:	df000215 	stw	fp,8(sp)
   30d1c:	df000204 	addi	fp,sp,8
   30d20:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   30d24:	0001883a 	nop
   30d28:	e0bfff17 	ldw	r2,-4(fp)
   30d2c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   30d30:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   30d34:	10000226 	beq	r2,zero,30d40 <_exit+0x2c>
    ALT_SIM_FAIL();
   30d38:	002af070 	cmpltui	zero,zero,43969
   30d3c:	00000106 	br	30d44 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   30d40:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   30d44:	003fff06 	br	30d44 <_gp+0xffff5e8c>
