
pingpong-o-matic.elf:     file format elf32-littlenios2
pingpong-o-matic.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000057d4 memsz 0x000057d4 flags r-x
    LOAD off    0x000067f4 vaddr 0x000457f4 paddr 0x00047260 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008ccc vaddr 0x00048ccc paddr 0x00048ccc align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000556c  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000058  0004579c  0004579c  0000679c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  000457f4  00047260  000067f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00048ccc  00048ccc  00008ccc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00048e20  00048e20  00008260  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008260  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a10  00000000  00000000  00008288  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000162ba  00000000  00000000  00008c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005eed  00000000  00000000  0001ef52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000686a  00000000  00000000  00024e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001534  00000000  00000000  0002b6ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002749  00000000  00000000  0002cbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  0002f329  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00033e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00033e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003699a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0003699d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000369a7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000369a8  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000369a9  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000369ad  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000369b1  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000369b5  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000369be  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000369c7  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  000369d0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000031  00000000  00000000  000369dc  2**0
                  CONTENTS, READONLY
 29 .jdi          00004381  00000000  00000000  00036a0d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00037478  00000000  00000000  0003ad8e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
0004579c l    d  .rodata	00000000 .rodata
000457f4 l    d  .rwdata	00000000 .rwdata
00048ccc l    d  .bss	00000000 .bss
00048e20 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pingpong-o-matic_bsp//obj/HAL/src/crt0.o
00040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00040464 l     F .text	00000008 __fp_unlock
00040478 l     F .text	0000019c __sinit.part.1
00040614 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000457f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00043104 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00043218 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00043244 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00043338 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00043420 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004350c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000436e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00047250 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004395c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00043a98 l     F .text	00000034 alt_dev_reg
000461c8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00043d74 l     F .text	0000020c altera_avalon_jtag_uart_irq
00043f80 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00044704 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00044b64 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00044cc4 l     F .text	0000003c alt_get_errno
00044d00 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00048cf4 g     O .bss	00000004 alt_instruction_exception_handler
00042ed4 g     F .text	00000054 _isatty_r
00043624 g     F .text	0000007c alt_main
000402f8 g     F .text	000000c0 _puts_r
00048d20 g     O .bss	00000100 alt_irq
00042bfc g     F .text	00000060 _lseek_r
00047260 g       *ABS*	00000000 __flash_rwdata_start
00048e20 g       *ABS*	00000000 __alt_heap_start
000421b0 g     F .text	0000005c __sseek
000407c4 g     F .text	00000010 __sinit
0004061c g     F .text	00000078 __sfmoreglue
000436c4 g     F .text	00000024 __malloc_unlock
0004189c g     F .text	0000015c memmove
000407ac g     F .text	00000018 _cleanup
000450ec g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042e78 g     F .text	0000005c _fstat_r
00048cd8 g     O .bss	00000004 errno
0004212c g     F .text	00000008 __seofread
00048ce0 g     O .bss	00000004 alt_argv
0004f228 g       *ABS*	00000000 _gp
00046048 g     O .rwdata	00000180 alt_fd_list
00045110 g     F .text	00000090 alt_find_dev
00041754 g     F .text	00000148 memcpy
0004046c g     F .text	0000000c _cleanup_r
00044c48 g     F .text	0000007c alt_io_redirect
0004579c g       *ABS*	00000000 __DTOR_END__
000403b8 g     F .text	00000014 puts
0004536c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00044178 g     F .text	0000021c altera_avalon_jtag_uart_read
00043020 g     F .text	00000064 .hidden __udivsi3
00043374 g     F .text	000000ac isatty
00048cd4 g     O .bss	00000004 __malloc_top_pad
00040814 g     F .text	000004c8 __sfvwrite_r
00042084 g     F .text	00000054 _sbrk_r
00042e18 g     F .text	00000060 _read_r
00047248 g     O .rwdata	00000004 alt_max_fd
0004241c g     F .text	000000f0 _fclose_r
00042798 g     F .text	00000030 fflush
00048cd0 g     O .bss	00000004 __malloc_max_sbrked_mem
00043548 g     F .text	000000dc lseek
00047228 g     O .rwdata	00000004 _global_impure_ptr
00041b20 g     F .text	00000564 _realloc_r
00048e20 g       *ABS*	00000000 __bss_end
00044a74 g     F .text	000000f0 alt_iic_isr_register
00044fe4 g     F .text	00000108 alt_tick
000407e4 g     F .text	00000018 __fp_lock_all
00044a28 g     F .text	0000004c alt_ic_irq_enabled
00044f48 g     F .text	0000009c alt_alarm_stop
00048ce8 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00046020 g     O .rwdata	00000028 alt_dev_null
000446e4 g     F .text	00000020 alt_dcache_flush_all
00047260 g       *ABS*	00000000 __ram_rwdata_end
00047240 g     O .rwdata	00000008 alt_dev_list
00043998 g     F .text	00000100 write
000457f4 g       *ABS*	00000000 __ram_rodata_end
00043280 g     F .text	000000b8 fstat
00043084 g     F .text	00000058 .hidden __umodsi3
00048e20 g       *ABS*	00000000 end
00043cb4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0004579c g       *ABS*	00000000 __CTOR_LIST__
00072000 g       *ABS*	00000000 __alt_stack_pointer
00044394 g     F .text	00000224 altera_avalon_jtag_uart_write
000407d4 g     F .text	00000004 __sfp_lock_acquire
00041670 g     F .text	000000e4 memchr
000428ec g     F .text	00000310 _free_r
000455e8 g     F .text	00000180 __call_exitprocs
00047230 g     O .rwdata	00000004 __malloc_sbrk_base
00040230 g     F .text	0000003c _start
00048cec g     O .bss	00000004 _alt_tick_rate
00048cf0 g     O .bss	00000004 _alt_nticks
00043724 g     F .text	00000104 read
00043b04 g     F .text	0000004c alt_sys_init
000454d0 g     F .text	00000118 __register_exitproc
00044020 g     F .text	00000068 altera_avalon_jtag_uart_close
000430dc g     F .text	00000028 .hidden __mulsi3
000457f4 g       *ABS*	00000000 __ram_rwdata_start
0004579c g       *ABS*	00000000 __ram_rodata_start
00048cf8 g     O .bss	00000028 __malloc_current_mallinfo
00043b50 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000452a8 g     F .text	000000c4 alt_get_fd
000423c8 g     F .text	00000054 _close_r
00045454 g     F .text	0000007c memcmp
00043c10 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00048e20 g       *ABS*	00000000 __alt_stack_base
00043c60 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00042274 g     F .text	00000154 __swsetup_r
00040694 g     F .text	00000118 __sfp
00045c18 g     O .rwdata	00000408 __malloc_av_
000407e0 g     F .text	00000004 __sinit_lock_release
000420d8 g     F .text	00000054 __sread
000451a0 g     F .text	00000108 alt_find_file
00044740 g     F .text	000000a4 alt_dev_llist_insert
000436a0 g     F .text	00000024 __malloc_lock
000438ac g     F .text	000000b0 sbrk
0004273c g     F .text	0000005c _fflush_r
00048ccc g       *ABS*	00000000 __bss_start
000419f8 g     F .text	00000128 memset
0004026c g     F .text	0000008c main
00048ce4 g     O .bss	00000004 alt_envp
00048ccc g     O .bss	00000004 __malloc_max_total_mem
00043bb0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004220c g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
0004250c g     F .text	00000014 fclose
00040e64 g     F .text	0000080c _malloc_r
0004724c g     O .rwdata	00000004 alt_errno
00040cdc g     F .text	000000c4 _fwalk
00042f28 g     F .text	00000084 .hidden __divsi3
000427c8 g     F .text	00000124 _malloc_trim_r
0004579c g       *ABS*	00000000 __CTOR_END__
0004579c g       *ABS*	00000000 __flash_rodata_start
0004579c g       *ABS*	00000000 __DTOR_LIST__
00043acc g     F .text	00000038 alt_irq_init
00043828 g     F .text	00000084 alt_release_fd
00045408 g     F .text	00000014 atexit
00042214 g     F .text	00000060 _write_r
0004722c g     O .rwdata	00000004 _impure_ptr
00048cdc g     O .bss	00000004 alt_argc
00042520 g     F .text	0000021c __sflush_r
00044844 g     F .text	00000060 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
000407fc g     F .text	00000018 __fp_unlock_all
00047238 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
000448c4 g     F .text	00000050 alt_ic_isr_register
00047260 g       *ABS*	00000000 _edata
00048e20 g       *ABS*	00000000 _end
00040230 g       *ABS*	00000000 __ram_exceptions_end
00044088 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0004499c g     F .text	0000008c alt_ic_irq_disable
00042134 g     F .text	0000007c __swrite
00047234 g     O .rwdata	00000004 __malloc_trim_threshold
0004541c g     F .text	00000038 exit
00040da0 g     F .text	000000c4 _fwalk_reent
00042fac g     F .text	00000074 .hidden __modsi3
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
000407d8 g     F .text	00000004 __sfp_lock_release
00045768 g     F .text	00000034 _exit
000445b8 g     F .text	0000012c alt_alarm_start
00042c5c g     F .text	000001bc __smakebuf_r
000403cc g     F .text	00000098 strlen
00044dec g     F .text	0000015c open
000448a4 g     F .text	00000020 alt_icache_flush_all
00047254 g     O .rwdata	00000004 alt_priority_mask
00044914 g     F .text	00000088 alt_ic_irq_enable
00047258 g     O .rwdata	00000008 alt_alarm_list
000447e4 g     F .text	00000060 _do_ctors
00043140 g     F .text	000000d8 close
00043488 g     F .text	00000084 alt_load
000407dc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	10a34804 	addi	r2,r2,-29408
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	10a34804 	addi	r2,r2,-29408
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffce12c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffce120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0a6b317 	ldw	r2,-25908(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0a6b317 	ldw	r2,-25908(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
   40238:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   4023c:	d6bc8a14 	ori	gp,gp,61992
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40240:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40244:	10a33314 	ori	r2,r2,36044

    movhi r3, %hi(__bss_end)
   40248:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   4024c:	18e38814 	ori	r3,r3,36384

    beq r2, r3, 1f
   40250:	10c00326 	beq	r2,r3,40260 <_start+0x30>

0:
    stw zero, (r2)
   40254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4025c:	10fffd36 	bltu	r2,r3,40254 <__alt_data_end+0xfffce254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40260:	00434880 	call	43488 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40264:	00436240 	call	43624 <alt_main>

00040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40268:	003fff06 	br	40268 <__alt_data_end+0xfffce268>

0004026c <main>:
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{
   4026c:	defffc04 	addi	sp,sp,-16
   40270:	dfc00315 	stw	ra,12(sp)
   40274:	df000215 	stw	fp,8(sp)
   40278:	df000204 	addi	fp,sp,8
  printf("REEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE!\n");
   4027c:	01000134 	movhi	r4,4
   40280:	2115e704 	addi	r4,r4,22428
   40284:	00403b80 	call	403b8 <puts>
  int count = 0;
   40288:	e03ffe15 	stw	zero,-8(fp)
  int delay;
  while(1) {
    IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 1 << count);
   4028c:	00c00044 	movi	r3,1
   40290:	e0bffe17 	ldw	r2,-8(fp)
   40294:	1886983a 	sll	r3,r3,r2
   40298:	00800234 	movhi	r2,8
   4029c:	10840004 	addi	r2,r2,4096
   402a0:	10c00035 	stwio	r3,0(r2)
    delay = 0;
   402a4:	e03fff15 	stw	zero,-4(fp)
    while(delay < 2000000 ) {
   402a8:	00000306 	br	402b8 <main+0x4c>
      delay++;
   402ac:	e0bfff17 	ldw	r2,-4(fp)
   402b0:	10800044 	addi	r2,r2,1
   402b4:	e0bfff15 	stw	r2,-4(fp)
  int count = 0;
  int delay;
  while(1) {
    IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 1 << count);
    delay = 0;
    while(delay < 2000000 ) {
   402b8:	e0ffff17 	ldw	r3,-4(fp)
   402bc:	008007f4 	movhi	r2,31
   402c0:	10a11fc4 	addi	r2,r2,-31617
   402c4:	10fff90e 	bge	r2,r3,402ac <__alt_data_end+0xfffce2ac>
      delay++;
    }
    count = (count+1) % 8;
   402c8:	e0bffe17 	ldw	r2,-8(fp)
   402cc:	10c00044 	addi	r3,r2,1
   402d0:	00a00034 	movhi	r2,32768
   402d4:	108001c4 	addi	r2,r2,7
   402d8:	1884703a 	and	r2,r3,r2
   402dc:	1000040e 	bge	r2,zero,402f0 <main+0x84>
   402e0:	10bfffc4 	addi	r2,r2,-1
   402e4:	00fffe04 	movi	r3,-8
   402e8:	10c4b03a 	or	r2,r2,r3
   402ec:	10800044 	addi	r2,r2,1
   402f0:	e0bffe15 	stw	r2,-8(fp)
  }
   402f4:	003fe506 	br	4028c <__alt_data_end+0xfffce28c>

000402f8 <_puts_r>:
   402f8:	defff604 	addi	sp,sp,-40
   402fc:	dc000715 	stw	r16,28(sp)
   40300:	2021883a 	mov	r16,r4
   40304:	2809883a 	mov	r4,r5
   40308:	dc400815 	stw	r17,32(sp)
   4030c:	dfc00915 	stw	ra,36(sp)
   40310:	2823883a 	mov	r17,r5
   40314:	00403cc0 	call	403cc <strlen>
   40318:	10c00044 	addi	r3,r2,1
   4031c:	d8800115 	stw	r2,4(sp)
   40320:	00800134 	movhi	r2,4
   40324:	1095f004 	addi	r2,r2,22464
   40328:	d8800215 	stw	r2,8(sp)
   4032c:	00800044 	movi	r2,1
   40330:	d8800315 	stw	r2,12(sp)
   40334:	00800084 	movi	r2,2
   40338:	dc400015 	stw	r17,0(sp)
   4033c:	d8c00615 	stw	r3,24(sp)
   40340:	dec00415 	stw	sp,16(sp)
   40344:	d8800515 	stw	r2,20(sp)
   40348:	80000226 	beq	r16,zero,40354 <_puts_r+0x5c>
   4034c:	80800e17 	ldw	r2,56(r16)
   40350:	10001426 	beq	r2,zero,403a4 <_puts_r+0xac>
   40354:	81400217 	ldw	r5,8(r16)
   40358:	2880030b 	ldhu	r2,12(r5)
   4035c:	10c8000c 	andi	r3,r2,8192
   40360:	1800061e 	bne	r3,zero,4037c <_puts_r+0x84>
   40364:	29001917 	ldw	r4,100(r5)
   40368:	00f7ffc4 	movi	r3,-8193
   4036c:	10880014 	ori	r2,r2,8192
   40370:	20c6703a 	and	r3,r4,r3
   40374:	2880030d 	sth	r2,12(r5)
   40378:	28c01915 	stw	r3,100(r5)
   4037c:	d9800404 	addi	r6,sp,16
   40380:	8009883a 	mov	r4,r16
   40384:	00408140 	call	40814 <__sfvwrite_r>
   40388:	1000091e 	bne	r2,zero,403b0 <_puts_r+0xb8>
   4038c:	00800284 	movi	r2,10
   40390:	dfc00917 	ldw	ra,36(sp)
   40394:	dc400817 	ldw	r17,32(sp)
   40398:	dc000717 	ldw	r16,28(sp)
   4039c:	dec00a04 	addi	sp,sp,40
   403a0:	f800283a 	ret
   403a4:	8009883a 	mov	r4,r16
   403a8:	00407c40 	call	407c4 <__sinit>
   403ac:	003fe906 	br	40354 <__alt_data_end+0xfffce354>
   403b0:	00bfffc4 	movi	r2,-1
   403b4:	003ff606 	br	40390 <__alt_data_end+0xfffce390>

000403b8 <puts>:
   403b8:	00800134 	movhi	r2,4
   403bc:	109c8b04 	addi	r2,r2,29228
   403c0:	200b883a 	mov	r5,r4
   403c4:	11000017 	ldw	r4,0(r2)
   403c8:	00402f81 	jmpi	402f8 <_puts_r>

000403cc <strlen>:
   403cc:	208000cc 	andi	r2,r4,3
   403d0:	10002026 	beq	r2,zero,40454 <strlen+0x88>
   403d4:	20800007 	ldb	r2,0(r4)
   403d8:	10002026 	beq	r2,zero,4045c <strlen+0x90>
   403dc:	2005883a 	mov	r2,r4
   403e0:	00000206 	br	403ec <strlen+0x20>
   403e4:	10c00007 	ldb	r3,0(r2)
   403e8:	18001826 	beq	r3,zero,4044c <strlen+0x80>
   403ec:	10800044 	addi	r2,r2,1
   403f0:	10c000cc 	andi	r3,r2,3
   403f4:	183ffb1e 	bne	r3,zero,403e4 <__alt_data_end+0xfffce3e4>
   403f8:	10c00017 	ldw	r3,0(r2)
   403fc:	01ffbff4 	movhi	r7,65279
   40400:	39ffbfc4 	addi	r7,r7,-257
   40404:	00ca303a 	nor	r5,zero,r3
   40408:	01a02074 	movhi	r6,32897
   4040c:	19c7883a 	add	r3,r3,r7
   40410:	31a02004 	addi	r6,r6,-32640
   40414:	1946703a 	and	r3,r3,r5
   40418:	1986703a 	and	r3,r3,r6
   4041c:	1800091e 	bne	r3,zero,40444 <strlen+0x78>
   40420:	10800104 	addi	r2,r2,4
   40424:	10c00017 	ldw	r3,0(r2)
   40428:	19cb883a 	add	r5,r3,r7
   4042c:	00c6303a 	nor	r3,zero,r3
   40430:	28c6703a 	and	r3,r5,r3
   40434:	1986703a 	and	r3,r3,r6
   40438:	183ff926 	beq	r3,zero,40420 <__alt_data_end+0xfffce420>
   4043c:	00000106 	br	40444 <strlen+0x78>
   40440:	10800044 	addi	r2,r2,1
   40444:	10c00007 	ldb	r3,0(r2)
   40448:	183ffd1e 	bne	r3,zero,40440 <__alt_data_end+0xfffce440>
   4044c:	1105c83a 	sub	r2,r2,r4
   40450:	f800283a 	ret
   40454:	2005883a 	mov	r2,r4
   40458:	003fe706 	br	403f8 <__alt_data_end+0xfffce3f8>
   4045c:	0005883a 	mov	r2,zero
   40460:	f800283a 	ret

00040464 <__fp_unlock>:
   40464:	0005883a 	mov	r2,zero
   40468:	f800283a 	ret

0004046c <_cleanup_r>:
   4046c:	01400134 	movhi	r5,4
   40470:	29490704 	addi	r5,r5,9244
   40474:	0040da01 	jmpi	40da0 <_fwalk_reent>

00040478 <__sinit.part.1>:
   40478:	defff704 	addi	sp,sp,-36
   4047c:	00c00134 	movhi	r3,4
   40480:	dfc00815 	stw	ra,32(sp)
   40484:	ddc00715 	stw	r23,28(sp)
   40488:	dd800615 	stw	r22,24(sp)
   4048c:	dd400515 	stw	r21,20(sp)
   40490:	dd000415 	stw	r20,16(sp)
   40494:	dcc00315 	stw	r19,12(sp)
   40498:	dc800215 	stw	r18,8(sp)
   4049c:	dc400115 	stw	r17,4(sp)
   404a0:	dc000015 	stw	r16,0(sp)
   404a4:	18c11b04 	addi	r3,r3,1132
   404a8:	24000117 	ldw	r16,4(r4)
   404ac:	20c00f15 	stw	r3,60(r4)
   404b0:	2080bb04 	addi	r2,r4,748
   404b4:	00c000c4 	movi	r3,3
   404b8:	20c0b915 	stw	r3,740(r4)
   404bc:	2080ba15 	stw	r2,744(r4)
   404c0:	2000b815 	stw	zero,736(r4)
   404c4:	05c00204 	movi	r23,8
   404c8:	00800104 	movi	r2,4
   404cc:	2025883a 	mov	r18,r4
   404d0:	b80d883a 	mov	r6,r23
   404d4:	81001704 	addi	r4,r16,92
   404d8:	000b883a 	mov	r5,zero
   404dc:	80000015 	stw	zero,0(r16)
   404e0:	80000115 	stw	zero,4(r16)
   404e4:	80000215 	stw	zero,8(r16)
   404e8:	8080030d 	sth	r2,12(r16)
   404ec:	80001915 	stw	zero,100(r16)
   404f0:	8000038d 	sth	zero,14(r16)
   404f4:	80000415 	stw	zero,16(r16)
   404f8:	80000515 	stw	zero,20(r16)
   404fc:	80000615 	stw	zero,24(r16)
   40500:	00419f80 	call	419f8 <memset>
   40504:	05800134 	movhi	r22,4
   40508:	94400217 	ldw	r17,8(r18)
   4050c:	05400134 	movhi	r21,4
   40510:	05000134 	movhi	r20,4
   40514:	04c00134 	movhi	r19,4
   40518:	b5883604 	addi	r22,r22,8408
   4051c:	ad484d04 	addi	r21,r21,8500
   40520:	a5086c04 	addi	r20,r20,8624
   40524:	9cc88304 	addi	r19,r19,8716
   40528:	85800815 	stw	r22,32(r16)
   4052c:	85400915 	stw	r21,36(r16)
   40530:	85000a15 	stw	r20,40(r16)
   40534:	84c00b15 	stw	r19,44(r16)
   40538:	84000715 	stw	r16,28(r16)
   4053c:	00800284 	movi	r2,10
   40540:	8880030d 	sth	r2,12(r17)
   40544:	00800044 	movi	r2,1
   40548:	b80d883a 	mov	r6,r23
   4054c:	89001704 	addi	r4,r17,92
   40550:	000b883a 	mov	r5,zero
   40554:	88000015 	stw	zero,0(r17)
   40558:	88000115 	stw	zero,4(r17)
   4055c:	88000215 	stw	zero,8(r17)
   40560:	88001915 	stw	zero,100(r17)
   40564:	8880038d 	sth	r2,14(r17)
   40568:	88000415 	stw	zero,16(r17)
   4056c:	88000515 	stw	zero,20(r17)
   40570:	88000615 	stw	zero,24(r17)
   40574:	00419f80 	call	419f8 <memset>
   40578:	94000317 	ldw	r16,12(r18)
   4057c:	00800484 	movi	r2,18
   40580:	8c400715 	stw	r17,28(r17)
   40584:	8d800815 	stw	r22,32(r17)
   40588:	8d400915 	stw	r21,36(r17)
   4058c:	8d000a15 	stw	r20,40(r17)
   40590:	8cc00b15 	stw	r19,44(r17)
   40594:	8080030d 	sth	r2,12(r16)
   40598:	00800084 	movi	r2,2
   4059c:	80000015 	stw	zero,0(r16)
   405a0:	80000115 	stw	zero,4(r16)
   405a4:	80000215 	stw	zero,8(r16)
   405a8:	80001915 	stw	zero,100(r16)
   405ac:	8080038d 	sth	r2,14(r16)
   405b0:	80000415 	stw	zero,16(r16)
   405b4:	80000515 	stw	zero,20(r16)
   405b8:	80000615 	stw	zero,24(r16)
   405bc:	b80d883a 	mov	r6,r23
   405c0:	000b883a 	mov	r5,zero
   405c4:	81001704 	addi	r4,r16,92
   405c8:	00419f80 	call	419f8 <memset>
   405cc:	00800044 	movi	r2,1
   405d0:	84000715 	stw	r16,28(r16)
   405d4:	85800815 	stw	r22,32(r16)
   405d8:	85400915 	stw	r21,36(r16)
   405dc:	85000a15 	stw	r20,40(r16)
   405e0:	84c00b15 	stw	r19,44(r16)
   405e4:	90800e15 	stw	r2,56(r18)
   405e8:	dfc00817 	ldw	ra,32(sp)
   405ec:	ddc00717 	ldw	r23,28(sp)
   405f0:	dd800617 	ldw	r22,24(sp)
   405f4:	dd400517 	ldw	r21,20(sp)
   405f8:	dd000417 	ldw	r20,16(sp)
   405fc:	dcc00317 	ldw	r19,12(sp)
   40600:	dc800217 	ldw	r18,8(sp)
   40604:	dc400117 	ldw	r17,4(sp)
   40608:	dc000017 	ldw	r16,0(sp)
   4060c:	dec00904 	addi	sp,sp,36
   40610:	f800283a 	ret

00040614 <__fp_lock>:
   40614:	0005883a 	mov	r2,zero
   40618:	f800283a 	ret

0004061c <__sfmoreglue>:
   4061c:	defffc04 	addi	sp,sp,-16
   40620:	dc800215 	stw	r18,8(sp)
   40624:	2825883a 	mov	r18,r5
   40628:	dc000015 	stw	r16,0(sp)
   4062c:	01401a04 	movi	r5,104
   40630:	2021883a 	mov	r16,r4
   40634:	913fffc4 	addi	r4,r18,-1
   40638:	dfc00315 	stw	ra,12(sp)
   4063c:	dc400115 	stw	r17,4(sp)
   40640:	00430dc0 	call	430dc <__mulsi3>
   40644:	8009883a 	mov	r4,r16
   40648:	11401d04 	addi	r5,r2,116
   4064c:	1023883a 	mov	r17,r2
   40650:	0040e640 	call	40e64 <_malloc_r>
   40654:	1021883a 	mov	r16,r2
   40658:	10000726 	beq	r2,zero,40678 <__sfmoreglue+0x5c>
   4065c:	11000304 	addi	r4,r2,12
   40660:	10000015 	stw	zero,0(r2)
   40664:	14800115 	stw	r18,4(r2)
   40668:	11000215 	stw	r4,8(r2)
   4066c:	89801a04 	addi	r6,r17,104
   40670:	000b883a 	mov	r5,zero
   40674:	00419f80 	call	419f8 <memset>
   40678:	8005883a 	mov	r2,r16
   4067c:	dfc00317 	ldw	ra,12(sp)
   40680:	dc800217 	ldw	r18,8(sp)
   40684:	dc400117 	ldw	r17,4(sp)
   40688:	dc000017 	ldw	r16,0(sp)
   4068c:	dec00404 	addi	sp,sp,16
   40690:	f800283a 	ret

00040694 <__sfp>:
   40694:	defffb04 	addi	sp,sp,-20
   40698:	dc000015 	stw	r16,0(sp)
   4069c:	04000134 	movhi	r16,4
   406a0:	841c8a04 	addi	r16,r16,29224
   406a4:	dcc00315 	stw	r19,12(sp)
   406a8:	2027883a 	mov	r19,r4
   406ac:	81000017 	ldw	r4,0(r16)
   406b0:	dfc00415 	stw	ra,16(sp)
   406b4:	dc800215 	stw	r18,8(sp)
   406b8:	20800e17 	ldw	r2,56(r4)
   406bc:	dc400115 	stw	r17,4(sp)
   406c0:	1000021e 	bne	r2,zero,406cc <__sfp+0x38>
   406c4:	00404780 	call	40478 <__sinit.part.1>
   406c8:	81000017 	ldw	r4,0(r16)
   406cc:	2480b804 	addi	r18,r4,736
   406d0:	047fffc4 	movi	r17,-1
   406d4:	91000117 	ldw	r4,4(r18)
   406d8:	94000217 	ldw	r16,8(r18)
   406dc:	213fffc4 	addi	r4,r4,-1
   406e0:	20000a16 	blt	r4,zero,4070c <__sfp+0x78>
   406e4:	8080030f 	ldh	r2,12(r16)
   406e8:	10000c26 	beq	r2,zero,4071c <__sfp+0x88>
   406ec:	80c01d04 	addi	r3,r16,116
   406f0:	00000206 	br	406fc <__sfp+0x68>
   406f4:	18bfe60f 	ldh	r2,-104(r3)
   406f8:	10000826 	beq	r2,zero,4071c <__sfp+0x88>
   406fc:	213fffc4 	addi	r4,r4,-1
   40700:	1c3ffd04 	addi	r16,r3,-12
   40704:	18c01a04 	addi	r3,r3,104
   40708:	247ffa1e 	bne	r4,r17,406f4 <__alt_data_end+0xfffce6f4>
   4070c:	90800017 	ldw	r2,0(r18)
   40710:	10001d26 	beq	r2,zero,40788 <__sfp+0xf4>
   40714:	1025883a 	mov	r18,r2
   40718:	003fee06 	br	406d4 <__alt_data_end+0xfffce6d4>
   4071c:	00bfffc4 	movi	r2,-1
   40720:	8080038d 	sth	r2,14(r16)
   40724:	00800044 	movi	r2,1
   40728:	8080030d 	sth	r2,12(r16)
   4072c:	80001915 	stw	zero,100(r16)
   40730:	80000015 	stw	zero,0(r16)
   40734:	80000215 	stw	zero,8(r16)
   40738:	80000115 	stw	zero,4(r16)
   4073c:	80000415 	stw	zero,16(r16)
   40740:	80000515 	stw	zero,20(r16)
   40744:	80000615 	stw	zero,24(r16)
   40748:	01800204 	movi	r6,8
   4074c:	000b883a 	mov	r5,zero
   40750:	81001704 	addi	r4,r16,92
   40754:	00419f80 	call	419f8 <memset>
   40758:	8005883a 	mov	r2,r16
   4075c:	80000c15 	stw	zero,48(r16)
   40760:	80000d15 	stw	zero,52(r16)
   40764:	80001115 	stw	zero,68(r16)
   40768:	80001215 	stw	zero,72(r16)
   4076c:	dfc00417 	ldw	ra,16(sp)
   40770:	dcc00317 	ldw	r19,12(sp)
   40774:	dc800217 	ldw	r18,8(sp)
   40778:	dc400117 	ldw	r17,4(sp)
   4077c:	dc000017 	ldw	r16,0(sp)
   40780:	dec00504 	addi	sp,sp,20
   40784:	f800283a 	ret
   40788:	01400104 	movi	r5,4
   4078c:	9809883a 	mov	r4,r19
   40790:	004061c0 	call	4061c <__sfmoreglue>
   40794:	90800015 	stw	r2,0(r18)
   40798:	103fde1e 	bne	r2,zero,40714 <__alt_data_end+0xfffce714>
   4079c:	00800304 	movi	r2,12
   407a0:	98800015 	stw	r2,0(r19)
   407a4:	0005883a 	mov	r2,zero
   407a8:	003ff006 	br	4076c <__alt_data_end+0xfffce76c>

000407ac <_cleanup>:
   407ac:	00800134 	movhi	r2,4
   407b0:	109c8a04 	addi	r2,r2,29224
   407b4:	11000017 	ldw	r4,0(r2)
   407b8:	01400134 	movhi	r5,4
   407bc:	29490704 	addi	r5,r5,9244
   407c0:	0040da01 	jmpi	40da0 <_fwalk_reent>

000407c4 <__sinit>:
   407c4:	20800e17 	ldw	r2,56(r4)
   407c8:	10000126 	beq	r2,zero,407d0 <__sinit+0xc>
   407cc:	f800283a 	ret
   407d0:	00404781 	jmpi	40478 <__sinit.part.1>

000407d4 <__sfp_lock_acquire>:
   407d4:	f800283a 	ret

000407d8 <__sfp_lock_release>:
   407d8:	f800283a 	ret

000407dc <__sinit_lock_acquire>:
   407dc:	f800283a 	ret

000407e0 <__sinit_lock_release>:
   407e0:	f800283a 	ret

000407e4 <__fp_lock_all>:
   407e4:	00800134 	movhi	r2,4
   407e8:	109c8b04 	addi	r2,r2,29228
   407ec:	11000017 	ldw	r4,0(r2)
   407f0:	01400134 	movhi	r5,4
   407f4:	29418504 	addi	r5,r5,1556
   407f8:	0040cdc1 	jmpi	40cdc <_fwalk>

000407fc <__fp_unlock_all>:
   407fc:	00800134 	movhi	r2,4
   40800:	109c8b04 	addi	r2,r2,29228
   40804:	11000017 	ldw	r4,0(r2)
   40808:	01400134 	movhi	r5,4
   4080c:	29411904 	addi	r5,r5,1124
   40810:	0040cdc1 	jmpi	40cdc <_fwalk>

00040814 <__sfvwrite_r>:
   40814:	30800217 	ldw	r2,8(r6)
   40818:	10006726 	beq	r2,zero,409b8 <__sfvwrite_r+0x1a4>
   4081c:	28c0030b 	ldhu	r3,12(r5)
   40820:	defff404 	addi	sp,sp,-48
   40824:	dd400715 	stw	r21,28(sp)
   40828:	dd000615 	stw	r20,24(sp)
   4082c:	dc000215 	stw	r16,8(sp)
   40830:	dfc00b15 	stw	ra,44(sp)
   40834:	df000a15 	stw	fp,40(sp)
   40838:	ddc00915 	stw	r23,36(sp)
   4083c:	dd800815 	stw	r22,32(sp)
   40840:	dcc00515 	stw	r19,20(sp)
   40844:	dc800415 	stw	r18,16(sp)
   40848:	dc400315 	stw	r17,12(sp)
   4084c:	1880020c 	andi	r2,r3,8
   40850:	2821883a 	mov	r16,r5
   40854:	202b883a 	mov	r21,r4
   40858:	3029883a 	mov	r20,r6
   4085c:	10002726 	beq	r2,zero,408fc <__sfvwrite_r+0xe8>
   40860:	28800417 	ldw	r2,16(r5)
   40864:	10002526 	beq	r2,zero,408fc <__sfvwrite_r+0xe8>
   40868:	1880008c 	andi	r2,r3,2
   4086c:	a4400017 	ldw	r17,0(r20)
   40870:	10002a26 	beq	r2,zero,4091c <__sfvwrite_r+0x108>
   40874:	05a00034 	movhi	r22,32768
   40878:	0027883a 	mov	r19,zero
   4087c:	0025883a 	mov	r18,zero
   40880:	b5bf0004 	addi	r22,r22,-1024
   40884:	980d883a 	mov	r6,r19
   40888:	a809883a 	mov	r4,r21
   4088c:	90004626 	beq	r18,zero,409a8 <__sfvwrite_r+0x194>
   40890:	900f883a 	mov	r7,r18
   40894:	b480022e 	bgeu	r22,r18,408a0 <__sfvwrite_r+0x8c>
   40898:	01e00034 	movhi	r7,32768
   4089c:	39ff0004 	addi	r7,r7,-1024
   408a0:	80800917 	ldw	r2,36(r16)
   408a4:	81400717 	ldw	r5,28(r16)
   408a8:	103ee83a 	callr	r2
   408ac:	00805a0e 	bge	zero,r2,40a18 <__sfvwrite_r+0x204>
   408b0:	a0c00217 	ldw	r3,8(r20)
   408b4:	98a7883a 	add	r19,r19,r2
   408b8:	90a5c83a 	sub	r18,r18,r2
   408bc:	1885c83a 	sub	r2,r3,r2
   408c0:	a0800215 	stw	r2,8(r20)
   408c4:	103fef1e 	bne	r2,zero,40884 <__alt_data_end+0xfffce884>
   408c8:	0005883a 	mov	r2,zero
   408cc:	dfc00b17 	ldw	ra,44(sp)
   408d0:	df000a17 	ldw	fp,40(sp)
   408d4:	ddc00917 	ldw	r23,36(sp)
   408d8:	dd800817 	ldw	r22,32(sp)
   408dc:	dd400717 	ldw	r21,28(sp)
   408e0:	dd000617 	ldw	r20,24(sp)
   408e4:	dcc00517 	ldw	r19,20(sp)
   408e8:	dc800417 	ldw	r18,16(sp)
   408ec:	dc400317 	ldw	r17,12(sp)
   408f0:	dc000217 	ldw	r16,8(sp)
   408f4:	dec00c04 	addi	sp,sp,48
   408f8:	f800283a 	ret
   408fc:	800b883a 	mov	r5,r16
   40900:	a809883a 	mov	r4,r21
   40904:	00422740 	call	42274 <__swsetup_r>
   40908:	1000ee1e 	bne	r2,zero,40cc4 <__sfvwrite_r+0x4b0>
   4090c:	80c0030b 	ldhu	r3,12(r16)
   40910:	a4400017 	ldw	r17,0(r20)
   40914:	1880008c 	andi	r2,r3,2
   40918:	103fd61e 	bne	r2,zero,40874 <__alt_data_end+0xfffce874>
   4091c:	1880004c 	andi	r2,r3,1
   40920:	1000421e 	bne	r2,zero,40a2c <__sfvwrite_r+0x218>
   40924:	0039883a 	mov	fp,zero
   40928:	0025883a 	mov	r18,zero
   4092c:	90001a26 	beq	r18,zero,40998 <__sfvwrite_r+0x184>
   40930:	1880800c 	andi	r2,r3,512
   40934:	84c00217 	ldw	r19,8(r16)
   40938:	10002126 	beq	r2,zero,409c0 <__sfvwrite_r+0x1ac>
   4093c:	982f883a 	mov	r23,r19
   40940:	94c09636 	bltu	r18,r19,40b9c <__sfvwrite_r+0x388>
   40944:	1881200c 	andi	r2,r3,1152
   40948:	1000a11e 	bne	r2,zero,40bd0 <__sfvwrite_r+0x3bc>
   4094c:	81000017 	ldw	r4,0(r16)
   40950:	b80d883a 	mov	r6,r23
   40954:	e00b883a 	mov	r5,fp
   40958:	004189c0 	call	4189c <memmove>
   4095c:	80c00217 	ldw	r3,8(r16)
   40960:	81000017 	ldw	r4,0(r16)
   40964:	9005883a 	mov	r2,r18
   40968:	1ce7c83a 	sub	r19,r3,r19
   4096c:	25cf883a 	add	r7,r4,r23
   40970:	84c00215 	stw	r19,8(r16)
   40974:	81c00015 	stw	r7,0(r16)
   40978:	a0c00217 	ldw	r3,8(r20)
   4097c:	e0b9883a 	add	fp,fp,r2
   40980:	90a5c83a 	sub	r18,r18,r2
   40984:	18a7c83a 	sub	r19,r3,r2
   40988:	a4c00215 	stw	r19,8(r20)
   4098c:	983fce26 	beq	r19,zero,408c8 <__alt_data_end+0xfffce8c8>
   40990:	80c0030b 	ldhu	r3,12(r16)
   40994:	903fe61e 	bne	r18,zero,40930 <__alt_data_end+0xfffce930>
   40998:	8f000017 	ldw	fp,0(r17)
   4099c:	8c800117 	ldw	r18,4(r17)
   409a0:	8c400204 	addi	r17,r17,8
   409a4:	003fe106 	br	4092c <__alt_data_end+0xfffce92c>
   409a8:	8cc00017 	ldw	r19,0(r17)
   409ac:	8c800117 	ldw	r18,4(r17)
   409b0:	8c400204 	addi	r17,r17,8
   409b4:	003fb306 	br	40884 <__alt_data_end+0xfffce884>
   409b8:	0005883a 	mov	r2,zero
   409bc:	f800283a 	ret
   409c0:	81000017 	ldw	r4,0(r16)
   409c4:	80800417 	ldw	r2,16(r16)
   409c8:	11005a36 	bltu	r2,r4,40b34 <__sfvwrite_r+0x320>
   409cc:	85c00517 	ldw	r23,20(r16)
   409d0:	95c05836 	bltu	r18,r23,40b34 <__sfvwrite_r+0x320>
   409d4:	00a00034 	movhi	r2,32768
   409d8:	10bfffc4 	addi	r2,r2,-1
   409dc:	9009883a 	mov	r4,r18
   409e0:	1480012e 	bgeu	r2,r18,409e8 <__sfvwrite_r+0x1d4>
   409e4:	1009883a 	mov	r4,r2
   409e8:	b80b883a 	mov	r5,r23
   409ec:	0042f280 	call	42f28 <__divsi3>
   409f0:	b80b883a 	mov	r5,r23
   409f4:	1009883a 	mov	r4,r2
   409f8:	00430dc0 	call	430dc <__mulsi3>
   409fc:	81400717 	ldw	r5,28(r16)
   40a00:	80c00917 	ldw	r3,36(r16)
   40a04:	100f883a 	mov	r7,r2
   40a08:	e00d883a 	mov	r6,fp
   40a0c:	a809883a 	mov	r4,r21
   40a10:	183ee83a 	callr	r3
   40a14:	00bfd816 	blt	zero,r2,40978 <__alt_data_end+0xfffce978>
   40a18:	8080030b 	ldhu	r2,12(r16)
   40a1c:	10801014 	ori	r2,r2,64
   40a20:	8080030d 	sth	r2,12(r16)
   40a24:	00bfffc4 	movi	r2,-1
   40a28:	003fa806 	br	408cc <__alt_data_end+0xfffce8cc>
   40a2c:	0027883a 	mov	r19,zero
   40a30:	0011883a 	mov	r8,zero
   40a34:	0039883a 	mov	fp,zero
   40a38:	0025883a 	mov	r18,zero
   40a3c:	90001f26 	beq	r18,zero,40abc <__sfvwrite_r+0x2a8>
   40a40:	40005a26 	beq	r8,zero,40bac <__sfvwrite_r+0x398>
   40a44:	982d883a 	mov	r22,r19
   40a48:	94c0012e 	bgeu	r18,r19,40a50 <__sfvwrite_r+0x23c>
   40a4c:	902d883a 	mov	r22,r18
   40a50:	81000017 	ldw	r4,0(r16)
   40a54:	80800417 	ldw	r2,16(r16)
   40a58:	b02f883a 	mov	r23,r22
   40a5c:	81c00517 	ldw	r7,20(r16)
   40a60:	1100032e 	bgeu	r2,r4,40a70 <__sfvwrite_r+0x25c>
   40a64:	80c00217 	ldw	r3,8(r16)
   40a68:	38c7883a 	add	r3,r7,r3
   40a6c:	1d801816 	blt	r3,r22,40ad0 <__sfvwrite_r+0x2bc>
   40a70:	b1c03e16 	blt	r22,r7,40b6c <__sfvwrite_r+0x358>
   40a74:	80800917 	ldw	r2,36(r16)
   40a78:	81400717 	ldw	r5,28(r16)
   40a7c:	e00d883a 	mov	r6,fp
   40a80:	da000115 	stw	r8,4(sp)
   40a84:	a809883a 	mov	r4,r21
   40a88:	103ee83a 	callr	r2
   40a8c:	102f883a 	mov	r23,r2
   40a90:	da000117 	ldw	r8,4(sp)
   40a94:	00bfe00e 	bge	zero,r2,40a18 <__alt_data_end+0xfffcea18>
   40a98:	9de7c83a 	sub	r19,r19,r23
   40a9c:	98001f26 	beq	r19,zero,40b1c <__sfvwrite_r+0x308>
   40aa0:	a0800217 	ldw	r2,8(r20)
   40aa4:	e5f9883a 	add	fp,fp,r23
   40aa8:	95e5c83a 	sub	r18,r18,r23
   40aac:	15efc83a 	sub	r23,r2,r23
   40ab0:	a5c00215 	stw	r23,8(r20)
   40ab4:	b83f8426 	beq	r23,zero,408c8 <__alt_data_end+0xfffce8c8>
   40ab8:	903fe11e 	bne	r18,zero,40a40 <__alt_data_end+0xfffcea40>
   40abc:	8f000017 	ldw	fp,0(r17)
   40ac0:	8c800117 	ldw	r18,4(r17)
   40ac4:	0011883a 	mov	r8,zero
   40ac8:	8c400204 	addi	r17,r17,8
   40acc:	003fdb06 	br	40a3c <__alt_data_end+0xfffcea3c>
   40ad0:	180d883a 	mov	r6,r3
   40ad4:	e00b883a 	mov	r5,fp
   40ad8:	da000115 	stw	r8,4(sp)
   40adc:	d8c00015 	stw	r3,0(sp)
   40ae0:	004189c0 	call	4189c <memmove>
   40ae4:	d8c00017 	ldw	r3,0(sp)
   40ae8:	80800017 	ldw	r2,0(r16)
   40aec:	800b883a 	mov	r5,r16
   40af0:	a809883a 	mov	r4,r21
   40af4:	10c5883a 	add	r2,r2,r3
   40af8:	80800015 	stw	r2,0(r16)
   40afc:	d8c00015 	stw	r3,0(sp)
   40b00:	004273c0 	call	4273c <_fflush_r>
   40b04:	d8c00017 	ldw	r3,0(sp)
   40b08:	da000117 	ldw	r8,4(sp)
   40b0c:	103fc21e 	bne	r2,zero,40a18 <__alt_data_end+0xfffcea18>
   40b10:	182f883a 	mov	r23,r3
   40b14:	9de7c83a 	sub	r19,r19,r23
   40b18:	983fe11e 	bne	r19,zero,40aa0 <__alt_data_end+0xfffceaa0>
   40b1c:	800b883a 	mov	r5,r16
   40b20:	a809883a 	mov	r4,r21
   40b24:	004273c0 	call	4273c <_fflush_r>
   40b28:	103fbb1e 	bne	r2,zero,40a18 <__alt_data_end+0xfffcea18>
   40b2c:	0011883a 	mov	r8,zero
   40b30:	003fdb06 	br	40aa0 <__alt_data_end+0xfffceaa0>
   40b34:	94c0012e 	bgeu	r18,r19,40b3c <__sfvwrite_r+0x328>
   40b38:	9027883a 	mov	r19,r18
   40b3c:	980d883a 	mov	r6,r19
   40b40:	e00b883a 	mov	r5,fp
   40b44:	004189c0 	call	4189c <memmove>
   40b48:	80800217 	ldw	r2,8(r16)
   40b4c:	80c00017 	ldw	r3,0(r16)
   40b50:	14c5c83a 	sub	r2,r2,r19
   40b54:	1cc7883a 	add	r3,r3,r19
   40b58:	80800215 	stw	r2,8(r16)
   40b5c:	80c00015 	stw	r3,0(r16)
   40b60:	10004326 	beq	r2,zero,40c70 <__sfvwrite_r+0x45c>
   40b64:	9805883a 	mov	r2,r19
   40b68:	003f8306 	br	40978 <__alt_data_end+0xfffce978>
   40b6c:	b00d883a 	mov	r6,r22
   40b70:	e00b883a 	mov	r5,fp
   40b74:	da000115 	stw	r8,4(sp)
   40b78:	004189c0 	call	4189c <memmove>
   40b7c:	80800217 	ldw	r2,8(r16)
   40b80:	80c00017 	ldw	r3,0(r16)
   40b84:	da000117 	ldw	r8,4(sp)
   40b88:	1585c83a 	sub	r2,r2,r22
   40b8c:	1dad883a 	add	r22,r3,r22
   40b90:	80800215 	stw	r2,8(r16)
   40b94:	85800015 	stw	r22,0(r16)
   40b98:	003fbf06 	br	40a98 <__alt_data_end+0xfffcea98>
   40b9c:	81000017 	ldw	r4,0(r16)
   40ba0:	9027883a 	mov	r19,r18
   40ba4:	902f883a 	mov	r23,r18
   40ba8:	003f6906 	br	40950 <__alt_data_end+0xfffce950>
   40bac:	900d883a 	mov	r6,r18
   40bb0:	01400284 	movi	r5,10
   40bb4:	e009883a 	mov	r4,fp
   40bb8:	00416700 	call	41670 <memchr>
   40bbc:	10003e26 	beq	r2,zero,40cb8 <__sfvwrite_r+0x4a4>
   40bc0:	10800044 	addi	r2,r2,1
   40bc4:	1727c83a 	sub	r19,r2,fp
   40bc8:	02000044 	movi	r8,1
   40bcc:	003f9d06 	br	40a44 <__alt_data_end+0xfffcea44>
   40bd0:	80800517 	ldw	r2,20(r16)
   40bd4:	81400417 	ldw	r5,16(r16)
   40bd8:	81c00017 	ldw	r7,0(r16)
   40bdc:	10a7883a 	add	r19,r2,r2
   40be0:	9885883a 	add	r2,r19,r2
   40be4:	1026d7fa 	srli	r19,r2,31
   40be8:	396dc83a 	sub	r22,r7,r5
   40bec:	b1000044 	addi	r4,r22,1
   40bf0:	9885883a 	add	r2,r19,r2
   40bf4:	1027d07a 	srai	r19,r2,1
   40bf8:	2485883a 	add	r2,r4,r18
   40bfc:	980d883a 	mov	r6,r19
   40c00:	9880022e 	bgeu	r19,r2,40c0c <__sfvwrite_r+0x3f8>
   40c04:	1027883a 	mov	r19,r2
   40c08:	100d883a 	mov	r6,r2
   40c0c:	18c1000c 	andi	r3,r3,1024
   40c10:	18001c26 	beq	r3,zero,40c84 <__sfvwrite_r+0x470>
   40c14:	300b883a 	mov	r5,r6
   40c18:	a809883a 	mov	r4,r21
   40c1c:	0040e640 	call	40e64 <_malloc_r>
   40c20:	102f883a 	mov	r23,r2
   40c24:	10002926 	beq	r2,zero,40ccc <__sfvwrite_r+0x4b8>
   40c28:	81400417 	ldw	r5,16(r16)
   40c2c:	b00d883a 	mov	r6,r22
   40c30:	1009883a 	mov	r4,r2
   40c34:	00417540 	call	41754 <memcpy>
   40c38:	8080030b 	ldhu	r2,12(r16)
   40c3c:	00fedfc4 	movi	r3,-1153
   40c40:	10c4703a 	and	r2,r2,r3
   40c44:	10802014 	ori	r2,r2,128
   40c48:	8080030d 	sth	r2,12(r16)
   40c4c:	bd89883a 	add	r4,r23,r22
   40c50:	9d8fc83a 	sub	r7,r19,r22
   40c54:	85c00415 	stw	r23,16(r16)
   40c58:	84c00515 	stw	r19,20(r16)
   40c5c:	81000015 	stw	r4,0(r16)
   40c60:	9027883a 	mov	r19,r18
   40c64:	81c00215 	stw	r7,8(r16)
   40c68:	902f883a 	mov	r23,r18
   40c6c:	003f3806 	br	40950 <__alt_data_end+0xfffce950>
   40c70:	800b883a 	mov	r5,r16
   40c74:	a809883a 	mov	r4,r21
   40c78:	004273c0 	call	4273c <_fflush_r>
   40c7c:	103fb926 	beq	r2,zero,40b64 <__alt_data_end+0xfffceb64>
   40c80:	003f6506 	br	40a18 <__alt_data_end+0xfffcea18>
   40c84:	a809883a 	mov	r4,r21
   40c88:	0041b200 	call	41b20 <_realloc_r>
   40c8c:	102f883a 	mov	r23,r2
   40c90:	103fee1e 	bne	r2,zero,40c4c <__alt_data_end+0xfffcec4c>
   40c94:	81400417 	ldw	r5,16(r16)
   40c98:	a809883a 	mov	r4,r21
   40c9c:	00428ec0 	call	428ec <_free_r>
   40ca0:	8080030b 	ldhu	r2,12(r16)
   40ca4:	00ffdfc4 	movi	r3,-129
   40ca8:	1884703a 	and	r2,r3,r2
   40cac:	00c00304 	movi	r3,12
   40cb0:	a8c00015 	stw	r3,0(r21)
   40cb4:	003f5906 	br	40a1c <__alt_data_end+0xfffcea1c>
   40cb8:	94c00044 	addi	r19,r18,1
   40cbc:	02000044 	movi	r8,1
   40cc0:	003f6006 	br	40a44 <__alt_data_end+0xfffcea44>
   40cc4:	00bfffc4 	movi	r2,-1
   40cc8:	003f0006 	br	408cc <__alt_data_end+0xfffce8cc>
   40ccc:	00800304 	movi	r2,12
   40cd0:	a8800015 	stw	r2,0(r21)
   40cd4:	8080030b 	ldhu	r2,12(r16)
   40cd8:	003f5006 	br	40a1c <__alt_data_end+0xfffcea1c>

00040cdc <_fwalk>:
   40cdc:	defff704 	addi	sp,sp,-36
   40ce0:	dd000415 	stw	r20,16(sp)
   40ce4:	dfc00815 	stw	ra,32(sp)
   40ce8:	ddc00715 	stw	r23,28(sp)
   40cec:	dd800615 	stw	r22,24(sp)
   40cf0:	dd400515 	stw	r21,20(sp)
   40cf4:	dcc00315 	stw	r19,12(sp)
   40cf8:	dc800215 	stw	r18,8(sp)
   40cfc:	dc400115 	stw	r17,4(sp)
   40d00:	dc000015 	stw	r16,0(sp)
   40d04:	2500b804 	addi	r20,r4,736
   40d08:	a0002326 	beq	r20,zero,40d98 <_fwalk+0xbc>
   40d0c:	282b883a 	mov	r21,r5
   40d10:	002f883a 	mov	r23,zero
   40d14:	05800044 	movi	r22,1
   40d18:	04ffffc4 	movi	r19,-1
   40d1c:	a4400117 	ldw	r17,4(r20)
   40d20:	a4800217 	ldw	r18,8(r20)
   40d24:	8c7fffc4 	addi	r17,r17,-1
   40d28:	88000d16 	blt	r17,zero,40d60 <_fwalk+0x84>
   40d2c:	94000304 	addi	r16,r18,12
   40d30:	94800384 	addi	r18,r18,14
   40d34:	8080000b 	ldhu	r2,0(r16)
   40d38:	8c7fffc4 	addi	r17,r17,-1
   40d3c:	813ffd04 	addi	r4,r16,-12
   40d40:	b080042e 	bgeu	r22,r2,40d54 <_fwalk+0x78>
   40d44:	9080000f 	ldh	r2,0(r18)
   40d48:	14c00226 	beq	r2,r19,40d54 <_fwalk+0x78>
   40d4c:	a83ee83a 	callr	r21
   40d50:	b8aeb03a 	or	r23,r23,r2
   40d54:	84001a04 	addi	r16,r16,104
   40d58:	94801a04 	addi	r18,r18,104
   40d5c:	8cfff51e 	bne	r17,r19,40d34 <__alt_data_end+0xfffced34>
   40d60:	a5000017 	ldw	r20,0(r20)
   40d64:	a03fed1e 	bne	r20,zero,40d1c <__alt_data_end+0xfffced1c>
   40d68:	b805883a 	mov	r2,r23
   40d6c:	dfc00817 	ldw	ra,32(sp)
   40d70:	ddc00717 	ldw	r23,28(sp)
   40d74:	dd800617 	ldw	r22,24(sp)
   40d78:	dd400517 	ldw	r21,20(sp)
   40d7c:	dd000417 	ldw	r20,16(sp)
   40d80:	dcc00317 	ldw	r19,12(sp)
   40d84:	dc800217 	ldw	r18,8(sp)
   40d88:	dc400117 	ldw	r17,4(sp)
   40d8c:	dc000017 	ldw	r16,0(sp)
   40d90:	dec00904 	addi	sp,sp,36
   40d94:	f800283a 	ret
   40d98:	002f883a 	mov	r23,zero
   40d9c:	003ff206 	br	40d68 <__alt_data_end+0xfffced68>

00040da0 <_fwalk_reent>:
   40da0:	defff704 	addi	sp,sp,-36
   40da4:	dd000415 	stw	r20,16(sp)
   40da8:	dfc00815 	stw	ra,32(sp)
   40dac:	ddc00715 	stw	r23,28(sp)
   40db0:	dd800615 	stw	r22,24(sp)
   40db4:	dd400515 	stw	r21,20(sp)
   40db8:	dcc00315 	stw	r19,12(sp)
   40dbc:	dc800215 	stw	r18,8(sp)
   40dc0:	dc400115 	stw	r17,4(sp)
   40dc4:	dc000015 	stw	r16,0(sp)
   40dc8:	2500b804 	addi	r20,r4,736
   40dcc:	a0002326 	beq	r20,zero,40e5c <_fwalk_reent+0xbc>
   40dd0:	282b883a 	mov	r21,r5
   40dd4:	2027883a 	mov	r19,r4
   40dd8:	002f883a 	mov	r23,zero
   40ddc:	05800044 	movi	r22,1
   40de0:	04bfffc4 	movi	r18,-1
   40de4:	a4400117 	ldw	r17,4(r20)
   40de8:	a4000217 	ldw	r16,8(r20)
   40dec:	8c7fffc4 	addi	r17,r17,-1
   40df0:	88000c16 	blt	r17,zero,40e24 <_fwalk_reent+0x84>
   40df4:	84000304 	addi	r16,r16,12
   40df8:	8080000b 	ldhu	r2,0(r16)
   40dfc:	8c7fffc4 	addi	r17,r17,-1
   40e00:	817ffd04 	addi	r5,r16,-12
   40e04:	b080052e 	bgeu	r22,r2,40e1c <_fwalk_reent+0x7c>
   40e08:	8080008f 	ldh	r2,2(r16)
   40e0c:	9809883a 	mov	r4,r19
   40e10:	14800226 	beq	r2,r18,40e1c <_fwalk_reent+0x7c>
   40e14:	a83ee83a 	callr	r21
   40e18:	b8aeb03a 	or	r23,r23,r2
   40e1c:	84001a04 	addi	r16,r16,104
   40e20:	8cbff51e 	bne	r17,r18,40df8 <__alt_data_end+0xfffcedf8>
   40e24:	a5000017 	ldw	r20,0(r20)
   40e28:	a03fee1e 	bne	r20,zero,40de4 <__alt_data_end+0xfffcede4>
   40e2c:	b805883a 	mov	r2,r23
   40e30:	dfc00817 	ldw	ra,32(sp)
   40e34:	ddc00717 	ldw	r23,28(sp)
   40e38:	dd800617 	ldw	r22,24(sp)
   40e3c:	dd400517 	ldw	r21,20(sp)
   40e40:	dd000417 	ldw	r20,16(sp)
   40e44:	dcc00317 	ldw	r19,12(sp)
   40e48:	dc800217 	ldw	r18,8(sp)
   40e4c:	dc400117 	ldw	r17,4(sp)
   40e50:	dc000017 	ldw	r16,0(sp)
   40e54:	dec00904 	addi	sp,sp,36
   40e58:	f800283a 	ret
   40e5c:	002f883a 	mov	r23,zero
   40e60:	003ff206 	br	40e2c <__alt_data_end+0xfffcee2c>

00040e64 <_malloc_r>:
   40e64:	defff504 	addi	sp,sp,-44
   40e68:	dc800315 	stw	r18,12(sp)
   40e6c:	dfc00a15 	stw	ra,40(sp)
   40e70:	df000915 	stw	fp,36(sp)
   40e74:	ddc00815 	stw	r23,32(sp)
   40e78:	dd800715 	stw	r22,28(sp)
   40e7c:	dd400615 	stw	r21,24(sp)
   40e80:	dd000515 	stw	r20,20(sp)
   40e84:	dcc00415 	stw	r19,16(sp)
   40e88:	dc400215 	stw	r17,8(sp)
   40e8c:	dc000115 	stw	r16,4(sp)
   40e90:	288002c4 	addi	r2,r5,11
   40e94:	00c00584 	movi	r3,22
   40e98:	2025883a 	mov	r18,r4
   40e9c:	18807f2e 	bgeu	r3,r2,4109c <_malloc_r+0x238>
   40ea0:	047ffe04 	movi	r17,-8
   40ea4:	1462703a 	and	r17,r2,r17
   40ea8:	8800a316 	blt	r17,zero,41138 <_malloc_r+0x2d4>
   40eac:	8940a236 	bltu	r17,r5,41138 <_malloc_r+0x2d4>
   40eb0:	00436a00 	call	436a0 <__malloc_lock>
   40eb4:	00807dc4 	movi	r2,503
   40eb8:	1441e92e 	bgeu	r2,r17,41660 <_malloc_r+0x7fc>
   40ebc:	8804d27a 	srli	r2,r17,9
   40ec0:	1000a126 	beq	r2,zero,41148 <_malloc_r+0x2e4>
   40ec4:	00c00104 	movi	r3,4
   40ec8:	18811e36 	bltu	r3,r2,41344 <_malloc_r+0x4e0>
   40ecc:	8804d1ba 	srli	r2,r17,6
   40ed0:	12000e44 	addi	r8,r2,57
   40ed4:	11c00e04 	addi	r7,r2,56
   40ed8:	4209883a 	add	r4,r8,r8
   40edc:	04c00134 	movhi	r19,4
   40ee0:	2109883a 	add	r4,r4,r4
   40ee4:	9cd70604 	addi	r19,r19,23576
   40ee8:	2109883a 	add	r4,r4,r4
   40eec:	9909883a 	add	r4,r19,r4
   40ef0:	24000117 	ldw	r16,4(r4)
   40ef4:	213ffe04 	addi	r4,r4,-8
   40ef8:	24009726 	beq	r4,r16,41158 <_malloc_r+0x2f4>
   40efc:	80800117 	ldw	r2,4(r16)
   40f00:	01bfff04 	movi	r6,-4
   40f04:	014003c4 	movi	r5,15
   40f08:	1184703a 	and	r2,r2,r6
   40f0c:	1447c83a 	sub	r3,r2,r17
   40f10:	28c00716 	blt	r5,r3,40f30 <_malloc_r+0xcc>
   40f14:	1800920e 	bge	r3,zero,41160 <_malloc_r+0x2fc>
   40f18:	84000317 	ldw	r16,12(r16)
   40f1c:	24008e26 	beq	r4,r16,41158 <_malloc_r+0x2f4>
   40f20:	80800117 	ldw	r2,4(r16)
   40f24:	1184703a 	and	r2,r2,r6
   40f28:	1447c83a 	sub	r3,r2,r17
   40f2c:	28fff90e 	bge	r5,r3,40f14 <__alt_data_end+0xfffcef14>
   40f30:	3809883a 	mov	r4,r7
   40f34:	01800134 	movhi	r6,4
   40f38:	9c000417 	ldw	r16,16(r19)
   40f3c:	31970604 	addi	r6,r6,23576
   40f40:	32000204 	addi	r8,r6,8
   40f44:	82013426 	beq	r16,r8,41418 <_malloc_r+0x5b4>
   40f48:	80c00117 	ldw	r3,4(r16)
   40f4c:	00bfff04 	movi	r2,-4
   40f50:	188e703a 	and	r7,r3,r2
   40f54:	3c45c83a 	sub	r2,r7,r17
   40f58:	00c003c4 	movi	r3,15
   40f5c:	18811f16 	blt	r3,r2,413dc <_malloc_r+0x578>
   40f60:	32000515 	stw	r8,20(r6)
   40f64:	32000415 	stw	r8,16(r6)
   40f68:	10007f0e 	bge	r2,zero,41168 <_malloc_r+0x304>
   40f6c:	00807fc4 	movi	r2,511
   40f70:	11c0fd36 	bltu	r2,r7,41368 <_malloc_r+0x504>
   40f74:	3806d0fa 	srli	r3,r7,3
   40f78:	01c00044 	movi	r7,1
   40f7c:	30800117 	ldw	r2,4(r6)
   40f80:	19400044 	addi	r5,r3,1
   40f84:	294b883a 	add	r5,r5,r5
   40f88:	1807d0ba 	srai	r3,r3,2
   40f8c:	294b883a 	add	r5,r5,r5
   40f90:	294b883a 	add	r5,r5,r5
   40f94:	298b883a 	add	r5,r5,r6
   40f98:	38c6983a 	sll	r3,r7,r3
   40f9c:	29c00017 	ldw	r7,0(r5)
   40fa0:	2a7ffe04 	addi	r9,r5,-8
   40fa4:	1886b03a 	or	r3,r3,r2
   40fa8:	82400315 	stw	r9,12(r16)
   40fac:	81c00215 	stw	r7,8(r16)
   40fb0:	30c00115 	stw	r3,4(r6)
   40fb4:	2c000015 	stw	r16,0(r5)
   40fb8:	3c000315 	stw	r16,12(r7)
   40fbc:	2005d0ba 	srai	r2,r4,2
   40fc0:	01400044 	movi	r5,1
   40fc4:	288a983a 	sll	r5,r5,r2
   40fc8:	19406f36 	bltu	r3,r5,41188 <_malloc_r+0x324>
   40fcc:	28c4703a 	and	r2,r5,r3
   40fd0:	10000a1e 	bne	r2,zero,40ffc <_malloc_r+0x198>
   40fd4:	00bfff04 	movi	r2,-4
   40fd8:	294b883a 	add	r5,r5,r5
   40fdc:	2088703a 	and	r4,r4,r2
   40fe0:	28c4703a 	and	r2,r5,r3
   40fe4:	21000104 	addi	r4,r4,4
   40fe8:	1000041e 	bne	r2,zero,40ffc <_malloc_r+0x198>
   40fec:	294b883a 	add	r5,r5,r5
   40ff0:	28c4703a 	and	r2,r5,r3
   40ff4:	21000104 	addi	r4,r4,4
   40ff8:	103ffc26 	beq	r2,zero,40fec <__alt_data_end+0xfffcefec>
   40ffc:	02bfff04 	movi	r10,-4
   41000:	024003c4 	movi	r9,15
   41004:	21800044 	addi	r6,r4,1
   41008:	318d883a 	add	r6,r6,r6
   4100c:	318d883a 	add	r6,r6,r6
   41010:	318d883a 	add	r6,r6,r6
   41014:	998d883a 	add	r6,r19,r6
   41018:	333ffe04 	addi	r12,r6,-8
   4101c:	2017883a 	mov	r11,r4
   41020:	31800104 	addi	r6,r6,4
   41024:	34000017 	ldw	r16,0(r6)
   41028:	31fffd04 	addi	r7,r6,-12
   4102c:	81c0041e 	bne	r16,r7,41040 <_malloc_r+0x1dc>
   41030:	0000fb06 	br	41420 <_malloc_r+0x5bc>
   41034:	1801030e 	bge	r3,zero,41444 <_malloc_r+0x5e0>
   41038:	84000317 	ldw	r16,12(r16)
   4103c:	81c0f826 	beq	r16,r7,41420 <_malloc_r+0x5bc>
   41040:	80800117 	ldw	r2,4(r16)
   41044:	1284703a 	and	r2,r2,r10
   41048:	1447c83a 	sub	r3,r2,r17
   4104c:	48fff90e 	bge	r9,r3,41034 <__alt_data_end+0xfffcf034>
   41050:	80800317 	ldw	r2,12(r16)
   41054:	81000217 	ldw	r4,8(r16)
   41058:	89400054 	ori	r5,r17,1
   4105c:	81400115 	stw	r5,4(r16)
   41060:	20800315 	stw	r2,12(r4)
   41064:	11000215 	stw	r4,8(r2)
   41068:	8463883a 	add	r17,r16,r17
   4106c:	9c400515 	stw	r17,20(r19)
   41070:	9c400415 	stw	r17,16(r19)
   41074:	18800054 	ori	r2,r3,1
   41078:	88800115 	stw	r2,4(r17)
   4107c:	8a000315 	stw	r8,12(r17)
   41080:	8a000215 	stw	r8,8(r17)
   41084:	88e3883a 	add	r17,r17,r3
   41088:	88c00015 	stw	r3,0(r17)
   4108c:	9009883a 	mov	r4,r18
   41090:	00436c40 	call	436c4 <__malloc_unlock>
   41094:	80800204 	addi	r2,r16,8
   41098:	00001b06 	br	41108 <_malloc_r+0x2a4>
   4109c:	04400404 	movi	r17,16
   410a0:	89402536 	bltu	r17,r5,41138 <_malloc_r+0x2d4>
   410a4:	00436a00 	call	436a0 <__malloc_lock>
   410a8:	00800184 	movi	r2,6
   410ac:	01000084 	movi	r4,2
   410b0:	04c00134 	movhi	r19,4
   410b4:	1085883a 	add	r2,r2,r2
   410b8:	9cd70604 	addi	r19,r19,23576
   410bc:	1085883a 	add	r2,r2,r2
   410c0:	9885883a 	add	r2,r19,r2
   410c4:	14000117 	ldw	r16,4(r2)
   410c8:	10fffe04 	addi	r3,r2,-8
   410cc:	80c0d926 	beq	r16,r3,41434 <_malloc_r+0x5d0>
   410d0:	80c00117 	ldw	r3,4(r16)
   410d4:	81000317 	ldw	r4,12(r16)
   410d8:	00bfff04 	movi	r2,-4
   410dc:	1884703a 	and	r2,r3,r2
   410e0:	81400217 	ldw	r5,8(r16)
   410e4:	8085883a 	add	r2,r16,r2
   410e8:	10c00117 	ldw	r3,4(r2)
   410ec:	29000315 	stw	r4,12(r5)
   410f0:	21400215 	stw	r5,8(r4)
   410f4:	18c00054 	ori	r3,r3,1
   410f8:	10c00115 	stw	r3,4(r2)
   410fc:	9009883a 	mov	r4,r18
   41100:	00436c40 	call	436c4 <__malloc_unlock>
   41104:	80800204 	addi	r2,r16,8
   41108:	dfc00a17 	ldw	ra,40(sp)
   4110c:	df000917 	ldw	fp,36(sp)
   41110:	ddc00817 	ldw	r23,32(sp)
   41114:	dd800717 	ldw	r22,28(sp)
   41118:	dd400617 	ldw	r21,24(sp)
   4111c:	dd000517 	ldw	r20,20(sp)
   41120:	dcc00417 	ldw	r19,16(sp)
   41124:	dc800317 	ldw	r18,12(sp)
   41128:	dc400217 	ldw	r17,8(sp)
   4112c:	dc000117 	ldw	r16,4(sp)
   41130:	dec00b04 	addi	sp,sp,44
   41134:	f800283a 	ret
   41138:	00800304 	movi	r2,12
   4113c:	90800015 	stw	r2,0(r18)
   41140:	0005883a 	mov	r2,zero
   41144:	003ff006 	br	41108 <__alt_data_end+0xfffcf108>
   41148:	01002004 	movi	r4,128
   4114c:	02001004 	movi	r8,64
   41150:	01c00fc4 	movi	r7,63
   41154:	003f6106 	br	40edc <__alt_data_end+0xfffceedc>
   41158:	4009883a 	mov	r4,r8
   4115c:	003f7506 	br	40f34 <__alt_data_end+0xfffcef34>
   41160:	81000317 	ldw	r4,12(r16)
   41164:	003fde06 	br	410e0 <__alt_data_end+0xfffcf0e0>
   41168:	81c5883a 	add	r2,r16,r7
   4116c:	11400117 	ldw	r5,4(r2)
   41170:	9009883a 	mov	r4,r18
   41174:	29400054 	ori	r5,r5,1
   41178:	11400115 	stw	r5,4(r2)
   4117c:	00436c40 	call	436c4 <__malloc_unlock>
   41180:	80800204 	addi	r2,r16,8
   41184:	003fe006 	br	41108 <__alt_data_end+0xfffcf108>
   41188:	9c000217 	ldw	r16,8(r19)
   4118c:	00bfff04 	movi	r2,-4
   41190:	85800117 	ldw	r22,4(r16)
   41194:	b0ac703a 	and	r22,r22,r2
   41198:	b4400336 	bltu	r22,r17,411a8 <_malloc_r+0x344>
   4119c:	b445c83a 	sub	r2,r22,r17
   411a0:	00c003c4 	movi	r3,15
   411a4:	18805d16 	blt	r3,r2,4131c <_malloc_r+0x4b8>
   411a8:	05c00134 	movhi	r23,4
   411ac:	00800174 	movhi	r2,5
   411b0:	10a33504 	addi	r2,r2,-29484
   411b4:	bddc8c04 	addi	r23,r23,29232
   411b8:	15400017 	ldw	r21,0(r2)
   411bc:	b8c00017 	ldw	r3,0(r23)
   411c0:	00bfffc4 	movi	r2,-1
   411c4:	858d883a 	add	r6,r16,r22
   411c8:	8d6b883a 	add	r21,r17,r21
   411cc:	1880ea26 	beq	r3,r2,41578 <_malloc_r+0x714>
   411d0:	ad4403c4 	addi	r21,r21,4111
   411d4:	00bc0004 	movi	r2,-4096
   411d8:	a8aa703a 	and	r21,r21,r2
   411dc:	a80b883a 	mov	r5,r21
   411e0:	9009883a 	mov	r4,r18
   411e4:	d9800015 	stw	r6,0(sp)
   411e8:	00420840 	call	42084 <_sbrk_r>
   411ec:	1029883a 	mov	r20,r2
   411f0:	00bfffc4 	movi	r2,-1
   411f4:	d9800017 	ldw	r6,0(sp)
   411f8:	a080e826 	beq	r20,r2,4159c <_malloc_r+0x738>
   411fc:	a180a636 	bltu	r20,r6,41498 <_malloc_r+0x634>
   41200:	07000174 	movhi	fp,5
   41204:	e7233e04 	addi	fp,fp,-29448
   41208:	e0800017 	ldw	r2,0(fp)
   4120c:	a887883a 	add	r3,r21,r2
   41210:	e0c00015 	stw	r3,0(fp)
   41214:	3500e626 	beq	r6,r20,415b0 <_malloc_r+0x74c>
   41218:	b9000017 	ldw	r4,0(r23)
   4121c:	00bfffc4 	movi	r2,-1
   41220:	2080ee26 	beq	r4,r2,415dc <_malloc_r+0x778>
   41224:	a185c83a 	sub	r2,r20,r6
   41228:	10c5883a 	add	r2,r2,r3
   4122c:	e0800015 	stw	r2,0(fp)
   41230:	a0c001cc 	andi	r3,r20,7
   41234:	1800bc26 	beq	r3,zero,41528 <_malloc_r+0x6c4>
   41238:	a0e9c83a 	sub	r20,r20,r3
   4123c:	00840204 	movi	r2,4104
   41240:	a5000204 	addi	r20,r20,8
   41244:	10c7c83a 	sub	r3,r2,r3
   41248:	a545883a 	add	r2,r20,r21
   4124c:	1083ffcc 	andi	r2,r2,4095
   41250:	18abc83a 	sub	r21,r3,r2
   41254:	a80b883a 	mov	r5,r21
   41258:	9009883a 	mov	r4,r18
   4125c:	00420840 	call	42084 <_sbrk_r>
   41260:	00ffffc4 	movi	r3,-1
   41264:	10c0e126 	beq	r2,r3,415ec <_malloc_r+0x788>
   41268:	1505c83a 	sub	r2,r2,r20
   4126c:	1545883a 	add	r2,r2,r21
   41270:	10800054 	ori	r2,r2,1
   41274:	e0c00017 	ldw	r3,0(fp)
   41278:	9d000215 	stw	r20,8(r19)
   4127c:	a0800115 	stw	r2,4(r20)
   41280:	a8c7883a 	add	r3,r21,r3
   41284:	e0c00015 	stw	r3,0(fp)
   41288:	84c00e26 	beq	r16,r19,412c4 <_malloc_r+0x460>
   4128c:	018003c4 	movi	r6,15
   41290:	3580a72e 	bgeu	r6,r22,41530 <_malloc_r+0x6cc>
   41294:	81400117 	ldw	r5,4(r16)
   41298:	013ffe04 	movi	r4,-8
   4129c:	b0bffd04 	addi	r2,r22,-12
   412a0:	1104703a 	and	r2,r2,r4
   412a4:	2900004c 	andi	r4,r5,1
   412a8:	2088b03a 	or	r4,r4,r2
   412ac:	81000115 	stw	r4,4(r16)
   412b0:	01400144 	movi	r5,5
   412b4:	8089883a 	add	r4,r16,r2
   412b8:	21400115 	stw	r5,4(r4)
   412bc:	21400215 	stw	r5,8(r4)
   412c0:	3080cd36 	bltu	r6,r2,415f8 <_malloc_r+0x794>
   412c4:	00800174 	movhi	r2,5
   412c8:	10a33404 	addi	r2,r2,-29488
   412cc:	11000017 	ldw	r4,0(r2)
   412d0:	20c0012e 	bgeu	r4,r3,412d8 <_malloc_r+0x474>
   412d4:	10c00015 	stw	r3,0(r2)
   412d8:	00800174 	movhi	r2,5
   412dc:	10a33304 	addi	r2,r2,-29492
   412e0:	11000017 	ldw	r4,0(r2)
   412e4:	9c000217 	ldw	r16,8(r19)
   412e8:	20c0012e 	bgeu	r4,r3,412f0 <_malloc_r+0x48c>
   412ec:	10c00015 	stw	r3,0(r2)
   412f0:	80c00117 	ldw	r3,4(r16)
   412f4:	00bfff04 	movi	r2,-4
   412f8:	1886703a 	and	r3,r3,r2
   412fc:	1c45c83a 	sub	r2,r3,r17
   41300:	1c400236 	bltu	r3,r17,4130c <_malloc_r+0x4a8>
   41304:	00c003c4 	movi	r3,15
   41308:	18800416 	blt	r3,r2,4131c <_malloc_r+0x4b8>
   4130c:	9009883a 	mov	r4,r18
   41310:	00436c40 	call	436c4 <__malloc_unlock>
   41314:	0005883a 	mov	r2,zero
   41318:	003f7b06 	br	41108 <__alt_data_end+0xfffcf108>
   4131c:	88c00054 	ori	r3,r17,1
   41320:	80c00115 	stw	r3,4(r16)
   41324:	8463883a 	add	r17,r16,r17
   41328:	10800054 	ori	r2,r2,1
   4132c:	9c400215 	stw	r17,8(r19)
   41330:	88800115 	stw	r2,4(r17)
   41334:	9009883a 	mov	r4,r18
   41338:	00436c40 	call	436c4 <__malloc_unlock>
   4133c:	80800204 	addi	r2,r16,8
   41340:	003f7106 	br	41108 <__alt_data_end+0xfffcf108>
   41344:	00c00504 	movi	r3,20
   41348:	18804a2e 	bgeu	r3,r2,41474 <_malloc_r+0x610>
   4134c:	00c01504 	movi	r3,84
   41350:	18806e36 	bltu	r3,r2,4150c <_malloc_r+0x6a8>
   41354:	8804d33a 	srli	r2,r17,12
   41358:	12001bc4 	addi	r8,r2,111
   4135c:	11c01b84 	addi	r7,r2,110
   41360:	4209883a 	add	r4,r8,r8
   41364:	003edd06 	br	40edc <__alt_data_end+0xfffceedc>
   41368:	3804d27a 	srli	r2,r7,9
   4136c:	00c00104 	movi	r3,4
   41370:	1880442e 	bgeu	r3,r2,41484 <_malloc_r+0x620>
   41374:	00c00504 	movi	r3,20
   41378:	18808136 	bltu	r3,r2,41580 <_malloc_r+0x71c>
   4137c:	11401704 	addi	r5,r2,92
   41380:	10c016c4 	addi	r3,r2,91
   41384:	294b883a 	add	r5,r5,r5
   41388:	294b883a 	add	r5,r5,r5
   4138c:	294b883a 	add	r5,r5,r5
   41390:	994b883a 	add	r5,r19,r5
   41394:	28800017 	ldw	r2,0(r5)
   41398:	01800134 	movhi	r6,4
   4139c:	297ffe04 	addi	r5,r5,-8
   413a0:	31970604 	addi	r6,r6,23576
   413a4:	28806526 	beq	r5,r2,4153c <_malloc_r+0x6d8>
   413a8:	01bfff04 	movi	r6,-4
   413ac:	10c00117 	ldw	r3,4(r2)
   413b0:	1986703a 	and	r3,r3,r6
   413b4:	38c0022e 	bgeu	r7,r3,413c0 <_malloc_r+0x55c>
   413b8:	10800217 	ldw	r2,8(r2)
   413bc:	28bffb1e 	bne	r5,r2,413ac <__alt_data_end+0xfffcf3ac>
   413c0:	11400317 	ldw	r5,12(r2)
   413c4:	98c00117 	ldw	r3,4(r19)
   413c8:	81400315 	stw	r5,12(r16)
   413cc:	80800215 	stw	r2,8(r16)
   413d0:	2c000215 	stw	r16,8(r5)
   413d4:	14000315 	stw	r16,12(r2)
   413d8:	003ef806 	br	40fbc <__alt_data_end+0xfffcefbc>
   413dc:	88c00054 	ori	r3,r17,1
   413e0:	80c00115 	stw	r3,4(r16)
   413e4:	8463883a 	add	r17,r16,r17
   413e8:	34400515 	stw	r17,20(r6)
   413ec:	34400415 	stw	r17,16(r6)
   413f0:	10c00054 	ori	r3,r2,1
   413f4:	8a000315 	stw	r8,12(r17)
   413f8:	8a000215 	stw	r8,8(r17)
   413fc:	88c00115 	stw	r3,4(r17)
   41400:	88a3883a 	add	r17,r17,r2
   41404:	88800015 	stw	r2,0(r17)
   41408:	9009883a 	mov	r4,r18
   4140c:	00436c40 	call	436c4 <__malloc_unlock>
   41410:	80800204 	addi	r2,r16,8
   41414:	003f3c06 	br	41108 <__alt_data_end+0xfffcf108>
   41418:	30c00117 	ldw	r3,4(r6)
   4141c:	003ee706 	br	40fbc <__alt_data_end+0xfffcefbc>
   41420:	5ac00044 	addi	r11,r11,1
   41424:	588000cc 	andi	r2,r11,3
   41428:	31800204 	addi	r6,r6,8
   4142c:	103efd1e 	bne	r2,zero,41024 <__alt_data_end+0xfffcf024>
   41430:	00002406 	br	414c4 <_malloc_r+0x660>
   41434:	14000317 	ldw	r16,12(r2)
   41438:	143f251e 	bne	r2,r16,410d0 <__alt_data_end+0xfffcf0d0>
   4143c:	21000084 	addi	r4,r4,2
   41440:	003ebc06 	br	40f34 <__alt_data_end+0xfffcef34>
   41444:	8085883a 	add	r2,r16,r2
   41448:	10c00117 	ldw	r3,4(r2)
   4144c:	81000317 	ldw	r4,12(r16)
   41450:	81400217 	ldw	r5,8(r16)
   41454:	18c00054 	ori	r3,r3,1
   41458:	10c00115 	stw	r3,4(r2)
   4145c:	29000315 	stw	r4,12(r5)
   41460:	21400215 	stw	r5,8(r4)
   41464:	9009883a 	mov	r4,r18
   41468:	00436c40 	call	436c4 <__malloc_unlock>
   4146c:	80800204 	addi	r2,r16,8
   41470:	003f2506 	br	41108 <__alt_data_end+0xfffcf108>
   41474:	12001704 	addi	r8,r2,92
   41478:	11c016c4 	addi	r7,r2,91
   4147c:	4209883a 	add	r4,r8,r8
   41480:	003e9606 	br	40edc <__alt_data_end+0xfffceedc>
   41484:	3804d1ba 	srli	r2,r7,6
   41488:	11400e44 	addi	r5,r2,57
   4148c:	10c00e04 	addi	r3,r2,56
   41490:	294b883a 	add	r5,r5,r5
   41494:	003fbc06 	br	41388 <__alt_data_end+0xfffcf388>
   41498:	84ff5926 	beq	r16,r19,41200 <__alt_data_end+0xfffcf200>
   4149c:	00800134 	movhi	r2,4
   414a0:	10970604 	addi	r2,r2,23576
   414a4:	14000217 	ldw	r16,8(r2)
   414a8:	00bfff04 	movi	r2,-4
   414ac:	80c00117 	ldw	r3,4(r16)
   414b0:	1886703a 	and	r3,r3,r2
   414b4:	003f9106 	br	412fc <__alt_data_end+0xfffcf2fc>
   414b8:	60800217 	ldw	r2,8(r12)
   414bc:	213fffc4 	addi	r4,r4,-1
   414c0:	1300651e 	bne	r2,r12,41658 <_malloc_r+0x7f4>
   414c4:	208000cc 	andi	r2,r4,3
   414c8:	633ffe04 	addi	r12,r12,-8
   414cc:	103ffa1e 	bne	r2,zero,414b8 <__alt_data_end+0xfffcf4b8>
   414d0:	98800117 	ldw	r2,4(r19)
   414d4:	0146303a 	nor	r3,zero,r5
   414d8:	1884703a 	and	r2,r3,r2
   414dc:	98800115 	stw	r2,4(r19)
   414e0:	294b883a 	add	r5,r5,r5
   414e4:	117f2836 	bltu	r2,r5,41188 <__alt_data_end+0xfffcf188>
   414e8:	283f2726 	beq	r5,zero,41188 <__alt_data_end+0xfffcf188>
   414ec:	2886703a 	and	r3,r5,r2
   414f0:	5809883a 	mov	r4,r11
   414f4:	183ec31e 	bne	r3,zero,41004 <__alt_data_end+0xfffcf004>
   414f8:	294b883a 	add	r5,r5,r5
   414fc:	2886703a 	and	r3,r5,r2
   41500:	21000104 	addi	r4,r4,4
   41504:	183ffc26 	beq	r3,zero,414f8 <__alt_data_end+0xfffcf4f8>
   41508:	003ebe06 	br	41004 <__alt_data_end+0xfffcf004>
   4150c:	00c05504 	movi	r3,340
   41510:	18801236 	bltu	r3,r2,4155c <_malloc_r+0x6f8>
   41514:	8804d3fa 	srli	r2,r17,15
   41518:	12001e04 	addi	r8,r2,120
   4151c:	11c01dc4 	addi	r7,r2,119
   41520:	4209883a 	add	r4,r8,r8
   41524:	003e6d06 	br	40edc <__alt_data_end+0xfffceedc>
   41528:	00c40004 	movi	r3,4096
   4152c:	003f4606 	br	41248 <__alt_data_end+0xfffcf248>
   41530:	00800044 	movi	r2,1
   41534:	a0800115 	stw	r2,4(r20)
   41538:	003f7406 	br	4130c <__alt_data_end+0xfffcf30c>
   4153c:	1805d0ba 	srai	r2,r3,2
   41540:	01c00044 	movi	r7,1
   41544:	30c00117 	ldw	r3,4(r6)
   41548:	388e983a 	sll	r7,r7,r2
   4154c:	2805883a 	mov	r2,r5
   41550:	38c6b03a 	or	r3,r7,r3
   41554:	30c00115 	stw	r3,4(r6)
   41558:	003f9b06 	br	413c8 <__alt_data_end+0xfffcf3c8>
   4155c:	00c15504 	movi	r3,1364
   41560:	18801a36 	bltu	r3,r2,415cc <_malloc_r+0x768>
   41564:	8804d4ba 	srli	r2,r17,18
   41568:	12001f44 	addi	r8,r2,125
   4156c:	11c01f04 	addi	r7,r2,124
   41570:	4209883a 	add	r4,r8,r8
   41574:	003e5906 	br	40edc <__alt_data_end+0xfffceedc>
   41578:	ad400404 	addi	r21,r21,16
   4157c:	003f1706 	br	411dc <__alt_data_end+0xfffcf1dc>
   41580:	00c01504 	movi	r3,84
   41584:	18802336 	bltu	r3,r2,41614 <_malloc_r+0x7b0>
   41588:	3804d33a 	srli	r2,r7,12
   4158c:	11401bc4 	addi	r5,r2,111
   41590:	10c01b84 	addi	r3,r2,110
   41594:	294b883a 	add	r5,r5,r5
   41598:	003f7b06 	br	41388 <__alt_data_end+0xfffcf388>
   4159c:	9c000217 	ldw	r16,8(r19)
   415a0:	00bfff04 	movi	r2,-4
   415a4:	80c00117 	ldw	r3,4(r16)
   415a8:	1886703a 	and	r3,r3,r2
   415ac:	003f5306 	br	412fc <__alt_data_end+0xfffcf2fc>
   415b0:	3083ffcc 	andi	r2,r6,4095
   415b4:	103f181e 	bne	r2,zero,41218 <__alt_data_end+0xfffcf218>
   415b8:	99000217 	ldw	r4,8(r19)
   415bc:	b545883a 	add	r2,r22,r21
   415c0:	10800054 	ori	r2,r2,1
   415c4:	20800115 	stw	r2,4(r4)
   415c8:	003f3e06 	br	412c4 <__alt_data_end+0xfffcf2c4>
   415cc:	01003f84 	movi	r4,254
   415d0:	02001fc4 	movi	r8,127
   415d4:	01c01f84 	movi	r7,126
   415d8:	003e4006 	br	40edc <__alt_data_end+0xfffceedc>
   415dc:	00800134 	movhi	r2,4
   415e0:	109c8c04 	addi	r2,r2,29232
   415e4:	15000015 	stw	r20,0(r2)
   415e8:	003f1106 	br	41230 <__alt_data_end+0xfffcf230>
   415ec:	00800044 	movi	r2,1
   415f0:	002b883a 	mov	r21,zero
   415f4:	003f1f06 	br	41274 <__alt_data_end+0xfffcf274>
   415f8:	81400204 	addi	r5,r16,8
   415fc:	9009883a 	mov	r4,r18
   41600:	00428ec0 	call	428ec <_free_r>
   41604:	00800174 	movhi	r2,5
   41608:	10a33e04 	addi	r2,r2,-29448
   4160c:	10c00017 	ldw	r3,0(r2)
   41610:	003f2c06 	br	412c4 <__alt_data_end+0xfffcf2c4>
   41614:	00c05504 	movi	r3,340
   41618:	18800536 	bltu	r3,r2,41630 <_malloc_r+0x7cc>
   4161c:	3804d3fa 	srli	r2,r7,15
   41620:	11401e04 	addi	r5,r2,120
   41624:	10c01dc4 	addi	r3,r2,119
   41628:	294b883a 	add	r5,r5,r5
   4162c:	003f5606 	br	41388 <__alt_data_end+0xfffcf388>
   41630:	00c15504 	movi	r3,1364
   41634:	18800536 	bltu	r3,r2,4164c <_malloc_r+0x7e8>
   41638:	3804d4ba 	srli	r2,r7,18
   4163c:	11401f44 	addi	r5,r2,125
   41640:	10c01f04 	addi	r3,r2,124
   41644:	294b883a 	add	r5,r5,r5
   41648:	003f4f06 	br	41388 <__alt_data_end+0xfffcf388>
   4164c:	01403f84 	movi	r5,254
   41650:	00c01f84 	movi	r3,126
   41654:	003f4c06 	br	41388 <__alt_data_end+0xfffcf388>
   41658:	98800117 	ldw	r2,4(r19)
   4165c:	003fa006 	br	414e0 <__alt_data_end+0xfffcf4e0>
   41660:	8808d0fa 	srli	r4,r17,3
   41664:	20800044 	addi	r2,r4,1
   41668:	1085883a 	add	r2,r2,r2
   4166c:	003e9006 	br	410b0 <__alt_data_end+0xfffcf0b0>

00041670 <memchr>:
   41670:	208000cc 	andi	r2,r4,3
   41674:	280f883a 	mov	r7,r5
   41678:	10003426 	beq	r2,zero,4174c <memchr+0xdc>
   4167c:	30bfffc4 	addi	r2,r6,-1
   41680:	30001a26 	beq	r6,zero,416ec <memchr+0x7c>
   41684:	20c00003 	ldbu	r3,0(r4)
   41688:	29803fcc 	andi	r6,r5,255
   4168c:	30c0051e 	bne	r6,r3,416a4 <memchr+0x34>
   41690:	00001806 	br	416f4 <memchr+0x84>
   41694:	10001526 	beq	r2,zero,416ec <memchr+0x7c>
   41698:	20c00003 	ldbu	r3,0(r4)
   4169c:	10bfffc4 	addi	r2,r2,-1
   416a0:	30c01426 	beq	r6,r3,416f4 <memchr+0x84>
   416a4:	21000044 	addi	r4,r4,1
   416a8:	20c000cc 	andi	r3,r4,3
   416ac:	183ff91e 	bne	r3,zero,41694 <__alt_data_end+0xfffcf694>
   416b0:	020000c4 	movi	r8,3
   416b4:	40801136 	bltu	r8,r2,416fc <memchr+0x8c>
   416b8:	10000c26 	beq	r2,zero,416ec <memchr+0x7c>
   416bc:	20c00003 	ldbu	r3,0(r4)
   416c0:	29403fcc 	andi	r5,r5,255
   416c4:	28c00b26 	beq	r5,r3,416f4 <memchr+0x84>
   416c8:	20c00044 	addi	r3,r4,1
   416cc:	39803fcc 	andi	r6,r7,255
   416d0:	2089883a 	add	r4,r4,r2
   416d4:	00000306 	br	416e4 <memchr+0x74>
   416d8:	18c00044 	addi	r3,r3,1
   416dc:	197fffc3 	ldbu	r5,-1(r3)
   416e0:	31400526 	beq	r6,r5,416f8 <memchr+0x88>
   416e4:	1805883a 	mov	r2,r3
   416e8:	20fffb1e 	bne	r4,r3,416d8 <__alt_data_end+0xfffcf6d8>
   416ec:	0005883a 	mov	r2,zero
   416f0:	f800283a 	ret
   416f4:	2005883a 	mov	r2,r4
   416f8:	f800283a 	ret
   416fc:	28c03fcc 	andi	r3,r5,255
   41700:	1812923a 	slli	r9,r3,8
   41704:	02ffbff4 	movhi	r11,65279
   41708:	02a02074 	movhi	r10,32897
   4170c:	48d2b03a 	or	r9,r9,r3
   41710:	4806943a 	slli	r3,r9,16
   41714:	5affbfc4 	addi	r11,r11,-257
   41718:	52a02004 	addi	r10,r10,-32640
   4171c:	48d2b03a 	or	r9,r9,r3
   41720:	20c00017 	ldw	r3,0(r4)
   41724:	48c6f03a 	xor	r3,r9,r3
   41728:	1acd883a 	add	r6,r3,r11
   4172c:	00c6303a 	nor	r3,zero,r3
   41730:	30c6703a 	and	r3,r6,r3
   41734:	1a86703a 	and	r3,r3,r10
   41738:	183fe01e 	bne	r3,zero,416bc <__alt_data_end+0xfffcf6bc>
   4173c:	10bfff04 	addi	r2,r2,-4
   41740:	21000104 	addi	r4,r4,4
   41744:	40bff636 	bltu	r8,r2,41720 <__alt_data_end+0xfffcf720>
   41748:	003fdb06 	br	416b8 <__alt_data_end+0xfffcf6b8>
   4174c:	3005883a 	mov	r2,r6
   41750:	003fd706 	br	416b0 <__alt_data_end+0xfffcf6b0>

00041754 <memcpy>:
   41754:	defffd04 	addi	sp,sp,-12
   41758:	dfc00215 	stw	ra,8(sp)
   4175c:	dc400115 	stw	r17,4(sp)
   41760:	dc000015 	stw	r16,0(sp)
   41764:	00c003c4 	movi	r3,15
   41768:	2005883a 	mov	r2,r4
   4176c:	1980452e 	bgeu	r3,r6,41884 <memcpy+0x130>
   41770:	2906b03a 	or	r3,r5,r4
   41774:	18c000cc 	andi	r3,r3,3
   41778:	1800441e 	bne	r3,zero,4188c <memcpy+0x138>
   4177c:	347ffc04 	addi	r17,r6,-16
   41780:	8822d13a 	srli	r17,r17,4
   41784:	28c00104 	addi	r3,r5,4
   41788:	23400104 	addi	r13,r4,4
   4178c:	8820913a 	slli	r16,r17,4
   41790:	2b000204 	addi	r12,r5,8
   41794:	22c00204 	addi	r11,r4,8
   41798:	84000504 	addi	r16,r16,20
   4179c:	2a800304 	addi	r10,r5,12
   417a0:	22400304 	addi	r9,r4,12
   417a4:	2c21883a 	add	r16,r5,r16
   417a8:	2811883a 	mov	r8,r5
   417ac:	200f883a 	mov	r7,r4
   417b0:	41000017 	ldw	r4,0(r8)
   417b4:	1fc00017 	ldw	ra,0(r3)
   417b8:	63c00017 	ldw	r15,0(r12)
   417bc:	39000015 	stw	r4,0(r7)
   417c0:	53800017 	ldw	r14,0(r10)
   417c4:	6fc00015 	stw	ra,0(r13)
   417c8:	5bc00015 	stw	r15,0(r11)
   417cc:	4b800015 	stw	r14,0(r9)
   417d0:	18c00404 	addi	r3,r3,16
   417d4:	39c00404 	addi	r7,r7,16
   417d8:	42000404 	addi	r8,r8,16
   417dc:	6b400404 	addi	r13,r13,16
   417e0:	63000404 	addi	r12,r12,16
   417e4:	5ac00404 	addi	r11,r11,16
   417e8:	52800404 	addi	r10,r10,16
   417ec:	4a400404 	addi	r9,r9,16
   417f0:	1c3fef1e 	bne	r3,r16,417b0 <__alt_data_end+0xfffcf7b0>
   417f4:	89c00044 	addi	r7,r17,1
   417f8:	380e913a 	slli	r7,r7,4
   417fc:	310003cc 	andi	r4,r6,15
   41800:	02c000c4 	movi	r11,3
   41804:	11c7883a 	add	r3,r2,r7
   41808:	29cb883a 	add	r5,r5,r7
   4180c:	5900212e 	bgeu	r11,r4,41894 <memcpy+0x140>
   41810:	1813883a 	mov	r9,r3
   41814:	2811883a 	mov	r8,r5
   41818:	200f883a 	mov	r7,r4
   4181c:	42800017 	ldw	r10,0(r8)
   41820:	4a400104 	addi	r9,r9,4
   41824:	39ffff04 	addi	r7,r7,-4
   41828:	4abfff15 	stw	r10,-4(r9)
   4182c:	42000104 	addi	r8,r8,4
   41830:	59fffa36 	bltu	r11,r7,4181c <__alt_data_end+0xfffcf81c>
   41834:	213fff04 	addi	r4,r4,-4
   41838:	2008d0ba 	srli	r4,r4,2
   4183c:	318000cc 	andi	r6,r6,3
   41840:	21000044 	addi	r4,r4,1
   41844:	2109883a 	add	r4,r4,r4
   41848:	2109883a 	add	r4,r4,r4
   4184c:	1907883a 	add	r3,r3,r4
   41850:	290b883a 	add	r5,r5,r4
   41854:	30000626 	beq	r6,zero,41870 <memcpy+0x11c>
   41858:	198d883a 	add	r6,r3,r6
   4185c:	29c00003 	ldbu	r7,0(r5)
   41860:	18c00044 	addi	r3,r3,1
   41864:	29400044 	addi	r5,r5,1
   41868:	19ffffc5 	stb	r7,-1(r3)
   4186c:	19bffb1e 	bne	r3,r6,4185c <__alt_data_end+0xfffcf85c>
   41870:	dfc00217 	ldw	ra,8(sp)
   41874:	dc400117 	ldw	r17,4(sp)
   41878:	dc000017 	ldw	r16,0(sp)
   4187c:	dec00304 	addi	sp,sp,12
   41880:	f800283a 	ret
   41884:	2007883a 	mov	r3,r4
   41888:	003ff206 	br	41854 <__alt_data_end+0xfffcf854>
   4188c:	2007883a 	mov	r3,r4
   41890:	003ff106 	br	41858 <__alt_data_end+0xfffcf858>
   41894:	200d883a 	mov	r6,r4
   41898:	003fee06 	br	41854 <__alt_data_end+0xfffcf854>

0004189c <memmove>:
   4189c:	2005883a 	mov	r2,r4
   418a0:	29000b2e 	bgeu	r5,r4,418d0 <memmove+0x34>
   418a4:	298f883a 	add	r7,r5,r6
   418a8:	21c0092e 	bgeu	r4,r7,418d0 <memmove+0x34>
   418ac:	2187883a 	add	r3,r4,r6
   418b0:	198bc83a 	sub	r5,r3,r6
   418b4:	30004826 	beq	r6,zero,419d8 <memmove+0x13c>
   418b8:	39ffffc4 	addi	r7,r7,-1
   418bc:	39000003 	ldbu	r4,0(r7)
   418c0:	18ffffc4 	addi	r3,r3,-1
   418c4:	19000005 	stb	r4,0(r3)
   418c8:	28fffb1e 	bne	r5,r3,418b8 <__alt_data_end+0xfffcf8b8>
   418cc:	f800283a 	ret
   418d0:	00c003c4 	movi	r3,15
   418d4:	1980412e 	bgeu	r3,r6,419dc <memmove+0x140>
   418d8:	2886b03a 	or	r3,r5,r2
   418dc:	18c000cc 	andi	r3,r3,3
   418e0:	1800401e 	bne	r3,zero,419e4 <memmove+0x148>
   418e4:	33fffc04 	addi	r15,r6,-16
   418e8:	781ed13a 	srli	r15,r15,4
   418ec:	28c00104 	addi	r3,r5,4
   418f0:	13400104 	addi	r13,r2,4
   418f4:	781c913a 	slli	r14,r15,4
   418f8:	2b000204 	addi	r12,r5,8
   418fc:	12c00204 	addi	r11,r2,8
   41900:	73800504 	addi	r14,r14,20
   41904:	2a800304 	addi	r10,r5,12
   41908:	12400304 	addi	r9,r2,12
   4190c:	2b9d883a 	add	r14,r5,r14
   41910:	2811883a 	mov	r8,r5
   41914:	100f883a 	mov	r7,r2
   41918:	41000017 	ldw	r4,0(r8)
   4191c:	39c00404 	addi	r7,r7,16
   41920:	18c00404 	addi	r3,r3,16
   41924:	393ffc15 	stw	r4,-16(r7)
   41928:	193ffc17 	ldw	r4,-16(r3)
   4192c:	6b400404 	addi	r13,r13,16
   41930:	5ac00404 	addi	r11,r11,16
   41934:	693ffc15 	stw	r4,-16(r13)
   41938:	61000017 	ldw	r4,0(r12)
   4193c:	4a400404 	addi	r9,r9,16
   41940:	42000404 	addi	r8,r8,16
   41944:	593ffc15 	stw	r4,-16(r11)
   41948:	51000017 	ldw	r4,0(r10)
   4194c:	63000404 	addi	r12,r12,16
   41950:	52800404 	addi	r10,r10,16
   41954:	493ffc15 	stw	r4,-16(r9)
   41958:	1bbfef1e 	bne	r3,r14,41918 <__alt_data_end+0xfffcf918>
   4195c:	79000044 	addi	r4,r15,1
   41960:	2008913a 	slli	r4,r4,4
   41964:	328003cc 	andi	r10,r6,15
   41968:	02c000c4 	movi	r11,3
   4196c:	1107883a 	add	r3,r2,r4
   41970:	290b883a 	add	r5,r5,r4
   41974:	5a801e2e 	bgeu	r11,r10,419f0 <memmove+0x154>
   41978:	1813883a 	mov	r9,r3
   4197c:	2811883a 	mov	r8,r5
   41980:	500f883a 	mov	r7,r10
   41984:	41000017 	ldw	r4,0(r8)
   41988:	4a400104 	addi	r9,r9,4
   4198c:	39ffff04 	addi	r7,r7,-4
   41990:	493fff15 	stw	r4,-4(r9)
   41994:	42000104 	addi	r8,r8,4
   41998:	59fffa36 	bltu	r11,r7,41984 <__alt_data_end+0xfffcf984>
   4199c:	513fff04 	addi	r4,r10,-4
   419a0:	2008d0ba 	srli	r4,r4,2
   419a4:	318000cc 	andi	r6,r6,3
   419a8:	21000044 	addi	r4,r4,1
   419ac:	2109883a 	add	r4,r4,r4
   419b0:	2109883a 	add	r4,r4,r4
   419b4:	1907883a 	add	r3,r3,r4
   419b8:	290b883a 	add	r5,r5,r4
   419bc:	30000b26 	beq	r6,zero,419ec <memmove+0x150>
   419c0:	198d883a 	add	r6,r3,r6
   419c4:	29c00003 	ldbu	r7,0(r5)
   419c8:	18c00044 	addi	r3,r3,1
   419cc:	29400044 	addi	r5,r5,1
   419d0:	19ffffc5 	stb	r7,-1(r3)
   419d4:	19bffb1e 	bne	r3,r6,419c4 <__alt_data_end+0xfffcf9c4>
   419d8:	f800283a 	ret
   419dc:	1007883a 	mov	r3,r2
   419e0:	003ff606 	br	419bc <__alt_data_end+0xfffcf9bc>
   419e4:	1007883a 	mov	r3,r2
   419e8:	003ff506 	br	419c0 <__alt_data_end+0xfffcf9c0>
   419ec:	f800283a 	ret
   419f0:	500d883a 	mov	r6,r10
   419f4:	003ff106 	br	419bc <__alt_data_end+0xfffcf9bc>

000419f8 <memset>:
   419f8:	20c000cc 	andi	r3,r4,3
   419fc:	2005883a 	mov	r2,r4
   41a00:	18004426 	beq	r3,zero,41b14 <memset+0x11c>
   41a04:	31ffffc4 	addi	r7,r6,-1
   41a08:	30004026 	beq	r6,zero,41b0c <memset+0x114>
   41a0c:	2813883a 	mov	r9,r5
   41a10:	200d883a 	mov	r6,r4
   41a14:	2007883a 	mov	r3,r4
   41a18:	00000406 	br	41a2c <memset+0x34>
   41a1c:	3a3fffc4 	addi	r8,r7,-1
   41a20:	31800044 	addi	r6,r6,1
   41a24:	38003926 	beq	r7,zero,41b0c <memset+0x114>
   41a28:	400f883a 	mov	r7,r8
   41a2c:	18c00044 	addi	r3,r3,1
   41a30:	32400005 	stb	r9,0(r6)
   41a34:	1a0000cc 	andi	r8,r3,3
   41a38:	403ff81e 	bne	r8,zero,41a1c <__alt_data_end+0xfffcfa1c>
   41a3c:	010000c4 	movi	r4,3
   41a40:	21c02d2e 	bgeu	r4,r7,41af8 <memset+0x100>
   41a44:	29003fcc 	andi	r4,r5,255
   41a48:	200c923a 	slli	r6,r4,8
   41a4c:	3108b03a 	or	r4,r6,r4
   41a50:	200c943a 	slli	r6,r4,16
   41a54:	218cb03a 	or	r6,r4,r6
   41a58:	010003c4 	movi	r4,15
   41a5c:	21c0182e 	bgeu	r4,r7,41ac0 <memset+0xc8>
   41a60:	3b3ffc04 	addi	r12,r7,-16
   41a64:	6018d13a 	srli	r12,r12,4
   41a68:	1a000104 	addi	r8,r3,4
   41a6c:	1ac00204 	addi	r11,r3,8
   41a70:	6008913a 	slli	r4,r12,4
   41a74:	1a800304 	addi	r10,r3,12
   41a78:	1813883a 	mov	r9,r3
   41a7c:	21000504 	addi	r4,r4,20
   41a80:	1909883a 	add	r4,r3,r4
   41a84:	49800015 	stw	r6,0(r9)
   41a88:	41800015 	stw	r6,0(r8)
   41a8c:	59800015 	stw	r6,0(r11)
   41a90:	51800015 	stw	r6,0(r10)
   41a94:	42000404 	addi	r8,r8,16
   41a98:	4a400404 	addi	r9,r9,16
   41a9c:	5ac00404 	addi	r11,r11,16
   41aa0:	52800404 	addi	r10,r10,16
   41aa4:	413ff71e 	bne	r8,r4,41a84 <__alt_data_end+0xfffcfa84>
   41aa8:	63000044 	addi	r12,r12,1
   41aac:	6018913a 	slli	r12,r12,4
   41ab0:	39c003cc 	andi	r7,r7,15
   41ab4:	010000c4 	movi	r4,3
   41ab8:	1b07883a 	add	r3,r3,r12
   41abc:	21c00e2e 	bgeu	r4,r7,41af8 <memset+0x100>
   41ac0:	1813883a 	mov	r9,r3
   41ac4:	3811883a 	mov	r8,r7
   41ac8:	010000c4 	movi	r4,3
   41acc:	49800015 	stw	r6,0(r9)
   41ad0:	423fff04 	addi	r8,r8,-4
   41ad4:	4a400104 	addi	r9,r9,4
   41ad8:	223ffc36 	bltu	r4,r8,41acc <__alt_data_end+0xfffcfacc>
   41adc:	393fff04 	addi	r4,r7,-4
   41ae0:	2008d0ba 	srli	r4,r4,2
   41ae4:	39c000cc 	andi	r7,r7,3
   41ae8:	21000044 	addi	r4,r4,1
   41aec:	2109883a 	add	r4,r4,r4
   41af0:	2109883a 	add	r4,r4,r4
   41af4:	1907883a 	add	r3,r3,r4
   41af8:	38000526 	beq	r7,zero,41b10 <memset+0x118>
   41afc:	19cf883a 	add	r7,r3,r7
   41b00:	19400005 	stb	r5,0(r3)
   41b04:	18c00044 	addi	r3,r3,1
   41b08:	38fffd1e 	bne	r7,r3,41b00 <__alt_data_end+0xfffcfb00>
   41b0c:	f800283a 	ret
   41b10:	f800283a 	ret
   41b14:	2007883a 	mov	r3,r4
   41b18:	300f883a 	mov	r7,r6
   41b1c:	003fc706 	br	41a3c <__alt_data_end+0xfffcfa3c>

00041b20 <_realloc_r>:
   41b20:	defff604 	addi	sp,sp,-40
   41b24:	dc800215 	stw	r18,8(sp)
   41b28:	dfc00915 	stw	ra,36(sp)
   41b2c:	df000815 	stw	fp,32(sp)
   41b30:	ddc00715 	stw	r23,28(sp)
   41b34:	dd800615 	stw	r22,24(sp)
   41b38:	dd400515 	stw	r21,20(sp)
   41b3c:	dd000415 	stw	r20,16(sp)
   41b40:	dcc00315 	stw	r19,12(sp)
   41b44:	dc400115 	stw	r17,4(sp)
   41b48:	dc000015 	stw	r16,0(sp)
   41b4c:	3025883a 	mov	r18,r6
   41b50:	2800b726 	beq	r5,zero,41e30 <_realloc_r+0x310>
   41b54:	282b883a 	mov	r21,r5
   41b58:	2029883a 	mov	r20,r4
   41b5c:	00436a00 	call	436a0 <__malloc_lock>
   41b60:	a8bfff17 	ldw	r2,-4(r21)
   41b64:	043fff04 	movi	r16,-4
   41b68:	90c002c4 	addi	r3,r18,11
   41b6c:	01000584 	movi	r4,22
   41b70:	acfffe04 	addi	r19,r21,-8
   41b74:	1420703a 	and	r16,r2,r16
   41b78:	20c0332e 	bgeu	r4,r3,41c48 <_realloc_r+0x128>
   41b7c:	047ffe04 	movi	r17,-8
   41b80:	1c62703a 	and	r17,r3,r17
   41b84:	8807883a 	mov	r3,r17
   41b88:	88005816 	blt	r17,zero,41cec <_realloc_r+0x1cc>
   41b8c:	8c805736 	bltu	r17,r18,41cec <_realloc_r+0x1cc>
   41b90:	80c0300e 	bge	r16,r3,41c54 <_realloc_r+0x134>
   41b94:	07000134 	movhi	fp,4
   41b98:	e7170604 	addi	fp,fp,23576
   41b9c:	e1c00217 	ldw	r7,8(fp)
   41ba0:	9c09883a 	add	r4,r19,r16
   41ba4:	22000117 	ldw	r8,4(r4)
   41ba8:	21c06326 	beq	r4,r7,41d38 <_realloc_r+0x218>
   41bac:	017fff84 	movi	r5,-2
   41bb0:	414a703a 	and	r5,r8,r5
   41bb4:	214b883a 	add	r5,r4,r5
   41bb8:	29800117 	ldw	r6,4(r5)
   41bbc:	3180004c 	andi	r6,r6,1
   41bc0:	30003f26 	beq	r6,zero,41cc0 <_realloc_r+0x1a0>
   41bc4:	1080004c 	andi	r2,r2,1
   41bc8:	10008326 	beq	r2,zero,41dd8 <_realloc_r+0x2b8>
   41bcc:	900b883a 	mov	r5,r18
   41bd0:	a009883a 	mov	r4,r20
   41bd4:	0040e640 	call	40e64 <_malloc_r>
   41bd8:	1025883a 	mov	r18,r2
   41bdc:	10011e26 	beq	r2,zero,42058 <_realloc_r+0x538>
   41be0:	a93fff17 	ldw	r4,-4(r21)
   41be4:	10fffe04 	addi	r3,r2,-8
   41be8:	00bfff84 	movi	r2,-2
   41bec:	2084703a 	and	r2,r4,r2
   41bf0:	9885883a 	add	r2,r19,r2
   41bf4:	1880ee26 	beq	r3,r2,41fb0 <_realloc_r+0x490>
   41bf8:	81bfff04 	addi	r6,r16,-4
   41bfc:	00800904 	movi	r2,36
   41c00:	1180b836 	bltu	r2,r6,41ee4 <_realloc_r+0x3c4>
   41c04:	00c004c4 	movi	r3,19
   41c08:	19809636 	bltu	r3,r6,41e64 <_realloc_r+0x344>
   41c0c:	9005883a 	mov	r2,r18
   41c10:	a807883a 	mov	r3,r21
   41c14:	19000017 	ldw	r4,0(r3)
   41c18:	11000015 	stw	r4,0(r2)
   41c1c:	19000117 	ldw	r4,4(r3)
   41c20:	11000115 	stw	r4,4(r2)
   41c24:	18c00217 	ldw	r3,8(r3)
   41c28:	10c00215 	stw	r3,8(r2)
   41c2c:	a80b883a 	mov	r5,r21
   41c30:	a009883a 	mov	r4,r20
   41c34:	00428ec0 	call	428ec <_free_r>
   41c38:	a009883a 	mov	r4,r20
   41c3c:	00436c40 	call	436c4 <__malloc_unlock>
   41c40:	9005883a 	mov	r2,r18
   41c44:	00001206 	br	41c90 <_realloc_r+0x170>
   41c48:	00c00404 	movi	r3,16
   41c4c:	1823883a 	mov	r17,r3
   41c50:	003fce06 	br	41b8c <__alt_data_end+0xfffcfb8c>
   41c54:	a825883a 	mov	r18,r21
   41c58:	8445c83a 	sub	r2,r16,r17
   41c5c:	00c003c4 	movi	r3,15
   41c60:	18802636 	bltu	r3,r2,41cfc <_realloc_r+0x1dc>
   41c64:	99800117 	ldw	r6,4(r19)
   41c68:	9c07883a 	add	r3,r19,r16
   41c6c:	3180004c 	andi	r6,r6,1
   41c70:	3420b03a 	or	r16,r6,r16
   41c74:	9c000115 	stw	r16,4(r19)
   41c78:	18800117 	ldw	r2,4(r3)
   41c7c:	10800054 	ori	r2,r2,1
   41c80:	18800115 	stw	r2,4(r3)
   41c84:	a009883a 	mov	r4,r20
   41c88:	00436c40 	call	436c4 <__malloc_unlock>
   41c8c:	9005883a 	mov	r2,r18
   41c90:	dfc00917 	ldw	ra,36(sp)
   41c94:	df000817 	ldw	fp,32(sp)
   41c98:	ddc00717 	ldw	r23,28(sp)
   41c9c:	dd800617 	ldw	r22,24(sp)
   41ca0:	dd400517 	ldw	r21,20(sp)
   41ca4:	dd000417 	ldw	r20,16(sp)
   41ca8:	dcc00317 	ldw	r19,12(sp)
   41cac:	dc800217 	ldw	r18,8(sp)
   41cb0:	dc400117 	ldw	r17,4(sp)
   41cb4:	dc000017 	ldw	r16,0(sp)
   41cb8:	dec00a04 	addi	sp,sp,40
   41cbc:	f800283a 	ret
   41cc0:	017fff04 	movi	r5,-4
   41cc4:	414a703a 	and	r5,r8,r5
   41cc8:	814d883a 	add	r6,r16,r5
   41ccc:	30c01f16 	blt	r6,r3,41d4c <_realloc_r+0x22c>
   41cd0:	20800317 	ldw	r2,12(r4)
   41cd4:	20c00217 	ldw	r3,8(r4)
   41cd8:	a825883a 	mov	r18,r21
   41cdc:	3021883a 	mov	r16,r6
   41ce0:	18800315 	stw	r2,12(r3)
   41ce4:	10c00215 	stw	r3,8(r2)
   41ce8:	003fdb06 	br	41c58 <__alt_data_end+0xfffcfc58>
   41cec:	00800304 	movi	r2,12
   41cf0:	a0800015 	stw	r2,0(r20)
   41cf4:	0005883a 	mov	r2,zero
   41cf8:	003fe506 	br	41c90 <__alt_data_end+0xfffcfc90>
   41cfc:	98c00117 	ldw	r3,4(r19)
   41d00:	9c4b883a 	add	r5,r19,r17
   41d04:	11000054 	ori	r4,r2,1
   41d08:	18c0004c 	andi	r3,r3,1
   41d0c:	1c62b03a 	or	r17,r3,r17
   41d10:	9c400115 	stw	r17,4(r19)
   41d14:	29000115 	stw	r4,4(r5)
   41d18:	2885883a 	add	r2,r5,r2
   41d1c:	10c00117 	ldw	r3,4(r2)
   41d20:	29400204 	addi	r5,r5,8
   41d24:	a009883a 	mov	r4,r20
   41d28:	18c00054 	ori	r3,r3,1
   41d2c:	10c00115 	stw	r3,4(r2)
   41d30:	00428ec0 	call	428ec <_free_r>
   41d34:	003fd306 	br	41c84 <__alt_data_end+0xfffcfc84>
   41d38:	017fff04 	movi	r5,-4
   41d3c:	414a703a 	and	r5,r8,r5
   41d40:	89800404 	addi	r6,r17,16
   41d44:	8151883a 	add	r8,r16,r5
   41d48:	4180590e 	bge	r8,r6,41eb0 <_realloc_r+0x390>
   41d4c:	1080004c 	andi	r2,r2,1
   41d50:	103f9e1e 	bne	r2,zero,41bcc <__alt_data_end+0xfffcfbcc>
   41d54:	adbffe17 	ldw	r22,-8(r21)
   41d58:	00bfff04 	movi	r2,-4
   41d5c:	9dadc83a 	sub	r22,r19,r22
   41d60:	b1800117 	ldw	r6,4(r22)
   41d64:	3084703a 	and	r2,r6,r2
   41d68:	20002026 	beq	r4,zero,41dec <_realloc_r+0x2cc>
   41d6c:	80af883a 	add	r23,r16,r2
   41d70:	b96f883a 	add	r23,r23,r5
   41d74:	21c05f26 	beq	r4,r7,41ef4 <_realloc_r+0x3d4>
   41d78:	b8c01c16 	blt	r23,r3,41dec <_realloc_r+0x2cc>
   41d7c:	20800317 	ldw	r2,12(r4)
   41d80:	20c00217 	ldw	r3,8(r4)
   41d84:	81bfff04 	addi	r6,r16,-4
   41d88:	01000904 	movi	r4,36
   41d8c:	18800315 	stw	r2,12(r3)
   41d90:	10c00215 	stw	r3,8(r2)
   41d94:	b0c00217 	ldw	r3,8(r22)
   41d98:	b0800317 	ldw	r2,12(r22)
   41d9c:	b4800204 	addi	r18,r22,8
   41da0:	18800315 	stw	r2,12(r3)
   41da4:	10c00215 	stw	r3,8(r2)
   41da8:	21801b36 	bltu	r4,r6,41e18 <_realloc_r+0x2f8>
   41dac:	008004c4 	movi	r2,19
   41db0:	1180352e 	bgeu	r2,r6,41e88 <_realloc_r+0x368>
   41db4:	a8800017 	ldw	r2,0(r21)
   41db8:	b0800215 	stw	r2,8(r22)
   41dbc:	a8800117 	ldw	r2,4(r21)
   41dc0:	b0800315 	stw	r2,12(r22)
   41dc4:	008006c4 	movi	r2,27
   41dc8:	11807f36 	bltu	r2,r6,41fc8 <_realloc_r+0x4a8>
   41dcc:	b0800404 	addi	r2,r22,16
   41dd0:	ad400204 	addi	r21,r21,8
   41dd4:	00002d06 	br	41e8c <_realloc_r+0x36c>
   41dd8:	adbffe17 	ldw	r22,-8(r21)
   41ddc:	00bfff04 	movi	r2,-4
   41de0:	9dadc83a 	sub	r22,r19,r22
   41de4:	b1000117 	ldw	r4,4(r22)
   41de8:	2084703a 	and	r2,r4,r2
   41dec:	b03f7726 	beq	r22,zero,41bcc <__alt_data_end+0xfffcfbcc>
   41df0:	80af883a 	add	r23,r16,r2
   41df4:	b8ff7516 	blt	r23,r3,41bcc <__alt_data_end+0xfffcfbcc>
   41df8:	b0800317 	ldw	r2,12(r22)
   41dfc:	b0c00217 	ldw	r3,8(r22)
   41e00:	81bfff04 	addi	r6,r16,-4
   41e04:	01000904 	movi	r4,36
   41e08:	18800315 	stw	r2,12(r3)
   41e0c:	10c00215 	stw	r3,8(r2)
   41e10:	b4800204 	addi	r18,r22,8
   41e14:	21bfe52e 	bgeu	r4,r6,41dac <__alt_data_end+0xfffcfdac>
   41e18:	a80b883a 	mov	r5,r21
   41e1c:	9009883a 	mov	r4,r18
   41e20:	004189c0 	call	4189c <memmove>
   41e24:	b821883a 	mov	r16,r23
   41e28:	b027883a 	mov	r19,r22
   41e2c:	003f8a06 	br	41c58 <__alt_data_end+0xfffcfc58>
   41e30:	300b883a 	mov	r5,r6
   41e34:	dfc00917 	ldw	ra,36(sp)
   41e38:	df000817 	ldw	fp,32(sp)
   41e3c:	ddc00717 	ldw	r23,28(sp)
   41e40:	dd800617 	ldw	r22,24(sp)
   41e44:	dd400517 	ldw	r21,20(sp)
   41e48:	dd000417 	ldw	r20,16(sp)
   41e4c:	dcc00317 	ldw	r19,12(sp)
   41e50:	dc800217 	ldw	r18,8(sp)
   41e54:	dc400117 	ldw	r17,4(sp)
   41e58:	dc000017 	ldw	r16,0(sp)
   41e5c:	dec00a04 	addi	sp,sp,40
   41e60:	0040e641 	jmpi	40e64 <_malloc_r>
   41e64:	a8c00017 	ldw	r3,0(r21)
   41e68:	90c00015 	stw	r3,0(r18)
   41e6c:	a8c00117 	ldw	r3,4(r21)
   41e70:	90c00115 	stw	r3,4(r18)
   41e74:	00c006c4 	movi	r3,27
   41e78:	19804536 	bltu	r3,r6,41f90 <_realloc_r+0x470>
   41e7c:	90800204 	addi	r2,r18,8
   41e80:	a8c00204 	addi	r3,r21,8
   41e84:	003f6306 	br	41c14 <__alt_data_end+0xfffcfc14>
   41e88:	9005883a 	mov	r2,r18
   41e8c:	a8c00017 	ldw	r3,0(r21)
   41e90:	b821883a 	mov	r16,r23
   41e94:	b027883a 	mov	r19,r22
   41e98:	10c00015 	stw	r3,0(r2)
   41e9c:	a8c00117 	ldw	r3,4(r21)
   41ea0:	10c00115 	stw	r3,4(r2)
   41ea4:	a8c00217 	ldw	r3,8(r21)
   41ea8:	10c00215 	stw	r3,8(r2)
   41eac:	003f6a06 	br	41c58 <__alt_data_end+0xfffcfc58>
   41eb0:	9c67883a 	add	r19,r19,r17
   41eb4:	4445c83a 	sub	r2,r8,r17
   41eb8:	e4c00215 	stw	r19,8(fp)
   41ebc:	10800054 	ori	r2,r2,1
   41ec0:	98800115 	stw	r2,4(r19)
   41ec4:	a8bfff17 	ldw	r2,-4(r21)
   41ec8:	a009883a 	mov	r4,r20
   41ecc:	1080004c 	andi	r2,r2,1
   41ed0:	1462b03a 	or	r17,r2,r17
   41ed4:	ac7fff15 	stw	r17,-4(r21)
   41ed8:	00436c40 	call	436c4 <__malloc_unlock>
   41edc:	a805883a 	mov	r2,r21
   41ee0:	003f6b06 	br	41c90 <__alt_data_end+0xfffcfc90>
   41ee4:	a80b883a 	mov	r5,r21
   41ee8:	9009883a 	mov	r4,r18
   41eec:	004189c0 	call	4189c <memmove>
   41ef0:	003f4e06 	br	41c2c <__alt_data_end+0xfffcfc2c>
   41ef4:	89000404 	addi	r4,r17,16
   41ef8:	b93fbc16 	blt	r23,r4,41dec <__alt_data_end+0xfffcfdec>
   41efc:	b0800317 	ldw	r2,12(r22)
   41f00:	b0c00217 	ldw	r3,8(r22)
   41f04:	81bfff04 	addi	r6,r16,-4
   41f08:	01000904 	movi	r4,36
   41f0c:	18800315 	stw	r2,12(r3)
   41f10:	10c00215 	stw	r3,8(r2)
   41f14:	b4800204 	addi	r18,r22,8
   41f18:	21804336 	bltu	r4,r6,42028 <_realloc_r+0x508>
   41f1c:	008004c4 	movi	r2,19
   41f20:	11803f2e 	bgeu	r2,r6,42020 <_realloc_r+0x500>
   41f24:	a8800017 	ldw	r2,0(r21)
   41f28:	b0800215 	stw	r2,8(r22)
   41f2c:	a8800117 	ldw	r2,4(r21)
   41f30:	b0800315 	stw	r2,12(r22)
   41f34:	008006c4 	movi	r2,27
   41f38:	11803f36 	bltu	r2,r6,42038 <_realloc_r+0x518>
   41f3c:	b0800404 	addi	r2,r22,16
   41f40:	ad400204 	addi	r21,r21,8
   41f44:	a8c00017 	ldw	r3,0(r21)
   41f48:	10c00015 	stw	r3,0(r2)
   41f4c:	a8c00117 	ldw	r3,4(r21)
   41f50:	10c00115 	stw	r3,4(r2)
   41f54:	a8c00217 	ldw	r3,8(r21)
   41f58:	10c00215 	stw	r3,8(r2)
   41f5c:	b447883a 	add	r3,r22,r17
   41f60:	bc45c83a 	sub	r2,r23,r17
   41f64:	e0c00215 	stw	r3,8(fp)
   41f68:	10800054 	ori	r2,r2,1
   41f6c:	18800115 	stw	r2,4(r3)
   41f70:	b0800117 	ldw	r2,4(r22)
   41f74:	a009883a 	mov	r4,r20
   41f78:	1080004c 	andi	r2,r2,1
   41f7c:	1462b03a 	or	r17,r2,r17
   41f80:	b4400115 	stw	r17,4(r22)
   41f84:	00436c40 	call	436c4 <__malloc_unlock>
   41f88:	9005883a 	mov	r2,r18
   41f8c:	003f4006 	br	41c90 <__alt_data_end+0xfffcfc90>
   41f90:	a8c00217 	ldw	r3,8(r21)
   41f94:	90c00215 	stw	r3,8(r18)
   41f98:	a8c00317 	ldw	r3,12(r21)
   41f9c:	90c00315 	stw	r3,12(r18)
   41fa0:	30801126 	beq	r6,r2,41fe8 <_realloc_r+0x4c8>
   41fa4:	90800404 	addi	r2,r18,16
   41fa8:	a8c00404 	addi	r3,r21,16
   41fac:	003f1906 	br	41c14 <__alt_data_end+0xfffcfc14>
   41fb0:	90ffff17 	ldw	r3,-4(r18)
   41fb4:	00bfff04 	movi	r2,-4
   41fb8:	a825883a 	mov	r18,r21
   41fbc:	1884703a 	and	r2,r3,r2
   41fc0:	80a1883a 	add	r16,r16,r2
   41fc4:	003f2406 	br	41c58 <__alt_data_end+0xfffcfc58>
   41fc8:	a8800217 	ldw	r2,8(r21)
   41fcc:	b0800415 	stw	r2,16(r22)
   41fd0:	a8800317 	ldw	r2,12(r21)
   41fd4:	b0800515 	stw	r2,20(r22)
   41fd8:	31000a26 	beq	r6,r4,42004 <_realloc_r+0x4e4>
   41fdc:	b0800604 	addi	r2,r22,24
   41fe0:	ad400404 	addi	r21,r21,16
   41fe4:	003fa906 	br	41e8c <__alt_data_end+0xfffcfe8c>
   41fe8:	a9000417 	ldw	r4,16(r21)
   41fec:	90800604 	addi	r2,r18,24
   41ff0:	a8c00604 	addi	r3,r21,24
   41ff4:	91000415 	stw	r4,16(r18)
   41ff8:	a9000517 	ldw	r4,20(r21)
   41ffc:	91000515 	stw	r4,20(r18)
   42000:	003f0406 	br	41c14 <__alt_data_end+0xfffcfc14>
   42004:	a8c00417 	ldw	r3,16(r21)
   42008:	ad400604 	addi	r21,r21,24
   4200c:	b0800804 	addi	r2,r22,32
   42010:	b0c00615 	stw	r3,24(r22)
   42014:	a8ffff17 	ldw	r3,-4(r21)
   42018:	b0c00715 	stw	r3,28(r22)
   4201c:	003f9b06 	br	41e8c <__alt_data_end+0xfffcfe8c>
   42020:	9005883a 	mov	r2,r18
   42024:	003fc706 	br	41f44 <__alt_data_end+0xfffcff44>
   42028:	a80b883a 	mov	r5,r21
   4202c:	9009883a 	mov	r4,r18
   42030:	004189c0 	call	4189c <memmove>
   42034:	003fc906 	br	41f5c <__alt_data_end+0xfffcff5c>
   42038:	a8800217 	ldw	r2,8(r21)
   4203c:	b0800415 	stw	r2,16(r22)
   42040:	a8800317 	ldw	r2,12(r21)
   42044:	b0800515 	stw	r2,20(r22)
   42048:	31000726 	beq	r6,r4,42068 <_realloc_r+0x548>
   4204c:	b0800604 	addi	r2,r22,24
   42050:	ad400404 	addi	r21,r21,16
   42054:	003fbb06 	br	41f44 <__alt_data_end+0xfffcff44>
   42058:	a009883a 	mov	r4,r20
   4205c:	00436c40 	call	436c4 <__malloc_unlock>
   42060:	0005883a 	mov	r2,zero
   42064:	003f0a06 	br	41c90 <__alt_data_end+0xfffcfc90>
   42068:	a8c00417 	ldw	r3,16(r21)
   4206c:	ad400604 	addi	r21,r21,24
   42070:	b0800804 	addi	r2,r22,32
   42074:	b0c00615 	stw	r3,24(r22)
   42078:	a8ffff17 	ldw	r3,-4(r21)
   4207c:	b0c00715 	stw	r3,28(r22)
   42080:	003fb006 	br	41f44 <__alt_data_end+0xfffcff44>

00042084 <_sbrk_r>:
   42084:	defffd04 	addi	sp,sp,-12
   42088:	dc000015 	stw	r16,0(sp)
   4208c:	04000174 	movhi	r16,5
   42090:	dc400115 	stw	r17,4(sp)
   42094:	84233604 	addi	r16,r16,-29480
   42098:	2023883a 	mov	r17,r4
   4209c:	2809883a 	mov	r4,r5
   420a0:	dfc00215 	stw	ra,8(sp)
   420a4:	80000015 	stw	zero,0(r16)
   420a8:	00438ac0 	call	438ac <sbrk>
   420ac:	00ffffc4 	movi	r3,-1
   420b0:	10c00526 	beq	r2,r3,420c8 <_sbrk_r+0x44>
   420b4:	dfc00217 	ldw	ra,8(sp)
   420b8:	dc400117 	ldw	r17,4(sp)
   420bc:	dc000017 	ldw	r16,0(sp)
   420c0:	dec00304 	addi	sp,sp,12
   420c4:	f800283a 	ret
   420c8:	80c00017 	ldw	r3,0(r16)
   420cc:	183ff926 	beq	r3,zero,420b4 <__alt_data_end+0xfffd00b4>
   420d0:	88c00015 	stw	r3,0(r17)
   420d4:	003ff706 	br	420b4 <__alt_data_end+0xfffd00b4>

000420d8 <__sread>:
   420d8:	defffe04 	addi	sp,sp,-8
   420dc:	dc000015 	stw	r16,0(sp)
   420e0:	2821883a 	mov	r16,r5
   420e4:	2940038f 	ldh	r5,14(r5)
   420e8:	dfc00115 	stw	ra,4(sp)
   420ec:	0042e180 	call	42e18 <_read_r>
   420f0:	10000716 	blt	r2,zero,42110 <__sread+0x38>
   420f4:	80c01417 	ldw	r3,80(r16)
   420f8:	1887883a 	add	r3,r3,r2
   420fc:	80c01415 	stw	r3,80(r16)
   42100:	dfc00117 	ldw	ra,4(sp)
   42104:	dc000017 	ldw	r16,0(sp)
   42108:	dec00204 	addi	sp,sp,8
   4210c:	f800283a 	ret
   42110:	80c0030b 	ldhu	r3,12(r16)
   42114:	18fbffcc 	andi	r3,r3,61439
   42118:	80c0030d 	sth	r3,12(r16)
   4211c:	dfc00117 	ldw	ra,4(sp)
   42120:	dc000017 	ldw	r16,0(sp)
   42124:	dec00204 	addi	sp,sp,8
   42128:	f800283a 	ret

0004212c <__seofread>:
   4212c:	0005883a 	mov	r2,zero
   42130:	f800283a 	ret

00042134 <__swrite>:
   42134:	2880030b 	ldhu	r2,12(r5)
   42138:	defffb04 	addi	sp,sp,-20
   4213c:	dcc00315 	stw	r19,12(sp)
   42140:	dc800215 	stw	r18,8(sp)
   42144:	dc400115 	stw	r17,4(sp)
   42148:	dc000015 	stw	r16,0(sp)
   4214c:	dfc00415 	stw	ra,16(sp)
   42150:	10c0400c 	andi	r3,r2,256
   42154:	2821883a 	mov	r16,r5
   42158:	2023883a 	mov	r17,r4
   4215c:	3025883a 	mov	r18,r6
   42160:	3827883a 	mov	r19,r7
   42164:	18000526 	beq	r3,zero,4217c <__swrite+0x48>
   42168:	2940038f 	ldh	r5,14(r5)
   4216c:	01c00084 	movi	r7,2
   42170:	000d883a 	mov	r6,zero
   42174:	0042bfc0 	call	42bfc <_lseek_r>
   42178:	8080030b 	ldhu	r2,12(r16)
   4217c:	8140038f 	ldh	r5,14(r16)
   42180:	10bbffcc 	andi	r2,r2,61439
   42184:	980f883a 	mov	r7,r19
   42188:	900d883a 	mov	r6,r18
   4218c:	8809883a 	mov	r4,r17
   42190:	8080030d 	sth	r2,12(r16)
   42194:	dfc00417 	ldw	ra,16(sp)
   42198:	dcc00317 	ldw	r19,12(sp)
   4219c:	dc800217 	ldw	r18,8(sp)
   421a0:	dc400117 	ldw	r17,4(sp)
   421a4:	dc000017 	ldw	r16,0(sp)
   421a8:	dec00504 	addi	sp,sp,20
   421ac:	00422141 	jmpi	42214 <_write_r>

000421b0 <__sseek>:
   421b0:	defffe04 	addi	sp,sp,-8
   421b4:	dc000015 	stw	r16,0(sp)
   421b8:	2821883a 	mov	r16,r5
   421bc:	2940038f 	ldh	r5,14(r5)
   421c0:	dfc00115 	stw	ra,4(sp)
   421c4:	0042bfc0 	call	42bfc <_lseek_r>
   421c8:	00ffffc4 	movi	r3,-1
   421cc:	10c00826 	beq	r2,r3,421f0 <__sseek+0x40>
   421d0:	80c0030b 	ldhu	r3,12(r16)
   421d4:	80801415 	stw	r2,80(r16)
   421d8:	18c40014 	ori	r3,r3,4096
   421dc:	80c0030d 	sth	r3,12(r16)
   421e0:	dfc00117 	ldw	ra,4(sp)
   421e4:	dc000017 	ldw	r16,0(sp)
   421e8:	dec00204 	addi	sp,sp,8
   421ec:	f800283a 	ret
   421f0:	80c0030b 	ldhu	r3,12(r16)
   421f4:	18fbffcc 	andi	r3,r3,61439
   421f8:	80c0030d 	sth	r3,12(r16)
   421fc:	dfc00117 	ldw	ra,4(sp)
   42200:	dc000017 	ldw	r16,0(sp)
   42204:	dec00204 	addi	sp,sp,8
   42208:	f800283a 	ret

0004220c <__sclose>:
   4220c:	2940038f 	ldh	r5,14(r5)
   42210:	00423c81 	jmpi	423c8 <_close_r>

00042214 <_write_r>:
   42214:	defffd04 	addi	sp,sp,-12
   42218:	2805883a 	mov	r2,r5
   4221c:	dc000015 	stw	r16,0(sp)
   42220:	04000174 	movhi	r16,5
   42224:	dc400115 	stw	r17,4(sp)
   42228:	300b883a 	mov	r5,r6
   4222c:	84233604 	addi	r16,r16,-29480
   42230:	2023883a 	mov	r17,r4
   42234:	380d883a 	mov	r6,r7
   42238:	1009883a 	mov	r4,r2
   4223c:	dfc00215 	stw	ra,8(sp)
   42240:	80000015 	stw	zero,0(r16)
   42244:	00439980 	call	43998 <write>
   42248:	00ffffc4 	movi	r3,-1
   4224c:	10c00526 	beq	r2,r3,42264 <_write_r+0x50>
   42250:	dfc00217 	ldw	ra,8(sp)
   42254:	dc400117 	ldw	r17,4(sp)
   42258:	dc000017 	ldw	r16,0(sp)
   4225c:	dec00304 	addi	sp,sp,12
   42260:	f800283a 	ret
   42264:	80c00017 	ldw	r3,0(r16)
   42268:	183ff926 	beq	r3,zero,42250 <__alt_data_end+0xfffd0250>
   4226c:	88c00015 	stw	r3,0(r17)
   42270:	003ff706 	br	42250 <__alt_data_end+0xfffd0250>

00042274 <__swsetup_r>:
   42274:	00800134 	movhi	r2,4
   42278:	defffd04 	addi	sp,sp,-12
   4227c:	109c8b04 	addi	r2,r2,29228
   42280:	dc400115 	stw	r17,4(sp)
   42284:	2023883a 	mov	r17,r4
   42288:	11000017 	ldw	r4,0(r2)
   4228c:	dc000015 	stw	r16,0(sp)
   42290:	dfc00215 	stw	ra,8(sp)
   42294:	2821883a 	mov	r16,r5
   42298:	20000226 	beq	r4,zero,422a4 <__swsetup_r+0x30>
   4229c:	20800e17 	ldw	r2,56(r4)
   422a0:	10003126 	beq	r2,zero,42368 <__swsetup_r+0xf4>
   422a4:	8080030b 	ldhu	r2,12(r16)
   422a8:	10c0020c 	andi	r3,r2,8
   422ac:	1009883a 	mov	r4,r2
   422b0:	18000f26 	beq	r3,zero,422f0 <__swsetup_r+0x7c>
   422b4:	80c00417 	ldw	r3,16(r16)
   422b8:	18001526 	beq	r3,zero,42310 <__swsetup_r+0x9c>
   422bc:	1100004c 	andi	r4,r2,1
   422c0:	20001c1e 	bne	r4,zero,42334 <__swsetup_r+0xc0>
   422c4:	1080008c 	andi	r2,r2,2
   422c8:	1000291e 	bne	r2,zero,42370 <__swsetup_r+0xfc>
   422cc:	80800517 	ldw	r2,20(r16)
   422d0:	80800215 	stw	r2,8(r16)
   422d4:	18001c26 	beq	r3,zero,42348 <__swsetup_r+0xd4>
   422d8:	0005883a 	mov	r2,zero
   422dc:	dfc00217 	ldw	ra,8(sp)
   422e0:	dc400117 	ldw	r17,4(sp)
   422e4:	dc000017 	ldw	r16,0(sp)
   422e8:	dec00304 	addi	sp,sp,12
   422ec:	f800283a 	ret
   422f0:	2080040c 	andi	r2,r4,16
   422f4:	10002e26 	beq	r2,zero,423b0 <__swsetup_r+0x13c>
   422f8:	2080010c 	andi	r2,r4,4
   422fc:	10001e1e 	bne	r2,zero,42378 <__swsetup_r+0x104>
   42300:	80c00417 	ldw	r3,16(r16)
   42304:	20800214 	ori	r2,r4,8
   42308:	8080030d 	sth	r2,12(r16)
   4230c:	183feb1e 	bne	r3,zero,422bc <__alt_data_end+0xfffd02bc>
   42310:	1100a00c 	andi	r4,r2,640
   42314:	01408004 	movi	r5,512
   42318:	217fe826 	beq	r4,r5,422bc <__alt_data_end+0xfffd02bc>
   4231c:	800b883a 	mov	r5,r16
   42320:	8809883a 	mov	r4,r17
   42324:	0042c5c0 	call	42c5c <__smakebuf_r>
   42328:	8080030b 	ldhu	r2,12(r16)
   4232c:	80c00417 	ldw	r3,16(r16)
   42330:	003fe206 	br	422bc <__alt_data_end+0xfffd02bc>
   42334:	80800517 	ldw	r2,20(r16)
   42338:	80000215 	stw	zero,8(r16)
   4233c:	0085c83a 	sub	r2,zero,r2
   42340:	80800615 	stw	r2,24(r16)
   42344:	183fe41e 	bne	r3,zero,422d8 <__alt_data_end+0xfffd02d8>
   42348:	80c0030b 	ldhu	r3,12(r16)
   4234c:	0005883a 	mov	r2,zero
   42350:	1900200c 	andi	r4,r3,128
   42354:	203fe126 	beq	r4,zero,422dc <__alt_data_end+0xfffd02dc>
   42358:	18c01014 	ori	r3,r3,64
   4235c:	80c0030d 	sth	r3,12(r16)
   42360:	00bfffc4 	movi	r2,-1
   42364:	003fdd06 	br	422dc <__alt_data_end+0xfffd02dc>
   42368:	00407c40 	call	407c4 <__sinit>
   4236c:	003fcd06 	br	422a4 <__alt_data_end+0xfffd02a4>
   42370:	0005883a 	mov	r2,zero
   42374:	003fd606 	br	422d0 <__alt_data_end+0xfffd02d0>
   42378:	81400c17 	ldw	r5,48(r16)
   4237c:	28000626 	beq	r5,zero,42398 <__swsetup_r+0x124>
   42380:	80801004 	addi	r2,r16,64
   42384:	28800326 	beq	r5,r2,42394 <__swsetup_r+0x120>
   42388:	8809883a 	mov	r4,r17
   4238c:	00428ec0 	call	428ec <_free_r>
   42390:	8100030b 	ldhu	r4,12(r16)
   42394:	80000c15 	stw	zero,48(r16)
   42398:	80c00417 	ldw	r3,16(r16)
   4239c:	00bff6c4 	movi	r2,-37
   423a0:	1108703a 	and	r4,r2,r4
   423a4:	80000115 	stw	zero,4(r16)
   423a8:	80c00015 	stw	r3,0(r16)
   423ac:	003fd506 	br	42304 <__alt_data_end+0xfffd0304>
   423b0:	00800244 	movi	r2,9
   423b4:	88800015 	stw	r2,0(r17)
   423b8:	20801014 	ori	r2,r4,64
   423bc:	8080030d 	sth	r2,12(r16)
   423c0:	00bfffc4 	movi	r2,-1
   423c4:	003fc506 	br	422dc <__alt_data_end+0xfffd02dc>

000423c8 <_close_r>:
   423c8:	defffd04 	addi	sp,sp,-12
   423cc:	dc000015 	stw	r16,0(sp)
   423d0:	04000174 	movhi	r16,5
   423d4:	dc400115 	stw	r17,4(sp)
   423d8:	84233604 	addi	r16,r16,-29480
   423dc:	2023883a 	mov	r17,r4
   423e0:	2809883a 	mov	r4,r5
   423e4:	dfc00215 	stw	ra,8(sp)
   423e8:	80000015 	stw	zero,0(r16)
   423ec:	00431400 	call	43140 <close>
   423f0:	00ffffc4 	movi	r3,-1
   423f4:	10c00526 	beq	r2,r3,4240c <_close_r+0x44>
   423f8:	dfc00217 	ldw	ra,8(sp)
   423fc:	dc400117 	ldw	r17,4(sp)
   42400:	dc000017 	ldw	r16,0(sp)
   42404:	dec00304 	addi	sp,sp,12
   42408:	f800283a 	ret
   4240c:	80c00017 	ldw	r3,0(r16)
   42410:	183ff926 	beq	r3,zero,423f8 <__alt_data_end+0xfffd03f8>
   42414:	88c00015 	stw	r3,0(r17)
   42418:	003ff706 	br	423f8 <__alt_data_end+0xfffd03f8>

0004241c <_fclose_r>:
   4241c:	28003926 	beq	r5,zero,42504 <_fclose_r+0xe8>
   42420:	defffc04 	addi	sp,sp,-16
   42424:	dc400115 	stw	r17,4(sp)
   42428:	dc000015 	stw	r16,0(sp)
   4242c:	dfc00315 	stw	ra,12(sp)
   42430:	dc800215 	stw	r18,8(sp)
   42434:	2023883a 	mov	r17,r4
   42438:	2821883a 	mov	r16,r5
   4243c:	20000226 	beq	r4,zero,42448 <_fclose_r+0x2c>
   42440:	20800e17 	ldw	r2,56(r4)
   42444:	10002726 	beq	r2,zero,424e4 <_fclose_r+0xc8>
   42448:	8080030f 	ldh	r2,12(r16)
   4244c:	1000071e 	bne	r2,zero,4246c <_fclose_r+0x50>
   42450:	0005883a 	mov	r2,zero
   42454:	dfc00317 	ldw	ra,12(sp)
   42458:	dc800217 	ldw	r18,8(sp)
   4245c:	dc400117 	ldw	r17,4(sp)
   42460:	dc000017 	ldw	r16,0(sp)
   42464:	dec00404 	addi	sp,sp,16
   42468:	f800283a 	ret
   4246c:	800b883a 	mov	r5,r16
   42470:	8809883a 	mov	r4,r17
   42474:	00425200 	call	42520 <__sflush_r>
   42478:	1025883a 	mov	r18,r2
   4247c:	80800b17 	ldw	r2,44(r16)
   42480:	10000426 	beq	r2,zero,42494 <_fclose_r+0x78>
   42484:	81400717 	ldw	r5,28(r16)
   42488:	8809883a 	mov	r4,r17
   4248c:	103ee83a 	callr	r2
   42490:	10001616 	blt	r2,zero,424ec <_fclose_r+0xd0>
   42494:	8080030b 	ldhu	r2,12(r16)
   42498:	1080200c 	andi	r2,r2,128
   4249c:	1000151e 	bne	r2,zero,424f4 <_fclose_r+0xd8>
   424a0:	81400c17 	ldw	r5,48(r16)
   424a4:	28000526 	beq	r5,zero,424bc <_fclose_r+0xa0>
   424a8:	80801004 	addi	r2,r16,64
   424ac:	28800226 	beq	r5,r2,424b8 <_fclose_r+0x9c>
   424b0:	8809883a 	mov	r4,r17
   424b4:	00428ec0 	call	428ec <_free_r>
   424b8:	80000c15 	stw	zero,48(r16)
   424bc:	81401117 	ldw	r5,68(r16)
   424c0:	28000326 	beq	r5,zero,424d0 <_fclose_r+0xb4>
   424c4:	8809883a 	mov	r4,r17
   424c8:	00428ec0 	call	428ec <_free_r>
   424cc:	80001115 	stw	zero,68(r16)
   424d0:	00407d40 	call	407d4 <__sfp_lock_acquire>
   424d4:	8000030d 	sth	zero,12(r16)
   424d8:	00407d80 	call	407d8 <__sfp_lock_release>
   424dc:	9005883a 	mov	r2,r18
   424e0:	003fdc06 	br	42454 <__alt_data_end+0xfffd0454>
   424e4:	00407c40 	call	407c4 <__sinit>
   424e8:	003fd706 	br	42448 <__alt_data_end+0xfffd0448>
   424ec:	04bfffc4 	movi	r18,-1
   424f0:	003fe806 	br	42494 <__alt_data_end+0xfffd0494>
   424f4:	81400417 	ldw	r5,16(r16)
   424f8:	8809883a 	mov	r4,r17
   424fc:	00428ec0 	call	428ec <_free_r>
   42500:	003fe706 	br	424a0 <__alt_data_end+0xfffd04a0>
   42504:	0005883a 	mov	r2,zero
   42508:	f800283a 	ret

0004250c <fclose>:
   4250c:	00800134 	movhi	r2,4
   42510:	109c8b04 	addi	r2,r2,29228
   42514:	200b883a 	mov	r5,r4
   42518:	11000017 	ldw	r4,0(r2)
   4251c:	004241c1 	jmpi	4241c <_fclose_r>

00042520 <__sflush_r>:
   42520:	2880030b 	ldhu	r2,12(r5)
   42524:	defffb04 	addi	sp,sp,-20
   42528:	dcc00315 	stw	r19,12(sp)
   4252c:	dc400115 	stw	r17,4(sp)
   42530:	dfc00415 	stw	ra,16(sp)
   42534:	dc800215 	stw	r18,8(sp)
   42538:	dc000015 	stw	r16,0(sp)
   4253c:	10c0020c 	andi	r3,r2,8
   42540:	2823883a 	mov	r17,r5
   42544:	2027883a 	mov	r19,r4
   42548:	1800311e 	bne	r3,zero,42610 <__sflush_r+0xf0>
   4254c:	28c00117 	ldw	r3,4(r5)
   42550:	10820014 	ori	r2,r2,2048
   42554:	2880030d 	sth	r2,12(r5)
   42558:	00c04b0e 	bge	zero,r3,42688 <__sflush_r+0x168>
   4255c:	8a000a17 	ldw	r8,40(r17)
   42560:	40002326 	beq	r8,zero,425f0 <__sflush_r+0xd0>
   42564:	9c000017 	ldw	r16,0(r19)
   42568:	10c4000c 	andi	r3,r2,4096
   4256c:	98000015 	stw	zero,0(r19)
   42570:	18004826 	beq	r3,zero,42694 <__sflush_r+0x174>
   42574:	89801417 	ldw	r6,80(r17)
   42578:	10c0010c 	andi	r3,r2,4
   4257c:	18000626 	beq	r3,zero,42598 <__sflush_r+0x78>
   42580:	88c00117 	ldw	r3,4(r17)
   42584:	88800c17 	ldw	r2,48(r17)
   42588:	30cdc83a 	sub	r6,r6,r3
   4258c:	10000226 	beq	r2,zero,42598 <__sflush_r+0x78>
   42590:	88800f17 	ldw	r2,60(r17)
   42594:	308dc83a 	sub	r6,r6,r2
   42598:	89400717 	ldw	r5,28(r17)
   4259c:	000f883a 	mov	r7,zero
   425a0:	9809883a 	mov	r4,r19
   425a4:	403ee83a 	callr	r8
   425a8:	00ffffc4 	movi	r3,-1
   425ac:	10c04426 	beq	r2,r3,426c0 <__sflush_r+0x1a0>
   425b0:	88c0030b 	ldhu	r3,12(r17)
   425b4:	89000417 	ldw	r4,16(r17)
   425b8:	88000115 	stw	zero,4(r17)
   425bc:	197dffcc 	andi	r5,r3,63487
   425c0:	8940030d 	sth	r5,12(r17)
   425c4:	89000015 	stw	r4,0(r17)
   425c8:	18c4000c 	andi	r3,r3,4096
   425cc:	18002c1e 	bne	r3,zero,42680 <__sflush_r+0x160>
   425d0:	89400c17 	ldw	r5,48(r17)
   425d4:	9c000015 	stw	r16,0(r19)
   425d8:	28000526 	beq	r5,zero,425f0 <__sflush_r+0xd0>
   425dc:	88801004 	addi	r2,r17,64
   425e0:	28800226 	beq	r5,r2,425ec <__sflush_r+0xcc>
   425e4:	9809883a 	mov	r4,r19
   425e8:	00428ec0 	call	428ec <_free_r>
   425ec:	88000c15 	stw	zero,48(r17)
   425f0:	0005883a 	mov	r2,zero
   425f4:	dfc00417 	ldw	ra,16(sp)
   425f8:	dcc00317 	ldw	r19,12(sp)
   425fc:	dc800217 	ldw	r18,8(sp)
   42600:	dc400117 	ldw	r17,4(sp)
   42604:	dc000017 	ldw	r16,0(sp)
   42608:	dec00504 	addi	sp,sp,20
   4260c:	f800283a 	ret
   42610:	2c800417 	ldw	r18,16(r5)
   42614:	903ff626 	beq	r18,zero,425f0 <__alt_data_end+0xfffd05f0>
   42618:	2c000017 	ldw	r16,0(r5)
   4261c:	108000cc 	andi	r2,r2,3
   42620:	2c800015 	stw	r18,0(r5)
   42624:	84a1c83a 	sub	r16,r16,r18
   42628:	1000131e 	bne	r2,zero,42678 <__sflush_r+0x158>
   4262c:	28800517 	ldw	r2,20(r5)
   42630:	88800215 	stw	r2,8(r17)
   42634:	04000316 	blt	zero,r16,42644 <__sflush_r+0x124>
   42638:	003fed06 	br	425f0 <__alt_data_end+0xfffd05f0>
   4263c:	90a5883a 	add	r18,r18,r2
   42640:	043feb0e 	bge	zero,r16,425f0 <__alt_data_end+0xfffd05f0>
   42644:	88800917 	ldw	r2,36(r17)
   42648:	89400717 	ldw	r5,28(r17)
   4264c:	800f883a 	mov	r7,r16
   42650:	900d883a 	mov	r6,r18
   42654:	9809883a 	mov	r4,r19
   42658:	103ee83a 	callr	r2
   4265c:	80a1c83a 	sub	r16,r16,r2
   42660:	00bff616 	blt	zero,r2,4263c <__alt_data_end+0xfffd063c>
   42664:	88c0030b 	ldhu	r3,12(r17)
   42668:	00bfffc4 	movi	r2,-1
   4266c:	18c01014 	ori	r3,r3,64
   42670:	88c0030d 	sth	r3,12(r17)
   42674:	003fdf06 	br	425f4 <__alt_data_end+0xfffd05f4>
   42678:	0005883a 	mov	r2,zero
   4267c:	003fec06 	br	42630 <__alt_data_end+0xfffd0630>
   42680:	88801415 	stw	r2,80(r17)
   42684:	003fd206 	br	425d0 <__alt_data_end+0xfffd05d0>
   42688:	28c00f17 	ldw	r3,60(r5)
   4268c:	00ffb316 	blt	zero,r3,4255c <__alt_data_end+0xfffd055c>
   42690:	003fd706 	br	425f0 <__alt_data_end+0xfffd05f0>
   42694:	89400717 	ldw	r5,28(r17)
   42698:	000d883a 	mov	r6,zero
   4269c:	01c00044 	movi	r7,1
   426a0:	9809883a 	mov	r4,r19
   426a4:	403ee83a 	callr	r8
   426a8:	100d883a 	mov	r6,r2
   426ac:	00bfffc4 	movi	r2,-1
   426b0:	30801426 	beq	r6,r2,42704 <__sflush_r+0x1e4>
   426b4:	8880030b 	ldhu	r2,12(r17)
   426b8:	8a000a17 	ldw	r8,40(r17)
   426bc:	003fae06 	br	42578 <__alt_data_end+0xfffd0578>
   426c0:	98c00017 	ldw	r3,0(r19)
   426c4:	183fba26 	beq	r3,zero,425b0 <__alt_data_end+0xfffd05b0>
   426c8:	01000744 	movi	r4,29
   426cc:	19000626 	beq	r3,r4,426e8 <__sflush_r+0x1c8>
   426d0:	01000584 	movi	r4,22
   426d4:	19000426 	beq	r3,r4,426e8 <__sflush_r+0x1c8>
   426d8:	88c0030b 	ldhu	r3,12(r17)
   426dc:	18c01014 	ori	r3,r3,64
   426e0:	88c0030d 	sth	r3,12(r17)
   426e4:	003fc306 	br	425f4 <__alt_data_end+0xfffd05f4>
   426e8:	8880030b 	ldhu	r2,12(r17)
   426ec:	88c00417 	ldw	r3,16(r17)
   426f0:	88000115 	stw	zero,4(r17)
   426f4:	10bdffcc 	andi	r2,r2,63487
   426f8:	8880030d 	sth	r2,12(r17)
   426fc:	88c00015 	stw	r3,0(r17)
   42700:	003fb306 	br	425d0 <__alt_data_end+0xfffd05d0>
   42704:	98800017 	ldw	r2,0(r19)
   42708:	103fea26 	beq	r2,zero,426b4 <__alt_data_end+0xfffd06b4>
   4270c:	00c00744 	movi	r3,29
   42710:	10c00226 	beq	r2,r3,4271c <__sflush_r+0x1fc>
   42714:	00c00584 	movi	r3,22
   42718:	10c0031e 	bne	r2,r3,42728 <__sflush_r+0x208>
   4271c:	9c000015 	stw	r16,0(r19)
   42720:	0005883a 	mov	r2,zero
   42724:	003fb306 	br	425f4 <__alt_data_end+0xfffd05f4>
   42728:	88c0030b 	ldhu	r3,12(r17)
   4272c:	3005883a 	mov	r2,r6
   42730:	18c01014 	ori	r3,r3,64
   42734:	88c0030d 	sth	r3,12(r17)
   42738:	003fae06 	br	425f4 <__alt_data_end+0xfffd05f4>

0004273c <_fflush_r>:
   4273c:	defffd04 	addi	sp,sp,-12
   42740:	dc000115 	stw	r16,4(sp)
   42744:	dfc00215 	stw	ra,8(sp)
   42748:	2021883a 	mov	r16,r4
   4274c:	20000226 	beq	r4,zero,42758 <_fflush_r+0x1c>
   42750:	20800e17 	ldw	r2,56(r4)
   42754:	10000c26 	beq	r2,zero,42788 <_fflush_r+0x4c>
   42758:	2880030f 	ldh	r2,12(r5)
   4275c:	1000051e 	bne	r2,zero,42774 <_fflush_r+0x38>
   42760:	0005883a 	mov	r2,zero
   42764:	dfc00217 	ldw	ra,8(sp)
   42768:	dc000117 	ldw	r16,4(sp)
   4276c:	dec00304 	addi	sp,sp,12
   42770:	f800283a 	ret
   42774:	8009883a 	mov	r4,r16
   42778:	dfc00217 	ldw	ra,8(sp)
   4277c:	dc000117 	ldw	r16,4(sp)
   42780:	dec00304 	addi	sp,sp,12
   42784:	00425201 	jmpi	42520 <__sflush_r>
   42788:	d9400015 	stw	r5,0(sp)
   4278c:	00407c40 	call	407c4 <__sinit>
   42790:	d9400017 	ldw	r5,0(sp)
   42794:	003ff006 	br	42758 <__alt_data_end+0xfffd0758>

00042798 <fflush>:
   42798:	20000526 	beq	r4,zero,427b0 <fflush+0x18>
   4279c:	00800134 	movhi	r2,4
   427a0:	109c8b04 	addi	r2,r2,29228
   427a4:	200b883a 	mov	r5,r4
   427a8:	11000017 	ldw	r4,0(r2)
   427ac:	004273c1 	jmpi	4273c <_fflush_r>
   427b0:	00800134 	movhi	r2,4
   427b4:	109c8a04 	addi	r2,r2,29224
   427b8:	11000017 	ldw	r4,0(r2)
   427bc:	01400134 	movhi	r5,4
   427c0:	2949cf04 	addi	r5,r5,10044
   427c4:	0040da01 	jmpi	40da0 <_fwalk_reent>

000427c8 <_malloc_trim_r>:
   427c8:	defffb04 	addi	sp,sp,-20
   427cc:	dcc00315 	stw	r19,12(sp)
   427d0:	04c00134 	movhi	r19,4
   427d4:	dc800215 	stw	r18,8(sp)
   427d8:	dc400115 	stw	r17,4(sp)
   427dc:	dc000015 	stw	r16,0(sp)
   427e0:	dfc00415 	stw	ra,16(sp)
   427e4:	2821883a 	mov	r16,r5
   427e8:	9cd70604 	addi	r19,r19,23576
   427ec:	2025883a 	mov	r18,r4
   427f0:	00436a00 	call	436a0 <__malloc_lock>
   427f4:	98800217 	ldw	r2,8(r19)
   427f8:	14400117 	ldw	r17,4(r2)
   427fc:	00bfff04 	movi	r2,-4
   42800:	88a2703a 	and	r17,r17,r2
   42804:	8c21c83a 	sub	r16,r17,r16
   42808:	8403fbc4 	addi	r16,r16,4079
   4280c:	8020d33a 	srli	r16,r16,12
   42810:	0083ffc4 	movi	r2,4095
   42814:	843fffc4 	addi	r16,r16,-1
   42818:	8020933a 	slli	r16,r16,12
   4281c:	1400060e 	bge	r2,r16,42838 <_malloc_trim_r+0x70>
   42820:	000b883a 	mov	r5,zero
   42824:	9009883a 	mov	r4,r18
   42828:	00420840 	call	42084 <_sbrk_r>
   4282c:	98c00217 	ldw	r3,8(r19)
   42830:	1c47883a 	add	r3,r3,r17
   42834:	10c00a26 	beq	r2,r3,42860 <_malloc_trim_r+0x98>
   42838:	9009883a 	mov	r4,r18
   4283c:	00436c40 	call	436c4 <__malloc_unlock>
   42840:	0005883a 	mov	r2,zero
   42844:	dfc00417 	ldw	ra,16(sp)
   42848:	dcc00317 	ldw	r19,12(sp)
   4284c:	dc800217 	ldw	r18,8(sp)
   42850:	dc400117 	ldw	r17,4(sp)
   42854:	dc000017 	ldw	r16,0(sp)
   42858:	dec00504 	addi	sp,sp,20
   4285c:	f800283a 	ret
   42860:	040bc83a 	sub	r5,zero,r16
   42864:	9009883a 	mov	r4,r18
   42868:	00420840 	call	42084 <_sbrk_r>
   4286c:	00ffffc4 	movi	r3,-1
   42870:	10c00d26 	beq	r2,r3,428a8 <_malloc_trim_r+0xe0>
   42874:	00c00174 	movhi	r3,5
   42878:	18e33e04 	addi	r3,r3,-29448
   4287c:	18800017 	ldw	r2,0(r3)
   42880:	99000217 	ldw	r4,8(r19)
   42884:	8c23c83a 	sub	r17,r17,r16
   42888:	8c400054 	ori	r17,r17,1
   4288c:	1421c83a 	sub	r16,r2,r16
   42890:	24400115 	stw	r17,4(r4)
   42894:	9009883a 	mov	r4,r18
   42898:	1c000015 	stw	r16,0(r3)
   4289c:	00436c40 	call	436c4 <__malloc_unlock>
   428a0:	00800044 	movi	r2,1
   428a4:	003fe706 	br	42844 <__alt_data_end+0xfffd0844>
   428a8:	000b883a 	mov	r5,zero
   428ac:	9009883a 	mov	r4,r18
   428b0:	00420840 	call	42084 <_sbrk_r>
   428b4:	99000217 	ldw	r4,8(r19)
   428b8:	014003c4 	movi	r5,15
   428bc:	1107c83a 	sub	r3,r2,r4
   428c0:	28ffdd0e 	bge	r5,r3,42838 <__alt_data_end+0xfffd0838>
   428c4:	01400134 	movhi	r5,4
   428c8:	295c8c04 	addi	r5,r5,29232
   428cc:	29400017 	ldw	r5,0(r5)
   428d0:	18c00054 	ori	r3,r3,1
   428d4:	20c00115 	stw	r3,4(r4)
   428d8:	00c00174 	movhi	r3,5
   428dc:	1145c83a 	sub	r2,r2,r5
   428e0:	18e33e04 	addi	r3,r3,-29448
   428e4:	18800015 	stw	r2,0(r3)
   428e8:	003fd306 	br	42838 <__alt_data_end+0xfffd0838>

000428ec <_free_r>:
   428ec:	28004126 	beq	r5,zero,429f4 <_free_r+0x108>
   428f0:	defffd04 	addi	sp,sp,-12
   428f4:	dc400115 	stw	r17,4(sp)
   428f8:	dc000015 	stw	r16,0(sp)
   428fc:	2023883a 	mov	r17,r4
   42900:	2821883a 	mov	r16,r5
   42904:	dfc00215 	stw	ra,8(sp)
   42908:	00436a00 	call	436a0 <__malloc_lock>
   4290c:	81ffff17 	ldw	r7,-4(r16)
   42910:	00bfff84 	movi	r2,-2
   42914:	01000134 	movhi	r4,4
   42918:	81bffe04 	addi	r6,r16,-8
   4291c:	3884703a 	and	r2,r7,r2
   42920:	21170604 	addi	r4,r4,23576
   42924:	308b883a 	add	r5,r6,r2
   42928:	2a400117 	ldw	r9,4(r5)
   4292c:	22000217 	ldw	r8,8(r4)
   42930:	00ffff04 	movi	r3,-4
   42934:	48c6703a 	and	r3,r9,r3
   42938:	2a005726 	beq	r5,r8,42a98 <_free_r+0x1ac>
   4293c:	28c00115 	stw	r3,4(r5)
   42940:	39c0004c 	andi	r7,r7,1
   42944:	3800091e 	bne	r7,zero,4296c <_free_r+0x80>
   42948:	823ffe17 	ldw	r8,-8(r16)
   4294c:	22400204 	addi	r9,r4,8
   42950:	320dc83a 	sub	r6,r6,r8
   42954:	31c00217 	ldw	r7,8(r6)
   42958:	1205883a 	add	r2,r2,r8
   4295c:	3a406526 	beq	r7,r9,42af4 <_free_r+0x208>
   42960:	32000317 	ldw	r8,12(r6)
   42964:	3a000315 	stw	r8,12(r7)
   42968:	41c00215 	stw	r7,8(r8)
   4296c:	28cf883a 	add	r7,r5,r3
   42970:	39c00117 	ldw	r7,4(r7)
   42974:	39c0004c 	andi	r7,r7,1
   42978:	38003a26 	beq	r7,zero,42a64 <_free_r+0x178>
   4297c:	10c00054 	ori	r3,r2,1
   42980:	30c00115 	stw	r3,4(r6)
   42984:	3087883a 	add	r3,r6,r2
   42988:	18800015 	stw	r2,0(r3)
   4298c:	00c07fc4 	movi	r3,511
   42990:	18801936 	bltu	r3,r2,429f8 <_free_r+0x10c>
   42994:	1004d0fa 	srli	r2,r2,3
   42998:	01c00044 	movi	r7,1
   4299c:	21400117 	ldw	r5,4(r4)
   429a0:	10c00044 	addi	r3,r2,1
   429a4:	18c7883a 	add	r3,r3,r3
   429a8:	1005d0ba 	srai	r2,r2,2
   429ac:	18c7883a 	add	r3,r3,r3
   429b0:	18c7883a 	add	r3,r3,r3
   429b4:	1907883a 	add	r3,r3,r4
   429b8:	3884983a 	sll	r2,r7,r2
   429bc:	19c00017 	ldw	r7,0(r3)
   429c0:	1a3ffe04 	addi	r8,r3,-8
   429c4:	1144b03a 	or	r2,r2,r5
   429c8:	32000315 	stw	r8,12(r6)
   429cc:	31c00215 	stw	r7,8(r6)
   429d0:	20800115 	stw	r2,4(r4)
   429d4:	19800015 	stw	r6,0(r3)
   429d8:	39800315 	stw	r6,12(r7)
   429dc:	8809883a 	mov	r4,r17
   429e0:	dfc00217 	ldw	ra,8(sp)
   429e4:	dc400117 	ldw	r17,4(sp)
   429e8:	dc000017 	ldw	r16,0(sp)
   429ec:	dec00304 	addi	sp,sp,12
   429f0:	00436c41 	jmpi	436c4 <__malloc_unlock>
   429f4:	f800283a 	ret
   429f8:	100ad27a 	srli	r5,r2,9
   429fc:	00c00104 	movi	r3,4
   42a00:	19404a36 	bltu	r3,r5,42b2c <_free_r+0x240>
   42a04:	100ad1ba 	srli	r5,r2,6
   42a08:	28c00e44 	addi	r3,r5,57
   42a0c:	18c7883a 	add	r3,r3,r3
   42a10:	29400e04 	addi	r5,r5,56
   42a14:	18c7883a 	add	r3,r3,r3
   42a18:	18c7883a 	add	r3,r3,r3
   42a1c:	1909883a 	add	r4,r3,r4
   42a20:	20c00017 	ldw	r3,0(r4)
   42a24:	01c00134 	movhi	r7,4
   42a28:	213ffe04 	addi	r4,r4,-8
   42a2c:	39d70604 	addi	r7,r7,23576
   42a30:	20c04426 	beq	r4,r3,42b44 <_free_r+0x258>
   42a34:	01ffff04 	movi	r7,-4
   42a38:	19400117 	ldw	r5,4(r3)
   42a3c:	29ca703a 	and	r5,r5,r7
   42a40:	1140022e 	bgeu	r2,r5,42a4c <_free_r+0x160>
   42a44:	18c00217 	ldw	r3,8(r3)
   42a48:	20fffb1e 	bne	r4,r3,42a38 <__alt_data_end+0xfffd0a38>
   42a4c:	19000317 	ldw	r4,12(r3)
   42a50:	31000315 	stw	r4,12(r6)
   42a54:	30c00215 	stw	r3,8(r6)
   42a58:	21800215 	stw	r6,8(r4)
   42a5c:	19800315 	stw	r6,12(r3)
   42a60:	003fde06 	br	429dc <__alt_data_end+0xfffd09dc>
   42a64:	29c00217 	ldw	r7,8(r5)
   42a68:	10c5883a 	add	r2,r2,r3
   42a6c:	00c00134 	movhi	r3,4
   42a70:	18d70804 	addi	r3,r3,23584
   42a74:	38c03b26 	beq	r7,r3,42b64 <_free_r+0x278>
   42a78:	2a000317 	ldw	r8,12(r5)
   42a7c:	11400054 	ori	r5,r2,1
   42a80:	3087883a 	add	r3,r6,r2
   42a84:	3a000315 	stw	r8,12(r7)
   42a88:	41c00215 	stw	r7,8(r8)
   42a8c:	31400115 	stw	r5,4(r6)
   42a90:	18800015 	stw	r2,0(r3)
   42a94:	003fbd06 	br	4298c <__alt_data_end+0xfffd098c>
   42a98:	39c0004c 	andi	r7,r7,1
   42a9c:	10c5883a 	add	r2,r2,r3
   42aa0:	3800071e 	bne	r7,zero,42ac0 <_free_r+0x1d4>
   42aa4:	81fffe17 	ldw	r7,-8(r16)
   42aa8:	31cdc83a 	sub	r6,r6,r7
   42aac:	30c00317 	ldw	r3,12(r6)
   42ab0:	31400217 	ldw	r5,8(r6)
   42ab4:	11c5883a 	add	r2,r2,r7
   42ab8:	28c00315 	stw	r3,12(r5)
   42abc:	19400215 	stw	r5,8(r3)
   42ac0:	10c00054 	ori	r3,r2,1
   42ac4:	30c00115 	stw	r3,4(r6)
   42ac8:	00c00134 	movhi	r3,4
   42acc:	18dc8d04 	addi	r3,r3,29236
   42ad0:	18c00017 	ldw	r3,0(r3)
   42ad4:	21800215 	stw	r6,8(r4)
   42ad8:	10ffc036 	bltu	r2,r3,429dc <__alt_data_end+0xfffd09dc>
   42adc:	00800174 	movhi	r2,5
   42ae0:	10a33504 	addi	r2,r2,-29484
   42ae4:	11400017 	ldw	r5,0(r2)
   42ae8:	8809883a 	mov	r4,r17
   42aec:	00427c80 	call	427c8 <_malloc_trim_r>
   42af0:	003fba06 	br	429dc <__alt_data_end+0xfffd09dc>
   42af4:	28c9883a 	add	r4,r5,r3
   42af8:	21000117 	ldw	r4,4(r4)
   42afc:	2100004c 	andi	r4,r4,1
   42b00:	2000391e 	bne	r4,zero,42be8 <_free_r+0x2fc>
   42b04:	29c00217 	ldw	r7,8(r5)
   42b08:	29000317 	ldw	r4,12(r5)
   42b0c:	1885883a 	add	r2,r3,r2
   42b10:	10c00054 	ori	r3,r2,1
   42b14:	39000315 	stw	r4,12(r7)
   42b18:	21c00215 	stw	r7,8(r4)
   42b1c:	30c00115 	stw	r3,4(r6)
   42b20:	308d883a 	add	r6,r6,r2
   42b24:	30800015 	stw	r2,0(r6)
   42b28:	003fac06 	br	429dc <__alt_data_end+0xfffd09dc>
   42b2c:	00c00504 	movi	r3,20
   42b30:	19401536 	bltu	r3,r5,42b88 <_free_r+0x29c>
   42b34:	28c01704 	addi	r3,r5,92
   42b38:	18c7883a 	add	r3,r3,r3
   42b3c:	294016c4 	addi	r5,r5,91
   42b40:	003fb406 	br	42a14 <__alt_data_end+0xfffd0a14>
   42b44:	280bd0ba 	srai	r5,r5,2
   42b48:	00c00044 	movi	r3,1
   42b4c:	38800117 	ldw	r2,4(r7)
   42b50:	194a983a 	sll	r5,r3,r5
   42b54:	2007883a 	mov	r3,r4
   42b58:	2884b03a 	or	r2,r5,r2
   42b5c:	38800115 	stw	r2,4(r7)
   42b60:	003fbb06 	br	42a50 <__alt_data_end+0xfffd0a50>
   42b64:	21800515 	stw	r6,20(r4)
   42b68:	21800415 	stw	r6,16(r4)
   42b6c:	10c00054 	ori	r3,r2,1
   42b70:	31c00315 	stw	r7,12(r6)
   42b74:	31c00215 	stw	r7,8(r6)
   42b78:	30c00115 	stw	r3,4(r6)
   42b7c:	308d883a 	add	r6,r6,r2
   42b80:	30800015 	stw	r2,0(r6)
   42b84:	003f9506 	br	429dc <__alt_data_end+0xfffd09dc>
   42b88:	00c01504 	movi	r3,84
   42b8c:	19400536 	bltu	r3,r5,42ba4 <_free_r+0x2b8>
   42b90:	100ad33a 	srli	r5,r2,12
   42b94:	28c01bc4 	addi	r3,r5,111
   42b98:	18c7883a 	add	r3,r3,r3
   42b9c:	29401b84 	addi	r5,r5,110
   42ba0:	003f9c06 	br	42a14 <__alt_data_end+0xfffd0a14>
   42ba4:	00c05504 	movi	r3,340
   42ba8:	19400536 	bltu	r3,r5,42bc0 <_free_r+0x2d4>
   42bac:	100ad3fa 	srli	r5,r2,15
   42bb0:	28c01e04 	addi	r3,r5,120
   42bb4:	18c7883a 	add	r3,r3,r3
   42bb8:	29401dc4 	addi	r5,r5,119
   42bbc:	003f9506 	br	42a14 <__alt_data_end+0xfffd0a14>
   42bc0:	00c15504 	movi	r3,1364
   42bc4:	19400536 	bltu	r3,r5,42bdc <_free_r+0x2f0>
   42bc8:	100ad4ba 	srli	r5,r2,18
   42bcc:	28c01f44 	addi	r3,r5,125
   42bd0:	18c7883a 	add	r3,r3,r3
   42bd4:	29401f04 	addi	r5,r5,124
   42bd8:	003f8e06 	br	42a14 <__alt_data_end+0xfffd0a14>
   42bdc:	00c03f84 	movi	r3,254
   42be0:	01401f84 	movi	r5,126
   42be4:	003f8b06 	br	42a14 <__alt_data_end+0xfffd0a14>
   42be8:	10c00054 	ori	r3,r2,1
   42bec:	30c00115 	stw	r3,4(r6)
   42bf0:	308d883a 	add	r6,r6,r2
   42bf4:	30800015 	stw	r2,0(r6)
   42bf8:	003f7806 	br	429dc <__alt_data_end+0xfffd09dc>

00042bfc <_lseek_r>:
   42bfc:	defffd04 	addi	sp,sp,-12
   42c00:	2805883a 	mov	r2,r5
   42c04:	dc000015 	stw	r16,0(sp)
   42c08:	04000174 	movhi	r16,5
   42c0c:	dc400115 	stw	r17,4(sp)
   42c10:	300b883a 	mov	r5,r6
   42c14:	84233604 	addi	r16,r16,-29480
   42c18:	2023883a 	mov	r17,r4
   42c1c:	380d883a 	mov	r6,r7
   42c20:	1009883a 	mov	r4,r2
   42c24:	dfc00215 	stw	ra,8(sp)
   42c28:	80000015 	stw	zero,0(r16)
   42c2c:	00435480 	call	43548 <lseek>
   42c30:	00ffffc4 	movi	r3,-1
   42c34:	10c00526 	beq	r2,r3,42c4c <_lseek_r+0x50>
   42c38:	dfc00217 	ldw	ra,8(sp)
   42c3c:	dc400117 	ldw	r17,4(sp)
   42c40:	dc000017 	ldw	r16,0(sp)
   42c44:	dec00304 	addi	sp,sp,12
   42c48:	f800283a 	ret
   42c4c:	80c00017 	ldw	r3,0(r16)
   42c50:	183ff926 	beq	r3,zero,42c38 <__alt_data_end+0xfffd0c38>
   42c54:	88c00015 	stw	r3,0(r17)
   42c58:	003ff706 	br	42c38 <__alt_data_end+0xfffd0c38>

00042c5c <__smakebuf_r>:
   42c5c:	2880030b 	ldhu	r2,12(r5)
   42c60:	10c0008c 	andi	r3,r2,2
   42c64:	1800411e 	bne	r3,zero,42d6c <__smakebuf_r+0x110>
   42c68:	deffec04 	addi	sp,sp,-80
   42c6c:	dc000f15 	stw	r16,60(sp)
   42c70:	2821883a 	mov	r16,r5
   42c74:	2940038f 	ldh	r5,14(r5)
   42c78:	dc401015 	stw	r17,64(sp)
   42c7c:	dfc01315 	stw	ra,76(sp)
   42c80:	dcc01215 	stw	r19,72(sp)
   42c84:	dc801115 	stw	r18,68(sp)
   42c88:	2023883a 	mov	r17,r4
   42c8c:	28001c16 	blt	r5,zero,42d00 <__smakebuf_r+0xa4>
   42c90:	d80d883a 	mov	r6,sp
   42c94:	0042e780 	call	42e78 <_fstat_r>
   42c98:	10001816 	blt	r2,zero,42cfc <__smakebuf_r+0xa0>
   42c9c:	d8800117 	ldw	r2,4(sp)
   42ca0:	00e00014 	movui	r3,32768
   42ca4:	10bc000c 	andi	r2,r2,61440
   42ca8:	14c80020 	cmpeqi	r19,r2,8192
   42cac:	10c03726 	beq	r2,r3,42d8c <__smakebuf_r+0x130>
   42cb0:	80c0030b 	ldhu	r3,12(r16)
   42cb4:	18c20014 	ori	r3,r3,2048
   42cb8:	80c0030d 	sth	r3,12(r16)
   42cbc:	00c80004 	movi	r3,8192
   42cc0:	10c0521e 	bne	r2,r3,42e0c <__smakebuf_r+0x1b0>
   42cc4:	8140038f 	ldh	r5,14(r16)
   42cc8:	8809883a 	mov	r4,r17
   42ccc:	0042ed40 	call	42ed4 <_isatty_r>
   42cd0:	10004c26 	beq	r2,zero,42e04 <__smakebuf_r+0x1a8>
   42cd4:	8080030b 	ldhu	r2,12(r16)
   42cd8:	80c010c4 	addi	r3,r16,67
   42cdc:	80c00015 	stw	r3,0(r16)
   42ce0:	10800054 	ori	r2,r2,1
   42ce4:	8080030d 	sth	r2,12(r16)
   42ce8:	00800044 	movi	r2,1
   42cec:	80c00415 	stw	r3,16(r16)
   42cf0:	80800515 	stw	r2,20(r16)
   42cf4:	04810004 	movi	r18,1024
   42cf8:	00000706 	br	42d18 <__smakebuf_r+0xbc>
   42cfc:	8080030b 	ldhu	r2,12(r16)
   42d00:	10c0200c 	andi	r3,r2,128
   42d04:	18001f1e 	bne	r3,zero,42d84 <__smakebuf_r+0x128>
   42d08:	04810004 	movi	r18,1024
   42d0c:	10820014 	ori	r2,r2,2048
   42d10:	8080030d 	sth	r2,12(r16)
   42d14:	0027883a 	mov	r19,zero
   42d18:	900b883a 	mov	r5,r18
   42d1c:	8809883a 	mov	r4,r17
   42d20:	0040e640 	call	40e64 <_malloc_r>
   42d24:	10002c26 	beq	r2,zero,42dd8 <__smakebuf_r+0x17c>
   42d28:	80c0030b 	ldhu	r3,12(r16)
   42d2c:	01000134 	movhi	r4,4
   42d30:	21011b04 	addi	r4,r4,1132
   42d34:	89000f15 	stw	r4,60(r17)
   42d38:	18c02014 	ori	r3,r3,128
   42d3c:	80c0030d 	sth	r3,12(r16)
   42d40:	80800015 	stw	r2,0(r16)
   42d44:	80800415 	stw	r2,16(r16)
   42d48:	84800515 	stw	r18,20(r16)
   42d4c:	98001a1e 	bne	r19,zero,42db8 <__smakebuf_r+0x15c>
   42d50:	dfc01317 	ldw	ra,76(sp)
   42d54:	dcc01217 	ldw	r19,72(sp)
   42d58:	dc801117 	ldw	r18,68(sp)
   42d5c:	dc401017 	ldw	r17,64(sp)
   42d60:	dc000f17 	ldw	r16,60(sp)
   42d64:	dec01404 	addi	sp,sp,80
   42d68:	f800283a 	ret
   42d6c:	288010c4 	addi	r2,r5,67
   42d70:	28800015 	stw	r2,0(r5)
   42d74:	28800415 	stw	r2,16(r5)
   42d78:	00800044 	movi	r2,1
   42d7c:	28800515 	stw	r2,20(r5)
   42d80:	f800283a 	ret
   42d84:	04801004 	movi	r18,64
   42d88:	003fe006 	br	42d0c <__alt_data_end+0xfffd0d0c>
   42d8c:	81000a17 	ldw	r4,40(r16)
   42d90:	00c00134 	movhi	r3,4
   42d94:	18c86c04 	addi	r3,r3,8624
   42d98:	20ffc51e 	bne	r4,r3,42cb0 <__alt_data_end+0xfffd0cb0>
   42d9c:	8080030b 	ldhu	r2,12(r16)
   42da0:	04810004 	movi	r18,1024
   42da4:	84801315 	stw	r18,76(r16)
   42da8:	1484b03a 	or	r2,r2,r18
   42dac:	8080030d 	sth	r2,12(r16)
   42db0:	0027883a 	mov	r19,zero
   42db4:	003fd806 	br	42d18 <__alt_data_end+0xfffd0d18>
   42db8:	8140038f 	ldh	r5,14(r16)
   42dbc:	8809883a 	mov	r4,r17
   42dc0:	0042ed40 	call	42ed4 <_isatty_r>
   42dc4:	103fe226 	beq	r2,zero,42d50 <__alt_data_end+0xfffd0d50>
   42dc8:	8080030b 	ldhu	r2,12(r16)
   42dcc:	10800054 	ori	r2,r2,1
   42dd0:	8080030d 	sth	r2,12(r16)
   42dd4:	003fde06 	br	42d50 <__alt_data_end+0xfffd0d50>
   42dd8:	8080030b 	ldhu	r2,12(r16)
   42ddc:	10c0800c 	andi	r3,r2,512
   42de0:	183fdb1e 	bne	r3,zero,42d50 <__alt_data_end+0xfffd0d50>
   42de4:	10800094 	ori	r2,r2,2
   42de8:	80c010c4 	addi	r3,r16,67
   42dec:	8080030d 	sth	r2,12(r16)
   42df0:	00800044 	movi	r2,1
   42df4:	80c00015 	stw	r3,0(r16)
   42df8:	80c00415 	stw	r3,16(r16)
   42dfc:	80800515 	stw	r2,20(r16)
   42e00:	003fd306 	br	42d50 <__alt_data_end+0xfffd0d50>
   42e04:	04810004 	movi	r18,1024
   42e08:	003fc306 	br	42d18 <__alt_data_end+0xfffd0d18>
   42e0c:	0027883a 	mov	r19,zero
   42e10:	04810004 	movi	r18,1024
   42e14:	003fc006 	br	42d18 <__alt_data_end+0xfffd0d18>

00042e18 <_read_r>:
   42e18:	defffd04 	addi	sp,sp,-12
   42e1c:	2805883a 	mov	r2,r5
   42e20:	dc000015 	stw	r16,0(sp)
   42e24:	04000174 	movhi	r16,5
   42e28:	dc400115 	stw	r17,4(sp)
   42e2c:	300b883a 	mov	r5,r6
   42e30:	84233604 	addi	r16,r16,-29480
   42e34:	2023883a 	mov	r17,r4
   42e38:	380d883a 	mov	r6,r7
   42e3c:	1009883a 	mov	r4,r2
   42e40:	dfc00215 	stw	ra,8(sp)
   42e44:	80000015 	stw	zero,0(r16)
   42e48:	00437240 	call	43724 <read>
   42e4c:	00ffffc4 	movi	r3,-1
   42e50:	10c00526 	beq	r2,r3,42e68 <_read_r+0x50>
   42e54:	dfc00217 	ldw	ra,8(sp)
   42e58:	dc400117 	ldw	r17,4(sp)
   42e5c:	dc000017 	ldw	r16,0(sp)
   42e60:	dec00304 	addi	sp,sp,12
   42e64:	f800283a 	ret
   42e68:	80c00017 	ldw	r3,0(r16)
   42e6c:	183ff926 	beq	r3,zero,42e54 <__alt_data_end+0xfffd0e54>
   42e70:	88c00015 	stw	r3,0(r17)
   42e74:	003ff706 	br	42e54 <__alt_data_end+0xfffd0e54>

00042e78 <_fstat_r>:
   42e78:	defffd04 	addi	sp,sp,-12
   42e7c:	2805883a 	mov	r2,r5
   42e80:	dc000015 	stw	r16,0(sp)
   42e84:	04000174 	movhi	r16,5
   42e88:	dc400115 	stw	r17,4(sp)
   42e8c:	84233604 	addi	r16,r16,-29480
   42e90:	2023883a 	mov	r17,r4
   42e94:	300b883a 	mov	r5,r6
   42e98:	1009883a 	mov	r4,r2
   42e9c:	dfc00215 	stw	ra,8(sp)
   42ea0:	80000015 	stw	zero,0(r16)
   42ea4:	00432800 	call	43280 <fstat>
   42ea8:	00ffffc4 	movi	r3,-1
   42eac:	10c00526 	beq	r2,r3,42ec4 <_fstat_r+0x4c>
   42eb0:	dfc00217 	ldw	ra,8(sp)
   42eb4:	dc400117 	ldw	r17,4(sp)
   42eb8:	dc000017 	ldw	r16,0(sp)
   42ebc:	dec00304 	addi	sp,sp,12
   42ec0:	f800283a 	ret
   42ec4:	80c00017 	ldw	r3,0(r16)
   42ec8:	183ff926 	beq	r3,zero,42eb0 <__alt_data_end+0xfffd0eb0>
   42ecc:	88c00015 	stw	r3,0(r17)
   42ed0:	003ff706 	br	42eb0 <__alt_data_end+0xfffd0eb0>

00042ed4 <_isatty_r>:
   42ed4:	defffd04 	addi	sp,sp,-12
   42ed8:	dc000015 	stw	r16,0(sp)
   42edc:	04000174 	movhi	r16,5
   42ee0:	dc400115 	stw	r17,4(sp)
   42ee4:	84233604 	addi	r16,r16,-29480
   42ee8:	2023883a 	mov	r17,r4
   42eec:	2809883a 	mov	r4,r5
   42ef0:	dfc00215 	stw	ra,8(sp)
   42ef4:	80000015 	stw	zero,0(r16)
   42ef8:	00433740 	call	43374 <isatty>
   42efc:	00ffffc4 	movi	r3,-1
   42f00:	10c00526 	beq	r2,r3,42f18 <_isatty_r+0x44>
   42f04:	dfc00217 	ldw	ra,8(sp)
   42f08:	dc400117 	ldw	r17,4(sp)
   42f0c:	dc000017 	ldw	r16,0(sp)
   42f10:	dec00304 	addi	sp,sp,12
   42f14:	f800283a 	ret
   42f18:	80c00017 	ldw	r3,0(r16)
   42f1c:	183ff926 	beq	r3,zero,42f04 <__alt_data_end+0xfffd0f04>
   42f20:	88c00015 	stw	r3,0(r17)
   42f24:	003ff706 	br	42f04 <__alt_data_end+0xfffd0f04>

00042f28 <__divsi3>:
   42f28:	20001b16 	blt	r4,zero,42f98 <__divsi3+0x70>
   42f2c:	000f883a 	mov	r7,zero
   42f30:	28001616 	blt	r5,zero,42f8c <__divsi3+0x64>
   42f34:	200d883a 	mov	r6,r4
   42f38:	29001a2e 	bgeu	r5,r4,42fa4 <__divsi3+0x7c>
   42f3c:	00800804 	movi	r2,32
   42f40:	00c00044 	movi	r3,1
   42f44:	00000106 	br	42f4c <__divsi3+0x24>
   42f48:	10000d26 	beq	r2,zero,42f80 <__divsi3+0x58>
   42f4c:	294b883a 	add	r5,r5,r5
   42f50:	10bfffc4 	addi	r2,r2,-1
   42f54:	18c7883a 	add	r3,r3,r3
   42f58:	293ffb36 	bltu	r5,r4,42f48 <__alt_data_end+0xfffd0f48>
   42f5c:	0005883a 	mov	r2,zero
   42f60:	18000726 	beq	r3,zero,42f80 <__divsi3+0x58>
   42f64:	0005883a 	mov	r2,zero
   42f68:	31400236 	bltu	r6,r5,42f74 <__divsi3+0x4c>
   42f6c:	314dc83a 	sub	r6,r6,r5
   42f70:	10c4b03a 	or	r2,r2,r3
   42f74:	1806d07a 	srli	r3,r3,1
   42f78:	280ad07a 	srli	r5,r5,1
   42f7c:	183ffa1e 	bne	r3,zero,42f68 <__alt_data_end+0xfffd0f68>
   42f80:	38000126 	beq	r7,zero,42f88 <__divsi3+0x60>
   42f84:	0085c83a 	sub	r2,zero,r2
   42f88:	f800283a 	ret
   42f8c:	014bc83a 	sub	r5,zero,r5
   42f90:	39c0005c 	xori	r7,r7,1
   42f94:	003fe706 	br	42f34 <__alt_data_end+0xfffd0f34>
   42f98:	0109c83a 	sub	r4,zero,r4
   42f9c:	01c00044 	movi	r7,1
   42fa0:	003fe306 	br	42f30 <__alt_data_end+0xfffd0f30>
   42fa4:	00c00044 	movi	r3,1
   42fa8:	003fee06 	br	42f64 <__alt_data_end+0xfffd0f64>

00042fac <__modsi3>:
   42fac:	20001716 	blt	r4,zero,4300c <__modsi3+0x60>
   42fb0:	000f883a 	mov	r7,zero
   42fb4:	2005883a 	mov	r2,r4
   42fb8:	28001216 	blt	r5,zero,43004 <__modsi3+0x58>
   42fbc:	2900162e 	bgeu	r5,r4,43018 <__modsi3+0x6c>
   42fc0:	01800804 	movi	r6,32
   42fc4:	00c00044 	movi	r3,1
   42fc8:	00000106 	br	42fd0 <__modsi3+0x24>
   42fcc:	30000a26 	beq	r6,zero,42ff8 <__modsi3+0x4c>
   42fd0:	294b883a 	add	r5,r5,r5
   42fd4:	31bfffc4 	addi	r6,r6,-1
   42fd8:	18c7883a 	add	r3,r3,r3
   42fdc:	293ffb36 	bltu	r5,r4,42fcc <__alt_data_end+0xfffd0fcc>
   42fe0:	18000526 	beq	r3,zero,42ff8 <__modsi3+0x4c>
   42fe4:	1806d07a 	srli	r3,r3,1
   42fe8:	11400136 	bltu	r2,r5,42ff0 <__modsi3+0x44>
   42fec:	1145c83a 	sub	r2,r2,r5
   42ff0:	280ad07a 	srli	r5,r5,1
   42ff4:	183ffb1e 	bne	r3,zero,42fe4 <__alt_data_end+0xfffd0fe4>
   42ff8:	38000126 	beq	r7,zero,43000 <__modsi3+0x54>
   42ffc:	0085c83a 	sub	r2,zero,r2
   43000:	f800283a 	ret
   43004:	014bc83a 	sub	r5,zero,r5
   43008:	003fec06 	br	42fbc <__alt_data_end+0xfffd0fbc>
   4300c:	0109c83a 	sub	r4,zero,r4
   43010:	01c00044 	movi	r7,1
   43014:	003fe706 	br	42fb4 <__alt_data_end+0xfffd0fb4>
   43018:	00c00044 	movi	r3,1
   4301c:	003ff106 	br	42fe4 <__alt_data_end+0xfffd0fe4>

00043020 <__udivsi3>:
   43020:	200d883a 	mov	r6,r4
   43024:	2900152e 	bgeu	r5,r4,4307c <__udivsi3+0x5c>
   43028:	28001416 	blt	r5,zero,4307c <__udivsi3+0x5c>
   4302c:	00800804 	movi	r2,32
   43030:	00c00044 	movi	r3,1
   43034:	00000206 	br	43040 <__udivsi3+0x20>
   43038:	10000e26 	beq	r2,zero,43074 <__udivsi3+0x54>
   4303c:	28000516 	blt	r5,zero,43054 <__udivsi3+0x34>
   43040:	294b883a 	add	r5,r5,r5
   43044:	10bfffc4 	addi	r2,r2,-1
   43048:	18c7883a 	add	r3,r3,r3
   4304c:	293ffa36 	bltu	r5,r4,43038 <__alt_data_end+0xfffd1038>
   43050:	18000826 	beq	r3,zero,43074 <__udivsi3+0x54>
   43054:	0005883a 	mov	r2,zero
   43058:	31400236 	bltu	r6,r5,43064 <__udivsi3+0x44>
   4305c:	314dc83a 	sub	r6,r6,r5
   43060:	10c4b03a 	or	r2,r2,r3
   43064:	1806d07a 	srli	r3,r3,1
   43068:	280ad07a 	srli	r5,r5,1
   4306c:	183ffa1e 	bne	r3,zero,43058 <__alt_data_end+0xfffd1058>
   43070:	f800283a 	ret
   43074:	0005883a 	mov	r2,zero
   43078:	f800283a 	ret
   4307c:	00c00044 	movi	r3,1
   43080:	003ff406 	br	43054 <__alt_data_end+0xfffd1054>

00043084 <__umodsi3>:
   43084:	2005883a 	mov	r2,r4
   43088:	2900122e 	bgeu	r5,r4,430d4 <__umodsi3+0x50>
   4308c:	28001116 	blt	r5,zero,430d4 <__umodsi3+0x50>
   43090:	01800804 	movi	r6,32
   43094:	00c00044 	movi	r3,1
   43098:	00000206 	br	430a4 <__umodsi3+0x20>
   4309c:	30000c26 	beq	r6,zero,430d0 <__umodsi3+0x4c>
   430a0:	28000516 	blt	r5,zero,430b8 <__umodsi3+0x34>
   430a4:	294b883a 	add	r5,r5,r5
   430a8:	31bfffc4 	addi	r6,r6,-1
   430ac:	18c7883a 	add	r3,r3,r3
   430b0:	293ffa36 	bltu	r5,r4,4309c <__alt_data_end+0xfffd109c>
   430b4:	18000626 	beq	r3,zero,430d0 <__umodsi3+0x4c>
   430b8:	1806d07a 	srli	r3,r3,1
   430bc:	11400136 	bltu	r2,r5,430c4 <__umodsi3+0x40>
   430c0:	1145c83a 	sub	r2,r2,r5
   430c4:	280ad07a 	srli	r5,r5,1
   430c8:	183ffb1e 	bne	r3,zero,430b8 <__alt_data_end+0xfffd10b8>
   430cc:	f800283a 	ret
   430d0:	f800283a 	ret
   430d4:	00c00044 	movi	r3,1
   430d8:	003ff706 	br	430b8 <__alt_data_end+0xfffd10b8>

000430dc <__mulsi3>:
   430dc:	0005883a 	mov	r2,zero
   430e0:	20000726 	beq	r4,zero,43100 <__mulsi3+0x24>
   430e4:	20c0004c 	andi	r3,r4,1
   430e8:	2008d07a 	srli	r4,r4,1
   430ec:	18000126 	beq	r3,zero,430f4 <__mulsi3+0x18>
   430f0:	1145883a 	add	r2,r2,r5
   430f4:	294b883a 	add	r5,r5,r5
   430f8:	203ffa1e 	bne	r4,zero,430e4 <__alt_data_end+0xfffd10e4>
   430fc:	f800283a 	ret
   43100:	f800283a 	ret

00043104 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43104:	defffe04 	addi	sp,sp,-8
   43108:	dfc00115 	stw	ra,4(sp)
   4310c:	df000015 	stw	fp,0(sp)
   43110:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43114:	d0a00917 	ldw	r2,-32732(gp)
   43118:	10000326 	beq	r2,zero,43128 <alt_get_errno+0x24>
   4311c:	d0a00917 	ldw	r2,-32732(gp)
   43120:	103ee83a 	callr	r2
   43124:	00000106 	br	4312c <alt_get_errno+0x28>
   43128:	d0a6ac04 	addi	r2,gp,-25936
}
   4312c:	e037883a 	mov	sp,fp
   43130:	dfc00117 	ldw	ra,4(sp)
   43134:	df000017 	ldw	fp,0(sp)
   43138:	dec00204 	addi	sp,sp,8
   4313c:	f800283a 	ret

00043140 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   43140:	defffb04 	addi	sp,sp,-20
   43144:	dfc00415 	stw	ra,16(sp)
   43148:	df000315 	stw	fp,12(sp)
   4314c:	df000304 	addi	fp,sp,12
   43150:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   43154:	e0bfff17 	ldw	r2,-4(fp)
   43158:	10000816 	blt	r2,zero,4317c <close+0x3c>
   4315c:	01400304 	movi	r5,12
   43160:	e13fff17 	ldw	r4,-4(fp)
   43164:	00430dc0 	call	430dc <__mulsi3>
   43168:	1007883a 	mov	r3,r2
   4316c:	00800134 	movhi	r2,4
   43170:	10981204 	addi	r2,r2,24648
   43174:	1885883a 	add	r2,r3,r2
   43178:	00000106 	br	43180 <close+0x40>
   4317c:	0005883a 	mov	r2,zero
   43180:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   43184:	e0bffd17 	ldw	r2,-12(fp)
   43188:	10001926 	beq	r2,zero,431f0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4318c:	e0bffd17 	ldw	r2,-12(fp)
   43190:	10800017 	ldw	r2,0(r2)
   43194:	10800417 	ldw	r2,16(r2)
   43198:	10000626 	beq	r2,zero,431b4 <close+0x74>
   4319c:	e0bffd17 	ldw	r2,-12(fp)
   431a0:	10800017 	ldw	r2,0(r2)
   431a4:	10800417 	ldw	r2,16(r2)
   431a8:	e13ffd17 	ldw	r4,-12(fp)
   431ac:	103ee83a 	callr	r2
   431b0:	00000106 	br	431b8 <close+0x78>
   431b4:	0005883a 	mov	r2,zero
   431b8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   431bc:	e13fff17 	ldw	r4,-4(fp)
   431c0:	00438280 	call	43828 <alt_release_fd>
    if (rval < 0)
   431c4:	e0bffe17 	ldw	r2,-8(fp)
   431c8:	1000070e 	bge	r2,zero,431e8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   431cc:	00431040 	call	43104 <alt_get_errno>
   431d0:	1007883a 	mov	r3,r2
   431d4:	e0bffe17 	ldw	r2,-8(fp)
   431d8:	0085c83a 	sub	r2,zero,r2
   431dc:	18800015 	stw	r2,0(r3)
      return -1;
   431e0:	00bfffc4 	movi	r2,-1
   431e4:	00000706 	br	43204 <close+0xc4>
    }
    return 0;
   431e8:	0005883a 	mov	r2,zero
   431ec:	00000506 	br	43204 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   431f0:	00431040 	call	43104 <alt_get_errno>
   431f4:	1007883a 	mov	r3,r2
   431f8:	00801444 	movi	r2,81
   431fc:	18800015 	stw	r2,0(r3)
    return -1;
   43200:	00bfffc4 	movi	r2,-1
  }
}
   43204:	e037883a 	mov	sp,fp
   43208:	dfc00117 	ldw	ra,4(sp)
   4320c:	df000017 	ldw	fp,0(sp)
   43210:	dec00204 	addi	sp,sp,8
   43214:	f800283a 	ret

00043218 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   43218:	defffc04 	addi	sp,sp,-16
   4321c:	df000315 	stw	fp,12(sp)
   43220:	df000304 	addi	fp,sp,12
   43224:	e13ffd15 	stw	r4,-12(fp)
   43228:	e17ffe15 	stw	r5,-8(fp)
   4322c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   43230:	e0bfff17 	ldw	r2,-4(fp)
}
   43234:	e037883a 	mov	sp,fp
   43238:	df000017 	ldw	fp,0(sp)
   4323c:	dec00104 	addi	sp,sp,4
   43240:	f800283a 	ret

00043244 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43244:	defffe04 	addi	sp,sp,-8
   43248:	dfc00115 	stw	ra,4(sp)
   4324c:	df000015 	stw	fp,0(sp)
   43250:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43254:	d0a00917 	ldw	r2,-32732(gp)
   43258:	10000326 	beq	r2,zero,43268 <alt_get_errno+0x24>
   4325c:	d0a00917 	ldw	r2,-32732(gp)
   43260:	103ee83a 	callr	r2
   43264:	00000106 	br	4326c <alt_get_errno+0x28>
   43268:	d0a6ac04 	addi	r2,gp,-25936
}
   4326c:	e037883a 	mov	sp,fp
   43270:	dfc00117 	ldw	ra,4(sp)
   43274:	df000017 	ldw	fp,0(sp)
   43278:	dec00204 	addi	sp,sp,8
   4327c:	f800283a 	ret

00043280 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   43280:	defffb04 	addi	sp,sp,-20
   43284:	dfc00415 	stw	ra,16(sp)
   43288:	df000315 	stw	fp,12(sp)
   4328c:	df000304 	addi	fp,sp,12
   43290:	e13ffe15 	stw	r4,-8(fp)
   43294:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43298:	e0bffe17 	ldw	r2,-8(fp)
   4329c:	10000816 	blt	r2,zero,432c0 <fstat+0x40>
   432a0:	01400304 	movi	r5,12
   432a4:	e13ffe17 	ldw	r4,-8(fp)
   432a8:	00430dc0 	call	430dc <__mulsi3>
   432ac:	1007883a 	mov	r3,r2
   432b0:	00800134 	movhi	r2,4
   432b4:	10981204 	addi	r2,r2,24648
   432b8:	1885883a 	add	r2,r3,r2
   432bc:	00000106 	br	432c4 <fstat+0x44>
   432c0:	0005883a 	mov	r2,zero
   432c4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   432c8:	e0bffd17 	ldw	r2,-12(fp)
   432cc:	10001026 	beq	r2,zero,43310 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   432d0:	e0bffd17 	ldw	r2,-12(fp)
   432d4:	10800017 	ldw	r2,0(r2)
   432d8:	10800817 	ldw	r2,32(r2)
   432dc:	10000726 	beq	r2,zero,432fc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   432e0:	e0bffd17 	ldw	r2,-12(fp)
   432e4:	10800017 	ldw	r2,0(r2)
   432e8:	10800817 	ldw	r2,32(r2)
   432ec:	e17fff17 	ldw	r5,-4(fp)
   432f0:	e13ffd17 	ldw	r4,-12(fp)
   432f4:	103ee83a 	callr	r2
   432f8:	00000a06 	br	43324 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   432fc:	e0bfff17 	ldw	r2,-4(fp)
   43300:	00c80004 	movi	r3,8192
   43304:	10c00115 	stw	r3,4(r2)
      return 0;
   43308:	0005883a 	mov	r2,zero
   4330c:	00000506 	br	43324 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43310:	00432440 	call	43244 <alt_get_errno>
   43314:	1007883a 	mov	r3,r2
   43318:	00801444 	movi	r2,81
   4331c:	18800015 	stw	r2,0(r3)
    return -1;
   43320:	00bfffc4 	movi	r2,-1
  }
}
   43324:	e037883a 	mov	sp,fp
   43328:	dfc00117 	ldw	ra,4(sp)
   4332c:	df000017 	ldw	fp,0(sp)
   43330:	dec00204 	addi	sp,sp,8
   43334:	f800283a 	ret

00043338 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43338:	defffe04 	addi	sp,sp,-8
   4333c:	dfc00115 	stw	ra,4(sp)
   43340:	df000015 	stw	fp,0(sp)
   43344:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43348:	d0a00917 	ldw	r2,-32732(gp)
   4334c:	10000326 	beq	r2,zero,4335c <alt_get_errno+0x24>
   43350:	d0a00917 	ldw	r2,-32732(gp)
   43354:	103ee83a 	callr	r2
   43358:	00000106 	br	43360 <alt_get_errno+0x28>
   4335c:	d0a6ac04 	addi	r2,gp,-25936
}
   43360:	e037883a 	mov	sp,fp
   43364:	dfc00117 	ldw	ra,4(sp)
   43368:	df000017 	ldw	fp,0(sp)
   4336c:	dec00204 	addi	sp,sp,8
   43370:	f800283a 	ret

00043374 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   43374:	deffed04 	addi	sp,sp,-76
   43378:	dfc01215 	stw	ra,72(sp)
   4337c:	df001115 	stw	fp,68(sp)
   43380:	df001104 	addi	fp,sp,68
   43384:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43388:	e0bfff17 	ldw	r2,-4(fp)
   4338c:	10000816 	blt	r2,zero,433b0 <isatty+0x3c>
   43390:	01400304 	movi	r5,12
   43394:	e13fff17 	ldw	r4,-4(fp)
   43398:	00430dc0 	call	430dc <__mulsi3>
   4339c:	1007883a 	mov	r3,r2
   433a0:	00800134 	movhi	r2,4
   433a4:	10981204 	addi	r2,r2,24648
   433a8:	1885883a 	add	r2,r3,r2
   433ac:	00000106 	br	433b4 <isatty+0x40>
   433b0:	0005883a 	mov	r2,zero
   433b4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   433b8:	e0bfef17 	ldw	r2,-68(fp)
   433bc:	10000e26 	beq	r2,zero,433f8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   433c0:	e0bfef17 	ldw	r2,-68(fp)
   433c4:	10800017 	ldw	r2,0(r2)
   433c8:	10800817 	ldw	r2,32(r2)
   433cc:	1000021e 	bne	r2,zero,433d8 <isatty+0x64>
    {
      return 1;
   433d0:	00800044 	movi	r2,1
   433d4:	00000d06 	br	4340c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   433d8:	e0bff004 	addi	r2,fp,-64
   433dc:	100b883a 	mov	r5,r2
   433e0:	e13fff17 	ldw	r4,-4(fp)
   433e4:	00432800 	call	43280 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   433e8:	e0bff117 	ldw	r2,-60(fp)
   433ec:	10880020 	cmpeqi	r2,r2,8192
   433f0:	10803fcc 	andi	r2,r2,255
   433f4:	00000506 	br	4340c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   433f8:	00433380 	call	43338 <alt_get_errno>
   433fc:	1007883a 	mov	r3,r2
   43400:	00801444 	movi	r2,81
   43404:	18800015 	stw	r2,0(r3)
    return 0;
   43408:	0005883a 	mov	r2,zero
  }
}
   4340c:	e037883a 	mov	sp,fp
   43410:	dfc00117 	ldw	ra,4(sp)
   43414:	df000017 	ldw	fp,0(sp)
   43418:	dec00204 	addi	sp,sp,8
   4341c:	f800283a 	ret

00043420 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   43420:	defffc04 	addi	sp,sp,-16
   43424:	df000315 	stw	fp,12(sp)
   43428:	df000304 	addi	fp,sp,12
   4342c:	e13ffd15 	stw	r4,-12(fp)
   43430:	e17ffe15 	stw	r5,-8(fp)
   43434:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   43438:	e0fffe17 	ldw	r3,-8(fp)
   4343c:	e0bffd17 	ldw	r2,-12(fp)
   43440:	18800c26 	beq	r3,r2,43474 <alt_load_section+0x54>
  {
    while( to != end )
   43444:	00000806 	br	43468 <alt_load_section+0x48>
    {
      *to++ = *from++;
   43448:	e0bffe17 	ldw	r2,-8(fp)
   4344c:	10c00104 	addi	r3,r2,4
   43450:	e0fffe15 	stw	r3,-8(fp)
   43454:	e0fffd17 	ldw	r3,-12(fp)
   43458:	19000104 	addi	r4,r3,4
   4345c:	e13ffd15 	stw	r4,-12(fp)
   43460:	18c00017 	ldw	r3,0(r3)
   43464:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   43468:	e0fffe17 	ldw	r3,-8(fp)
   4346c:	e0bfff17 	ldw	r2,-4(fp)
   43470:	18bff51e 	bne	r3,r2,43448 <__alt_data_end+0xfffd1448>
    {
      *to++ = *from++;
    }
  }
}
   43474:	0001883a 	nop
   43478:	e037883a 	mov	sp,fp
   4347c:	df000017 	ldw	fp,0(sp)
   43480:	dec00104 	addi	sp,sp,4
   43484:	f800283a 	ret

00043488 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   43488:	defffe04 	addi	sp,sp,-8
   4348c:	dfc00115 	stw	ra,4(sp)
   43490:	df000015 	stw	fp,0(sp)
   43494:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   43498:	01800134 	movhi	r6,4
   4349c:	319c9804 	addi	r6,r6,29280
   434a0:	01400134 	movhi	r5,4
   434a4:	2955fd04 	addi	r5,r5,22516
   434a8:	01000134 	movhi	r4,4
   434ac:	211c9804 	addi	r4,r4,29280
   434b0:	00434200 	call	43420 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   434b4:	01800134 	movhi	r6,4
   434b8:	31808c04 	addi	r6,r6,560
   434bc:	01400134 	movhi	r5,4
   434c0:	29400804 	addi	r5,r5,32
   434c4:	01000134 	movhi	r4,4
   434c8:	21000804 	addi	r4,r4,32
   434cc:	00434200 	call	43420 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   434d0:	01800134 	movhi	r6,4
   434d4:	3195fd04 	addi	r6,r6,22516
   434d8:	01400134 	movhi	r5,4
   434dc:	2955e704 	addi	r5,r5,22428
   434e0:	01000134 	movhi	r4,4
   434e4:	2115e704 	addi	r4,r4,22428
   434e8:	00434200 	call	43420 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   434ec:	00446e40 	call	446e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   434f0:	00448a40 	call	448a4 <alt_icache_flush_all>
}
   434f4:	0001883a 	nop
   434f8:	e037883a 	mov	sp,fp
   434fc:	dfc00117 	ldw	ra,4(sp)
   43500:	df000017 	ldw	fp,0(sp)
   43504:	dec00204 	addi	sp,sp,8
   43508:	f800283a 	ret

0004350c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4350c:	defffe04 	addi	sp,sp,-8
   43510:	dfc00115 	stw	ra,4(sp)
   43514:	df000015 	stw	fp,0(sp)
   43518:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4351c:	d0a00917 	ldw	r2,-32732(gp)
   43520:	10000326 	beq	r2,zero,43530 <alt_get_errno+0x24>
   43524:	d0a00917 	ldw	r2,-32732(gp)
   43528:	103ee83a 	callr	r2
   4352c:	00000106 	br	43534 <alt_get_errno+0x28>
   43530:	d0a6ac04 	addi	r2,gp,-25936
}
   43534:	e037883a 	mov	sp,fp
   43538:	dfc00117 	ldw	ra,4(sp)
   4353c:	df000017 	ldw	fp,0(sp)
   43540:	dec00204 	addi	sp,sp,8
   43544:	f800283a 	ret

00043548 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   43548:	defff904 	addi	sp,sp,-28
   4354c:	dfc00615 	stw	ra,24(sp)
   43550:	df000515 	stw	fp,20(sp)
   43554:	df000504 	addi	fp,sp,20
   43558:	e13ffd15 	stw	r4,-12(fp)
   4355c:	e17ffe15 	stw	r5,-8(fp)
   43560:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   43564:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43568:	e0bffd17 	ldw	r2,-12(fp)
   4356c:	10000816 	blt	r2,zero,43590 <lseek+0x48>
   43570:	01400304 	movi	r5,12
   43574:	e13ffd17 	ldw	r4,-12(fp)
   43578:	00430dc0 	call	430dc <__mulsi3>
   4357c:	1007883a 	mov	r3,r2
   43580:	00800134 	movhi	r2,4
   43584:	10981204 	addi	r2,r2,24648
   43588:	1885883a 	add	r2,r3,r2
   4358c:	00000106 	br	43594 <lseek+0x4c>
   43590:	0005883a 	mov	r2,zero
   43594:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   43598:	e0bffc17 	ldw	r2,-16(fp)
   4359c:	10001026 	beq	r2,zero,435e0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   435a0:	e0bffc17 	ldw	r2,-16(fp)
   435a4:	10800017 	ldw	r2,0(r2)
   435a8:	10800717 	ldw	r2,28(r2)
   435ac:	10000926 	beq	r2,zero,435d4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   435b0:	e0bffc17 	ldw	r2,-16(fp)
   435b4:	10800017 	ldw	r2,0(r2)
   435b8:	10800717 	ldw	r2,28(r2)
   435bc:	e1bfff17 	ldw	r6,-4(fp)
   435c0:	e17ffe17 	ldw	r5,-8(fp)
   435c4:	e13ffc17 	ldw	r4,-16(fp)
   435c8:	103ee83a 	callr	r2
   435cc:	e0bffb15 	stw	r2,-20(fp)
   435d0:	00000506 	br	435e8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   435d4:	00bfde84 	movi	r2,-134
   435d8:	e0bffb15 	stw	r2,-20(fp)
   435dc:	00000206 	br	435e8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   435e0:	00bfebc4 	movi	r2,-81
   435e4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   435e8:	e0bffb17 	ldw	r2,-20(fp)
   435ec:	1000070e 	bge	r2,zero,4360c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   435f0:	004350c0 	call	4350c <alt_get_errno>
   435f4:	1007883a 	mov	r3,r2
   435f8:	e0bffb17 	ldw	r2,-20(fp)
   435fc:	0085c83a 	sub	r2,zero,r2
   43600:	18800015 	stw	r2,0(r3)
    rc = -1;
   43604:	00bfffc4 	movi	r2,-1
   43608:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4360c:	e0bffb17 	ldw	r2,-20(fp)
}
   43610:	e037883a 	mov	sp,fp
   43614:	dfc00117 	ldw	ra,4(sp)
   43618:	df000017 	ldw	fp,0(sp)
   4361c:	dec00204 	addi	sp,sp,8
   43620:	f800283a 	ret

00043624 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   43624:	defffd04 	addi	sp,sp,-12
   43628:	dfc00215 	stw	ra,8(sp)
   4362c:	df000115 	stw	fp,4(sp)
   43630:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   43634:	0009883a 	mov	r4,zero
   43638:	0043acc0 	call	43acc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4363c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   43640:	0043b040 	call	43b04 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   43644:	01800134 	movhi	r6,4
   43648:	3195f504 	addi	r6,r6,22484
   4364c:	01400134 	movhi	r5,4
   43650:	2955f504 	addi	r5,r5,22484
   43654:	01000134 	movhi	r4,4
   43658:	2115f504 	addi	r4,r4,22484
   4365c:	0044c480 	call	44c48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   43660:	00447e40 	call	447e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   43664:	01000134 	movhi	r4,4
   43668:	21121104 	addi	r4,r4,18500
   4366c:	00454080 	call	45408 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   43670:	d0a6ad17 	ldw	r2,-25932(gp)
   43674:	d0e6ae17 	ldw	r3,-25928(gp)
   43678:	d126af17 	ldw	r4,-25924(gp)
   4367c:	200d883a 	mov	r6,r4
   43680:	180b883a 	mov	r5,r3
   43684:	1009883a 	mov	r4,r2
   43688:	004026c0 	call	4026c <main>
   4368c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   43690:	01000044 	movi	r4,1
   43694:	00431400 	call	43140 <close>
  exit (result);
   43698:	e13fff17 	ldw	r4,-4(fp)
   4369c:	004541c0 	call	4541c <exit>

000436a0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   436a0:	defffe04 	addi	sp,sp,-8
   436a4:	df000115 	stw	fp,4(sp)
   436a8:	df000104 	addi	fp,sp,4
   436ac:	e13fff15 	stw	r4,-4(fp)
}
   436b0:	0001883a 	nop
   436b4:	e037883a 	mov	sp,fp
   436b8:	df000017 	ldw	fp,0(sp)
   436bc:	dec00104 	addi	sp,sp,4
   436c0:	f800283a 	ret

000436c4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   436c4:	defffe04 	addi	sp,sp,-8
   436c8:	df000115 	stw	fp,4(sp)
   436cc:	df000104 	addi	fp,sp,4
   436d0:	e13fff15 	stw	r4,-4(fp)
}
   436d4:	0001883a 	nop
   436d8:	e037883a 	mov	sp,fp
   436dc:	df000017 	ldw	fp,0(sp)
   436e0:	dec00104 	addi	sp,sp,4
   436e4:	f800283a 	ret

000436e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   436e8:	defffe04 	addi	sp,sp,-8
   436ec:	dfc00115 	stw	ra,4(sp)
   436f0:	df000015 	stw	fp,0(sp)
   436f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   436f8:	d0a00917 	ldw	r2,-32732(gp)
   436fc:	10000326 	beq	r2,zero,4370c <alt_get_errno+0x24>
   43700:	d0a00917 	ldw	r2,-32732(gp)
   43704:	103ee83a 	callr	r2
   43708:	00000106 	br	43710 <alt_get_errno+0x28>
   4370c:	d0a6ac04 	addi	r2,gp,-25936
}
   43710:	e037883a 	mov	sp,fp
   43714:	dfc00117 	ldw	ra,4(sp)
   43718:	df000017 	ldw	fp,0(sp)
   4371c:	dec00204 	addi	sp,sp,8
   43720:	f800283a 	ret

00043724 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   43724:	defff904 	addi	sp,sp,-28
   43728:	dfc00615 	stw	ra,24(sp)
   4372c:	df000515 	stw	fp,20(sp)
   43730:	df000504 	addi	fp,sp,20
   43734:	e13ffd15 	stw	r4,-12(fp)
   43738:	e17ffe15 	stw	r5,-8(fp)
   4373c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43740:	e0bffd17 	ldw	r2,-12(fp)
   43744:	10000816 	blt	r2,zero,43768 <read+0x44>
   43748:	01400304 	movi	r5,12
   4374c:	e13ffd17 	ldw	r4,-12(fp)
   43750:	00430dc0 	call	430dc <__mulsi3>
   43754:	1007883a 	mov	r3,r2
   43758:	00800134 	movhi	r2,4
   4375c:	10981204 	addi	r2,r2,24648
   43760:	1885883a 	add	r2,r3,r2
   43764:	00000106 	br	4376c <read+0x48>
   43768:	0005883a 	mov	r2,zero
   4376c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43770:	e0bffb17 	ldw	r2,-20(fp)
   43774:	10002226 	beq	r2,zero,43800 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43778:	e0bffb17 	ldw	r2,-20(fp)
   4377c:	10800217 	ldw	r2,8(r2)
   43780:	108000cc 	andi	r2,r2,3
   43784:	10800060 	cmpeqi	r2,r2,1
   43788:	1000181e 	bne	r2,zero,437ec <read+0xc8>
        (fd->dev->read))
   4378c:	e0bffb17 	ldw	r2,-20(fp)
   43790:	10800017 	ldw	r2,0(r2)
   43794:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43798:	10001426 	beq	r2,zero,437ec <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4379c:	e0bffb17 	ldw	r2,-20(fp)
   437a0:	10800017 	ldw	r2,0(r2)
   437a4:	10800517 	ldw	r2,20(r2)
   437a8:	e0ffff17 	ldw	r3,-4(fp)
   437ac:	180d883a 	mov	r6,r3
   437b0:	e17ffe17 	ldw	r5,-8(fp)
   437b4:	e13ffb17 	ldw	r4,-20(fp)
   437b8:	103ee83a 	callr	r2
   437bc:	e0bffc15 	stw	r2,-16(fp)
   437c0:	e0bffc17 	ldw	r2,-16(fp)
   437c4:	1000070e 	bge	r2,zero,437e4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   437c8:	00436e80 	call	436e8 <alt_get_errno>
   437cc:	1007883a 	mov	r3,r2
   437d0:	e0bffc17 	ldw	r2,-16(fp)
   437d4:	0085c83a 	sub	r2,zero,r2
   437d8:	18800015 	stw	r2,0(r3)
          return -1;
   437dc:	00bfffc4 	movi	r2,-1
   437e0:	00000c06 	br	43814 <read+0xf0>
        }
        return rval;
   437e4:	e0bffc17 	ldw	r2,-16(fp)
   437e8:	00000a06 	br	43814 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   437ec:	00436e80 	call	436e8 <alt_get_errno>
   437f0:	1007883a 	mov	r3,r2
   437f4:	00800344 	movi	r2,13
   437f8:	18800015 	stw	r2,0(r3)
   437fc:	00000406 	br	43810 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43800:	00436e80 	call	436e8 <alt_get_errno>
   43804:	1007883a 	mov	r3,r2
   43808:	00801444 	movi	r2,81
   4380c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43810:	00bfffc4 	movi	r2,-1
}
   43814:	e037883a 	mov	sp,fp
   43818:	dfc00117 	ldw	ra,4(sp)
   4381c:	df000017 	ldw	fp,0(sp)
   43820:	dec00204 	addi	sp,sp,8
   43824:	f800283a 	ret

00043828 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   43828:	defffc04 	addi	sp,sp,-16
   4382c:	dfc00315 	stw	ra,12(sp)
   43830:	df000215 	stw	fp,8(sp)
   43834:	dc000115 	stw	r16,4(sp)
   43838:	df000204 	addi	fp,sp,8
   4383c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   43840:	e0bffe17 	ldw	r2,-8(fp)
   43844:	108000d0 	cmplti	r2,r2,3
   43848:	1000111e 	bne	r2,zero,43890 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   4384c:	04000134 	movhi	r16,4
   43850:	84181204 	addi	r16,r16,24648
   43854:	e0bffe17 	ldw	r2,-8(fp)
   43858:	01400304 	movi	r5,12
   4385c:	1009883a 	mov	r4,r2
   43860:	00430dc0 	call	430dc <__mulsi3>
   43864:	8085883a 	add	r2,r16,r2
   43868:	10800204 	addi	r2,r2,8
   4386c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   43870:	04000134 	movhi	r16,4
   43874:	84181204 	addi	r16,r16,24648
   43878:	e0bffe17 	ldw	r2,-8(fp)
   4387c:	01400304 	movi	r5,12
   43880:	1009883a 	mov	r4,r2
   43884:	00430dc0 	call	430dc <__mulsi3>
   43888:	8085883a 	add	r2,r16,r2
   4388c:	10000015 	stw	zero,0(r2)
  }
}
   43890:	0001883a 	nop
   43894:	e6ffff04 	addi	sp,fp,-4
   43898:	dfc00217 	ldw	ra,8(sp)
   4389c:	df000117 	ldw	fp,4(sp)
   438a0:	dc000017 	ldw	r16,0(sp)
   438a4:	dec00304 	addi	sp,sp,12
   438a8:	f800283a 	ret

000438ac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   438ac:	defff904 	addi	sp,sp,-28
   438b0:	df000615 	stw	fp,24(sp)
   438b4:	df000604 	addi	fp,sp,24
   438b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   438bc:	0005303a 	rdctl	r2,status
   438c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   438c4:	e0fffe17 	ldw	r3,-8(fp)
   438c8:	00bfff84 	movi	r2,-2
   438cc:	1884703a 	and	r2,r3,r2
   438d0:	1001703a 	wrctl	status,r2
  
  return context;
   438d4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   438d8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   438dc:	d0a00a17 	ldw	r2,-32728(gp)
   438e0:	10c000c4 	addi	r3,r2,3
   438e4:	00bfff04 	movi	r2,-4
   438e8:	1884703a 	and	r2,r3,r2
   438ec:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   438f0:	d0e00a17 	ldw	r3,-32728(gp)
   438f4:	e0bfff17 	ldw	r2,-4(fp)
   438f8:	1887883a 	add	r3,r3,r2
   438fc:	008001f4 	movhi	r2,7
   43900:	10880004 	addi	r2,r2,8192
   43904:	10c0062e 	bgeu	r2,r3,43920 <sbrk+0x74>
   43908:	e0bffb17 	ldw	r2,-20(fp)
   4390c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43910:	e0bffa17 	ldw	r2,-24(fp)
   43914:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   43918:	00bfffc4 	movi	r2,-1
   4391c:	00000b06 	br	4394c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   43920:	d0a00a17 	ldw	r2,-32728(gp)
   43924:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   43928:	d0e00a17 	ldw	r3,-32728(gp)
   4392c:	e0bfff17 	ldw	r2,-4(fp)
   43930:	1885883a 	add	r2,r3,r2
   43934:	d0a00a15 	stw	r2,-32728(gp)
   43938:	e0bffb17 	ldw	r2,-20(fp)
   4393c:	e0bffc15 	stw	r2,-16(fp)
   43940:	e0bffc17 	ldw	r2,-16(fp)
   43944:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   43948:	e0bffd17 	ldw	r2,-12(fp)
} 
   4394c:	e037883a 	mov	sp,fp
   43950:	df000017 	ldw	fp,0(sp)
   43954:	dec00104 	addi	sp,sp,4
   43958:	f800283a 	ret

0004395c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4395c:	defffe04 	addi	sp,sp,-8
   43960:	dfc00115 	stw	ra,4(sp)
   43964:	df000015 	stw	fp,0(sp)
   43968:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4396c:	d0a00917 	ldw	r2,-32732(gp)
   43970:	10000326 	beq	r2,zero,43980 <alt_get_errno+0x24>
   43974:	d0a00917 	ldw	r2,-32732(gp)
   43978:	103ee83a 	callr	r2
   4397c:	00000106 	br	43984 <alt_get_errno+0x28>
   43980:	d0a6ac04 	addi	r2,gp,-25936
}
   43984:	e037883a 	mov	sp,fp
   43988:	dfc00117 	ldw	ra,4(sp)
   4398c:	df000017 	ldw	fp,0(sp)
   43990:	dec00204 	addi	sp,sp,8
   43994:	f800283a 	ret

00043998 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   43998:	defff904 	addi	sp,sp,-28
   4399c:	dfc00615 	stw	ra,24(sp)
   439a0:	df000515 	stw	fp,20(sp)
   439a4:	df000504 	addi	fp,sp,20
   439a8:	e13ffd15 	stw	r4,-12(fp)
   439ac:	e17ffe15 	stw	r5,-8(fp)
   439b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   439b4:	e0bffd17 	ldw	r2,-12(fp)
   439b8:	10000816 	blt	r2,zero,439dc <write+0x44>
   439bc:	01400304 	movi	r5,12
   439c0:	e13ffd17 	ldw	r4,-12(fp)
   439c4:	00430dc0 	call	430dc <__mulsi3>
   439c8:	1007883a 	mov	r3,r2
   439cc:	00800134 	movhi	r2,4
   439d0:	10981204 	addi	r2,r2,24648
   439d4:	1885883a 	add	r2,r3,r2
   439d8:	00000106 	br	439e0 <write+0x48>
   439dc:	0005883a 	mov	r2,zero
   439e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   439e4:	e0bffb17 	ldw	r2,-20(fp)
   439e8:	10002126 	beq	r2,zero,43a70 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   439ec:	e0bffb17 	ldw	r2,-20(fp)
   439f0:	10800217 	ldw	r2,8(r2)
   439f4:	108000cc 	andi	r2,r2,3
   439f8:	10001826 	beq	r2,zero,43a5c <write+0xc4>
   439fc:	e0bffb17 	ldw	r2,-20(fp)
   43a00:	10800017 	ldw	r2,0(r2)
   43a04:	10800617 	ldw	r2,24(r2)
   43a08:	10001426 	beq	r2,zero,43a5c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43a0c:	e0bffb17 	ldw	r2,-20(fp)
   43a10:	10800017 	ldw	r2,0(r2)
   43a14:	10800617 	ldw	r2,24(r2)
   43a18:	e0ffff17 	ldw	r3,-4(fp)
   43a1c:	180d883a 	mov	r6,r3
   43a20:	e17ffe17 	ldw	r5,-8(fp)
   43a24:	e13ffb17 	ldw	r4,-20(fp)
   43a28:	103ee83a 	callr	r2
   43a2c:	e0bffc15 	stw	r2,-16(fp)
   43a30:	e0bffc17 	ldw	r2,-16(fp)
   43a34:	1000070e 	bge	r2,zero,43a54 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   43a38:	004395c0 	call	4395c <alt_get_errno>
   43a3c:	1007883a 	mov	r3,r2
   43a40:	e0bffc17 	ldw	r2,-16(fp)
   43a44:	0085c83a 	sub	r2,zero,r2
   43a48:	18800015 	stw	r2,0(r3)
        return -1;
   43a4c:	00bfffc4 	movi	r2,-1
   43a50:	00000c06 	br	43a84 <write+0xec>
      }
      return rval;
   43a54:	e0bffc17 	ldw	r2,-16(fp)
   43a58:	00000a06 	br	43a84 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43a5c:	004395c0 	call	4395c <alt_get_errno>
   43a60:	1007883a 	mov	r3,r2
   43a64:	00800344 	movi	r2,13
   43a68:	18800015 	stw	r2,0(r3)
   43a6c:	00000406 	br	43a80 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43a70:	004395c0 	call	4395c <alt_get_errno>
   43a74:	1007883a 	mov	r3,r2
   43a78:	00801444 	movi	r2,81
   43a7c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43a80:	00bfffc4 	movi	r2,-1
}
   43a84:	e037883a 	mov	sp,fp
   43a88:	dfc00117 	ldw	ra,4(sp)
   43a8c:	df000017 	ldw	fp,0(sp)
   43a90:	dec00204 	addi	sp,sp,8
   43a94:	f800283a 	ret

00043a98 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   43a98:	defffd04 	addi	sp,sp,-12
   43a9c:	dfc00215 	stw	ra,8(sp)
   43aa0:	df000115 	stw	fp,4(sp)
   43aa4:	df000104 	addi	fp,sp,4
   43aa8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43aac:	d1600604 	addi	r5,gp,-32744
   43ab0:	e13fff17 	ldw	r4,-4(fp)
   43ab4:	00447400 	call	44740 <alt_dev_llist_insert>
}
   43ab8:	e037883a 	mov	sp,fp
   43abc:	dfc00117 	ldw	ra,4(sp)
   43ac0:	df000017 	ldw	fp,0(sp)
   43ac4:	dec00204 	addi	sp,sp,8
   43ac8:	f800283a 	ret

00043acc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43acc:	defffd04 	addi	sp,sp,-12
   43ad0:	dfc00215 	stw	ra,8(sp)
   43ad4:	df000115 	stw	fp,4(sp)
   43ad8:	df000104 	addi	fp,sp,4
   43adc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   43ae0:	00450ec0 	call	450ec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43ae4:	00800044 	movi	r2,1
   43ae8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43aec:	0001883a 	nop
   43af0:	e037883a 	mov	sp,fp
   43af4:	dfc00117 	ldw	ra,4(sp)
   43af8:	df000017 	ldw	fp,0(sp)
   43afc:	dec00204 	addi	sp,sp,8
   43b00:	f800283a 	ret

00043b04 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43b04:	defffe04 	addi	sp,sp,-8
   43b08:	dfc00115 	stw	ra,4(sp)
   43b0c:	df000015 	stw	fp,0(sp)
   43b10:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   43b14:	000d883a 	mov	r6,zero
   43b18:	000b883a 	mov	r5,zero
   43b1c:	01000134 	movhi	r4,4
   43b20:	21187c04 	addi	r4,r4,25072
   43b24:	0043cb40 	call	43cb4 <altera_avalon_jtag_uart_init>
   43b28:	01000134 	movhi	r4,4
   43b2c:	21187204 	addi	r4,r4,25032
   43b30:	0043a980 	call	43a98 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   43b34:	0001883a 	nop
}
   43b38:	0001883a 	nop
   43b3c:	e037883a 	mov	sp,fp
   43b40:	dfc00117 	ldw	ra,4(sp)
   43b44:	df000017 	ldw	fp,0(sp)
   43b48:	dec00204 	addi	sp,sp,8
   43b4c:	f800283a 	ret

00043b50 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43b50:	defffa04 	addi	sp,sp,-24
   43b54:	dfc00515 	stw	ra,20(sp)
   43b58:	df000415 	stw	fp,16(sp)
   43b5c:	df000404 	addi	fp,sp,16
   43b60:	e13ffd15 	stw	r4,-12(fp)
   43b64:	e17ffe15 	stw	r5,-8(fp)
   43b68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43b6c:	e0bffd17 	ldw	r2,-12(fp)
   43b70:	10800017 	ldw	r2,0(r2)
   43b74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43b78:	e0bffc17 	ldw	r2,-16(fp)
   43b7c:	10c00a04 	addi	r3,r2,40
   43b80:	e0bffd17 	ldw	r2,-12(fp)
   43b84:	10800217 	ldw	r2,8(r2)
   43b88:	100f883a 	mov	r7,r2
   43b8c:	e1bfff17 	ldw	r6,-4(fp)
   43b90:	e17ffe17 	ldw	r5,-8(fp)
   43b94:	1809883a 	mov	r4,r3
   43b98:	00441780 	call	44178 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   43b9c:	e037883a 	mov	sp,fp
   43ba0:	dfc00117 	ldw	ra,4(sp)
   43ba4:	df000017 	ldw	fp,0(sp)
   43ba8:	dec00204 	addi	sp,sp,8
   43bac:	f800283a 	ret

00043bb0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   43bb0:	defffa04 	addi	sp,sp,-24
   43bb4:	dfc00515 	stw	ra,20(sp)
   43bb8:	df000415 	stw	fp,16(sp)
   43bbc:	df000404 	addi	fp,sp,16
   43bc0:	e13ffd15 	stw	r4,-12(fp)
   43bc4:	e17ffe15 	stw	r5,-8(fp)
   43bc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43bcc:	e0bffd17 	ldw	r2,-12(fp)
   43bd0:	10800017 	ldw	r2,0(r2)
   43bd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43bd8:	e0bffc17 	ldw	r2,-16(fp)
   43bdc:	10c00a04 	addi	r3,r2,40
   43be0:	e0bffd17 	ldw	r2,-12(fp)
   43be4:	10800217 	ldw	r2,8(r2)
   43be8:	100f883a 	mov	r7,r2
   43bec:	e1bfff17 	ldw	r6,-4(fp)
   43bf0:	e17ffe17 	ldw	r5,-8(fp)
   43bf4:	1809883a 	mov	r4,r3
   43bf8:	00443940 	call	44394 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   43bfc:	e037883a 	mov	sp,fp
   43c00:	dfc00117 	ldw	ra,4(sp)
   43c04:	df000017 	ldw	fp,0(sp)
   43c08:	dec00204 	addi	sp,sp,8
   43c0c:	f800283a 	ret

00043c10 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   43c10:	defffc04 	addi	sp,sp,-16
   43c14:	dfc00315 	stw	ra,12(sp)
   43c18:	df000215 	stw	fp,8(sp)
   43c1c:	df000204 	addi	fp,sp,8
   43c20:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43c24:	e0bfff17 	ldw	r2,-4(fp)
   43c28:	10800017 	ldw	r2,0(r2)
   43c2c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   43c30:	e0bffe17 	ldw	r2,-8(fp)
   43c34:	10c00a04 	addi	r3,r2,40
   43c38:	e0bfff17 	ldw	r2,-4(fp)
   43c3c:	10800217 	ldw	r2,8(r2)
   43c40:	100b883a 	mov	r5,r2
   43c44:	1809883a 	mov	r4,r3
   43c48:	00440200 	call	44020 <altera_avalon_jtag_uart_close>
}
   43c4c:	e037883a 	mov	sp,fp
   43c50:	dfc00117 	ldw	ra,4(sp)
   43c54:	df000017 	ldw	fp,0(sp)
   43c58:	dec00204 	addi	sp,sp,8
   43c5c:	f800283a 	ret

00043c60 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   43c60:	defffa04 	addi	sp,sp,-24
   43c64:	dfc00515 	stw	ra,20(sp)
   43c68:	df000415 	stw	fp,16(sp)
   43c6c:	df000404 	addi	fp,sp,16
   43c70:	e13ffd15 	stw	r4,-12(fp)
   43c74:	e17ffe15 	stw	r5,-8(fp)
   43c78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   43c7c:	e0bffd17 	ldw	r2,-12(fp)
   43c80:	10800017 	ldw	r2,0(r2)
   43c84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   43c88:	e0bffc17 	ldw	r2,-16(fp)
   43c8c:	10800a04 	addi	r2,r2,40
   43c90:	e1bfff17 	ldw	r6,-4(fp)
   43c94:	e17ffe17 	ldw	r5,-8(fp)
   43c98:	1009883a 	mov	r4,r2
   43c9c:	00440880 	call	44088 <altera_avalon_jtag_uart_ioctl>
}
   43ca0:	e037883a 	mov	sp,fp
   43ca4:	dfc00117 	ldw	ra,4(sp)
   43ca8:	df000017 	ldw	fp,0(sp)
   43cac:	dec00204 	addi	sp,sp,8
   43cb0:	f800283a 	ret

00043cb4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   43cb4:	defffa04 	addi	sp,sp,-24
   43cb8:	dfc00515 	stw	ra,20(sp)
   43cbc:	df000415 	stw	fp,16(sp)
   43cc0:	df000404 	addi	fp,sp,16
   43cc4:	e13ffd15 	stw	r4,-12(fp)
   43cc8:	e17ffe15 	stw	r5,-8(fp)
   43ccc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43cd0:	e0bffd17 	ldw	r2,-12(fp)
   43cd4:	00c00044 	movi	r3,1
   43cd8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   43cdc:	e0bffd17 	ldw	r2,-12(fp)
   43ce0:	10800017 	ldw	r2,0(r2)
   43ce4:	10800104 	addi	r2,r2,4
   43ce8:	1007883a 	mov	r3,r2
   43cec:	e0bffd17 	ldw	r2,-12(fp)
   43cf0:	10800817 	ldw	r2,32(r2)
   43cf4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   43cf8:	e0bffe17 	ldw	r2,-8(fp)
   43cfc:	e0ffff17 	ldw	r3,-4(fp)
   43d00:	d8000015 	stw	zero,0(sp)
   43d04:	e1fffd17 	ldw	r7,-12(fp)
   43d08:	01800134 	movhi	r6,4
   43d0c:	318f5d04 	addi	r6,r6,15732
   43d10:	180b883a 	mov	r5,r3
   43d14:	1009883a 	mov	r4,r2
   43d18:	00448c40 	call	448c4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   43d1c:	e0bffd17 	ldw	r2,-12(fp)
   43d20:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   43d24:	e0bffd17 	ldw	r2,-12(fp)
   43d28:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   43d2c:	d0e6b117 	ldw	r3,-25916(gp)
   43d30:	e1fffd17 	ldw	r7,-12(fp)
   43d34:	01800134 	movhi	r6,4
   43d38:	318fe004 	addi	r6,r6,16256
   43d3c:	180b883a 	mov	r5,r3
   43d40:	1009883a 	mov	r4,r2
   43d44:	00445b80 	call	445b8 <alt_alarm_start>
   43d48:	1000040e 	bge	r2,zero,43d5c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   43d4c:	e0fffd17 	ldw	r3,-12(fp)
   43d50:	00a00034 	movhi	r2,32768
   43d54:	10bfffc4 	addi	r2,r2,-1
   43d58:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   43d5c:	0001883a 	nop
   43d60:	e037883a 	mov	sp,fp
   43d64:	dfc00117 	ldw	ra,4(sp)
   43d68:	df000017 	ldw	fp,0(sp)
   43d6c:	dec00204 	addi	sp,sp,8
   43d70:	f800283a 	ret

00043d74 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   43d74:	defff804 	addi	sp,sp,-32
   43d78:	df000715 	stw	fp,28(sp)
   43d7c:	df000704 	addi	fp,sp,28
   43d80:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   43d84:	e0bfff17 	ldw	r2,-4(fp)
   43d88:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   43d8c:	e0bffb17 	ldw	r2,-20(fp)
   43d90:	10800017 	ldw	r2,0(r2)
   43d94:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43d98:	e0bffc17 	ldw	r2,-16(fp)
   43d9c:	10800104 	addi	r2,r2,4
   43da0:	10800037 	ldwio	r2,0(r2)
   43da4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   43da8:	e0bffd17 	ldw	r2,-12(fp)
   43dac:	1080c00c 	andi	r2,r2,768
   43db0:	10006d26 	beq	r2,zero,43f68 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   43db4:	e0bffd17 	ldw	r2,-12(fp)
   43db8:	1080400c 	andi	r2,r2,256
   43dbc:	10003526 	beq	r2,zero,43e94 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   43dc0:	00800074 	movhi	r2,1
   43dc4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43dc8:	e0bffb17 	ldw	r2,-20(fp)
   43dcc:	10800a17 	ldw	r2,40(r2)
   43dd0:	10800044 	addi	r2,r2,1
   43dd4:	1081ffcc 	andi	r2,r2,2047
   43dd8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   43ddc:	e0bffb17 	ldw	r2,-20(fp)
   43de0:	10c00b17 	ldw	r3,44(r2)
   43de4:	e0bffe17 	ldw	r2,-8(fp)
   43de8:	18801526 	beq	r3,r2,43e40 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   43dec:	e0bffc17 	ldw	r2,-16(fp)
   43df0:	10800037 	ldwio	r2,0(r2)
   43df4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   43df8:	e0bff917 	ldw	r2,-28(fp)
   43dfc:	10a0000c 	andi	r2,r2,32768
   43e00:	10001126 	beq	r2,zero,43e48 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   43e04:	e0bffb17 	ldw	r2,-20(fp)
   43e08:	10800a17 	ldw	r2,40(r2)
   43e0c:	e0fff917 	ldw	r3,-28(fp)
   43e10:	1809883a 	mov	r4,r3
   43e14:	e0fffb17 	ldw	r3,-20(fp)
   43e18:	1885883a 	add	r2,r3,r2
   43e1c:	10800e04 	addi	r2,r2,56
   43e20:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43e24:	e0bffb17 	ldw	r2,-20(fp)
   43e28:	10800a17 	ldw	r2,40(r2)
   43e2c:	10800044 	addi	r2,r2,1
   43e30:	10c1ffcc 	andi	r3,r2,2047
   43e34:	e0bffb17 	ldw	r2,-20(fp)
   43e38:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   43e3c:	003fe206 	br	43dc8 <__alt_data_end+0xfffd1dc8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   43e40:	0001883a 	nop
   43e44:	00000106 	br	43e4c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   43e48:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   43e4c:	e0bff917 	ldw	r2,-28(fp)
   43e50:	10bfffec 	andhi	r2,r2,65535
   43e54:	10000f26 	beq	r2,zero,43e94 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43e58:	e0bffb17 	ldw	r2,-20(fp)
   43e5c:	10c00817 	ldw	r3,32(r2)
   43e60:	00bfff84 	movi	r2,-2
   43e64:	1886703a 	and	r3,r3,r2
   43e68:	e0bffb17 	ldw	r2,-20(fp)
   43e6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   43e70:	e0bffc17 	ldw	r2,-16(fp)
   43e74:	10800104 	addi	r2,r2,4
   43e78:	1007883a 	mov	r3,r2
   43e7c:	e0bffb17 	ldw	r2,-20(fp)
   43e80:	10800817 	ldw	r2,32(r2)
   43e84:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43e88:	e0bffc17 	ldw	r2,-16(fp)
   43e8c:	10800104 	addi	r2,r2,4
   43e90:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   43e94:	e0bffd17 	ldw	r2,-12(fp)
   43e98:	1080800c 	andi	r2,r2,512
   43e9c:	103fbe26 	beq	r2,zero,43d98 <__alt_data_end+0xfffd1d98>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   43ea0:	e0bffd17 	ldw	r2,-12(fp)
   43ea4:	1004d43a 	srli	r2,r2,16
   43ea8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   43eac:	00001406 	br	43f00 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   43eb0:	e0bffc17 	ldw	r2,-16(fp)
   43eb4:	e0fffb17 	ldw	r3,-20(fp)
   43eb8:	18c00d17 	ldw	r3,52(r3)
   43ebc:	e13ffb17 	ldw	r4,-20(fp)
   43ec0:	20c7883a 	add	r3,r4,r3
   43ec4:	18c20e04 	addi	r3,r3,2104
   43ec8:	18c00003 	ldbu	r3,0(r3)
   43ecc:	18c03fcc 	andi	r3,r3,255
   43ed0:	18c0201c 	xori	r3,r3,128
   43ed4:	18ffe004 	addi	r3,r3,-128
   43ed8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43edc:	e0bffb17 	ldw	r2,-20(fp)
   43ee0:	10800d17 	ldw	r2,52(r2)
   43ee4:	10800044 	addi	r2,r2,1
   43ee8:	10c1ffcc 	andi	r3,r2,2047
   43eec:	e0bffb17 	ldw	r2,-20(fp)
   43ef0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   43ef4:	e0bffa17 	ldw	r2,-24(fp)
   43ef8:	10bfffc4 	addi	r2,r2,-1
   43efc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   43f00:	e0bffa17 	ldw	r2,-24(fp)
   43f04:	10000526 	beq	r2,zero,43f1c <altera_avalon_jtag_uart_irq+0x1a8>
   43f08:	e0bffb17 	ldw	r2,-20(fp)
   43f0c:	10c00d17 	ldw	r3,52(r2)
   43f10:	e0bffb17 	ldw	r2,-20(fp)
   43f14:	10800c17 	ldw	r2,48(r2)
   43f18:	18bfe51e 	bne	r3,r2,43eb0 <__alt_data_end+0xfffd1eb0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   43f1c:	e0bffa17 	ldw	r2,-24(fp)
   43f20:	103f9d26 	beq	r2,zero,43d98 <__alt_data_end+0xfffd1d98>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   43f24:	e0bffb17 	ldw	r2,-20(fp)
   43f28:	10c00817 	ldw	r3,32(r2)
   43f2c:	00bfff44 	movi	r2,-3
   43f30:	1886703a 	and	r3,r3,r2
   43f34:	e0bffb17 	ldw	r2,-20(fp)
   43f38:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   43f3c:	e0bffb17 	ldw	r2,-20(fp)
   43f40:	10800017 	ldw	r2,0(r2)
   43f44:	10800104 	addi	r2,r2,4
   43f48:	1007883a 	mov	r3,r2
   43f4c:	e0bffb17 	ldw	r2,-20(fp)
   43f50:	10800817 	ldw	r2,32(r2)
   43f54:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43f58:	e0bffc17 	ldw	r2,-16(fp)
   43f5c:	10800104 	addi	r2,r2,4
   43f60:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   43f64:	003f8c06 	br	43d98 <__alt_data_end+0xfffd1d98>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   43f68:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   43f6c:	0001883a 	nop
   43f70:	e037883a 	mov	sp,fp
   43f74:	df000017 	ldw	fp,0(sp)
   43f78:	dec00104 	addi	sp,sp,4
   43f7c:	f800283a 	ret

00043f80 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   43f80:	defff804 	addi	sp,sp,-32
   43f84:	df000715 	stw	fp,28(sp)
   43f88:	df000704 	addi	fp,sp,28
   43f8c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   43f90:	e0bffb17 	ldw	r2,-20(fp)
   43f94:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   43f98:	e0bff917 	ldw	r2,-28(fp)
   43f9c:	10800017 	ldw	r2,0(r2)
   43fa0:	10800104 	addi	r2,r2,4
   43fa4:	10800037 	ldwio	r2,0(r2)
   43fa8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   43fac:	e0bffa17 	ldw	r2,-24(fp)
   43fb0:	1081000c 	andi	r2,r2,1024
   43fb4:	10000b26 	beq	r2,zero,43fe4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   43fb8:	e0bff917 	ldw	r2,-28(fp)
   43fbc:	10800017 	ldw	r2,0(r2)
   43fc0:	10800104 	addi	r2,r2,4
   43fc4:	1007883a 	mov	r3,r2
   43fc8:	e0bff917 	ldw	r2,-28(fp)
   43fcc:	10800817 	ldw	r2,32(r2)
   43fd0:	10810014 	ori	r2,r2,1024
   43fd4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   43fd8:	e0bff917 	ldw	r2,-28(fp)
   43fdc:	10000915 	stw	zero,36(r2)
   43fe0:	00000a06 	br	4400c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   43fe4:	e0bff917 	ldw	r2,-28(fp)
   43fe8:	10c00917 	ldw	r3,36(r2)
   43fec:	00a00034 	movhi	r2,32768
   43ff0:	10bfff04 	addi	r2,r2,-4
   43ff4:	10c00536 	bltu	r2,r3,4400c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   43ff8:	e0bff917 	ldw	r2,-28(fp)
   43ffc:	10800917 	ldw	r2,36(r2)
   44000:	10c00044 	addi	r3,r2,1
   44004:	e0bff917 	ldw	r2,-28(fp)
   44008:	10c00915 	stw	r3,36(r2)
   4400c:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   44010:	e037883a 	mov	sp,fp
   44014:	df000017 	ldw	fp,0(sp)
   44018:	dec00104 	addi	sp,sp,4
   4401c:	f800283a 	ret

00044020 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   44020:	defffd04 	addi	sp,sp,-12
   44024:	df000215 	stw	fp,8(sp)
   44028:	df000204 	addi	fp,sp,8
   4402c:	e13ffe15 	stw	r4,-8(fp)
   44030:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   44034:	00000506 	br	4404c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   44038:	e0bfff17 	ldw	r2,-4(fp)
   4403c:	1090000c 	andi	r2,r2,16384
   44040:	10000226 	beq	r2,zero,4404c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   44044:	00bffd44 	movi	r2,-11
   44048:	00000b06 	br	44078 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4404c:	e0bffe17 	ldw	r2,-8(fp)
   44050:	10c00d17 	ldw	r3,52(r2)
   44054:	e0bffe17 	ldw	r2,-8(fp)
   44058:	10800c17 	ldw	r2,48(r2)
   4405c:	18800526 	beq	r3,r2,44074 <altera_avalon_jtag_uart_close+0x54>
   44060:	e0bffe17 	ldw	r2,-8(fp)
   44064:	10c00917 	ldw	r3,36(r2)
   44068:	e0bffe17 	ldw	r2,-8(fp)
   4406c:	10800117 	ldw	r2,4(r2)
   44070:	18bff136 	bltu	r3,r2,44038 <__alt_data_end+0xfffd2038>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   44074:	0005883a 	mov	r2,zero
}
   44078:	e037883a 	mov	sp,fp
   4407c:	df000017 	ldw	fp,0(sp)
   44080:	dec00104 	addi	sp,sp,4
   44084:	f800283a 	ret

00044088 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   44088:	defffa04 	addi	sp,sp,-24
   4408c:	df000515 	stw	fp,20(sp)
   44090:	df000504 	addi	fp,sp,20
   44094:	e13ffd15 	stw	r4,-12(fp)
   44098:	e17ffe15 	stw	r5,-8(fp)
   4409c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   440a0:	00bff9c4 	movi	r2,-25
   440a4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   440a8:	e0bffe17 	ldw	r2,-8(fp)
   440ac:	10da8060 	cmpeqi	r3,r2,27137
   440b0:	1800031e 	bne	r3,zero,440c0 <altera_avalon_jtag_uart_ioctl+0x38>
   440b4:	109a80a0 	cmpeqi	r2,r2,27138
   440b8:	1000181e 	bne	r2,zero,4411c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   440bc:	00002906 	br	44164 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   440c0:	e0bffd17 	ldw	r2,-12(fp)
   440c4:	10c00117 	ldw	r3,4(r2)
   440c8:	00a00034 	movhi	r2,32768
   440cc:	10bfffc4 	addi	r2,r2,-1
   440d0:	18802126 	beq	r3,r2,44158 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   440d4:	e0bfff17 	ldw	r2,-4(fp)
   440d8:	10800017 	ldw	r2,0(r2)
   440dc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   440e0:	e0bffc17 	ldw	r2,-16(fp)
   440e4:	10800090 	cmplti	r2,r2,2
   440e8:	1000061e 	bne	r2,zero,44104 <altera_avalon_jtag_uart_ioctl+0x7c>
   440ec:	e0fffc17 	ldw	r3,-16(fp)
   440f0:	00a00034 	movhi	r2,32768
   440f4:	10bfffc4 	addi	r2,r2,-1
   440f8:	18800226 	beq	r3,r2,44104 <altera_avalon_jtag_uart_ioctl+0x7c>
   440fc:	e0bffc17 	ldw	r2,-16(fp)
   44100:	00000206 	br	4410c <altera_avalon_jtag_uart_ioctl+0x84>
   44104:	00a00034 	movhi	r2,32768
   44108:	10bfff84 	addi	r2,r2,-2
   4410c:	e0fffd17 	ldw	r3,-12(fp)
   44110:	18800115 	stw	r2,4(r3)
      rc = 0;
   44114:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   44118:	00000f06 	br	44158 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4411c:	e0bffd17 	ldw	r2,-12(fp)
   44120:	10c00117 	ldw	r3,4(r2)
   44124:	00a00034 	movhi	r2,32768
   44128:	10bfffc4 	addi	r2,r2,-1
   4412c:	18800c26 	beq	r3,r2,44160 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   44130:	e0bffd17 	ldw	r2,-12(fp)
   44134:	10c00917 	ldw	r3,36(r2)
   44138:	e0bffd17 	ldw	r2,-12(fp)
   4413c:	10800117 	ldw	r2,4(r2)
   44140:	1885803a 	cmpltu	r2,r3,r2
   44144:	10c03fcc 	andi	r3,r2,255
   44148:	e0bfff17 	ldw	r2,-4(fp)
   4414c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   44150:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   44154:	00000206 	br	44160 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   44158:	0001883a 	nop
   4415c:	00000106 	br	44164 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   44160:	0001883a 	nop

  default:
    break;
  }

  return rc;
   44164:	e0bffb17 	ldw	r2,-20(fp)
}
   44168:	e037883a 	mov	sp,fp
   4416c:	df000017 	ldw	fp,0(sp)
   44170:	dec00104 	addi	sp,sp,4
   44174:	f800283a 	ret

00044178 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   44178:	defff304 	addi	sp,sp,-52
   4417c:	dfc00c15 	stw	ra,48(sp)
   44180:	df000b15 	stw	fp,44(sp)
   44184:	df000b04 	addi	fp,sp,44
   44188:	e13ffc15 	stw	r4,-16(fp)
   4418c:	e17ffd15 	stw	r5,-12(fp)
   44190:	e1bffe15 	stw	r6,-8(fp)
   44194:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   44198:	e0bffd17 	ldw	r2,-12(fp)
   4419c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   441a0:	00004706 	br	442c0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   441a4:	e0bffc17 	ldw	r2,-16(fp)
   441a8:	10800a17 	ldw	r2,40(r2)
   441ac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   441b0:	e0bffc17 	ldw	r2,-16(fp)
   441b4:	10800b17 	ldw	r2,44(r2)
   441b8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   441bc:	e0fff717 	ldw	r3,-36(fp)
   441c0:	e0bff817 	ldw	r2,-32(fp)
   441c4:	18800536 	bltu	r3,r2,441dc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   441c8:	e0fff717 	ldw	r3,-36(fp)
   441cc:	e0bff817 	ldw	r2,-32(fp)
   441d0:	1885c83a 	sub	r2,r3,r2
   441d4:	e0bff615 	stw	r2,-40(fp)
   441d8:	00000406 	br	441ec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   441dc:	00c20004 	movi	r3,2048
   441e0:	e0bff817 	ldw	r2,-32(fp)
   441e4:	1885c83a 	sub	r2,r3,r2
   441e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   441ec:	e0bff617 	ldw	r2,-40(fp)
   441f0:	10001e26 	beq	r2,zero,4426c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   441f4:	e0fffe17 	ldw	r3,-8(fp)
   441f8:	e0bff617 	ldw	r2,-40(fp)
   441fc:	1880022e 	bgeu	r3,r2,44208 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   44200:	e0bffe17 	ldw	r2,-8(fp)
   44204:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   44208:	e0bffc17 	ldw	r2,-16(fp)
   4420c:	10c00e04 	addi	r3,r2,56
   44210:	e0bff817 	ldw	r2,-32(fp)
   44214:	1885883a 	add	r2,r3,r2
   44218:	e1bff617 	ldw	r6,-40(fp)
   4421c:	100b883a 	mov	r5,r2
   44220:	e13ff517 	ldw	r4,-44(fp)
   44224:	00417540 	call	41754 <memcpy>
      ptr   += n;
   44228:	e0fff517 	ldw	r3,-44(fp)
   4422c:	e0bff617 	ldw	r2,-40(fp)
   44230:	1885883a 	add	r2,r3,r2
   44234:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   44238:	e0fffe17 	ldw	r3,-8(fp)
   4423c:	e0bff617 	ldw	r2,-40(fp)
   44240:	1885c83a 	sub	r2,r3,r2
   44244:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44248:	e0fff817 	ldw	r3,-32(fp)
   4424c:	e0bff617 	ldw	r2,-40(fp)
   44250:	1885883a 	add	r2,r3,r2
   44254:	10c1ffcc 	andi	r3,r2,2047
   44258:	e0bffc17 	ldw	r2,-16(fp)
   4425c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   44260:	e0bffe17 	ldw	r2,-8(fp)
   44264:	00bfcf16 	blt	zero,r2,441a4 <__alt_data_end+0xfffd21a4>
   44268:	00000106 	br	44270 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4426c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   44270:	e0fff517 	ldw	r3,-44(fp)
   44274:	e0bffd17 	ldw	r2,-12(fp)
   44278:	1880141e 	bne	r3,r2,442cc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4427c:	e0bfff17 	ldw	r2,-4(fp)
   44280:	1090000c 	andi	r2,r2,16384
   44284:	1000131e 	bne	r2,zero,442d4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   44288:	0001883a 	nop
   4428c:	e0bffc17 	ldw	r2,-16(fp)
   44290:	10c00a17 	ldw	r3,40(r2)
   44294:	e0bff717 	ldw	r2,-36(fp)
   44298:	1880051e 	bne	r3,r2,442b0 <altera_avalon_jtag_uart_read+0x138>
   4429c:	e0bffc17 	ldw	r2,-16(fp)
   442a0:	10c00917 	ldw	r3,36(r2)
   442a4:	e0bffc17 	ldw	r2,-16(fp)
   442a8:	10800117 	ldw	r2,4(r2)
   442ac:	18bff736 	bltu	r3,r2,4428c <__alt_data_end+0xfffd228c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   442b0:	e0bffc17 	ldw	r2,-16(fp)
   442b4:	10c00a17 	ldw	r3,40(r2)
   442b8:	e0bff717 	ldw	r2,-36(fp)
   442bc:	18800726 	beq	r3,r2,442dc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   442c0:	e0bffe17 	ldw	r2,-8(fp)
   442c4:	00bfb716 	blt	zero,r2,441a4 <__alt_data_end+0xfffd21a4>
   442c8:	00000506 	br	442e0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   442cc:	0001883a 	nop
   442d0:	00000306 	br	442e0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   442d4:	0001883a 	nop
   442d8:	00000106 	br	442e0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   442dc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   442e0:	e0fff517 	ldw	r3,-44(fp)
   442e4:	e0bffd17 	ldw	r2,-12(fp)
   442e8:	18801826 	beq	r3,r2,4434c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   442ec:	0005303a 	rdctl	r2,status
   442f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   442f4:	e0fffb17 	ldw	r3,-20(fp)
   442f8:	00bfff84 	movi	r2,-2
   442fc:	1884703a 	and	r2,r3,r2
   44300:	1001703a 	wrctl	status,r2
  
  return context;
   44304:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   44308:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4430c:	e0bffc17 	ldw	r2,-16(fp)
   44310:	10800817 	ldw	r2,32(r2)
   44314:	10c00054 	ori	r3,r2,1
   44318:	e0bffc17 	ldw	r2,-16(fp)
   4431c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44320:	e0bffc17 	ldw	r2,-16(fp)
   44324:	10800017 	ldw	r2,0(r2)
   44328:	10800104 	addi	r2,r2,4
   4432c:	1007883a 	mov	r3,r2
   44330:	e0bffc17 	ldw	r2,-16(fp)
   44334:	10800817 	ldw	r2,32(r2)
   44338:	18800035 	stwio	r2,0(r3)
   4433c:	e0bffa17 	ldw	r2,-24(fp)
   44340:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44344:	e0bff917 	ldw	r2,-28(fp)
   44348:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4434c:	e0fff517 	ldw	r3,-44(fp)
   44350:	e0bffd17 	ldw	r2,-12(fp)
   44354:	18800426 	beq	r3,r2,44368 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   44358:	e0fff517 	ldw	r3,-44(fp)
   4435c:	e0bffd17 	ldw	r2,-12(fp)
   44360:	1885c83a 	sub	r2,r3,r2
   44364:	00000606 	br	44380 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   44368:	e0bfff17 	ldw	r2,-4(fp)
   4436c:	1090000c 	andi	r2,r2,16384
   44370:	10000226 	beq	r2,zero,4437c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   44374:	00bffd44 	movi	r2,-11
   44378:	00000106 	br	44380 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   4437c:	00bffec4 	movi	r2,-5
}
   44380:	e037883a 	mov	sp,fp
   44384:	dfc00117 	ldw	ra,4(sp)
   44388:	df000017 	ldw	fp,0(sp)
   4438c:	dec00204 	addi	sp,sp,8
   44390:	f800283a 	ret

00044394 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   44394:	defff304 	addi	sp,sp,-52
   44398:	dfc00c15 	stw	ra,48(sp)
   4439c:	df000b15 	stw	fp,44(sp)
   443a0:	df000b04 	addi	fp,sp,44
   443a4:	e13ffc15 	stw	r4,-16(fp)
   443a8:	e17ffd15 	stw	r5,-12(fp)
   443ac:	e1bffe15 	stw	r6,-8(fp)
   443b0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   443b4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   443b8:	e0bffd17 	ldw	r2,-12(fp)
   443bc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   443c0:	00003706 	br	444a0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   443c4:	e0bffc17 	ldw	r2,-16(fp)
   443c8:	10800c17 	ldw	r2,48(r2)
   443cc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   443d0:	e0bffc17 	ldw	r2,-16(fp)
   443d4:	10800d17 	ldw	r2,52(r2)
   443d8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   443dc:	e0fff917 	ldw	r3,-28(fp)
   443e0:	e0bff517 	ldw	r2,-44(fp)
   443e4:	1880062e 	bgeu	r3,r2,44400 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   443e8:	e0fff517 	ldw	r3,-44(fp)
   443ec:	e0bff917 	ldw	r2,-28(fp)
   443f0:	1885c83a 	sub	r2,r3,r2
   443f4:	10bfffc4 	addi	r2,r2,-1
   443f8:	e0bff615 	stw	r2,-40(fp)
   443fc:	00000b06 	br	4442c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   44400:	e0bff517 	ldw	r2,-44(fp)
   44404:	10000526 	beq	r2,zero,4441c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   44408:	00c20004 	movi	r3,2048
   4440c:	e0bff917 	ldw	r2,-28(fp)
   44410:	1885c83a 	sub	r2,r3,r2
   44414:	e0bff615 	stw	r2,-40(fp)
   44418:	00000406 	br	4442c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4441c:	00c1ffc4 	movi	r3,2047
   44420:	e0bff917 	ldw	r2,-28(fp)
   44424:	1885c83a 	sub	r2,r3,r2
   44428:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4442c:	e0bff617 	ldw	r2,-40(fp)
   44430:	10001e26 	beq	r2,zero,444ac <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   44434:	e0fffe17 	ldw	r3,-8(fp)
   44438:	e0bff617 	ldw	r2,-40(fp)
   4443c:	1880022e 	bgeu	r3,r2,44448 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   44440:	e0bffe17 	ldw	r2,-8(fp)
   44444:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   44448:	e0bffc17 	ldw	r2,-16(fp)
   4444c:	10c20e04 	addi	r3,r2,2104
   44450:	e0bff917 	ldw	r2,-28(fp)
   44454:	1885883a 	add	r2,r3,r2
   44458:	e1bff617 	ldw	r6,-40(fp)
   4445c:	e17ffd17 	ldw	r5,-12(fp)
   44460:	1009883a 	mov	r4,r2
   44464:	00417540 	call	41754 <memcpy>
      ptr   += n;
   44468:	e0fffd17 	ldw	r3,-12(fp)
   4446c:	e0bff617 	ldw	r2,-40(fp)
   44470:	1885883a 	add	r2,r3,r2
   44474:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   44478:	e0fffe17 	ldw	r3,-8(fp)
   4447c:	e0bff617 	ldw	r2,-40(fp)
   44480:	1885c83a 	sub	r2,r3,r2
   44484:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44488:	e0fff917 	ldw	r3,-28(fp)
   4448c:	e0bff617 	ldw	r2,-40(fp)
   44490:	1885883a 	add	r2,r3,r2
   44494:	10c1ffcc 	andi	r3,r2,2047
   44498:	e0bffc17 	ldw	r2,-16(fp)
   4449c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   444a0:	e0bffe17 	ldw	r2,-8(fp)
   444a4:	00bfc716 	blt	zero,r2,443c4 <__alt_data_end+0xfffd23c4>
   444a8:	00000106 	br	444b0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   444ac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   444b0:	0005303a 	rdctl	r2,status
   444b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   444b8:	e0fffb17 	ldw	r3,-20(fp)
   444bc:	00bfff84 	movi	r2,-2
   444c0:	1884703a 	and	r2,r3,r2
   444c4:	1001703a 	wrctl	status,r2
  
  return context;
   444c8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   444cc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   444d0:	e0bffc17 	ldw	r2,-16(fp)
   444d4:	10800817 	ldw	r2,32(r2)
   444d8:	10c00094 	ori	r3,r2,2
   444dc:	e0bffc17 	ldw	r2,-16(fp)
   444e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   444e4:	e0bffc17 	ldw	r2,-16(fp)
   444e8:	10800017 	ldw	r2,0(r2)
   444ec:	10800104 	addi	r2,r2,4
   444f0:	1007883a 	mov	r3,r2
   444f4:	e0bffc17 	ldw	r2,-16(fp)
   444f8:	10800817 	ldw	r2,32(r2)
   444fc:	18800035 	stwio	r2,0(r3)
   44500:	e0bffa17 	ldw	r2,-24(fp)
   44504:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44508:	e0bff817 	ldw	r2,-32(fp)
   4450c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   44510:	e0bffe17 	ldw	r2,-8(fp)
   44514:	0080100e 	bge	zero,r2,44558 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   44518:	e0bfff17 	ldw	r2,-4(fp)
   4451c:	1090000c 	andi	r2,r2,16384
   44520:	1000101e 	bne	r2,zero,44564 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   44524:	0001883a 	nop
   44528:	e0bffc17 	ldw	r2,-16(fp)
   4452c:	10c00d17 	ldw	r3,52(r2)
   44530:	e0bff517 	ldw	r2,-44(fp)
   44534:	1880051e 	bne	r3,r2,4454c <altera_avalon_jtag_uart_write+0x1b8>
   44538:	e0bffc17 	ldw	r2,-16(fp)
   4453c:	10c00917 	ldw	r3,36(r2)
   44540:	e0bffc17 	ldw	r2,-16(fp)
   44544:	10800117 	ldw	r2,4(r2)
   44548:	18bff736 	bltu	r3,r2,44528 <__alt_data_end+0xfffd2528>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   4454c:	e0bffc17 	ldw	r2,-16(fp)
   44550:	10800917 	ldw	r2,36(r2)
   44554:	1000051e 	bne	r2,zero,4456c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   44558:	e0bffe17 	ldw	r2,-8(fp)
   4455c:	00bfd016 	blt	zero,r2,444a0 <__alt_data_end+0xfffd24a0>
   44560:	00000306 	br	44570 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   44564:	0001883a 	nop
   44568:	00000106 	br	44570 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   4456c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   44570:	e0fffd17 	ldw	r3,-12(fp)
   44574:	e0bff717 	ldw	r2,-36(fp)
   44578:	18800426 	beq	r3,r2,4458c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4457c:	e0fffd17 	ldw	r3,-12(fp)
   44580:	e0bff717 	ldw	r2,-36(fp)
   44584:	1885c83a 	sub	r2,r3,r2
   44588:	00000606 	br	445a4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4458c:	e0bfff17 	ldw	r2,-4(fp)
   44590:	1090000c 	andi	r2,r2,16384
   44594:	10000226 	beq	r2,zero,445a0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   44598:	00bffd44 	movi	r2,-11
   4459c:	00000106 	br	445a4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   445a0:	00bffec4 	movi	r2,-5
}
   445a4:	e037883a 	mov	sp,fp
   445a8:	dfc00117 	ldw	ra,4(sp)
   445ac:	df000017 	ldw	fp,0(sp)
   445b0:	dec00204 	addi	sp,sp,8
   445b4:	f800283a 	ret

000445b8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   445b8:	defff504 	addi	sp,sp,-44
   445bc:	df000a15 	stw	fp,40(sp)
   445c0:	df000a04 	addi	fp,sp,40
   445c4:	e13ffc15 	stw	r4,-16(fp)
   445c8:	e17ffd15 	stw	r5,-12(fp)
   445cc:	e1bffe15 	stw	r6,-8(fp)
   445d0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   445d4:	e03ff615 	stw	zero,-40(fp)
   445d8:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
   445dc:	10003c26 	beq	r2,zero,446d0 <alt_alarm_start+0x118>
  {
    if (alarm)
   445e0:	e0bffc17 	ldw	r2,-16(fp)
   445e4:	10003826 	beq	r2,zero,446c8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   445e8:	e0bffc17 	ldw	r2,-16(fp)
   445ec:	e0fffe17 	ldw	r3,-8(fp)
   445f0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   445f4:	e0bffc17 	ldw	r2,-16(fp)
   445f8:	e0ffff17 	ldw	r3,-4(fp)
   445fc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44600:	0005303a 	rdctl	r2,status
   44604:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44608:	e0fff917 	ldw	r3,-28(fp)
   4460c:	00bfff84 	movi	r2,-2
   44610:	1884703a 	and	r2,r3,r2
   44614:	1001703a 	wrctl	status,r2
  
  return context;
   44618:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   4461c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   44620:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
   44624:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   44628:	e0fffd17 	ldw	r3,-12(fp)
   4462c:	e0bff617 	ldw	r2,-40(fp)
   44630:	1885883a 	add	r2,r3,r2
   44634:	10c00044 	addi	r3,r2,1
   44638:	e0bffc17 	ldw	r2,-16(fp)
   4463c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   44640:	e0bffc17 	ldw	r2,-16(fp)
   44644:	10c00217 	ldw	r3,8(r2)
   44648:	e0bff617 	ldw	r2,-40(fp)
   4464c:	1880042e 	bgeu	r3,r2,44660 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   44650:	e0bffc17 	ldw	r2,-16(fp)
   44654:	00c00044 	movi	r3,1
   44658:	10c00405 	stb	r3,16(r2)
   4465c:	00000206 	br	44668 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   44660:	e0bffc17 	ldw	r2,-16(fp)
   44664:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   44668:	e0bffc17 	ldw	r2,-16(fp)
   4466c:	d0e00c04 	addi	r3,gp,-32720
   44670:	e0fffa15 	stw	r3,-24(fp)
   44674:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44678:	e0bffb17 	ldw	r2,-20(fp)
   4467c:	e0fffa17 	ldw	r3,-24(fp)
   44680:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44684:	e0bffa17 	ldw	r2,-24(fp)
   44688:	10c00017 	ldw	r3,0(r2)
   4468c:	e0bffb17 	ldw	r2,-20(fp)
   44690:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44694:	e0bffa17 	ldw	r2,-24(fp)
   44698:	10800017 	ldw	r2,0(r2)
   4469c:	e0fffb17 	ldw	r3,-20(fp)
   446a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   446a4:	e0bffa17 	ldw	r2,-24(fp)
   446a8:	e0fffb17 	ldw	r3,-20(fp)
   446ac:	10c00015 	stw	r3,0(r2)
   446b0:	e0bff817 	ldw	r2,-32(fp)
   446b4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   446b8:	e0bff717 	ldw	r2,-36(fp)
   446bc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   446c0:	0005883a 	mov	r2,zero
   446c4:	00000306 	br	446d4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   446c8:	00bffa84 	movi	r2,-22
   446cc:	00000106 	br	446d4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   446d0:	00bfde84 	movi	r2,-134
  }
}
   446d4:	e037883a 	mov	sp,fp
   446d8:	df000017 	ldw	fp,0(sp)
   446dc:	dec00104 	addi	sp,sp,4
   446e0:	f800283a 	ret

000446e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   446e4:	deffff04 	addi	sp,sp,-4
   446e8:	df000015 	stw	fp,0(sp)
   446ec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   446f0:	0001883a 	nop
   446f4:	e037883a 	mov	sp,fp
   446f8:	df000017 	ldw	fp,0(sp)
   446fc:	dec00104 	addi	sp,sp,4
   44700:	f800283a 	ret

00044704 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44704:	defffe04 	addi	sp,sp,-8
   44708:	dfc00115 	stw	ra,4(sp)
   4470c:	df000015 	stw	fp,0(sp)
   44710:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44714:	d0a00917 	ldw	r2,-32732(gp)
   44718:	10000326 	beq	r2,zero,44728 <alt_get_errno+0x24>
   4471c:	d0a00917 	ldw	r2,-32732(gp)
   44720:	103ee83a 	callr	r2
   44724:	00000106 	br	4472c <alt_get_errno+0x28>
   44728:	d0a6ac04 	addi	r2,gp,-25936
}
   4472c:	e037883a 	mov	sp,fp
   44730:	dfc00117 	ldw	ra,4(sp)
   44734:	df000017 	ldw	fp,0(sp)
   44738:	dec00204 	addi	sp,sp,8
   4473c:	f800283a 	ret

00044740 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   44740:	defffa04 	addi	sp,sp,-24
   44744:	dfc00515 	stw	ra,20(sp)
   44748:	df000415 	stw	fp,16(sp)
   4474c:	df000404 	addi	fp,sp,16
   44750:	e13ffe15 	stw	r4,-8(fp)
   44754:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   44758:	e0bffe17 	ldw	r2,-8(fp)
   4475c:	10000326 	beq	r2,zero,4476c <alt_dev_llist_insert+0x2c>
   44760:	e0bffe17 	ldw	r2,-8(fp)
   44764:	10800217 	ldw	r2,8(r2)
   44768:	1000061e 	bne	r2,zero,44784 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   4476c:	00447040 	call	44704 <alt_get_errno>
   44770:	1007883a 	mov	r3,r2
   44774:	00800584 	movi	r2,22
   44778:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4477c:	00bffa84 	movi	r2,-22
   44780:	00001306 	br	447d0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   44784:	e0bffe17 	ldw	r2,-8(fp)
   44788:	e0ffff17 	ldw	r3,-4(fp)
   4478c:	e0fffc15 	stw	r3,-16(fp)
   44790:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44794:	e0bffd17 	ldw	r2,-12(fp)
   44798:	e0fffc17 	ldw	r3,-16(fp)
   4479c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   447a0:	e0bffc17 	ldw	r2,-16(fp)
   447a4:	10c00017 	ldw	r3,0(r2)
   447a8:	e0bffd17 	ldw	r2,-12(fp)
   447ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   447b0:	e0bffc17 	ldw	r2,-16(fp)
   447b4:	10800017 	ldw	r2,0(r2)
   447b8:	e0fffd17 	ldw	r3,-12(fp)
   447bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   447c0:	e0bffc17 	ldw	r2,-16(fp)
   447c4:	e0fffd17 	ldw	r3,-12(fp)
   447c8:	10c00015 	stw	r3,0(r2)

  return 0;  
   447cc:	0005883a 	mov	r2,zero
}
   447d0:	e037883a 	mov	sp,fp
   447d4:	dfc00117 	ldw	ra,4(sp)
   447d8:	df000017 	ldw	fp,0(sp)
   447dc:	dec00204 	addi	sp,sp,8
   447e0:	f800283a 	ret

000447e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   447e4:	defffd04 	addi	sp,sp,-12
   447e8:	dfc00215 	stw	ra,8(sp)
   447ec:	df000115 	stw	fp,4(sp)
   447f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   447f4:	00800134 	movhi	r2,4
   447f8:	1095e604 	addi	r2,r2,22424
   447fc:	e0bfff15 	stw	r2,-4(fp)
   44800:	00000606 	br	4481c <_do_ctors+0x38>
        (*ctor) (); 
   44804:	e0bfff17 	ldw	r2,-4(fp)
   44808:	10800017 	ldw	r2,0(r2)
   4480c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44810:	e0bfff17 	ldw	r2,-4(fp)
   44814:	10bfff04 	addi	r2,r2,-4
   44818:	e0bfff15 	stw	r2,-4(fp)
   4481c:	e0ffff17 	ldw	r3,-4(fp)
   44820:	00800134 	movhi	r2,4
   44824:	1095e704 	addi	r2,r2,22428
   44828:	18bff62e 	bgeu	r3,r2,44804 <__alt_data_end+0xfffd2804>
        (*ctor) (); 
}
   4482c:	0001883a 	nop
   44830:	e037883a 	mov	sp,fp
   44834:	dfc00117 	ldw	ra,4(sp)
   44838:	df000017 	ldw	fp,0(sp)
   4483c:	dec00204 	addi	sp,sp,8
   44840:	f800283a 	ret

00044844 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   44844:	defffd04 	addi	sp,sp,-12
   44848:	dfc00215 	stw	ra,8(sp)
   4484c:	df000115 	stw	fp,4(sp)
   44850:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44854:	00800134 	movhi	r2,4
   44858:	1095e604 	addi	r2,r2,22424
   4485c:	e0bfff15 	stw	r2,-4(fp)
   44860:	00000606 	br	4487c <_do_dtors+0x38>
        (*dtor) (); 
   44864:	e0bfff17 	ldw	r2,-4(fp)
   44868:	10800017 	ldw	r2,0(r2)
   4486c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44870:	e0bfff17 	ldw	r2,-4(fp)
   44874:	10bfff04 	addi	r2,r2,-4
   44878:	e0bfff15 	stw	r2,-4(fp)
   4487c:	e0ffff17 	ldw	r3,-4(fp)
   44880:	00800134 	movhi	r2,4
   44884:	1095e704 	addi	r2,r2,22428
   44888:	18bff62e 	bgeu	r3,r2,44864 <__alt_data_end+0xfffd2864>
        (*dtor) (); 
}
   4488c:	0001883a 	nop
   44890:	e037883a 	mov	sp,fp
   44894:	dfc00117 	ldw	ra,4(sp)
   44898:	df000017 	ldw	fp,0(sp)
   4489c:	dec00204 	addi	sp,sp,8
   448a0:	f800283a 	ret

000448a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   448a4:	deffff04 	addi	sp,sp,-4
   448a8:	df000015 	stw	fp,0(sp)
   448ac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   448b0:	0001883a 	nop
   448b4:	e037883a 	mov	sp,fp
   448b8:	df000017 	ldw	fp,0(sp)
   448bc:	dec00104 	addi	sp,sp,4
   448c0:	f800283a 	ret

000448c4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   448c4:	defff904 	addi	sp,sp,-28
   448c8:	dfc00615 	stw	ra,24(sp)
   448cc:	df000515 	stw	fp,20(sp)
   448d0:	df000504 	addi	fp,sp,20
   448d4:	e13ffc15 	stw	r4,-16(fp)
   448d8:	e17ffd15 	stw	r5,-12(fp)
   448dc:	e1bffe15 	stw	r6,-8(fp)
   448e0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   448e4:	e0800217 	ldw	r2,8(fp)
   448e8:	d8800015 	stw	r2,0(sp)
   448ec:	e1ffff17 	ldw	r7,-4(fp)
   448f0:	e1bffe17 	ldw	r6,-8(fp)
   448f4:	e17ffd17 	ldw	r5,-12(fp)
   448f8:	e13ffc17 	ldw	r4,-16(fp)
   448fc:	0044a740 	call	44a74 <alt_iic_isr_register>
}  
   44900:	e037883a 	mov	sp,fp
   44904:	dfc00117 	ldw	ra,4(sp)
   44908:	df000017 	ldw	fp,0(sp)
   4490c:	dec00204 	addi	sp,sp,8
   44910:	f800283a 	ret

00044914 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   44914:	defff904 	addi	sp,sp,-28
   44918:	df000615 	stw	fp,24(sp)
   4491c:	df000604 	addi	fp,sp,24
   44920:	e13ffe15 	stw	r4,-8(fp)
   44924:	e17fff15 	stw	r5,-4(fp)
   44928:	e0bfff17 	ldw	r2,-4(fp)
   4492c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44930:	0005303a 	rdctl	r2,status
   44934:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44938:	e0fffb17 	ldw	r3,-20(fp)
   4493c:	00bfff84 	movi	r2,-2
   44940:	1884703a 	and	r2,r3,r2
   44944:	1001703a 	wrctl	status,r2
  
  return context;
   44948:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4494c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   44950:	00c00044 	movi	r3,1
   44954:	e0bffa17 	ldw	r2,-24(fp)
   44958:	1884983a 	sll	r2,r3,r2
   4495c:	1007883a 	mov	r3,r2
   44960:	d0a6b017 	ldw	r2,-25920(gp)
   44964:	1884b03a 	or	r2,r3,r2
   44968:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4496c:	d0a6b017 	ldw	r2,-25920(gp)
   44970:	100170fa 	wrctl	ienable,r2
   44974:	e0bffc17 	ldw	r2,-16(fp)
   44978:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4497c:	e0bffd17 	ldw	r2,-12(fp)
   44980:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   44984:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   44988:	0001883a 	nop
}
   4498c:	e037883a 	mov	sp,fp
   44990:	df000017 	ldw	fp,0(sp)
   44994:	dec00104 	addi	sp,sp,4
   44998:	f800283a 	ret

0004499c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4499c:	defff904 	addi	sp,sp,-28
   449a0:	df000615 	stw	fp,24(sp)
   449a4:	df000604 	addi	fp,sp,24
   449a8:	e13ffe15 	stw	r4,-8(fp)
   449ac:	e17fff15 	stw	r5,-4(fp)
   449b0:	e0bfff17 	ldw	r2,-4(fp)
   449b4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   449b8:	0005303a 	rdctl	r2,status
   449bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   449c0:	e0fffb17 	ldw	r3,-20(fp)
   449c4:	00bfff84 	movi	r2,-2
   449c8:	1884703a 	and	r2,r3,r2
   449cc:	1001703a 	wrctl	status,r2
  
  return context;
   449d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   449d4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   449d8:	00c00044 	movi	r3,1
   449dc:	e0bffa17 	ldw	r2,-24(fp)
   449e0:	1884983a 	sll	r2,r3,r2
   449e4:	0084303a 	nor	r2,zero,r2
   449e8:	1007883a 	mov	r3,r2
   449ec:	d0a6b017 	ldw	r2,-25920(gp)
   449f0:	1884703a 	and	r2,r3,r2
   449f4:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   449f8:	d0a6b017 	ldw	r2,-25920(gp)
   449fc:	100170fa 	wrctl	ienable,r2
   44a00:	e0bffc17 	ldw	r2,-16(fp)
   44a04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44a08:	e0bffd17 	ldw	r2,-12(fp)
   44a0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   44a10:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   44a14:	0001883a 	nop
}
   44a18:	e037883a 	mov	sp,fp
   44a1c:	df000017 	ldw	fp,0(sp)
   44a20:	dec00104 	addi	sp,sp,4
   44a24:	f800283a 	ret

00044a28 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   44a28:	defffc04 	addi	sp,sp,-16
   44a2c:	df000315 	stw	fp,12(sp)
   44a30:	df000304 	addi	fp,sp,12
   44a34:	e13ffe15 	stw	r4,-8(fp)
   44a38:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   44a3c:	000530fa 	rdctl	r2,ienable
   44a40:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   44a44:	00c00044 	movi	r3,1
   44a48:	e0bfff17 	ldw	r2,-4(fp)
   44a4c:	1884983a 	sll	r2,r3,r2
   44a50:	1007883a 	mov	r3,r2
   44a54:	e0bffd17 	ldw	r2,-12(fp)
   44a58:	1884703a 	and	r2,r3,r2
   44a5c:	1004c03a 	cmpne	r2,r2,zero
   44a60:	10803fcc 	andi	r2,r2,255
}
   44a64:	e037883a 	mov	sp,fp
   44a68:	df000017 	ldw	fp,0(sp)
   44a6c:	dec00104 	addi	sp,sp,4
   44a70:	f800283a 	ret

00044a74 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44a74:	defff504 	addi	sp,sp,-44
   44a78:	dfc00a15 	stw	ra,40(sp)
   44a7c:	df000915 	stw	fp,36(sp)
   44a80:	df000904 	addi	fp,sp,36
   44a84:	e13ffc15 	stw	r4,-16(fp)
   44a88:	e17ffd15 	stw	r5,-12(fp)
   44a8c:	e1bffe15 	stw	r6,-8(fp)
   44a90:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   44a94:	00bffa84 	movi	r2,-22
   44a98:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   44a9c:	e0bffd17 	ldw	r2,-12(fp)
   44aa0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   44aa4:	e0bff817 	ldw	r2,-32(fp)
   44aa8:	10800808 	cmpgei	r2,r2,32
   44aac:	1000271e 	bne	r2,zero,44b4c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44ab0:	0005303a 	rdctl	r2,status
   44ab4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44ab8:	e0fffb17 	ldw	r3,-20(fp)
   44abc:	00bfff84 	movi	r2,-2
   44ac0:	1884703a 	and	r2,r3,r2
   44ac4:	1001703a 	wrctl	status,r2
  
  return context;
   44ac8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   44acc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   44ad0:	00800174 	movhi	r2,5
   44ad4:	10a34804 	addi	r2,r2,-29408
   44ad8:	e0fff817 	ldw	r3,-32(fp)
   44adc:	180690fa 	slli	r3,r3,3
   44ae0:	10c5883a 	add	r2,r2,r3
   44ae4:	e0fffe17 	ldw	r3,-8(fp)
   44ae8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   44aec:	00800174 	movhi	r2,5
   44af0:	10a34804 	addi	r2,r2,-29408
   44af4:	e0fff817 	ldw	r3,-32(fp)
   44af8:	180690fa 	slli	r3,r3,3
   44afc:	10c5883a 	add	r2,r2,r3
   44b00:	10800104 	addi	r2,r2,4
   44b04:	e0ffff17 	ldw	r3,-4(fp)
   44b08:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   44b0c:	e0bffe17 	ldw	r2,-8(fp)
   44b10:	10000526 	beq	r2,zero,44b28 <alt_iic_isr_register+0xb4>
   44b14:	e0bff817 	ldw	r2,-32(fp)
   44b18:	100b883a 	mov	r5,r2
   44b1c:	e13ffc17 	ldw	r4,-16(fp)
   44b20:	00449140 	call	44914 <alt_ic_irq_enable>
   44b24:	00000406 	br	44b38 <alt_iic_isr_register+0xc4>
   44b28:	e0bff817 	ldw	r2,-32(fp)
   44b2c:	100b883a 	mov	r5,r2
   44b30:	e13ffc17 	ldw	r4,-16(fp)
   44b34:	004499c0 	call	4499c <alt_ic_irq_disable>
   44b38:	e0bff715 	stw	r2,-36(fp)
   44b3c:	e0bffa17 	ldw	r2,-24(fp)
   44b40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44b44:	e0bff917 	ldw	r2,-28(fp)
   44b48:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   44b4c:	e0bff717 	ldw	r2,-36(fp)
}
   44b50:	e037883a 	mov	sp,fp
   44b54:	dfc00117 	ldw	ra,4(sp)
   44b58:	df000017 	ldw	fp,0(sp)
   44b5c:	dec00204 	addi	sp,sp,8
   44b60:	f800283a 	ret

00044b64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   44b64:	defff804 	addi	sp,sp,-32
   44b68:	dfc00715 	stw	ra,28(sp)
   44b6c:	df000615 	stw	fp,24(sp)
   44b70:	dc000515 	stw	r16,20(sp)
   44b74:	df000604 	addi	fp,sp,24
   44b78:	e13ffb15 	stw	r4,-20(fp)
   44b7c:	e17ffc15 	stw	r5,-16(fp)
   44b80:	e1bffd15 	stw	r6,-12(fp)
   44b84:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   44b88:	e1bffe17 	ldw	r6,-8(fp)
   44b8c:	e17ffd17 	ldw	r5,-12(fp)
   44b90:	e13ffc17 	ldw	r4,-16(fp)
   44b94:	0044dec0 	call	44dec <open>
   44b98:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   44b9c:	e0bffa17 	ldw	r2,-24(fp)
   44ba0:	10002216 	blt	r2,zero,44c2c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   44ba4:	04000134 	movhi	r16,4
   44ba8:	84181204 	addi	r16,r16,24648
   44bac:	e0bffa17 	ldw	r2,-24(fp)
   44bb0:	01400304 	movi	r5,12
   44bb4:	1009883a 	mov	r4,r2
   44bb8:	00430dc0 	call	430dc <__mulsi3>
   44bbc:	8085883a 	add	r2,r16,r2
   44bc0:	10c00017 	ldw	r3,0(r2)
   44bc4:	e0bffb17 	ldw	r2,-20(fp)
   44bc8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   44bcc:	04000134 	movhi	r16,4
   44bd0:	84181204 	addi	r16,r16,24648
   44bd4:	e0bffa17 	ldw	r2,-24(fp)
   44bd8:	01400304 	movi	r5,12
   44bdc:	1009883a 	mov	r4,r2
   44be0:	00430dc0 	call	430dc <__mulsi3>
   44be4:	8085883a 	add	r2,r16,r2
   44be8:	10800104 	addi	r2,r2,4
   44bec:	10c00017 	ldw	r3,0(r2)
   44bf0:	e0bffb17 	ldw	r2,-20(fp)
   44bf4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   44bf8:	04000134 	movhi	r16,4
   44bfc:	84181204 	addi	r16,r16,24648
   44c00:	e0bffa17 	ldw	r2,-24(fp)
   44c04:	01400304 	movi	r5,12
   44c08:	1009883a 	mov	r4,r2
   44c0c:	00430dc0 	call	430dc <__mulsi3>
   44c10:	8085883a 	add	r2,r16,r2
   44c14:	10800204 	addi	r2,r2,8
   44c18:	10c00017 	ldw	r3,0(r2)
   44c1c:	e0bffb17 	ldw	r2,-20(fp)
   44c20:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   44c24:	e13ffa17 	ldw	r4,-24(fp)
   44c28:	00438280 	call	43828 <alt_release_fd>
  }
} 
   44c2c:	0001883a 	nop
   44c30:	e6ffff04 	addi	sp,fp,-4
   44c34:	dfc00217 	ldw	ra,8(sp)
   44c38:	df000117 	ldw	fp,4(sp)
   44c3c:	dc000017 	ldw	r16,0(sp)
   44c40:	dec00304 	addi	sp,sp,12
   44c44:	f800283a 	ret

00044c48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   44c48:	defffb04 	addi	sp,sp,-20
   44c4c:	dfc00415 	stw	ra,16(sp)
   44c50:	df000315 	stw	fp,12(sp)
   44c54:	df000304 	addi	fp,sp,12
   44c58:	e13ffd15 	stw	r4,-12(fp)
   44c5c:	e17ffe15 	stw	r5,-8(fp)
   44c60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   44c64:	01c07fc4 	movi	r7,511
   44c68:	01800044 	movi	r6,1
   44c6c:	e17ffd17 	ldw	r5,-12(fp)
   44c70:	01000134 	movhi	r4,4
   44c74:	21181504 	addi	r4,r4,24660
   44c78:	0044b640 	call	44b64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   44c7c:	01c07fc4 	movi	r7,511
   44c80:	000d883a 	mov	r6,zero
   44c84:	e17ffe17 	ldw	r5,-8(fp)
   44c88:	01000134 	movhi	r4,4
   44c8c:	21181204 	addi	r4,r4,24648
   44c90:	0044b640 	call	44b64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   44c94:	01c07fc4 	movi	r7,511
   44c98:	01800044 	movi	r6,1
   44c9c:	e17fff17 	ldw	r5,-4(fp)
   44ca0:	01000134 	movhi	r4,4
   44ca4:	21181804 	addi	r4,r4,24672
   44ca8:	0044b640 	call	44b64 <alt_open_fd>
}  
   44cac:	0001883a 	nop
   44cb0:	e037883a 	mov	sp,fp
   44cb4:	dfc00117 	ldw	ra,4(sp)
   44cb8:	df000017 	ldw	fp,0(sp)
   44cbc:	dec00204 	addi	sp,sp,8
   44cc0:	f800283a 	ret

00044cc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44cc4:	defffe04 	addi	sp,sp,-8
   44cc8:	dfc00115 	stw	ra,4(sp)
   44ccc:	df000015 	stw	fp,0(sp)
   44cd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44cd4:	d0a00917 	ldw	r2,-32732(gp)
   44cd8:	10000326 	beq	r2,zero,44ce8 <alt_get_errno+0x24>
   44cdc:	d0a00917 	ldw	r2,-32732(gp)
   44ce0:	103ee83a 	callr	r2
   44ce4:	00000106 	br	44cec <alt_get_errno+0x28>
   44ce8:	d0a6ac04 	addi	r2,gp,-25936
}
   44cec:	e037883a 	mov	sp,fp
   44cf0:	dfc00117 	ldw	ra,4(sp)
   44cf4:	df000017 	ldw	fp,0(sp)
   44cf8:	dec00204 	addi	sp,sp,8
   44cfc:	f800283a 	ret

00044d00 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   44d00:	defffb04 	addi	sp,sp,-20
   44d04:	dfc00415 	stw	ra,16(sp)
   44d08:	df000315 	stw	fp,12(sp)
   44d0c:	dc000215 	stw	r16,8(sp)
   44d10:	df000304 	addi	fp,sp,12
   44d14:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   44d18:	e0bffe17 	ldw	r2,-8(fp)
   44d1c:	10800217 	ldw	r2,8(r2)
   44d20:	10d00034 	orhi	r3,r2,16384
   44d24:	e0bffe17 	ldw	r2,-8(fp)
   44d28:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   44d2c:	e03ffd15 	stw	zero,-12(fp)
   44d30:	00002306 	br	44dc0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44d34:	04000134 	movhi	r16,4
   44d38:	84181204 	addi	r16,r16,24648
   44d3c:	e0bffd17 	ldw	r2,-12(fp)
   44d40:	01400304 	movi	r5,12
   44d44:	1009883a 	mov	r4,r2
   44d48:	00430dc0 	call	430dc <__mulsi3>
   44d4c:	8085883a 	add	r2,r16,r2
   44d50:	10c00017 	ldw	r3,0(r2)
   44d54:	e0bffe17 	ldw	r2,-8(fp)
   44d58:	10800017 	ldw	r2,0(r2)
   44d5c:	1880151e 	bne	r3,r2,44db4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44d60:	04000134 	movhi	r16,4
   44d64:	84181204 	addi	r16,r16,24648
   44d68:	e0bffd17 	ldw	r2,-12(fp)
   44d6c:	01400304 	movi	r5,12
   44d70:	1009883a 	mov	r4,r2
   44d74:	00430dc0 	call	430dc <__mulsi3>
   44d78:	8085883a 	add	r2,r16,r2
   44d7c:	10800204 	addi	r2,r2,8
   44d80:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44d84:	10000b0e 	bge	r2,zero,44db4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   44d88:	01400304 	movi	r5,12
   44d8c:	e13ffd17 	ldw	r4,-12(fp)
   44d90:	00430dc0 	call	430dc <__mulsi3>
   44d94:	1007883a 	mov	r3,r2
   44d98:	00800134 	movhi	r2,4
   44d9c:	10981204 	addi	r2,r2,24648
   44da0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44da4:	e0bffe17 	ldw	r2,-8(fp)
   44da8:	18800226 	beq	r3,r2,44db4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   44dac:	00bffcc4 	movi	r2,-13
   44db0:	00000806 	br	44dd4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   44db4:	e0bffd17 	ldw	r2,-12(fp)
   44db8:	10800044 	addi	r2,r2,1
   44dbc:	e0bffd15 	stw	r2,-12(fp)
   44dc0:	d0a00817 	ldw	r2,-32736(gp)
   44dc4:	1007883a 	mov	r3,r2
   44dc8:	e0bffd17 	ldw	r2,-12(fp)
   44dcc:	18bfd92e 	bgeu	r3,r2,44d34 <__alt_data_end+0xfffd2d34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   44dd0:	0005883a 	mov	r2,zero
}
   44dd4:	e6ffff04 	addi	sp,fp,-4
   44dd8:	dfc00217 	ldw	ra,8(sp)
   44ddc:	df000117 	ldw	fp,4(sp)
   44de0:	dc000017 	ldw	r16,0(sp)
   44de4:	dec00304 	addi	sp,sp,12
   44de8:	f800283a 	ret

00044dec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   44dec:	defff604 	addi	sp,sp,-40
   44df0:	dfc00915 	stw	ra,36(sp)
   44df4:	df000815 	stw	fp,32(sp)
   44df8:	df000804 	addi	fp,sp,32
   44dfc:	e13ffd15 	stw	r4,-12(fp)
   44e00:	e17ffe15 	stw	r5,-8(fp)
   44e04:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   44e08:	00bfffc4 	movi	r2,-1
   44e0c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   44e10:	00bffb44 	movi	r2,-19
   44e14:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   44e18:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   44e1c:	d1600604 	addi	r5,gp,-32744
   44e20:	e13ffd17 	ldw	r4,-12(fp)
   44e24:	00451100 	call	45110 <alt_find_dev>
   44e28:	e0bff815 	stw	r2,-32(fp)
   44e2c:	e0bff817 	ldw	r2,-32(fp)
   44e30:	1000051e 	bne	r2,zero,44e48 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   44e34:	e13ffd17 	ldw	r4,-12(fp)
   44e38:	00451a00 	call	451a0 <alt_find_file>
   44e3c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   44e40:	00800044 	movi	r2,1
   44e44:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   44e48:	e0bff817 	ldw	r2,-32(fp)
   44e4c:	10002b26 	beq	r2,zero,44efc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   44e50:	e13ff817 	ldw	r4,-32(fp)
   44e54:	00452a80 	call	452a8 <alt_get_fd>
   44e58:	e0bff915 	stw	r2,-28(fp)
   44e5c:	e0bff917 	ldw	r2,-28(fp)
   44e60:	1000030e 	bge	r2,zero,44e70 <open+0x84>
    {
      status = index;
   44e64:	e0bff917 	ldw	r2,-28(fp)
   44e68:	e0bffa15 	stw	r2,-24(fp)
   44e6c:	00002506 	br	44f04 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   44e70:	01400304 	movi	r5,12
   44e74:	e13ff917 	ldw	r4,-28(fp)
   44e78:	00430dc0 	call	430dc <__mulsi3>
   44e7c:	1007883a 	mov	r3,r2
   44e80:	00800134 	movhi	r2,4
   44e84:	10981204 	addi	r2,r2,24648
   44e88:	1885883a 	add	r2,r3,r2
   44e8c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   44e90:	e0fffe17 	ldw	r3,-8(fp)
   44e94:	00900034 	movhi	r2,16384
   44e98:	10bfffc4 	addi	r2,r2,-1
   44e9c:	1886703a 	and	r3,r3,r2
   44ea0:	e0bffc17 	ldw	r2,-16(fp)
   44ea4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   44ea8:	e0bffb17 	ldw	r2,-20(fp)
   44eac:	1000051e 	bne	r2,zero,44ec4 <open+0xd8>
   44eb0:	e13ffc17 	ldw	r4,-16(fp)
   44eb4:	0044d000 	call	44d00 <alt_file_locked>
   44eb8:	e0bffa15 	stw	r2,-24(fp)
   44ebc:	e0bffa17 	ldw	r2,-24(fp)
   44ec0:	10001016 	blt	r2,zero,44f04 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   44ec4:	e0bff817 	ldw	r2,-32(fp)
   44ec8:	10800317 	ldw	r2,12(r2)
   44ecc:	10000826 	beq	r2,zero,44ef0 <open+0x104>
   44ed0:	e0bff817 	ldw	r2,-32(fp)
   44ed4:	10800317 	ldw	r2,12(r2)
   44ed8:	e1ffff17 	ldw	r7,-4(fp)
   44edc:	e1bffe17 	ldw	r6,-8(fp)
   44ee0:	e17ffd17 	ldw	r5,-12(fp)
   44ee4:	e13ffc17 	ldw	r4,-16(fp)
   44ee8:	103ee83a 	callr	r2
   44eec:	00000106 	br	44ef4 <open+0x108>
   44ef0:	0005883a 	mov	r2,zero
   44ef4:	e0bffa15 	stw	r2,-24(fp)
   44ef8:	00000206 	br	44f04 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   44efc:	00bffb44 	movi	r2,-19
   44f00:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   44f04:	e0bffa17 	ldw	r2,-24(fp)
   44f08:	1000090e 	bge	r2,zero,44f30 <open+0x144>
  {
    alt_release_fd (index);  
   44f0c:	e13ff917 	ldw	r4,-28(fp)
   44f10:	00438280 	call	43828 <alt_release_fd>
    ALT_ERRNO = -status;
   44f14:	0044cc40 	call	44cc4 <alt_get_errno>
   44f18:	1007883a 	mov	r3,r2
   44f1c:	e0bffa17 	ldw	r2,-24(fp)
   44f20:	0085c83a 	sub	r2,zero,r2
   44f24:	18800015 	stw	r2,0(r3)
    return -1;
   44f28:	00bfffc4 	movi	r2,-1
   44f2c:	00000106 	br	44f34 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   44f30:	e0bff917 	ldw	r2,-28(fp)
}
   44f34:	e037883a 	mov	sp,fp
   44f38:	dfc00117 	ldw	ra,4(sp)
   44f3c:	df000017 	ldw	fp,0(sp)
   44f40:	dec00204 	addi	sp,sp,8
   44f44:	f800283a 	ret

00044f48 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   44f48:	defffa04 	addi	sp,sp,-24
   44f4c:	df000515 	stw	fp,20(sp)
   44f50:	df000504 	addi	fp,sp,20
   44f54:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44f58:	0005303a 	rdctl	r2,status
   44f5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44f60:	e0fffc17 	ldw	r3,-16(fp)
   44f64:	00bfff84 	movi	r2,-2
   44f68:	1884703a 	and	r2,r3,r2
   44f6c:	1001703a 	wrctl	status,r2
  
  return context;
   44f70:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   44f74:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   44f78:	e0bfff17 	ldw	r2,-4(fp)
   44f7c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   44f80:	e0bffd17 	ldw	r2,-12(fp)
   44f84:	10800017 	ldw	r2,0(r2)
   44f88:	e0fffd17 	ldw	r3,-12(fp)
   44f8c:	18c00117 	ldw	r3,4(r3)
   44f90:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   44f94:	e0bffd17 	ldw	r2,-12(fp)
   44f98:	10800117 	ldw	r2,4(r2)
   44f9c:	e0fffd17 	ldw	r3,-12(fp)
   44fa0:	18c00017 	ldw	r3,0(r3)
   44fa4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   44fa8:	e0bffd17 	ldw	r2,-12(fp)
   44fac:	e0fffd17 	ldw	r3,-12(fp)
   44fb0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   44fb4:	e0bffd17 	ldw	r2,-12(fp)
   44fb8:	e0fffd17 	ldw	r3,-12(fp)
   44fbc:	10c00015 	stw	r3,0(r2)
   44fc0:	e0bffb17 	ldw	r2,-20(fp)
   44fc4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44fc8:	e0bffe17 	ldw	r2,-8(fp)
   44fcc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   44fd0:	0001883a 	nop
   44fd4:	e037883a 	mov	sp,fp
   44fd8:	df000017 	ldw	fp,0(sp)
   44fdc:	dec00104 	addi	sp,sp,4
   44fe0:	f800283a 	ret

00044fe4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   44fe4:	defffb04 	addi	sp,sp,-20
   44fe8:	dfc00415 	stw	ra,16(sp)
   44fec:	df000315 	stw	fp,12(sp)
   44ff0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   44ff4:	d0a00c17 	ldw	r2,-32720(gp)
   44ff8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   44ffc:	d0a6b217 	ldw	r2,-25912(gp)
   45000:	10800044 	addi	r2,r2,1
   45004:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   45008:	00002e06 	br	450c4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4500c:	e0bffd17 	ldw	r2,-12(fp)
   45010:	10800017 	ldw	r2,0(r2)
   45014:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   45018:	e0bffd17 	ldw	r2,-12(fp)
   4501c:	10800403 	ldbu	r2,16(r2)
   45020:	10803fcc 	andi	r2,r2,255
   45024:	10000426 	beq	r2,zero,45038 <alt_tick+0x54>
   45028:	d0a6b217 	ldw	r2,-25912(gp)
   4502c:	1000021e 	bne	r2,zero,45038 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   45030:	e0bffd17 	ldw	r2,-12(fp)
   45034:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   45038:	e0bffd17 	ldw	r2,-12(fp)
   4503c:	10800217 	ldw	r2,8(r2)
   45040:	d0e6b217 	ldw	r3,-25912(gp)
   45044:	18801d36 	bltu	r3,r2,450bc <alt_tick+0xd8>
   45048:	e0bffd17 	ldw	r2,-12(fp)
   4504c:	10800403 	ldbu	r2,16(r2)
   45050:	10803fcc 	andi	r2,r2,255
   45054:	1000191e 	bne	r2,zero,450bc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   45058:	e0bffd17 	ldw	r2,-12(fp)
   4505c:	10800317 	ldw	r2,12(r2)
   45060:	e0fffd17 	ldw	r3,-12(fp)
   45064:	18c00517 	ldw	r3,20(r3)
   45068:	1809883a 	mov	r4,r3
   4506c:	103ee83a 	callr	r2
   45070:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   45074:	e0bfff17 	ldw	r2,-4(fp)
   45078:	1000031e 	bne	r2,zero,45088 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4507c:	e13ffd17 	ldw	r4,-12(fp)
   45080:	0044f480 	call	44f48 <alt_alarm_stop>
   45084:	00000d06 	br	450bc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   45088:	e0bffd17 	ldw	r2,-12(fp)
   4508c:	10c00217 	ldw	r3,8(r2)
   45090:	e0bfff17 	ldw	r2,-4(fp)
   45094:	1887883a 	add	r3,r3,r2
   45098:	e0bffd17 	ldw	r2,-12(fp)
   4509c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   450a0:	e0bffd17 	ldw	r2,-12(fp)
   450a4:	10c00217 	ldw	r3,8(r2)
   450a8:	d0a6b217 	ldw	r2,-25912(gp)
   450ac:	1880032e 	bgeu	r3,r2,450bc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   450b0:	e0bffd17 	ldw	r2,-12(fp)
   450b4:	00c00044 	movi	r3,1
   450b8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   450bc:	e0bffe17 	ldw	r2,-8(fp)
   450c0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   450c4:	e0fffd17 	ldw	r3,-12(fp)
   450c8:	d0a00c04 	addi	r2,gp,-32720
   450cc:	18bfcf1e 	bne	r3,r2,4500c <__alt_data_end+0xfffd300c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   450d0:	0001883a 	nop
}
   450d4:	0001883a 	nop
   450d8:	e037883a 	mov	sp,fp
   450dc:	dfc00117 	ldw	ra,4(sp)
   450e0:	df000017 	ldw	fp,0(sp)
   450e4:	dec00204 	addi	sp,sp,8
   450e8:	f800283a 	ret

000450ec <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   450ec:	deffff04 	addi	sp,sp,-4
   450f0:	df000015 	stw	fp,0(sp)
   450f4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   450f8:	000170fa 	wrctl	ienable,zero
}
   450fc:	0001883a 	nop
   45100:	e037883a 	mov	sp,fp
   45104:	df000017 	ldw	fp,0(sp)
   45108:	dec00104 	addi	sp,sp,4
   4510c:	f800283a 	ret

00045110 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   45110:	defffa04 	addi	sp,sp,-24
   45114:	dfc00515 	stw	ra,20(sp)
   45118:	df000415 	stw	fp,16(sp)
   4511c:	df000404 	addi	fp,sp,16
   45120:	e13ffe15 	stw	r4,-8(fp)
   45124:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   45128:	e0bfff17 	ldw	r2,-4(fp)
   4512c:	10800017 	ldw	r2,0(r2)
   45130:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   45134:	e13ffe17 	ldw	r4,-8(fp)
   45138:	00403cc0 	call	403cc <strlen>
   4513c:	10800044 	addi	r2,r2,1
   45140:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   45144:	00000d06 	br	4517c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   45148:	e0bffc17 	ldw	r2,-16(fp)
   4514c:	10800217 	ldw	r2,8(r2)
   45150:	e0fffd17 	ldw	r3,-12(fp)
   45154:	180d883a 	mov	r6,r3
   45158:	e17ffe17 	ldw	r5,-8(fp)
   4515c:	1009883a 	mov	r4,r2
   45160:	00454540 	call	45454 <memcmp>
   45164:	1000021e 	bne	r2,zero,45170 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   45168:	e0bffc17 	ldw	r2,-16(fp)
   4516c:	00000706 	br	4518c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   45170:	e0bffc17 	ldw	r2,-16(fp)
   45174:	10800017 	ldw	r2,0(r2)
   45178:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4517c:	e0fffc17 	ldw	r3,-16(fp)
   45180:	e0bfff17 	ldw	r2,-4(fp)
   45184:	18bff01e 	bne	r3,r2,45148 <__alt_data_end+0xfffd3148>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   45188:	0005883a 	mov	r2,zero
}
   4518c:	e037883a 	mov	sp,fp
   45190:	dfc00117 	ldw	ra,4(sp)
   45194:	df000017 	ldw	fp,0(sp)
   45198:	dec00204 	addi	sp,sp,8
   4519c:	f800283a 	ret

000451a0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   451a0:	defffb04 	addi	sp,sp,-20
   451a4:	dfc00415 	stw	ra,16(sp)
   451a8:	df000315 	stw	fp,12(sp)
   451ac:	df000304 	addi	fp,sp,12
   451b0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   451b4:	d0a00417 	ldw	r2,-32752(gp)
   451b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   451bc:	00003106 	br	45284 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   451c0:	e0bffd17 	ldw	r2,-12(fp)
   451c4:	10800217 	ldw	r2,8(r2)
   451c8:	1009883a 	mov	r4,r2
   451cc:	00403cc0 	call	403cc <strlen>
   451d0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   451d4:	e0bffd17 	ldw	r2,-12(fp)
   451d8:	10c00217 	ldw	r3,8(r2)
   451dc:	e0bffe17 	ldw	r2,-8(fp)
   451e0:	10bfffc4 	addi	r2,r2,-1
   451e4:	1885883a 	add	r2,r3,r2
   451e8:	10800003 	ldbu	r2,0(r2)
   451ec:	10803fcc 	andi	r2,r2,255
   451f0:	1080201c 	xori	r2,r2,128
   451f4:	10bfe004 	addi	r2,r2,-128
   451f8:	10800bd8 	cmpnei	r2,r2,47
   451fc:	1000031e 	bne	r2,zero,4520c <alt_find_file+0x6c>
    {
      len -= 1;
   45200:	e0bffe17 	ldw	r2,-8(fp)
   45204:	10bfffc4 	addi	r2,r2,-1
   45208:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4520c:	e0bffe17 	ldw	r2,-8(fp)
   45210:	e0ffff17 	ldw	r3,-4(fp)
   45214:	1885883a 	add	r2,r3,r2
   45218:	10800003 	ldbu	r2,0(r2)
   4521c:	10803fcc 	andi	r2,r2,255
   45220:	1080201c 	xori	r2,r2,128
   45224:	10bfe004 	addi	r2,r2,-128
   45228:	10800be0 	cmpeqi	r2,r2,47
   4522c:	1000081e 	bne	r2,zero,45250 <alt_find_file+0xb0>
   45230:	e0bffe17 	ldw	r2,-8(fp)
   45234:	e0ffff17 	ldw	r3,-4(fp)
   45238:	1885883a 	add	r2,r3,r2
   4523c:	10800003 	ldbu	r2,0(r2)
   45240:	10803fcc 	andi	r2,r2,255
   45244:	1080201c 	xori	r2,r2,128
   45248:	10bfe004 	addi	r2,r2,-128
   4524c:	10000a1e 	bne	r2,zero,45278 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   45250:	e0bffd17 	ldw	r2,-12(fp)
   45254:	10800217 	ldw	r2,8(r2)
   45258:	e0fffe17 	ldw	r3,-8(fp)
   4525c:	180d883a 	mov	r6,r3
   45260:	e17fff17 	ldw	r5,-4(fp)
   45264:	1009883a 	mov	r4,r2
   45268:	00454540 	call	45454 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4526c:	1000021e 	bne	r2,zero,45278 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   45270:	e0bffd17 	ldw	r2,-12(fp)
   45274:	00000706 	br	45294 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   45278:	e0bffd17 	ldw	r2,-12(fp)
   4527c:	10800017 	ldw	r2,0(r2)
   45280:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45284:	e0fffd17 	ldw	r3,-12(fp)
   45288:	d0a00404 	addi	r2,gp,-32752
   4528c:	18bfcc1e 	bne	r3,r2,451c0 <__alt_data_end+0xfffd31c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   45290:	0005883a 	mov	r2,zero
}
   45294:	e037883a 	mov	sp,fp
   45298:	dfc00117 	ldw	ra,4(sp)
   4529c:	df000017 	ldw	fp,0(sp)
   452a0:	dec00204 	addi	sp,sp,8
   452a4:	f800283a 	ret

000452a8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   452a8:	defffa04 	addi	sp,sp,-24
   452ac:	dfc00515 	stw	ra,20(sp)
   452b0:	df000415 	stw	fp,16(sp)
   452b4:	dc000315 	stw	r16,12(sp)
   452b8:	df000404 	addi	fp,sp,16
   452bc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   452c0:	00bffa04 	movi	r2,-24
   452c4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   452c8:	e03ffc15 	stw	zero,-16(fp)
   452cc:	00001d06 	br	45344 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   452d0:	04000134 	movhi	r16,4
   452d4:	84181204 	addi	r16,r16,24648
   452d8:	e0bffc17 	ldw	r2,-16(fp)
   452dc:	01400304 	movi	r5,12
   452e0:	1009883a 	mov	r4,r2
   452e4:	00430dc0 	call	430dc <__mulsi3>
   452e8:	8085883a 	add	r2,r16,r2
   452ec:	10800017 	ldw	r2,0(r2)
   452f0:	1000111e 	bne	r2,zero,45338 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   452f4:	04000134 	movhi	r16,4
   452f8:	84181204 	addi	r16,r16,24648
   452fc:	e0bffc17 	ldw	r2,-16(fp)
   45300:	01400304 	movi	r5,12
   45304:	1009883a 	mov	r4,r2
   45308:	00430dc0 	call	430dc <__mulsi3>
   4530c:	8085883a 	add	r2,r16,r2
   45310:	e0fffe17 	ldw	r3,-8(fp)
   45314:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   45318:	d0e00817 	ldw	r3,-32736(gp)
   4531c:	e0bffc17 	ldw	r2,-16(fp)
   45320:	1880020e 	bge	r3,r2,4532c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   45324:	e0bffc17 	ldw	r2,-16(fp)
   45328:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   4532c:	e0bffc17 	ldw	r2,-16(fp)
   45330:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   45334:	00000606 	br	45350 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   45338:	e0bffc17 	ldw	r2,-16(fp)
   4533c:	10800044 	addi	r2,r2,1
   45340:	e0bffc15 	stw	r2,-16(fp)
   45344:	e0bffc17 	ldw	r2,-16(fp)
   45348:	10800810 	cmplti	r2,r2,32
   4534c:	103fe01e 	bne	r2,zero,452d0 <__alt_data_end+0xfffd32d0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   45350:	e0bffd17 	ldw	r2,-12(fp)
}
   45354:	e6ffff04 	addi	sp,fp,-4
   45358:	dfc00217 	ldw	ra,8(sp)
   4535c:	df000117 	ldw	fp,4(sp)
   45360:	dc000017 	ldw	r16,0(sp)
   45364:	dec00304 	addi	sp,sp,12
   45368:	f800283a 	ret

0004536c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   4536c:	defffe04 	addi	sp,sp,-8
   45370:	df000115 	stw	fp,4(sp)
   45374:	df000104 	addi	fp,sp,4
   45378:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   4537c:	e0bfff17 	ldw	r2,-4(fp)
   45380:	10bffe84 	addi	r2,r2,-6
   45384:	10c00428 	cmpgeui	r3,r2,16
   45388:	18001a1e 	bne	r3,zero,453f4 <alt_exception_cause_generated_bad_addr+0x88>
   4538c:	100690ba 	slli	r3,r2,2
   45390:	00800134 	movhi	r2,4
   45394:	1094e904 	addi	r2,r2,21412
   45398:	1885883a 	add	r2,r3,r2
   4539c:	10800017 	ldw	r2,0(r2)
   453a0:	1000683a 	jmp	r2
   453a4:	000453e4 	muli	zero,zero,4431
   453a8:	000453e4 	muli	zero,zero,4431
   453ac:	000453f4 	movhi	zero,4431
   453b0:	000453f4 	movhi	zero,4431
   453b4:	000453f4 	movhi	zero,4431
   453b8:	000453e4 	muli	zero,zero,4431
   453bc:	000453ec 	andhi	zero,zero,4431
   453c0:	000453f4 	movhi	zero,4431
   453c4:	000453e4 	muli	zero,zero,4431
   453c8:	000453e4 	muli	zero,zero,4431
   453cc:	000453f4 	movhi	zero,4431
   453d0:	000453e4 	muli	zero,zero,4431
   453d4:	000453ec 	andhi	zero,zero,4431
   453d8:	000453f4 	movhi	zero,4431
   453dc:	000453f4 	movhi	zero,4431
   453e0:	000453e4 	muli	zero,zero,4431
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   453e4:	00800044 	movi	r2,1
   453e8:	00000306 	br	453f8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   453ec:	0005883a 	mov	r2,zero
   453f0:	00000106 	br	453f8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   453f4:	0005883a 	mov	r2,zero
  }
}
   453f8:	e037883a 	mov	sp,fp
   453fc:	df000017 	ldw	fp,0(sp)
   45400:	dec00104 	addi	sp,sp,4
   45404:	f800283a 	ret

00045408 <atexit>:
   45408:	200b883a 	mov	r5,r4
   4540c:	000f883a 	mov	r7,zero
   45410:	000d883a 	mov	r6,zero
   45414:	0009883a 	mov	r4,zero
   45418:	00454d01 	jmpi	454d0 <__register_exitproc>

0004541c <exit>:
   4541c:	defffe04 	addi	sp,sp,-8
   45420:	000b883a 	mov	r5,zero
   45424:	dc000015 	stw	r16,0(sp)
   45428:	dfc00115 	stw	ra,4(sp)
   4542c:	2021883a 	mov	r16,r4
   45430:	00455e80 	call	455e8 <__call_exitprocs>
   45434:	00800134 	movhi	r2,4
   45438:	109c8a04 	addi	r2,r2,29224
   4543c:	11000017 	ldw	r4,0(r2)
   45440:	20800f17 	ldw	r2,60(r4)
   45444:	10000126 	beq	r2,zero,4544c <exit+0x30>
   45448:	103ee83a 	callr	r2
   4544c:	8009883a 	mov	r4,r16
   45450:	00457680 	call	45768 <_exit>

00045454 <memcmp>:
   45454:	01c000c4 	movi	r7,3
   45458:	3980192e 	bgeu	r7,r6,454c0 <memcmp+0x6c>
   4545c:	2144b03a 	or	r2,r4,r5
   45460:	11c4703a 	and	r2,r2,r7
   45464:	10000f26 	beq	r2,zero,454a4 <memcmp+0x50>
   45468:	20800003 	ldbu	r2,0(r4)
   4546c:	28c00003 	ldbu	r3,0(r5)
   45470:	10c0151e 	bne	r2,r3,454c8 <memcmp+0x74>
   45474:	31bfff84 	addi	r6,r6,-2
   45478:	01ffffc4 	movi	r7,-1
   4547c:	00000406 	br	45490 <memcmp+0x3c>
   45480:	20800003 	ldbu	r2,0(r4)
   45484:	28c00003 	ldbu	r3,0(r5)
   45488:	31bfffc4 	addi	r6,r6,-1
   4548c:	10c00e1e 	bne	r2,r3,454c8 <memcmp+0x74>
   45490:	21000044 	addi	r4,r4,1
   45494:	29400044 	addi	r5,r5,1
   45498:	31fff91e 	bne	r6,r7,45480 <__alt_data_end+0xfffd3480>
   4549c:	0005883a 	mov	r2,zero
   454a0:	f800283a 	ret
   454a4:	20c00017 	ldw	r3,0(r4)
   454a8:	28800017 	ldw	r2,0(r5)
   454ac:	18bfee1e 	bne	r3,r2,45468 <__alt_data_end+0xfffd3468>
   454b0:	31bfff04 	addi	r6,r6,-4
   454b4:	21000104 	addi	r4,r4,4
   454b8:	29400104 	addi	r5,r5,4
   454bc:	39bff936 	bltu	r7,r6,454a4 <__alt_data_end+0xfffd34a4>
   454c0:	303fe91e 	bne	r6,zero,45468 <__alt_data_end+0xfffd3468>
   454c4:	003ff506 	br	4549c <__alt_data_end+0xfffd349c>
   454c8:	10c5c83a 	sub	r2,r2,r3
   454cc:	f800283a 	ret

000454d0 <__register_exitproc>:
   454d0:	defffa04 	addi	sp,sp,-24
   454d4:	dc000315 	stw	r16,12(sp)
   454d8:	04000134 	movhi	r16,4
   454dc:	841c8a04 	addi	r16,r16,29224
   454e0:	80c00017 	ldw	r3,0(r16)
   454e4:	dc400415 	stw	r17,16(sp)
   454e8:	dfc00515 	stw	ra,20(sp)
   454ec:	18805217 	ldw	r2,328(r3)
   454f0:	2023883a 	mov	r17,r4
   454f4:	10003726 	beq	r2,zero,455d4 <__register_exitproc+0x104>
   454f8:	10c00117 	ldw	r3,4(r2)
   454fc:	010007c4 	movi	r4,31
   45500:	20c00e16 	blt	r4,r3,4553c <__register_exitproc+0x6c>
   45504:	1a000044 	addi	r8,r3,1
   45508:	8800221e 	bne	r17,zero,45594 <__register_exitproc+0xc4>
   4550c:	18c00084 	addi	r3,r3,2
   45510:	18c7883a 	add	r3,r3,r3
   45514:	18c7883a 	add	r3,r3,r3
   45518:	12000115 	stw	r8,4(r2)
   4551c:	10c7883a 	add	r3,r2,r3
   45520:	19400015 	stw	r5,0(r3)
   45524:	0005883a 	mov	r2,zero
   45528:	dfc00517 	ldw	ra,20(sp)
   4552c:	dc400417 	ldw	r17,16(sp)
   45530:	dc000317 	ldw	r16,12(sp)
   45534:	dec00604 	addi	sp,sp,24
   45538:	f800283a 	ret
   4553c:	00800034 	movhi	r2,0
   45540:	10800004 	addi	r2,r2,0
   45544:	10002626 	beq	r2,zero,455e0 <__register_exitproc+0x110>
   45548:	01006404 	movi	r4,400
   4554c:	d9400015 	stw	r5,0(sp)
   45550:	d9800115 	stw	r6,4(sp)
   45554:	d9c00215 	stw	r7,8(sp)
   45558:	00000000 	call	0 <__reset-0x40000>
   4555c:	d9400017 	ldw	r5,0(sp)
   45560:	d9800117 	ldw	r6,4(sp)
   45564:	d9c00217 	ldw	r7,8(sp)
   45568:	10001d26 	beq	r2,zero,455e0 <__register_exitproc+0x110>
   4556c:	81000017 	ldw	r4,0(r16)
   45570:	10000115 	stw	zero,4(r2)
   45574:	02000044 	movi	r8,1
   45578:	22405217 	ldw	r9,328(r4)
   4557c:	0007883a 	mov	r3,zero
   45580:	12400015 	stw	r9,0(r2)
   45584:	20805215 	stw	r2,328(r4)
   45588:	10006215 	stw	zero,392(r2)
   4558c:	10006315 	stw	zero,396(r2)
   45590:	883fde26 	beq	r17,zero,4550c <__alt_data_end+0xfffd350c>
   45594:	18c9883a 	add	r4,r3,r3
   45598:	2109883a 	add	r4,r4,r4
   4559c:	1109883a 	add	r4,r2,r4
   455a0:	21802215 	stw	r6,136(r4)
   455a4:	01800044 	movi	r6,1
   455a8:	12406217 	ldw	r9,392(r2)
   455ac:	30cc983a 	sll	r6,r6,r3
   455b0:	4992b03a 	or	r9,r9,r6
   455b4:	12406215 	stw	r9,392(r2)
   455b8:	21c04215 	stw	r7,264(r4)
   455bc:	01000084 	movi	r4,2
   455c0:	893fd21e 	bne	r17,r4,4550c <__alt_data_end+0xfffd350c>
   455c4:	11006317 	ldw	r4,396(r2)
   455c8:	218cb03a 	or	r6,r4,r6
   455cc:	11806315 	stw	r6,396(r2)
   455d0:	003fce06 	br	4550c <__alt_data_end+0xfffd350c>
   455d4:	18805304 	addi	r2,r3,332
   455d8:	18805215 	stw	r2,328(r3)
   455dc:	003fc606 	br	454f8 <__alt_data_end+0xfffd34f8>
   455e0:	00bfffc4 	movi	r2,-1
   455e4:	003fd006 	br	45528 <__alt_data_end+0xfffd3528>

000455e8 <__call_exitprocs>:
   455e8:	defff504 	addi	sp,sp,-44
   455ec:	df000915 	stw	fp,36(sp)
   455f0:	dd400615 	stw	r21,24(sp)
   455f4:	dc800315 	stw	r18,12(sp)
   455f8:	dfc00a15 	stw	ra,40(sp)
   455fc:	ddc00815 	stw	r23,32(sp)
   45600:	dd800715 	stw	r22,28(sp)
   45604:	dd000515 	stw	r20,20(sp)
   45608:	dcc00415 	stw	r19,16(sp)
   4560c:	dc400215 	stw	r17,8(sp)
   45610:	dc000115 	stw	r16,4(sp)
   45614:	d9000015 	stw	r4,0(sp)
   45618:	2839883a 	mov	fp,r5
   4561c:	04800044 	movi	r18,1
   45620:	057fffc4 	movi	r21,-1
   45624:	00800134 	movhi	r2,4
   45628:	109c8a04 	addi	r2,r2,29224
   4562c:	12000017 	ldw	r8,0(r2)
   45630:	45005217 	ldw	r20,328(r8)
   45634:	44c05204 	addi	r19,r8,328
   45638:	a0001c26 	beq	r20,zero,456ac <__call_exitprocs+0xc4>
   4563c:	a0800117 	ldw	r2,4(r20)
   45640:	15ffffc4 	addi	r23,r2,-1
   45644:	b8000d16 	blt	r23,zero,4567c <__call_exitprocs+0x94>
   45648:	14000044 	addi	r16,r2,1
   4564c:	8421883a 	add	r16,r16,r16
   45650:	8421883a 	add	r16,r16,r16
   45654:	84402004 	addi	r17,r16,128
   45658:	a463883a 	add	r17,r20,r17
   4565c:	a421883a 	add	r16,r20,r16
   45660:	e0001e26 	beq	fp,zero,456dc <__call_exitprocs+0xf4>
   45664:	80804017 	ldw	r2,256(r16)
   45668:	e0801c26 	beq	fp,r2,456dc <__call_exitprocs+0xf4>
   4566c:	bdffffc4 	addi	r23,r23,-1
   45670:	843fff04 	addi	r16,r16,-4
   45674:	8c7fff04 	addi	r17,r17,-4
   45678:	bd7ff91e 	bne	r23,r21,45660 <__alt_data_end+0xfffd3660>
   4567c:	00800034 	movhi	r2,0
   45680:	10800004 	addi	r2,r2,0
   45684:	10000926 	beq	r2,zero,456ac <__call_exitprocs+0xc4>
   45688:	a0800117 	ldw	r2,4(r20)
   4568c:	1000301e 	bne	r2,zero,45750 <__call_exitprocs+0x168>
   45690:	a0800017 	ldw	r2,0(r20)
   45694:	10003226 	beq	r2,zero,45760 <__call_exitprocs+0x178>
   45698:	a009883a 	mov	r4,r20
   4569c:	98800015 	stw	r2,0(r19)
   456a0:	00000000 	call	0 <__reset-0x40000>
   456a4:	9d000017 	ldw	r20,0(r19)
   456a8:	a03fe41e 	bne	r20,zero,4563c <__alt_data_end+0xfffd363c>
   456ac:	dfc00a17 	ldw	ra,40(sp)
   456b0:	df000917 	ldw	fp,36(sp)
   456b4:	ddc00817 	ldw	r23,32(sp)
   456b8:	dd800717 	ldw	r22,28(sp)
   456bc:	dd400617 	ldw	r21,24(sp)
   456c0:	dd000517 	ldw	r20,20(sp)
   456c4:	dcc00417 	ldw	r19,16(sp)
   456c8:	dc800317 	ldw	r18,12(sp)
   456cc:	dc400217 	ldw	r17,8(sp)
   456d0:	dc000117 	ldw	r16,4(sp)
   456d4:	dec00b04 	addi	sp,sp,44
   456d8:	f800283a 	ret
   456dc:	a0800117 	ldw	r2,4(r20)
   456e0:	80c00017 	ldw	r3,0(r16)
   456e4:	10bfffc4 	addi	r2,r2,-1
   456e8:	15c01426 	beq	r2,r23,4573c <__call_exitprocs+0x154>
   456ec:	80000015 	stw	zero,0(r16)
   456f0:	183fde26 	beq	r3,zero,4566c <__alt_data_end+0xfffd366c>
   456f4:	95c8983a 	sll	r4,r18,r23
   456f8:	a0806217 	ldw	r2,392(r20)
   456fc:	a5800117 	ldw	r22,4(r20)
   45700:	2084703a 	and	r2,r4,r2
   45704:	10000b26 	beq	r2,zero,45734 <__call_exitprocs+0x14c>
   45708:	a0806317 	ldw	r2,396(r20)
   4570c:	2088703a 	and	r4,r4,r2
   45710:	20000c1e 	bne	r4,zero,45744 <__call_exitprocs+0x15c>
   45714:	89400017 	ldw	r5,0(r17)
   45718:	d9000017 	ldw	r4,0(sp)
   4571c:	183ee83a 	callr	r3
   45720:	a0800117 	ldw	r2,4(r20)
   45724:	15bfbf1e 	bne	r2,r22,45624 <__alt_data_end+0xfffd3624>
   45728:	98800017 	ldw	r2,0(r19)
   4572c:	153fcf26 	beq	r2,r20,4566c <__alt_data_end+0xfffd366c>
   45730:	003fbc06 	br	45624 <__alt_data_end+0xfffd3624>
   45734:	183ee83a 	callr	r3
   45738:	003ff906 	br	45720 <__alt_data_end+0xfffd3720>
   4573c:	a5c00115 	stw	r23,4(r20)
   45740:	003feb06 	br	456f0 <__alt_data_end+0xfffd36f0>
   45744:	89000017 	ldw	r4,0(r17)
   45748:	183ee83a 	callr	r3
   4574c:	003ff406 	br	45720 <__alt_data_end+0xfffd3720>
   45750:	a0800017 	ldw	r2,0(r20)
   45754:	a027883a 	mov	r19,r20
   45758:	1029883a 	mov	r20,r2
   4575c:	003fb606 	br	45638 <__alt_data_end+0xfffd3638>
   45760:	0005883a 	mov	r2,zero
   45764:	003ffb06 	br	45754 <__alt_data_end+0xfffd3754>

00045768 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   45768:	defffd04 	addi	sp,sp,-12
   4576c:	df000215 	stw	fp,8(sp)
   45770:	df000204 	addi	fp,sp,8
   45774:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   45778:	0001883a 	nop
   4577c:	e0bfff17 	ldw	r2,-4(fp)
   45780:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   45784:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   45788:	10000226 	beq	r2,zero,45794 <_exit+0x2c>
    ALT_SIM_FAIL();
   4578c:	002af070 	cmpltui	zero,zero,43969
   45790:	00000106 	br	45798 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   45794:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   45798:	003fff06 	br	45798 <__alt_data_end+0xfffd3798>
