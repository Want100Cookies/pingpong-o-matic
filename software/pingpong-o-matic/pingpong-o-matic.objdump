
pingpong-o-matic.elf:     file format elf32-littlenios2
pingpong-o-matic.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00011578 memsz 0x00011578 flags r-x
    LOAD off    0x00012598 vaddr 0x00031598 paddr 0x000331ac align 2**12
         filesz 0x00001c14 memsz 0x00001c14 flags rw-
    LOAD off    0x00014dc0 vaddr 0x00034dc0 paddr 0x00034dc0 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010d8c  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005dc  00030fbc  00030fbc  00011fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c14  00031598  000331ac  00012598  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00034dc0  00034dc0  00014dc0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00034f20  00034f20  000141ac  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000141ac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f30  00000000  00000000  000141d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000242c3  00000000  00000000  00015100  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000939c  00000000  00000000  000393c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ba58  00000000  00000000  0004275f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000231c  00000000  00000000  0004e1b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003ced  00000000  00000000  000504d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001786c  00000000  00000000  000541c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006ba30  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018e8  00000000  00000000  0006ba70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000706f2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  000706f5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000706ff  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00070700  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00070701  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00070705  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00070709  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007070d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00070716  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007071f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  00070728  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000024  00000000  00000000  00070734  2**0
                  CONTENTS, READONLY
 29 .jdi          00004381  00000000  00000000  00070758  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007cdf7  00000000  00000000  00074ad9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00030fbc l    d  .rodata	00000000 .rodata
00031598 l    d  .rwdata	00000000 .rwdata
00034dc0 l    d  .bss	00000000 .bss
00034f20 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pingpong-o-matic_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0003105a l     O .rodata	00000010 zeroes.4404
00022d90 l     F .text	000000bc __sbprintf
0003106a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00022fa0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00024af8 l     F .text	00000008 __fp_unlock
00024b0c l     F .text	0000019c __sinit.part.1
00024ca8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00031598 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000319dc l     O .rwdata	00000020 lc_ctype_charset
000319bc l     O .rwdata	00000020 lc_message_charset
000319fc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0003109c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002817c l     F .text	000000fc __sprint_r.part.0
000311c0 l     O .rodata	00000010 zeroes.4349
000297b8 l     F .text	000000bc __sbprintf
000311d0 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002d7d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002d8ec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002d918 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002da0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002daf4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002dbe0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002ddbc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00033194 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0002e060 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002e19c l     F .text	00000034 alt_dev_reg
00031fe4 l     O .rwdata	00001060 jtag_uart
00033044 l     O .rwdata	00000120 lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002e490 l     F .text	0000020c altera_avalon_jtag_uart_irq
0002e69c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00033198 l     O .rwdata	00000004 colstart
0002ecd4 l     F .text	000000b8 lcd_write_command
0002ed8c l     F .text	000000d8 lcd_write_data
0002ee64 l     F .text	000000e8 lcd_clear_screen
0002ef4c l     F .text	00000228 lcd_repaint_screen
0002f174 l     F .text	000000e8 lcd_scroll_up
0002f25c l     F .text	000002c4 lcd_handle_escape
0002fa40 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002ff24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00030384 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000304e4 l     F .text	0000003c alt_get_errno
00030520 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00031418 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00034df4 g     O .bss	00000004 alt_instruction_exception_handler
000277c0 g     F .text	00000074 _mprec_log10
000278ac g     F .text	0000008c __any_on
00029d6c g     F .text	00000054 _isatty_r
000310a8 g     O .rodata	00000028 __mprec_tinytens
0002dcf8 g     F .text	0000007c alt_main
0002092c g     F .text	000000c0 _puts_r
00034e20 g     O .bss	00000100 alt_irq
00029dc0 g     F .text	00000060 _lseek_r
000331ac g       *ABS*	00000000 __flash_rwdata_start
0002c1b0 g     F .text	00000088 .hidden __eqdf2
00034f20 g       *ABS*	00000000 __alt_heap_start
000208f0 g     F .text	0000003c printf
00029fd8 g     F .text	0000009c _wcrtomb_r
0002803c g     F .text	0000005c __sseek
00024e58 g     F .text	00000010 __sinit
00029e80 g     F .text	00000140 __swbuf_r
0002592c g     F .text	0000007c _setlocale_r
00024cb0 g     F .text	00000078 __sfmoreglue
0002dd98 g     F .text	00000024 __malloc_unlock
000265fc g     F .text	0000015c memmove
00024e40 g     F .text	00000018 _cleanup
00026880 g     F .text	000000a8 _Balloc
0002c238 g     F .text	000000dc .hidden __gtdf2
0003090c g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00029d10 g     F .text	0000005c _fstat_r
00034dd8 g     O .bss	00000004 errno
00027fb8 g     F .text	00000008 __seofread
00034de0 g     O .bss	00000004 alt_argv
0003b164 g       *ABS*	00000000 _gp
0002e030 g     F .text	00000030 usleep
00031e64 g     O .rwdata	00000180 alt_fd_list
00030930 g     F .text	00000090 alt_find_dev
000264b4 g     F .text	00000148 memcpy
00024b00 g     F .text	0000000c _cleanup_r
0002d5f0 g     F .text	000000dc .hidden __floatsidf
00030468 g     F .text	0000007c alt_io_redirect
0002c314 g     F .text	000000f4 .hidden __ltdf2
00030fbc g       *ABS*	00000000 __DTOR_END__
000209ec g     F .text	00000014 puts
00030b8c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00027e9c g     F .text	00000074 __fpclassifyd
0002771c g     F .text	000000a4 __ratio
0002979c g     F .text	0000001c __vfiprintf_internal
0002e894 g     F .text	0000021c altera_avalon_jtag_uart_read
000208c0 g     F .text	00000030 _printf_r
0002ae78 g     F .text	00000064 .hidden __udivsi3
0002da48 g     F .text	000000ac isatty
000310f8 g     O .rodata	000000c8 __mprec_tens
000259a8 g     F .text	0000000c __locale_charset
00034dd4 g     O .bss	00000004 __malloc_top_pad
0003316c g     O .rwdata	00000004 __mb_cur_max
000259d8 g     F .text	0000000c _localeconv_r
00026cb4 g     F .text	0000003c __i2b
000252dc g     F .text	000004c8 __sfvwrite_r
00027f10 g     F .text	00000054 _sbrk_r
00029e20 g     F .text	00000060 _read_r
0003318c g     O .rwdata	00000004 alt_max_fd
00029a04 g     F .text	000000f0 _fclose_r
00024ac8 g     F .text	00000030 fflush
00034dd0 g     O .bss	00000004 __malloc_max_sbrked_mem
0002af34 g     F .text	000008ac .hidden __adddf3
000274c4 g     F .text	0000010c __b2d
0002a7bc g     F .text	000005c4 .hidden __umoddi3
0002dc1c g     F .text	000000dc lseek
00033164 g     O .rwdata	00000004 _global_impure_ptr
00027938 g     F .text	00000564 _realloc_r
00034f20 g       *ABS*	00000000 __bss_end
00030294 g     F .text	000000f0 alt_iic_isr_register
00030804 g     F .text	00000108 alt_tick
0002a1c0 g     F .text	000005fc .hidden __udivdi3
00029c6c g     F .text	00000024 _fputwc_r
000310d0 g     O .rodata	00000028 __mprec_bigtens
00026a98 g     F .text	00000104 __s2b
0002d6cc g     F .text	000000a8 .hidden __floatunsidf
00027204 g     F .text	00000060 __mcmp
00024e78 g     F .text	00000018 __fp_lock_all
00030248 g     F .text	0000004c alt_ic_irq_enabled
00030768 g     F .text	0000009c alt_alarm_stop
00034de8 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
00031e3c g     O .rwdata	00000028 alt_dev_null
0002ff04 g     F .text	00000020 alt_dcache_flush_all
00026b9c g     F .text	00000068 __hi0bits
0002d570 g     F .text	00000080 .hidden __fixdfsi
000331ac g       *ABS*	00000000 __ram_rwdata_end
00033184 g     O .rwdata	00000008 alt_dev_list
0002e09c g     F .text	00000100 write
00031598 g       *ABS*	00000000 __ram_rodata_end
0002d954 g     F .text	000000b8 fstat
0002c314 g     F .text	000000f4 .hidden __ledf2
00026f7c g     F .text	00000140 __pow5mult
00028290 g     F .text	0000150c ___vfiprintf_internal_r
00034dc8 g     O .bss	00000004 __nlocale_changed
0002aedc g     F .text	00000058 .hidden __umodsi3
00034f20 g       *ABS*	00000000 end
0002f520 g     F .text	00000520 altera_avalon_lcd_16207_write
0002e3d0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00030fbc g       *ABS*	00000000 __CTOR_LIST__
000386a0 g       *ABS*	00000000 __alt_stack_pointer
0002d774 g     F .text	00000064 .hidden __clzsi2
0002eab0 g     F .text	00000224 altera_avalon_jtag_uart_write
00024e68 g     F .text	00000004 __sfp_lock_acquire
000263d0 g     F .text	000000e4 memchr
00020a98 g     F .text	000022dc ___vfprintf_internal_r
00024fcc g     F .text	00000310 _free_r
000259b4 g     F .text	00000010 __locale_mb_cur_max
00030e08 g     F .text	00000180 __call_exitprocs
00034dc4 g     O .bss	00000004 __mlocale_changed
00033170 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
00034dec g     O .bss	00000004 _alt_tick_rate
000270bc g     F .text	00000148 __lshift
00034df0 g     O .bss	00000004 _alt_nticks
0002ddf8 g     F .text	00000104 read
0002e208 g     F .text	00000064 alt_sys_init
00030cf0 g     F .text	00000118 __register_exitproc
00026cf0 g     F .text	0000028c __multiply
0002e73c g     F .text	00000068 altera_avalon_jtag_uart_close
00020898 g     F .text	00000028 .hidden __mulsi3
00031598 g       *ABS*	00000000 __ram_rwdata_start
00030fbc g       *ABS*	00000000 __ram_rodata_start
00034df8 g     O .bss	00000028 __malloc_current_mallinfo
000275d0 g     F .text	0000014c __d2b
0002e26c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00030ac8 g     F .text	000000c4 alt_get_fd
0002fdac g     F .text	00000158 alt_busy_sleep
000298d4 g     F .text	00000054 _close_r
00030c74 g     F .text	0000007c memcmp
0002e32c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00034f20 g       *ABS*	00000000 __alt_stack_base
0002e37c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022e4c g     F .text	00000154 __swsetup_r
0002b7e0 g     F .text	000009d0 .hidden __divdf3
00024d28 g     F .text	00000118 __sfp
00027834 g     F .text	00000078 __copybits
00031a34 g     O .rwdata	00000408 __malloc_av_
00024e74 g     F .text	00000004 __sinit_lock_release
0002c408 g     F .text	0000086c .hidden __muldf3
00027f64 g     F .text	00000054 __sread
000309c0 g     F .text	00000108 alt_find_file
0002ff60 g     F .text	000000a4 alt_dev_llist_insert
0002dd74 g     F .text	00000024 __malloc_lock
0002df80 g     F .text	000000b0 sbrk
00024a6c g     F .text	0000005c _fflush_r
00029928 g     F .text	000000dc _calloc_r
00034dc0 g       *ABS*	00000000 __bss_start
00026758 g     F .text	00000128 memset
0002026c g     F .text	00000108 lcd_init
000206b8 g     F .text	000001e0 main
00034de4 g     O .bss	00000004 alt_envp
00034dcc g     O .bss	00000004 __malloc_max_total_mem
0002e2cc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00029fc0 g     F .text	00000018 __swbuf
0002faec g     F .text	00000134 altera_avalon_lcd_16207_init
00028098 g     F .text	00000008 __sclose
000386a0 g       *ABS*	00000000 __alt_heap_limit
00029af4 g     F .text	00000014 fclose
000231c8 g     F .text	00001688 _dtoa_r
00025bc4 g     F .text	0000080c _malloc_r
0002a134 g     F .text	00000030 __ascii_wctomb
00033190 g     O .rwdata	00000004 alt_errno
000257a4 g     F .text	000000c4 _fwalk
0002ad80 g     F .text	00000084 .hidden __divsi3
00024ea8 g     F .text	00000124 _malloc_trim_r
00030fbc g       *ABS*	00000000 __CTOR_END__
000280a0 g     F .text	000000dc strcmp
00030fbc g       *ABS*	00000000 __flash_rodata_start
00020374 g     F .text	000001cc test_lcd
00030fbc g       *ABS*	00000000 __DTOR_LIST__
0002c1b0 g     F .text	00000088 .hidden __nedf2
0002e1d0 g     F .text	00000038 alt_irq_init
0002defc g     F .text	00000084 alt_release_fd
000311e0 g     O .rodata	00000100 .hidden __clz_tab
00034dc0 g     O .bss	00000004 _PathLocale
00030c28 g     F .text	00000014 atexit
00029874 g     F .text	00000060 _write_r
000259e4 g     F .text	00000018 setlocale
00033168 g     O .rwdata	00000004 _impure_ptr
00034ddc g     O .bss	00000004 alt_argc
00024850 g     F .text	0000021c __sflush_r
00030064 g     F .text	00000060 _do_dtors
000259d0 g     F .text	00000008 __locale_cjk_lang
00020020 g       .exceptions	00000000 alt_irq_entry
00027460 g     F .text	00000064 __ulp
00024e90 g     F .text	00000018 __fp_unlock_all
0002fc20 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
0003317c g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
000259fc g     F .text	0000000c localeconv
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
000300e4 g     F .text	00000050 alt_ic_isr_register
000331ac g       *ABS*	00000000 _edata
00034f20 g       *ABS*	00000000 _end
00029b08 g     F .text	00000164 __fputwc
00020230 g       *ABS*	00000000 __ram_exceptions_end
0002e7a4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000301bc g     F .text	0000008c alt_ic_irq_disable
00027fc0 g     F .text	0000007c __swrite
00033174 g     O .rwdata	00000004 __malloc_trim_threshold
000259c4 g     F .text	0000000c __locale_msgcharset
00030c3c g     F .text	00000038 exit
00025868 g     F .text	000000c4 _fwalk_reent
00027264 g     F .text	000001fc __mdiff
0002ae04 g     F .text	00000074 .hidden __modsi3
000331a8 g     O .rwdata	00000004 __ctype_ptr__
000386a0 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00024e6c g     F .text	00000004 __sfp_lock_release
00020540 g     F .text	000000cc stack_push
00031317 g     O .rodata	00000101 _ctype_
00030f88 g     F .text	00000034 _exit
0002fc80 g     F .text	0000012c alt_alarm_start
00025a08 g     F .text	000001bc __smakebuf_r
00020a00 g     F .text	00000098 strlen
0003060c g     F .text	0000015c open
0002c238 g     F .text	000000dc .hidden __gedf2
0002060c g     F .text	000000ac stack_print
00033178 g     O .rwdata	00000004 __wctomb
00028278 g     F .text	00000018 __sprint_r
000300c4 g     F .text	00000020 alt_icache_flush_all
0003319c g     O .rwdata	00000004 alt_priority_mask
00030134 g     F .text	00000088 alt_ic_irq_enable
00022d74 g     F .text	0000001c __vfprintf_internal
0002a164 g     F .text	0000005c _wctomb_r
0002cc74 g     F .text	000008fc .hidden __subdf3
00026c04 g     F .text	000000b0 __lo0bits
000331a0 g     O .rwdata	00000008 alt_alarm_list
00030004 g     F .text	00000060 _do_ctors
0002a074 g     F .text	000000c0 wcrtomb
0002d814 g     F .text	000000d8 close
0002db5c g     F .text	00000084 alt_load
00029c90 g     F .text	00000080 fputwc
00024e70 g     F .text	00000004 __sinit_lock_acquire
00026950 g     F .text	00000148 __multadd
00026928 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10938804 	addi	r2,r2,20000
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10938804 	addi	r2,r2,20000
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <_gp+0xfffe4fc8>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <_gp+0xfffe4fbc>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a72417 	ldw	r2,-25456(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a72417 	ldw	r2,-25456(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
   20238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2023c:	d6ac5914 	ori	gp,gp,45412
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20244:	10937014 	ori	r2,r2,19904

    movhi r3, %hi(__bss_end)
   20248:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   2024c:	18d3c814 	ori	r3,r3,20256

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <_gp+0xfffe50f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	002db5c0 	call	2db5c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	002dcf80 	call	2dcf8 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <_gp+0xfffe5104>

0002026c <lcd_init>:
#define LCD_WR_DATA_REG 2
#define LCD_RD_DATA_REG 3

#define STACK_SIZE 12

void lcd_init(void) {
   2026c:	defffe04 	addi	sp,sp,-8
   20270:	dfc00115 	stw	ra,4(sp)
   20274:	df000015 	stw	fp,0(sp)
   20278:	d839883a 	mov	fp,sp
	usleep(15000); /* Wait for more than 15 ms before init */
   2027c:	010ea604 	movi	r4,15000
   20280:	002e0300 	call	2e030 <usleep>
	/* Set function code four times -- 8-bit, 2 line, 5x7 mode */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   20284:	00c00e04 	movi	r3,56
   20288:	00800134 	movhi	r2,4
   2028c:	10843404 	addi	r2,r2,4304
   20290:	10c00035 	stwio	r3,0(r2)
	usleep(4100); /* Wait for more than 4.1 ms */
   20294:	01040104 	movi	r4,4100
   20298:	002e0300 	call	2e030 <usleep>
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   2029c:	00c00e04 	movi	r3,56
   202a0:	00800134 	movhi	r2,4
   202a4:	10843404 	addi	r2,r2,4304
   202a8:	10c00035 	stwio	r3,0(r2)
	usleep(100); /* Wait for more than 100 us */
   202ac:	01001904 	movi	r4,100
   202b0:	002e0300 	call	2e030 <usleep>
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   202b4:	00c00e04 	movi	r3,56
   202b8:	00800134 	movhi	r2,4
   202bc:	10843404 	addi	r2,r2,4304
   202c0:	10c00035 	stwio	r3,0(r2)
	usleep(5000); /* Wait for more than 100 us */
   202c4:	0104e204 	movi	r4,5000
   202c8:	002e0300 	call	2e030 <usleep>
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   202cc:	00c00e04 	movi	r3,56
   202d0:	00800134 	movhi	r2,4
   202d4:	10843404 	addi	r2,r2,4304
   202d8:	10c00035 	stwio	r3,0(r2)
	usleep(100); /* Wait for more than 100 us */
   202dc:	01001904 	movi	r4,100
   202e0:	002e0300 	call	2e030 <usleep>

	/* Set Display to OFF*/
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x08);
   202e4:	00c00204 	movi	r3,8
   202e8:	00800134 	movhi	r2,4
   202ec:	10843404 	addi	r2,r2,4304
   202f0:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   202f4:	01001904 	movi	r4,100
   202f8:	002e0300 	call	2e030 <usleep>

	/* Set Display to ON */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x0C);
   202fc:	00c00304 	movi	r3,12
   20300:	00800134 	movhi	r2,4
   20304:	10843404 	addi	r2,r2,4304
   20308:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   2030c:	01001904 	movi	r4,100
   20310:	002e0300 	call	2e030 <usleep>

	/* Set Entry Mode -- Cursor increment, display doesn't shift */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x06);
   20314:	00c00184 	movi	r3,6
   20318:	00800134 	movhi	r2,4
   2031c:	10843404 	addi	r2,r2,4304
   20320:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   20324:	01001904 	movi	r4,100
   20328:	002e0300 	call	2e030 <usleep>

	/* Set the Cursor to the home position */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x02);
   2032c:	00c00084 	movi	r3,2
   20330:	00800134 	movhi	r2,4
   20334:	10843404 	addi	r2,r2,4304
   20338:	10c00035 	stwio	r3,0(r2)
	usleep(2000);
   2033c:	0101f404 	movi	r4,2000
   20340:	002e0300 	call	2e030 <usleep>

	/* Display clear */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x01);
   20344:	00c00044 	movi	r3,1
   20348:	00800134 	movhi	r2,4
   2034c:	10843404 	addi	r2,r2,4304
   20350:	10c00035 	stwio	r3,0(r2)
	usleep(2000);
   20354:	0101f404 	movi	r4,2000
   20358:	002e0300 	call	2e030 <usleep>
}
   2035c:	0001883a 	nop
   20360:	e037883a 	mov	sp,fp
   20364:	dfc00117 	ldw	ra,4(sp)
   20368:	df000017 	ldw	fp,0(sp)
   2036c:	dec00204 	addi	sp,sp,8
   20370:	f800283a 	ret

00020374 <test_lcd>:

alt_u32 test_lcd(void) {
   20374:	defff504 	addi	sp,sp,-44
   20378:	dfc00a15 	stw	ra,40(sp)
   2037c:	df000915 	stw	fp,36(sp)
   20380:	df000904 	addi	fp,sp,36
	int i;
	char message[17] = "Hello World...  ";
   20384:	009b1b34 	movhi	r2,27756
   20388:	10995204 	addi	r2,r2,25928
   2038c:	e0bff815 	stw	r2,-32(fp)
   20390:	009bd5f4 	movhi	r2,28503
   20394:	10881bc4 	addi	r2,r2,8303
   20398:	e0bff915 	stw	r2,-28(fp)
   2039c:	008b9934 	movhi	r2,11876
   203a0:	109b1c84 	addi	r2,r2,27762
   203a4:	e0bffa15 	stw	r2,-24(fp)
   203a8:	00880834 	movhi	r2,8224
   203ac:	108b8b84 	addi	r2,r2,11822
   203b0:	e0bffb15 	stw	r2,-20(fp)
   203b4:	e03ffc05 	stb	zero,-16(fp)
	char done[15] = "Done! ";
   203b8:	00801104 	movi	r2,68
   203bc:	e0bffc45 	stb	r2,-15(fp)
   203c0:	00801bc4 	movi	r2,111
   203c4:	e0bffc85 	stb	r2,-14(fp)
   203c8:	00801b84 	movi	r2,110
   203cc:	e0bffcc5 	stb	r2,-13(fp)
   203d0:	00801944 	movi	r2,101
   203d4:	e0bffd05 	stb	r2,-12(fp)
   203d8:	00800844 	movi	r2,33
   203dc:	e0bffd45 	stb	r2,-11(fp)
   203e0:	00800804 	movi	r2,32
   203e4:	e0bffd85 	stb	r2,-10(fp)
   203e8:	e03ffdc5 	stb	zero,-9(fp)
   203ec:	e03ffe05 	stb	zero,-8(fp)
   203f0:	e03ffe45 	stb	zero,-7(fp)
   203f4:	e03ffe85 	stb	zero,-6(fp)
   203f8:	e03ffec5 	stb	zero,-5(fp)
   203fc:	e03fff05 	stb	zero,-4(fp)
   20400:	e03fff45 	stb	zero,-3(fp)
   20404:	e03fff85 	stb	zero,-2(fp)
   20408:	e03fffc5 	stb	zero,-1(fp)

	/* Write a simple message on the first line. */
	for (i = 0; i < 17; i++) {
   2040c:	e03ff715 	stw	zero,-36(fp)
   20410:	00000f06 	br	20450 <test_lcd+0xdc>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, message[i]);
   20414:	e0fff804 	addi	r3,fp,-32
   20418:	e0bff717 	ldw	r2,-36(fp)
   2041c:	1885883a 	add	r2,r3,r2
   20420:	10800003 	ldbu	r2,0(r2)
   20424:	10c03fcc 	andi	r3,r2,255
   20428:	18c0201c 	xori	r3,r3,128
   2042c:	18ffe004 	addi	r3,r3,-128
   20430:	00800134 	movhi	r2,4
   20434:	10843604 	addi	r2,r2,4312
   20438:	10c00035 	stwio	r3,0(r2)
		usleep(100);
   2043c:	01001904 	movi	r4,100
   20440:	002e0300 	call	2e030 <usleep>
	int i;
	char message[17] = "Hello World...  ";
	char done[15] = "Done! ";

	/* Write a simple message on the first line. */
	for (i = 0; i < 17; i++) {
   20444:	e0bff717 	ldw	r2,-36(fp)
   20448:	10800044 	addi	r2,r2,1
   2044c:	e0bff715 	stw	r2,-36(fp)
   20450:	e0bff717 	ldw	r2,-36(fp)
   20454:	10800450 	cmplti	r2,r2,17
   20458:	103fee1e 	bne	r2,zero,20414 <_gp+0xfffe52b0>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, message[i]);
		usleep(100);
	}
	/* Count along the bottom row */
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0xC0);
   2045c:	00c03004 	movi	r3,192
   20460:	00800134 	movhi	r2,4
   20464:	10843404 	addi	r2,r2,4304
   20468:	10c00035 	stwio	r3,0(r2)
	usleep(1000);
   2046c:	0100fa04 	movi	r4,1000
   20470:	002e0300 	call	2e030 <usleep>

	/* Display Count */
	for (i = 0; i < 10; i++) {
   20474:	e03ff715 	stw	zero,-36(fp)
   20478:	00000e06 	br	204b4 <test_lcd+0x140>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, (char )(i + 0x30));
   2047c:	e0bff717 	ldw	r2,-36(fp)
   20480:	10800c04 	addi	r2,r2,48
   20484:	10c03fcc 	andi	r3,r2,255
   20488:	18c0201c 	xori	r3,r3,128
   2048c:	18ffe004 	addi	r3,r3,-128
   20490:	00800134 	movhi	r2,4
   20494:	10843604 	addi	r2,r2,4312
   20498:	10c00035 	stwio	r3,0(r2)
		usleep(100000); /* Wait 0.5 sec */
   2049c:	010000b4 	movhi	r4,2
   204a0:	2121a804 	addi	r4,r4,-31072
   204a4:	002e0300 	call	2e030 <usleep>
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0xC0);
	usleep(1000);

	/* Display Count */
	for (i = 0; i < 10; i++) {
   204a8:	e0bff717 	ldw	r2,-36(fp)
   204ac:	10800044 	addi	r2,r2,1
   204b0:	e0bff715 	stw	r2,-36(fp)
   204b4:	e0bff717 	ldw	r2,-36(fp)
   204b8:	10800290 	cmplti	r2,r2,10
   204bc:	103fef1e 	bne	r2,zero,2047c <_gp+0xfffe5318>
		usleep(100000); /* Wait 0.5 sec */
	}

	/* Write "Done!" message on first line. */
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x80);
   204c0:	00c02004 	movi	r3,128
   204c4:	00800134 	movhi	r2,4
   204c8:	10843404 	addi	r2,r2,4304
   204cc:	10c00035 	stwio	r3,0(r2)
	usleep(1000);
   204d0:	0100fa04 	movi	r4,1000
   204d4:	002e0300 	call	2e030 <usleep>

	/* Write data */
	for (i = 0; i < 14; i++) {
   204d8:	e03ff715 	stw	zero,-36(fp)
   204dc:	00000f06 	br	2051c <test_lcd+0x1a8>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, done[i]);
   204e0:	e0fffc44 	addi	r3,fp,-15
   204e4:	e0bff717 	ldw	r2,-36(fp)
   204e8:	1885883a 	add	r2,r3,r2
   204ec:	10800003 	ldbu	r2,0(r2)
   204f0:	10c03fcc 	andi	r3,r2,255
   204f4:	18c0201c 	xori	r3,r3,128
   204f8:	18ffe004 	addi	r3,r3,-128
   204fc:	00800134 	movhi	r2,4
   20500:	10843604 	addi	r2,r2,4312
   20504:	10c00035 	stwio	r3,0(r2)
		usleep(100);
   20508:	01001904 	movi	r4,100
   2050c:	002e0300 	call	2e030 <usleep>
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x80);
	usleep(1000);

	/* Write data */
	for (i = 0; i < 14; i++) {
   20510:	e0bff717 	ldw	r2,-36(fp)
   20514:	10800044 	addi	r2,r2,1
   20518:	e0bff715 	stw	r2,-36(fp)
   2051c:	e0bff717 	ldw	r2,-36(fp)
   20520:	10800390 	cmplti	r2,r2,14
   20524:	103fee1e 	bne	r2,zero,204e0 <_gp+0xfffe537c>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, done[i]);
		usleep(100);
	}
	return (0);
   20528:	0005883a 	mov	r2,zero
}
   2052c:	e037883a 	mov	sp,fp
   20530:	dfc00117 	ldw	ra,4(sp)
   20534:	df000017 	ldw	fp,0(sp)
   20538:	dec00204 	addi	sp,sp,8
   2053c:	f800283a 	ret

00020540 <stack_push>:
	int y;
	char up; // Is the coordinate going up? 1/0
	char right; // Is the coordinate going right? 1/0
};

void stack_push(struct Coordinate stack[6], struct Coordinate c) {
   20540:	defff804 	addi	sp,sp,-32
   20544:	dfc00715 	stw	ra,28(sp)
   20548:	df000615 	stw	fp,24(sp)
   2054c:	dc000515 	stw	r16,20(sp)
   20550:	df000604 	addi	fp,sp,24
   20554:	e13ffb15 	stw	r4,-20(fp)
   20558:	e17ffc15 	stw	r5,-16(fp)
   2055c:	e1bffd15 	stw	r6,-12(fp)
   20560:	e1fffe15 	stw	r7,-8(fp)
	int i = STACK_SIZE - 1;
   20564:	008002c4 	movi	r2,11
   20568:	e0bffa15 	stw	r2,-24(fp)
	while (i > 0) {
   2056c:	00001706 	br	205cc <stack_push+0x8c>
		stack[i] = stack[--i];
   20570:	e0bffa17 	ldw	r2,-24(fp)
   20574:	01400304 	movi	r5,12
   20578:	1009883a 	mov	r4,r2
   2057c:	00208980 	call	20898 <__mulsi3>
   20580:	1007883a 	mov	r3,r2
   20584:	e0bffb17 	ldw	r2,-20(fp)
   20588:	10e1883a 	add	r16,r2,r3
   2058c:	e0bffa17 	ldw	r2,-24(fp)
   20590:	10bfffc4 	addi	r2,r2,-1
   20594:	e0bffa15 	stw	r2,-24(fp)
   20598:	e0bffa17 	ldw	r2,-24(fp)
   2059c:	01400304 	movi	r5,12
   205a0:	1009883a 	mov	r4,r2
   205a4:	00208980 	call	20898 <__mulsi3>
   205a8:	1007883a 	mov	r3,r2
   205ac:	e0bffb17 	ldw	r2,-20(fp)
   205b0:	10c5883a 	add	r2,r2,r3
   205b4:	10c00017 	ldw	r3,0(r2)
   205b8:	80c00015 	stw	r3,0(r16)
   205bc:	10c00117 	ldw	r3,4(r2)
   205c0:	80c00115 	stw	r3,4(r16)
   205c4:	10800217 	ldw	r2,8(r2)
   205c8:	80800215 	stw	r2,8(r16)
	char right; // Is the coordinate going right? 1/0
};

void stack_push(struct Coordinate stack[6], struct Coordinate c) {
	int i = STACK_SIZE - 1;
	while (i > 0) {
   205cc:	e0bffa17 	ldw	r2,-24(fp)
   205d0:	00bfe716 	blt	zero,r2,20570 <_gp+0xfffe540c>
		stack[i] = stack[--i];
	}

	stack[0] = c;
   205d4:	e0bffb17 	ldw	r2,-20(fp)
   205d8:	e0fffc17 	ldw	r3,-16(fp)
   205dc:	10c00015 	stw	r3,0(r2)
   205e0:	e0fffd17 	ldw	r3,-12(fp)
   205e4:	10c00115 	stw	r3,4(r2)
   205e8:	e0fffe17 	ldw	r3,-8(fp)
   205ec:	10c00215 	stw	r3,8(r2)
}
   205f0:	0001883a 	nop
   205f4:	e6ffff04 	addi	sp,fp,-4
   205f8:	dfc00217 	ldw	ra,8(sp)
   205fc:	df000117 	ldw	fp,4(sp)
   20600:	dc000017 	ldw	r16,0(sp)
   20604:	dec00304 	addi	sp,sp,12
   20608:	f800283a 	ret

0002060c <stack_print>:

void stack_print(struct Coordinate stack[6]) {
   2060c:	defffb04 	addi	sp,sp,-20
   20610:	dfc00415 	stw	ra,16(sp)
   20614:	df000315 	stw	fp,12(sp)
   20618:	dc000215 	stw	r16,8(sp)
   2061c:	df000304 	addi	fp,sp,12
   20620:	e13ffe15 	stw	r4,-8(fp)
	for (int i = 0; i < STACK_SIZE; i++) {
   20624:	e03ffd15 	stw	zero,-12(fp)
   20628:	00001906 	br	20690 <stack_print+0x84>
		printf("#%d %02dx%02d | ", i, stack[i].x, stack[i].y);
   2062c:	e0bffd17 	ldw	r2,-12(fp)
   20630:	01400304 	movi	r5,12
   20634:	1009883a 	mov	r4,r2
   20638:	00208980 	call	20898 <__mulsi3>
   2063c:	1007883a 	mov	r3,r2
   20640:	e0bffe17 	ldw	r2,-8(fp)
   20644:	10c5883a 	add	r2,r2,r3
   20648:	14000017 	ldw	r16,0(r2)
   2064c:	e0bffd17 	ldw	r2,-12(fp)
   20650:	01400304 	movi	r5,12
   20654:	1009883a 	mov	r4,r2
   20658:	00208980 	call	20898 <__mulsi3>
   2065c:	1007883a 	mov	r3,r2
   20660:	e0bffe17 	ldw	r2,-8(fp)
   20664:	10c5883a 	add	r2,r2,r3
   20668:	10800117 	ldw	r2,4(r2)
   2066c:	100f883a 	mov	r7,r2
   20670:	800d883a 	mov	r6,r16
   20674:	e17ffd17 	ldw	r5,-12(fp)
   20678:	010000f4 	movhi	r4,3
   2067c:	2103ef04 	addi	r4,r4,4028
   20680:	00208f00 	call	208f0 <printf>

	stack[0] = c;
}

void stack_print(struct Coordinate stack[6]) {
	for (int i = 0; i < STACK_SIZE; i++) {
   20684:	e0bffd17 	ldw	r2,-12(fp)
   20688:	10800044 	addi	r2,r2,1
   2068c:	e0bffd15 	stw	r2,-12(fp)
   20690:	e0bffd17 	ldw	r2,-12(fp)
   20694:	10800310 	cmplti	r2,r2,12
   20698:	103fe41e 	bne	r2,zero,2062c <_gp+0xfffe54c8>
		printf("#%d %02dx%02d | ", i, stack[i].x, stack[i].y);
	}
}
   2069c:	0001883a 	nop
   206a0:	e6ffff04 	addi	sp,fp,-4
   206a4:	dfc00217 	ldw	ra,8(sp)
   206a8:	df000117 	ldw	fp,4(sp)
   206ac:	dc000017 	ldw	r16,0(sp)
   206b0:	dec00304 	addi	sp,sp,12
   206b4:	f800283a 	ret

000206b8 <main>:

int main() {
   206b8:	deffd304 	addi	sp,sp,-180
   206bc:	dfc02c15 	stw	ra,176(sp)
   206c0:	df002b15 	stw	fp,172(sp)
   206c4:	df002b04 	addi	fp,sp,172
	lcd_init();
   206c8:	002026c0 	call	2026c <lcd_init>
	test_lcd();
   206cc:	00203740 	call	20374 <test_lcd>

	printf("Starting Nios II microprocessor...\n");
   206d0:	010000f4 	movhi	r4,3
   206d4:	2103f404 	addi	r4,r4,4048
   206d8:	00209ec0 	call	209ec <puts>

	IOWR_ALTERA_AVALON_PIO_DATA(SCORE_A_BASE, 66);
   206dc:	00c01084 	movi	r3,66
   206e0:	00800134 	movhi	r2,4
   206e4:	10841404 	addi	r2,r2,4176
   206e8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(SCORE_B_BASE, 66);
   206ec:	00c01084 	movi	r3,66
   206f0:	00800134 	movhi	r2,4
   206f4:	10841004 	addi	r2,r2,4160
   206f8:	10c00035 	stwio	r3,0(r2)

//	int delay;
	struct Coordinate current;
	struct Coordinate stack[STACK_SIZE];

	for (int i = 0; i < STACK_SIZE; i++) {
   206fc:	e03fd515 	stw	zero,-172(fp)
   20700:	00001306 	br	20750 <main+0x98>
		stack[i].x = 0;
   20704:	e0bfd517 	ldw	r2,-172(fp)
   20708:	01400304 	movi	r5,12
   2070c:	1009883a 	mov	r4,r2
   20710:	00208980 	call	20898 <__mulsi3>
   20714:	e0ffd504 	addi	r3,fp,-172
   20718:	1885883a 	add	r2,r3,r2
   2071c:	10800704 	addi	r2,r2,28
   20720:	10000015 	stw	zero,0(r2)
		stack[i].y = 0;
   20724:	e0bfd517 	ldw	r2,-172(fp)
   20728:	01400304 	movi	r5,12
   2072c:	1009883a 	mov	r4,r2
   20730:	00208980 	call	20898 <__mulsi3>
   20734:	e0ffd504 	addi	r3,fp,-172
   20738:	1885883a 	add	r2,r3,r2
   2073c:	10800804 	addi	r2,r2,32
   20740:	10000015 	stw	zero,0(r2)

//	int delay;
	struct Coordinate current;
	struct Coordinate stack[STACK_SIZE];

	for (int i = 0; i < STACK_SIZE; i++) {
   20744:	e0bfd517 	ldw	r2,-172(fp)
   20748:	10800044 	addi	r2,r2,1
   2074c:	e0bfd515 	stw	r2,-172(fp)
   20750:	e0bfd517 	ldw	r2,-172(fp)
   20754:	10800310 	cmplti	r2,r2,12
   20758:	103fea1e 	bne	r2,zero,20704 <_gp+0xfffe55a0>
		stack[i].x = 0;
		stack[i].y = 0;
	}

	while (1) {
		current.x = IORD_ALTERA_AVALON_PIO_DATA(BALL_X_BASE);
   2075c:	00800134 	movhi	r2,4
   20760:	10840c04 	addi	r2,r2,4144
   20764:	10800037 	ldwio	r2,0(r2)
   20768:	e0bfd915 	stw	r2,-156(fp)
		current.y = IORD_ALTERA_AVALON_PIO_DATA(BALL_Y_BASE);
   2076c:	00800134 	movhi	r2,4
   20770:	10840804 	addi	r2,r2,4128
   20774:	10800037 	ldwio	r2,0(r2)
   20778:	e0bfda15 	stw	r2,-152(fp)

		if (current.x != stack[0].x && current.y != stack[0].y) {
   2077c:	e0ffd917 	ldw	r3,-156(fp)
   20780:	e0bfdc17 	ldw	r2,-144(fp)
   20784:	18bff526 	beq	r3,r2,2075c <_gp+0xfffe55f8>
   20788:	e0ffda17 	ldw	r3,-152(fp)
   2078c:	e0bfdd17 	ldw	r2,-140(fp)
   20790:	18bff226 	beq	r3,r2,2075c <_gp+0xfffe55f8>
			stack_push(&stack, current);
   20794:	e0bfdc04 	addi	r2,fp,-144
   20798:	e17fd917 	ldw	r5,-156(fp)
   2079c:	e1bfda17 	ldw	r6,-152(fp)
   207a0:	e1ffdb17 	ldw	r7,-148(fp)
   207a4:	1009883a 	mov	r4,r2
   207a8:	00205400 	call	20540 <stack_push>
//			stack_print(&stack);

			stack[0].up = stack[0].x > stack[1].x;
   207ac:	e0bfdc17 	ldw	r2,-144(fp)
   207b0:	e0ffdf17 	ldw	r3,-132(fp)
   207b4:	1884803a 	cmplt	r2,r3,r2
   207b8:	e0bfde05 	stb	r2,-136(fp)
			stack[0].right = stack[0].y > stack[1].y;
   207bc:	e0bfdd17 	ldw	r2,-140(fp)
   207c0:	e0ffe017 	ldw	r3,-128(fp)
   207c4:	1884803a 	cmplt	r2,r3,r2
   207c8:	e0bfde45 	stb	r2,-135(fp)

			int up = 0;
   207cc:	e03fd615 	stw	zero,-168(fp)
			int right = 0;
   207d0:	e03fd715 	stw	zero,-164(fp)

			for (int i = 0; i < STACK_SIZE; i++) {
   207d4:	e03fd815 	stw	zero,-160(fp)
   207d8:	00001f06 	br	20858 <main+0x1a0>
				up = up + stack[i].up;
   207dc:	e0bfd817 	ldw	r2,-160(fp)
   207e0:	01400304 	movi	r5,12
   207e4:	1009883a 	mov	r4,r2
   207e8:	00208980 	call	20898 <__mulsi3>
   207ec:	e0ffd504 	addi	r3,fp,-172
   207f0:	1885883a 	add	r2,r3,r2
   207f4:	10800904 	addi	r2,r2,36
   207f8:	10800003 	ldbu	r2,0(r2)
   207fc:	10803fcc 	andi	r2,r2,255
   20800:	1080201c 	xori	r2,r2,128
   20804:	10bfe004 	addi	r2,r2,-128
   20808:	e0ffd617 	ldw	r3,-168(fp)
   2080c:	1885883a 	add	r2,r3,r2
   20810:	e0bfd615 	stw	r2,-168(fp)
				right = right + stack[i].right;
   20814:	e0bfd817 	ldw	r2,-160(fp)
   20818:	01400304 	movi	r5,12
   2081c:	1009883a 	mov	r4,r2
   20820:	00208980 	call	20898 <__mulsi3>
   20824:	e0ffd504 	addi	r3,fp,-172
   20828:	1885883a 	add	r2,r3,r2
   2082c:	10800944 	addi	r2,r2,37
   20830:	10800003 	ldbu	r2,0(r2)
   20834:	10803fcc 	andi	r2,r2,255
   20838:	1080201c 	xori	r2,r2,128
   2083c:	10bfe004 	addi	r2,r2,-128
   20840:	e0ffd717 	ldw	r3,-164(fp)
   20844:	1885883a 	add	r2,r3,r2
   20848:	e0bfd715 	stw	r2,-164(fp)
			stack[0].right = stack[0].y > stack[1].y;

			int up = 0;
			int right = 0;

			for (int i = 0; i < STACK_SIZE; i++) {
   2084c:	e0bfd817 	ldw	r2,-160(fp)
   20850:	10800044 	addi	r2,r2,1
   20854:	e0bfd815 	stw	r2,-160(fp)
   20858:	e0bfd817 	ldw	r2,-160(fp)
   2085c:	10800310 	cmplti	r2,r2,12
   20860:	103fde1e 	bne	r2,zero,207dc <_gp+0xfffe5678>
				up = up + stack[i].up;
				right = right + stack[i].right;
			}

			if (up == STACK_SIZE / 2) {
   20864:	e0bfd617 	ldw	r2,-168(fp)
   20868:	10800198 	cmpnei	r2,r2,6
   2086c:	1000031e 	bne	r2,zero,2087c <main+0x1c4>
				printf("Bounce up\n");
   20870:	010000f4 	movhi	r4,3
   20874:	2103fd04 	addi	r4,r4,4084
   20878:	00209ec0 	call	209ec <puts>
			}

			if (right == STACK_SIZE / 2) {
   2087c:	e0bfd717 	ldw	r2,-164(fp)
   20880:	10800198 	cmpnei	r2,r2,6
   20884:	103fb51e 	bne	r2,zero,2075c <_gp+0xfffe55f8>
				printf("Bound right/left\n");
   20888:	010000f4 	movhi	r4,3
   2088c:	21040004 	addi	r4,r4,4096
   20890:	00209ec0 	call	209ec <puts>
				setcolor(x, y, 0);
			}
		}
		*/
		//usleep(100000);
	}
   20894:	003fb106 	br	2075c <_gp+0xfffe55f8>

00020898 <__mulsi3>:
   20898:	0005883a 	mov	r2,zero
   2089c:	20000726 	beq	r4,zero,208bc <__mulsi3+0x24>
   208a0:	20c0004c 	andi	r3,r4,1
   208a4:	2008d07a 	srli	r4,r4,1
   208a8:	18000126 	beq	r3,zero,208b0 <__mulsi3+0x18>
   208ac:	1145883a 	add	r2,r2,r5
   208b0:	294b883a 	add	r5,r5,r5
   208b4:	203ffa1e 	bne	r4,zero,208a0 <_gp+0xfffe573c>
   208b8:	f800283a 	ret
   208bc:	f800283a 	ret

000208c0 <_printf_r>:
   208c0:	defffd04 	addi	sp,sp,-12
   208c4:	2805883a 	mov	r2,r5
   208c8:	dfc00015 	stw	ra,0(sp)
   208cc:	d9800115 	stw	r6,4(sp)
   208d0:	d9c00215 	stw	r7,8(sp)
   208d4:	21400217 	ldw	r5,8(r4)
   208d8:	d9c00104 	addi	r7,sp,4
   208dc:	100d883a 	mov	r6,r2
   208e0:	0020a980 	call	20a98 <___vfprintf_internal_r>
   208e4:	dfc00017 	ldw	ra,0(sp)
   208e8:	dec00304 	addi	sp,sp,12
   208ec:	f800283a 	ret

000208f0 <printf>:
   208f0:	defffc04 	addi	sp,sp,-16
   208f4:	dfc00015 	stw	ra,0(sp)
   208f8:	d9400115 	stw	r5,4(sp)
   208fc:	d9800215 	stw	r6,8(sp)
   20900:	d9c00315 	stw	r7,12(sp)
   20904:	008000f4 	movhi	r2,3
   20908:	108c5a04 	addi	r2,r2,12648
   2090c:	10800017 	ldw	r2,0(r2)
   20910:	200b883a 	mov	r5,r4
   20914:	d9800104 	addi	r6,sp,4
   20918:	11000217 	ldw	r4,8(r2)
   2091c:	0022d740 	call	22d74 <__vfprintf_internal>
   20920:	dfc00017 	ldw	ra,0(sp)
   20924:	dec00404 	addi	sp,sp,16
   20928:	f800283a 	ret

0002092c <_puts_r>:
   2092c:	defff604 	addi	sp,sp,-40
   20930:	dc000715 	stw	r16,28(sp)
   20934:	2021883a 	mov	r16,r4
   20938:	2809883a 	mov	r4,r5
   2093c:	dc400815 	stw	r17,32(sp)
   20940:	dfc00915 	stw	ra,36(sp)
   20944:	2823883a 	mov	r17,r5
   20948:	0020a000 	call	20a00 <strlen>
   2094c:	10c00044 	addi	r3,r2,1
   20950:	d8800115 	stw	r2,4(sp)
   20954:	008000f4 	movhi	r2,3
   20958:	10840504 	addi	r2,r2,4116
   2095c:	d8800215 	stw	r2,8(sp)
   20960:	00800044 	movi	r2,1
   20964:	d8800315 	stw	r2,12(sp)
   20968:	00800084 	movi	r2,2
   2096c:	dc400015 	stw	r17,0(sp)
   20970:	d8c00615 	stw	r3,24(sp)
   20974:	dec00415 	stw	sp,16(sp)
   20978:	d8800515 	stw	r2,20(sp)
   2097c:	80000226 	beq	r16,zero,20988 <_puts_r+0x5c>
   20980:	80800e17 	ldw	r2,56(r16)
   20984:	10001426 	beq	r2,zero,209d8 <_puts_r+0xac>
   20988:	81400217 	ldw	r5,8(r16)
   2098c:	2880030b 	ldhu	r2,12(r5)
   20990:	10c8000c 	andi	r3,r2,8192
   20994:	1800061e 	bne	r3,zero,209b0 <_puts_r+0x84>
   20998:	29001917 	ldw	r4,100(r5)
   2099c:	00f7ffc4 	movi	r3,-8193
   209a0:	10880014 	ori	r2,r2,8192
   209a4:	20c6703a 	and	r3,r4,r3
   209a8:	2880030d 	sth	r2,12(r5)
   209ac:	28c01915 	stw	r3,100(r5)
   209b0:	d9800404 	addi	r6,sp,16
   209b4:	8009883a 	mov	r4,r16
   209b8:	00252dc0 	call	252dc <__sfvwrite_r>
   209bc:	1000091e 	bne	r2,zero,209e4 <_puts_r+0xb8>
   209c0:	00800284 	movi	r2,10
   209c4:	dfc00917 	ldw	ra,36(sp)
   209c8:	dc400817 	ldw	r17,32(sp)
   209cc:	dc000717 	ldw	r16,28(sp)
   209d0:	dec00a04 	addi	sp,sp,40
   209d4:	f800283a 	ret
   209d8:	8009883a 	mov	r4,r16
   209dc:	0024e580 	call	24e58 <__sinit>
   209e0:	003fe906 	br	20988 <_gp+0xfffe5824>
   209e4:	00bfffc4 	movi	r2,-1
   209e8:	003ff606 	br	209c4 <_gp+0xfffe5860>

000209ec <puts>:
   209ec:	008000f4 	movhi	r2,3
   209f0:	108c5a04 	addi	r2,r2,12648
   209f4:	200b883a 	mov	r5,r4
   209f8:	11000017 	ldw	r4,0(r2)
   209fc:	002092c1 	jmpi	2092c <_puts_r>

00020a00 <strlen>:
   20a00:	208000cc 	andi	r2,r4,3
   20a04:	10002026 	beq	r2,zero,20a88 <strlen+0x88>
   20a08:	20800007 	ldb	r2,0(r4)
   20a0c:	10002026 	beq	r2,zero,20a90 <strlen+0x90>
   20a10:	2005883a 	mov	r2,r4
   20a14:	00000206 	br	20a20 <strlen+0x20>
   20a18:	10c00007 	ldb	r3,0(r2)
   20a1c:	18001826 	beq	r3,zero,20a80 <strlen+0x80>
   20a20:	10800044 	addi	r2,r2,1
   20a24:	10c000cc 	andi	r3,r2,3
   20a28:	183ffb1e 	bne	r3,zero,20a18 <_gp+0xfffe58b4>
   20a2c:	10c00017 	ldw	r3,0(r2)
   20a30:	01ffbff4 	movhi	r7,65279
   20a34:	39ffbfc4 	addi	r7,r7,-257
   20a38:	00ca303a 	nor	r5,zero,r3
   20a3c:	01a02074 	movhi	r6,32897
   20a40:	19c7883a 	add	r3,r3,r7
   20a44:	31a02004 	addi	r6,r6,-32640
   20a48:	1946703a 	and	r3,r3,r5
   20a4c:	1986703a 	and	r3,r3,r6
   20a50:	1800091e 	bne	r3,zero,20a78 <strlen+0x78>
   20a54:	10800104 	addi	r2,r2,4
   20a58:	10c00017 	ldw	r3,0(r2)
   20a5c:	19cb883a 	add	r5,r3,r7
   20a60:	00c6303a 	nor	r3,zero,r3
   20a64:	28c6703a 	and	r3,r5,r3
   20a68:	1986703a 	and	r3,r3,r6
   20a6c:	183ff926 	beq	r3,zero,20a54 <_gp+0xfffe58f0>
   20a70:	00000106 	br	20a78 <strlen+0x78>
   20a74:	10800044 	addi	r2,r2,1
   20a78:	10c00007 	ldb	r3,0(r2)
   20a7c:	183ffd1e 	bne	r3,zero,20a74 <_gp+0xfffe5910>
   20a80:	1105c83a 	sub	r2,r2,r4
   20a84:	f800283a 	ret
   20a88:	2005883a 	mov	r2,r4
   20a8c:	003fe706 	br	20a2c <_gp+0xfffe58c8>
   20a90:	0005883a 	mov	r2,zero
   20a94:	f800283a 	ret

00020a98 <___vfprintf_internal_r>:
   20a98:	deffb804 	addi	sp,sp,-288
   20a9c:	dfc04715 	stw	ra,284(sp)
   20aa0:	ddc04515 	stw	r23,276(sp)
   20aa4:	dd404315 	stw	r21,268(sp)
   20aa8:	d9002d15 	stw	r4,180(sp)
   20aac:	282f883a 	mov	r23,r5
   20ab0:	302b883a 	mov	r21,r6
   20ab4:	d9c02e15 	stw	r7,184(sp)
   20ab8:	df004615 	stw	fp,280(sp)
   20abc:	dd804415 	stw	r22,272(sp)
   20ac0:	dd004215 	stw	r20,264(sp)
   20ac4:	dcc04115 	stw	r19,260(sp)
   20ac8:	dc804015 	stw	r18,256(sp)
   20acc:	dc403f15 	stw	r17,252(sp)
   20ad0:	dc003e15 	stw	r16,248(sp)
   20ad4:	00259d80 	call	259d8 <_localeconv_r>
   20ad8:	10800017 	ldw	r2,0(r2)
   20adc:	1009883a 	mov	r4,r2
   20ae0:	d8803415 	stw	r2,208(sp)
   20ae4:	0020a000 	call	20a00 <strlen>
   20ae8:	d8803715 	stw	r2,220(sp)
   20aec:	d8802d17 	ldw	r2,180(sp)
   20af0:	10000226 	beq	r2,zero,20afc <___vfprintf_internal_r+0x64>
   20af4:	10800e17 	ldw	r2,56(r2)
   20af8:	1000fb26 	beq	r2,zero,20ee8 <___vfprintf_internal_r+0x450>
   20afc:	b880030b 	ldhu	r2,12(r23)
   20b00:	10c8000c 	andi	r3,r2,8192
   20b04:	1800061e 	bne	r3,zero,20b20 <___vfprintf_internal_r+0x88>
   20b08:	b9001917 	ldw	r4,100(r23)
   20b0c:	00f7ffc4 	movi	r3,-8193
   20b10:	10880014 	ori	r2,r2,8192
   20b14:	20c6703a 	and	r3,r4,r3
   20b18:	b880030d 	sth	r2,12(r23)
   20b1c:	b8c01915 	stw	r3,100(r23)
   20b20:	10c0020c 	andi	r3,r2,8
   20b24:	1800c326 	beq	r3,zero,20e34 <___vfprintf_internal_r+0x39c>
   20b28:	b8c00417 	ldw	r3,16(r23)
   20b2c:	1800c126 	beq	r3,zero,20e34 <___vfprintf_internal_r+0x39c>
   20b30:	1080068c 	andi	r2,r2,26
   20b34:	00c00284 	movi	r3,10
   20b38:	10c0c626 	beq	r2,r3,20e54 <___vfprintf_internal_r+0x3bc>
   20b3c:	d8c00404 	addi	r3,sp,16
   20b40:	050000f4 	movhi	r20,3
   20b44:	d9001e04 	addi	r4,sp,120
   20b48:	a5041684 	addi	r20,r20,4186
   20b4c:	d8c01e15 	stw	r3,120(sp)
   20b50:	d8002015 	stw	zero,128(sp)
   20b54:	d8001f15 	stw	zero,124(sp)
   20b58:	d8003315 	stw	zero,204(sp)
   20b5c:	d8003615 	stw	zero,216(sp)
   20b60:	d8003815 	stw	zero,224(sp)
   20b64:	1811883a 	mov	r8,r3
   20b68:	d8003915 	stw	zero,228(sp)
   20b6c:	d8003a15 	stw	zero,232(sp)
   20b70:	d8002f15 	stw	zero,188(sp)
   20b74:	d9002815 	stw	r4,160(sp)
   20b78:	a8800007 	ldb	r2,0(r21)
   20b7c:	10028b26 	beq	r2,zero,215ac <___vfprintf_internal_r+0xb14>
   20b80:	00c00944 	movi	r3,37
   20b84:	a823883a 	mov	r17,r21
   20b88:	10c0021e 	bne	r2,r3,20b94 <___vfprintf_internal_r+0xfc>
   20b8c:	00001406 	br	20be0 <___vfprintf_internal_r+0x148>
   20b90:	10c00326 	beq	r2,r3,20ba0 <___vfprintf_internal_r+0x108>
   20b94:	8c400044 	addi	r17,r17,1
   20b98:	88800007 	ldb	r2,0(r17)
   20b9c:	103ffc1e 	bne	r2,zero,20b90 <_gp+0xfffe5a2c>
   20ba0:	8d61c83a 	sub	r16,r17,r21
   20ba4:	80000e26 	beq	r16,zero,20be0 <___vfprintf_internal_r+0x148>
   20ba8:	d8c02017 	ldw	r3,128(sp)
   20bac:	d8801f17 	ldw	r2,124(sp)
   20bb0:	45400015 	stw	r21,0(r8)
   20bb4:	1c07883a 	add	r3,r3,r16
   20bb8:	10800044 	addi	r2,r2,1
   20bbc:	d8c02015 	stw	r3,128(sp)
   20bc0:	44000115 	stw	r16,4(r8)
   20bc4:	d8801f15 	stw	r2,124(sp)
   20bc8:	00c001c4 	movi	r3,7
   20bcc:	1880a916 	blt	r3,r2,20e74 <___vfprintf_internal_r+0x3dc>
   20bd0:	42000204 	addi	r8,r8,8
   20bd4:	d9402f17 	ldw	r5,188(sp)
   20bd8:	2c0b883a 	add	r5,r5,r16
   20bdc:	d9402f15 	stw	r5,188(sp)
   20be0:	88800007 	ldb	r2,0(r17)
   20be4:	1000aa26 	beq	r2,zero,20e90 <___vfprintf_internal_r+0x3f8>
   20be8:	8d400044 	addi	r21,r17,1
   20bec:	8c400047 	ldb	r17,1(r17)
   20bf0:	0021883a 	mov	r16,zero
   20bf4:	00bfffc4 	movi	r2,-1
   20bf8:	0025883a 	mov	r18,zero
   20bfc:	dc002905 	stb	r16,164(sp)
   20c00:	d8002785 	stb	zero,158(sp)
   20c04:	d8002b05 	stb	zero,172(sp)
   20c08:	d8802a15 	stw	r2,168(sp)
   20c0c:	d8003115 	stw	zero,196(sp)
   20c10:	04c01604 	movi	r19,88
   20c14:	05800244 	movi	r22,9
   20c18:	9021883a 	mov	r16,r18
   20c1c:	4039883a 	mov	fp,r8
   20c20:	ad400044 	addi	r21,r21,1
   20c24:	88bff804 	addi	r2,r17,-32
   20c28:	98833236 	bltu	r19,r2,218f4 <___vfprintf_internal_r+0xe5c>
   20c2c:	100490ba 	slli	r2,r2,2
   20c30:	00c000b4 	movhi	r3,2
   20c34:	18c31104 	addi	r3,r3,3140
   20c38:	10c5883a 	add	r2,r2,r3
   20c3c:	10800017 	ldw	r2,0(r2)
   20c40:	1000683a 	jmp	r2
   20c44:	000217ec 	andhi	zero,zero,2143
   20c48:	000218f4 	movhi	zero,2147
   20c4c:	000218f4 	movhi	zero,2147
   20c50:	0002180c 	andi	zero,zero,2144
   20c54:	000218f4 	movhi	zero,2147
   20c58:	000218f4 	movhi	zero,2147
   20c5c:	000218f4 	movhi	zero,2147
   20c60:	000218f4 	movhi	zero,2147
   20c64:	000218f4 	movhi	zero,2147
   20c68:	000218f4 	movhi	zero,2147
   20c6c:	00020ef4 	movhi	zero,2107
   20c70:	000216fc 	xorhi	zero,zero,2139
   20c74:	000218f4 	movhi	zero,2147
   20c78:	00020db8 	rdprs	zero,zero,2102
   20c7c:	00020f18 	cmpnei	zero,zero,2108
   20c80:	000218f4 	movhi	zero,2147
   20c84:	00020f68 	cmpgeui	zero,zero,2109
   20c88:	00020f74 	movhi	zero,2109
   20c8c:	00020f74 	movhi	zero,2109
   20c90:	00020f74 	movhi	zero,2109
   20c94:	00020f74 	movhi	zero,2109
   20c98:	00020f74 	movhi	zero,2109
   20c9c:	00020f74 	movhi	zero,2109
   20ca0:	00020f74 	movhi	zero,2109
   20ca4:	00020f74 	movhi	zero,2109
   20ca8:	00020f74 	movhi	zero,2109
   20cac:	000218f4 	movhi	zero,2147
   20cb0:	000218f4 	movhi	zero,2147
   20cb4:	000218f4 	movhi	zero,2147
   20cb8:	000218f4 	movhi	zero,2147
   20cbc:	000218f4 	movhi	zero,2147
   20cc0:	000218f4 	movhi	zero,2147
   20cc4:	000218f4 	movhi	zero,2147
   20cc8:	000218f4 	movhi	zero,2147
   20ccc:	000218f4 	movhi	zero,2147
   20cd0:	000218f4 	movhi	zero,2147
   20cd4:	00020fb0 	cmpltui	zero,zero,2110
   20cd8:	00021078 	rdprs	zero,zero,2113
   20cdc:	000218f4 	movhi	zero,2147
   20ce0:	00021078 	rdprs	zero,zero,2113
   20ce4:	000218f4 	movhi	zero,2147
   20ce8:	000218f4 	movhi	zero,2147
   20cec:	000218f4 	movhi	zero,2147
   20cf0:	000218f4 	movhi	zero,2147
   20cf4:	00021124 	muli	zero,zero,2116
   20cf8:	000218f4 	movhi	zero,2147
   20cfc:	000218f4 	movhi	zero,2147
   20d00:	00021130 	cmpltui	zero,zero,2116
   20d04:	000218f4 	movhi	zero,2147
   20d08:	000218f4 	movhi	zero,2147
   20d0c:	000218f4 	movhi	zero,2147
   20d10:	000218f4 	movhi	zero,2147
   20d14:	000218f4 	movhi	zero,2147
   20d18:	000215b4 	movhi	zero,2134
   20d1c:	000218f4 	movhi	zero,2147
   20d20:	000218f4 	movhi	zero,2147
   20d24:	00021620 	cmpeqi	zero,zero,2136
   20d28:	000218f4 	movhi	zero,2147
   20d2c:	000218f4 	movhi	zero,2147
   20d30:	000218f4 	movhi	zero,2147
   20d34:	000218f4 	movhi	zero,2147
   20d38:	000218f4 	movhi	zero,2147
   20d3c:	000218f4 	movhi	zero,2147
   20d40:	000218f4 	movhi	zero,2147
   20d44:	000218f4 	movhi	zero,2147
   20d48:	000218f4 	movhi	zero,2147
   20d4c:	000218f4 	movhi	zero,2147
   20d50:	00021898 	cmpnei	zero,zero,2146
   20d54:	00021818 	cmpnei	zero,zero,2144
   20d58:	00021078 	rdprs	zero,zero,2113
   20d5c:	00021078 	rdprs	zero,zero,2113
   20d60:	00021078 	rdprs	zero,zero,2113
   20d64:	00021838 	rdprs	zero,zero,2144
   20d68:	00021818 	cmpnei	zero,zero,2144
   20d6c:	000218f4 	movhi	zero,2147
   20d70:	000218f4 	movhi	zero,2147
   20d74:	00021844 	movi	zero,2145
   20d78:	000218f4 	movhi	zero,2147
   20d7c:	00021858 	cmpnei	zero,zero,2145
   20d80:	000216dc 	xori	zero,zero,2139
   20d84:	00020dc4 	movi	zero,2103
   20d88:	00021714 	movui	zero,2140
   20d8c:	000218f4 	movhi	zero,2147
   20d90:	00021720 	cmpeqi	zero,zero,2140
   20d94:	000218f4 	movhi	zero,2147
   20d98:	00021784 	movi	zero,2142
   20d9c:	000218f4 	movhi	zero,2147
   20da0:	000218f4 	movhi	zero,2147
   20da4:	000217a4 	muli	zero,zero,2142
   20da8:	d8c03117 	ldw	r3,196(sp)
   20dac:	d8802e15 	stw	r2,184(sp)
   20db0:	00c7c83a 	sub	r3,zero,r3
   20db4:	d8c03115 	stw	r3,196(sp)
   20db8:	84000114 	ori	r16,r16,4
   20dbc:	ac400007 	ldb	r17,0(r21)
   20dc0:	003f9706 	br	20c20 <_gp+0xfffe5abc>
   20dc4:	00800c04 	movi	r2,48
   20dc8:	d8802705 	stb	r2,156(sp)
   20dcc:	00801e04 	movi	r2,120
   20dd0:	d8802745 	stb	r2,157(sp)
   20dd4:	d9002a17 	ldw	r4,168(sp)
   20dd8:	d8802e17 	ldw	r2,184(sp)
   20ddc:	d8002785 	stb	zero,158(sp)
   20de0:	e011883a 	mov	r8,fp
   20de4:	10c00104 	addi	r3,r2,4
   20de8:	14c00017 	ldw	r19,0(r2)
   20dec:	002d883a 	mov	r22,zero
   20df0:	80800094 	ori	r2,r16,2
   20df4:	2002ca16 	blt	r4,zero,21920 <___vfprintf_internal_r+0xe88>
   20df8:	00bfdfc4 	movi	r2,-129
   20dfc:	80a4703a 	and	r18,r16,r2
   20e00:	d8c02e15 	stw	r3,184(sp)
   20e04:	94800094 	ori	r18,r18,2
   20e08:	9802b41e 	bne	r19,zero,218dc <___vfprintf_internal_r+0xe44>
   20e0c:	014000f4 	movhi	r5,3
   20e10:	29440f04 	addi	r5,r5,4156
   20e14:	d9403915 	stw	r5,228(sp)
   20e18:	04401e04 	movi	r17,120
   20e1c:	d8802a17 	ldw	r2,168(sp)
   20e20:	0039883a 	mov	fp,zero
   20e24:	1001fa26 	beq	r2,zero,21610 <___vfprintf_internal_r+0xb78>
   20e28:	0027883a 	mov	r19,zero
   20e2c:	002d883a 	mov	r22,zero
   20e30:	00021906 	br	21698 <___vfprintf_internal_r+0xc00>
   20e34:	d9002d17 	ldw	r4,180(sp)
   20e38:	b80b883a 	mov	r5,r23
   20e3c:	0022e4c0 	call	22e4c <__swsetup_r>
   20e40:	1005dc1e 	bne	r2,zero,225b4 <___vfprintf_internal_r+0x1b1c>
   20e44:	b880030b 	ldhu	r2,12(r23)
   20e48:	00c00284 	movi	r3,10
   20e4c:	1080068c 	andi	r2,r2,26
   20e50:	10ff3a1e 	bne	r2,r3,20b3c <_gp+0xfffe59d8>
   20e54:	b880038f 	ldh	r2,14(r23)
   20e58:	103f3816 	blt	r2,zero,20b3c <_gp+0xfffe59d8>
   20e5c:	d9c02e17 	ldw	r7,184(sp)
   20e60:	d9002d17 	ldw	r4,180(sp)
   20e64:	a80d883a 	mov	r6,r21
   20e68:	b80b883a 	mov	r5,r23
   20e6c:	0022d900 	call	22d90 <__sbprintf>
   20e70:	00001106 	br	20eb8 <___vfprintf_internal_r+0x420>
   20e74:	d9002d17 	ldw	r4,180(sp)
   20e78:	d9801e04 	addi	r6,sp,120
   20e7c:	b80b883a 	mov	r5,r23
   20e80:	00282780 	call	28278 <__sprint_r>
   20e84:	1000081e 	bne	r2,zero,20ea8 <___vfprintf_internal_r+0x410>
   20e88:	da000404 	addi	r8,sp,16
   20e8c:	003f5106 	br	20bd4 <_gp+0xfffe5a70>
   20e90:	d8802017 	ldw	r2,128(sp)
   20e94:	10000426 	beq	r2,zero,20ea8 <___vfprintf_internal_r+0x410>
   20e98:	d9002d17 	ldw	r4,180(sp)
   20e9c:	d9801e04 	addi	r6,sp,120
   20ea0:	b80b883a 	mov	r5,r23
   20ea4:	00282780 	call	28278 <__sprint_r>
   20ea8:	b880030b 	ldhu	r2,12(r23)
   20eac:	1080100c 	andi	r2,r2,64
   20eb0:	1005c01e 	bne	r2,zero,225b4 <___vfprintf_internal_r+0x1b1c>
   20eb4:	d8802f17 	ldw	r2,188(sp)
   20eb8:	dfc04717 	ldw	ra,284(sp)
   20ebc:	df004617 	ldw	fp,280(sp)
   20ec0:	ddc04517 	ldw	r23,276(sp)
   20ec4:	dd804417 	ldw	r22,272(sp)
   20ec8:	dd404317 	ldw	r21,268(sp)
   20ecc:	dd004217 	ldw	r20,264(sp)
   20ed0:	dcc04117 	ldw	r19,260(sp)
   20ed4:	dc804017 	ldw	r18,256(sp)
   20ed8:	dc403f17 	ldw	r17,252(sp)
   20edc:	dc003e17 	ldw	r16,248(sp)
   20ee0:	dec04804 	addi	sp,sp,288
   20ee4:	f800283a 	ret
   20ee8:	d9002d17 	ldw	r4,180(sp)
   20eec:	0024e580 	call	24e58 <__sinit>
   20ef0:	003f0206 	br	20afc <_gp+0xfffe5998>
   20ef4:	d9002e17 	ldw	r4,184(sp)
   20ef8:	d9402e17 	ldw	r5,184(sp)
   20efc:	21000017 	ldw	r4,0(r4)
   20f00:	28800104 	addi	r2,r5,4
   20f04:	d9003115 	stw	r4,196(sp)
   20f08:	203fa716 	blt	r4,zero,20da8 <_gp+0xfffe5c44>
   20f0c:	d8802e15 	stw	r2,184(sp)
   20f10:	ac400007 	ldb	r17,0(r21)
   20f14:	003f4206 	br	20c20 <_gp+0xfffe5abc>
   20f18:	ac400007 	ldb	r17,0(r21)
   20f1c:	01000a84 	movi	r4,42
   20f20:	a8c00044 	addi	r3,r21,1
   20f24:	89075826 	beq	r17,r4,22c88 <___vfprintf_internal_r+0x21f0>
   20f28:	8cbff404 	addi	r18,r17,-48
   20f2c:	b486ae36 	bltu	r22,r18,229e8 <___vfprintf_internal_r+0x1f50>
   20f30:	0009883a 	mov	r4,zero
   20f34:	1823883a 	mov	r17,r3
   20f38:	01400284 	movi	r5,10
   20f3c:	00208980 	call	20898 <__mulsi3>
   20f40:	88c00007 	ldb	r3,0(r17)
   20f44:	1489883a 	add	r4,r2,r18
   20f48:	8d400044 	addi	r21,r17,1
   20f4c:	1cbff404 	addi	r18,r3,-48
   20f50:	a823883a 	mov	r17,r21
   20f54:	b4bff82e 	bgeu	r22,r18,20f38 <_gp+0xfffe5dd4>
   20f58:	1823883a 	mov	r17,r3
   20f5c:	2005f616 	blt	r4,zero,22738 <___vfprintf_internal_r+0x1ca0>
   20f60:	d9002a15 	stw	r4,168(sp)
   20f64:	003f2f06 	br	20c24 <_gp+0xfffe5ac0>
   20f68:	84002014 	ori	r16,r16,128
   20f6c:	ac400007 	ldb	r17,0(r21)
   20f70:	003f2b06 	br	20c20 <_gp+0xfffe5abc>
   20f74:	8cbff404 	addi	r18,r17,-48
   20f78:	d8003115 	stw	zero,196(sp)
   20f7c:	0009883a 	mov	r4,zero
   20f80:	a823883a 	mov	r17,r21
   20f84:	01400284 	movi	r5,10
   20f88:	00208980 	call	20898 <__mulsi3>
   20f8c:	88c00007 	ldb	r3,0(r17)
   20f90:	9089883a 	add	r4,r18,r2
   20f94:	ad400044 	addi	r21,r21,1
   20f98:	1cbff404 	addi	r18,r3,-48
   20f9c:	a823883a 	mov	r17,r21
   20fa0:	b4bff82e 	bgeu	r22,r18,20f84 <_gp+0xfffe5e20>
   20fa4:	1823883a 	mov	r17,r3
   20fa8:	d9003115 	stw	r4,196(sp)
   20fac:	003f1d06 	br	20c24 <_gp+0xfffe5ac0>
   20fb0:	8025883a 	mov	r18,r16
   20fb4:	dc002903 	ldbu	r16,164(sp)
   20fb8:	e011883a 	mov	r8,fp
   20fbc:	84003fcc 	andi	r16,r16,255
   20fc0:	8007531e 	bne	r16,zero,22d10 <___vfprintf_internal_r+0x2278>
   20fc4:	94800414 	ori	r18,r18,16
   20fc8:	9080080c 	andi	r2,r18,32
   20fcc:	1003a326 	beq	r2,zero,21e5c <___vfprintf_internal_r+0x13c4>
   20fd0:	d9002e17 	ldw	r4,184(sp)
   20fd4:	20800117 	ldw	r2,4(r4)
   20fd8:	24c00017 	ldw	r19,0(r4)
   20fdc:	21000204 	addi	r4,r4,8
   20fe0:	d9002e15 	stw	r4,184(sp)
   20fe4:	102d883a 	mov	r22,r2
   20fe8:	10047316 	blt	r2,zero,221b8 <___vfprintf_internal_r+0x1720>
   20fec:	d9002a17 	ldw	r4,168(sp)
   20ff0:	df002783 	ldbu	fp,158(sp)
   20ff4:	2003e416 	blt	r4,zero,21f88 <___vfprintf_internal_r+0x14f0>
   20ff8:	00ffdfc4 	movi	r3,-129
   20ffc:	9d84b03a 	or	r2,r19,r22
   21000:	90e4703a 	and	r18,r18,r3
   21004:	10018026 	beq	r2,zero,21608 <___vfprintf_internal_r+0xb70>
   21008:	b003ab26 	beq	r22,zero,21eb8 <___vfprintf_internal_r+0x1420>
   2100c:	dc402915 	stw	r17,164(sp)
   21010:	dc001e04 	addi	r16,sp,120
   21014:	b023883a 	mov	r17,r22
   21018:	402d883a 	mov	r22,r8
   2101c:	9809883a 	mov	r4,r19
   21020:	880b883a 	mov	r5,r17
   21024:	01800284 	movi	r6,10
   21028:	000f883a 	mov	r7,zero
   2102c:	002a7bc0 	call	2a7bc <__umoddi3>
   21030:	10800c04 	addi	r2,r2,48
   21034:	843fffc4 	addi	r16,r16,-1
   21038:	9809883a 	mov	r4,r19
   2103c:	880b883a 	mov	r5,r17
   21040:	80800005 	stb	r2,0(r16)
   21044:	01800284 	movi	r6,10
   21048:	000f883a 	mov	r7,zero
   2104c:	002a1c00 	call	2a1c0 <__udivdi3>
   21050:	1027883a 	mov	r19,r2
   21054:	10c4b03a 	or	r2,r2,r3
   21058:	1823883a 	mov	r17,r3
   2105c:	103fef1e 	bne	r2,zero,2101c <_gp+0xfffe5eb8>
   21060:	d8c02817 	ldw	r3,160(sp)
   21064:	dc402917 	ldw	r17,164(sp)
   21068:	b011883a 	mov	r8,r22
   2106c:	1c07c83a 	sub	r3,r3,r16
   21070:	d8c02b15 	stw	r3,172(sp)
   21074:	00005f06 	br	211f4 <___vfprintf_internal_r+0x75c>
   21078:	8025883a 	mov	r18,r16
   2107c:	dc002903 	ldbu	r16,164(sp)
   21080:	e011883a 	mov	r8,fp
   21084:	84003fcc 	andi	r16,r16,255
   21088:	80071e1e 	bne	r16,zero,22d04 <___vfprintf_internal_r+0x226c>
   2108c:	9080020c 	andi	r2,r18,8
   21090:	1004af26 	beq	r2,zero,22350 <___vfprintf_internal_r+0x18b8>
   21094:	d9002e17 	ldw	r4,184(sp)
   21098:	d9402e17 	ldw	r5,184(sp)
   2109c:	d8802e17 	ldw	r2,184(sp)
   210a0:	21000017 	ldw	r4,0(r4)
   210a4:	29400117 	ldw	r5,4(r5)
   210a8:	10800204 	addi	r2,r2,8
   210ac:	d9003615 	stw	r4,216(sp)
   210b0:	d9403815 	stw	r5,224(sp)
   210b4:	d8802e15 	stw	r2,184(sp)
   210b8:	d9003617 	ldw	r4,216(sp)
   210bc:	d9403817 	ldw	r5,224(sp)
   210c0:	da003d15 	stw	r8,244(sp)
   210c4:	04000044 	movi	r16,1
   210c8:	0027e9c0 	call	27e9c <__fpclassifyd>
   210cc:	da003d17 	ldw	r8,244(sp)
   210d0:	1404441e 	bne	r2,r16,221e4 <___vfprintf_internal_r+0x174c>
   210d4:	d9003617 	ldw	r4,216(sp)
   210d8:	d9403817 	ldw	r5,224(sp)
   210dc:	000d883a 	mov	r6,zero
   210e0:	000f883a 	mov	r7,zero
   210e4:	002c3140 	call	2c314 <__ledf2>
   210e8:	da003d17 	ldw	r8,244(sp)
   210ec:	1005e316 	blt	r2,zero,2287c <___vfprintf_internal_r+0x1de4>
   210f0:	df002783 	ldbu	fp,158(sp)
   210f4:	008011c4 	movi	r2,71
   210f8:	1445580e 	bge	r2,r17,2265c <___vfprintf_internal_r+0x1bc4>
   210fc:	040000f4 	movhi	r16,3
   21100:	84040704 	addi	r16,r16,4124
   21104:	00c000c4 	movi	r3,3
   21108:	00bfdfc4 	movi	r2,-129
   2110c:	d8c02915 	stw	r3,164(sp)
   21110:	90a4703a 	and	r18,r18,r2
   21114:	d8c02b15 	stw	r3,172(sp)
   21118:	d8002a15 	stw	zero,168(sp)
   2111c:	d8003215 	stw	zero,200(sp)
   21120:	00003a06 	br	2120c <___vfprintf_internal_r+0x774>
   21124:	84000214 	ori	r16,r16,8
   21128:	ac400007 	ldb	r17,0(r21)
   2112c:	003ebc06 	br	20c20 <_gp+0xfffe5abc>
   21130:	8025883a 	mov	r18,r16
   21134:	dc002903 	ldbu	r16,164(sp)
   21138:	e011883a 	mov	r8,fp
   2113c:	84003fcc 	andi	r16,r16,255
   21140:	8007001e 	bne	r16,zero,22d44 <___vfprintf_internal_r+0x22ac>
   21144:	94800414 	ori	r18,r18,16
   21148:	9080080c 	andi	r2,r18,32
   2114c:	1002fa26 	beq	r2,zero,21d38 <___vfprintf_internal_r+0x12a0>
   21150:	d9002e17 	ldw	r4,184(sp)
   21154:	d9402a17 	ldw	r5,168(sp)
   21158:	d8002785 	stb	zero,158(sp)
   2115c:	20800204 	addi	r2,r4,8
   21160:	24c00017 	ldw	r19,0(r4)
   21164:	25800117 	ldw	r22,4(r4)
   21168:	2804b116 	blt	r5,zero,22430 <___vfprintf_internal_r+0x1998>
   2116c:	013fdfc4 	movi	r4,-129
   21170:	9d86b03a 	or	r3,r19,r22
   21174:	d8802e15 	stw	r2,184(sp)
   21178:	9124703a 	and	r18,r18,r4
   2117c:	1802fb1e 	bne	r3,zero,21d6c <___vfprintf_internal_r+0x12d4>
   21180:	d8c02a17 	ldw	r3,168(sp)
   21184:	0039883a 	mov	fp,zero
   21188:	1805e526 	beq	r3,zero,22920 <___vfprintf_internal_r+0x1e88>
   2118c:	0027883a 	mov	r19,zero
   21190:	002d883a 	mov	r22,zero
   21194:	dc001e04 	addi	r16,sp,120
   21198:	9806d0fa 	srli	r3,r19,3
   2119c:	b008977a 	slli	r4,r22,29
   211a0:	b02cd0fa 	srli	r22,r22,3
   211a4:	9cc001cc 	andi	r19,r19,7
   211a8:	98800c04 	addi	r2,r19,48
   211ac:	843fffc4 	addi	r16,r16,-1
   211b0:	20e6b03a 	or	r19,r4,r3
   211b4:	80800005 	stb	r2,0(r16)
   211b8:	9d86b03a 	or	r3,r19,r22
   211bc:	183ff61e 	bne	r3,zero,21198 <_gp+0xfffe6034>
   211c0:	90c0004c 	andi	r3,r18,1
   211c4:	18014126 	beq	r3,zero,216cc <___vfprintf_internal_r+0xc34>
   211c8:	10803fcc 	andi	r2,r2,255
   211cc:	1080201c 	xori	r2,r2,128
   211d0:	10bfe004 	addi	r2,r2,-128
   211d4:	00c00c04 	movi	r3,48
   211d8:	10c13c26 	beq	r2,r3,216cc <___vfprintf_internal_r+0xc34>
   211dc:	80ffffc5 	stb	r3,-1(r16)
   211e0:	d8c02817 	ldw	r3,160(sp)
   211e4:	80bfffc4 	addi	r2,r16,-1
   211e8:	1021883a 	mov	r16,r2
   211ec:	1887c83a 	sub	r3,r3,r2
   211f0:	d8c02b15 	stw	r3,172(sp)
   211f4:	d8802b17 	ldw	r2,172(sp)
   211f8:	d9002a17 	ldw	r4,168(sp)
   211fc:	1100010e 	bge	r2,r4,21204 <___vfprintf_internal_r+0x76c>
   21200:	2005883a 	mov	r2,r4
   21204:	d8802915 	stw	r2,164(sp)
   21208:	d8003215 	stw	zero,200(sp)
   2120c:	e7003fcc 	andi	fp,fp,255
   21210:	e700201c 	xori	fp,fp,128
   21214:	e73fe004 	addi	fp,fp,-128
   21218:	e0000326 	beq	fp,zero,21228 <___vfprintf_internal_r+0x790>
   2121c:	d8c02917 	ldw	r3,164(sp)
   21220:	18c00044 	addi	r3,r3,1
   21224:	d8c02915 	stw	r3,164(sp)
   21228:	90c0008c 	andi	r3,r18,2
   2122c:	d8c02c15 	stw	r3,176(sp)
   21230:	18000326 	beq	r3,zero,21240 <___vfprintf_internal_r+0x7a8>
   21234:	d8c02917 	ldw	r3,164(sp)
   21238:	18c00084 	addi	r3,r3,2
   2123c:	d8c02915 	stw	r3,164(sp)
   21240:	90c0210c 	andi	r3,r18,132
   21244:	d8c03015 	stw	r3,192(sp)
   21248:	1801c51e 	bne	r3,zero,21960 <___vfprintf_internal_r+0xec8>
   2124c:	d9003117 	ldw	r4,196(sp)
   21250:	d8c02917 	ldw	r3,164(sp)
   21254:	20e7c83a 	sub	r19,r4,r3
   21258:	04c1c10e 	bge	zero,r19,21960 <___vfprintf_internal_r+0xec8>
   2125c:	02400404 	movi	r9,16
   21260:	d8c02017 	ldw	r3,128(sp)
   21264:	d8801f17 	ldw	r2,124(sp)
   21268:	4cc52f0e 	bge	r9,r19,22728 <___vfprintf_internal_r+0x1c90>
   2126c:	014000f4 	movhi	r5,3
   21270:	29441a84 	addi	r5,r5,4202
   21274:	dc403b15 	stw	r17,236(sp)
   21278:	d9403515 	stw	r5,212(sp)
   2127c:	9823883a 	mov	r17,r19
   21280:	482d883a 	mov	r22,r9
   21284:	9027883a 	mov	r19,r18
   21288:	070001c4 	movi	fp,7
   2128c:	8025883a 	mov	r18,r16
   21290:	dc002d17 	ldw	r16,180(sp)
   21294:	00000306 	br	212a4 <___vfprintf_internal_r+0x80c>
   21298:	8c7ffc04 	addi	r17,r17,-16
   2129c:	42000204 	addi	r8,r8,8
   212a0:	b440130e 	bge	r22,r17,212f0 <___vfprintf_internal_r+0x858>
   212a4:	010000f4 	movhi	r4,3
   212a8:	18c00404 	addi	r3,r3,16
   212ac:	10800044 	addi	r2,r2,1
   212b0:	21041a84 	addi	r4,r4,4202
   212b4:	41000015 	stw	r4,0(r8)
   212b8:	45800115 	stw	r22,4(r8)
   212bc:	d8c02015 	stw	r3,128(sp)
   212c0:	d8801f15 	stw	r2,124(sp)
   212c4:	e0bff40e 	bge	fp,r2,21298 <_gp+0xfffe6134>
   212c8:	d9801e04 	addi	r6,sp,120
   212cc:	b80b883a 	mov	r5,r23
   212d0:	8009883a 	mov	r4,r16
   212d4:	00282780 	call	28278 <__sprint_r>
   212d8:	103ef31e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   212dc:	8c7ffc04 	addi	r17,r17,-16
   212e0:	d8c02017 	ldw	r3,128(sp)
   212e4:	d8801f17 	ldw	r2,124(sp)
   212e8:	da000404 	addi	r8,sp,16
   212ec:	b47fed16 	blt	r22,r17,212a4 <_gp+0xfffe6140>
   212f0:	9021883a 	mov	r16,r18
   212f4:	9825883a 	mov	r18,r19
   212f8:	8827883a 	mov	r19,r17
   212fc:	dc403b17 	ldw	r17,236(sp)
   21300:	d9403517 	ldw	r5,212(sp)
   21304:	98c7883a 	add	r3,r19,r3
   21308:	10800044 	addi	r2,r2,1
   2130c:	41400015 	stw	r5,0(r8)
   21310:	44c00115 	stw	r19,4(r8)
   21314:	d8c02015 	stw	r3,128(sp)
   21318:	d8801f15 	stw	r2,124(sp)
   2131c:	010001c4 	movi	r4,7
   21320:	2082c516 	blt	r4,r2,21e38 <___vfprintf_internal_r+0x13a0>
   21324:	df002787 	ldb	fp,158(sp)
   21328:	42000204 	addi	r8,r8,8
   2132c:	e0000c26 	beq	fp,zero,21360 <___vfprintf_internal_r+0x8c8>
   21330:	d8801f17 	ldw	r2,124(sp)
   21334:	d9002784 	addi	r4,sp,158
   21338:	18c00044 	addi	r3,r3,1
   2133c:	10800044 	addi	r2,r2,1
   21340:	41000015 	stw	r4,0(r8)
   21344:	01000044 	movi	r4,1
   21348:	41000115 	stw	r4,4(r8)
   2134c:	d8c02015 	stw	r3,128(sp)
   21350:	d8801f15 	stw	r2,124(sp)
   21354:	010001c4 	movi	r4,7
   21358:	20825e16 	blt	r4,r2,21cd4 <___vfprintf_internal_r+0x123c>
   2135c:	42000204 	addi	r8,r8,8
   21360:	d8802c17 	ldw	r2,176(sp)
   21364:	10000c26 	beq	r2,zero,21398 <___vfprintf_internal_r+0x900>
   21368:	d8801f17 	ldw	r2,124(sp)
   2136c:	d9002704 	addi	r4,sp,156
   21370:	18c00084 	addi	r3,r3,2
   21374:	10800044 	addi	r2,r2,1
   21378:	41000015 	stw	r4,0(r8)
   2137c:	01000084 	movi	r4,2
   21380:	41000115 	stw	r4,4(r8)
   21384:	d8c02015 	stw	r3,128(sp)
   21388:	d8801f15 	stw	r2,124(sp)
   2138c:	010001c4 	movi	r4,7
   21390:	20825816 	blt	r4,r2,21cf4 <___vfprintf_internal_r+0x125c>
   21394:	42000204 	addi	r8,r8,8
   21398:	d9003017 	ldw	r4,192(sp)
   2139c:	00802004 	movi	r2,128
   213a0:	2081bb26 	beq	r4,r2,21a90 <___vfprintf_internal_r+0xff8>
   213a4:	d9402a17 	ldw	r5,168(sp)
   213a8:	d8802b17 	ldw	r2,172(sp)
   213ac:	28adc83a 	sub	r22,r5,r2
   213b0:	0580310e 	bge	zero,r22,21478 <___vfprintf_internal_r+0x9e0>
   213b4:	07000404 	movi	fp,16
   213b8:	d8801f17 	ldw	r2,124(sp)
   213bc:	e584360e 	bge	fp,r22,22498 <___vfprintf_internal_r+0x1a00>
   213c0:	014000f4 	movhi	r5,3
   213c4:	29441684 	addi	r5,r5,4186
   213c8:	dc402a15 	stw	r17,168(sp)
   213cc:	d9402c15 	stw	r5,176(sp)
   213d0:	b023883a 	mov	r17,r22
   213d4:	04c001c4 	movi	r19,7
   213d8:	a82d883a 	mov	r22,r21
   213dc:	902b883a 	mov	r21,r18
   213e0:	8025883a 	mov	r18,r16
   213e4:	dc002d17 	ldw	r16,180(sp)
   213e8:	00000306 	br	213f8 <___vfprintf_internal_r+0x960>
   213ec:	8c7ffc04 	addi	r17,r17,-16
   213f0:	42000204 	addi	r8,r8,8
   213f4:	e440110e 	bge	fp,r17,2143c <___vfprintf_internal_r+0x9a4>
   213f8:	18c00404 	addi	r3,r3,16
   213fc:	10800044 	addi	r2,r2,1
   21400:	45000015 	stw	r20,0(r8)
   21404:	47000115 	stw	fp,4(r8)
   21408:	d8c02015 	stw	r3,128(sp)
   2140c:	d8801f15 	stw	r2,124(sp)
   21410:	98bff60e 	bge	r19,r2,213ec <_gp+0xfffe6288>
   21414:	d9801e04 	addi	r6,sp,120
   21418:	b80b883a 	mov	r5,r23
   2141c:	8009883a 	mov	r4,r16
   21420:	00282780 	call	28278 <__sprint_r>
   21424:	103ea01e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   21428:	8c7ffc04 	addi	r17,r17,-16
   2142c:	d8c02017 	ldw	r3,128(sp)
   21430:	d8801f17 	ldw	r2,124(sp)
   21434:	da000404 	addi	r8,sp,16
   21438:	e47fef16 	blt	fp,r17,213f8 <_gp+0xfffe6294>
   2143c:	9021883a 	mov	r16,r18
   21440:	a825883a 	mov	r18,r21
   21444:	b02b883a 	mov	r21,r22
   21448:	882d883a 	mov	r22,r17
   2144c:	dc402a17 	ldw	r17,168(sp)
   21450:	d9002c17 	ldw	r4,176(sp)
   21454:	1d87883a 	add	r3,r3,r22
   21458:	10800044 	addi	r2,r2,1
   2145c:	41000015 	stw	r4,0(r8)
   21460:	45800115 	stw	r22,4(r8)
   21464:	d8c02015 	stw	r3,128(sp)
   21468:	d8801f15 	stw	r2,124(sp)
   2146c:	010001c4 	movi	r4,7
   21470:	20821016 	blt	r4,r2,21cb4 <___vfprintf_internal_r+0x121c>
   21474:	42000204 	addi	r8,r8,8
   21478:	9080400c 	andi	r2,r18,256
   2147c:	10013a1e 	bne	r2,zero,21968 <___vfprintf_internal_r+0xed0>
   21480:	d9402b17 	ldw	r5,172(sp)
   21484:	d8801f17 	ldw	r2,124(sp)
   21488:	44000015 	stw	r16,0(r8)
   2148c:	1947883a 	add	r3,r3,r5
   21490:	10800044 	addi	r2,r2,1
   21494:	41400115 	stw	r5,4(r8)
   21498:	d8c02015 	stw	r3,128(sp)
   2149c:	d8801f15 	stw	r2,124(sp)
   214a0:	010001c4 	movi	r4,7
   214a4:	2081f516 	blt	r4,r2,21c7c <___vfprintf_internal_r+0x11e4>
   214a8:	42000204 	addi	r8,r8,8
   214ac:	9480010c 	andi	r18,r18,4
   214b0:	90003226 	beq	r18,zero,2157c <___vfprintf_internal_r+0xae4>
   214b4:	d9403117 	ldw	r5,196(sp)
   214b8:	d8802917 	ldw	r2,164(sp)
   214bc:	28a1c83a 	sub	r16,r5,r2
   214c0:	04002e0e 	bge	zero,r16,2157c <___vfprintf_internal_r+0xae4>
   214c4:	04400404 	movi	r17,16
   214c8:	d8801f17 	ldw	r2,124(sp)
   214cc:	8c04c40e 	bge	r17,r16,227e0 <___vfprintf_internal_r+0x1d48>
   214d0:	014000f4 	movhi	r5,3
   214d4:	29441a84 	addi	r5,r5,4202
   214d8:	d9403515 	stw	r5,212(sp)
   214dc:	048001c4 	movi	r18,7
   214e0:	dcc02d17 	ldw	r19,180(sp)
   214e4:	00000306 	br	214f4 <___vfprintf_internal_r+0xa5c>
   214e8:	843ffc04 	addi	r16,r16,-16
   214ec:	42000204 	addi	r8,r8,8
   214f0:	8c00130e 	bge	r17,r16,21540 <___vfprintf_internal_r+0xaa8>
   214f4:	010000f4 	movhi	r4,3
   214f8:	18c00404 	addi	r3,r3,16
   214fc:	10800044 	addi	r2,r2,1
   21500:	21041a84 	addi	r4,r4,4202
   21504:	41000015 	stw	r4,0(r8)
   21508:	44400115 	stw	r17,4(r8)
   2150c:	d8c02015 	stw	r3,128(sp)
   21510:	d8801f15 	stw	r2,124(sp)
   21514:	90bff40e 	bge	r18,r2,214e8 <_gp+0xfffe6384>
   21518:	d9801e04 	addi	r6,sp,120
   2151c:	b80b883a 	mov	r5,r23
   21520:	9809883a 	mov	r4,r19
   21524:	00282780 	call	28278 <__sprint_r>
   21528:	103e5f1e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   2152c:	843ffc04 	addi	r16,r16,-16
   21530:	d8c02017 	ldw	r3,128(sp)
   21534:	d8801f17 	ldw	r2,124(sp)
   21538:	da000404 	addi	r8,sp,16
   2153c:	8c3fed16 	blt	r17,r16,214f4 <_gp+0xfffe6390>
   21540:	d9403517 	ldw	r5,212(sp)
   21544:	1c07883a 	add	r3,r3,r16
   21548:	10800044 	addi	r2,r2,1
   2154c:	41400015 	stw	r5,0(r8)
   21550:	44000115 	stw	r16,4(r8)
   21554:	d8c02015 	stw	r3,128(sp)
   21558:	d8801f15 	stw	r2,124(sp)
   2155c:	010001c4 	movi	r4,7
   21560:	2080060e 	bge	r4,r2,2157c <___vfprintf_internal_r+0xae4>
   21564:	d9002d17 	ldw	r4,180(sp)
   21568:	d9801e04 	addi	r6,sp,120
   2156c:	b80b883a 	mov	r5,r23
   21570:	00282780 	call	28278 <__sprint_r>
   21574:	103e4c1e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   21578:	d8c02017 	ldw	r3,128(sp)
   2157c:	d8803117 	ldw	r2,196(sp)
   21580:	d9002917 	ldw	r4,164(sp)
   21584:	1100010e 	bge	r2,r4,2158c <___vfprintf_internal_r+0xaf4>
   21588:	2005883a 	mov	r2,r4
   2158c:	d9402f17 	ldw	r5,188(sp)
   21590:	288b883a 	add	r5,r5,r2
   21594:	d9402f15 	stw	r5,188(sp)
   21598:	1801c01e 	bne	r3,zero,21c9c <___vfprintf_internal_r+0x1204>
   2159c:	a8800007 	ldb	r2,0(r21)
   215a0:	d8001f15 	stw	zero,124(sp)
   215a4:	da000404 	addi	r8,sp,16
   215a8:	103d751e 	bne	r2,zero,20b80 <_gp+0xfffe5a1c>
   215ac:	a823883a 	mov	r17,r21
   215b0:	003d8b06 	br	20be0 <_gp+0xfffe5a7c>
   215b4:	8025883a 	mov	r18,r16
   215b8:	dc002903 	ldbu	r16,164(sp)
   215bc:	e011883a 	mov	r8,fp
   215c0:	84003fcc 	andi	r16,r16,255
   215c4:	8005e51e 	bne	r16,zero,22d5c <___vfprintf_internal_r+0x22c4>
   215c8:	94800414 	ori	r18,r18,16
   215cc:	9080080c 	andi	r2,r18,32
   215d0:	10022b26 	beq	r2,zero,21e80 <___vfprintf_internal_r+0x13e8>
   215d4:	d9002e17 	ldw	r4,184(sp)
   215d8:	d9402a17 	ldw	r5,168(sp)
   215dc:	d8002785 	stb	zero,158(sp)
   215e0:	20c00204 	addi	r3,r4,8
   215e4:	24c00017 	ldw	r19,0(r4)
   215e8:	25800117 	ldw	r22,4(r4)
   215ec:	28042e16 	blt	r5,zero,226a8 <___vfprintf_internal_r+0x1c10>
   215f0:	013fdfc4 	movi	r4,-129
   215f4:	9d84b03a 	or	r2,r19,r22
   215f8:	d8c02e15 	stw	r3,184(sp)
   215fc:	9124703a 	and	r18,r18,r4
   21600:	0039883a 	mov	fp,zero
   21604:	103e801e 	bne	r2,zero,21008 <_gp+0xfffe5ea4>
   21608:	d9002a17 	ldw	r4,168(sp)
   2160c:	2002e01e 	bne	r4,zero,22190 <___vfprintf_internal_r+0x16f8>
   21610:	d8002a15 	stw	zero,168(sp)
   21614:	d8002b15 	stw	zero,172(sp)
   21618:	dc001e04 	addi	r16,sp,120
   2161c:	003ef506 	br	211f4 <_gp+0xfffe6090>
   21620:	8025883a 	mov	r18,r16
   21624:	dc002903 	ldbu	r16,164(sp)
   21628:	e011883a 	mov	r8,fp
   2162c:	84003fcc 	andi	r16,r16,255
   21630:	8005ba1e 	bne	r16,zero,22d1c <___vfprintf_internal_r+0x2284>
   21634:	010000f4 	movhi	r4,3
   21638:	21040a04 	addi	r4,r4,4136
   2163c:	d9003915 	stw	r4,228(sp)
   21640:	9080080c 	andi	r2,r18,32
   21644:	10006126 	beq	r2,zero,217cc <___vfprintf_internal_r+0xd34>
   21648:	d9402e17 	ldw	r5,184(sp)
   2164c:	2cc00017 	ldw	r19,0(r5)
   21650:	2d800117 	ldw	r22,4(r5)
   21654:	29400204 	addi	r5,r5,8
   21658:	d9402e15 	stw	r5,184(sp)
   2165c:	9080004c 	andi	r2,r18,1
   21660:	1001ac26 	beq	r2,zero,21d14 <___vfprintf_internal_r+0x127c>
   21664:	9d84b03a 	or	r2,r19,r22
   21668:	10038526 	beq	r2,zero,22480 <___vfprintf_internal_r+0x19e8>
   2166c:	d8c02a17 	ldw	r3,168(sp)
   21670:	00800c04 	movi	r2,48
   21674:	d8802705 	stb	r2,156(sp)
   21678:	dc402745 	stb	r17,157(sp)
   2167c:	d8002785 	stb	zero,158(sp)
   21680:	90800094 	ori	r2,r18,2
   21684:	18047916 	blt	r3,zero,2286c <___vfprintf_internal_r+0x1dd4>
   21688:	00bfdfc4 	movi	r2,-129
   2168c:	90a4703a 	and	r18,r18,r2
   21690:	94800094 	ori	r18,r18,2
   21694:	0039883a 	mov	fp,zero
   21698:	d9003917 	ldw	r4,228(sp)
   2169c:	dc001e04 	addi	r16,sp,120
   216a0:	988003cc 	andi	r2,r19,15
   216a4:	b006973a 	slli	r3,r22,28
   216a8:	2085883a 	add	r2,r4,r2
   216ac:	9826d13a 	srli	r19,r19,4
   216b0:	10800003 	ldbu	r2,0(r2)
   216b4:	b02cd13a 	srli	r22,r22,4
   216b8:	843fffc4 	addi	r16,r16,-1
   216bc:	1ce6b03a 	or	r19,r3,r19
   216c0:	80800005 	stb	r2,0(r16)
   216c4:	9d84b03a 	or	r2,r19,r22
   216c8:	103ff51e 	bne	r2,zero,216a0 <_gp+0xfffe653c>
   216cc:	d8c02817 	ldw	r3,160(sp)
   216d0:	1c07c83a 	sub	r3,r3,r16
   216d4:	d8c02b15 	stw	r3,172(sp)
   216d8:	003ec606 	br	211f4 <_gp+0xfffe6090>
   216dc:	8025883a 	mov	r18,r16
   216e0:	dc002903 	ldbu	r16,164(sp)
   216e4:	e011883a 	mov	r8,fp
   216e8:	84003fcc 	andi	r16,r16,255
   216ec:	803e9626 	beq	r16,zero,21148 <_gp+0xfffe5fe4>
   216f0:	d8c02b03 	ldbu	r3,172(sp)
   216f4:	d8c02785 	stb	r3,158(sp)
   216f8:	003e9306 	br	21148 <_gp+0xfffe5fe4>
   216fc:	00c00044 	movi	r3,1
   21700:	d8c02905 	stb	r3,164(sp)
   21704:	00c00ac4 	movi	r3,43
   21708:	d8c02b05 	stb	r3,172(sp)
   2170c:	ac400007 	ldb	r17,0(r21)
   21710:	003d4306 	br	20c20 <_gp+0xfffe5abc>
   21714:	84000814 	ori	r16,r16,32
   21718:	ac400007 	ldb	r17,0(r21)
   2171c:	003d4006 	br	20c20 <_gp+0xfffe5abc>
   21720:	d8802e17 	ldw	r2,184(sp)
   21724:	8025883a 	mov	r18,r16
   21728:	d8002785 	stb	zero,158(sp)
   2172c:	14000017 	ldw	r16,0(r2)
   21730:	e011883a 	mov	r8,fp
   21734:	14c00104 	addi	r19,r2,4
   21738:	80042d26 	beq	r16,zero,227f0 <___vfprintf_internal_r+0x1d58>
   2173c:	d8c02a17 	ldw	r3,168(sp)
   21740:	1803e416 	blt	r3,zero,226d4 <___vfprintf_internal_r+0x1c3c>
   21744:	180d883a 	mov	r6,r3
   21748:	000b883a 	mov	r5,zero
   2174c:	8009883a 	mov	r4,r16
   21750:	df003d15 	stw	fp,244(sp)
   21754:	00263d00 	call	263d0 <memchr>
   21758:	da003d17 	ldw	r8,244(sp)
   2175c:	10046826 	beq	r2,zero,22900 <___vfprintf_internal_r+0x1e68>
   21760:	1405c83a 	sub	r2,r2,r16
   21764:	d8802b15 	stw	r2,172(sp)
   21768:	1003e016 	blt	r2,zero,226ec <___vfprintf_internal_r+0x1c54>
   2176c:	df002783 	ldbu	fp,158(sp)
   21770:	d8802915 	stw	r2,164(sp)
   21774:	dcc02e15 	stw	r19,184(sp)
   21778:	d8002a15 	stw	zero,168(sp)
   2177c:	d8003215 	stw	zero,200(sp)
   21780:	003ea206 	br	2120c <_gp+0xfffe60a8>
   21784:	8025883a 	mov	r18,r16
   21788:	dc002903 	ldbu	r16,164(sp)
   2178c:	e011883a 	mov	r8,fp
   21790:	84003fcc 	andi	r16,r16,255
   21794:	803f8d26 	beq	r16,zero,215cc <_gp+0xfffe6468>
   21798:	d8c02b03 	ldbu	r3,172(sp)
   2179c:	d8c02785 	stb	r3,158(sp)
   217a0:	003f8a06 	br	215cc <_gp+0xfffe6468>
   217a4:	8025883a 	mov	r18,r16
   217a8:	dc002903 	ldbu	r16,164(sp)
   217ac:	e011883a 	mov	r8,fp
   217b0:	84003fcc 	andi	r16,r16,255
   217b4:	8005661e 	bne	r16,zero,22d50 <___vfprintf_internal_r+0x22b8>
   217b8:	010000f4 	movhi	r4,3
   217bc:	21040f04 	addi	r4,r4,4156
   217c0:	d9003915 	stw	r4,228(sp)
   217c4:	9080080c 	andi	r2,r18,32
   217c8:	103f9f1e 	bne	r2,zero,21648 <_gp+0xfffe64e4>
   217cc:	9080040c 	andi	r2,r18,16
   217d0:	1002eb26 	beq	r2,zero,22380 <___vfprintf_internal_r+0x18e8>
   217d4:	d8802e17 	ldw	r2,184(sp)
   217d8:	002d883a 	mov	r22,zero
   217dc:	14c00017 	ldw	r19,0(r2)
   217e0:	10800104 	addi	r2,r2,4
   217e4:	d8802e15 	stw	r2,184(sp)
   217e8:	003f9c06 	br	2165c <_gp+0xfffe64f8>
   217ec:	d8802b07 	ldb	r2,172(sp)
   217f0:	1002e11e 	bne	r2,zero,22378 <___vfprintf_internal_r+0x18e0>
   217f4:	00c00044 	movi	r3,1
   217f8:	d8c02905 	stb	r3,164(sp)
   217fc:	00c00804 	movi	r3,32
   21800:	d8c02b05 	stb	r3,172(sp)
   21804:	ac400007 	ldb	r17,0(r21)
   21808:	003d0506 	br	20c20 <_gp+0xfffe5abc>
   2180c:	84000054 	ori	r16,r16,1
   21810:	ac400007 	ldb	r17,0(r21)
   21814:	003d0206 	br	20c20 <_gp+0xfffe5abc>
   21818:	8025883a 	mov	r18,r16
   2181c:	dc002903 	ldbu	r16,164(sp)
   21820:	e011883a 	mov	r8,fp
   21824:	84003fcc 	andi	r16,r16,255
   21828:	803de726 	beq	r16,zero,20fc8 <_gp+0xfffe5e64>
   2182c:	d8c02b03 	ldbu	r3,172(sp)
   21830:	d8c02785 	stb	r3,158(sp)
   21834:	003de406 	br	20fc8 <_gp+0xfffe5e64>
   21838:	84001014 	ori	r16,r16,64
   2183c:	ac400007 	ldb	r17,0(r21)
   21840:	003cf706 	br	20c20 <_gp+0xfffe5abc>
   21844:	ac400007 	ldb	r17,0(r21)
   21848:	00801b04 	movi	r2,108
   2184c:	88838f26 	beq	r17,r2,2268c <___vfprintf_internal_r+0x1bf4>
   21850:	84000414 	ori	r16,r16,16
   21854:	003cf206 	br	20c20 <_gp+0xfffe5abc>
   21858:	8025883a 	mov	r18,r16
   2185c:	dc002903 	ldbu	r16,164(sp)
   21860:	e011883a 	mov	r8,fp
   21864:	84003fcc 	andi	r16,r16,255
   21868:	80053f1e 	bne	r16,zero,22d68 <___vfprintf_internal_r+0x22d0>
   2186c:	9080080c 	andi	r2,r18,32
   21870:	1002d226 	beq	r2,zero,223bc <___vfprintf_internal_r+0x1924>
   21874:	d9002e17 	ldw	r4,184(sp)
   21878:	d9402f17 	ldw	r5,188(sp)
   2187c:	20800017 	ldw	r2,0(r4)
   21880:	2807d7fa 	srai	r3,r5,31
   21884:	21000104 	addi	r4,r4,4
   21888:	d9002e15 	stw	r4,184(sp)
   2188c:	11400015 	stw	r5,0(r2)
   21890:	10c00115 	stw	r3,4(r2)
   21894:	003cb806 	br	20b78 <_gp+0xfffe5a14>
   21898:	d8c02e17 	ldw	r3,184(sp)
   2189c:	d9002e17 	ldw	r4,184(sp)
   218a0:	8025883a 	mov	r18,r16
   218a4:	18800017 	ldw	r2,0(r3)
   218a8:	21000104 	addi	r4,r4,4
   218ac:	00c00044 	movi	r3,1
   218b0:	e011883a 	mov	r8,fp
   218b4:	d8c02915 	stw	r3,164(sp)
   218b8:	d8002785 	stb	zero,158(sp)
   218bc:	d8801405 	stb	r2,80(sp)
   218c0:	d9002e15 	stw	r4,184(sp)
   218c4:	d8c02b15 	stw	r3,172(sp)
   218c8:	d8002a15 	stw	zero,168(sp)
   218cc:	d8003215 	stw	zero,200(sp)
   218d0:	dc001404 	addi	r16,sp,80
   218d4:	0039883a 	mov	fp,zero
   218d8:	003e5306 	br	21228 <_gp+0xfffe60c4>
   218dc:	010000f4 	movhi	r4,3
   218e0:	21040f04 	addi	r4,r4,4156
   218e4:	0039883a 	mov	fp,zero
   218e8:	d9003915 	stw	r4,228(sp)
   218ec:	04401e04 	movi	r17,120
   218f0:	003f6906 	br	21698 <_gp+0xfffe6534>
   218f4:	8025883a 	mov	r18,r16
   218f8:	dc002903 	ldbu	r16,164(sp)
   218fc:	e011883a 	mov	r8,fp
   21900:	84003fcc 	andi	r16,r16,255
   21904:	8005081e 	bne	r16,zero,22d28 <___vfprintf_internal_r+0x2290>
   21908:	883d6126 	beq	r17,zero,20e90 <_gp+0xfffe5d2c>
   2190c:	00c00044 	movi	r3,1
   21910:	d8c02915 	stw	r3,164(sp)
   21914:	dc401405 	stb	r17,80(sp)
   21918:	d8002785 	stb	zero,158(sp)
   2191c:	003fe906 	br	218c4 <_gp+0xfffe6760>
   21920:	014000f4 	movhi	r5,3
   21924:	29440f04 	addi	r5,r5,4156
   21928:	d9403915 	stw	r5,228(sp)
   2192c:	d8c02e15 	stw	r3,184(sp)
   21930:	1025883a 	mov	r18,r2
   21934:	04401e04 	movi	r17,120
   21938:	9d84b03a 	or	r2,r19,r22
   2193c:	1000fc1e 	bne	r2,zero,21d30 <___vfprintf_internal_r+0x1298>
   21940:	0039883a 	mov	fp,zero
   21944:	00800084 	movi	r2,2
   21948:	10803fcc 	andi	r2,r2,255
   2194c:	00c00044 	movi	r3,1
   21950:	10c20f26 	beq	r2,r3,22190 <___vfprintf_internal_r+0x16f8>
   21954:	00c00084 	movi	r3,2
   21958:	10fd3326 	beq	r2,r3,20e28 <_gp+0xfffe5cc4>
   2195c:	003e0b06 	br	2118c <_gp+0xfffe6028>
   21960:	d8c02017 	ldw	r3,128(sp)
   21964:	003e7106 	br	2132c <_gp+0xfffe61c8>
   21968:	00801944 	movi	r2,101
   2196c:	14407e0e 	bge	r2,r17,21b68 <___vfprintf_internal_r+0x10d0>
   21970:	d9003617 	ldw	r4,216(sp)
   21974:	d9403817 	ldw	r5,224(sp)
   21978:	000d883a 	mov	r6,zero
   2197c:	000f883a 	mov	r7,zero
   21980:	d8c03c15 	stw	r3,240(sp)
   21984:	da003d15 	stw	r8,244(sp)
   21988:	002c1b00 	call	2c1b0 <__eqdf2>
   2198c:	d8c03c17 	ldw	r3,240(sp)
   21990:	da003d17 	ldw	r8,244(sp)
   21994:	1000f71e 	bne	r2,zero,21d74 <___vfprintf_internal_r+0x12dc>
   21998:	d8801f17 	ldw	r2,124(sp)
   2199c:	010000f4 	movhi	r4,3
   219a0:	21041604 	addi	r4,r4,4184
   219a4:	18c00044 	addi	r3,r3,1
   219a8:	10800044 	addi	r2,r2,1
   219ac:	41000015 	stw	r4,0(r8)
   219b0:	01000044 	movi	r4,1
   219b4:	41000115 	stw	r4,4(r8)
   219b8:	d8c02015 	stw	r3,128(sp)
   219bc:	d8801f15 	stw	r2,124(sp)
   219c0:	010001c4 	movi	r4,7
   219c4:	2082b816 	blt	r4,r2,224a8 <___vfprintf_internal_r+0x1a10>
   219c8:	42000204 	addi	r8,r8,8
   219cc:	d8802617 	ldw	r2,152(sp)
   219d0:	d9403317 	ldw	r5,204(sp)
   219d4:	11400216 	blt	r2,r5,219e0 <___vfprintf_internal_r+0xf48>
   219d8:	9080004c 	andi	r2,r18,1
   219dc:	103eb326 	beq	r2,zero,214ac <_gp+0xfffe6348>
   219e0:	d8803717 	ldw	r2,220(sp)
   219e4:	d9003417 	ldw	r4,208(sp)
   219e8:	d9403717 	ldw	r5,220(sp)
   219ec:	1887883a 	add	r3,r3,r2
   219f0:	d8801f17 	ldw	r2,124(sp)
   219f4:	41000015 	stw	r4,0(r8)
   219f8:	41400115 	stw	r5,4(r8)
   219fc:	10800044 	addi	r2,r2,1
   21a00:	d8c02015 	stw	r3,128(sp)
   21a04:	d8801f15 	stw	r2,124(sp)
   21a08:	010001c4 	movi	r4,7
   21a0c:	20832916 	blt	r4,r2,226b4 <___vfprintf_internal_r+0x1c1c>
   21a10:	42000204 	addi	r8,r8,8
   21a14:	d8803317 	ldw	r2,204(sp)
   21a18:	143fffc4 	addi	r16,r2,-1
   21a1c:	043ea30e 	bge	zero,r16,214ac <_gp+0xfffe6348>
   21a20:	04400404 	movi	r17,16
   21a24:	d8801f17 	ldw	r2,124(sp)
   21a28:	8c00880e 	bge	r17,r16,21c4c <___vfprintf_internal_r+0x11b4>
   21a2c:	014000f4 	movhi	r5,3
   21a30:	29441684 	addi	r5,r5,4186
   21a34:	d9402c15 	stw	r5,176(sp)
   21a38:	058001c4 	movi	r22,7
   21a3c:	dcc02d17 	ldw	r19,180(sp)
   21a40:	00000306 	br	21a50 <___vfprintf_internal_r+0xfb8>
   21a44:	42000204 	addi	r8,r8,8
   21a48:	843ffc04 	addi	r16,r16,-16
   21a4c:	8c00820e 	bge	r17,r16,21c58 <___vfprintf_internal_r+0x11c0>
   21a50:	18c00404 	addi	r3,r3,16
   21a54:	10800044 	addi	r2,r2,1
   21a58:	45000015 	stw	r20,0(r8)
   21a5c:	44400115 	stw	r17,4(r8)
   21a60:	d8c02015 	stw	r3,128(sp)
   21a64:	d8801f15 	stw	r2,124(sp)
   21a68:	b0bff60e 	bge	r22,r2,21a44 <_gp+0xfffe68e0>
   21a6c:	d9801e04 	addi	r6,sp,120
   21a70:	b80b883a 	mov	r5,r23
   21a74:	9809883a 	mov	r4,r19
   21a78:	00282780 	call	28278 <__sprint_r>
   21a7c:	103d0a1e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   21a80:	d8c02017 	ldw	r3,128(sp)
   21a84:	d8801f17 	ldw	r2,124(sp)
   21a88:	da000404 	addi	r8,sp,16
   21a8c:	003fee06 	br	21a48 <_gp+0xfffe68e4>
   21a90:	d9403117 	ldw	r5,196(sp)
   21a94:	d8802917 	ldw	r2,164(sp)
   21a98:	28adc83a 	sub	r22,r5,r2
   21a9c:	05be410e 	bge	zero,r22,213a4 <_gp+0xfffe6240>
   21aa0:	07000404 	movi	fp,16
   21aa4:	d8801f17 	ldw	r2,124(sp)
   21aa8:	e5838f0e 	bge	fp,r22,228e8 <___vfprintf_internal_r+0x1e50>
   21aac:	014000f4 	movhi	r5,3
   21ab0:	29441684 	addi	r5,r5,4186
   21ab4:	dc403015 	stw	r17,192(sp)
   21ab8:	d9402c15 	stw	r5,176(sp)
   21abc:	b023883a 	mov	r17,r22
   21ac0:	04c001c4 	movi	r19,7
   21ac4:	a82d883a 	mov	r22,r21
   21ac8:	902b883a 	mov	r21,r18
   21acc:	8025883a 	mov	r18,r16
   21ad0:	dc002d17 	ldw	r16,180(sp)
   21ad4:	00000306 	br	21ae4 <___vfprintf_internal_r+0x104c>
   21ad8:	8c7ffc04 	addi	r17,r17,-16
   21adc:	42000204 	addi	r8,r8,8
   21ae0:	e440110e 	bge	fp,r17,21b28 <___vfprintf_internal_r+0x1090>
   21ae4:	18c00404 	addi	r3,r3,16
   21ae8:	10800044 	addi	r2,r2,1
   21aec:	45000015 	stw	r20,0(r8)
   21af0:	47000115 	stw	fp,4(r8)
   21af4:	d8c02015 	stw	r3,128(sp)
   21af8:	d8801f15 	stw	r2,124(sp)
   21afc:	98bff60e 	bge	r19,r2,21ad8 <_gp+0xfffe6974>
   21b00:	d9801e04 	addi	r6,sp,120
   21b04:	b80b883a 	mov	r5,r23
   21b08:	8009883a 	mov	r4,r16
   21b0c:	00282780 	call	28278 <__sprint_r>
   21b10:	103ce51e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   21b14:	8c7ffc04 	addi	r17,r17,-16
   21b18:	d8c02017 	ldw	r3,128(sp)
   21b1c:	d8801f17 	ldw	r2,124(sp)
   21b20:	da000404 	addi	r8,sp,16
   21b24:	e47fef16 	blt	fp,r17,21ae4 <_gp+0xfffe6980>
   21b28:	9021883a 	mov	r16,r18
   21b2c:	a825883a 	mov	r18,r21
   21b30:	b02b883a 	mov	r21,r22
   21b34:	882d883a 	mov	r22,r17
   21b38:	dc403017 	ldw	r17,192(sp)
   21b3c:	d9002c17 	ldw	r4,176(sp)
   21b40:	1d87883a 	add	r3,r3,r22
   21b44:	10800044 	addi	r2,r2,1
   21b48:	41000015 	stw	r4,0(r8)
   21b4c:	45800115 	stw	r22,4(r8)
   21b50:	d8c02015 	stw	r3,128(sp)
   21b54:	d8801f15 	stw	r2,124(sp)
   21b58:	010001c4 	movi	r4,7
   21b5c:	20818e16 	blt	r4,r2,22198 <___vfprintf_internal_r+0x1700>
   21b60:	42000204 	addi	r8,r8,8
   21b64:	003e0f06 	br	213a4 <_gp+0xfffe6240>
   21b68:	d9403317 	ldw	r5,204(sp)
   21b6c:	00800044 	movi	r2,1
   21b70:	18c00044 	addi	r3,r3,1
   21b74:	1141530e 	bge	r2,r5,220c4 <___vfprintf_internal_r+0x162c>
   21b78:	dc401f17 	ldw	r17,124(sp)
   21b7c:	00800044 	movi	r2,1
   21b80:	40800115 	stw	r2,4(r8)
   21b84:	8c400044 	addi	r17,r17,1
   21b88:	44000015 	stw	r16,0(r8)
   21b8c:	d8c02015 	stw	r3,128(sp)
   21b90:	dc401f15 	stw	r17,124(sp)
   21b94:	008001c4 	movi	r2,7
   21b98:	14416b16 	blt	r2,r17,22148 <___vfprintf_internal_r+0x16b0>
   21b9c:	42000204 	addi	r8,r8,8
   21ba0:	d8803717 	ldw	r2,220(sp)
   21ba4:	d9003417 	ldw	r4,208(sp)
   21ba8:	8c400044 	addi	r17,r17,1
   21bac:	10c7883a 	add	r3,r2,r3
   21bb0:	40800115 	stw	r2,4(r8)
   21bb4:	41000015 	stw	r4,0(r8)
   21bb8:	d8c02015 	stw	r3,128(sp)
   21bbc:	dc401f15 	stw	r17,124(sp)
   21bc0:	008001c4 	movi	r2,7
   21bc4:	14416916 	blt	r2,r17,2216c <___vfprintf_internal_r+0x16d4>
   21bc8:	45800204 	addi	r22,r8,8
   21bcc:	d9003617 	ldw	r4,216(sp)
   21bd0:	d9403817 	ldw	r5,224(sp)
   21bd4:	000d883a 	mov	r6,zero
   21bd8:	000f883a 	mov	r7,zero
   21bdc:	d8c03c15 	stw	r3,240(sp)
   21be0:	002c1b00 	call	2c1b0 <__eqdf2>
   21be4:	d8c03c17 	ldw	r3,240(sp)
   21be8:	1000bc26 	beq	r2,zero,21edc <___vfprintf_internal_r+0x1444>
   21bec:	d9403317 	ldw	r5,204(sp)
   21bf0:	84000044 	addi	r16,r16,1
   21bf4:	8c400044 	addi	r17,r17,1
   21bf8:	28bfffc4 	addi	r2,r5,-1
   21bfc:	1887883a 	add	r3,r3,r2
   21c00:	b0800115 	stw	r2,4(r22)
   21c04:	b4000015 	stw	r16,0(r22)
   21c08:	d8c02015 	stw	r3,128(sp)
   21c0c:	dc401f15 	stw	r17,124(sp)
   21c10:	008001c4 	movi	r2,7
   21c14:	14414316 	blt	r2,r17,22124 <___vfprintf_internal_r+0x168c>
   21c18:	b5800204 	addi	r22,r22,8
   21c1c:	d9003a17 	ldw	r4,232(sp)
   21c20:	df0022c4 	addi	fp,sp,139
   21c24:	8c400044 	addi	r17,r17,1
   21c28:	20c7883a 	add	r3,r4,r3
   21c2c:	b7000015 	stw	fp,0(r22)
   21c30:	b1000115 	stw	r4,4(r22)
   21c34:	d8c02015 	stw	r3,128(sp)
   21c38:	dc401f15 	stw	r17,124(sp)
   21c3c:	008001c4 	movi	r2,7
   21c40:	14400e16 	blt	r2,r17,21c7c <___vfprintf_internal_r+0x11e4>
   21c44:	b2000204 	addi	r8,r22,8
   21c48:	003e1806 	br	214ac <_gp+0xfffe6348>
   21c4c:	010000f4 	movhi	r4,3
   21c50:	21041684 	addi	r4,r4,4186
   21c54:	d9002c15 	stw	r4,176(sp)
   21c58:	d9002c17 	ldw	r4,176(sp)
   21c5c:	1c07883a 	add	r3,r3,r16
   21c60:	44000115 	stw	r16,4(r8)
   21c64:	41000015 	stw	r4,0(r8)
   21c68:	10800044 	addi	r2,r2,1
   21c6c:	d8c02015 	stw	r3,128(sp)
   21c70:	d8801f15 	stw	r2,124(sp)
   21c74:	010001c4 	movi	r4,7
   21c78:	20be0b0e 	bge	r4,r2,214a8 <_gp+0xfffe6344>
   21c7c:	d9002d17 	ldw	r4,180(sp)
   21c80:	d9801e04 	addi	r6,sp,120
   21c84:	b80b883a 	mov	r5,r23
   21c88:	00282780 	call	28278 <__sprint_r>
   21c8c:	103c861e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   21c90:	d8c02017 	ldw	r3,128(sp)
   21c94:	da000404 	addi	r8,sp,16
   21c98:	003e0406 	br	214ac <_gp+0xfffe6348>
   21c9c:	d9002d17 	ldw	r4,180(sp)
   21ca0:	d9801e04 	addi	r6,sp,120
   21ca4:	b80b883a 	mov	r5,r23
   21ca8:	00282780 	call	28278 <__sprint_r>
   21cac:	103e3b26 	beq	r2,zero,2159c <_gp+0xfffe6438>
   21cb0:	003c7d06 	br	20ea8 <_gp+0xfffe5d44>
   21cb4:	d9002d17 	ldw	r4,180(sp)
   21cb8:	d9801e04 	addi	r6,sp,120
   21cbc:	b80b883a 	mov	r5,r23
   21cc0:	00282780 	call	28278 <__sprint_r>
   21cc4:	103c781e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   21cc8:	d8c02017 	ldw	r3,128(sp)
   21ccc:	da000404 	addi	r8,sp,16
   21cd0:	003de906 	br	21478 <_gp+0xfffe6314>
   21cd4:	d9002d17 	ldw	r4,180(sp)
   21cd8:	d9801e04 	addi	r6,sp,120
   21cdc:	b80b883a 	mov	r5,r23
   21ce0:	00282780 	call	28278 <__sprint_r>
   21ce4:	103c701e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   21ce8:	d8c02017 	ldw	r3,128(sp)
   21cec:	da000404 	addi	r8,sp,16
   21cf0:	003d9b06 	br	21360 <_gp+0xfffe61fc>
   21cf4:	d9002d17 	ldw	r4,180(sp)
   21cf8:	d9801e04 	addi	r6,sp,120
   21cfc:	b80b883a 	mov	r5,r23
   21d00:	00282780 	call	28278 <__sprint_r>
   21d04:	103c681e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   21d08:	d8c02017 	ldw	r3,128(sp)
   21d0c:	da000404 	addi	r8,sp,16
   21d10:	003da106 	br	21398 <_gp+0xfffe6234>
   21d14:	d9402a17 	ldw	r5,168(sp)
   21d18:	d8002785 	stb	zero,158(sp)
   21d1c:	283f0616 	blt	r5,zero,21938 <_gp+0xfffe67d4>
   21d20:	00ffdfc4 	movi	r3,-129
   21d24:	9d84b03a 	or	r2,r19,r22
   21d28:	90e4703a 	and	r18,r18,r3
   21d2c:	103c3b26 	beq	r2,zero,20e1c <_gp+0xfffe5cb8>
   21d30:	0039883a 	mov	fp,zero
   21d34:	003e5806 	br	21698 <_gp+0xfffe6534>
   21d38:	9080040c 	andi	r2,r18,16
   21d3c:	1001b326 	beq	r2,zero,2240c <___vfprintf_internal_r+0x1974>
   21d40:	d8c02e17 	ldw	r3,184(sp)
   21d44:	d9002a17 	ldw	r4,168(sp)
   21d48:	d8002785 	stb	zero,158(sp)
   21d4c:	18800104 	addi	r2,r3,4
   21d50:	1cc00017 	ldw	r19,0(r3)
   21d54:	002d883a 	mov	r22,zero
   21d58:	2001b516 	blt	r4,zero,22430 <___vfprintf_internal_r+0x1998>
   21d5c:	00ffdfc4 	movi	r3,-129
   21d60:	d8802e15 	stw	r2,184(sp)
   21d64:	90e4703a 	and	r18,r18,r3
   21d68:	983d0526 	beq	r19,zero,21180 <_gp+0xfffe601c>
   21d6c:	0039883a 	mov	fp,zero
   21d70:	003d0806 	br	21194 <_gp+0xfffe6030>
   21d74:	dc402617 	ldw	r17,152(sp)
   21d78:	0441d30e 	bge	zero,r17,224c8 <___vfprintf_internal_r+0x1a30>
   21d7c:	dc403217 	ldw	r17,200(sp)
   21d80:	d8803317 	ldw	r2,204(sp)
   21d84:	1440010e 	bge	r2,r17,21d8c <___vfprintf_internal_r+0x12f4>
   21d88:	1023883a 	mov	r17,r2
   21d8c:	04400a0e 	bge	zero,r17,21db8 <___vfprintf_internal_r+0x1320>
   21d90:	d8801f17 	ldw	r2,124(sp)
   21d94:	1c47883a 	add	r3,r3,r17
   21d98:	44000015 	stw	r16,0(r8)
   21d9c:	10800044 	addi	r2,r2,1
   21da0:	44400115 	stw	r17,4(r8)
   21da4:	d8c02015 	stw	r3,128(sp)
   21da8:	d8801f15 	stw	r2,124(sp)
   21dac:	010001c4 	movi	r4,7
   21db0:	20826516 	blt	r4,r2,22748 <___vfprintf_internal_r+0x1cb0>
   21db4:	42000204 	addi	r8,r8,8
   21db8:	88026116 	blt	r17,zero,22740 <___vfprintf_internal_r+0x1ca8>
   21dbc:	d9003217 	ldw	r4,200(sp)
   21dc0:	2463c83a 	sub	r17,r4,r17
   21dc4:	04407b0e 	bge	zero,r17,21fb4 <___vfprintf_internal_r+0x151c>
   21dc8:	05800404 	movi	r22,16
   21dcc:	d8801f17 	ldw	r2,124(sp)
   21dd0:	b4419d0e 	bge	r22,r17,22448 <___vfprintf_internal_r+0x19b0>
   21dd4:	010000f4 	movhi	r4,3
   21dd8:	21041684 	addi	r4,r4,4186
   21ddc:	d9002c15 	stw	r4,176(sp)
   21de0:	070001c4 	movi	fp,7
   21de4:	dcc02d17 	ldw	r19,180(sp)
   21de8:	00000306 	br	21df8 <___vfprintf_internal_r+0x1360>
   21dec:	42000204 	addi	r8,r8,8
   21df0:	8c7ffc04 	addi	r17,r17,-16
   21df4:	b441970e 	bge	r22,r17,22454 <___vfprintf_internal_r+0x19bc>
   21df8:	18c00404 	addi	r3,r3,16
   21dfc:	10800044 	addi	r2,r2,1
   21e00:	45000015 	stw	r20,0(r8)
   21e04:	45800115 	stw	r22,4(r8)
   21e08:	d8c02015 	stw	r3,128(sp)
   21e0c:	d8801f15 	stw	r2,124(sp)
   21e10:	e0bff60e 	bge	fp,r2,21dec <_gp+0xfffe6c88>
   21e14:	d9801e04 	addi	r6,sp,120
   21e18:	b80b883a 	mov	r5,r23
   21e1c:	9809883a 	mov	r4,r19
   21e20:	00282780 	call	28278 <__sprint_r>
   21e24:	103c201e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   21e28:	d8c02017 	ldw	r3,128(sp)
   21e2c:	d8801f17 	ldw	r2,124(sp)
   21e30:	da000404 	addi	r8,sp,16
   21e34:	003fee06 	br	21df0 <_gp+0xfffe6c8c>
   21e38:	d9002d17 	ldw	r4,180(sp)
   21e3c:	d9801e04 	addi	r6,sp,120
   21e40:	b80b883a 	mov	r5,r23
   21e44:	00282780 	call	28278 <__sprint_r>
   21e48:	103c171e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   21e4c:	d8c02017 	ldw	r3,128(sp)
   21e50:	df002787 	ldb	fp,158(sp)
   21e54:	da000404 	addi	r8,sp,16
   21e58:	003d3406 	br	2132c <_gp+0xfffe61c8>
   21e5c:	9080040c 	andi	r2,r18,16
   21e60:	10016126 	beq	r2,zero,223e8 <___vfprintf_internal_r+0x1950>
   21e64:	d9402e17 	ldw	r5,184(sp)
   21e68:	2cc00017 	ldw	r19,0(r5)
   21e6c:	29400104 	addi	r5,r5,4
   21e70:	d9402e15 	stw	r5,184(sp)
   21e74:	982dd7fa 	srai	r22,r19,31
   21e78:	b005883a 	mov	r2,r22
   21e7c:	003c5a06 	br	20fe8 <_gp+0xfffe5e84>
   21e80:	9080040c 	andi	r2,r18,16
   21e84:	10003526 	beq	r2,zero,21f5c <___vfprintf_internal_r+0x14c4>
   21e88:	d8c02e17 	ldw	r3,184(sp)
   21e8c:	d9002a17 	ldw	r4,168(sp)
   21e90:	d8002785 	stb	zero,158(sp)
   21e94:	18800104 	addi	r2,r3,4
   21e98:	1cc00017 	ldw	r19,0(r3)
   21e9c:	002d883a 	mov	r22,zero
   21ea0:	20003716 	blt	r4,zero,21f80 <___vfprintf_internal_r+0x14e8>
   21ea4:	00ffdfc4 	movi	r3,-129
   21ea8:	d8802e15 	stw	r2,184(sp)
   21eac:	90e4703a 	and	r18,r18,r3
   21eb0:	0039883a 	mov	fp,zero
   21eb4:	983dd426 	beq	r19,zero,21608 <_gp+0xfffe64a4>
   21eb8:	00800244 	movi	r2,9
   21ebc:	14fc5336 	bltu	r2,r19,2100c <_gp+0xfffe5ea8>
   21ec0:	d8c02817 	ldw	r3,160(sp)
   21ec4:	dc001dc4 	addi	r16,sp,119
   21ec8:	9cc00c04 	addi	r19,r19,48
   21ecc:	1c07c83a 	sub	r3,r3,r16
   21ed0:	dcc01dc5 	stb	r19,119(sp)
   21ed4:	d8c02b15 	stw	r3,172(sp)
   21ed8:	003cc606 	br	211f4 <_gp+0xfffe6090>
   21edc:	d8803317 	ldw	r2,204(sp)
   21ee0:	143fffc4 	addi	r16,r2,-1
   21ee4:	043f4d0e 	bge	zero,r16,21c1c <_gp+0xfffe6ab8>
   21ee8:	07000404 	movi	fp,16
   21eec:	e400810e 	bge	fp,r16,220f4 <___vfprintf_internal_r+0x165c>
   21ef0:	014000f4 	movhi	r5,3
   21ef4:	29441684 	addi	r5,r5,4186
   21ef8:	d9402c15 	stw	r5,176(sp)
   21efc:	01c001c4 	movi	r7,7
   21f00:	dcc02d17 	ldw	r19,180(sp)
   21f04:	00000306 	br	21f14 <___vfprintf_internal_r+0x147c>
   21f08:	b5800204 	addi	r22,r22,8
   21f0c:	843ffc04 	addi	r16,r16,-16
   21f10:	e4007b0e 	bge	fp,r16,22100 <___vfprintf_internal_r+0x1668>
   21f14:	18c00404 	addi	r3,r3,16
   21f18:	8c400044 	addi	r17,r17,1
   21f1c:	b5000015 	stw	r20,0(r22)
   21f20:	b7000115 	stw	fp,4(r22)
   21f24:	d8c02015 	stw	r3,128(sp)
   21f28:	dc401f15 	stw	r17,124(sp)
   21f2c:	3c7ff60e 	bge	r7,r17,21f08 <_gp+0xfffe6da4>
   21f30:	d9801e04 	addi	r6,sp,120
   21f34:	b80b883a 	mov	r5,r23
   21f38:	9809883a 	mov	r4,r19
   21f3c:	d9c03c15 	stw	r7,240(sp)
   21f40:	00282780 	call	28278 <__sprint_r>
   21f44:	d9c03c17 	ldw	r7,240(sp)
   21f48:	103bd71e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   21f4c:	d8c02017 	ldw	r3,128(sp)
   21f50:	dc401f17 	ldw	r17,124(sp)
   21f54:	dd800404 	addi	r22,sp,16
   21f58:	003fec06 	br	21f0c <_gp+0xfffe6da8>
   21f5c:	9080100c 	andi	r2,r18,64
   21f60:	d8002785 	stb	zero,158(sp)
   21f64:	10010e26 	beq	r2,zero,223a0 <___vfprintf_internal_r+0x1908>
   21f68:	d9402e17 	ldw	r5,184(sp)
   21f6c:	d8c02a17 	ldw	r3,168(sp)
   21f70:	002d883a 	mov	r22,zero
   21f74:	28800104 	addi	r2,r5,4
   21f78:	2cc0000b 	ldhu	r19,0(r5)
   21f7c:	183fc90e 	bge	r3,zero,21ea4 <_gp+0xfffe6d40>
   21f80:	d8802e15 	stw	r2,184(sp)
   21f84:	0039883a 	mov	fp,zero
   21f88:	9d84b03a 	or	r2,r19,r22
   21f8c:	103c1e1e 	bne	r2,zero,21008 <_gp+0xfffe5ea4>
   21f90:	00800044 	movi	r2,1
   21f94:	003e6c06 	br	21948 <_gp+0xfffe67e4>
   21f98:	d9002d17 	ldw	r4,180(sp)
   21f9c:	d9801e04 	addi	r6,sp,120
   21fa0:	b80b883a 	mov	r5,r23
   21fa4:	00282780 	call	28278 <__sprint_r>
   21fa8:	103bbf1e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   21fac:	d8c02017 	ldw	r3,128(sp)
   21fb0:	da000404 	addi	r8,sp,16
   21fb4:	d9003217 	ldw	r4,200(sp)
   21fb8:	d8802617 	ldw	r2,152(sp)
   21fbc:	d9403317 	ldw	r5,204(sp)
   21fc0:	8123883a 	add	r17,r16,r4
   21fc4:	11400216 	blt	r2,r5,21fd0 <___vfprintf_internal_r+0x1538>
   21fc8:	9100004c 	andi	r4,r18,1
   21fcc:	20000d26 	beq	r4,zero,22004 <___vfprintf_internal_r+0x156c>
   21fd0:	d9003717 	ldw	r4,220(sp)
   21fd4:	d9403417 	ldw	r5,208(sp)
   21fd8:	1907883a 	add	r3,r3,r4
   21fdc:	d9001f17 	ldw	r4,124(sp)
   21fe0:	41400015 	stw	r5,0(r8)
   21fe4:	d9403717 	ldw	r5,220(sp)
   21fe8:	21000044 	addi	r4,r4,1
   21fec:	d8c02015 	stw	r3,128(sp)
   21ff0:	41400115 	stw	r5,4(r8)
   21ff4:	d9001f15 	stw	r4,124(sp)
   21ff8:	014001c4 	movi	r5,7
   21ffc:	2901e816 	blt	r5,r4,227a0 <___vfprintf_internal_r+0x1d08>
   22000:	42000204 	addi	r8,r8,8
   22004:	d9003317 	ldw	r4,204(sp)
   22008:	8121883a 	add	r16,r16,r4
   2200c:	2085c83a 	sub	r2,r4,r2
   22010:	8461c83a 	sub	r16,r16,r17
   22014:	1400010e 	bge	r2,r16,2201c <___vfprintf_internal_r+0x1584>
   22018:	1021883a 	mov	r16,r2
   2201c:	04000a0e 	bge	zero,r16,22048 <___vfprintf_internal_r+0x15b0>
   22020:	d9001f17 	ldw	r4,124(sp)
   22024:	1c07883a 	add	r3,r3,r16
   22028:	44400015 	stw	r17,0(r8)
   2202c:	21000044 	addi	r4,r4,1
   22030:	44000115 	stw	r16,4(r8)
   22034:	d8c02015 	stw	r3,128(sp)
   22038:	d9001f15 	stw	r4,124(sp)
   2203c:	014001c4 	movi	r5,7
   22040:	2901fb16 	blt	r5,r4,22830 <___vfprintf_internal_r+0x1d98>
   22044:	42000204 	addi	r8,r8,8
   22048:	8001f716 	blt	r16,zero,22828 <___vfprintf_internal_r+0x1d90>
   2204c:	1421c83a 	sub	r16,r2,r16
   22050:	043d160e 	bge	zero,r16,214ac <_gp+0xfffe6348>
   22054:	04400404 	movi	r17,16
   22058:	d8801f17 	ldw	r2,124(sp)
   2205c:	8c3efb0e 	bge	r17,r16,21c4c <_gp+0xfffe6ae8>
   22060:	014000f4 	movhi	r5,3
   22064:	29441684 	addi	r5,r5,4186
   22068:	d9402c15 	stw	r5,176(sp)
   2206c:	058001c4 	movi	r22,7
   22070:	dcc02d17 	ldw	r19,180(sp)
   22074:	00000306 	br	22084 <___vfprintf_internal_r+0x15ec>
   22078:	42000204 	addi	r8,r8,8
   2207c:	843ffc04 	addi	r16,r16,-16
   22080:	8c3ef50e 	bge	r17,r16,21c58 <_gp+0xfffe6af4>
   22084:	18c00404 	addi	r3,r3,16
   22088:	10800044 	addi	r2,r2,1
   2208c:	45000015 	stw	r20,0(r8)
   22090:	44400115 	stw	r17,4(r8)
   22094:	d8c02015 	stw	r3,128(sp)
   22098:	d8801f15 	stw	r2,124(sp)
   2209c:	b0bff60e 	bge	r22,r2,22078 <_gp+0xfffe6f14>
   220a0:	d9801e04 	addi	r6,sp,120
   220a4:	b80b883a 	mov	r5,r23
   220a8:	9809883a 	mov	r4,r19
   220ac:	00282780 	call	28278 <__sprint_r>
   220b0:	103b7d1e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   220b4:	d8c02017 	ldw	r3,128(sp)
   220b8:	d8801f17 	ldw	r2,124(sp)
   220bc:	da000404 	addi	r8,sp,16
   220c0:	003fee06 	br	2207c <_gp+0xfffe6f18>
   220c4:	9088703a 	and	r4,r18,r2
   220c8:	203eab1e 	bne	r4,zero,21b78 <_gp+0xfffe6a14>
   220cc:	dc401f17 	ldw	r17,124(sp)
   220d0:	40800115 	stw	r2,4(r8)
   220d4:	44000015 	stw	r16,0(r8)
   220d8:	8c400044 	addi	r17,r17,1
   220dc:	d8c02015 	stw	r3,128(sp)
   220e0:	dc401f15 	stw	r17,124(sp)
   220e4:	008001c4 	movi	r2,7
   220e8:	14400e16 	blt	r2,r17,22124 <___vfprintf_internal_r+0x168c>
   220ec:	45800204 	addi	r22,r8,8
   220f0:	003eca06 	br	21c1c <_gp+0xfffe6ab8>
   220f4:	010000f4 	movhi	r4,3
   220f8:	21041684 	addi	r4,r4,4186
   220fc:	d9002c15 	stw	r4,176(sp)
   22100:	d8802c17 	ldw	r2,176(sp)
   22104:	1c07883a 	add	r3,r3,r16
   22108:	8c400044 	addi	r17,r17,1
   2210c:	b0800015 	stw	r2,0(r22)
   22110:	b4000115 	stw	r16,4(r22)
   22114:	d8c02015 	stw	r3,128(sp)
   22118:	dc401f15 	stw	r17,124(sp)
   2211c:	008001c4 	movi	r2,7
   22120:	147ebd0e 	bge	r2,r17,21c18 <_gp+0xfffe6ab4>
   22124:	d9002d17 	ldw	r4,180(sp)
   22128:	d9801e04 	addi	r6,sp,120
   2212c:	b80b883a 	mov	r5,r23
   22130:	00282780 	call	28278 <__sprint_r>
   22134:	103b5c1e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   22138:	d8c02017 	ldw	r3,128(sp)
   2213c:	dc401f17 	ldw	r17,124(sp)
   22140:	dd800404 	addi	r22,sp,16
   22144:	003eb506 	br	21c1c <_gp+0xfffe6ab8>
   22148:	d9002d17 	ldw	r4,180(sp)
   2214c:	d9801e04 	addi	r6,sp,120
   22150:	b80b883a 	mov	r5,r23
   22154:	00282780 	call	28278 <__sprint_r>
   22158:	103b531e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   2215c:	d8c02017 	ldw	r3,128(sp)
   22160:	dc401f17 	ldw	r17,124(sp)
   22164:	da000404 	addi	r8,sp,16
   22168:	003e8d06 	br	21ba0 <_gp+0xfffe6a3c>
   2216c:	d9002d17 	ldw	r4,180(sp)
   22170:	d9801e04 	addi	r6,sp,120
   22174:	b80b883a 	mov	r5,r23
   22178:	00282780 	call	28278 <__sprint_r>
   2217c:	103b4a1e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   22180:	d8c02017 	ldw	r3,128(sp)
   22184:	dc401f17 	ldw	r17,124(sp)
   22188:	dd800404 	addi	r22,sp,16
   2218c:	003e8f06 	br	21bcc <_gp+0xfffe6a68>
   22190:	0027883a 	mov	r19,zero
   22194:	003f4a06 	br	21ec0 <_gp+0xfffe6d5c>
   22198:	d9002d17 	ldw	r4,180(sp)
   2219c:	d9801e04 	addi	r6,sp,120
   221a0:	b80b883a 	mov	r5,r23
   221a4:	00282780 	call	28278 <__sprint_r>
   221a8:	103b3f1e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   221ac:	d8c02017 	ldw	r3,128(sp)
   221b0:	da000404 	addi	r8,sp,16
   221b4:	003c7b06 	br	213a4 <_gp+0xfffe6240>
   221b8:	d9402a17 	ldw	r5,168(sp)
   221bc:	04e7c83a 	sub	r19,zero,r19
   221c0:	07000b44 	movi	fp,45
   221c4:	9804c03a 	cmpne	r2,r19,zero
   221c8:	05adc83a 	sub	r22,zero,r22
   221cc:	df002785 	stb	fp,158(sp)
   221d0:	b0adc83a 	sub	r22,r22,r2
   221d4:	28017b16 	blt	r5,zero,227c4 <___vfprintf_internal_r+0x1d2c>
   221d8:	00bfdfc4 	movi	r2,-129
   221dc:	90a4703a 	and	r18,r18,r2
   221e0:	003b8906 	br	21008 <_gp+0xfffe5ea4>
   221e4:	d9003617 	ldw	r4,216(sp)
   221e8:	d9403817 	ldw	r5,224(sp)
   221ec:	da003d15 	stw	r8,244(sp)
   221f0:	0027e9c0 	call	27e9c <__fpclassifyd>
   221f4:	da003d17 	ldw	r8,244(sp)
   221f8:	1000f026 	beq	r2,zero,225bc <___vfprintf_internal_r+0x1b24>
   221fc:	d9002a17 	ldw	r4,168(sp)
   22200:	05bff7c4 	movi	r22,-33
   22204:	00bfffc4 	movi	r2,-1
   22208:	8dac703a 	and	r22,r17,r22
   2220c:	20820026 	beq	r4,r2,22a10 <___vfprintf_internal_r+0x1f78>
   22210:	008011c4 	movi	r2,71
   22214:	b081f726 	beq	r22,r2,229f4 <___vfprintf_internal_r+0x1f5c>
   22218:	d9003817 	ldw	r4,224(sp)
   2221c:	90c04014 	ori	r3,r18,256
   22220:	d8c02c15 	stw	r3,176(sp)
   22224:	20021516 	blt	r4,zero,22a7c <___vfprintf_internal_r+0x1fe4>
   22228:	dcc03817 	ldw	r19,224(sp)
   2222c:	d8002905 	stb	zero,164(sp)
   22230:	00801984 	movi	r2,102
   22234:	8881f926 	beq	r17,r2,22a1c <___vfprintf_internal_r+0x1f84>
   22238:	00801184 	movi	r2,70
   2223c:	88821c26 	beq	r17,r2,22ab0 <___vfprintf_internal_r+0x2018>
   22240:	00801144 	movi	r2,69
   22244:	b081ef26 	beq	r22,r2,22a04 <___vfprintf_internal_r+0x1f6c>
   22248:	d8c02a17 	ldw	r3,168(sp)
   2224c:	d8802104 	addi	r2,sp,132
   22250:	d8800315 	stw	r2,12(sp)
   22254:	d9403617 	ldw	r5,216(sp)
   22258:	d8802504 	addi	r2,sp,148
   2225c:	d9002d17 	ldw	r4,180(sp)
   22260:	d8800215 	stw	r2,8(sp)
   22264:	d8802604 	addi	r2,sp,152
   22268:	d8c00015 	stw	r3,0(sp)
   2226c:	d8800115 	stw	r2,4(sp)
   22270:	01c00084 	movi	r7,2
   22274:	980d883a 	mov	r6,r19
   22278:	d8c03c15 	stw	r3,240(sp)
   2227c:	da003d15 	stw	r8,244(sp)
   22280:	00231c80 	call	231c8 <_dtoa_r>
   22284:	1021883a 	mov	r16,r2
   22288:	008019c4 	movi	r2,103
   2228c:	d8c03c17 	ldw	r3,240(sp)
   22290:	da003d17 	ldw	r8,244(sp)
   22294:	88817126 	beq	r17,r2,2285c <___vfprintf_internal_r+0x1dc4>
   22298:	008011c4 	movi	r2,71
   2229c:	88829126 	beq	r17,r2,22ce4 <___vfprintf_internal_r+0x224c>
   222a0:	80f9883a 	add	fp,r16,r3
   222a4:	d9003617 	ldw	r4,216(sp)
   222a8:	000d883a 	mov	r6,zero
   222ac:	000f883a 	mov	r7,zero
   222b0:	980b883a 	mov	r5,r19
   222b4:	da003d15 	stw	r8,244(sp)
   222b8:	002c1b00 	call	2c1b0 <__eqdf2>
   222bc:	da003d17 	ldw	r8,244(sp)
   222c0:	10018d26 	beq	r2,zero,228f8 <___vfprintf_internal_r+0x1e60>
   222c4:	d8802117 	ldw	r2,132(sp)
   222c8:	1700062e 	bgeu	r2,fp,222e4 <___vfprintf_internal_r+0x184c>
   222cc:	01000c04 	movi	r4,48
   222d0:	10c00044 	addi	r3,r2,1
   222d4:	d8c02115 	stw	r3,132(sp)
   222d8:	11000005 	stb	r4,0(r2)
   222dc:	d8802117 	ldw	r2,132(sp)
   222e0:	173ffb36 	bltu	r2,fp,222d0 <_gp+0xfffe716c>
   222e4:	1405c83a 	sub	r2,r2,r16
   222e8:	d8803315 	stw	r2,204(sp)
   222ec:	008011c4 	movi	r2,71
   222f0:	b0817626 	beq	r22,r2,228cc <___vfprintf_internal_r+0x1e34>
   222f4:	00801944 	movi	r2,101
   222f8:	1442800e 	bge	r2,r17,22cfc <___vfprintf_internal_r+0x2264>
   222fc:	d8c02617 	ldw	r3,152(sp)
   22300:	00801984 	movi	r2,102
   22304:	d8c03215 	stw	r3,200(sp)
   22308:	8881fe26 	beq	r17,r2,22b04 <___vfprintf_internal_r+0x206c>
   2230c:	d8c03217 	ldw	r3,200(sp)
   22310:	d9003317 	ldw	r4,204(sp)
   22314:	1901dd16 	blt	r3,r4,22a8c <___vfprintf_internal_r+0x1ff4>
   22318:	9480004c 	andi	r18,r18,1
   2231c:	90022b1e 	bne	r18,zero,22bcc <___vfprintf_internal_r+0x2134>
   22320:	1805883a 	mov	r2,r3
   22324:	18028316 	blt	r3,zero,22d34 <___vfprintf_internal_r+0x229c>
   22328:	d8c03217 	ldw	r3,200(sp)
   2232c:	044019c4 	movi	r17,103
   22330:	d8c02b15 	stw	r3,172(sp)
   22334:	df002907 	ldb	fp,164(sp)
   22338:	e001531e 	bne	fp,zero,22888 <___vfprintf_internal_r+0x1df0>
   2233c:	df002783 	ldbu	fp,158(sp)
   22340:	d8802915 	stw	r2,164(sp)
   22344:	dc802c17 	ldw	r18,176(sp)
   22348:	d8002a15 	stw	zero,168(sp)
   2234c:	003baf06 	br	2120c <_gp+0xfffe60a8>
   22350:	d8c02e17 	ldw	r3,184(sp)
   22354:	d9002e17 	ldw	r4,184(sp)
   22358:	d9402e17 	ldw	r5,184(sp)
   2235c:	18c00017 	ldw	r3,0(r3)
   22360:	21000117 	ldw	r4,4(r4)
   22364:	29400204 	addi	r5,r5,8
   22368:	d8c03615 	stw	r3,216(sp)
   2236c:	d9003815 	stw	r4,224(sp)
   22370:	d9402e15 	stw	r5,184(sp)
   22374:	003b5006 	br	210b8 <_gp+0xfffe5f54>
   22378:	ac400007 	ldb	r17,0(r21)
   2237c:	003a2806 	br	20c20 <_gp+0xfffe5abc>
   22380:	9080100c 	andi	r2,r18,64
   22384:	1000a826 	beq	r2,zero,22628 <___vfprintf_internal_r+0x1b90>
   22388:	d8c02e17 	ldw	r3,184(sp)
   2238c:	002d883a 	mov	r22,zero
   22390:	1cc0000b 	ldhu	r19,0(r3)
   22394:	18c00104 	addi	r3,r3,4
   22398:	d8c02e15 	stw	r3,184(sp)
   2239c:	003caf06 	br	2165c <_gp+0xfffe64f8>
   223a0:	d9002e17 	ldw	r4,184(sp)
   223a4:	d9402a17 	ldw	r5,168(sp)
   223a8:	002d883a 	mov	r22,zero
   223ac:	20800104 	addi	r2,r4,4
   223b0:	24c00017 	ldw	r19,0(r4)
   223b4:	283ebb0e 	bge	r5,zero,21ea4 <_gp+0xfffe6d40>
   223b8:	003ef106 	br	21f80 <_gp+0xfffe6e1c>
   223bc:	9080040c 	andi	r2,r18,16
   223c0:	1000921e 	bne	r2,zero,2260c <___vfprintf_internal_r+0x1b74>
   223c4:	9480100c 	andi	r18,r18,64
   223c8:	90013926 	beq	r18,zero,228b0 <___vfprintf_internal_r+0x1e18>
   223cc:	d9402e17 	ldw	r5,184(sp)
   223d0:	d8c02f17 	ldw	r3,188(sp)
   223d4:	28800017 	ldw	r2,0(r5)
   223d8:	29400104 	addi	r5,r5,4
   223dc:	d9402e15 	stw	r5,184(sp)
   223e0:	10c0000d 	sth	r3,0(r2)
   223e4:	0039e406 	br	20b78 <_gp+0xfffe5a14>
   223e8:	9080100c 	andi	r2,r18,64
   223ec:	10008026 	beq	r2,zero,225f0 <___vfprintf_internal_r+0x1b58>
   223f0:	d8802e17 	ldw	r2,184(sp)
   223f4:	14c0000f 	ldh	r19,0(r2)
   223f8:	10800104 	addi	r2,r2,4
   223fc:	d8802e15 	stw	r2,184(sp)
   22400:	982dd7fa 	srai	r22,r19,31
   22404:	b005883a 	mov	r2,r22
   22408:	003af706 	br	20fe8 <_gp+0xfffe5e84>
   2240c:	9080100c 	andi	r2,r18,64
   22410:	d8002785 	stb	zero,158(sp)
   22414:	10008a1e 	bne	r2,zero,22640 <___vfprintf_internal_r+0x1ba8>
   22418:	d9002e17 	ldw	r4,184(sp)
   2241c:	d9402a17 	ldw	r5,168(sp)
   22420:	002d883a 	mov	r22,zero
   22424:	20800104 	addi	r2,r4,4
   22428:	24c00017 	ldw	r19,0(r4)
   2242c:	283e4b0e 	bge	r5,zero,21d5c <_gp+0xfffe6bf8>
   22430:	9d86b03a 	or	r3,r19,r22
   22434:	d8802e15 	stw	r2,184(sp)
   22438:	183e4c1e 	bne	r3,zero,21d6c <_gp+0xfffe6c08>
   2243c:	0039883a 	mov	fp,zero
   22440:	0005883a 	mov	r2,zero
   22444:	003d4006 	br	21948 <_gp+0xfffe67e4>
   22448:	014000f4 	movhi	r5,3
   2244c:	29441684 	addi	r5,r5,4186
   22450:	d9402c15 	stw	r5,176(sp)
   22454:	d9402c17 	ldw	r5,176(sp)
   22458:	1c47883a 	add	r3,r3,r17
   2245c:	10800044 	addi	r2,r2,1
   22460:	41400015 	stw	r5,0(r8)
   22464:	44400115 	stw	r17,4(r8)
   22468:	d8c02015 	stw	r3,128(sp)
   2246c:	d8801f15 	stw	r2,124(sp)
   22470:	010001c4 	movi	r4,7
   22474:	20bec816 	blt	r4,r2,21f98 <_gp+0xfffe6e34>
   22478:	42000204 	addi	r8,r8,8
   2247c:	003ecd06 	br	21fb4 <_gp+0xfffe6e50>
   22480:	d9002a17 	ldw	r4,168(sp)
   22484:	d8002785 	stb	zero,158(sp)
   22488:	203d2d16 	blt	r4,zero,21940 <_gp+0xfffe67dc>
   2248c:	00bfdfc4 	movi	r2,-129
   22490:	90a4703a 	and	r18,r18,r2
   22494:	003a6106 	br	20e1c <_gp+0xfffe5cb8>
   22498:	010000f4 	movhi	r4,3
   2249c:	21041684 	addi	r4,r4,4186
   224a0:	d9002c15 	stw	r4,176(sp)
   224a4:	003bea06 	br	21450 <_gp+0xfffe62ec>
   224a8:	d9002d17 	ldw	r4,180(sp)
   224ac:	d9801e04 	addi	r6,sp,120
   224b0:	b80b883a 	mov	r5,r23
   224b4:	00282780 	call	28278 <__sprint_r>
   224b8:	103a7b1e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   224bc:	d8c02017 	ldw	r3,128(sp)
   224c0:	da000404 	addi	r8,sp,16
   224c4:	003d4106 	br	219cc <_gp+0xfffe6868>
   224c8:	d8801f17 	ldw	r2,124(sp)
   224cc:	014000f4 	movhi	r5,3
   224d0:	01000044 	movi	r4,1
   224d4:	18c00044 	addi	r3,r3,1
   224d8:	10800044 	addi	r2,r2,1
   224dc:	29441604 	addi	r5,r5,4184
   224e0:	41000115 	stw	r4,4(r8)
   224e4:	41400015 	stw	r5,0(r8)
   224e8:	d8c02015 	stw	r3,128(sp)
   224ec:	d8801f15 	stw	r2,124(sp)
   224f0:	010001c4 	movi	r4,7
   224f4:	20805c16 	blt	r4,r2,22668 <___vfprintf_internal_r+0x1bd0>
   224f8:	42000204 	addi	r8,r8,8
   224fc:	8800041e 	bne	r17,zero,22510 <___vfprintf_internal_r+0x1a78>
   22500:	d8803317 	ldw	r2,204(sp)
   22504:	1000021e 	bne	r2,zero,22510 <___vfprintf_internal_r+0x1a78>
   22508:	9080004c 	andi	r2,r18,1
   2250c:	103be726 	beq	r2,zero,214ac <_gp+0xfffe6348>
   22510:	d9003717 	ldw	r4,220(sp)
   22514:	d8801f17 	ldw	r2,124(sp)
   22518:	d9403417 	ldw	r5,208(sp)
   2251c:	20c7883a 	add	r3,r4,r3
   22520:	10800044 	addi	r2,r2,1
   22524:	41000115 	stw	r4,4(r8)
   22528:	41400015 	stw	r5,0(r8)
   2252c:	d8c02015 	stw	r3,128(sp)
   22530:	d8801f15 	stw	r2,124(sp)
   22534:	010001c4 	movi	r4,7
   22538:	20812116 	blt	r4,r2,229c0 <___vfprintf_internal_r+0x1f28>
   2253c:	42000204 	addi	r8,r8,8
   22540:	0463c83a 	sub	r17,zero,r17
   22544:	0440730e 	bge	zero,r17,22714 <___vfprintf_internal_r+0x1c7c>
   22548:	05800404 	movi	r22,16
   2254c:	b440860e 	bge	r22,r17,22768 <___vfprintf_internal_r+0x1cd0>
   22550:	014000f4 	movhi	r5,3
   22554:	29441684 	addi	r5,r5,4186
   22558:	d9402c15 	stw	r5,176(sp)
   2255c:	070001c4 	movi	fp,7
   22560:	dcc02d17 	ldw	r19,180(sp)
   22564:	00000306 	br	22574 <___vfprintf_internal_r+0x1adc>
   22568:	42000204 	addi	r8,r8,8
   2256c:	8c7ffc04 	addi	r17,r17,-16
   22570:	b440800e 	bge	r22,r17,22774 <___vfprintf_internal_r+0x1cdc>
   22574:	18c00404 	addi	r3,r3,16
   22578:	10800044 	addi	r2,r2,1
   2257c:	45000015 	stw	r20,0(r8)
   22580:	45800115 	stw	r22,4(r8)
   22584:	d8c02015 	stw	r3,128(sp)
   22588:	d8801f15 	stw	r2,124(sp)
   2258c:	e0bff60e 	bge	fp,r2,22568 <_gp+0xfffe7404>
   22590:	d9801e04 	addi	r6,sp,120
   22594:	b80b883a 	mov	r5,r23
   22598:	9809883a 	mov	r4,r19
   2259c:	00282780 	call	28278 <__sprint_r>
   225a0:	103a411e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   225a4:	d8c02017 	ldw	r3,128(sp)
   225a8:	d8801f17 	ldw	r2,124(sp)
   225ac:	da000404 	addi	r8,sp,16
   225b0:	003fee06 	br	2256c <_gp+0xfffe7408>
   225b4:	00bfffc4 	movi	r2,-1
   225b8:	003a3f06 	br	20eb8 <_gp+0xfffe5d54>
   225bc:	008011c4 	movi	r2,71
   225c0:	1440b816 	blt	r2,r17,228a4 <___vfprintf_internal_r+0x1e0c>
   225c4:	040000f4 	movhi	r16,3
   225c8:	84040804 	addi	r16,r16,4128
   225cc:	00c000c4 	movi	r3,3
   225d0:	00bfdfc4 	movi	r2,-129
   225d4:	d8c02915 	stw	r3,164(sp)
   225d8:	90a4703a 	and	r18,r18,r2
   225dc:	df002783 	ldbu	fp,158(sp)
   225e0:	d8c02b15 	stw	r3,172(sp)
   225e4:	d8002a15 	stw	zero,168(sp)
   225e8:	d8003215 	stw	zero,200(sp)
   225ec:	003b0706 	br	2120c <_gp+0xfffe60a8>
   225f0:	d8c02e17 	ldw	r3,184(sp)
   225f4:	1cc00017 	ldw	r19,0(r3)
   225f8:	18c00104 	addi	r3,r3,4
   225fc:	d8c02e15 	stw	r3,184(sp)
   22600:	982dd7fa 	srai	r22,r19,31
   22604:	b005883a 	mov	r2,r22
   22608:	003a7706 	br	20fe8 <_gp+0xfffe5e84>
   2260c:	d8c02e17 	ldw	r3,184(sp)
   22610:	d9002f17 	ldw	r4,188(sp)
   22614:	18800017 	ldw	r2,0(r3)
   22618:	18c00104 	addi	r3,r3,4
   2261c:	d8c02e15 	stw	r3,184(sp)
   22620:	11000015 	stw	r4,0(r2)
   22624:	00395406 	br	20b78 <_gp+0xfffe5a14>
   22628:	d9002e17 	ldw	r4,184(sp)
   2262c:	002d883a 	mov	r22,zero
   22630:	24c00017 	ldw	r19,0(r4)
   22634:	21000104 	addi	r4,r4,4
   22638:	d9002e15 	stw	r4,184(sp)
   2263c:	003c0706 	br	2165c <_gp+0xfffe64f8>
   22640:	d9402e17 	ldw	r5,184(sp)
   22644:	d8c02a17 	ldw	r3,168(sp)
   22648:	002d883a 	mov	r22,zero
   2264c:	28800104 	addi	r2,r5,4
   22650:	2cc0000b 	ldhu	r19,0(r5)
   22654:	183dc10e 	bge	r3,zero,21d5c <_gp+0xfffe6bf8>
   22658:	003f7506 	br	22430 <_gp+0xfffe72cc>
   2265c:	040000f4 	movhi	r16,3
   22660:	84040604 	addi	r16,r16,4120
   22664:	003aa706 	br	21104 <_gp+0xfffe5fa0>
   22668:	d9002d17 	ldw	r4,180(sp)
   2266c:	d9801e04 	addi	r6,sp,120
   22670:	b80b883a 	mov	r5,r23
   22674:	00282780 	call	28278 <__sprint_r>
   22678:	103a0b1e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   2267c:	dc402617 	ldw	r17,152(sp)
   22680:	d8c02017 	ldw	r3,128(sp)
   22684:	da000404 	addi	r8,sp,16
   22688:	003f9c06 	br	224fc <_gp+0xfffe7398>
   2268c:	ac400043 	ldbu	r17,1(r21)
   22690:	84000814 	ori	r16,r16,32
   22694:	ad400044 	addi	r21,r21,1
   22698:	8c403fcc 	andi	r17,r17,255
   2269c:	8c40201c 	xori	r17,r17,128
   226a0:	8c7fe004 	addi	r17,r17,-128
   226a4:	00395e06 	br	20c20 <_gp+0xfffe5abc>
   226a8:	d8c02e15 	stw	r3,184(sp)
   226ac:	0039883a 	mov	fp,zero
   226b0:	003e3506 	br	21f88 <_gp+0xfffe6e24>
   226b4:	d9002d17 	ldw	r4,180(sp)
   226b8:	d9801e04 	addi	r6,sp,120
   226bc:	b80b883a 	mov	r5,r23
   226c0:	00282780 	call	28278 <__sprint_r>
   226c4:	1039f81e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   226c8:	d8c02017 	ldw	r3,128(sp)
   226cc:	da000404 	addi	r8,sp,16
   226d0:	003cd006 	br	21a14 <_gp+0xfffe68b0>
   226d4:	8009883a 	mov	r4,r16
   226d8:	df003d15 	stw	fp,244(sp)
   226dc:	0020a000 	call	20a00 <strlen>
   226e0:	d8802b15 	stw	r2,172(sp)
   226e4:	da003d17 	ldw	r8,244(sp)
   226e8:	103c200e 	bge	r2,zero,2176c <_gp+0xfffe6608>
   226ec:	0005883a 	mov	r2,zero
   226f0:	003c1e06 	br	2176c <_gp+0xfffe6608>
   226f4:	d9002d17 	ldw	r4,180(sp)
   226f8:	d9801e04 	addi	r6,sp,120
   226fc:	b80b883a 	mov	r5,r23
   22700:	00282780 	call	28278 <__sprint_r>
   22704:	1039e81e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   22708:	d8c02017 	ldw	r3,128(sp)
   2270c:	d8801f17 	ldw	r2,124(sp)
   22710:	da000404 	addi	r8,sp,16
   22714:	d9403317 	ldw	r5,204(sp)
   22718:	10800044 	addi	r2,r2,1
   2271c:	44000015 	stw	r16,0(r8)
   22720:	28c7883a 	add	r3,r5,r3
   22724:	003b5b06 	br	21494 <_gp+0xfffe6330>
   22728:	010000f4 	movhi	r4,3
   2272c:	21041a84 	addi	r4,r4,4202
   22730:	d9003515 	stw	r4,212(sp)
   22734:	003af206 	br	21300 <_gp+0xfffe619c>
   22738:	013fffc4 	movi	r4,-1
   2273c:	003a0806 	br	20f60 <_gp+0xfffe5dfc>
   22740:	0023883a 	mov	r17,zero
   22744:	003d9d06 	br	21dbc <_gp+0xfffe6c58>
   22748:	d9002d17 	ldw	r4,180(sp)
   2274c:	d9801e04 	addi	r6,sp,120
   22750:	b80b883a 	mov	r5,r23
   22754:	00282780 	call	28278 <__sprint_r>
   22758:	1039d31e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   2275c:	d8c02017 	ldw	r3,128(sp)
   22760:	da000404 	addi	r8,sp,16
   22764:	003d9406 	br	21db8 <_gp+0xfffe6c54>
   22768:	010000f4 	movhi	r4,3
   2276c:	21041684 	addi	r4,r4,4186
   22770:	d9002c15 	stw	r4,176(sp)
   22774:	d9002c17 	ldw	r4,176(sp)
   22778:	1c47883a 	add	r3,r3,r17
   2277c:	10800044 	addi	r2,r2,1
   22780:	41000015 	stw	r4,0(r8)
   22784:	44400115 	stw	r17,4(r8)
   22788:	d8c02015 	stw	r3,128(sp)
   2278c:	d8801f15 	stw	r2,124(sp)
   22790:	010001c4 	movi	r4,7
   22794:	20bfd716 	blt	r4,r2,226f4 <_gp+0xfffe7590>
   22798:	42000204 	addi	r8,r8,8
   2279c:	003fdd06 	br	22714 <_gp+0xfffe75b0>
   227a0:	d9002d17 	ldw	r4,180(sp)
   227a4:	d9801e04 	addi	r6,sp,120
   227a8:	b80b883a 	mov	r5,r23
   227ac:	00282780 	call	28278 <__sprint_r>
   227b0:	1039bd1e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   227b4:	d8802617 	ldw	r2,152(sp)
   227b8:	d8c02017 	ldw	r3,128(sp)
   227bc:	da000404 	addi	r8,sp,16
   227c0:	003e1006 	br	22004 <_gp+0xfffe6ea0>
   227c4:	00800044 	movi	r2,1
   227c8:	10803fcc 	andi	r2,r2,255
   227cc:	00c00044 	movi	r3,1
   227d0:	10fa0d26 	beq	r2,r3,21008 <_gp+0xfffe5ea4>
   227d4:	00c00084 	movi	r3,2
   227d8:	10fbaf26 	beq	r2,r3,21698 <_gp+0xfffe6534>
   227dc:	003a6d06 	br	21194 <_gp+0xfffe6030>
   227e0:	010000f4 	movhi	r4,3
   227e4:	21041a84 	addi	r4,r4,4202
   227e8:	d9003515 	stw	r4,212(sp)
   227ec:	003b5406 	br	21540 <_gp+0xfffe63dc>
   227f0:	d8802a17 	ldw	r2,168(sp)
   227f4:	00c00184 	movi	r3,6
   227f8:	1880012e 	bgeu	r3,r2,22800 <___vfprintf_internal_r+0x1d68>
   227fc:	1805883a 	mov	r2,r3
   22800:	d8802b15 	stw	r2,172(sp)
   22804:	1000ef16 	blt	r2,zero,22bc4 <___vfprintf_internal_r+0x212c>
   22808:	040000f4 	movhi	r16,3
   2280c:	d8802915 	stw	r2,164(sp)
   22810:	dcc02e15 	stw	r19,184(sp)
   22814:	d8002a15 	stw	zero,168(sp)
   22818:	d8003215 	stw	zero,200(sp)
   2281c:	84041404 	addi	r16,r16,4176
   22820:	0039883a 	mov	fp,zero
   22824:	003a8006 	br	21228 <_gp+0xfffe60c4>
   22828:	0021883a 	mov	r16,zero
   2282c:	003e0706 	br	2204c <_gp+0xfffe6ee8>
   22830:	d9002d17 	ldw	r4,180(sp)
   22834:	d9801e04 	addi	r6,sp,120
   22838:	b80b883a 	mov	r5,r23
   2283c:	00282780 	call	28278 <__sprint_r>
   22840:	1039991e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   22844:	d8802617 	ldw	r2,152(sp)
   22848:	d9403317 	ldw	r5,204(sp)
   2284c:	d8c02017 	ldw	r3,128(sp)
   22850:	da000404 	addi	r8,sp,16
   22854:	2885c83a 	sub	r2,r5,r2
   22858:	003dfb06 	br	22048 <_gp+0xfffe6ee4>
   2285c:	9080004c 	andi	r2,r18,1
   22860:	103e8f1e 	bne	r2,zero,222a0 <_gp+0xfffe713c>
   22864:	d8802117 	ldw	r2,132(sp)
   22868:	003e9e06 	br	222e4 <_gp+0xfffe7180>
   2286c:	1025883a 	mov	r18,r2
   22870:	0039883a 	mov	fp,zero
   22874:	00800084 	movi	r2,2
   22878:	003fd306 	br	227c8 <_gp+0xfffe7664>
   2287c:	07000b44 	movi	fp,45
   22880:	df002785 	stb	fp,158(sp)
   22884:	003a1b06 	br	210f4 <_gp+0xfffe5f90>
   22888:	00c00b44 	movi	r3,45
   2288c:	d8c02785 	stb	r3,158(sp)
   22890:	d8802915 	stw	r2,164(sp)
   22894:	dc802c17 	ldw	r18,176(sp)
   22898:	d8002a15 	stw	zero,168(sp)
   2289c:	07000b44 	movi	fp,45
   228a0:	003a5e06 	br	2121c <_gp+0xfffe60b8>
   228a4:	040000f4 	movhi	r16,3
   228a8:	84040904 	addi	r16,r16,4132
   228ac:	003f4706 	br	225cc <_gp+0xfffe7468>
   228b0:	d9002e17 	ldw	r4,184(sp)
   228b4:	d9402f17 	ldw	r5,188(sp)
   228b8:	20800017 	ldw	r2,0(r4)
   228bc:	21000104 	addi	r4,r4,4
   228c0:	d9002e15 	stw	r4,184(sp)
   228c4:	11400015 	stw	r5,0(r2)
   228c8:	0038ab06 	br	20b78 <_gp+0xfffe5a14>
   228cc:	dd802617 	ldw	r22,152(sp)
   228d0:	00bfff44 	movi	r2,-3
   228d4:	b0801c16 	blt	r22,r2,22948 <___vfprintf_internal_r+0x1eb0>
   228d8:	d9402a17 	ldw	r5,168(sp)
   228dc:	2d801a16 	blt	r5,r22,22948 <___vfprintf_internal_r+0x1eb0>
   228e0:	dd803215 	stw	r22,200(sp)
   228e4:	003e8906 	br	2230c <_gp+0xfffe71a8>
   228e8:	010000f4 	movhi	r4,3
   228ec:	21041684 	addi	r4,r4,4186
   228f0:	d9002c15 	stw	r4,176(sp)
   228f4:	003c9106 	br	21b3c <_gp+0xfffe69d8>
   228f8:	e005883a 	mov	r2,fp
   228fc:	003e7906 	br	222e4 <_gp+0xfffe7180>
   22900:	d9002a17 	ldw	r4,168(sp)
   22904:	df002783 	ldbu	fp,158(sp)
   22908:	dcc02e15 	stw	r19,184(sp)
   2290c:	d9002915 	stw	r4,164(sp)
   22910:	d9002b15 	stw	r4,172(sp)
   22914:	d8002a15 	stw	zero,168(sp)
   22918:	d8003215 	stw	zero,200(sp)
   2291c:	003a3b06 	br	2120c <_gp+0xfffe60a8>
   22920:	9080004c 	andi	r2,r18,1
   22924:	0039883a 	mov	fp,zero
   22928:	10000426 	beq	r2,zero,2293c <___vfprintf_internal_r+0x1ea4>
   2292c:	00800c04 	movi	r2,48
   22930:	dc001dc4 	addi	r16,sp,119
   22934:	d8801dc5 	stb	r2,119(sp)
   22938:	003b6406 	br	216cc <_gp+0xfffe6568>
   2293c:	d8002b15 	stw	zero,172(sp)
   22940:	dc001e04 	addi	r16,sp,120
   22944:	003a2b06 	br	211f4 <_gp+0xfffe6090>
   22948:	8c7fff84 	addi	r17,r17,-2
   2294c:	b5bfffc4 	addi	r22,r22,-1
   22950:	dd802615 	stw	r22,152(sp)
   22954:	dc4022c5 	stb	r17,139(sp)
   22958:	b000bf16 	blt	r22,zero,22c58 <___vfprintf_internal_r+0x21c0>
   2295c:	00800ac4 	movi	r2,43
   22960:	d8802305 	stb	r2,140(sp)
   22964:	00800244 	movi	r2,9
   22968:	15807016 	blt	r2,r22,22b2c <___vfprintf_internal_r+0x2094>
   2296c:	00800c04 	movi	r2,48
   22970:	b5800c04 	addi	r22,r22,48
   22974:	d8802345 	stb	r2,141(sp)
   22978:	dd802385 	stb	r22,142(sp)
   2297c:	d88023c4 	addi	r2,sp,143
   22980:	df0022c4 	addi	fp,sp,139
   22984:	d8c03317 	ldw	r3,204(sp)
   22988:	1739c83a 	sub	fp,r2,fp
   2298c:	d9003317 	ldw	r4,204(sp)
   22990:	e0c7883a 	add	r3,fp,r3
   22994:	df003a15 	stw	fp,232(sp)
   22998:	d8c02b15 	stw	r3,172(sp)
   2299c:	00800044 	movi	r2,1
   229a0:	1100b30e 	bge	r2,r4,22c70 <___vfprintf_internal_r+0x21d8>
   229a4:	d8c02b17 	ldw	r3,172(sp)
   229a8:	18c00044 	addi	r3,r3,1
   229ac:	d8c02b15 	stw	r3,172(sp)
   229b0:	1805883a 	mov	r2,r3
   229b4:	1800ac16 	blt	r3,zero,22c68 <___vfprintf_internal_r+0x21d0>
   229b8:	d8003215 	stw	zero,200(sp)
   229bc:	003e5d06 	br	22334 <_gp+0xfffe71d0>
   229c0:	d9002d17 	ldw	r4,180(sp)
   229c4:	d9801e04 	addi	r6,sp,120
   229c8:	b80b883a 	mov	r5,r23
   229cc:	00282780 	call	28278 <__sprint_r>
   229d0:	1039351e 	bne	r2,zero,20ea8 <_gp+0xfffe5d44>
   229d4:	dc402617 	ldw	r17,152(sp)
   229d8:	d8c02017 	ldw	r3,128(sp)
   229dc:	d8801f17 	ldw	r2,124(sp)
   229e0:	da000404 	addi	r8,sp,16
   229e4:	003ed606 	br	22540 <_gp+0xfffe73dc>
   229e8:	182b883a 	mov	r21,r3
   229ec:	d8002a15 	stw	zero,168(sp)
   229f0:	00388c06 	br	20c24 <_gp+0xfffe5ac0>
   229f4:	d8802a17 	ldw	r2,168(sp)
   229f8:	103e071e 	bne	r2,zero,22218 <_gp+0xfffe70b4>
   229fc:	dc002a15 	stw	r16,168(sp)
   22a00:	003e0506 	br	22218 <_gp+0xfffe70b4>
   22a04:	d9002a17 	ldw	r4,168(sp)
   22a08:	20c00044 	addi	r3,r4,1
   22a0c:	003e0f06 	br	2224c <_gp+0xfffe70e8>
   22a10:	01400184 	movi	r5,6
   22a14:	d9402a15 	stw	r5,168(sp)
   22a18:	003dff06 	br	22218 <_gp+0xfffe70b4>
   22a1c:	d8802104 	addi	r2,sp,132
   22a20:	d8800315 	stw	r2,12(sp)
   22a24:	d8802504 	addi	r2,sp,148
   22a28:	d8800215 	stw	r2,8(sp)
   22a2c:	d8802604 	addi	r2,sp,152
   22a30:	d8800115 	stw	r2,4(sp)
   22a34:	d8802a17 	ldw	r2,168(sp)
   22a38:	d9403617 	ldw	r5,216(sp)
   22a3c:	d9002d17 	ldw	r4,180(sp)
   22a40:	d8800015 	stw	r2,0(sp)
   22a44:	01c000c4 	movi	r7,3
   22a48:	980d883a 	mov	r6,r19
   22a4c:	da003d15 	stw	r8,244(sp)
   22a50:	00231c80 	call	231c8 <_dtoa_r>
   22a54:	d8c02a17 	ldw	r3,168(sp)
   22a58:	da003d17 	ldw	r8,244(sp)
   22a5c:	1021883a 	mov	r16,r2
   22a60:	10f9883a 	add	fp,r2,r3
   22a64:	81000007 	ldb	r4,0(r16)
   22a68:	00800c04 	movi	r2,48
   22a6c:	20805e26 	beq	r4,r2,22be8 <___vfprintf_internal_r+0x2150>
   22a70:	d8c02617 	ldw	r3,152(sp)
   22a74:	e0f9883a 	add	fp,fp,r3
   22a78:	003e0a06 	br	222a4 <_gp+0xfffe7140>
   22a7c:	00c00b44 	movi	r3,45
   22a80:	24e0003c 	xorhi	r19,r4,32768
   22a84:	d8c02905 	stb	r3,164(sp)
   22a88:	003de906 	br	22230 <_gp+0xfffe70cc>
   22a8c:	d8c03217 	ldw	r3,200(sp)
   22a90:	00c07a0e 	bge	zero,r3,22c7c <___vfprintf_internal_r+0x21e4>
   22a94:	00800044 	movi	r2,1
   22a98:	d9003317 	ldw	r4,204(sp)
   22a9c:	1105883a 	add	r2,r2,r4
   22aa0:	d8802b15 	stw	r2,172(sp)
   22aa4:	10004e16 	blt	r2,zero,22be0 <___vfprintf_internal_r+0x2148>
   22aa8:	044019c4 	movi	r17,103
   22aac:	003e2106 	br	22334 <_gp+0xfffe71d0>
   22ab0:	d9002a17 	ldw	r4,168(sp)
   22ab4:	d8802104 	addi	r2,sp,132
   22ab8:	d8800315 	stw	r2,12(sp)
   22abc:	d9000015 	stw	r4,0(sp)
   22ac0:	d8802504 	addi	r2,sp,148
   22ac4:	d9403617 	ldw	r5,216(sp)
   22ac8:	d9002d17 	ldw	r4,180(sp)
   22acc:	d8800215 	stw	r2,8(sp)
   22ad0:	d8802604 	addi	r2,sp,152
   22ad4:	d8800115 	stw	r2,4(sp)
   22ad8:	01c000c4 	movi	r7,3
   22adc:	980d883a 	mov	r6,r19
   22ae0:	da003d15 	stw	r8,244(sp)
   22ae4:	00231c80 	call	231c8 <_dtoa_r>
   22ae8:	d8c02a17 	ldw	r3,168(sp)
   22aec:	da003d17 	ldw	r8,244(sp)
   22af0:	1021883a 	mov	r16,r2
   22af4:	00801184 	movi	r2,70
   22af8:	80f9883a 	add	fp,r16,r3
   22afc:	88bfd926 	beq	r17,r2,22a64 <_gp+0xfffe7900>
   22b00:	003de806 	br	222a4 <_gp+0xfffe7140>
   22b04:	d9002a17 	ldw	r4,168(sp)
   22b08:	00c04d0e 	bge	zero,r3,22c40 <___vfprintf_internal_r+0x21a8>
   22b0c:	2000441e 	bne	r4,zero,22c20 <___vfprintf_internal_r+0x2188>
   22b10:	9480004c 	andi	r18,r18,1
   22b14:	9000421e 	bne	r18,zero,22c20 <___vfprintf_internal_r+0x2188>
   22b18:	1805883a 	mov	r2,r3
   22b1c:	18006f16 	blt	r3,zero,22cdc <___vfprintf_internal_r+0x2244>
   22b20:	d8c03217 	ldw	r3,200(sp)
   22b24:	d8c02b15 	stw	r3,172(sp)
   22b28:	003e0206 	br	22334 <_gp+0xfffe71d0>
   22b2c:	df0022c4 	addi	fp,sp,139
   22b30:	dc002a15 	stw	r16,168(sp)
   22b34:	4027883a 	mov	r19,r8
   22b38:	e021883a 	mov	r16,fp
   22b3c:	b009883a 	mov	r4,r22
   22b40:	01400284 	movi	r5,10
   22b44:	002ae040 	call	2ae04 <__modsi3>
   22b48:	10800c04 	addi	r2,r2,48
   22b4c:	843fffc4 	addi	r16,r16,-1
   22b50:	b009883a 	mov	r4,r22
   22b54:	01400284 	movi	r5,10
   22b58:	80800005 	stb	r2,0(r16)
   22b5c:	002ad800 	call	2ad80 <__divsi3>
   22b60:	102d883a 	mov	r22,r2
   22b64:	00800244 	movi	r2,9
   22b68:	15bff416 	blt	r2,r22,22b3c <_gp+0xfffe79d8>
   22b6c:	9811883a 	mov	r8,r19
   22b70:	b0800c04 	addi	r2,r22,48
   22b74:	8027883a 	mov	r19,r16
   22b78:	997fffc4 	addi	r5,r19,-1
   22b7c:	98bfffc5 	stb	r2,-1(r19)
   22b80:	dc002a17 	ldw	r16,168(sp)
   22b84:	2f006d2e 	bgeu	r5,fp,22d3c <___vfprintf_internal_r+0x22a4>
   22b88:	d9c02384 	addi	r7,sp,142
   22b8c:	3ccfc83a 	sub	r7,r7,r19
   22b90:	d9002344 	addi	r4,sp,141
   22b94:	e1cf883a 	add	r7,fp,r7
   22b98:	00000106 	br	22ba0 <___vfprintf_internal_r+0x2108>
   22b9c:	28800003 	ldbu	r2,0(r5)
   22ba0:	20800005 	stb	r2,0(r4)
   22ba4:	21000044 	addi	r4,r4,1
   22ba8:	29400044 	addi	r5,r5,1
   22bac:	393ffb1e 	bne	r7,r4,22b9c <_gp+0xfffe7a38>
   22bb0:	d8802304 	addi	r2,sp,140
   22bb4:	14c5c83a 	sub	r2,r2,r19
   22bb8:	d8c02344 	addi	r3,sp,141
   22bbc:	1885883a 	add	r2,r3,r2
   22bc0:	003f7006 	br	22984 <_gp+0xfffe7820>
   22bc4:	0005883a 	mov	r2,zero
   22bc8:	003f0f06 	br	22808 <_gp+0xfffe76a4>
   22bcc:	d8c03217 	ldw	r3,200(sp)
   22bd0:	18c00044 	addi	r3,r3,1
   22bd4:	d8c02b15 	stw	r3,172(sp)
   22bd8:	1805883a 	mov	r2,r3
   22bdc:	183fb20e 	bge	r3,zero,22aa8 <_gp+0xfffe7944>
   22be0:	0005883a 	mov	r2,zero
   22be4:	003fb006 	br	22aa8 <_gp+0xfffe7944>
   22be8:	d9003617 	ldw	r4,216(sp)
   22bec:	000d883a 	mov	r6,zero
   22bf0:	000f883a 	mov	r7,zero
   22bf4:	980b883a 	mov	r5,r19
   22bf8:	d8c03c15 	stw	r3,240(sp)
   22bfc:	da003d15 	stw	r8,244(sp)
   22c00:	002c1b00 	call	2c1b0 <__eqdf2>
   22c04:	d8c03c17 	ldw	r3,240(sp)
   22c08:	da003d17 	ldw	r8,244(sp)
   22c0c:	103f9826 	beq	r2,zero,22a70 <_gp+0xfffe790c>
   22c10:	00800044 	movi	r2,1
   22c14:	10c7c83a 	sub	r3,r2,r3
   22c18:	d8c02615 	stw	r3,152(sp)
   22c1c:	003f9506 	br	22a74 <_gp+0xfffe7910>
   22c20:	d9002a17 	ldw	r4,168(sp)
   22c24:	d8c03217 	ldw	r3,200(sp)
   22c28:	20800044 	addi	r2,r4,1
   22c2c:	1885883a 	add	r2,r3,r2
   22c30:	d8802b15 	stw	r2,172(sp)
   22c34:	103dbf0e 	bge	r2,zero,22334 <_gp+0xfffe71d0>
   22c38:	0005883a 	mov	r2,zero
   22c3c:	003dbd06 	br	22334 <_gp+0xfffe71d0>
   22c40:	2000201e 	bne	r4,zero,22cc4 <___vfprintf_internal_r+0x222c>
   22c44:	9480004c 	andi	r18,r18,1
   22c48:	90001e1e 	bne	r18,zero,22cc4 <___vfprintf_internal_r+0x222c>
   22c4c:	00800044 	movi	r2,1
   22c50:	d8802b15 	stw	r2,172(sp)
   22c54:	003db706 	br	22334 <_gp+0xfffe71d0>
   22c58:	00800b44 	movi	r2,45
   22c5c:	05adc83a 	sub	r22,zero,r22
   22c60:	d8802305 	stb	r2,140(sp)
   22c64:	003f3f06 	br	22964 <_gp+0xfffe7800>
   22c68:	0005883a 	mov	r2,zero
   22c6c:	003f5206 	br	229b8 <_gp+0xfffe7854>
   22c70:	90a4703a 	and	r18,r18,r2
   22c74:	903f4e26 	beq	r18,zero,229b0 <_gp+0xfffe784c>
   22c78:	003f4a06 	br	229a4 <_gp+0xfffe7840>
   22c7c:	00800084 	movi	r2,2
   22c80:	10c5c83a 	sub	r2,r2,r3
   22c84:	003f8406 	br	22a98 <_gp+0xfffe7934>
   22c88:	d9402e17 	ldw	r5,184(sp)
   22c8c:	d9002e17 	ldw	r4,184(sp)
   22c90:	ac400043 	ldbu	r17,1(r21)
   22c94:	29400017 	ldw	r5,0(r5)
   22c98:	20800104 	addi	r2,r4,4
   22c9c:	d8802e15 	stw	r2,184(sp)
   22ca0:	d9402a15 	stw	r5,168(sp)
   22ca4:	182b883a 	mov	r21,r3
   22ca8:	283e7b0e 	bge	r5,zero,22698 <_gp+0xfffe7534>
   22cac:	8c403fcc 	andi	r17,r17,255
   22cb0:	017fffc4 	movi	r5,-1
   22cb4:	8c40201c 	xori	r17,r17,128
   22cb8:	d9402a15 	stw	r5,168(sp)
   22cbc:	8c7fe004 	addi	r17,r17,-128
   22cc0:	0037d706 	br	20c20 <_gp+0xfffe5abc>
   22cc4:	d8c02a17 	ldw	r3,168(sp)
   22cc8:	18c00084 	addi	r3,r3,2
   22ccc:	d8c02b15 	stw	r3,172(sp)
   22cd0:	1805883a 	mov	r2,r3
   22cd4:	183d970e 	bge	r3,zero,22334 <_gp+0xfffe71d0>
   22cd8:	003fd706 	br	22c38 <_gp+0xfffe7ad4>
   22cdc:	0005883a 	mov	r2,zero
   22ce0:	003f8f06 	br	22b20 <_gp+0xfffe79bc>
   22ce4:	9080004c 	andi	r2,r18,1
   22ce8:	103f821e 	bne	r2,zero,22af4 <_gp+0xfffe7990>
   22cec:	d8802117 	ldw	r2,132(sp)
   22cf0:	1405c83a 	sub	r2,r2,r16
   22cf4:	d8803315 	stw	r2,204(sp)
   22cf8:	b47ef426 	beq	r22,r17,228cc <_gp+0xfffe7768>
   22cfc:	dd802617 	ldw	r22,152(sp)
   22d00:	003f1206 	br	2294c <_gp+0xfffe77e8>
   22d04:	d8c02b03 	ldbu	r3,172(sp)
   22d08:	d8c02785 	stb	r3,158(sp)
   22d0c:	0038df06 	br	2108c <_gp+0xfffe5f28>
   22d10:	d8c02b03 	ldbu	r3,172(sp)
   22d14:	d8c02785 	stb	r3,158(sp)
   22d18:	0038aa06 	br	20fc4 <_gp+0xfffe5e60>
   22d1c:	d8c02b03 	ldbu	r3,172(sp)
   22d20:	d8c02785 	stb	r3,158(sp)
   22d24:	003a4306 	br	21634 <_gp+0xfffe64d0>
   22d28:	d8c02b03 	ldbu	r3,172(sp)
   22d2c:	d8c02785 	stb	r3,158(sp)
   22d30:	003af506 	br	21908 <_gp+0xfffe67a4>
   22d34:	0005883a 	mov	r2,zero
   22d38:	003d7b06 	br	22328 <_gp+0xfffe71c4>
   22d3c:	d8802344 	addi	r2,sp,141
   22d40:	003f1006 	br	22984 <_gp+0xfffe7820>
   22d44:	d8c02b03 	ldbu	r3,172(sp)
   22d48:	d8c02785 	stb	r3,158(sp)
   22d4c:	0038fd06 	br	21144 <_gp+0xfffe5fe0>
   22d50:	d8c02b03 	ldbu	r3,172(sp)
   22d54:	d8c02785 	stb	r3,158(sp)
   22d58:	003a9706 	br	217b8 <_gp+0xfffe6654>
   22d5c:	d8c02b03 	ldbu	r3,172(sp)
   22d60:	d8c02785 	stb	r3,158(sp)
   22d64:	003a1806 	br	215c8 <_gp+0xfffe6464>
   22d68:	d8c02b03 	ldbu	r3,172(sp)
   22d6c:	d8c02785 	stb	r3,158(sp)
   22d70:	003abe06 	br	2186c <_gp+0xfffe6708>

00022d74 <__vfprintf_internal>:
   22d74:	008000f4 	movhi	r2,3
   22d78:	108c5a04 	addi	r2,r2,12648
   22d7c:	300f883a 	mov	r7,r6
   22d80:	280d883a 	mov	r6,r5
   22d84:	200b883a 	mov	r5,r4
   22d88:	11000017 	ldw	r4,0(r2)
   22d8c:	0020a981 	jmpi	20a98 <___vfprintf_internal_r>

00022d90 <__sbprintf>:
   22d90:	2880030b 	ldhu	r2,12(r5)
   22d94:	2ac01917 	ldw	r11,100(r5)
   22d98:	2a80038b 	ldhu	r10,14(r5)
   22d9c:	2a400717 	ldw	r9,28(r5)
   22da0:	2a000917 	ldw	r8,36(r5)
   22da4:	defee204 	addi	sp,sp,-1144
   22da8:	00c10004 	movi	r3,1024
   22dac:	dc011a15 	stw	r16,1128(sp)
   22db0:	10bfff4c 	andi	r2,r2,65533
   22db4:	2821883a 	mov	r16,r5
   22db8:	d8cb883a 	add	r5,sp,r3
   22dbc:	dc811c15 	stw	r18,1136(sp)
   22dc0:	dc411b15 	stw	r17,1132(sp)
   22dc4:	dfc11d15 	stw	ra,1140(sp)
   22dc8:	2025883a 	mov	r18,r4
   22dcc:	d881030d 	sth	r2,1036(sp)
   22dd0:	dac11915 	stw	r11,1124(sp)
   22dd4:	da81038d 	sth	r10,1038(sp)
   22dd8:	da410715 	stw	r9,1052(sp)
   22ddc:	da010915 	stw	r8,1060(sp)
   22de0:	dec10015 	stw	sp,1024(sp)
   22de4:	dec10415 	stw	sp,1040(sp)
   22de8:	d8c10215 	stw	r3,1032(sp)
   22dec:	d8c10515 	stw	r3,1044(sp)
   22df0:	d8010615 	stw	zero,1048(sp)
   22df4:	0020a980 	call	20a98 <___vfprintf_internal_r>
   22df8:	1023883a 	mov	r17,r2
   22dfc:	10000416 	blt	r2,zero,22e10 <__sbprintf+0x80>
   22e00:	d9410004 	addi	r5,sp,1024
   22e04:	9009883a 	mov	r4,r18
   22e08:	0024a6c0 	call	24a6c <_fflush_r>
   22e0c:	10000d1e 	bne	r2,zero,22e44 <__sbprintf+0xb4>
   22e10:	d881030b 	ldhu	r2,1036(sp)
   22e14:	1080100c 	andi	r2,r2,64
   22e18:	10000326 	beq	r2,zero,22e28 <__sbprintf+0x98>
   22e1c:	8080030b 	ldhu	r2,12(r16)
   22e20:	10801014 	ori	r2,r2,64
   22e24:	8080030d 	sth	r2,12(r16)
   22e28:	8805883a 	mov	r2,r17
   22e2c:	dfc11d17 	ldw	ra,1140(sp)
   22e30:	dc811c17 	ldw	r18,1136(sp)
   22e34:	dc411b17 	ldw	r17,1132(sp)
   22e38:	dc011a17 	ldw	r16,1128(sp)
   22e3c:	dec11e04 	addi	sp,sp,1144
   22e40:	f800283a 	ret
   22e44:	047fffc4 	movi	r17,-1
   22e48:	003ff106 	br	22e10 <_gp+0xfffe7cac>

00022e4c <__swsetup_r>:
   22e4c:	008000f4 	movhi	r2,3
   22e50:	defffd04 	addi	sp,sp,-12
   22e54:	108c5a04 	addi	r2,r2,12648
   22e58:	dc400115 	stw	r17,4(sp)
   22e5c:	2023883a 	mov	r17,r4
   22e60:	11000017 	ldw	r4,0(r2)
   22e64:	dc000015 	stw	r16,0(sp)
   22e68:	dfc00215 	stw	ra,8(sp)
   22e6c:	2821883a 	mov	r16,r5
   22e70:	20000226 	beq	r4,zero,22e7c <__swsetup_r+0x30>
   22e74:	20800e17 	ldw	r2,56(r4)
   22e78:	10003126 	beq	r2,zero,22f40 <__swsetup_r+0xf4>
   22e7c:	8080030b 	ldhu	r2,12(r16)
   22e80:	10c0020c 	andi	r3,r2,8
   22e84:	1009883a 	mov	r4,r2
   22e88:	18000f26 	beq	r3,zero,22ec8 <__swsetup_r+0x7c>
   22e8c:	80c00417 	ldw	r3,16(r16)
   22e90:	18001526 	beq	r3,zero,22ee8 <__swsetup_r+0x9c>
   22e94:	1100004c 	andi	r4,r2,1
   22e98:	20001c1e 	bne	r4,zero,22f0c <__swsetup_r+0xc0>
   22e9c:	1080008c 	andi	r2,r2,2
   22ea0:	1000291e 	bne	r2,zero,22f48 <__swsetup_r+0xfc>
   22ea4:	80800517 	ldw	r2,20(r16)
   22ea8:	80800215 	stw	r2,8(r16)
   22eac:	18001c26 	beq	r3,zero,22f20 <__swsetup_r+0xd4>
   22eb0:	0005883a 	mov	r2,zero
   22eb4:	dfc00217 	ldw	ra,8(sp)
   22eb8:	dc400117 	ldw	r17,4(sp)
   22ebc:	dc000017 	ldw	r16,0(sp)
   22ec0:	dec00304 	addi	sp,sp,12
   22ec4:	f800283a 	ret
   22ec8:	2080040c 	andi	r2,r4,16
   22ecc:	10002e26 	beq	r2,zero,22f88 <__swsetup_r+0x13c>
   22ed0:	2080010c 	andi	r2,r4,4
   22ed4:	10001e1e 	bne	r2,zero,22f50 <__swsetup_r+0x104>
   22ed8:	80c00417 	ldw	r3,16(r16)
   22edc:	20800214 	ori	r2,r4,8
   22ee0:	8080030d 	sth	r2,12(r16)
   22ee4:	183feb1e 	bne	r3,zero,22e94 <_gp+0xfffe7d30>
   22ee8:	1100a00c 	andi	r4,r2,640
   22eec:	01408004 	movi	r5,512
   22ef0:	217fe826 	beq	r4,r5,22e94 <_gp+0xfffe7d30>
   22ef4:	800b883a 	mov	r5,r16
   22ef8:	8809883a 	mov	r4,r17
   22efc:	0025a080 	call	25a08 <__smakebuf_r>
   22f00:	8080030b 	ldhu	r2,12(r16)
   22f04:	80c00417 	ldw	r3,16(r16)
   22f08:	003fe206 	br	22e94 <_gp+0xfffe7d30>
   22f0c:	80800517 	ldw	r2,20(r16)
   22f10:	80000215 	stw	zero,8(r16)
   22f14:	0085c83a 	sub	r2,zero,r2
   22f18:	80800615 	stw	r2,24(r16)
   22f1c:	183fe41e 	bne	r3,zero,22eb0 <_gp+0xfffe7d4c>
   22f20:	80c0030b 	ldhu	r3,12(r16)
   22f24:	0005883a 	mov	r2,zero
   22f28:	1900200c 	andi	r4,r3,128
   22f2c:	203fe126 	beq	r4,zero,22eb4 <_gp+0xfffe7d50>
   22f30:	18c01014 	ori	r3,r3,64
   22f34:	80c0030d 	sth	r3,12(r16)
   22f38:	00bfffc4 	movi	r2,-1
   22f3c:	003fdd06 	br	22eb4 <_gp+0xfffe7d50>
   22f40:	0024e580 	call	24e58 <__sinit>
   22f44:	003fcd06 	br	22e7c <_gp+0xfffe7d18>
   22f48:	0005883a 	mov	r2,zero
   22f4c:	003fd606 	br	22ea8 <_gp+0xfffe7d44>
   22f50:	81400c17 	ldw	r5,48(r16)
   22f54:	28000626 	beq	r5,zero,22f70 <__swsetup_r+0x124>
   22f58:	80801004 	addi	r2,r16,64
   22f5c:	28800326 	beq	r5,r2,22f6c <__swsetup_r+0x120>
   22f60:	8809883a 	mov	r4,r17
   22f64:	0024fcc0 	call	24fcc <_free_r>
   22f68:	8100030b 	ldhu	r4,12(r16)
   22f6c:	80000c15 	stw	zero,48(r16)
   22f70:	80c00417 	ldw	r3,16(r16)
   22f74:	00bff6c4 	movi	r2,-37
   22f78:	1108703a 	and	r4,r2,r4
   22f7c:	80000115 	stw	zero,4(r16)
   22f80:	80c00015 	stw	r3,0(r16)
   22f84:	003fd506 	br	22edc <_gp+0xfffe7d78>
   22f88:	00800244 	movi	r2,9
   22f8c:	88800015 	stw	r2,0(r17)
   22f90:	20801014 	ori	r2,r4,64
   22f94:	8080030d 	sth	r2,12(r16)
   22f98:	00bfffc4 	movi	r2,-1
   22f9c:	003fc506 	br	22eb4 <_gp+0xfffe7d50>

00022fa0 <quorem>:
   22fa0:	defff204 	addi	sp,sp,-56
   22fa4:	ddc00b15 	stw	r23,44(sp)
   22fa8:	20800417 	ldw	r2,16(r4)
   22fac:	2dc00417 	ldw	r23,16(r5)
   22fb0:	dfc00d15 	stw	ra,52(sp)
   22fb4:	df000c15 	stw	fp,48(sp)
   22fb8:	dd800a15 	stw	r22,40(sp)
   22fbc:	dd400915 	stw	r21,36(sp)
   22fc0:	dd000815 	stw	r20,32(sp)
   22fc4:	dcc00715 	stw	r19,28(sp)
   22fc8:	dc800615 	stw	r18,24(sp)
   22fcc:	dc400515 	stw	r17,20(sp)
   22fd0:	dc000415 	stw	r16,16(sp)
   22fd4:	15c07a16 	blt	r2,r23,231c0 <quorem+0x220>
   22fd8:	bdffffc4 	addi	r23,r23,-1
   22fdc:	bde9883a 	add	r20,r23,r23
   22fe0:	28c00504 	addi	r3,r5,20
   22fe4:	a529883a 	add	r20,r20,r20
   22fe8:	1d39883a 	add	fp,r3,r20
   22fec:	24c00504 	addi	r19,r4,20
   22ff0:	d9400215 	stw	r5,8(sp)
   22ff4:	9d29883a 	add	r20,r19,r20
   22ff8:	e1400017 	ldw	r5,0(fp)
   22ffc:	d9000015 	stw	r4,0(sp)
   23000:	a1000017 	ldw	r4,0(r20)
   23004:	29400044 	addi	r5,r5,1
   23008:	d8c00115 	stw	r3,4(sp)
   2300c:	dd000315 	stw	r20,12(sp)
   23010:	002ae780 	call	2ae78 <__udivsi3>
   23014:	1025883a 	mov	r18,r2
   23018:	10003026 	beq	r2,zero,230dc <quorem+0x13c>
   2301c:	dc400117 	ldw	r17,4(sp)
   23020:	9829883a 	mov	r20,r19
   23024:	002d883a 	mov	r22,zero
   23028:	0021883a 	mov	r16,zero
   2302c:	8d400017 	ldw	r21,0(r17)
   23030:	900b883a 	mov	r5,r18
   23034:	8c400104 	addi	r17,r17,4
   23038:	a93fffcc 	andi	r4,r21,65535
   2303c:	00208980 	call	20898 <__mulsi3>
   23040:	a808d43a 	srli	r4,r21,16
   23044:	900b883a 	mov	r5,r18
   23048:	15ad883a 	add	r22,r2,r22
   2304c:	00208980 	call	20898 <__mulsi3>
   23050:	a1000017 	ldw	r4,0(r20)
   23054:	b00cd43a 	srli	r6,r22,16
   23058:	b0ffffcc 	andi	r3,r22,65535
   2305c:	217fffcc 	andi	r5,r4,65535
   23060:	2c21883a 	add	r16,r5,r16
   23064:	80c7c83a 	sub	r3,r16,r3
   23068:	2008d43a 	srli	r4,r4,16
   2306c:	1185883a 	add	r2,r2,r6
   23070:	1821d43a 	srai	r16,r3,16
   23074:	117fffcc 	andi	r5,r2,65535
   23078:	2149c83a 	sub	r4,r4,r5
   2307c:	2421883a 	add	r16,r4,r16
   23080:	8008943a 	slli	r4,r16,16
   23084:	18ffffcc 	andi	r3,r3,65535
   23088:	102cd43a 	srli	r22,r2,16
   2308c:	20c8b03a 	or	r4,r4,r3
   23090:	a1000015 	stw	r4,0(r20)
   23094:	8021d43a 	srai	r16,r16,16
   23098:	a5000104 	addi	r20,r20,4
   2309c:	e47fe32e 	bgeu	fp,r17,2302c <_gp+0xfffe7ec8>
   230a0:	d8c00317 	ldw	r3,12(sp)
   230a4:	18800017 	ldw	r2,0(r3)
   230a8:	10000c1e 	bne	r2,zero,230dc <quorem+0x13c>
   230ac:	18bfff04 	addi	r2,r3,-4
   230b0:	9880082e 	bgeu	r19,r2,230d4 <quorem+0x134>
   230b4:	18ffff17 	ldw	r3,-4(r3)
   230b8:	18000326 	beq	r3,zero,230c8 <quorem+0x128>
   230bc:	00000506 	br	230d4 <quorem+0x134>
   230c0:	10c00017 	ldw	r3,0(r2)
   230c4:	1800031e 	bne	r3,zero,230d4 <quorem+0x134>
   230c8:	10bfff04 	addi	r2,r2,-4
   230cc:	bdffffc4 	addi	r23,r23,-1
   230d0:	98bffb36 	bltu	r19,r2,230c0 <_gp+0xfffe7f5c>
   230d4:	d8c00017 	ldw	r3,0(sp)
   230d8:	1dc00415 	stw	r23,16(r3)
   230dc:	d9400217 	ldw	r5,8(sp)
   230e0:	d9000017 	ldw	r4,0(sp)
   230e4:	00272040 	call	27204 <__mcmp>
   230e8:	10002816 	blt	r2,zero,2318c <quorem+0x1ec>
   230ec:	dc400117 	ldw	r17,4(sp)
   230f0:	94800044 	addi	r18,r18,1
   230f4:	980d883a 	mov	r6,r19
   230f8:	0007883a 	mov	r3,zero
   230fc:	31000017 	ldw	r4,0(r6)
   23100:	89400017 	ldw	r5,0(r17)
   23104:	31800104 	addi	r6,r6,4
   23108:	20bfffcc 	andi	r2,r4,65535
   2310c:	10c7883a 	add	r3,r2,r3
   23110:	28bfffcc 	andi	r2,r5,65535
   23114:	1885c83a 	sub	r2,r3,r2
   23118:	280ad43a 	srli	r5,r5,16
   2311c:	2008d43a 	srli	r4,r4,16
   23120:	1007d43a 	srai	r3,r2,16
   23124:	10bfffcc 	andi	r2,r2,65535
   23128:	2149c83a 	sub	r4,r4,r5
   2312c:	20c9883a 	add	r4,r4,r3
   23130:	200a943a 	slli	r5,r4,16
   23134:	8c400104 	addi	r17,r17,4
   23138:	2007d43a 	srai	r3,r4,16
   2313c:	2884b03a 	or	r2,r5,r2
   23140:	30bfff15 	stw	r2,-4(r6)
   23144:	e47fed2e 	bgeu	fp,r17,230fc <_gp+0xfffe7f98>
   23148:	bdc5883a 	add	r2,r23,r23
   2314c:	1085883a 	add	r2,r2,r2
   23150:	9887883a 	add	r3,r19,r2
   23154:	18800017 	ldw	r2,0(r3)
   23158:	10000c1e 	bne	r2,zero,2318c <quorem+0x1ec>
   2315c:	18bfff04 	addi	r2,r3,-4
   23160:	9880082e 	bgeu	r19,r2,23184 <quorem+0x1e4>
   23164:	18ffff17 	ldw	r3,-4(r3)
   23168:	18000326 	beq	r3,zero,23178 <quorem+0x1d8>
   2316c:	00000506 	br	23184 <quorem+0x1e4>
   23170:	10c00017 	ldw	r3,0(r2)
   23174:	1800031e 	bne	r3,zero,23184 <quorem+0x1e4>
   23178:	10bfff04 	addi	r2,r2,-4
   2317c:	bdffffc4 	addi	r23,r23,-1
   23180:	98bffb36 	bltu	r19,r2,23170 <_gp+0xfffe800c>
   23184:	d8c00017 	ldw	r3,0(sp)
   23188:	1dc00415 	stw	r23,16(r3)
   2318c:	9005883a 	mov	r2,r18
   23190:	dfc00d17 	ldw	ra,52(sp)
   23194:	df000c17 	ldw	fp,48(sp)
   23198:	ddc00b17 	ldw	r23,44(sp)
   2319c:	dd800a17 	ldw	r22,40(sp)
   231a0:	dd400917 	ldw	r21,36(sp)
   231a4:	dd000817 	ldw	r20,32(sp)
   231a8:	dcc00717 	ldw	r19,28(sp)
   231ac:	dc800617 	ldw	r18,24(sp)
   231b0:	dc400517 	ldw	r17,20(sp)
   231b4:	dc000417 	ldw	r16,16(sp)
   231b8:	dec00e04 	addi	sp,sp,56
   231bc:	f800283a 	ret
   231c0:	0005883a 	mov	r2,zero
   231c4:	003ff206 	br	23190 <_gp+0xfffe802c>

000231c8 <_dtoa_r>:
   231c8:	20801017 	ldw	r2,64(r4)
   231cc:	deffde04 	addi	sp,sp,-136
   231d0:	df002015 	stw	fp,128(sp)
   231d4:	dcc01b15 	stw	r19,108(sp)
   231d8:	dc801a15 	stw	r18,104(sp)
   231dc:	dc401915 	stw	r17,100(sp)
   231e0:	dc001815 	stw	r16,96(sp)
   231e4:	dfc02115 	stw	ra,132(sp)
   231e8:	ddc01f15 	stw	r23,124(sp)
   231ec:	dd801e15 	stw	r22,120(sp)
   231f0:	dd401d15 	stw	r21,116(sp)
   231f4:	dd001c15 	stw	r20,112(sp)
   231f8:	d9c00315 	stw	r7,12(sp)
   231fc:	2039883a 	mov	fp,r4
   23200:	3023883a 	mov	r17,r6
   23204:	2825883a 	mov	r18,r5
   23208:	dc002417 	ldw	r16,144(sp)
   2320c:	3027883a 	mov	r19,r6
   23210:	10000826 	beq	r2,zero,23234 <_dtoa_r+0x6c>
   23214:	21801117 	ldw	r6,68(r4)
   23218:	00c00044 	movi	r3,1
   2321c:	100b883a 	mov	r5,r2
   23220:	1986983a 	sll	r3,r3,r6
   23224:	11800115 	stw	r6,4(r2)
   23228:	10c00215 	stw	r3,8(r2)
   2322c:	00269280 	call	26928 <_Bfree>
   23230:	e0001015 	stw	zero,64(fp)
   23234:	88002e16 	blt	r17,zero,232f0 <_dtoa_r+0x128>
   23238:	80000015 	stw	zero,0(r16)
   2323c:	889ffc2c 	andhi	r2,r17,32752
   23240:	00dffc34 	movhi	r3,32752
   23244:	10c01c26 	beq	r2,r3,232b8 <_dtoa_r+0xf0>
   23248:	000d883a 	mov	r6,zero
   2324c:	000f883a 	mov	r7,zero
   23250:	9009883a 	mov	r4,r18
   23254:	980b883a 	mov	r5,r19
   23258:	002c1b00 	call	2c1b0 <__eqdf2>
   2325c:	10002b1e 	bne	r2,zero,2330c <_dtoa_r+0x144>
   23260:	d9c02317 	ldw	r7,140(sp)
   23264:	00800044 	movi	r2,1
   23268:	38800015 	stw	r2,0(r7)
   2326c:	d8802517 	ldw	r2,148(sp)
   23270:	10019e26 	beq	r2,zero,238ec <_dtoa_r+0x724>
   23274:	d8c02517 	ldw	r3,148(sp)
   23278:	008000f4 	movhi	r2,3
   2327c:	10841644 	addi	r2,r2,4185
   23280:	18800015 	stw	r2,0(r3)
   23284:	10bfffc4 	addi	r2,r2,-1
   23288:	dfc02117 	ldw	ra,132(sp)
   2328c:	df002017 	ldw	fp,128(sp)
   23290:	ddc01f17 	ldw	r23,124(sp)
   23294:	dd801e17 	ldw	r22,120(sp)
   23298:	dd401d17 	ldw	r21,116(sp)
   2329c:	dd001c17 	ldw	r20,112(sp)
   232a0:	dcc01b17 	ldw	r19,108(sp)
   232a4:	dc801a17 	ldw	r18,104(sp)
   232a8:	dc401917 	ldw	r17,100(sp)
   232ac:	dc001817 	ldw	r16,96(sp)
   232b0:	dec02204 	addi	sp,sp,136
   232b4:	f800283a 	ret
   232b8:	d8c02317 	ldw	r3,140(sp)
   232bc:	0089c3c4 	movi	r2,9999
   232c0:	18800015 	stw	r2,0(r3)
   232c4:	90017726 	beq	r18,zero,238a4 <_dtoa_r+0x6dc>
   232c8:	008000f4 	movhi	r2,3
   232cc:	10842204 	addi	r2,r2,4232
   232d0:	d9002517 	ldw	r4,148(sp)
   232d4:	203fec26 	beq	r4,zero,23288 <_gp+0xfffe8124>
   232d8:	10c000c7 	ldb	r3,3(r2)
   232dc:	1801781e 	bne	r3,zero,238c0 <_dtoa_r+0x6f8>
   232e0:	10c000c4 	addi	r3,r2,3
   232e4:	d9802517 	ldw	r6,148(sp)
   232e8:	30c00015 	stw	r3,0(r6)
   232ec:	003fe606 	br	23288 <_gp+0xfffe8124>
   232f0:	04e00034 	movhi	r19,32768
   232f4:	9cffffc4 	addi	r19,r19,-1
   232f8:	00800044 	movi	r2,1
   232fc:	8ce6703a 	and	r19,r17,r19
   23300:	80800015 	stw	r2,0(r16)
   23304:	9823883a 	mov	r17,r19
   23308:	003fcc06 	br	2323c <_gp+0xfffe80d8>
   2330c:	d8800204 	addi	r2,sp,8
   23310:	d8800015 	stw	r2,0(sp)
   23314:	d9c00104 	addi	r7,sp,4
   23318:	900b883a 	mov	r5,r18
   2331c:	980d883a 	mov	r6,r19
   23320:	e009883a 	mov	r4,fp
   23324:	8820d53a 	srli	r16,r17,20
   23328:	00275d00 	call	275d0 <__d2b>
   2332c:	d8800915 	stw	r2,36(sp)
   23330:	8001651e 	bne	r16,zero,238c8 <_dtoa_r+0x700>
   23334:	dd800217 	ldw	r22,8(sp)
   23338:	dc000117 	ldw	r16,4(sp)
   2333c:	00800804 	movi	r2,32
   23340:	b421883a 	add	r16,r22,r16
   23344:	80c10c84 	addi	r3,r16,1074
   23348:	10c2d10e 	bge	r2,r3,23e90 <_dtoa_r+0xcc8>
   2334c:	00801004 	movi	r2,64
   23350:	81010484 	addi	r4,r16,1042
   23354:	10c7c83a 	sub	r3,r2,r3
   23358:	9108d83a 	srl	r4,r18,r4
   2335c:	88e2983a 	sll	r17,r17,r3
   23360:	2448b03a 	or	r4,r4,r17
   23364:	002d6cc0 	call	2d6cc <__floatunsidf>
   23368:	017f8434 	movhi	r5,65040
   2336c:	01800044 	movi	r6,1
   23370:	1009883a 	mov	r4,r2
   23374:	194b883a 	add	r5,r3,r5
   23378:	843fffc4 	addi	r16,r16,-1
   2337c:	d9801115 	stw	r6,68(sp)
   23380:	000d883a 	mov	r6,zero
   23384:	01cffe34 	movhi	r7,16376
   23388:	002cc740 	call	2cc74 <__subdf3>
   2338c:	0198dbf4 	movhi	r6,25455
   23390:	01cff4f4 	movhi	r7,16339
   23394:	3190d844 	addi	r6,r6,17249
   23398:	39e1e9c4 	addi	r7,r7,-30809
   2339c:	1009883a 	mov	r4,r2
   233a0:	180b883a 	mov	r5,r3
   233a4:	002c4080 	call	2c408 <__muldf3>
   233a8:	01a2d874 	movhi	r6,35681
   233ac:	01cff1f4 	movhi	r7,16327
   233b0:	31b22cc4 	addi	r6,r6,-14157
   233b4:	39e28a04 	addi	r7,r7,-30168
   233b8:	180b883a 	mov	r5,r3
   233bc:	1009883a 	mov	r4,r2
   233c0:	002af340 	call	2af34 <__adddf3>
   233c4:	8009883a 	mov	r4,r16
   233c8:	1029883a 	mov	r20,r2
   233cc:	1823883a 	mov	r17,r3
   233d0:	002d5f00 	call	2d5f0 <__floatsidf>
   233d4:	019427f4 	movhi	r6,20639
   233d8:	01cff4f4 	movhi	r7,16339
   233dc:	319e7ec4 	addi	r6,r6,31227
   233e0:	39d104c4 	addi	r7,r7,17427
   233e4:	1009883a 	mov	r4,r2
   233e8:	180b883a 	mov	r5,r3
   233ec:	002c4080 	call	2c408 <__muldf3>
   233f0:	100d883a 	mov	r6,r2
   233f4:	180f883a 	mov	r7,r3
   233f8:	a009883a 	mov	r4,r20
   233fc:	880b883a 	mov	r5,r17
   23400:	002af340 	call	2af34 <__adddf3>
   23404:	1009883a 	mov	r4,r2
   23408:	180b883a 	mov	r5,r3
   2340c:	1029883a 	mov	r20,r2
   23410:	1823883a 	mov	r17,r3
   23414:	002d5700 	call	2d570 <__fixdfsi>
   23418:	000d883a 	mov	r6,zero
   2341c:	000f883a 	mov	r7,zero
   23420:	a009883a 	mov	r4,r20
   23424:	880b883a 	mov	r5,r17
   23428:	d8800515 	stw	r2,20(sp)
   2342c:	002c3140 	call	2c314 <__ledf2>
   23430:	10028716 	blt	r2,zero,23e50 <_dtoa_r+0xc88>
   23434:	d8c00517 	ldw	r3,20(sp)
   23438:	00800584 	movi	r2,22
   2343c:	10c27536 	bltu	r2,r3,23e14 <_dtoa_r+0xc4c>
   23440:	180490fa 	slli	r2,r3,3
   23444:	00c000f4 	movhi	r3,3
   23448:	18c43e04 	addi	r3,r3,4344
   2344c:	1885883a 	add	r2,r3,r2
   23450:	11000017 	ldw	r4,0(r2)
   23454:	11400117 	ldw	r5,4(r2)
   23458:	900d883a 	mov	r6,r18
   2345c:	980f883a 	mov	r7,r19
   23460:	002c2380 	call	2c238 <__gedf2>
   23464:	00828d0e 	bge	zero,r2,23e9c <_dtoa_r+0xcd4>
   23468:	d9000517 	ldw	r4,20(sp)
   2346c:	d8000e15 	stw	zero,56(sp)
   23470:	213fffc4 	addi	r4,r4,-1
   23474:	d9000515 	stw	r4,20(sp)
   23478:	b42dc83a 	sub	r22,r22,r16
   2347c:	b5bfffc4 	addi	r22,r22,-1
   23480:	b0026f16 	blt	r22,zero,23e40 <_dtoa_r+0xc78>
   23484:	d8000815 	stw	zero,32(sp)
   23488:	d9c00517 	ldw	r7,20(sp)
   2348c:	38026416 	blt	r7,zero,23e20 <_dtoa_r+0xc58>
   23490:	b1ed883a 	add	r22,r22,r7
   23494:	d9c00d15 	stw	r7,52(sp)
   23498:	d8000a15 	stw	zero,40(sp)
   2349c:	d9800317 	ldw	r6,12(sp)
   234a0:	00800244 	movi	r2,9
   234a4:	11811436 	bltu	r2,r6,238f8 <_dtoa_r+0x730>
   234a8:	00800144 	movi	r2,5
   234ac:	1184e10e 	bge	r2,r6,24834 <_dtoa_r+0x166c>
   234b0:	31bfff04 	addi	r6,r6,-4
   234b4:	d9800315 	stw	r6,12(sp)
   234b8:	0023883a 	mov	r17,zero
   234bc:	d9800317 	ldw	r6,12(sp)
   234c0:	008000c4 	movi	r2,3
   234c4:	30836726 	beq	r6,r2,24264 <_dtoa_r+0x109c>
   234c8:	1183410e 	bge	r2,r6,241d0 <_dtoa_r+0x1008>
   234cc:	d9c00317 	ldw	r7,12(sp)
   234d0:	00800104 	movi	r2,4
   234d4:	38827c26 	beq	r7,r2,23ec8 <_dtoa_r+0xd00>
   234d8:	00800144 	movi	r2,5
   234dc:	3884c41e 	bne	r7,r2,247f0 <_dtoa_r+0x1628>
   234e0:	00800044 	movi	r2,1
   234e4:	d8800b15 	stw	r2,44(sp)
   234e8:	d8c00517 	ldw	r3,20(sp)
   234ec:	d9002217 	ldw	r4,136(sp)
   234f0:	1907883a 	add	r3,r3,r4
   234f4:	19800044 	addi	r6,r3,1
   234f8:	d8c00c15 	stw	r3,48(sp)
   234fc:	d9800615 	stw	r6,24(sp)
   23500:	0183a40e 	bge	zero,r6,24394 <_dtoa_r+0x11cc>
   23504:	d9800617 	ldw	r6,24(sp)
   23508:	3021883a 	mov	r16,r6
   2350c:	e0001115 	stw	zero,68(fp)
   23510:	008005c4 	movi	r2,23
   23514:	1184c92e 	bgeu	r2,r6,2483c <_dtoa_r+0x1674>
   23518:	00c00044 	movi	r3,1
   2351c:	00800104 	movi	r2,4
   23520:	1085883a 	add	r2,r2,r2
   23524:	11000504 	addi	r4,r2,20
   23528:	180b883a 	mov	r5,r3
   2352c:	18c00044 	addi	r3,r3,1
   23530:	313ffb2e 	bgeu	r6,r4,23520 <_gp+0xfffe83bc>
   23534:	e1401115 	stw	r5,68(fp)
   23538:	e009883a 	mov	r4,fp
   2353c:	00268800 	call	26880 <_Balloc>
   23540:	d8800715 	stw	r2,28(sp)
   23544:	e0801015 	stw	r2,64(fp)
   23548:	00800384 	movi	r2,14
   2354c:	1400f736 	bltu	r2,r16,2392c <_dtoa_r+0x764>
   23550:	8800f626 	beq	r17,zero,2392c <_dtoa_r+0x764>
   23554:	d9c00517 	ldw	r7,20(sp)
   23558:	01c39a0e 	bge	zero,r7,243c4 <_dtoa_r+0x11fc>
   2355c:	388003cc 	andi	r2,r7,15
   23560:	100490fa 	slli	r2,r2,3
   23564:	382bd13a 	srai	r21,r7,4
   23568:	00c000f4 	movhi	r3,3
   2356c:	18c43e04 	addi	r3,r3,4344
   23570:	1885883a 	add	r2,r3,r2
   23574:	a8c0040c 	andi	r3,r21,16
   23578:	12400017 	ldw	r9,0(r2)
   2357c:	12000117 	ldw	r8,4(r2)
   23580:	18037926 	beq	r3,zero,24368 <_dtoa_r+0x11a0>
   23584:	008000f4 	movhi	r2,3
   23588:	10843404 	addi	r2,r2,4304
   2358c:	11800817 	ldw	r6,32(r2)
   23590:	11c00917 	ldw	r7,36(r2)
   23594:	9009883a 	mov	r4,r18
   23598:	980b883a 	mov	r5,r19
   2359c:	da001715 	stw	r8,92(sp)
   235a0:	da401615 	stw	r9,88(sp)
   235a4:	002b7e00 	call	2b7e0 <__divdf3>
   235a8:	da001717 	ldw	r8,92(sp)
   235ac:	da401617 	ldw	r9,88(sp)
   235b0:	ad4003cc 	andi	r21,r21,15
   235b4:	040000c4 	movi	r16,3
   235b8:	1023883a 	mov	r17,r2
   235bc:	1829883a 	mov	r20,r3
   235c0:	a8001126 	beq	r21,zero,23608 <_dtoa_r+0x440>
   235c4:	05c000f4 	movhi	r23,3
   235c8:	bdc43404 	addi	r23,r23,4304
   235cc:	4805883a 	mov	r2,r9
   235d0:	4007883a 	mov	r3,r8
   235d4:	a980004c 	andi	r6,r21,1
   235d8:	1009883a 	mov	r4,r2
   235dc:	a82bd07a 	srai	r21,r21,1
   235e0:	180b883a 	mov	r5,r3
   235e4:	30000426 	beq	r6,zero,235f8 <_dtoa_r+0x430>
   235e8:	b9800017 	ldw	r6,0(r23)
   235ec:	b9c00117 	ldw	r7,4(r23)
   235f0:	84000044 	addi	r16,r16,1
   235f4:	002c4080 	call	2c408 <__muldf3>
   235f8:	bdc00204 	addi	r23,r23,8
   235fc:	a83ff51e 	bne	r21,zero,235d4 <_gp+0xfffe8470>
   23600:	1013883a 	mov	r9,r2
   23604:	1811883a 	mov	r8,r3
   23608:	480d883a 	mov	r6,r9
   2360c:	400f883a 	mov	r7,r8
   23610:	8809883a 	mov	r4,r17
   23614:	a00b883a 	mov	r5,r20
   23618:	002b7e00 	call	2b7e0 <__divdf3>
   2361c:	d8800f15 	stw	r2,60(sp)
   23620:	d8c01015 	stw	r3,64(sp)
   23624:	d8c00e17 	ldw	r3,56(sp)
   23628:	18000626 	beq	r3,zero,23644 <_dtoa_r+0x47c>
   2362c:	d9000f17 	ldw	r4,60(sp)
   23630:	d9401017 	ldw	r5,64(sp)
   23634:	000d883a 	mov	r6,zero
   23638:	01cffc34 	movhi	r7,16368
   2363c:	002c3140 	call	2c314 <__ledf2>
   23640:	10040b16 	blt	r2,zero,24670 <_dtoa_r+0x14a8>
   23644:	8009883a 	mov	r4,r16
   23648:	002d5f00 	call	2d5f0 <__floatsidf>
   2364c:	d9800f17 	ldw	r6,60(sp)
   23650:	d9c01017 	ldw	r7,64(sp)
   23654:	1009883a 	mov	r4,r2
   23658:	180b883a 	mov	r5,r3
   2365c:	002c4080 	call	2c408 <__muldf3>
   23660:	000d883a 	mov	r6,zero
   23664:	01d00734 	movhi	r7,16412
   23668:	1009883a 	mov	r4,r2
   2366c:	180b883a 	mov	r5,r3
   23670:	002af340 	call	2af34 <__adddf3>
   23674:	1021883a 	mov	r16,r2
   23678:	d8800617 	ldw	r2,24(sp)
   2367c:	047f3034 	movhi	r17,64704
   23680:	1c63883a 	add	r17,r3,r17
   23684:	10031826 	beq	r2,zero,242e8 <_dtoa_r+0x1120>
   23688:	d8c00517 	ldw	r3,20(sp)
   2368c:	db000617 	ldw	r12,24(sp)
   23690:	d8c01315 	stw	r3,76(sp)
   23694:	d9000b17 	ldw	r4,44(sp)
   23698:	20038f26 	beq	r4,zero,244d8 <_dtoa_r+0x1310>
   2369c:	60bfffc4 	addi	r2,r12,-1
   236a0:	100490fa 	slli	r2,r2,3
   236a4:	00c000f4 	movhi	r3,3
   236a8:	18c43e04 	addi	r3,r3,4344
   236ac:	1885883a 	add	r2,r3,r2
   236b0:	11800017 	ldw	r6,0(r2)
   236b4:	11c00117 	ldw	r7,4(r2)
   236b8:	d8800717 	ldw	r2,28(sp)
   236bc:	0009883a 	mov	r4,zero
   236c0:	014ff834 	movhi	r5,16352
   236c4:	db001615 	stw	r12,88(sp)
   236c8:	15c00044 	addi	r23,r2,1
   236cc:	002b7e00 	call	2b7e0 <__divdf3>
   236d0:	800d883a 	mov	r6,r16
   236d4:	880f883a 	mov	r7,r17
   236d8:	1009883a 	mov	r4,r2
   236dc:	180b883a 	mov	r5,r3
   236e0:	002cc740 	call	2cc74 <__subdf3>
   236e4:	d9401017 	ldw	r5,64(sp)
   236e8:	d9000f17 	ldw	r4,60(sp)
   236ec:	102b883a 	mov	r21,r2
   236f0:	d8c01215 	stw	r3,72(sp)
   236f4:	002d5700 	call	2d570 <__fixdfsi>
   236f8:	1009883a 	mov	r4,r2
   236fc:	1029883a 	mov	r20,r2
   23700:	002d5f00 	call	2d5f0 <__floatsidf>
   23704:	d9000f17 	ldw	r4,60(sp)
   23708:	d9401017 	ldw	r5,64(sp)
   2370c:	100d883a 	mov	r6,r2
   23710:	180f883a 	mov	r7,r3
   23714:	002cc740 	call	2cc74 <__subdf3>
   23718:	1823883a 	mov	r17,r3
   2371c:	d8c00717 	ldw	r3,28(sp)
   23720:	d9401217 	ldw	r5,72(sp)
   23724:	a2000c04 	addi	r8,r20,48
   23728:	1021883a 	mov	r16,r2
   2372c:	1a000005 	stb	r8,0(r3)
   23730:	800d883a 	mov	r6,r16
   23734:	880f883a 	mov	r7,r17
   23738:	a809883a 	mov	r4,r21
   2373c:	4029883a 	mov	r20,r8
   23740:	002c2380 	call	2c238 <__gedf2>
   23744:	00841d16 	blt	zero,r2,247bc <_dtoa_r+0x15f4>
   23748:	800d883a 	mov	r6,r16
   2374c:	880f883a 	mov	r7,r17
   23750:	0009883a 	mov	r4,zero
   23754:	014ffc34 	movhi	r5,16368
   23758:	002cc740 	call	2cc74 <__subdf3>
   2375c:	d9401217 	ldw	r5,72(sp)
   23760:	100d883a 	mov	r6,r2
   23764:	180f883a 	mov	r7,r3
   23768:	a809883a 	mov	r4,r21
   2376c:	002c2380 	call	2c238 <__gedf2>
   23770:	db001617 	ldw	r12,88(sp)
   23774:	00840e16 	blt	zero,r2,247b0 <_dtoa_r+0x15e8>
   23778:	00800044 	movi	r2,1
   2377c:	13006b0e 	bge	r2,r12,2392c <_dtoa_r+0x764>
   23780:	d9000717 	ldw	r4,28(sp)
   23784:	dd800f15 	stw	r22,60(sp)
   23788:	dcc01015 	stw	r19,64(sp)
   2378c:	2319883a 	add	r12,r4,r12
   23790:	dcc01217 	ldw	r19,72(sp)
   23794:	602d883a 	mov	r22,r12
   23798:	dc801215 	stw	r18,72(sp)
   2379c:	b825883a 	mov	r18,r23
   237a0:	00000906 	br	237c8 <_dtoa_r+0x600>
   237a4:	002cc740 	call	2cc74 <__subdf3>
   237a8:	a80d883a 	mov	r6,r21
   237ac:	980f883a 	mov	r7,r19
   237b0:	1009883a 	mov	r4,r2
   237b4:	180b883a 	mov	r5,r3
   237b8:	002c3140 	call	2c314 <__ledf2>
   237bc:	1003e816 	blt	r2,zero,24760 <_dtoa_r+0x1598>
   237c0:	b825883a 	mov	r18,r23
   237c4:	bd83e926 	beq	r23,r22,2476c <_dtoa_r+0x15a4>
   237c8:	a809883a 	mov	r4,r21
   237cc:	980b883a 	mov	r5,r19
   237d0:	000d883a 	mov	r6,zero
   237d4:	01d00934 	movhi	r7,16420
   237d8:	002c4080 	call	2c408 <__muldf3>
   237dc:	000d883a 	mov	r6,zero
   237e0:	01d00934 	movhi	r7,16420
   237e4:	8009883a 	mov	r4,r16
   237e8:	880b883a 	mov	r5,r17
   237ec:	102b883a 	mov	r21,r2
   237f0:	1827883a 	mov	r19,r3
   237f4:	002c4080 	call	2c408 <__muldf3>
   237f8:	180b883a 	mov	r5,r3
   237fc:	1009883a 	mov	r4,r2
   23800:	1821883a 	mov	r16,r3
   23804:	1023883a 	mov	r17,r2
   23808:	002d5700 	call	2d570 <__fixdfsi>
   2380c:	1009883a 	mov	r4,r2
   23810:	1029883a 	mov	r20,r2
   23814:	002d5f00 	call	2d5f0 <__floatsidf>
   23818:	8809883a 	mov	r4,r17
   2381c:	800b883a 	mov	r5,r16
   23820:	100d883a 	mov	r6,r2
   23824:	180f883a 	mov	r7,r3
   23828:	002cc740 	call	2cc74 <__subdf3>
   2382c:	a5000c04 	addi	r20,r20,48
   23830:	a80d883a 	mov	r6,r21
   23834:	980f883a 	mov	r7,r19
   23838:	1009883a 	mov	r4,r2
   2383c:	180b883a 	mov	r5,r3
   23840:	95000005 	stb	r20,0(r18)
   23844:	1021883a 	mov	r16,r2
   23848:	1823883a 	mov	r17,r3
   2384c:	002c3140 	call	2c314 <__ledf2>
   23850:	bdc00044 	addi	r23,r23,1
   23854:	800d883a 	mov	r6,r16
   23858:	880f883a 	mov	r7,r17
   2385c:	0009883a 	mov	r4,zero
   23860:	014ffc34 	movhi	r5,16368
   23864:	103fcf0e 	bge	r2,zero,237a4 <_gp+0xfffe8640>
   23868:	d8c01317 	ldw	r3,76(sp)
   2386c:	d8c00515 	stw	r3,20(sp)
   23870:	d9400917 	ldw	r5,36(sp)
   23874:	e009883a 	mov	r4,fp
   23878:	00269280 	call	26928 <_Bfree>
   2387c:	d9000517 	ldw	r4,20(sp)
   23880:	d9802317 	ldw	r6,140(sp)
   23884:	d9c02517 	ldw	r7,148(sp)
   23888:	b8000005 	stb	zero,0(r23)
   2388c:	20800044 	addi	r2,r4,1
   23890:	30800015 	stw	r2,0(r6)
   23894:	3802aa26 	beq	r7,zero,24340 <_dtoa_r+0x1178>
   23898:	3dc00015 	stw	r23,0(r7)
   2389c:	d8800717 	ldw	r2,28(sp)
   238a0:	003e7906 	br	23288 <_gp+0xfffe8124>
   238a4:	00800434 	movhi	r2,16
   238a8:	10bfffc4 	addi	r2,r2,-1
   238ac:	88a2703a 	and	r17,r17,r2
   238b0:	883e851e 	bne	r17,zero,232c8 <_gp+0xfffe8164>
   238b4:	008000f4 	movhi	r2,3
   238b8:	10841f04 	addi	r2,r2,4220
   238bc:	003e8406 	br	232d0 <_gp+0xfffe816c>
   238c0:	10c00204 	addi	r3,r2,8
   238c4:	003e8706 	br	232e4 <_gp+0xfffe8180>
   238c8:	01400434 	movhi	r5,16
   238cc:	297fffc4 	addi	r5,r5,-1
   238d0:	994a703a 	and	r5,r19,r5
   238d4:	9009883a 	mov	r4,r18
   238d8:	843f0044 	addi	r16,r16,-1023
   238dc:	294ffc34 	orhi	r5,r5,16368
   238e0:	dd800217 	ldw	r22,8(sp)
   238e4:	d8001115 	stw	zero,68(sp)
   238e8:	003ea506 	br	23380 <_gp+0xfffe821c>
   238ec:	008000f4 	movhi	r2,3
   238f0:	10841604 	addi	r2,r2,4184
   238f4:	003e6406 	br	23288 <_gp+0xfffe8124>
   238f8:	e0001115 	stw	zero,68(fp)
   238fc:	000b883a 	mov	r5,zero
   23900:	e009883a 	mov	r4,fp
   23904:	00268800 	call	26880 <_Balloc>
   23908:	01bfffc4 	movi	r6,-1
   2390c:	01c00044 	movi	r7,1
   23910:	d8800715 	stw	r2,28(sp)
   23914:	d9800c15 	stw	r6,48(sp)
   23918:	e0801015 	stw	r2,64(fp)
   2391c:	d8000315 	stw	zero,12(sp)
   23920:	d9c00b15 	stw	r7,44(sp)
   23924:	d9800615 	stw	r6,24(sp)
   23928:	d8002215 	stw	zero,136(sp)
   2392c:	d8800117 	ldw	r2,4(sp)
   23930:	10008916 	blt	r2,zero,23b58 <_dtoa_r+0x990>
   23934:	d9000517 	ldw	r4,20(sp)
   23938:	00c00384 	movi	r3,14
   2393c:	19008616 	blt	r3,r4,23b58 <_dtoa_r+0x990>
   23940:	200490fa 	slli	r2,r4,3
   23944:	00c000f4 	movhi	r3,3
   23948:	d9802217 	ldw	r6,136(sp)
   2394c:	18c43e04 	addi	r3,r3,4344
   23950:	1885883a 	add	r2,r3,r2
   23954:	14000017 	ldw	r16,0(r2)
   23958:	14400117 	ldw	r17,4(r2)
   2395c:	30016316 	blt	r6,zero,23eec <_dtoa_r+0xd24>
   23960:	800d883a 	mov	r6,r16
   23964:	880f883a 	mov	r7,r17
   23968:	9009883a 	mov	r4,r18
   2396c:	980b883a 	mov	r5,r19
   23970:	002b7e00 	call	2b7e0 <__divdf3>
   23974:	180b883a 	mov	r5,r3
   23978:	1009883a 	mov	r4,r2
   2397c:	002d5700 	call	2d570 <__fixdfsi>
   23980:	1009883a 	mov	r4,r2
   23984:	102b883a 	mov	r21,r2
   23988:	002d5f00 	call	2d5f0 <__floatsidf>
   2398c:	800d883a 	mov	r6,r16
   23990:	880f883a 	mov	r7,r17
   23994:	1009883a 	mov	r4,r2
   23998:	180b883a 	mov	r5,r3
   2399c:	002c4080 	call	2c408 <__muldf3>
   239a0:	100d883a 	mov	r6,r2
   239a4:	180f883a 	mov	r7,r3
   239a8:	9009883a 	mov	r4,r18
   239ac:	980b883a 	mov	r5,r19
   239b0:	002cc740 	call	2cc74 <__subdf3>
   239b4:	d9c00717 	ldw	r7,28(sp)
   239b8:	1009883a 	mov	r4,r2
   239bc:	a8800c04 	addi	r2,r21,48
   239c0:	38800005 	stb	r2,0(r7)
   239c4:	3dc00044 	addi	r23,r7,1
   239c8:	d9c00617 	ldw	r7,24(sp)
   239cc:	01800044 	movi	r6,1
   239d0:	180b883a 	mov	r5,r3
   239d4:	2005883a 	mov	r2,r4
   239d8:	39803826 	beq	r7,r6,23abc <_dtoa_r+0x8f4>
   239dc:	000d883a 	mov	r6,zero
   239e0:	01d00934 	movhi	r7,16420
   239e4:	002c4080 	call	2c408 <__muldf3>
   239e8:	000d883a 	mov	r6,zero
   239ec:	000f883a 	mov	r7,zero
   239f0:	1009883a 	mov	r4,r2
   239f4:	180b883a 	mov	r5,r3
   239f8:	1025883a 	mov	r18,r2
   239fc:	1827883a 	mov	r19,r3
   23a00:	002c1b00 	call	2c1b0 <__eqdf2>
   23a04:	103f9a26 	beq	r2,zero,23870 <_gp+0xfffe870c>
   23a08:	d9c00617 	ldw	r7,24(sp)
   23a0c:	d8c00717 	ldw	r3,28(sp)
   23a10:	b829883a 	mov	r20,r23
   23a14:	38bfffc4 	addi	r2,r7,-1
   23a18:	18ad883a 	add	r22,r3,r2
   23a1c:	00000a06 	br	23a48 <_dtoa_r+0x880>
   23a20:	002c4080 	call	2c408 <__muldf3>
   23a24:	000d883a 	mov	r6,zero
   23a28:	000f883a 	mov	r7,zero
   23a2c:	1009883a 	mov	r4,r2
   23a30:	180b883a 	mov	r5,r3
   23a34:	1025883a 	mov	r18,r2
   23a38:	1827883a 	mov	r19,r3
   23a3c:	b829883a 	mov	r20,r23
   23a40:	002c1b00 	call	2c1b0 <__eqdf2>
   23a44:	103f8a26 	beq	r2,zero,23870 <_gp+0xfffe870c>
   23a48:	800d883a 	mov	r6,r16
   23a4c:	880f883a 	mov	r7,r17
   23a50:	9009883a 	mov	r4,r18
   23a54:	980b883a 	mov	r5,r19
   23a58:	002b7e00 	call	2b7e0 <__divdf3>
   23a5c:	180b883a 	mov	r5,r3
   23a60:	1009883a 	mov	r4,r2
   23a64:	002d5700 	call	2d570 <__fixdfsi>
   23a68:	1009883a 	mov	r4,r2
   23a6c:	102b883a 	mov	r21,r2
   23a70:	002d5f00 	call	2d5f0 <__floatsidf>
   23a74:	800d883a 	mov	r6,r16
   23a78:	880f883a 	mov	r7,r17
   23a7c:	1009883a 	mov	r4,r2
   23a80:	180b883a 	mov	r5,r3
   23a84:	002c4080 	call	2c408 <__muldf3>
   23a88:	100d883a 	mov	r6,r2
   23a8c:	180f883a 	mov	r7,r3
   23a90:	9009883a 	mov	r4,r18
   23a94:	980b883a 	mov	r5,r19
   23a98:	002cc740 	call	2cc74 <__subdf3>
   23a9c:	aa000c04 	addi	r8,r21,48
   23aa0:	a2000005 	stb	r8,0(r20)
   23aa4:	000d883a 	mov	r6,zero
   23aa8:	01d00934 	movhi	r7,16420
   23aac:	1009883a 	mov	r4,r2
   23ab0:	180b883a 	mov	r5,r3
   23ab4:	a5c00044 	addi	r23,r20,1
   23ab8:	b53fd91e 	bne	r22,r20,23a20 <_gp+0xfffe88bc>
   23abc:	100d883a 	mov	r6,r2
   23ac0:	180f883a 	mov	r7,r3
   23ac4:	1009883a 	mov	r4,r2
   23ac8:	180b883a 	mov	r5,r3
   23acc:	002af340 	call	2af34 <__adddf3>
   23ad0:	100d883a 	mov	r6,r2
   23ad4:	180f883a 	mov	r7,r3
   23ad8:	8009883a 	mov	r4,r16
   23adc:	880b883a 	mov	r5,r17
   23ae0:	1027883a 	mov	r19,r2
   23ae4:	1825883a 	mov	r18,r3
   23ae8:	002c3140 	call	2c314 <__ledf2>
   23aec:	10000816 	blt	r2,zero,23b10 <_dtoa_r+0x948>
   23af0:	980d883a 	mov	r6,r19
   23af4:	900f883a 	mov	r7,r18
   23af8:	8009883a 	mov	r4,r16
   23afc:	880b883a 	mov	r5,r17
   23b00:	002c1b00 	call	2c1b0 <__eqdf2>
   23b04:	103f5a1e 	bne	r2,zero,23870 <_gp+0xfffe870c>
   23b08:	ad40004c 	andi	r21,r21,1
   23b0c:	a83f5826 	beq	r21,zero,23870 <_gp+0xfffe870c>
   23b10:	bd3fffc3 	ldbu	r20,-1(r23)
   23b14:	b8bfffc4 	addi	r2,r23,-1
   23b18:	1007883a 	mov	r3,r2
   23b1c:	01400e44 	movi	r5,57
   23b20:	d9800717 	ldw	r6,28(sp)
   23b24:	00000506 	br	23b3c <_dtoa_r+0x974>
   23b28:	18ffffc4 	addi	r3,r3,-1
   23b2c:	11824726 	beq	r2,r6,2444c <_dtoa_r+0x1284>
   23b30:	1d000003 	ldbu	r20,0(r3)
   23b34:	102f883a 	mov	r23,r2
   23b38:	10bfffc4 	addi	r2,r2,-1
   23b3c:	a1003fcc 	andi	r4,r20,255
   23b40:	2100201c 	xori	r4,r4,128
   23b44:	213fe004 	addi	r4,r4,-128
   23b48:	217ff726 	beq	r4,r5,23b28 <_gp+0xfffe89c4>
   23b4c:	a2000044 	addi	r8,r20,1
   23b50:	12000005 	stb	r8,0(r2)
   23b54:	003f4606 	br	23870 <_gp+0xfffe870c>
   23b58:	d9000b17 	ldw	r4,44(sp)
   23b5c:	2000c826 	beq	r4,zero,23e80 <_dtoa_r+0xcb8>
   23b60:	d9800317 	ldw	r6,12(sp)
   23b64:	00c00044 	movi	r3,1
   23b68:	1980f90e 	bge	r3,r6,23f50 <_dtoa_r+0xd88>
   23b6c:	d8800617 	ldw	r2,24(sp)
   23b70:	d8c00a17 	ldw	r3,40(sp)
   23b74:	157fffc4 	addi	r21,r2,-1
   23b78:	1d41f316 	blt	r3,r21,24348 <_dtoa_r+0x1180>
   23b7c:	1d6bc83a 	sub	r21,r3,r21
   23b80:	d9c00617 	ldw	r7,24(sp)
   23b84:	3802aa16 	blt	r7,zero,24630 <_dtoa_r+0x1468>
   23b88:	dd000817 	ldw	r20,32(sp)
   23b8c:	d8800617 	ldw	r2,24(sp)
   23b90:	d8c00817 	ldw	r3,32(sp)
   23b94:	01400044 	movi	r5,1
   23b98:	e009883a 	mov	r4,fp
   23b9c:	1887883a 	add	r3,r3,r2
   23ba0:	d8c00815 	stw	r3,32(sp)
   23ba4:	b0ad883a 	add	r22,r22,r2
   23ba8:	0026cb40 	call	26cb4 <__i2b>
   23bac:	1023883a 	mov	r17,r2
   23bb0:	a0000826 	beq	r20,zero,23bd4 <_dtoa_r+0xa0c>
   23bb4:	0580070e 	bge	zero,r22,23bd4 <_dtoa_r+0xa0c>
   23bb8:	a005883a 	mov	r2,r20
   23bbc:	b500b916 	blt	r22,r20,23ea4 <_dtoa_r+0xcdc>
   23bc0:	d9000817 	ldw	r4,32(sp)
   23bc4:	a0a9c83a 	sub	r20,r20,r2
   23bc8:	b0adc83a 	sub	r22,r22,r2
   23bcc:	2089c83a 	sub	r4,r4,r2
   23bd0:	d9000815 	stw	r4,32(sp)
   23bd4:	d9800a17 	ldw	r6,40(sp)
   23bd8:	0181810e 	bge	zero,r6,241e0 <_dtoa_r+0x1018>
   23bdc:	d9c00b17 	ldw	r7,44(sp)
   23be0:	3800b326 	beq	r7,zero,23eb0 <_dtoa_r+0xce8>
   23be4:	a800b226 	beq	r21,zero,23eb0 <_dtoa_r+0xce8>
   23be8:	880b883a 	mov	r5,r17
   23bec:	a80d883a 	mov	r6,r21
   23bf0:	e009883a 	mov	r4,fp
   23bf4:	0026f7c0 	call	26f7c <__pow5mult>
   23bf8:	d9800917 	ldw	r6,36(sp)
   23bfc:	100b883a 	mov	r5,r2
   23c00:	e009883a 	mov	r4,fp
   23c04:	1023883a 	mov	r17,r2
   23c08:	0026cf00 	call	26cf0 <__multiply>
   23c0c:	1021883a 	mov	r16,r2
   23c10:	d8800a17 	ldw	r2,40(sp)
   23c14:	d9400917 	ldw	r5,36(sp)
   23c18:	e009883a 	mov	r4,fp
   23c1c:	1545c83a 	sub	r2,r2,r21
   23c20:	d8800a15 	stw	r2,40(sp)
   23c24:	00269280 	call	26928 <_Bfree>
   23c28:	d8c00a17 	ldw	r3,40(sp)
   23c2c:	18009f1e 	bne	r3,zero,23eac <_dtoa_r+0xce4>
   23c30:	05c00044 	movi	r23,1
   23c34:	e009883a 	mov	r4,fp
   23c38:	b80b883a 	mov	r5,r23
   23c3c:	0026cb40 	call	26cb4 <__i2b>
   23c40:	d9000d17 	ldw	r4,52(sp)
   23c44:	102b883a 	mov	r21,r2
   23c48:	2000ce26 	beq	r4,zero,23f84 <_dtoa_r+0xdbc>
   23c4c:	200d883a 	mov	r6,r4
   23c50:	100b883a 	mov	r5,r2
   23c54:	e009883a 	mov	r4,fp
   23c58:	0026f7c0 	call	26f7c <__pow5mult>
   23c5c:	d9800317 	ldw	r6,12(sp)
   23c60:	102b883a 	mov	r21,r2
   23c64:	b981810e 	bge	r23,r6,2426c <_dtoa_r+0x10a4>
   23c68:	0027883a 	mov	r19,zero
   23c6c:	a8800417 	ldw	r2,16(r21)
   23c70:	05c00804 	movi	r23,32
   23c74:	10800104 	addi	r2,r2,4
   23c78:	1085883a 	add	r2,r2,r2
   23c7c:	1085883a 	add	r2,r2,r2
   23c80:	a885883a 	add	r2,r21,r2
   23c84:	11000017 	ldw	r4,0(r2)
   23c88:	0026b9c0 	call	26b9c <__hi0bits>
   23c8c:	b885c83a 	sub	r2,r23,r2
   23c90:	1585883a 	add	r2,r2,r22
   23c94:	108007cc 	andi	r2,r2,31
   23c98:	1000b326 	beq	r2,zero,23f68 <_dtoa_r+0xda0>
   23c9c:	00c00804 	movi	r3,32
   23ca0:	1887c83a 	sub	r3,r3,r2
   23ca4:	01000104 	movi	r4,4
   23ca8:	20c2cd0e 	bge	r4,r3,247e0 <_dtoa_r+0x1618>
   23cac:	00c00704 	movi	r3,28
   23cb0:	1885c83a 	sub	r2,r3,r2
   23cb4:	d8c00817 	ldw	r3,32(sp)
   23cb8:	a0a9883a 	add	r20,r20,r2
   23cbc:	b0ad883a 	add	r22,r22,r2
   23cc0:	1887883a 	add	r3,r3,r2
   23cc4:	d8c00815 	stw	r3,32(sp)
   23cc8:	d9800817 	ldw	r6,32(sp)
   23ccc:	0180040e 	bge	zero,r6,23ce0 <_dtoa_r+0xb18>
   23cd0:	800b883a 	mov	r5,r16
   23cd4:	e009883a 	mov	r4,fp
   23cd8:	00270bc0 	call	270bc <__lshift>
   23cdc:	1021883a 	mov	r16,r2
   23ce0:	0580050e 	bge	zero,r22,23cf8 <_dtoa_r+0xb30>
   23ce4:	a80b883a 	mov	r5,r21
   23ce8:	b00d883a 	mov	r6,r22
   23cec:	e009883a 	mov	r4,fp
   23cf0:	00270bc0 	call	270bc <__lshift>
   23cf4:	102b883a 	mov	r21,r2
   23cf8:	d9c00e17 	ldw	r7,56(sp)
   23cfc:	3801211e 	bne	r7,zero,24184 <_dtoa_r+0xfbc>
   23d00:	d9800617 	ldw	r6,24(sp)
   23d04:	0181380e 	bge	zero,r6,241e8 <_dtoa_r+0x1020>
   23d08:	d8c00b17 	ldw	r3,44(sp)
   23d0c:	1800ab1e 	bne	r3,zero,23fbc <_dtoa_r+0xdf4>
   23d10:	dc800717 	ldw	r18,28(sp)
   23d14:	dcc00617 	ldw	r19,24(sp)
   23d18:	9029883a 	mov	r20,r18
   23d1c:	00000206 	br	23d28 <_dtoa_r+0xb60>
   23d20:	00269500 	call	26950 <__multadd>
   23d24:	1021883a 	mov	r16,r2
   23d28:	a80b883a 	mov	r5,r21
   23d2c:	8009883a 	mov	r4,r16
   23d30:	0022fa00 	call	22fa0 <quorem>
   23d34:	10800c04 	addi	r2,r2,48
   23d38:	90800005 	stb	r2,0(r18)
   23d3c:	94800044 	addi	r18,r18,1
   23d40:	9507c83a 	sub	r3,r18,r20
   23d44:	000f883a 	mov	r7,zero
   23d48:	01800284 	movi	r6,10
   23d4c:	800b883a 	mov	r5,r16
   23d50:	e009883a 	mov	r4,fp
   23d54:	1cfff216 	blt	r3,r19,23d20 <_gp+0xfffe8bbc>
   23d58:	1011883a 	mov	r8,r2
   23d5c:	d8800617 	ldw	r2,24(sp)
   23d60:	0082370e 	bge	zero,r2,24640 <_dtoa_r+0x1478>
   23d64:	d9000717 	ldw	r4,28(sp)
   23d68:	0025883a 	mov	r18,zero
   23d6c:	20af883a 	add	r23,r4,r2
   23d70:	01800044 	movi	r6,1
   23d74:	800b883a 	mov	r5,r16
   23d78:	e009883a 	mov	r4,fp
   23d7c:	da001715 	stw	r8,92(sp)
   23d80:	00270bc0 	call	270bc <__lshift>
   23d84:	a80b883a 	mov	r5,r21
   23d88:	1009883a 	mov	r4,r2
   23d8c:	d8800915 	stw	r2,36(sp)
   23d90:	00272040 	call	27204 <__mcmp>
   23d94:	da001717 	ldw	r8,92(sp)
   23d98:	0081800e 	bge	zero,r2,2439c <_dtoa_r+0x11d4>
   23d9c:	b93fffc3 	ldbu	r4,-1(r23)
   23da0:	b8bfffc4 	addi	r2,r23,-1
   23da4:	1007883a 	mov	r3,r2
   23da8:	01800e44 	movi	r6,57
   23dac:	d9c00717 	ldw	r7,28(sp)
   23db0:	00000506 	br	23dc8 <_dtoa_r+0xc00>
   23db4:	18ffffc4 	addi	r3,r3,-1
   23db8:	11c12326 	beq	r2,r7,24248 <_dtoa_r+0x1080>
   23dbc:	19000003 	ldbu	r4,0(r3)
   23dc0:	102f883a 	mov	r23,r2
   23dc4:	10bfffc4 	addi	r2,r2,-1
   23dc8:	21403fcc 	andi	r5,r4,255
   23dcc:	2940201c 	xori	r5,r5,128
   23dd0:	297fe004 	addi	r5,r5,-128
   23dd4:	29bff726 	beq	r5,r6,23db4 <_gp+0xfffe8c50>
   23dd8:	21000044 	addi	r4,r4,1
   23ddc:	11000005 	stb	r4,0(r2)
   23de0:	a80b883a 	mov	r5,r21
   23de4:	e009883a 	mov	r4,fp
   23de8:	00269280 	call	26928 <_Bfree>
   23dec:	883ea026 	beq	r17,zero,23870 <_gp+0xfffe870c>
   23df0:	90000426 	beq	r18,zero,23e04 <_dtoa_r+0xc3c>
   23df4:	94400326 	beq	r18,r17,23e04 <_dtoa_r+0xc3c>
   23df8:	900b883a 	mov	r5,r18
   23dfc:	e009883a 	mov	r4,fp
   23e00:	00269280 	call	26928 <_Bfree>
   23e04:	880b883a 	mov	r5,r17
   23e08:	e009883a 	mov	r4,fp
   23e0c:	00269280 	call	26928 <_Bfree>
   23e10:	003e9706 	br	23870 <_gp+0xfffe870c>
   23e14:	01800044 	movi	r6,1
   23e18:	d9800e15 	stw	r6,56(sp)
   23e1c:	003d9606 	br	23478 <_gp+0xfffe8314>
   23e20:	d8800817 	ldw	r2,32(sp)
   23e24:	d8c00517 	ldw	r3,20(sp)
   23e28:	d8000d15 	stw	zero,52(sp)
   23e2c:	10c5c83a 	sub	r2,r2,r3
   23e30:	00c9c83a 	sub	r4,zero,r3
   23e34:	d8800815 	stw	r2,32(sp)
   23e38:	d9000a15 	stw	r4,40(sp)
   23e3c:	003d9706 	br	2349c <_gp+0xfffe8338>
   23e40:	05adc83a 	sub	r22,zero,r22
   23e44:	dd800815 	stw	r22,32(sp)
   23e48:	002d883a 	mov	r22,zero
   23e4c:	003d8e06 	br	23488 <_gp+0xfffe8324>
   23e50:	d9000517 	ldw	r4,20(sp)
   23e54:	002d5f00 	call	2d5f0 <__floatsidf>
   23e58:	100d883a 	mov	r6,r2
   23e5c:	180f883a 	mov	r7,r3
   23e60:	a009883a 	mov	r4,r20
   23e64:	880b883a 	mov	r5,r17
   23e68:	002c1b00 	call	2c1b0 <__eqdf2>
   23e6c:	103d7126 	beq	r2,zero,23434 <_gp+0xfffe82d0>
   23e70:	d9c00517 	ldw	r7,20(sp)
   23e74:	39ffffc4 	addi	r7,r7,-1
   23e78:	d9c00515 	stw	r7,20(sp)
   23e7c:	003d6d06 	br	23434 <_gp+0xfffe82d0>
   23e80:	dd400a17 	ldw	r21,40(sp)
   23e84:	dd000817 	ldw	r20,32(sp)
   23e88:	0023883a 	mov	r17,zero
   23e8c:	003f4806 	br	23bb0 <_gp+0xfffe8a4c>
   23e90:	10e3c83a 	sub	r17,r2,r3
   23e94:	9448983a 	sll	r4,r18,r17
   23e98:	003d3206 	br	23364 <_gp+0xfffe8200>
   23e9c:	d8000e15 	stw	zero,56(sp)
   23ea0:	003d7506 	br	23478 <_gp+0xfffe8314>
   23ea4:	b005883a 	mov	r2,r22
   23ea8:	003f4506 	br	23bc0 <_gp+0xfffe8a5c>
   23eac:	dc000915 	stw	r16,36(sp)
   23eb0:	d9800a17 	ldw	r6,40(sp)
   23eb4:	d9400917 	ldw	r5,36(sp)
   23eb8:	e009883a 	mov	r4,fp
   23ebc:	0026f7c0 	call	26f7c <__pow5mult>
   23ec0:	1021883a 	mov	r16,r2
   23ec4:	003f5a06 	br	23c30 <_gp+0xfffe8acc>
   23ec8:	01c00044 	movi	r7,1
   23ecc:	d9c00b15 	stw	r7,44(sp)
   23ed0:	d8802217 	ldw	r2,136(sp)
   23ed4:	0081280e 	bge	zero,r2,24378 <_dtoa_r+0x11b0>
   23ed8:	100d883a 	mov	r6,r2
   23edc:	1021883a 	mov	r16,r2
   23ee0:	d8800c15 	stw	r2,48(sp)
   23ee4:	d8800615 	stw	r2,24(sp)
   23ee8:	003d8806 	br	2350c <_gp+0xfffe83a8>
   23eec:	d8800617 	ldw	r2,24(sp)
   23ef0:	00be9b16 	blt	zero,r2,23960 <_gp+0xfffe87fc>
   23ef4:	10010f1e 	bne	r2,zero,24334 <_dtoa_r+0x116c>
   23ef8:	880b883a 	mov	r5,r17
   23efc:	000d883a 	mov	r6,zero
   23f00:	01d00534 	movhi	r7,16404
   23f04:	8009883a 	mov	r4,r16
   23f08:	002c4080 	call	2c408 <__muldf3>
   23f0c:	900d883a 	mov	r6,r18
   23f10:	980f883a 	mov	r7,r19
   23f14:	1009883a 	mov	r4,r2
   23f18:	180b883a 	mov	r5,r3
   23f1c:	002c2380 	call	2c238 <__gedf2>
   23f20:	002b883a 	mov	r21,zero
   23f24:	0023883a 	mov	r17,zero
   23f28:	1000bf16 	blt	r2,zero,24228 <_dtoa_r+0x1060>
   23f2c:	d9802217 	ldw	r6,136(sp)
   23f30:	ddc00717 	ldw	r23,28(sp)
   23f34:	018c303a 	nor	r6,zero,r6
   23f38:	d9800515 	stw	r6,20(sp)
   23f3c:	a80b883a 	mov	r5,r21
   23f40:	e009883a 	mov	r4,fp
   23f44:	00269280 	call	26928 <_Bfree>
   23f48:	883e4926 	beq	r17,zero,23870 <_gp+0xfffe870c>
   23f4c:	003fad06 	br	23e04 <_gp+0xfffe8ca0>
   23f50:	d9c01117 	ldw	r7,68(sp)
   23f54:	3801bc26 	beq	r7,zero,24648 <_dtoa_r+0x1480>
   23f58:	10810cc4 	addi	r2,r2,1075
   23f5c:	dd400a17 	ldw	r21,40(sp)
   23f60:	dd000817 	ldw	r20,32(sp)
   23f64:	003f0a06 	br	23b90 <_gp+0xfffe8a2c>
   23f68:	00800704 	movi	r2,28
   23f6c:	d9000817 	ldw	r4,32(sp)
   23f70:	a0a9883a 	add	r20,r20,r2
   23f74:	b0ad883a 	add	r22,r22,r2
   23f78:	2089883a 	add	r4,r4,r2
   23f7c:	d9000815 	stw	r4,32(sp)
   23f80:	003f5106 	br	23cc8 <_gp+0xfffe8b64>
   23f84:	d8c00317 	ldw	r3,12(sp)
   23f88:	b8c1fc0e 	bge	r23,r3,2477c <_dtoa_r+0x15b4>
   23f8c:	0027883a 	mov	r19,zero
   23f90:	b805883a 	mov	r2,r23
   23f94:	003f3e06 	br	23c90 <_gp+0xfffe8b2c>
   23f98:	880b883a 	mov	r5,r17
   23f9c:	e009883a 	mov	r4,fp
   23fa0:	000f883a 	mov	r7,zero
   23fa4:	01800284 	movi	r6,10
   23fa8:	00269500 	call	26950 <__multadd>
   23fac:	d9000c17 	ldw	r4,48(sp)
   23fb0:	1023883a 	mov	r17,r2
   23fb4:	0102040e 	bge	zero,r4,247c8 <_dtoa_r+0x1600>
   23fb8:	d9000615 	stw	r4,24(sp)
   23fbc:	0500050e 	bge	zero,r20,23fd4 <_dtoa_r+0xe0c>
   23fc0:	880b883a 	mov	r5,r17
   23fc4:	a00d883a 	mov	r6,r20
   23fc8:	e009883a 	mov	r4,fp
   23fcc:	00270bc0 	call	270bc <__lshift>
   23fd0:	1023883a 	mov	r17,r2
   23fd4:	9801241e 	bne	r19,zero,24468 <_dtoa_r+0x12a0>
   23fd8:	8829883a 	mov	r20,r17
   23fdc:	d9000617 	ldw	r4,24(sp)
   23fe0:	dcc00717 	ldw	r19,28(sp)
   23fe4:	9480004c 	andi	r18,r18,1
   23fe8:	20bfffc4 	addi	r2,r4,-1
   23fec:	9885883a 	add	r2,r19,r2
   23ff0:	d8800415 	stw	r2,16(sp)
   23ff4:	dc800615 	stw	r18,24(sp)
   23ff8:	a80b883a 	mov	r5,r21
   23ffc:	8009883a 	mov	r4,r16
   24000:	0022fa00 	call	22fa0 <quorem>
   24004:	880b883a 	mov	r5,r17
   24008:	8009883a 	mov	r4,r16
   2400c:	102f883a 	mov	r23,r2
   24010:	00272040 	call	27204 <__mcmp>
   24014:	a80b883a 	mov	r5,r21
   24018:	a00d883a 	mov	r6,r20
   2401c:	e009883a 	mov	r4,fp
   24020:	102d883a 	mov	r22,r2
   24024:	00272640 	call	27264 <__mdiff>
   24028:	1007883a 	mov	r3,r2
   2402c:	10800317 	ldw	r2,12(r2)
   24030:	bc800c04 	addi	r18,r23,48
   24034:	180b883a 	mov	r5,r3
   24038:	10004e1e 	bne	r2,zero,24174 <_dtoa_r+0xfac>
   2403c:	8009883a 	mov	r4,r16
   24040:	d8c01615 	stw	r3,88(sp)
   24044:	00272040 	call	27204 <__mcmp>
   24048:	d8c01617 	ldw	r3,88(sp)
   2404c:	e009883a 	mov	r4,fp
   24050:	d8801615 	stw	r2,88(sp)
   24054:	180b883a 	mov	r5,r3
   24058:	00269280 	call	26928 <_Bfree>
   2405c:	d8801617 	ldw	r2,88(sp)
   24060:	1000041e 	bne	r2,zero,24074 <_dtoa_r+0xeac>
   24064:	d9800317 	ldw	r6,12(sp)
   24068:	3000021e 	bne	r6,zero,24074 <_dtoa_r+0xeac>
   2406c:	d8c00617 	ldw	r3,24(sp)
   24070:	18003726 	beq	r3,zero,24150 <_dtoa_r+0xf88>
   24074:	b0002016 	blt	r22,zero,240f8 <_dtoa_r+0xf30>
   24078:	b000041e 	bne	r22,zero,2408c <_dtoa_r+0xec4>
   2407c:	d9000317 	ldw	r4,12(sp)
   24080:	2000021e 	bne	r4,zero,2408c <_dtoa_r+0xec4>
   24084:	d8c00617 	ldw	r3,24(sp)
   24088:	18001b26 	beq	r3,zero,240f8 <_dtoa_r+0xf30>
   2408c:	00810716 	blt	zero,r2,244ac <_dtoa_r+0x12e4>
   24090:	d8c00417 	ldw	r3,16(sp)
   24094:	9d800044 	addi	r22,r19,1
   24098:	9c800005 	stb	r18,0(r19)
   2409c:	b02f883a 	mov	r23,r22
   240a0:	98c10626 	beq	r19,r3,244bc <_dtoa_r+0x12f4>
   240a4:	800b883a 	mov	r5,r16
   240a8:	000f883a 	mov	r7,zero
   240ac:	01800284 	movi	r6,10
   240b0:	e009883a 	mov	r4,fp
   240b4:	00269500 	call	26950 <__multadd>
   240b8:	1021883a 	mov	r16,r2
   240bc:	000f883a 	mov	r7,zero
   240c0:	01800284 	movi	r6,10
   240c4:	880b883a 	mov	r5,r17
   240c8:	e009883a 	mov	r4,fp
   240cc:	8d002526 	beq	r17,r20,24164 <_dtoa_r+0xf9c>
   240d0:	00269500 	call	26950 <__multadd>
   240d4:	a00b883a 	mov	r5,r20
   240d8:	000f883a 	mov	r7,zero
   240dc:	01800284 	movi	r6,10
   240e0:	e009883a 	mov	r4,fp
   240e4:	1023883a 	mov	r17,r2
   240e8:	00269500 	call	26950 <__multadd>
   240ec:	1029883a 	mov	r20,r2
   240f0:	b027883a 	mov	r19,r22
   240f4:	003fc006 	br	23ff8 <_gp+0xfffe8e94>
   240f8:	9011883a 	mov	r8,r18
   240fc:	00800e0e 	bge	zero,r2,24138 <_dtoa_r+0xf70>
   24100:	800b883a 	mov	r5,r16
   24104:	01800044 	movi	r6,1
   24108:	e009883a 	mov	r4,fp
   2410c:	da001715 	stw	r8,92(sp)
   24110:	00270bc0 	call	270bc <__lshift>
   24114:	a80b883a 	mov	r5,r21
   24118:	1009883a 	mov	r4,r2
   2411c:	1021883a 	mov	r16,r2
   24120:	00272040 	call	27204 <__mcmp>
   24124:	da001717 	ldw	r8,92(sp)
   24128:	0081960e 	bge	zero,r2,24784 <_dtoa_r+0x15bc>
   2412c:	00800e44 	movi	r2,57
   24130:	40817026 	beq	r8,r2,246f4 <_dtoa_r+0x152c>
   24134:	ba000c44 	addi	r8,r23,49
   24138:	8825883a 	mov	r18,r17
   2413c:	9dc00044 	addi	r23,r19,1
   24140:	9a000005 	stb	r8,0(r19)
   24144:	a023883a 	mov	r17,r20
   24148:	dc000915 	stw	r16,36(sp)
   2414c:	003f2406 	br	23de0 <_gp+0xfffe8c7c>
   24150:	00800e44 	movi	r2,57
   24154:	9011883a 	mov	r8,r18
   24158:	90816626 	beq	r18,r2,246f4 <_dtoa_r+0x152c>
   2415c:	05bff516 	blt	zero,r22,24134 <_gp+0xfffe8fd0>
   24160:	003ff506 	br	24138 <_gp+0xfffe8fd4>
   24164:	00269500 	call	26950 <__multadd>
   24168:	1023883a 	mov	r17,r2
   2416c:	1029883a 	mov	r20,r2
   24170:	003fdf06 	br	240f0 <_gp+0xfffe8f8c>
   24174:	e009883a 	mov	r4,fp
   24178:	00269280 	call	26928 <_Bfree>
   2417c:	00800044 	movi	r2,1
   24180:	003fbc06 	br	24074 <_gp+0xfffe8f10>
   24184:	a80b883a 	mov	r5,r21
   24188:	8009883a 	mov	r4,r16
   2418c:	00272040 	call	27204 <__mcmp>
   24190:	103edb0e 	bge	r2,zero,23d00 <_gp+0xfffe8b9c>
   24194:	800b883a 	mov	r5,r16
   24198:	000f883a 	mov	r7,zero
   2419c:	01800284 	movi	r6,10
   241a0:	e009883a 	mov	r4,fp
   241a4:	00269500 	call	26950 <__multadd>
   241a8:	1021883a 	mov	r16,r2
   241ac:	d8800517 	ldw	r2,20(sp)
   241b0:	d8c00b17 	ldw	r3,44(sp)
   241b4:	10bfffc4 	addi	r2,r2,-1
   241b8:	d8800515 	stw	r2,20(sp)
   241bc:	183f761e 	bne	r3,zero,23f98 <_gp+0xfffe8e34>
   241c0:	d9000c17 	ldw	r4,48(sp)
   241c4:	0101730e 	bge	zero,r4,24794 <_dtoa_r+0x15cc>
   241c8:	d9000615 	stw	r4,24(sp)
   241cc:	003ed006 	br	23d10 <_gp+0xfffe8bac>
   241d0:	00800084 	movi	r2,2
   241d4:	3081861e 	bne	r6,r2,247f0 <_dtoa_r+0x1628>
   241d8:	d8000b15 	stw	zero,44(sp)
   241dc:	003f3c06 	br	23ed0 <_gp+0xfffe8d6c>
   241e0:	dc000917 	ldw	r16,36(sp)
   241e4:	003e9206 	br	23c30 <_gp+0xfffe8acc>
   241e8:	d9c00317 	ldw	r7,12(sp)
   241ec:	00800084 	movi	r2,2
   241f0:	11fec50e 	bge	r2,r7,23d08 <_gp+0xfffe8ba4>
   241f4:	d9000617 	ldw	r4,24(sp)
   241f8:	20013c1e 	bne	r4,zero,246ec <_dtoa_r+0x1524>
   241fc:	a80b883a 	mov	r5,r21
   24200:	000f883a 	mov	r7,zero
   24204:	01800144 	movi	r6,5
   24208:	e009883a 	mov	r4,fp
   2420c:	00269500 	call	26950 <__multadd>
   24210:	100b883a 	mov	r5,r2
   24214:	8009883a 	mov	r4,r16
   24218:	102b883a 	mov	r21,r2
   2421c:	00272040 	call	27204 <__mcmp>
   24220:	dc000915 	stw	r16,36(sp)
   24224:	00bf410e 	bge	zero,r2,23f2c <_gp+0xfffe8dc8>
   24228:	d9c00717 	ldw	r7,28(sp)
   2422c:	00800c44 	movi	r2,49
   24230:	38800005 	stb	r2,0(r7)
   24234:	d8800517 	ldw	r2,20(sp)
   24238:	3dc00044 	addi	r23,r7,1
   2423c:	10800044 	addi	r2,r2,1
   24240:	d8800515 	stw	r2,20(sp)
   24244:	003f3d06 	br	23f3c <_gp+0xfffe8dd8>
   24248:	d9800517 	ldw	r6,20(sp)
   2424c:	d9c00717 	ldw	r7,28(sp)
   24250:	00800c44 	movi	r2,49
   24254:	31800044 	addi	r6,r6,1
   24258:	d9800515 	stw	r6,20(sp)
   2425c:	38800005 	stb	r2,0(r7)
   24260:	003edf06 	br	23de0 <_gp+0xfffe8c7c>
   24264:	d8000b15 	stw	zero,44(sp)
   24268:	003c9f06 	br	234e8 <_gp+0xfffe8384>
   2426c:	903e7e1e 	bne	r18,zero,23c68 <_gp+0xfffe8b04>
   24270:	00800434 	movhi	r2,16
   24274:	10bfffc4 	addi	r2,r2,-1
   24278:	9884703a 	and	r2,r19,r2
   2427c:	1000ea1e 	bne	r2,zero,24628 <_dtoa_r+0x1460>
   24280:	9cdffc2c 	andhi	r19,r19,32752
   24284:	9800e826 	beq	r19,zero,24628 <_dtoa_r+0x1460>
   24288:	d9c00817 	ldw	r7,32(sp)
   2428c:	b5800044 	addi	r22,r22,1
   24290:	04c00044 	movi	r19,1
   24294:	39c00044 	addi	r7,r7,1
   24298:	d9c00815 	stw	r7,32(sp)
   2429c:	d8800d17 	ldw	r2,52(sp)
   242a0:	103e721e 	bne	r2,zero,23c6c <_gp+0xfffe8b08>
   242a4:	00800044 	movi	r2,1
   242a8:	003e7906 	br	23c90 <_gp+0xfffe8b2c>
   242ac:	8009883a 	mov	r4,r16
   242b0:	002d5f00 	call	2d5f0 <__floatsidf>
   242b4:	d9800f17 	ldw	r6,60(sp)
   242b8:	d9c01017 	ldw	r7,64(sp)
   242bc:	1009883a 	mov	r4,r2
   242c0:	180b883a 	mov	r5,r3
   242c4:	002c4080 	call	2c408 <__muldf3>
   242c8:	000d883a 	mov	r6,zero
   242cc:	01d00734 	movhi	r7,16412
   242d0:	1009883a 	mov	r4,r2
   242d4:	180b883a 	mov	r5,r3
   242d8:	002af340 	call	2af34 <__adddf3>
   242dc:	047f3034 	movhi	r17,64704
   242e0:	1021883a 	mov	r16,r2
   242e4:	1c63883a 	add	r17,r3,r17
   242e8:	d9000f17 	ldw	r4,60(sp)
   242ec:	d9401017 	ldw	r5,64(sp)
   242f0:	000d883a 	mov	r6,zero
   242f4:	01d00534 	movhi	r7,16404
   242f8:	002cc740 	call	2cc74 <__subdf3>
   242fc:	800d883a 	mov	r6,r16
   24300:	880f883a 	mov	r7,r17
   24304:	1009883a 	mov	r4,r2
   24308:	180b883a 	mov	r5,r3
   2430c:	102b883a 	mov	r21,r2
   24310:	1829883a 	mov	r20,r3
   24314:	002c2380 	call	2c238 <__gedf2>
   24318:	00806c16 	blt	zero,r2,244cc <_dtoa_r+0x1304>
   2431c:	89e0003c 	xorhi	r7,r17,32768
   24320:	800d883a 	mov	r6,r16
   24324:	a809883a 	mov	r4,r21
   24328:	a00b883a 	mov	r5,r20
   2432c:	002c3140 	call	2c314 <__ledf2>
   24330:	103d7e0e 	bge	r2,zero,2392c <_gp+0xfffe87c8>
   24334:	002b883a 	mov	r21,zero
   24338:	0023883a 	mov	r17,zero
   2433c:	003efb06 	br	23f2c <_gp+0xfffe8dc8>
   24340:	d8800717 	ldw	r2,28(sp)
   24344:	003bd006 	br	23288 <_gp+0xfffe8124>
   24348:	d9000a17 	ldw	r4,40(sp)
   2434c:	d9800d17 	ldw	r6,52(sp)
   24350:	dd400a15 	stw	r21,40(sp)
   24354:	a905c83a 	sub	r2,r21,r4
   24358:	308d883a 	add	r6,r6,r2
   2435c:	d9800d15 	stw	r6,52(sp)
   24360:	002b883a 	mov	r21,zero
   24364:	003e0606 	br	23b80 <_gp+0xfffe8a1c>
   24368:	9023883a 	mov	r17,r18
   2436c:	9829883a 	mov	r20,r19
   24370:	04000084 	movi	r16,2
   24374:	003c9206 	br	235c0 <_gp+0xfffe845c>
   24378:	04000044 	movi	r16,1
   2437c:	dc000c15 	stw	r16,48(sp)
   24380:	dc000615 	stw	r16,24(sp)
   24384:	dc002215 	stw	r16,136(sp)
   24388:	e0001115 	stw	zero,68(fp)
   2438c:	000b883a 	mov	r5,zero
   24390:	003c6906 	br	23538 <_gp+0xfffe83d4>
   24394:	3021883a 	mov	r16,r6
   24398:	003ffb06 	br	24388 <_gp+0xfffe9224>
   2439c:	1000021e 	bne	r2,zero,243a8 <_dtoa_r+0x11e0>
   243a0:	4200004c 	andi	r8,r8,1
   243a4:	403e7d1e 	bne	r8,zero,23d9c <_gp+0xfffe8c38>
   243a8:	01000c04 	movi	r4,48
   243ac:	00000106 	br	243b4 <_dtoa_r+0x11ec>
   243b0:	102f883a 	mov	r23,r2
   243b4:	b8bfffc4 	addi	r2,r23,-1
   243b8:	10c00007 	ldb	r3,0(r2)
   243bc:	193ffc26 	beq	r3,r4,243b0 <_gp+0xfffe924c>
   243c0:	003e8706 	br	23de0 <_gp+0xfffe8c7c>
   243c4:	d8800517 	ldw	r2,20(sp)
   243c8:	00a3c83a 	sub	r17,zero,r2
   243cc:	8800a426 	beq	r17,zero,24660 <_dtoa_r+0x1498>
   243d0:	888003cc 	andi	r2,r17,15
   243d4:	100490fa 	slli	r2,r2,3
   243d8:	00c000f4 	movhi	r3,3
   243dc:	18c43e04 	addi	r3,r3,4344
   243e0:	1885883a 	add	r2,r3,r2
   243e4:	11800017 	ldw	r6,0(r2)
   243e8:	11c00117 	ldw	r7,4(r2)
   243ec:	9009883a 	mov	r4,r18
   243f0:	980b883a 	mov	r5,r19
   243f4:	8823d13a 	srai	r17,r17,4
   243f8:	002c4080 	call	2c408 <__muldf3>
   243fc:	d8800f15 	stw	r2,60(sp)
   24400:	d8c01015 	stw	r3,64(sp)
   24404:	8800e826 	beq	r17,zero,247a8 <_dtoa_r+0x15e0>
   24408:	050000f4 	movhi	r20,3
   2440c:	a5043404 	addi	r20,r20,4304
   24410:	04000084 	movi	r16,2
   24414:	8980004c 	andi	r6,r17,1
   24418:	1009883a 	mov	r4,r2
   2441c:	8823d07a 	srai	r17,r17,1
   24420:	180b883a 	mov	r5,r3
   24424:	30000426 	beq	r6,zero,24438 <_dtoa_r+0x1270>
   24428:	a1800017 	ldw	r6,0(r20)
   2442c:	a1c00117 	ldw	r7,4(r20)
   24430:	84000044 	addi	r16,r16,1
   24434:	002c4080 	call	2c408 <__muldf3>
   24438:	a5000204 	addi	r20,r20,8
   2443c:	883ff51e 	bne	r17,zero,24414 <_gp+0xfffe92b0>
   24440:	d8800f15 	stw	r2,60(sp)
   24444:	d8c01015 	stw	r3,64(sp)
   24448:	003c7606 	br	23624 <_gp+0xfffe84c0>
   2444c:	00c00c04 	movi	r3,48
   24450:	10c00005 	stb	r3,0(r2)
   24454:	d8c00517 	ldw	r3,20(sp)
   24458:	bd3fffc3 	ldbu	r20,-1(r23)
   2445c:	18c00044 	addi	r3,r3,1
   24460:	d8c00515 	stw	r3,20(sp)
   24464:	003db906 	br	23b4c <_gp+0xfffe89e8>
   24468:	89400117 	ldw	r5,4(r17)
   2446c:	e009883a 	mov	r4,fp
   24470:	00268800 	call	26880 <_Balloc>
   24474:	89800417 	ldw	r6,16(r17)
   24478:	89400304 	addi	r5,r17,12
   2447c:	11000304 	addi	r4,r2,12
   24480:	31800084 	addi	r6,r6,2
   24484:	318d883a 	add	r6,r6,r6
   24488:	318d883a 	add	r6,r6,r6
   2448c:	1027883a 	mov	r19,r2
   24490:	00264b40 	call	264b4 <memcpy>
   24494:	01800044 	movi	r6,1
   24498:	980b883a 	mov	r5,r19
   2449c:	e009883a 	mov	r4,fp
   244a0:	00270bc0 	call	270bc <__lshift>
   244a4:	1029883a 	mov	r20,r2
   244a8:	003ecc06 	br	23fdc <_gp+0xfffe8e78>
   244ac:	00800e44 	movi	r2,57
   244b0:	90809026 	beq	r18,r2,246f4 <_dtoa_r+0x152c>
   244b4:	92000044 	addi	r8,r18,1
   244b8:	003f1f06 	br	24138 <_gp+0xfffe8fd4>
   244bc:	9011883a 	mov	r8,r18
   244c0:	8825883a 	mov	r18,r17
   244c4:	a023883a 	mov	r17,r20
   244c8:	003e2906 	br	23d70 <_gp+0xfffe8c0c>
   244cc:	002b883a 	mov	r21,zero
   244d0:	0023883a 	mov	r17,zero
   244d4:	003f5406 	br	24228 <_gp+0xfffe90c4>
   244d8:	61bfffc4 	addi	r6,r12,-1
   244dc:	300490fa 	slli	r2,r6,3
   244e0:	00c000f4 	movhi	r3,3
   244e4:	18c43e04 	addi	r3,r3,4344
   244e8:	1885883a 	add	r2,r3,r2
   244ec:	11000017 	ldw	r4,0(r2)
   244f0:	11400117 	ldw	r5,4(r2)
   244f4:	d8800717 	ldw	r2,28(sp)
   244f8:	880f883a 	mov	r7,r17
   244fc:	d9801215 	stw	r6,72(sp)
   24500:	800d883a 	mov	r6,r16
   24504:	db001615 	stw	r12,88(sp)
   24508:	15c00044 	addi	r23,r2,1
   2450c:	002c4080 	call	2c408 <__muldf3>
   24510:	d9401017 	ldw	r5,64(sp)
   24514:	d9000f17 	ldw	r4,60(sp)
   24518:	d8c01515 	stw	r3,84(sp)
   2451c:	d8801415 	stw	r2,80(sp)
   24520:	002d5700 	call	2d570 <__fixdfsi>
   24524:	1009883a 	mov	r4,r2
   24528:	1021883a 	mov	r16,r2
   2452c:	002d5f00 	call	2d5f0 <__floatsidf>
   24530:	d9000f17 	ldw	r4,60(sp)
   24534:	d9401017 	ldw	r5,64(sp)
   24538:	100d883a 	mov	r6,r2
   2453c:	180f883a 	mov	r7,r3
   24540:	002cc740 	call	2cc74 <__subdf3>
   24544:	1829883a 	mov	r20,r3
   24548:	d8c00717 	ldw	r3,28(sp)
   2454c:	84000c04 	addi	r16,r16,48
   24550:	1023883a 	mov	r17,r2
   24554:	1c000005 	stb	r16,0(r3)
   24558:	db001617 	ldw	r12,88(sp)
   2455c:	00800044 	movi	r2,1
   24560:	60802226 	beq	r12,r2,245ec <_dtoa_r+0x1424>
   24564:	d9c00717 	ldw	r7,28(sp)
   24568:	8805883a 	mov	r2,r17
   2456c:	b82b883a 	mov	r21,r23
   24570:	3b19883a 	add	r12,r7,r12
   24574:	6023883a 	mov	r17,r12
   24578:	a007883a 	mov	r3,r20
   2457c:	dc800f15 	stw	r18,60(sp)
   24580:	000d883a 	mov	r6,zero
   24584:	01d00934 	movhi	r7,16420
   24588:	1009883a 	mov	r4,r2
   2458c:	180b883a 	mov	r5,r3
   24590:	002c4080 	call	2c408 <__muldf3>
   24594:	180b883a 	mov	r5,r3
   24598:	1009883a 	mov	r4,r2
   2459c:	1829883a 	mov	r20,r3
   245a0:	1025883a 	mov	r18,r2
   245a4:	002d5700 	call	2d570 <__fixdfsi>
   245a8:	1009883a 	mov	r4,r2
   245ac:	1021883a 	mov	r16,r2
   245b0:	002d5f00 	call	2d5f0 <__floatsidf>
   245b4:	100d883a 	mov	r6,r2
   245b8:	180f883a 	mov	r7,r3
   245bc:	9009883a 	mov	r4,r18
   245c0:	a00b883a 	mov	r5,r20
   245c4:	84000c04 	addi	r16,r16,48
   245c8:	002cc740 	call	2cc74 <__subdf3>
   245cc:	ad400044 	addi	r21,r21,1
   245d0:	ac3fffc5 	stb	r16,-1(r21)
   245d4:	ac7fea1e 	bne	r21,r17,24580 <_gp+0xfffe941c>
   245d8:	1023883a 	mov	r17,r2
   245dc:	d8801217 	ldw	r2,72(sp)
   245e0:	dc800f17 	ldw	r18,60(sp)
   245e4:	1829883a 	mov	r20,r3
   245e8:	b8af883a 	add	r23,r23,r2
   245ec:	d9001417 	ldw	r4,80(sp)
   245f0:	d9401517 	ldw	r5,84(sp)
   245f4:	000d883a 	mov	r6,zero
   245f8:	01cff834 	movhi	r7,16352
   245fc:	002af340 	call	2af34 <__adddf3>
   24600:	880d883a 	mov	r6,r17
   24604:	a00f883a 	mov	r7,r20
   24608:	1009883a 	mov	r4,r2
   2460c:	180b883a 	mov	r5,r3
   24610:	002c3140 	call	2c314 <__ledf2>
   24614:	10003e0e 	bge	r2,zero,24710 <_dtoa_r+0x1548>
   24618:	d9001317 	ldw	r4,76(sp)
   2461c:	bd3fffc3 	ldbu	r20,-1(r23)
   24620:	d9000515 	stw	r4,20(sp)
   24624:	003d3b06 	br	23b14 <_gp+0xfffe89b0>
   24628:	0027883a 	mov	r19,zero
   2462c:	003f1b06 	br	2429c <_gp+0xfffe9138>
   24630:	d8800817 	ldw	r2,32(sp)
   24634:	11e9c83a 	sub	r20,r2,r7
   24638:	0005883a 	mov	r2,zero
   2463c:	003d5406 	br	23b90 <_gp+0xfffe8a2c>
   24640:	00800044 	movi	r2,1
   24644:	003dc706 	br	23d64 <_gp+0xfffe8c00>
   24648:	d8c00217 	ldw	r3,8(sp)
   2464c:	00800d84 	movi	r2,54
   24650:	dd400a17 	ldw	r21,40(sp)
   24654:	10c5c83a 	sub	r2,r2,r3
   24658:	dd000817 	ldw	r20,32(sp)
   2465c:	003d4c06 	br	23b90 <_gp+0xfffe8a2c>
   24660:	dc800f15 	stw	r18,60(sp)
   24664:	dcc01015 	stw	r19,64(sp)
   24668:	04000084 	movi	r16,2
   2466c:	003bed06 	br	23624 <_gp+0xfffe84c0>
   24670:	d9000617 	ldw	r4,24(sp)
   24674:	203f0d26 	beq	r4,zero,242ac <_gp+0xfffe9148>
   24678:	d9800c17 	ldw	r6,48(sp)
   2467c:	01bcab0e 	bge	zero,r6,2392c <_gp+0xfffe87c8>
   24680:	d9401017 	ldw	r5,64(sp)
   24684:	d9000f17 	ldw	r4,60(sp)
   24688:	000d883a 	mov	r6,zero
   2468c:	01d00934 	movhi	r7,16420
   24690:	002c4080 	call	2c408 <__muldf3>
   24694:	81000044 	addi	r4,r16,1
   24698:	d8800f15 	stw	r2,60(sp)
   2469c:	d8c01015 	stw	r3,64(sp)
   246a0:	002d5f00 	call	2d5f0 <__floatsidf>
   246a4:	d9800f17 	ldw	r6,60(sp)
   246a8:	d9c01017 	ldw	r7,64(sp)
   246ac:	1009883a 	mov	r4,r2
   246b0:	180b883a 	mov	r5,r3
   246b4:	002c4080 	call	2c408 <__muldf3>
   246b8:	01d00734 	movhi	r7,16412
   246bc:	000d883a 	mov	r6,zero
   246c0:	1009883a 	mov	r4,r2
   246c4:	180b883a 	mov	r5,r3
   246c8:	002af340 	call	2af34 <__adddf3>
   246cc:	d9c00517 	ldw	r7,20(sp)
   246d0:	047f3034 	movhi	r17,64704
   246d4:	1021883a 	mov	r16,r2
   246d8:	39ffffc4 	addi	r7,r7,-1
   246dc:	d9c01315 	stw	r7,76(sp)
   246e0:	1c63883a 	add	r17,r3,r17
   246e4:	db000c17 	ldw	r12,48(sp)
   246e8:	003bea06 	br	23694 <_gp+0xfffe8530>
   246ec:	dc000915 	stw	r16,36(sp)
   246f0:	003e0e06 	br	23f2c <_gp+0xfffe8dc8>
   246f4:	01000e44 	movi	r4,57
   246f8:	8825883a 	mov	r18,r17
   246fc:	9dc00044 	addi	r23,r19,1
   24700:	99000005 	stb	r4,0(r19)
   24704:	a023883a 	mov	r17,r20
   24708:	dc000915 	stw	r16,36(sp)
   2470c:	003da406 	br	23da0 <_gp+0xfffe8c3c>
   24710:	d9801417 	ldw	r6,80(sp)
   24714:	d9c01517 	ldw	r7,84(sp)
   24718:	0009883a 	mov	r4,zero
   2471c:	014ff834 	movhi	r5,16352
   24720:	002cc740 	call	2cc74 <__subdf3>
   24724:	880d883a 	mov	r6,r17
   24728:	a00f883a 	mov	r7,r20
   2472c:	1009883a 	mov	r4,r2
   24730:	180b883a 	mov	r5,r3
   24734:	002c2380 	call	2c238 <__gedf2>
   24738:	00bc7c0e 	bge	zero,r2,2392c <_gp+0xfffe87c8>
   2473c:	01000c04 	movi	r4,48
   24740:	00000106 	br	24748 <_dtoa_r+0x1580>
   24744:	102f883a 	mov	r23,r2
   24748:	b8bfffc4 	addi	r2,r23,-1
   2474c:	10c00007 	ldb	r3,0(r2)
   24750:	193ffc26 	beq	r3,r4,24744 <_gp+0xfffe95e0>
   24754:	d9801317 	ldw	r6,76(sp)
   24758:	d9800515 	stw	r6,20(sp)
   2475c:	003c4406 	br	23870 <_gp+0xfffe870c>
   24760:	d9801317 	ldw	r6,76(sp)
   24764:	d9800515 	stw	r6,20(sp)
   24768:	003cea06 	br	23b14 <_gp+0xfffe89b0>
   2476c:	dd800f17 	ldw	r22,60(sp)
   24770:	dcc01017 	ldw	r19,64(sp)
   24774:	dc801217 	ldw	r18,72(sp)
   24778:	003c6c06 	br	2392c <_gp+0xfffe87c8>
   2477c:	903e031e 	bne	r18,zero,23f8c <_gp+0xfffe8e28>
   24780:	003ebb06 	br	24270 <_gp+0xfffe910c>
   24784:	103e6c1e 	bne	r2,zero,24138 <_gp+0xfffe8fd4>
   24788:	4080004c 	andi	r2,r8,1
   2478c:	103e6a26 	beq	r2,zero,24138 <_gp+0xfffe8fd4>
   24790:	003e6606 	br	2412c <_gp+0xfffe8fc8>
   24794:	d8c00317 	ldw	r3,12(sp)
   24798:	00800084 	movi	r2,2
   2479c:	10c02916 	blt	r2,r3,24844 <_dtoa_r+0x167c>
   247a0:	d9000c17 	ldw	r4,48(sp)
   247a4:	003e8806 	br	241c8 <_gp+0xfffe9064>
   247a8:	04000084 	movi	r16,2
   247ac:	003b9d06 	br	23624 <_gp+0xfffe84c0>
   247b0:	d9001317 	ldw	r4,76(sp)
   247b4:	d9000515 	stw	r4,20(sp)
   247b8:	003cd606 	br	23b14 <_gp+0xfffe89b0>
   247bc:	d8801317 	ldw	r2,76(sp)
   247c0:	d8800515 	stw	r2,20(sp)
   247c4:	003c2a06 	br	23870 <_gp+0xfffe870c>
   247c8:	d9800317 	ldw	r6,12(sp)
   247cc:	00800084 	movi	r2,2
   247d0:	11801516 	blt	r2,r6,24828 <_dtoa_r+0x1660>
   247d4:	d9c00c17 	ldw	r7,48(sp)
   247d8:	d9c00615 	stw	r7,24(sp)
   247dc:	003df706 	br	23fbc <_gp+0xfffe8e58>
   247e0:	193d3926 	beq	r3,r4,23cc8 <_gp+0xfffe8b64>
   247e4:	00c00f04 	movi	r3,60
   247e8:	1885c83a 	sub	r2,r3,r2
   247ec:	003ddf06 	br	23f6c <_gp+0xfffe8e08>
   247f0:	e009883a 	mov	r4,fp
   247f4:	e0001115 	stw	zero,68(fp)
   247f8:	000b883a 	mov	r5,zero
   247fc:	00268800 	call	26880 <_Balloc>
   24800:	d8800715 	stw	r2,28(sp)
   24804:	d8c00717 	ldw	r3,28(sp)
   24808:	00bfffc4 	movi	r2,-1
   2480c:	01000044 	movi	r4,1
   24810:	d8800c15 	stw	r2,48(sp)
   24814:	e0c01015 	stw	r3,64(fp)
   24818:	d9000b15 	stw	r4,44(sp)
   2481c:	d8800615 	stw	r2,24(sp)
   24820:	d8002215 	stw	zero,136(sp)
   24824:	003c4106 	br	2392c <_gp+0xfffe87c8>
   24828:	d8c00c17 	ldw	r3,48(sp)
   2482c:	d8c00615 	stw	r3,24(sp)
   24830:	003e7006 	br	241f4 <_gp+0xfffe9090>
   24834:	04400044 	movi	r17,1
   24838:	003b2006 	br	234bc <_gp+0xfffe8358>
   2483c:	000b883a 	mov	r5,zero
   24840:	003b3d06 	br	23538 <_gp+0xfffe83d4>
   24844:	d8800c17 	ldw	r2,48(sp)
   24848:	d8800615 	stw	r2,24(sp)
   2484c:	003e6906 	br	241f4 <_gp+0xfffe9090>

00024850 <__sflush_r>:
   24850:	2880030b 	ldhu	r2,12(r5)
   24854:	defffb04 	addi	sp,sp,-20
   24858:	dcc00315 	stw	r19,12(sp)
   2485c:	dc400115 	stw	r17,4(sp)
   24860:	dfc00415 	stw	ra,16(sp)
   24864:	dc800215 	stw	r18,8(sp)
   24868:	dc000015 	stw	r16,0(sp)
   2486c:	10c0020c 	andi	r3,r2,8
   24870:	2823883a 	mov	r17,r5
   24874:	2027883a 	mov	r19,r4
   24878:	1800311e 	bne	r3,zero,24940 <__sflush_r+0xf0>
   2487c:	28c00117 	ldw	r3,4(r5)
   24880:	10820014 	ori	r2,r2,2048
   24884:	2880030d 	sth	r2,12(r5)
   24888:	00c04b0e 	bge	zero,r3,249b8 <__sflush_r+0x168>
   2488c:	8a000a17 	ldw	r8,40(r17)
   24890:	40002326 	beq	r8,zero,24920 <__sflush_r+0xd0>
   24894:	9c000017 	ldw	r16,0(r19)
   24898:	10c4000c 	andi	r3,r2,4096
   2489c:	98000015 	stw	zero,0(r19)
   248a0:	18004826 	beq	r3,zero,249c4 <__sflush_r+0x174>
   248a4:	89801417 	ldw	r6,80(r17)
   248a8:	10c0010c 	andi	r3,r2,4
   248ac:	18000626 	beq	r3,zero,248c8 <__sflush_r+0x78>
   248b0:	88c00117 	ldw	r3,4(r17)
   248b4:	88800c17 	ldw	r2,48(r17)
   248b8:	30cdc83a 	sub	r6,r6,r3
   248bc:	10000226 	beq	r2,zero,248c8 <__sflush_r+0x78>
   248c0:	88800f17 	ldw	r2,60(r17)
   248c4:	308dc83a 	sub	r6,r6,r2
   248c8:	89400717 	ldw	r5,28(r17)
   248cc:	000f883a 	mov	r7,zero
   248d0:	9809883a 	mov	r4,r19
   248d4:	403ee83a 	callr	r8
   248d8:	00ffffc4 	movi	r3,-1
   248dc:	10c04426 	beq	r2,r3,249f0 <__sflush_r+0x1a0>
   248e0:	88c0030b 	ldhu	r3,12(r17)
   248e4:	89000417 	ldw	r4,16(r17)
   248e8:	88000115 	stw	zero,4(r17)
   248ec:	197dffcc 	andi	r5,r3,63487
   248f0:	8940030d 	sth	r5,12(r17)
   248f4:	89000015 	stw	r4,0(r17)
   248f8:	18c4000c 	andi	r3,r3,4096
   248fc:	18002c1e 	bne	r3,zero,249b0 <__sflush_r+0x160>
   24900:	89400c17 	ldw	r5,48(r17)
   24904:	9c000015 	stw	r16,0(r19)
   24908:	28000526 	beq	r5,zero,24920 <__sflush_r+0xd0>
   2490c:	88801004 	addi	r2,r17,64
   24910:	28800226 	beq	r5,r2,2491c <__sflush_r+0xcc>
   24914:	9809883a 	mov	r4,r19
   24918:	0024fcc0 	call	24fcc <_free_r>
   2491c:	88000c15 	stw	zero,48(r17)
   24920:	0005883a 	mov	r2,zero
   24924:	dfc00417 	ldw	ra,16(sp)
   24928:	dcc00317 	ldw	r19,12(sp)
   2492c:	dc800217 	ldw	r18,8(sp)
   24930:	dc400117 	ldw	r17,4(sp)
   24934:	dc000017 	ldw	r16,0(sp)
   24938:	dec00504 	addi	sp,sp,20
   2493c:	f800283a 	ret
   24940:	2c800417 	ldw	r18,16(r5)
   24944:	903ff626 	beq	r18,zero,24920 <_gp+0xfffe97bc>
   24948:	2c000017 	ldw	r16,0(r5)
   2494c:	108000cc 	andi	r2,r2,3
   24950:	2c800015 	stw	r18,0(r5)
   24954:	84a1c83a 	sub	r16,r16,r18
   24958:	1000131e 	bne	r2,zero,249a8 <__sflush_r+0x158>
   2495c:	28800517 	ldw	r2,20(r5)
   24960:	88800215 	stw	r2,8(r17)
   24964:	04000316 	blt	zero,r16,24974 <__sflush_r+0x124>
   24968:	003fed06 	br	24920 <_gp+0xfffe97bc>
   2496c:	90a5883a 	add	r18,r18,r2
   24970:	043feb0e 	bge	zero,r16,24920 <_gp+0xfffe97bc>
   24974:	88800917 	ldw	r2,36(r17)
   24978:	89400717 	ldw	r5,28(r17)
   2497c:	800f883a 	mov	r7,r16
   24980:	900d883a 	mov	r6,r18
   24984:	9809883a 	mov	r4,r19
   24988:	103ee83a 	callr	r2
   2498c:	80a1c83a 	sub	r16,r16,r2
   24990:	00bff616 	blt	zero,r2,2496c <_gp+0xfffe9808>
   24994:	88c0030b 	ldhu	r3,12(r17)
   24998:	00bfffc4 	movi	r2,-1
   2499c:	18c01014 	ori	r3,r3,64
   249a0:	88c0030d 	sth	r3,12(r17)
   249a4:	003fdf06 	br	24924 <_gp+0xfffe97c0>
   249a8:	0005883a 	mov	r2,zero
   249ac:	003fec06 	br	24960 <_gp+0xfffe97fc>
   249b0:	88801415 	stw	r2,80(r17)
   249b4:	003fd206 	br	24900 <_gp+0xfffe979c>
   249b8:	28c00f17 	ldw	r3,60(r5)
   249bc:	00ffb316 	blt	zero,r3,2488c <_gp+0xfffe9728>
   249c0:	003fd706 	br	24920 <_gp+0xfffe97bc>
   249c4:	89400717 	ldw	r5,28(r17)
   249c8:	000d883a 	mov	r6,zero
   249cc:	01c00044 	movi	r7,1
   249d0:	9809883a 	mov	r4,r19
   249d4:	403ee83a 	callr	r8
   249d8:	100d883a 	mov	r6,r2
   249dc:	00bfffc4 	movi	r2,-1
   249e0:	30801426 	beq	r6,r2,24a34 <__sflush_r+0x1e4>
   249e4:	8880030b 	ldhu	r2,12(r17)
   249e8:	8a000a17 	ldw	r8,40(r17)
   249ec:	003fae06 	br	248a8 <_gp+0xfffe9744>
   249f0:	98c00017 	ldw	r3,0(r19)
   249f4:	183fba26 	beq	r3,zero,248e0 <_gp+0xfffe977c>
   249f8:	01000744 	movi	r4,29
   249fc:	19000626 	beq	r3,r4,24a18 <__sflush_r+0x1c8>
   24a00:	01000584 	movi	r4,22
   24a04:	19000426 	beq	r3,r4,24a18 <__sflush_r+0x1c8>
   24a08:	88c0030b 	ldhu	r3,12(r17)
   24a0c:	18c01014 	ori	r3,r3,64
   24a10:	88c0030d 	sth	r3,12(r17)
   24a14:	003fc306 	br	24924 <_gp+0xfffe97c0>
   24a18:	8880030b 	ldhu	r2,12(r17)
   24a1c:	88c00417 	ldw	r3,16(r17)
   24a20:	88000115 	stw	zero,4(r17)
   24a24:	10bdffcc 	andi	r2,r2,63487
   24a28:	8880030d 	sth	r2,12(r17)
   24a2c:	88c00015 	stw	r3,0(r17)
   24a30:	003fb306 	br	24900 <_gp+0xfffe979c>
   24a34:	98800017 	ldw	r2,0(r19)
   24a38:	103fea26 	beq	r2,zero,249e4 <_gp+0xfffe9880>
   24a3c:	00c00744 	movi	r3,29
   24a40:	10c00226 	beq	r2,r3,24a4c <__sflush_r+0x1fc>
   24a44:	00c00584 	movi	r3,22
   24a48:	10c0031e 	bne	r2,r3,24a58 <__sflush_r+0x208>
   24a4c:	9c000015 	stw	r16,0(r19)
   24a50:	0005883a 	mov	r2,zero
   24a54:	003fb306 	br	24924 <_gp+0xfffe97c0>
   24a58:	88c0030b 	ldhu	r3,12(r17)
   24a5c:	3005883a 	mov	r2,r6
   24a60:	18c01014 	ori	r3,r3,64
   24a64:	88c0030d 	sth	r3,12(r17)
   24a68:	003fae06 	br	24924 <_gp+0xfffe97c0>

00024a6c <_fflush_r>:
   24a6c:	defffd04 	addi	sp,sp,-12
   24a70:	dc000115 	stw	r16,4(sp)
   24a74:	dfc00215 	stw	ra,8(sp)
   24a78:	2021883a 	mov	r16,r4
   24a7c:	20000226 	beq	r4,zero,24a88 <_fflush_r+0x1c>
   24a80:	20800e17 	ldw	r2,56(r4)
   24a84:	10000c26 	beq	r2,zero,24ab8 <_fflush_r+0x4c>
   24a88:	2880030f 	ldh	r2,12(r5)
   24a8c:	1000051e 	bne	r2,zero,24aa4 <_fflush_r+0x38>
   24a90:	0005883a 	mov	r2,zero
   24a94:	dfc00217 	ldw	ra,8(sp)
   24a98:	dc000117 	ldw	r16,4(sp)
   24a9c:	dec00304 	addi	sp,sp,12
   24aa0:	f800283a 	ret
   24aa4:	8009883a 	mov	r4,r16
   24aa8:	dfc00217 	ldw	ra,8(sp)
   24aac:	dc000117 	ldw	r16,4(sp)
   24ab0:	dec00304 	addi	sp,sp,12
   24ab4:	00248501 	jmpi	24850 <__sflush_r>
   24ab8:	d9400015 	stw	r5,0(sp)
   24abc:	0024e580 	call	24e58 <__sinit>
   24ac0:	d9400017 	ldw	r5,0(sp)
   24ac4:	003ff006 	br	24a88 <_gp+0xfffe9924>

00024ac8 <fflush>:
   24ac8:	20000526 	beq	r4,zero,24ae0 <fflush+0x18>
   24acc:	008000f4 	movhi	r2,3
   24ad0:	108c5a04 	addi	r2,r2,12648
   24ad4:	200b883a 	mov	r5,r4
   24ad8:	11000017 	ldw	r4,0(r2)
   24adc:	0024a6c1 	jmpi	24a6c <_fflush_r>
   24ae0:	008000f4 	movhi	r2,3
   24ae4:	108c5904 	addi	r2,r2,12644
   24ae8:	11000017 	ldw	r4,0(r2)
   24aec:	014000b4 	movhi	r5,2
   24af0:	29529b04 	addi	r5,r5,19052
   24af4:	00258681 	jmpi	25868 <_fwalk_reent>

00024af8 <__fp_unlock>:
   24af8:	0005883a 	mov	r2,zero
   24afc:	f800283a 	ret

00024b00 <_cleanup_r>:
   24b00:	014000f4 	movhi	r5,3
   24b04:	29668104 	addi	r5,r5,-26108
   24b08:	00258681 	jmpi	25868 <_fwalk_reent>

00024b0c <__sinit.part.1>:
   24b0c:	defff704 	addi	sp,sp,-36
   24b10:	00c000b4 	movhi	r3,2
   24b14:	dfc00815 	stw	ra,32(sp)
   24b18:	ddc00715 	stw	r23,28(sp)
   24b1c:	dd800615 	stw	r22,24(sp)
   24b20:	dd400515 	stw	r21,20(sp)
   24b24:	dd000415 	stw	r20,16(sp)
   24b28:	dcc00315 	stw	r19,12(sp)
   24b2c:	dc800215 	stw	r18,8(sp)
   24b30:	dc400115 	stw	r17,4(sp)
   24b34:	dc000015 	stw	r16,0(sp)
   24b38:	18d2c004 	addi	r3,r3,19200
   24b3c:	24000117 	ldw	r16,4(r4)
   24b40:	20c00f15 	stw	r3,60(r4)
   24b44:	2080bb04 	addi	r2,r4,748
   24b48:	00c000c4 	movi	r3,3
   24b4c:	20c0b915 	stw	r3,740(r4)
   24b50:	2080ba15 	stw	r2,744(r4)
   24b54:	2000b815 	stw	zero,736(r4)
   24b58:	05c00204 	movi	r23,8
   24b5c:	00800104 	movi	r2,4
   24b60:	2025883a 	mov	r18,r4
   24b64:	b80d883a 	mov	r6,r23
   24b68:	81001704 	addi	r4,r16,92
   24b6c:	000b883a 	mov	r5,zero
   24b70:	80000015 	stw	zero,0(r16)
   24b74:	80000115 	stw	zero,4(r16)
   24b78:	80000215 	stw	zero,8(r16)
   24b7c:	8080030d 	sth	r2,12(r16)
   24b80:	80001915 	stw	zero,100(r16)
   24b84:	8000038d 	sth	zero,14(r16)
   24b88:	80000415 	stw	zero,16(r16)
   24b8c:	80000515 	stw	zero,20(r16)
   24b90:	80000615 	stw	zero,24(r16)
   24b94:	00267580 	call	26758 <memset>
   24b98:	058000b4 	movhi	r22,2
   24b9c:	94400217 	ldw	r17,8(r18)
   24ba0:	054000b4 	movhi	r21,2
   24ba4:	050000f4 	movhi	r20,3
   24ba8:	04c000f4 	movhi	r19,3
   24bac:	b59fd904 	addi	r22,r22,32612
   24bb0:	ad5ff004 	addi	r21,r21,32704
   24bb4:	a5200f04 	addi	r20,r20,-32708
   24bb8:	9ce02604 	addi	r19,r19,-32616
   24bbc:	85800815 	stw	r22,32(r16)
   24bc0:	85400915 	stw	r21,36(r16)
   24bc4:	85000a15 	stw	r20,40(r16)
   24bc8:	84c00b15 	stw	r19,44(r16)
   24bcc:	84000715 	stw	r16,28(r16)
   24bd0:	00800284 	movi	r2,10
   24bd4:	8880030d 	sth	r2,12(r17)
   24bd8:	00800044 	movi	r2,1
   24bdc:	b80d883a 	mov	r6,r23
   24be0:	89001704 	addi	r4,r17,92
   24be4:	000b883a 	mov	r5,zero
   24be8:	88000015 	stw	zero,0(r17)
   24bec:	88000115 	stw	zero,4(r17)
   24bf0:	88000215 	stw	zero,8(r17)
   24bf4:	88001915 	stw	zero,100(r17)
   24bf8:	8880038d 	sth	r2,14(r17)
   24bfc:	88000415 	stw	zero,16(r17)
   24c00:	88000515 	stw	zero,20(r17)
   24c04:	88000615 	stw	zero,24(r17)
   24c08:	00267580 	call	26758 <memset>
   24c0c:	94000317 	ldw	r16,12(r18)
   24c10:	00800484 	movi	r2,18
   24c14:	8c400715 	stw	r17,28(r17)
   24c18:	8d800815 	stw	r22,32(r17)
   24c1c:	8d400915 	stw	r21,36(r17)
   24c20:	8d000a15 	stw	r20,40(r17)
   24c24:	8cc00b15 	stw	r19,44(r17)
   24c28:	8080030d 	sth	r2,12(r16)
   24c2c:	00800084 	movi	r2,2
   24c30:	80000015 	stw	zero,0(r16)
   24c34:	80000115 	stw	zero,4(r16)
   24c38:	80000215 	stw	zero,8(r16)
   24c3c:	80001915 	stw	zero,100(r16)
   24c40:	8080038d 	sth	r2,14(r16)
   24c44:	80000415 	stw	zero,16(r16)
   24c48:	80000515 	stw	zero,20(r16)
   24c4c:	80000615 	stw	zero,24(r16)
   24c50:	b80d883a 	mov	r6,r23
   24c54:	000b883a 	mov	r5,zero
   24c58:	81001704 	addi	r4,r16,92
   24c5c:	00267580 	call	26758 <memset>
   24c60:	00800044 	movi	r2,1
   24c64:	84000715 	stw	r16,28(r16)
   24c68:	85800815 	stw	r22,32(r16)
   24c6c:	85400915 	stw	r21,36(r16)
   24c70:	85000a15 	stw	r20,40(r16)
   24c74:	84c00b15 	stw	r19,44(r16)
   24c78:	90800e15 	stw	r2,56(r18)
   24c7c:	dfc00817 	ldw	ra,32(sp)
   24c80:	ddc00717 	ldw	r23,28(sp)
   24c84:	dd800617 	ldw	r22,24(sp)
   24c88:	dd400517 	ldw	r21,20(sp)
   24c8c:	dd000417 	ldw	r20,16(sp)
   24c90:	dcc00317 	ldw	r19,12(sp)
   24c94:	dc800217 	ldw	r18,8(sp)
   24c98:	dc400117 	ldw	r17,4(sp)
   24c9c:	dc000017 	ldw	r16,0(sp)
   24ca0:	dec00904 	addi	sp,sp,36
   24ca4:	f800283a 	ret

00024ca8 <__fp_lock>:
   24ca8:	0005883a 	mov	r2,zero
   24cac:	f800283a 	ret

00024cb0 <__sfmoreglue>:
   24cb0:	defffc04 	addi	sp,sp,-16
   24cb4:	dc800215 	stw	r18,8(sp)
   24cb8:	2825883a 	mov	r18,r5
   24cbc:	dc000015 	stw	r16,0(sp)
   24cc0:	01401a04 	movi	r5,104
   24cc4:	2021883a 	mov	r16,r4
   24cc8:	913fffc4 	addi	r4,r18,-1
   24ccc:	dfc00315 	stw	ra,12(sp)
   24cd0:	dc400115 	stw	r17,4(sp)
   24cd4:	00208980 	call	20898 <__mulsi3>
   24cd8:	8009883a 	mov	r4,r16
   24cdc:	11401d04 	addi	r5,r2,116
   24ce0:	1023883a 	mov	r17,r2
   24ce4:	0025bc40 	call	25bc4 <_malloc_r>
   24ce8:	1021883a 	mov	r16,r2
   24cec:	10000726 	beq	r2,zero,24d0c <__sfmoreglue+0x5c>
   24cf0:	11000304 	addi	r4,r2,12
   24cf4:	10000015 	stw	zero,0(r2)
   24cf8:	14800115 	stw	r18,4(r2)
   24cfc:	11000215 	stw	r4,8(r2)
   24d00:	89801a04 	addi	r6,r17,104
   24d04:	000b883a 	mov	r5,zero
   24d08:	00267580 	call	26758 <memset>
   24d0c:	8005883a 	mov	r2,r16
   24d10:	dfc00317 	ldw	ra,12(sp)
   24d14:	dc800217 	ldw	r18,8(sp)
   24d18:	dc400117 	ldw	r17,4(sp)
   24d1c:	dc000017 	ldw	r16,0(sp)
   24d20:	dec00404 	addi	sp,sp,16
   24d24:	f800283a 	ret

00024d28 <__sfp>:
   24d28:	defffb04 	addi	sp,sp,-20
   24d2c:	dc000015 	stw	r16,0(sp)
   24d30:	040000f4 	movhi	r16,3
   24d34:	840c5904 	addi	r16,r16,12644
   24d38:	dcc00315 	stw	r19,12(sp)
   24d3c:	2027883a 	mov	r19,r4
   24d40:	81000017 	ldw	r4,0(r16)
   24d44:	dfc00415 	stw	ra,16(sp)
   24d48:	dc800215 	stw	r18,8(sp)
   24d4c:	20800e17 	ldw	r2,56(r4)
   24d50:	dc400115 	stw	r17,4(sp)
   24d54:	1000021e 	bne	r2,zero,24d60 <__sfp+0x38>
   24d58:	0024b0c0 	call	24b0c <__sinit.part.1>
   24d5c:	81000017 	ldw	r4,0(r16)
   24d60:	2480b804 	addi	r18,r4,736
   24d64:	047fffc4 	movi	r17,-1
   24d68:	91000117 	ldw	r4,4(r18)
   24d6c:	94000217 	ldw	r16,8(r18)
   24d70:	213fffc4 	addi	r4,r4,-1
   24d74:	20000a16 	blt	r4,zero,24da0 <__sfp+0x78>
   24d78:	8080030f 	ldh	r2,12(r16)
   24d7c:	10000c26 	beq	r2,zero,24db0 <__sfp+0x88>
   24d80:	80c01d04 	addi	r3,r16,116
   24d84:	00000206 	br	24d90 <__sfp+0x68>
   24d88:	18bfe60f 	ldh	r2,-104(r3)
   24d8c:	10000826 	beq	r2,zero,24db0 <__sfp+0x88>
   24d90:	213fffc4 	addi	r4,r4,-1
   24d94:	1c3ffd04 	addi	r16,r3,-12
   24d98:	18c01a04 	addi	r3,r3,104
   24d9c:	247ffa1e 	bne	r4,r17,24d88 <_gp+0xfffe9c24>
   24da0:	90800017 	ldw	r2,0(r18)
   24da4:	10001d26 	beq	r2,zero,24e1c <__sfp+0xf4>
   24da8:	1025883a 	mov	r18,r2
   24dac:	003fee06 	br	24d68 <_gp+0xfffe9c04>
   24db0:	00bfffc4 	movi	r2,-1
   24db4:	8080038d 	sth	r2,14(r16)
   24db8:	00800044 	movi	r2,1
   24dbc:	8080030d 	sth	r2,12(r16)
   24dc0:	80001915 	stw	zero,100(r16)
   24dc4:	80000015 	stw	zero,0(r16)
   24dc8:	80000215 	stw	zero,8(r16)
   24dcc:	80000115 	stw	zero,4(r16)
   24dd0:	80000415 	stw	zero,16(r16)
   24dd4:	80000515 	stw	zero,20(r16)
   24dd8:	80000615 	stw	zero,24(r16)
   24ddc:	01800204 	movi	r6,8
   24de0:	000b883a 	mov	r5,zero
   24de4:	81001704 	addi	r4,r16,92
   24de8:	00267580 	call	26758 <memset>
   24dec:	8005883a 	mov	r2,r16
   24df0:	80000c15 	stw	zero,48(r16)
   24df4:	80000d15 	stw	zero,52(r16)
   24df8:	80001115 	stw	zero,68(r16)
   24dfc:	80001215 	stw	zero,72(r16)
   24e00:	dfc00417 	ldw	ra,16(sp)
   24e04:	dcc00317 	ldw	r19,12(sp)
   24e08:	dc800217 	ldw	r18,8(sp)
   24e0c:	dc400117 	ldw	r17,4(sp)
   24e10:	dc000017 	ldw	r16,0(sp)
   24e14:	dec00504 	addi	sp,sp,20
   24e18:	f800283a 	ret
   24e1c:	01400104 	movi	r5,4
   24e20:	9809883a 	mov	r4,r19
   24e24:	0024cb00 	call	24cb0 <__sfmoreglue>
   24e28:	90800015 	stw	r2,0(r18)
   24e2c:	103fde1e 	bne	r2,zero,24da8 <_gp+0xfffe9c44>
   24e30:	00800304 	movi	r2,12
   24e34:	98800015 	stw	r2,0(r19)
   24e38:	0005883a 	mov	r2,zero
   24e3c:	003ff006 	br	24e00 <_gp+0xfffe9c9c>

00024e40 <_cleanup>:
   24e40:	008000f4 	movhi	r2,3
   24e44:	108c5904 	addi	r2,r2,12644
   24e48:	11000017 	ldw	r4,0(r2)
   24e4c:	014000f4 	movhi	r5,3
   24e50:	29668104 	addi	r5,r5,-26108
   24e54:	00258681 	jmpi	25868 <_fwalk_reent>

00024e58 <__sinit>:
   24e58:	20800e17 	ldw	r2,56(r4)
   24e5c:	10000126 	beq	r2,zero,24e64 <__sinit+0xc>
   24e60:	f800283a 	ret
   24e64:	0024b0c1 	jmpi	24b0c <__sinit.part.1>

00024e68 <__sfp_lock_acquire>:
   24e68:	f800283a 	ret

00024e6c <__sfp_lock_release>:
   24e6c:	f800283a 	ret

00024e70 <__sinit_lock_acquire>:
   24e70:	f800283a 	ret

00024e74 <__sinit_lock_release>:
   24e74:	f800283a 	ret

00024e78 <__fp_lock_all>:
   24e78:	008000f4 	movhi	r2,3
   24e7c:	108c5a04 	addi	r2,r2,12648
   24e80:	11000017 	ldw	r4,0(r2)
   24e84:	014000b4 	movhi	r5,2
   24e88:	29532a04 	addi	r5,r5,19624
   24e8c:	00257a41 	jmpi	257a4 <_fwalk>

00024e90 <__fp_unlock_all>:
   24e90:	008000f4 	movhi	r2,3
   24e94:	108c5a04 	addi	r2,r2,12648
   24e98:	11000017 	ldw	r4,0(r2)
   24e9c:	014000b4 	movhi	r5,2
   24ea0:	2952be04 	addi	r5,r5,19192
   24ea4:	00257a41 	jmpi	257a4 <_fwalk>

00024ea8 <_malloc_trim_r>:
   24ea8:	defffb04 	addi	sp,sp,-20
   24eac:	dcc00315 	stw	r19,12(sp)
   24eb0:	04c000f4 	movhi	r19,3
   24eb4:	dc800215 	stw	r18,8(sp)
   24eb8:	dc400115 	stw	r17,4(sp)
   24ebc:	dc000015 	stw	r16,0(sp)
   24ec0:	dfc00415 	stw	ra,16(sp)
   24ec4:	2821883a 	mov	r16,r5
   24ec8:	9cc68d04 	addi	r19,r19,6708
   24ecc:	2025883a 	mov	r18,r4
   24ed0:	002dd740 	call	2dd74 <__malloc_lock>
   24ed4:	98800217 	ldw	r2,8(r19)
   24ed8:	14400117 	ldw	r17,4(r2)
   24edc:	00bfff04 	movi	r2,-4
   24ee0:	88a2703a 	and	r17,r17,r2
   24ee4:	8c21c83a 	sub	r16,r17,r16
   24ee8:	8403fbc4 	addi	r16,r16,4079
   24eec:	8020d33a 	srli	r16,r16,12
   24ef0:	0083ffc4 	movi	r2,4095
   24ef4:	843fffc4 	addi	r16,r16,-1
   24ef8:	8020933a 	slli	r16,r16,12
   24efc:	1400060e 	bge	r2,r16,24f18 <_malloc_trim_r+0x70>
   24f00:	000b883a 	mov	r5,zero
   24f04:	9009883a 	mov	r4,r18
   24f08:	0027f100 	call	27f10 <_sbrk_r>
   24f0c:	98c00217 	ldw	r3,8(r19)
   24f10:	1c47883a 	add	r3,r3,r17
   24f14:	10c00a26 	beq	r2,r3,24f40 <_malloc_trim_r+0x98>
   24f18:	9009883a 	mov	r4,r18
   24f1c:	002dd980 	call	2dd98 <__malloc_unlock>
   24f20:	0005883a 	mov	r2,zero
   24f24:	dfc00417 	ldw	ra,16(sp)
   24f28:	dcc00317 	ldw	r19,12(sp)
   24f2c:	dc800217 	ldw	r18,8(sp)
   24f30:	dc400117 	ldw	r17,4(sp)
   24f34:	dc000017 	ldw	r16,0(sp)
   24f38:	dec00504 	addi	sp,sp,20
   24f3c:	f800283a 	ret
   24f40:	040bc83a 	sub	r5,zero,r16
   24f44:	9009883a 	mov	r4,r18
   24f48:	0027f100 	call	27f10 <_sbrk_r>
   24f4c:	00ffffc4 	movi	r3,-1
   24f50:	10c00d26 	beq	r2,r3,24f88 <_malloc_trim_r+0xe0>
   24f54:	00c000f4 	movhi	r3,3
   24f58:	18d37e04 	addi	r3,r3,19960
   24f5c:	18800017 	ldw	r2,0(r3)
   24f60:	99000217 	ldw	r4,8(r19)
   24f64:	8c23c83a 	sub	r17,r17,r16
   24f68:	8c400054 	ori	r17,r17,1
   24f6c:	1421c83a 	sub	r16,r2,r16
   24f70:	24400115 	stw	r17,4(r4)
   24f74:	9009883a 	mov	r4,r18
   24f78:	1c000015 	stw	r16,0(r3)
   24f7c:	002dd980 	call	2dd98 <__malloc_unlock>
   24f80:	00800044 	movi	r2,1
   24f84:	003fe706 	br	24f24 <_gp+0xfffe9dc0>
   24f88:	000b883a 	mov	r5,zero
   24f8c:	9009883a 	mov	r4,r18
   24f90:	0027f100 	call	27f10 <_sbrk_r>
   24f94:	99000217 	ldw	r4,8(r19)
   24f98:	014003c4 	movi	r5,15
   24f9c:	1107c83a 	sub	r3,r2,r4
   24fa0:	28ffdd0e 	bge	r5,r3,24f18 <_gp+0xfffe9db4>
   24fa4:	014000f4 	movhi	r5,3
   24fa8:	294c5c04 	addi	r5,r5,12656
   24fac:	29400017 	ldw	r5,0(r5)
   24fb0:	18c00054 	ori	r3,r3,1
   24fb4:	20c00115 	stw	r3,4(r4)
   24fb8:	00c000f4 	movhi	r3,3
   24fbc:	1145c83a 	sub	r2,r2,r5
   24fc0:	18d37e04 	addi	r3,r3,19960
   24fc4:	18800015 	stw	r2,0(r3)
   24fc8:	003fd306 	br	24f18 <_gp+0xfffe9db4>

00024fcc <_free_r>:
   24fcc:	28004126 	beq	r5,zero,250d4 <_free_r+0x108>
   24fd0:	defffd04 	addi	sp,sp,-12
   24fd4:	dc400115 	stw	r17,4(sp)
   24fd8:	dc000015 	stw	r16,0(sp)
   24fdc:	2023883a 	mov	r17,r4
   24fe0:	2821883a 	mov	r16,r5
   24fe4:	dfc00215 	stw	ra,8(sp)
   24fe8:	002dd740 	call	2dd74 <__malloc_lock>
   24fec:	81ffff17 	ldw	r7,-4(r16)
   24ff0:	00bfff84 	movi	r2,-2
   24ff4:	010000f4 	movhi	r4,3
   24ff8:	81bffe04 	addi	r6,r16,-8
   24ffc:	3884703a 	and	r2,r7,r2
   25000:	21068d04 	addi	r4,r4,6708
   25004:	308b883a 	add	r5,r6,r2
   25008:	2a400117 	ldw	r9,4(r5)
   2500c:	22000217 	ldw	r8,8(r4)
   25010:	00ffff04 	movi	r3,-4
   25014:	48c6703a 	and	r3,r9,r3
   25018:	2a005726 	beq	r5,r8,25178 <_free_r+0x1ac>
   2501c:	28c00115 	stw	r3,4(r5)
   25020:	39c0004c 	andi	r7,r7,1
   25024:	3800091e 	bne	r7,zero,2504c <_free_r+0x80>
   25028:	823ffe17 	ldw	r8,-8(r16)
   2502c:	22400204 	addi	r9,r4,8
   25030:	320dc83a 	sub	r6,r6,r8
   25034:	31c00217 	ldw	r7,8(r6)
   25038:	1205883a 	add	r2,r2,r8
   2503c:	3a406526 	beq	r7,r9,251d4 <_free_r+0x208>
   25040:	32000317 	ldw	r8,12(r6)
   25044:	3a000315 	stw	r8,12(r7)
   25048:	41c00215 	stw	r7,8(r8)
   2504c:	28cf883a 	add	r7,r5,r3
   25050:	39c00117 	ldw	r7,4(r7)
   25054:	39c0004c 	andi	r7,r7,1
   25058:	38003a26 	beq	r7,zero,25144 <_free_r+0x178>
   2505c:	10c00054 	ori	r3,r2,1
   25060:	30c00115 	stw	r3,4(r6)
   25064:	3087883a 	add	r3,r6,r2
   25068:	18800015 	stw	r2,0(r3)
   2506c:	00c07fc4 	movi	r3,511
   25070:	18801936 	bltu	r3,r2,250d8 <_free_r+0x10c>
   25074:	1004d0fa 	srli	r2,r2,3
   25078:	01c00044 	movi	r7,1
   2507c:	21400117 	ldw	r5,4(r4)
   25080:	10c00044 	addi	r3,r2,1
   25084:	18c7883a 	add	r3,r3,r3
   25088:	1005d0ba 	srai	r2,r2,2
   2508c:	18c7883a 	add	r3,r3,r3
   25090:	18c7883a 	add	r3,r3,r3
   25094:	1907883a 	add	r3,r3,r4
   25098:	3884983a 	sll	r2,r7,r2
   2509c:	19c00017 	ldw	r7,0(r3)
   250a0:	1a3ffe04 	addi	r8,r3,-8
   250a4:	1144b03a 	or	r2,r2,r5
   250a8:	32000315 	stw	r8,12(r6)
   250ac:	31c00215 	stw	r7,8(r6)
   250b0:	20800115 	stw	r2,4(r4)
   250b4:	19800015 	stw	r6,0(r3)
   250b8:	39800315 	stw	r6,12(r7)
   250bc:	8809883a 	mov	r4,r17
   250c0:	dfc00217 	ldw	ra,8(sp)
   250c4:	dc400117 	ldw	r17,4(sp)
   250c8:	dc000017 	ldw	r16,0(sp)
   250cc:	dec00304 	addi	sp,sp,12
   250d0:	002dd981 	jmpi	2dd98 <__malloc_unlock>
   250d4:	f800283a 	ret
   250d8:	100ad27a 	srli	r5,r2,9
   250dc:	00c00104 	movi	r3,4
   250e0:	19404a36 	bltu	r3,r5,2520c <_free_r+0x240>
   250e4:	100ad1ba 	srli	r5,r2,6
   250e8:	28c00e44 	addi	r3,r5,57
   250ec:	18c7883a 	add	r3,r3,r3
   250f0:	29400e04 	addi	r5,r5,56
   250f4:	18c7883a 	add	r3,r3,r3
   250f8:	18c7883a 	add	r3,r3,r3
   250fc:	1909883a 	add	r4,r3,r4
   25100:	20c00017 	ldw	r3,0(r4)
   25104:	01c000f4 	movhi	r7,3
   25108:	213ffe04 	addi	r4,r4,-8
   2510c:	39c68d04 	addi	r7,r7,6708
   25110:	20c04426 	beq	r4,r3,25224 <_free_r+0x258>
   25114:	01ffff04 	movi	r7,-4
   25118:	19400117 	ldw	r5,4(r3)
   2511c:	29ca703a 	and	r5,r5,r7
   25120:	1140022e 	bgeu	r2,r5,2512c <_free_r+0x160>
   25124:	18c00217 	ldw	r3,8(r3)
   25128:	20fffb1e 	bne	r4,r3,25118 <_gp+0xfffe9fb4>
   2512c:	19000317 	ldw	r4,12(r3)
   25130:	31000315 	stw	r4,12(r6)
   25134:	30c00215 	stw	r3,8(r6)
   25138:	21800215 	stw	r6,8(r4)
   2513c:	19800315 	stw	r6,12(r3)
   25140:	003fde06 	br	250bc <_gp+0xfffe9f58>
   25144:	29c00217 	ldw	r7,8(r5)
   25148:	10c5883a 	add	r2,r2,r3
   2514c:	00c000f4 	movhi	r3,3
   25150:	18c68f04 	addi	r3,r3,6716
   25154:	38c03b26 	beq	r7,r3,25244 <_free_r+0x278>
   25158:	2a000317 	ldw	r8,12(r5)
   2515c:	11400054 	ori	r5,r2,1
   25160:	3087883a 	add	r3,r6,r2
   25164:	3a000315 	stw	r8,12(r7)
   25168:	41c00215 	stw	r7,8(r8)
   2516c:	31400115 	stw	r5,4(r6)
   25170:	18800015 	stw	r2,0(r3)
   25174:	003fbd06 	br	2506c <_gp+0xfffe9f08>
   25178:	39c0004c 	andi	r7,r7,1
   2517c:	10c5883a 	add	r2,r2,r3
   25180:	3800071e 	bne	r7,zero,251a0 <_free_r+0x1d4>
   25184:	81fffe17 	ldw	r7,-8(r16)
   25188:	31cdc83a 	sub	r6,r6,r7
   2518c:	30c00317 	ldw	r3,12(r6)
   25190:	31400217 	ldw	r5,8(r6)
   25194:	11c5883a 	add	r2,r2,r7
   25198:	28c00315 	stw	r3,12(r5)
   2519c:	19400215 	stw	r5,8(r3)
   251a0:	10c00054 	ori	r3,r2,1
   251a4:	30c00115 	stw	r3,4(r6)
   251a8:	00c000f4 	movhi	r3,3
   251ac:	18cc5d04 	addi	r3,r3,12660
   251b0:	18c00017 	ldw	r3,0(r3)
   251b4:	21800215 	stw	r6,8(r4)
   251b8:	10ffc036 	bltu	r2,r3,250bc <_gp+0xfffe9f58>
   251bc:	008000f4 	movhi	r2,3
   251c0:	10937504 	addi	r2,r2,19924
   251c4:	11400017 	ldw	r5,0(r2)
   251c8:	8809883a 	mov	r4,r17
   251cc:	0024ea80 	call	24ea8 <_malloc_trim_r>
   251d0:	003fba06 	br	250bc <_gp+0xfffe9f58>
   251d4:	28c9883a 	add	r4,r5,r3
   251d8:	21000117 	ldw	r4,4(r4)
   251dc:	2100004c 	andi	r4,r4,1
   251e0:	2000391e 	bne	r4,zero,252c8 <_free_r+0x2fc>
   251e4:	29c00217 	ldw	r7,8(r5)
   251e8:	29000317 	ldw	r4,12(r5)
   251ec:	1885883a 	add	r2,r3,r2
   251f0:	10c00054 	ori	r3,r2,1
   251f4:	39000315 	stw	r4,12(r7)
   251f8:	21c00215 	stw	r7,8(r4)
   251fc:	30c00115 	stw	r3,4(r6)
   25200:	308d883a 	add	r6,r6,r2
   25204:	30800015 	stw	r2,0(r6)
   25208:	003fac06 	br	250bc <_gp+0xfffe9f58>
   2520c:	00c00504 	movi	r3,20
   25210:	19401536 	bltu	r3,r5,25268 <_free_r+0x29c>
   25214:	28c01704 	addi	r3,r5,92
   25218:	18c7883a 	add	r3,r3,r3
   2521c:	294016c4 	addi	r5,r5,91
   25220:	003fb406 	br	250f4 <_gp+0xfffe9f90>
   25224:	280bd0ba 	srai	r5,r5,2
   25228:	00c00044 	movi	r3,1
   2522c:	38800117 	ldw	r2,4(r7)
   25230:	194a983a 	sll	r5,r3,r5
   25234:	2007883a 	mov	r3,r4
   25238:	2884b03a 	or	r2,r5,r2
   2523c:	38800115 	stw	r2,4(r7)
   25240:	003fbb06 	br	25130 <_gp+0xfffe9fcc>
   25244:	21800515 	stw	r6,20(r4)
   25248:	21800415 	stw	r6,16(r4)
   2524c:	10c00054 	ori	r3,r2,1
   25250:	31c00315 	stw	r7,12(r6)
   25254:	31c00215 	stw	r7,8(r6)
   25258:	30c00115 	stw	r3,4(r6)
   2525c:	308d883a 	add	r6,r6,r2
   25260:	30800015 	stw	r2,0(r6)
   25264:	003f9506 	br	250bc <_gp+0xfffe9f58>
   25268:	00c01504 	movi	r3,84
   2526c:	19400536 	bltu	r3,r5,25284 <_free_r+0x2b8>
   25270:	100ad33a 	srli	r5,r2,12
   25274:	28c01bc4 	addi	r3,r5,111
   25278:	18c7883a 	add	r3,r3,r3
   2527c:	29401b84 	addi	r5,r5,110
   25280:	003f9c06 	br	250f4 <_gp+0xfffe9f90>
   25284:	00c05504 	movi	r3,340
   25288:	19400536 	bltu	r3,r5,252a0 <_free_r+0x2d4>
   2528c:	100ad3fa 	srli	r5,r2,15
   25290:	28c01e04 	addi	r3,r5,120
   25294:	18c7883a 	add	r3,r3,r3
   25298:	29401dc4 	addi	r5,r5,119
   2529c:	003f9506 	br	250f4 <_gp+0xfffe9f90>
   252a0:	00c15504 	movi	r3,1364
   252a4:	19400536 	bltu	r3,r5,252bc <_free_r+0x2f0>
   252a8:	100ad4ba 	srli	r5,r2,18
   252ac:	28c01f44 	addi	r3,r5,125
   252b0:	18c7883a 	add	r3,r3,r3
   252b4:	29401f04 	addi	r5,r5,124
   252b8:	003f8e06 	br	250f4 <_gp+0xfffe9f90>
   252bc:	00c03f84 	movi	r3,254
   252c0:	01401f84 	movi	r5,126
   252c4:	003f8b06 	br	250f4 <_gp+0xfffe9f90>
   252c8:	10c00054 	ori	r3,r2,1
   252cc:	30c00115 	stw	r3,4(r6)
   252d0:	308d883a 	add	r6,r6,r2
   252d4:	30800015 	stw	r2,0(r6)
   252d8:	003f7806 	br	250bc <_gp+0xfffe9f58>

000252dc <__sfvwrite_r>:
   252dc:	30800217 	ldw	r2,8(r6)
   252e0:	10006726 	beq	r2,zero,25480 <__sfvwrite_r+0x1a4>
   252e4:	28c0030b 	ldhu	r3,12(r5)
   252e8:	defff404 	addi	sp,sp,-48
   252ec:	dd400715 	stw	r21,28(sp)
   252f0:	dd000615 	stw	r20,24(sp)
   252f4:	dc000215 	stw	r16,8(sp)
   252f8:	dfc00b15 	stw	ra,44(sp)
   252fc:	df000a15 	stw	fp,40(sp)
   25300:	ddc00915 	stw	r23,36(sp)
   25304:	dd800815 	stw	r22,32(sp)
   25308:	dcc00515 	stw	r19,20(sp)
   2530c:	dc800415 	stw	r18,16(sp)
   25310:	dc400315 	stw	r17,12(sp)
   25314:	1880020c 	andi	r2,r3,8
   25318:	2821883a 	mov	r16,r5
   2531c:	202b883a 	mov	r21,r4
   25320:	3029883a 	mov	r20,r6
   25324:	10002726 	beq	r2,zero,253c4 <__sfvwrite_r+0xe8>
   25328:	28800417 	ldw	r2,16(r5)
   2532c:	10002526 	beq	r2,zero,253c4 <__sfvwrite_r+0xe8>
   25330:	1880008c 	andi	r2,r3,2
   25334:	a4400017 	ldw	r17,0(r20)
   25338:	10002a26 	beq	r2,zero,253e4 <__sfvwrite_r+0x108>
   2533c:	05a00034 	movhi	r22,32768
   25340:	0027883a 	mov	r19,zero
   25344:	0025883a 	mov	r18,zero
   25348:	b5bf0004 	addi	r22,r22,-1024
   2534c:	980d883a 	mov	r6,r19
   25350:	a809883a 	mov	r4,r21
   25354:	90004626 	beq	r18,zero,25470 <__sfvwrite_r+0x194>
   25358:	900f883a 	mov	r7,r18
   2535c:	b480022e 	bgeu	r22,r18,25368 <__sfvwrite_r+0x8c>
   25360:	01e00034 	movhi	r7,32768
   25364:	39ff0004 	addi	r7,r7,-1024
   25368:	80800917 	ldw	r2,36(r16)
   2536c:	81400717 	ldw	r5,28(r16)
   25370:	103ee83a 	callr	r2
   25374:	00805a0e 	bge	zero,r2,254e0 <__sfvwrite_r+0x204>
   25378:	a0c00217 	ldw	r3,8(r20)
   2537c:	98a7883a 	add	r19,r19,r2
   25380:	90a5c83a 	sub	r18,r18,r2
   25384:	1885c83a 	sub	r2,r3,r2
   25388:	a0800215 	stw	r2,8(r20)
   2538c:	103fef1e 	bne	r2,zero,2534c <_gp+0xfffea1e8>
   25390:	0005883a 	mov	r2,zero
   25394:	dfc00b17 	ldw	ra,44(sp)
   25398:	df000a17 	ldw	fp,40(sp)
   2539c:	ddc00917 	ldw	r23,36(sp)
   253a0:	dd800817 	ldw	r22,32(sp)
   253a4:	dd400717 	ldw	r21,28(sp)
   253a8:	dd000617 	ldw	r20,24(sp)
   253ac:	dcc00517 	ldw	r19,20(sp)
   253b0:	dc800417 	ldw	r18,16(sp)
   253b4:	dc400317 	ldw	r17,12(sp)
   253b8:	dc000217 	ldw	r16,8(sp)
   253bc:	dec00c04 	addi	sp,sp,48
   253c0:	f800283a 	ret
   253c4:	800b883a 	mov	r5,r16
   253c8:	a809883a 	mov	r4,r21
   253cc:	0022e4c0 	call	22e4c <__swsetup_r>
   253d0:	1000ee1e 	bne	r2,zero,2578c <__sfvwrite_r+0x4b0>
   253d4:	80c0030b 	ldhu	r3,12(r16)
   253d8:	a4400017 	ldw	r17,0(r20)
   253dc:	1880008c 	andi	r2,r3,2
   253e0:	103fd61e 	bne	r2,zero,2533c <_gp+0xfffea1d8>
   253e4:	1880004c 	andi	r2,r3,1
   253e8:	1000421e 	bne	r2,zero,254f4 <__sfvwrite_r+0x218>
   253ec:	0039883a 	mov	fp,zero
   253f0:	0025883a 	mov	r18,zero
   253f4:	90001a26 	beq	r18,zero,25460 <__sfvwrite_r+0x184>
   253f8:	1880800c 	andi	r2,r3,512
   253fc:	84c00217 	ldw	r19,8(r16)
   25400:	10002126 	beq	r2,zero,25488 <__sfvwrite_r+0x1ac>
   25404:	982f883a 	mov	r23,r19
   25408:	94c09636 	bltu	r18,r19,25664 <__sfvwrite_r+0x388>
   2540c:	1881200c 	andi	r2,r3,1152
   25410:	1000a11e 	bne	r2,zero,25698 <__sfvwrite_r+0x3bc>
   25414:	81000017 	ldw	r4,0(r16)
   25418:	b80d883a 	mov	r6,r23
   2541c:	e00b883a 	mov	r5,fp
   25420:	00265fc0 	call	265fc <memmove>
   25424:	80c00217 	ldw	r3,8(r16)
   25428:	81000017 	ldw	r4,0(r16)
   2542c:	9005883a 	mov	r2,r18
   25430:	1ce7c83a 	sub	r19,r3,r19
   25434:	25cf883a 	add	r7,r4,r23
   25438:	84c00215 	stw	r19,8(r16)
   2543c:	81c00015 	stw	r7,0(r16)
   25440:	a0c00217 	ldw	r3,8(r20)
   25444:	e0b9883a 	add	fp,fp,r2
   25448:	90a5c83a 	sub	r18,r18,r2
   2544c:	18a7c83a 	sub	r19,r3,r2
   25450:	a4c00215 	stw	r19,8(r20)
   25454:	983fce26 	beq	r19,zero,25390 <_gp+0xfffea22c>
   25458:	80c0030b 	ldhu	r3,12(r16)
   2545c:	903fe61e 	bne	r18,zero,253f8 <_gp+0xfffea294>
   25460:	8f000017 	ldw	fp,0(r17)
   25464:	8c800117 	ldw	r18,4(r17)
   25468:	8c400204 	addi	r17,r17,8
   2546c:	003fe106 	br	253f4 <_gp+0xfffea290>
   25470:	8cc00017 	ldw	r19,0(r17)
   25474:	8c800117 	ldw	r18,4(r17)
   25478:	8c400204 	addi	r17,r17,8
   2547c:	003fb306 	br	2534c <_gp+0xfffea1e8>
   25480:	0005883a 	mov	r2,zero
   25484:	f800283a 	ret
   25488:	81000017 	ldw	r4,0(r16)
   2548c:	80800417 	ldw	r2,16(r16)
   25490:	11005a36 	bltu	r2,r4,255fc <__sfvwrite_r+0x320>
   25494:	85c00517 	ldw	r23,20(r16)
   25498:	95c05836 	bltu	r18,r23,255fc <__sfvwrite_r+0x320>
   2549c:	00a00034 	movhi	r2,32768
   254a0:	10bfffc4 	addi	r2,r2,-1
   254a4:	9009883a 	mov	r4,r18
   254a8:	1480012e 	bgeu	r2,r18,254b0 <__sfvwrite_r+0x1d4>
   254ac:	1009883a 	mov	r4,r2
   254b0:	b80b883a 	mov	r5,r23
   254b4:	002ad800 	call	2ad80 <__divsi3>
   254b8:	b80b883a 	mov	r5,r23
   254bc:	1009883a 	mov	r4,r2
   254c0:	00208980 	call	20898 <__mulsi3>
   254c4:	81400717 	ldw	r5,28(r16)
   254c8:	80c00917 	ldw	r3,36(r16)
   254cc:	100f883a 	mov	r7,r2
   254d0:	e00d883a 	mov	r6,fp
   254d4:	a809883a 	mov	r4,r21
   254d8:	183ee83a 	callr	r3
   254dc:	00bfd816 	blt	zero,r2,25440 <_gp+0xfffea2dc>
   254e0:	8080030b 	ldhu	r2,12(r16)
   254e4:	10801014 	ori	r2,r2,64
   254e8:	8080030d 	sth	r2,12(r16)
   254ec:	00bfffc4 	movi	r2,-1
   254f0:	003fa806 	br	25394 <_gp+0xfffea230>
   254f4:	0027883a 	mov	r19,zero
   254f8:	0011883a 	mov	r8,zero
   254fc:	0039883a 	mov	fp,zero
   25500:	0025883a 	mov	r18,zero
   25504:	90001f26 	beq	r18,zero,25584 <__sfvwrite_r+0x2a8>
   25508:	40005a26 	beq	r8,zero,25674 <__sfvwrite_r+0x398>
   2550c:	982d883a 	mov	r22,r19
   25510:	94c0012e 	bgeu	r18,r19,25518 <__sfvwrite_r+0x23c>
   25514:	902d883a 	mov	r22,r18
   25518:	81000017 	ldw	r4,0(r16)
   2551c:	80800417 	ldw	r2,16(r16)
   25520:	b02f883a 	mov	r23,r22
   25524:	81c00517 	ldw	r7,20(r16)
   25528:	1100032e 	bgeu	r2,r4,25538 <__sfvwrite_r+0x25c>
   2552c:	80c00217 	ldw	r3,8(r16)
   25530:	38c7883a 	add	r3,r7,r3
   25534:	1d801816 	blt	r3,r22,25598 <__sfvwrite_r+0x2bc>
   25538:	b1c03e16 	blt	r22,r7,25634 <__sfvwrite_r+0x358>
   2553c:	80800917 	ldw	r2,36(r16)
   25540:	81400717 	ldw	r5,28(r16)
   25544:	e00d883a 	mov	r6,fp
   25548:	da000115 	stw	r8,4(sp)
   2554c:	a809883a 	mov	r4,r21
   25550:	103ee83a 	callr	r2
   25554:	102f883a 	mov	r23,r2
   25558:	da000117 	ldw	r8,4(sp)
   2555c:	00bfe00e 	bge	zero,r2,254e0 <_gp+0xfffea37c>
   25560:	9de7c83a 	sub	r19,r19,r23
   25564:	98001f26 	beq	r19,zero,255e4 <__sfvwrite_r+0x308>
   25568:	a0800217 	ldw	r2,8(r20)
   2556c:	e5f9883a 	add	fp,fp,r23
   25570:	95e5c83a 	sub	r18,r18,r23
   25574:	15efc83a 	sub	r23,r2,r23
   25578:	a5c00215 	stw	r23,8(r20)
   2557c:	b83f8426 	beq	r23,zero,25390 <_gp+0xfffea22c>
   25580:	903fe11e 	bne	r18,zero,25508 <_gp+0xfffea3a4>
   25584:	8f000017 	ldw	fp,0(r17)
   25588:	8c800117 	ldw	r18,4(r17)
   2558c:	0011883a 	mov	r8,zero
   25590:	8c400204 	addi	r17,r17,8
   25594:	003fdb06 	br	25504 <_gp+0xfffea3a0>
   25598:	180d883a 	mov	r6,r3
   2559c:	e00b883a 	mov	r5,fp
   255a0:	da000115 	stw	r8,4(sp)
   255a4:	d8c00015 	stw	r3,0(sp)
   255a8:	00265fc0 	call	265fc <memmove>
   255ac:	d8c00017 	ldw	r3,0(sp)
   255b0:	80800017 	ldw	r2,0(r16)
   255b4:	800b883a 	mov	r5,r16
   255b8:	a809883a 	mov	r4,r21
   255bc:	10c5883a 	add	r2,r2,r3
   255c0:	80800015 	stw	r2,0(r16)
   255c4:	d8c00015 	stw	r3,0(sp)
   255c8:	0024a6c0 	call	24a6c <_fflush_r>
   255cc:	d8c00017 	ldw	r3,0(sp)
   255d0:	da000117 	ldw	r8,4(sp)
   255d4:	103fc21e 	bne	r2,zero,254e0 <_gp+0xfffea37c>
   255d8:	182f883a 	mov	r23,r3
   255dc:	9de7c83a 	sub	r19,r19,r23
   255e0:	983fe11e 	bne	r19,zero,25568 <_gp+0xfffea404>
   255e4:	800b883a 	mov	r5,r16
   255e8:	a809883a 	mov	r4,r21
   255ec:	0024a6c0 	call	24a6c <_fflush_r>
   255f0:	103fbb1e 	bne	r2,zero,254e0 <_gp+0xfffea37c>
   255f4:	0011883a 	mov	r8,zero
   255f8:	003fdb06 	br	25568 <_gp+0xfffea404>
   255fc:	94c0012e 	bgeu	r18,r19,25604 <__sfvwrite_r+0x328>
   25600:	9027883a 	mov	r19,r18
   25604:	980d883a 	mov	r6,r19
   25608:	e00b883a 	mov	r5,fp
   2560c:	00265fc0 	call	265fc <memmove>
   25610:	80800217 	ldw	r2,8(r16)
   25614:	80c00017 	ldw	r3,0(r16)
   25618:	14c5c83a 	sub	r2,r2,r19
   2561c:	1cc7883a 	add	r3,r3,r19
   25620:	80800215 	stw	r2,8(r16)
   25624:	80c00015 	stw	r3,0(r16)
   25628:	10004326 	beq	r2,zero,25738 <__sfvwrite_r+0x45c>
   2562c:	9805883a 	mov	r2,r19
   25630:	003f8306 	br	25440 <_gp+0xfffea2dc>
   25634:	b00d883a 	mov	r6,r22
   25638:	e00b883a 	mov	r5,fp
   2563c:	da000115 	stw	r8,4(sp)
   25640:	00265fc0 	call	265fc <memmove>
   25644:	80800217 	ldw	r2,8(r16)
   25648:	80c00017 	ldw	r3,0(r16)
   2564c:	da000117 	ldw	r8,4(sp)
   25650:	1585c83a 	sub	r2,r2,r22
   25654:	1dad883a 	add	r22,r3,r22
   25658:	80800215 	stw	r2,8(r16)
   2565c:	85800015 	stw	r22,0(r16)
   25660:	003fbf06 	br	25560 <_gp+0xfffea3fc>
   25664:	81000017 	ldw	r4,0(r16)
   25668:	9027883a 	mov	r19,r18
   2566c:	902f883a 	mov	r23,r18
   25670:	003f6906 	br	25418 <_gp+0xfffea2b4>
   25674:	900d883a 	mov	r6,r18
   25678:	01400284 	movi	r5,10
   2567c:	e009883a 	mov	r4,fp
   25680:	00263d00 	call	263d0 <memchr>
   25684:	10003e26 	beq	r2,zero,25780 <__sfvwrite_r+0x4a4>
   25688:	10800044 	addi	r2,r2,1
   2568c:	1727c83a 	sub	r19,r2,fp
   25690:	02000044 	movi	r8,1
   25694:	003f9d06 	br	2550c <_gp+0xfffea3a8>
   25698:	80800517 	ldw	r2,20(r16)
   2569c:	81400417 	ldw	r5,16(r16)
   256a0:	81c00017 	ldw	r7,0(r16)
   256a4:	10a7883a 	add	r19,r2,r2
   256a8:	9885883a 	add	r2,r19,r2
   256ac:	1026d7fa 	srli	r19,r2,31
   256b0:	396dc83a 	sub	r22,r7,r5
   256b4:	b1000044 	addi	r4,r22,1
   256b8:	9885883a 	add	r2,r19,r2
   256bc:	1027d07a 	srai	r19,r2,1
   256c0:	2485883a 	add	r2,r4,r18
   256c4:	980d883a 	mov	r6,r19
   256c8:	9880022e 	bgeu	r19,r2,256d4 <__sfvwrite_r+0x3f8>
   256cc:	1027883a 	mov	r19,r2
   256d0:	100d883a 	mov	r6,r2
   256d4:	18c1000c 	andi	r3,r3,1024
   256d8:	18001c26 	beq	r3,zero,2574c <__sfvwrite_r+0x470>
   256dc:	300b883a 	mov	r5,r6
   256e0:	a809883a 	mov	r4,r21
   256e4:	0025bc40 	call	25bc4 <_malloc_r>
   256e8:	102f883a 	mov	r23,r2
   256ec:	10002926 	beq	r2,zero,25794 <__sfvwrite_r+0x4b8>
   256f0:	81400417 	ldw	r5,16(r16)
   256f4:	b00d883a 	mov	r6,r22
   256f8:	1009883a 	mov	r4,r2
   256fc:	00264b40 	call	264b4 <memcpy>
   25700:	8080030b 	ldhu	r2,12(r16)
   25704:	00fedfc4 	movi	r3,-1153
   25708:	10c4703a 	and	r2,r2,r3
   2570c:	10802014 	ori	r2,r2,128
   25710:	8080030d 	sth	r2,12(r16)
   25714:	bd89883a 	add	r4,r23,r22
   25718:	9d8fc83a 	sub	r7,r19,r22
   2571c:	85c00415 	stw	r23,16(r16)
   25720:	84c00515 	stw	r19,20(r16)
   25724:	81000015 	stw	r4,0(r16)
   25728:	9027883a 	mov	r19,r18
   2572c:	81c00215 	stw	r7,8(r16)
   25730:	902f883a 	mov	r23,r18
   25734:	003f3806 	br	25418 <_gp+0xfffea2b4>
   25738:	800b883a 	mov	r5,r16
   2573c:	a809883a 	mov	r4,r21
   25740:	0024a6c0 	call	24a6c <_fflush_r>
   25744:	103fb926 	beq	r2,zero,2562c <_gp+0xfffea4c8>
   25748:	003f6506 	br	254e0 <_gp+0xfffea37c>
   2574c:	a809883a 	mov	r4,r21
   25750:	00279380 	call	27938 <_realloc_r>
   25754:	102f883a 	mov	r23,r2
   25758:	103fee1e 	bne	r2,zero,25714 <_gp+0xfffea5b0>
   2575c:	81400417 	ldw	r5,16(r16)
   25760:	a809883a 	mov	r4,r21
   25764:	0024fcc0 	call	24fcc <_free_r>
   25768:	8080030b 	ldhu	r2,12(r16)
   2576c:	00ffdfc4 	movi	r3,-129
   25770:	1884703a 	and	r2,r3,r2
   25774:	00c00304 	movi	r3,12
   25778:	a8c00015 	stw	r3,0(r21)
   2577c:	003f5906 	br	254e4 <_gp+0xfffea380>
   25780:	94c00044 	addi	r19,r18,1
   25784:	02000044 	movi	r8,1
   25788:	003f6006 	br	2550c <_gp+0xfffea3a8>
   2578c:	00bfffc4 	movi	r2,-1
   25790:	003f0006 	br	25394 <_gp+0xfffea230>
   25794:	00800304 	movi	r2,12
   25798:	a8800015 	stw	r2,0(r21)
   2579c:	8080030b 	ldhu	r2,12(r16)
   257a0:	003f5006 	br	254e4 <_gp+0xfffea380>

000257a4 <_fwalk>:
   257a4:	defff704 	addi	sp,sp,-36
   257a8:	dd000415 	stw	r20,16(sp)
   257ac:	dfc00815 	stw	ra,32(sp)
   257b0:	ddc00715 	stw	r23,28(sp)
   257b4:	dd800615 	stw	r22,24(sp)
   257b8:	dd400515 	stw	r21,20(sp)
   257bc:	dcc00315 	stw	r19,12(sp)
   257c0:	dc800215 	stw	r18,8(sp)
   257c4:	dc400115 	stw	r17,4(sp)
   257c8:	dc000015 	stw	r16,0(sp)
   257cc:	2500b804 	addi	r20,r4,736
   257d0:	a0002326 	beq	r20,zero,25860 <_fwalk+0xbc>
   257d4:	282b883a 	mov	r21,r5
   257d8:	002f883a 	mov	r23,zero
   257dc:	05800044 	movi	r22,1
   257e0:	04ffffc4 	movi	r19,-1
   257e4:	a4400117 	ldw	r17,4(r20)
   257e8:	a4800217 	ldw	r18,8(r20)
   257ec:	8c7fffc4 	addi	r17,r17,-1
   257f0:	88000d16 	blt	r17,zero,25828 <_fwalk+0x84>
   257f4:	94000304 	addi	r16,r18,12
   257f8:	94800384 	addi	r18,r18,14
   257fc:	8080000b 	ldhu	r2,0(r16)
   25800:	8c7fffc4 	addi	r17,r17,-1
   25804:	813ffd04 	addi	r4,r16,-12
   25808:	b080042e 	bgeu	r22,r2,2581c <_fwalk+0x78>
   2580c:	9080000f 	ldh	r2,0(r18)
   25810:	14c00226 	beq	r2,r19,2581c <_fwalk+0x78>
   25814:	a83ee83a 	callr	r21
   25818:	b8aeb03a 	or	r23,r23,r2
   2581c:	84001a04 	addi	r16,r16,104
   25820:	94801a04 	addi	r18,r18,104
   25824:	8cfff51e 	bne	r17,r19,257fc <_gp+0xfffea698>
   25828:	a5000017 	ldw	r20,0(r20)
   2582c:	a03fed1e 	bne	r20,zero,257e4 <_gp+0xfffea680>
   25830:	b805883a 	mov	r2,r23
   25834:	dfc00817 	ldw	ra,32(sp)
   25838:	ddc00717 	ldw	r23,28(sp)
   2583c:	dd800617 	ldw	r22,24(sp)
   25840:	dd400517 	ldw	r21,20(sp)
   25844:	dd000417 	ldw	r20,16(sp)
   25848:	dcc00317 	ldw	r19,12(sp)
   2584c:	dc800217 	ldw	r18,8(sp)
   25850:	dc400117 	ldw	r17,4(sp)
   25854:	dc000017 	ldw	r16,0(sp)
   25858:	dec00904 	addi	sp,sp,36
   2585c:	f800283a 	ret
   25860:	002f883a 	mov	r23,zero
   25864:	003ff206 	br	25830 <_gp+0xfffea6cc>

00025868 <_fwalk_reent>:
   25868:	defff704 	addi	sp,sp,-36
   2586c:	dd000415 	stw	r20,16(sp)
   25870:	dfc00815 	stw	ra,32(sp)
   25874:	ddc00715 	stw	r23,28(sp)
   25878:	dd800615 	stw	r22,24(sp)
   2587c:	dd400515 	stw	r21,20(sp)
   25880:	dcc00315 	stw	r19,12(sp)
   25884:	dc800215 	stw	r18,8(sp)
   25888:	dc400115 	stw	r17,4(sp)
   2588c:	dc000015 	stw	r16,0(sp)
   25890:	2500b804 	addi	r20,r4,736
   25894:	a0002326 	beq	r20,zero,25924 <_fwalk_reent+0xbc>
   25898:	282b883a 	mov	r21,r5
   2589c:	2027883a 	mov	r19,r4
   258a0:	002f883a 	mov	r23,zero
   258a4:	05800044 	movi	r22,1
   258a8:	04bfffc4 	movi	r18,-1
   258ac:	a4400117 	ldw	r17,4(r20)
   258b0:	a4000217 	ldw	r16,8(r20)
   258b4:	8c7fffc4 	addi	r17,r17,-1
   258b8:	88000c16 	blt	r17,zero,258ec <_fwalk_reent+0x84>
   258bc:	84000304 	addi	r16,r16,12
   258c0:	8080000b 	ldhu	r2,0(r16)
   258c4:	8c7fffc4 	addi	r17,r17,-1
   258c8:	817ffd04 	addi	r5,r16,-12
   258cc:	b080052e 	bgeu	r22,r2,258e4 <_fwalk_reent+0x7c>
   258d0:	8080008f 	ldh	r2,2(r16)
   258d4:	9809883a 	mov	r4,r19
   258d8:	14800226 	beq	r2,r18,258e4 <_fwalk_reent+0x7c>
   258dc:	a83ee83a 	callr	r21
   258e0:	b8aeb03a 	or	r23,r23,r2
   258e4:	84001a04 	addi	r16,r16,104
   258e8:	8cbff51e 	bne	r17,r18,258c0 <_gp+0xfffea75c>
   258ec:	a5000017 	ldw	r20,0(r20)
   258f0:	a03fee1e 	bne	r20,zero,258ac <_gp+0xfffea748>
   258f4:	b805883a 	mov	r2,r23
   258f8:	dfc00817 	ldw	ra,32(sp)
   258fc:	ddc00717 	ldw	r23,28(sp)
   25900:	dd800617 	ldw	r22,24(sp)
   25904:	dd400517 	ldw	r21,20(sp)
   25908:	dd000417 	ldw	r20,16(sp)
   2590c:	dcc00317 	ldw	r19,12(sp)
   25910:	dc800217 	ldw	r18,8(sp)
   25914:	dc400117 	ldw	r17,4(sp)
   25918:	dc000017 	ldw	r16,0(sp)
   2591c:	dec00904 	addi	sp,sp,36
   25920:	f800283a 	ret
   25924:	002f883a 	mov	r23,zero
   25928:	003ff206 	br	258f4 <_gp+0xfffea790>

0002592c <_setlocale_r>:
   2592c:	30001b26 	beq	r6,zero,2599c <_setlocale_r+0x70>
   25930:	014000f4 	movhi	r5,3
   25934:	defffe04 	addi	sp,sp,-8
   25938:	29442404 	addi	r5,r5,4240
   2593c:	3009883a 	mov	r4,r6
   25940:	dc000015 	stw	r16,0(sp)
   25944:	dfc00115 	stw	ra,4(sp)
   25948:	3021883a 	mov	r16,r6
   2594c:	00280a00 	call	280a0 <strcmp>
   25950:	1000061e 	bne	r2,zero,2596c <_setlocale_r+0x40>
   25954:	008000f4 	movhi	r2,3
   25958:	10842304 	addi	r2,r2,4236
   2595c:	dfc00117 	ldw	ra,4(sp)
   25960:	dc000017 	ldw	r16,0(sp)
   25964:	dec00204 	addi	sp,sp,8
   25968:	f800283a 	ret
   2596c:	014000f4 	movhi	r5,3
   25970:	29442304 	addi	r5,r5,4236
   25974:	8009883a 	mov	r4,r16
   25978:	00280a00 	call	280a0 <strcmp>
   2597c:	103ff526 	beq	r2,zero,25954 <_gp+0xfffea7f0>
   25980:	014000f4 	movhi	r5,3
   25984:	29440e04 	addi	r5,r5,4152
   25988:	8009883a 	mov	r4,r16
   2598c:	00280a00 	call	280a0 <strcmp>
   25990:	103ff026 	beq	r2,zero,25954 <_gp+0xfffea7f0>
   25994:	0005883a 	mov	r2,zero
   25998:	003ff006 	br	2595c <_gp+0xfffea7f8>
   2599c:	008000f4 	movhi	r2,3
   259a0:	10842304 	addi	r2,r2,4236
   259a4:	f800283a 	ret

000259a8 <__locale_charset>:
   259a8:	008000f4 	movhi	r2,3
   259ac:	10867704 	addi	r2,r2,6620
   259b0:	f800283a 	ret

000259b4 <__locale_mb_cur_max>:
   259b4:	008000f4 	movhi	r2,3
   259b8:	108c5b04 	addi	r2,r2,12652
   259bc:	10800017 	ldw	r2,0(r2)
   259c0:	f800283a 	ret

000259c4 <__locale_msgcharset>:
   259c4:	008000f4 	movhi	r2,3
   259c8:	10866f04 	addi	r2,r2,6588
   259cc:	f800283a 	ret

000259d0 <__locale_cjk_lang>:
   259d0:	0005883a 	mov	r2,zero
   259d4:	f800283a 	ret

000259d8 <_localeconv_r>:
   259d8:	008000f4 	movhi	r2,3
   259dc:	10867f04 	addi	r2,r2,6652
   259e0:	f800283a 	ret

000259e4 <setlocale>:
   259e4:	008000f4 	movhi	r2,3
   259e8:	108c5a04 	addi	r2,r2,12648
   259ec:	280d883a 	mov	r6,r5
   259f0:	200b883a 	mov	r5,r4
   259f4:	11000017 	ldw	r4,0(r2)
   259f8:	002592c1 	jmpi	2592c <_setlocale_r>

000259fc <localeconv>:
   259fc:	008000f4 	movhi	r2,3
   25a00:	10867f04 	addi	r2,r2,6652
   25a04:	f800283a 	ret

00025a08 <__smakebuf_r>:
   25a08:	2880030b 	ldhu	r2,12(r5)
   25a0c:	10c0008c 	andi	r3,r2,2
   25a10:	1800411e 	bne	r3,zero,25b18 <__smakebuf_r+0x110>
   25a14:	deffec04 	addi	sp,sp,-80
   25a18:	dc000f15 	stw	r16,60(sp)
   25a1c:	2821883a 	mov	r16,r5
   25a20:	2940038f 	ldh	r5,14(r5)
   25a24:	dc401015 	stw	r17,64(sp)
   25a28:	dfc01315 	stw	ra,76(sp)
   25a2c:	dcc01215 	stw	r19,72(sp)
   25a30:	dc801115 	stw	r18,68(sp)
   25a34:	2023883a 	mov	r17,r4
   25a38:	28001c16 	blt	r5,zero,25aac <__smakebuf_r+0xa4>
   25a3c:	d80d883a 	mov	r6,sp
   25a40:	0029d100 	call	29d10 <_fstat_r>
   25a44:	10001816 	blt	r2,zero,25aa8 <__smakebuf_r+0xa0>
   25a48:	d8800117 	ldw	r2,4(sp)
   25a4c:	00e00014 	movui	r3,32768
   25a50:	10bc000c 	andi	r2,r2,61440
   25a54:	14c80020 	cmpeqi	r19,r2,8192
   25a58:	10c03726 	beq	r2,r3,25b38 <__smakebuf_r+0x130>
   25a5c:	80c0030b 	ldhu	r3,12(r16)
   25a60:	18c20014 	ori	r3,r3,2048
   25a64:	80c0030d 	sth	r3,12(r16)
   25a68:	00c80004 	movi	r3,8192
   25a6c:	10c0521e 	bne	r2,r3,25bb8 <__smakebuf_r+0x1b0>
   25a70:	8140038f 	ldh	r5,14(r16)
   25a74:	8809883a 	mov	r4,r17
   25a78:	0029d6c0 	call	29d6c <_isatty_r>
   25a7c:	10004c26 	beq	r2,zero,25bb0 <__smakebuf_r+0x1a8>
   25a80:	8080030b 	ldhu	r2,12(r16)
   25a84:	80c010c4 	addi	r3,r16,67
   25a88:	80c00015 	stw	r3,0(r16)
   25a8c:	10800054 	ori	r2,r2,1
   25a90:	8080030d 	sth	r2,12(r16)
   25a94:	00800044 	movi	r2,1
   25a98:	80c00415 	stw	r3,16(r16)
   25a9c:	80800515 	stw	r2,20(r16)
   25aa0:	04810004 	movi	r18,1024
   25aa4:	00000706 	br	25ac4 <__smakebuf_r+0xbc>
   25aa8:	8080030b 	ldhu	r2,12(r16)
   25aac:	10c0200c 	andi	r3,r2,128
   25ab0:	18001f1e 	bne	r3,zero,25b30 <__smakebuf_r+0x128>
   25ab4:	04810004 	movi	r18,1024
   25ab8:	10820014 	ori	r2,r2,2048
   25abc:	8080030d 	sth	r2,12(r16)
   25ac0:	0027883a 	mov	r19,zero
   25ac4:	900b883a 	mov	r5,r18
   25ac8:	8809883a 	mov	r4,r17
   25acc:	0025bc40 	call	25bc4 <_malloc_r>
   25ad0:	10002c26 	beq	r2,zero,25b84 <__smakebuf_r+0x17c>
   25ad4:	80c0030b 	ldhu	r3,12(r16)
   25ad8:	010000b4 	movhi	r4,2
   25adc:	2112c004 	addi	r4,r4,19200
   25ae0:	89000f15 	stw	r4,60(r17)
   25ae4:	18c02014 	ori	r3,r3,128
   25ae8:	80c0030d 	sth	r3,12(r16)
   25aec:	80800015 	stw	r2,0(r16)
   25af0:	80800415 	stw	r2,16(r16)
   25af4:	84800515 	stw	r18,20(r16)
   25af8:	98001a1e 	bne	r19,zero,25b64 <__smakebuf_r+0x15c>
   25afc:	dfc01317 	ldw	ra,76(sp)
   25b00:	dcc01217 	ldw	r19,72(sp)
   25b04:	dc801117 	ldw	r18,68(sp)
   25b08:	dc401017 	ldw	r17,64(sp)
   25b0c:	dc000f17 	ldw	r16,60(sp)
   25b10:	dec01404 	addi	sp,sp,80
   25b14:	f800283a 	ret
   25b18:	288010c4 	addi	r2,r5,67
   25b1c:	28800015 	stw	r2,0(r5)
   25b20:	28800415 	stw	r2,16(r5)
   25b24:	00800044 	movi	r2,1
   25b28:	28800515 	stw	r2,20(r5)
   25b2c:	f800283a 	ret
   25b30:	04801004 	movi	r18,64
   25b34:	003fe006 	br	25ab8 <_gp+0xfffea954>
   25b38:	81000a17 	ldw	r4,40(r16)
   25b3c:	00c000f4 	movhi	r3,3
   25b40:	18e00f04 	addi	r3,r3,-32708
   25b44:	20ffc51e 	bne	r4,r3,25a5c <_gp+0xfffea8f8>
   25b48:	8080030b 	ldhu	r2,12(r16)
   25b4c:	04810004 	movi	r18,1024
   25b50:	84801315 	stw	r18,76(r16)
   25b54:	1484b03a 	or	r2,r2,r18
   25b58:	8080030d 	sth	r2,12(r16)
   25b5c:	0027883a 	mov	r19,zero
   25b60:	003fd806 	br	25ac4 <_gp+0xfffea960>
   25b64:	8140038f 	ldh	r5,14(r16)
   25b68:	8809883a 	mov	r4,r17
   25b6c:	0029d6c0 	call	29d6c <_isatty_r>
   25b70:	103fe226 	beq	r2,zero,25afc <_gp+0xfffea998>
   25b74:	8080030b 	ldhu	r2,12(r16)
   25b78:	10800054 	ori	r2,r2,1
   25b7c:	8080030d 	sth	r2,12(r16)
   25b80:	003fde06 	br	25afc <_gp+0xfffea998>
   25b84:	8080030b 	ldhu	r2,12(r16)
   25b88:	10c0800c 	andi	r3,r2,512
   25b8c:	183fdb1e 	bne	r3,zero,25afc <_gp+0xfffea998>
   25b90:	10800094 	ori	r2,r2,2
   25b94:	80c010c4 	addi	r3,r16,67
   25b98:	8080030d 	sth	r2,12(r16)
   25b9c:	00800044 	movi	r2,1
   25ba0:	80c00015 	stw	r3,0(r16)
   25ba4:	80c00415 	stw	r3,16(r16)
   25ba8:	80800515 	stw	r2,20(r16)
   25bac:	003fd306 	br	25afc <_gp+0xfffea998>
   25bb0:	04810004 	movi	r18,1024
   25bb4:	003fc306 	br	25ac4 <_gp+0xfffea960>
   25bb8:	0027883a 	mov	r19,zero
   25bbc:	04810004 	movi	r18,1024
   25bc0:	003fc006 	br	25ac4 <_gp+0xfffea960>

00025bc4 <_malloc_r>:
   25bc4:	defff504 	addi	sp,sp,-44
   25bc8:	dc800315 	stw	r18,12(sp)
   25bcc:	dfc00a15 	stw	ra,40(sp)
   25bd0:	df000915 	stw	fp,36(sp)
   25bd4:	ddc00815 	stw	r23,32(sp)
   25bd8:	dd800715 	stw	r22,28(sp)
   25bdc:	dd400615 	stw	r21,24(sp)
   25be0:	dd000515 	stw	r20,20(sp)
   25be4:	dcc00415 	stw	r19,16(sp)
   25be8:	dc400215 	stw	r17,8(sp)
   25bec:	dc000115 	stw	r16,4(sp)
   25bf0:	288002c4 	addi	r2,r5,11
   25bf4:	00c00584 	movi	r3,22
   25bf8:	2025883a 	mov	r18,r4
   25bfc:	18807f2e 	bgeu	r3,r2,25dfc <_malloc_r+0x238>
   25c00:	047ffe04 	movi	r17,-8
   25c04:	1462703a 	and	r17,r2,r17
   25c08:	8800a316 	blt	r17,zero,25e98 <_malloc_r+0x2d4>
   25c0c:	8940a236 	bltu	r17,r5,25e98 <_malloc_r+0x2d4>
   25c10:	002dd740 	call	2dd74 <__malloc_lock>
   25c14:	00807dc4 	movi	r2,503
   25c18:	1441e92e 	bgeu	r2,r17,263c0 <_malloc_r+0x7fc>
   25c1c:	8804d27a 	srli	r2,r17,9
   25c20:	1000a126 	beq	r2,zero,25ea8 <_malloc_r+0x2e4>
   25c24:	00c00104 	movi	r3,4
   25c28:	18811e36 	bltu	r3,r2,260a4 <_malloc_r+0x4e0>
   25c2c:	8804d1ba 	srli	r2,r17,6
   25c30:	12000e44 	addi	r8,r2,57
   25c34:	11c00e04 	addi	r7,r2,56
   25c38:	4209883a 	add	r4,r8,r8
   25c3c:	04c000f4 	movhi	r19,3
   25c40:	2109883a 	add	r4,r4,r4
   25c44:	9cc68d04 	addi	r19,r19,6708
   25c48:	2109883a 	add	r4,r4,r4
   25c4c:	9909883a 	add	r4,r19,r4
   25c50:	24000117 	ldw	r16,4(r4)
   25c54:	213ffe04 	addi	r4,r4,-8
   25c58:	24009726 	beq	r4,r16,25eb8 <_malloc_r+0x2f4>
   25c5c:	80800117 	ldw	r2,4(r16)
   25c60:	01bfff04 	movi	r6,-4
   25c64:	014003c4 	movi	r5,15
   25c68:	1184703a 	and	r2,r2,r6
   25c6c:	1447c83a 	sub	r3,r2,r17
   25c70:	28c00716 	blt	r5,r3,25c90 <_malloc_r+0xcc>
   25c74:	1800920e 	bge	r3,zero,25ec0 <_malloc_r+0x2fc>
   25c78:	84000317 	ldw	r16,12(r16)
   25c7c:	24008e26 	beq	r4,r16,25eb8 <_malloc_r+0x2f4>
   25c80:	80800117 	ldw	r2,4(r16)
   25c84:	1184703a 	and	r2,r2,r6
   25c88:	1447c83a 	sub	r3,r2,r17
   25c8c:	28fff90e 	bge	r5,r3,25c74 <_gp+0xfffeab10>
   25c90:	3809883a 	mov	r4,r7
   25c94:	018000f4 	movhi	r6,3
   25c98:	9c000417 	ldw	r16,16(r19)
   25c9c:	31868d04 	addi	r6,r6,6708
   25ca0:	32000204 	addi	r8,r6,8
   25ca4:	82013426 	beq	r16,r8,26178 <_malloc_r+0x5b4>
   25ca8:	80c00117 	ldw	r3,4(r16)
   25cac:	00bfff04 	movi	r2,-4
   25cb0:	188e703a 	and	r7,r3,r2
   25cb4:	3c45c83a 	sub	r2,r7,r17
   25cb8:	00c003c4 	movi	r3,15
   25cbc:	18811f16 	blt	r3,r2,2613c <_malloc_r+0x578>
   25cc0:	32000515 	stw	r8,20(r6)
   25cc4:	32000415 	stw	r8,16(r6)
   25cc8:	10007f0e 	bge	r2,zero,25ec8 <_malloc_r+0x304>
   25ccc:	00807fc4 	movi	r2,511
   25cd0:	11c0fd36 	bltu	r2,r7,260c8 <_malloc_r+0x504>
   25cd4:	3806d0fa 	srli	r3,r7,3
   25cd8:	01c00044 	movi	r7,1
   25cdc:	30800117 	ldw	r2,4(r6)
   25ce0:	19400044 	addi	r5,r3,1
   25ce4:	294b883a 	add	r5,r5,r5
   25ce8:	1807d0ba 	srai	r3,r3,2
   25cec:	294b883a 	add	r5,r5,r5
   25cf0:	294b883a 	add	r5,r5,r5
   25cf4:	298b883a 	add	r5,r5,r6
   25cf8:	38c6983a 	sll	r3,r7,r3
   25cfc:	29c00017 	ldw	r7,0(r5)
   25d00:	2a7ffe04 	addi	r9,r5,-8
   25d04:	1886b03a 	or	r3,r3,r2
   25d08:	82400315 	stw	r9,12(r16)
   25d0c:	81c00215 	stw	r7,8(r16)
   25d10:	30c00115 	stw	r3,4(r6)
   25d14:	2c000015 	stw	r16,0(r5)
   25d18:	3c000315 	stw	r16,12(r7)
   25d1c:	2005d0ba 	srai	r2,r4,2
   25d20:	01400044 	movi	r5,1
   25d24:	288a983a 	sll	r5,r5,r2
   25d28:	19406f36 	bltu	r3,r5,25ee8 <_malloc_r+0x324>
   25d2c:	28c4703a 	and	r2,r5,r3
   25d30:	10000a1e 	bne	r2,zero,25d5c <_malloc_r+0x198>
   25d34:	00bfff04 	movi	r2,-4
   25d38:	294b883a 	add	r5,r5,r5
   25d3c:	2088703a 	and	r4,r4,r2
   25d40:	28c4703a 	and	r2,r5,r3
   25d44:	21000104 	addi	r4,r4,4
   25d48:	1000041e 	bne	r2,zero,25d5c <_malloc_r+0x198>
   25d4c:	294b883a 	add	r5,r5,r5
   25d50:	28c4703a 	and	r2,r5,r3
   25d54:	21000104 	addi	r4,r4,4
   25d58:	103ffc26 	beq	r2,zero,25d4c <_gp+0xfffeabe8>
   25d5c:	02bfff04 	movi	r10,-4
   25d60:	024003c4 	movi	r9,15
   25d64:	21800044 	addi	r6,r4,1
   25d68:	318d883a 	add	r6,r6,r6
   25d6c:	318d883a 	add	r6,r6,r6
   25d70:	318d883a 	add	r6,r6,r6
   25d74:	998d883a 	add	r6,r19,r6
   25d78:	333ffe04 	addi	r12,r6,-8
   25d7c:	2017883a 	mov	r11,r4
   25d80:	31800104 	addi	r6,r6,4
   25d84:	34000017 	ldw	r16,0(r6)
   25d88:	31fffd04 	addi	r7,r6,-12
   25d8c:	81c0041e 	bne	r16,r7,25da0 <_malloc_r+0x1dc>
   25d90:	0000fb06 	br	26180 <_malloc_r+0x5bc>
   25d94:	1801030e 	bge	r3,zero,261a4 <_malloc_r+0x5e0>
   25d98:	84000317 	ldw	r16,12(r16)
   25d9c:	81c0f826 	beq	r16,r7,26180 <_malloc_r+0x5bc>
   25da0:	80800117 	ldw	r2,4(r16)
   25da4:	1284703a 	and	r2,r2,r10
   25da8:	1447c83a 	sub	r3,r2,r17
   25dac:	48fff90e 	bge	r9,r3,25d94 <_gp+0xfffeac30>
   25db0:	80800317 	ldw	r2,12(r16)
   25db4:	81000217 	ldw	r4,8(r16)
   25db8:	89400054 	ori	r5,r17,1
   25dbc:	81400115 	stw	r5,4(r16)
   25dc0:	20800315 	stw	r2,12(r4)
   25dc4:	11000215 	stw	r4,8(r2)
   25dc8:	8463883a 	add	r17,r16,r17
   25dcc:	9c400515 	stw	r17,20(r19)
   25dd0:	9c400415 	stw	r17,16(r19)
   25dd4:	18800054 	ori	r2,r3,1
   25dd8:	88800115 	stw	r2,4(r17)
   25ddc:	8a000315 	stw	r8,12(r17)
   25de0:	8a000215 	stw	r8,8(r17)
   25de4:	88e3883a 	add	r17,r17,r3
   25de8:	88c00015 	stw	r3,0(r17)
   25dec:	9009883a 	mov	r4,r18
   25df0:	002dd980 	call	2dd98 <__malloc_unlock>
   25df4:	80800204 	addi	r2,r16,8
   25df8:	00001b06 	br	25e68 <_malloc_r+0x2a4>
   25dfc:	04400404 	movi	r17,16
   25e00:	89402536 	bltu	r17,r5,25e98 <_malloc_r+0x2d4>
   25e04:	002dd740 	call	2dd74 <__malloc_lock>
   25e08:	00800184 	movi	r2,6
   25e0c:	01000084 	movi	r4,2
   25e10:	04c000f4 	movhi	r19,3
   25e14:	1085883a 	add	r2,r2,r2
   25e18:	9cc68d04 	addi	r19,r19,6708
   25e1c:	1085883a 	add	r2,r2,r2
   25e20:	9885883a 	add	r2,r19,r2
   25e24:	14000117 	ldw	r16,4(r2)
   25e28:	10fffe04 	addi	r3,r2,-8
   25e2c:	80c0d926 	beq	r16,r3,26194 <_malloc_r+0x5d0>
   25e30:	80c00117 	ldw	r3,4(r16)
   25e34:	81000317 	ldw	r4,12(r16)
   25e38:	00bfff04 	movi	r2,-4
   25e3c:	1884703a 	and	r2,r3,r2
   25e40:	81400217 	ldw	r5,8(r16)
   25e44:	8085883a 	add	r2,r16,r2
   25e48:	10c00117 	ldw	r3,4(r2)
   25e4c:	29000315 	stw	r4,12(r5)
   25e50:	21400215 	stw	r5,8(r4)
   25e54:	18c00054 	ori	r3,r3,1
   25e58:	10c00115 	stw	r3,4(r2)
   25e5c:	9009883a 	mov	r4,r18
   25e60:	002dd980 	call	2dd98 <__malloc_unlock>
   25e64:	80800204 	addi	r2,r16,8
   25e68:	dfc00a17 	ldw	ra,40(sp)
   25e6c:	df000917 	ldw	fp,36(sp)
   25e70:	ddc00817 	ldw	r23,32(sp)
   25e74:	dd800717 	ldw	r22,28(sp)
   25e78:	dd400617 	ldw	r21,24(sp)
   25e7c:	dd000517 	ldw	r20,20(sp)
   25e80:	dcc00417 	ldw	r19,16(sp)
   25e84:	dc800317 	ldw	r18,12(sp)
   25e88:	dc400217 	ldw	r17,8(sp)
   25e8c:	dc000117 	ldw	r16,4(sp)
   25e90:	dec00b04 	addi	sp,sp,44
   25e94:	f800283a 	ret
   25e98:	00800304 	movi	r2,12
   25e9c:	90800015 	stw	r2,0(r18)
   25ea0:	0005883a 	mov	r2,zero
   25ea4:	003ff006 	br	25e68 <_gp+0xfffead04>
   25ea8:	01002004 	movi	r4,128
   25eac:	02001004 	movi	r8,64
   25eb0:	01c00fc4 	movi	r7,63
   25eb4:	003f6106 	br	25c3c <_gp+0xfffeaad8>
   25eb8:	4009883a 	mov	r4,r8
   25ebc:	003f7506 	br	25c94 <_gp+0xfffeab30>
   25ec0:	81000317 	ldw	r4,12(r16)
   25ec4:	003fde06 	br	25e40 <_gp+0xfffeacdc>
   25ec8:	81c5883a 	add	r2,r16,r7
   25ecc:	11400117 	ldw	r5,4(r2)
   25ed0:	9009883a 	mov	r4,r18
   25ed4:	29400054 	ori	r5,r5,1
   25ed8:	11400115 	stw	r5,4(r2)
   25edc:	002dd980 	call	2dd98 <__malloc_unlock>
   25ee0:	80800204 	addi	r2,r16,8
   25ee4:	003fe006 	br	25e68 <_gp+0xfffead04>
   25ee8:	9c000217 	ldw	r16,8(r19)
   25eec:	00bfff04 	movi	r2,-4
   25ef0:	85800117 	ldw	r22,4(r16)
   25ef4:	b0ac703a 	and	r22,r22,r2
   25ef8:	b4400336 	bltu	r22,r17,25f08 <_malloc_r+0x344>
   25efc:	b445c83a 	sub	r2,r22,r17
   25f00:	00c003c4 	movi	r3,15
   25f04:	18805d16 	blt	r3,r2,2607c <_malloc_r+0x4b8>
   25f08:	05c000f4 	movhi	r23,3
   25f0c:	008000f4 	movhi	r2,3
   25f10:	10937504 	addi	r2,r2,19924
   25f14:	bdcc5c04 	addi	r23,r23,12656
   25f18:	15400017 	ldw	r21,0(r2)
   25f1c:	b8c00017 	ldw	r3,0(r23)
   25f20:	00bfffc4 	movi	r2,-1
   25f24:	858d883a 	add	r6,r16,r22
   25f28:	8d6b883a 	add	r21,r17,r21
   25f2c:	1880ea26 	beq	r3,r2,262d8 <_malloc_r+0x714>
   25f30:	ad4403c4 	addi	r21,r21,4111
   25f34:	00bc0004 	movi	r2,-4096
   25f38:	a8aa703a 	and	r21,r21,r2
   25f3c:	a80b883a 	mov	r5,r21
   25f40:	9009883a 	mov	r4,r18
   25f44:	d9800015 	stw	r6,0(sp)
   25f48:	0027f100 	call	27f10 <_sbrk_r>
   25f4c:	1029883a 	mov	r20,r2
   25f50:	00bfffc4 	movi	r2,-1
   25f54:	d9800017 	ldw	r6,0(sp)
   25f58:	a080e826 	beq	r20,r2,262fc <_malloc_r+0x738>
   25f5c:	a180a636 	bltu	r20,r6,261f8 <_malloc_r+0x634>
   25f60:	070000f4 	movhi	fp,3
   25f64:	e7137e04 	addi	fp,fp,19960
   25f68:	e0800017 	ldw	r2,0(fp)
   25f6c:	a887883a 	add	r3,r21,r2
   25f70:	e0c00015 	stw	r3,0(fp)
   25f74:	3500e626 	beq	r6,r20,26310 <_malloc_r+0x74c>
   25f78:	b9000017 	ldw	r4,0(r23)
   25f7c:	00bfffc4 	movi	r2,-1
   25f80:	2080ee26 	beq	r4,r2,2633c <_malloc_r+0x778>
   25f84:	a185c83a 	sub	r2,r20,r6
   25f88:	10c5883a 	add	r2,r2,r3
   25f8c:	e0800015 	stw	r2,0(fp)
   25f90:	a0c001cc 	andi	r3,r20,7
   25f94:	1800bc26 	beq	r3,zero,26288 <_malloc_r+0x6c4>
   25f98:	a0e9c83a 	sub	r20,r20,r3
   25f9c:	00840204 	movi	r2,4104
   25fa0:	a5000204 	addi	r20,r20,8
   25fa4:	10c7c83a 	sub	r3,r2,r3
   25fa8:	a545883a 	add	r2,r20,r21
   25fac:	1083ffcc 	andi	r2,r2,4095
   25fb0:	18abc83a 	sub	r21,r3,r2
   25fb4:	a80b883a 	mov	r5,r21
   25fb8:	9009883a 	mov	r4,r18
   25fbc:	0027f100 	call	27f10 <_sbrk_r>
   25fc0:	00ffffc4 	movi	r3,-1
   25fc4:	10c0e126 	beq	r2,r3,2634c <_malloc_r+0x788>
   25fc8:	1505c83a 	sub	r2,r2,r20
   25fcc:	1545883a 	add	r2,r2,r21
   25fd0:	10800054 	ori	r2,r2,1
   25fd4:	e0c00017 	ldw	r3,0(fp)
   25fd8:	9d000215 	stw	r20,8(r19)
   25fdc:	a0800115 	stw	r2,4(r20)
   25fe0:	a8c7883a 	add	r3,r21,r3
   25fe4:	e0c00015 	stw	r3,0(fp)
   25fe8:	84c00e26 	beq	r16,r19,26024 <_malloc_r+0x460>
   25fec:	018003c4 	movi	r6,15
   25ff0:	3580a72e 	bgeu	r6,r22,26290 <_malloc_r+0x6cc>
   25ff4:	81400117 	ldw	r5,4(r16)
   25ff8:	013ffe04 	movi	r4,-8
   25ffc:	b0bffd04 	addi	r2,r22,-12
   26000:	1104703a 	and	r2,r2,r4
   26004:	2900004c 	andi	r4,r5,1
   26008:	2088b03a 	or	r4,r4,r2
   2600c:	81000115 	stw	r4,4(r16)
   26010:	01400144 	movi	r5,5
   26014:	8089883a 	add	r4,r16,r2
   26018:	21400115 	stw	r5,4(r4)
   2601c:	21400215 	stw	r5,8(r4)
   26020:	3080cd36 	bltu	r6,r2,26358 <_malloc_r+0x794>
   26024:	008000f4 	movhi	r2,3
   26028:	10937404 	addi	r2,r2,19920
   2602c:	11000017 	ldw	r4,0(r2)
   26030:	20c0012e 	bgeu	r4,r3,26038 <_malloc_r+0x474>
   26034:	10c00015 	stw	r3,0(r2)
   26038:	008000f4 	movhi	r2,3
   2603c:	10937304 	addi	r2,r2,19916
   26040:	11000017 	ldw	r4,0(r2)
   26044:	9c000217 	ldw	r16,8(r19)
   26048:	20c0012e 	bgeu	r4,r3,26050 <_malloc_r+0x48c>
   2604c:	10c00015 	stw	r3,0(r2)
   26050:	80c00117 	ldw	r3,4(r16)
   26054:	00bfff04 	movi	r2,-4
   26058:	1886703a 	and	r3,r3,r2
   2605c:	1c45c83a 	sub	r2,r3,r17
   26060:	1c400236 	bltu	r3,r17,2606c <_malloc_r+0x4a8>
   26064:	00c003c4 	movi	r3,15
   26068:	18800416 	blt	r3,r2,2607c <_malloc_r+0x4b8>
   2606c:	9009883a 	mov	r4,r18
   26070:	002dd980 	call	2dd98 <__malloc_unlock>
   26074:	0005883a 	mov	r2,zero
   26078:	003f7b06 	br	25e68 <_gp+0xfffead04>
   2607c:	88c00054 	ori	r3,r17,1
   26080:	80c00115 	stw	r3,4(r16)
   26084:	8463883a 	add	r17,r16,r17
   26088:	10800054 	ori	r2,r2,1
   2608c:	9c400215 	stw	r17,8(r19)
   26090:	88800115 	stw	r2,4(r17)
   26094:	9009883a 	mov	r4,r18
   26098:	002dd980 	call	2dd98 <__malloc_unlock>
   2609c:	80800204 	addi	r2,r16,8
   260a0:	003f7106 	br	25e68 <_gp+0xfffead04>
   260a4:	00c00504 	movi	r3,20
   260a8:	18804a2e 	bgeu	r3,r2,261d4 <_malloc_r+0x610>
   260ac:	00c01504 	movi	r3,84
   260b0:	18806e36 	bltu	r3,r2,2626c <_malloc_r+0x6a8>
   260b4:	8804d33a 	srli	r2,r17,12
   260b8:	12001bc4 	addi	r8,r2,111
   260bc:	11c01b84 	addi	r7,r2,110
   260c0:	4209883a 	add	r4,r8,r8
   260c4:	003edd06 	br	25c3c <_gp+0xfffeaad8>
   260c8:	3804d27a 	srli	r2,r7,9
   260cc:	00c00104 	movi	r3,4
   260d0:	1880442e 	bgeu	r3,r2,261e4 <_malloc_r+0x620>
   260d4:	00c00504 	movi	r3,20
   260d8:	18808136 	bltu	r3,r2,262e0 <_malloc_r+0x71c>
   260dc:	11401704 	addi	r5,r2,92
   260e0:	10c016c4 	addi	r3,r2,91
   260e4:	294b883a 	add	r5,r5,r5
   260e8:	294b883a 	add	r5,r5,r5
   260ec:	294b883a 	add	r5,r5,r5
   260f0:	994b883a 	add	r5,r19,r5
   260f4:	28800017 	ldw	r2,0(r5)
   260f8:	018000f4 	movhi	r6,3
   260fc:	297ffe04 	addi	r5,r5,-8
   26100:	31868d04 	addi	r6,r6,6708
   26104:	28806526 	beq	r5,r2,2629c <_malloc_r+0x6d8>
   26108:	01bfff04 	movi	r6,-4
   2610c:	10c00117 	ldw	r3,4(r2)
   26110:	1986703a 	and	r3,r3,r6
   26114:	38c0022e 	bgeu	r7,r3,26120 <_malloc_r+0x55c>
   26118:	10800217 	ldw	r2,8(r2)
   2611c:	28bffb1e 	bne	r5,r2,2610c <_gp+0xfffeafa8>
   26120:	11400317 	ldw	r5,12(r2)
   26124:	98c00117 	ldw	r3,4(r19)
   26128:	81400315 	stw	r5,12(r16)
   2612c:	80800215 	stw	r2,8(r16)
   26130:	2c000215 	stw	r16,8(r5)
   26134:	14000315 	stw	r16,12(r2)
   26138:	003ef806 	br	25d1c <_gp+0xfffeabb8>
   2613c:	88c00054 	ori	r3,r17,1
   26140:	80c00115 	stw	r3,4(r16)
   26144:	8463883a 	add	r17,r16,r17
   26148:	34400515 	stw	r17,20(r6)
   2614c:	34400415 	stw	r17,16(r6)
   26150:	10c00054 	ori	r3,r2,1
   26154:	8a000315 	stw	r8,12(r17)
   26158:	8a000215 	stw	r8,8(r17)
   2615c:	88c00115 	stw	r3,4(r17)
   26160:	88a3883a 	add	r17,r17,r2
   26164:	88800015 	stw	r2,0(r17)
   26168:	9009883a 	mov	r4,r18
   2616c:	002dd980 	call	2dd98 <__malloc_unlock>
   26170:	80800204 	addi	r2,r16,8
   26174:	003f3c06 	br	25e68 <_gp+0xfffead04>
   26178:	30c00117 	ldw	r3,4(r6)
   2617c:	003ee706 	br	25d1c <_gp+0xfffeabb8>
   26180:	5ac00044 	addi	r11,r11,1
   26184:	588000cc 	andi	r2,r11,3
   26188:	31800204 	addi	r6,r6,8
   2618c:	103efd1e 	bne	r2,zero,25d84 <_gp+0xfffeac20>
   26190:	00002406 	br	26224 <_malloc_r+0x660>
   26194:	14000317 	ldw	r16,12(r2)
   26198:	143f251e 	bne	r2,r16,25e30 <_gp+0xfffeaccc>
   2619c:	21000084 	addi	r4,r4,2
   261a0:	003ebc06 	br	25c94 <_gp+0xfffeab30>
   261a4:	8085883a 	add	r2,r16,r2
   261a8:	10c00117 	ldw	r3,4(r2)
   261ac:	81000317 	ldw	r4,12(r16)
   261b0:	81400217 	ldw	r5,8(r16)
   261b4:	18c00054 	ori	r3,r3,1
   261b8:	10c00115 	stw	r3,4(r2)
   261bc:	29000315 	stw	r4,12(r5)
   261c0:	21400215 	stw	r5,8(r4)
   261c4:	9009883a 	mov	r4,r18
   261c8:	002dd980 	call	2dd98 <__malloc_unlock>
   261cc:	80800204 	addi	r2,r16,8
   261d0:	003f2506 	br	25e68 <_gp+0xfffead04>
   261d4:	12001704 	addi	r8,r2,92
   261d8:	11c016c4 	addi	r7,r2,91
   261dc:	4209883a 	add	r4,r8,r8
   261e0:	003e9606 	br	25c3c <_gp+0xfffeaad8>
   261e4:	3804d1ba 	srli	r2,r7,6
   261e8:	11400e44 	addi	r5,r2,57
   261ec:	10c00e04 	addi	r3,r2,56
   261f0:	294b883a 	add	r5,r5,r5
   261f4:	003fbc06 	br	260e8 <_gp+0xfffeaf84>
   261f8:	84ff5926 	beq	r16,r19,25f60 <_gp+0xfffeadfc>
   261fc:	008000f4 	movhi	r2,3
   26200:	10868d04 	addi	r2,r2,6708
   26204:	14000217 	ldw	r16,8(r2)
   26208:	00bfff04 	movi	r2,-4
   2620c:	80c00117 	ldw	r3,4(r16)
   26210:	1886703a 	and	r3,r3,r2
   26214:	003f9106 	br	2605c <_gp+0xfffeaef8>
   26218:	60800217 	ldw	r2,8(r12)
   2621c:	213fffc4 	addi	r4,r4,-1
   26220:	1300651e 	bne	r2,r12,263b8 <_malloc_r+0x7f4>
   26224:	208000cc 	andi	r2,r4,3
   26228:	633ffe04 	addi	r12,r12,-8
   2622c:	103ffa1e 	bne	r2,zero,26218 <_gp+0xfffeb0b4>
   26230:	98800117 	ldw	r2,4(r19)
   26234:	0146303a 	nor	r3,zero,r5
   26238:	1884703a 	and	r2,r3,r2
   2623c:	98800115 	stw	r2,4(r19)
   26240:	294b883a 	add	r5,r5,r5
   26244:	117f2836 	bltu	r2,r5,25ee8 <_gp+0xfffead84>
   26248:	283f2726 	beq	r5,zero,25ee8 <_gp+0xfffead84>
   2624c:	2886703a 	and	r3,r5,r2
   26250:	5809883a 	mov	r4,r11
   26254:	183ec31e 	bne	r3,zero,25d64 <_gp+0xfffeac00>
   26258:	294b883a 	add	r5,r5,r5
   2625c:	2886703a 	and	r3,r5,r2
   26260:	21000104 	addi	r4,r4,4
   26264:	183ffc26 	beq	r3,zero,26258 <_gp+0xfffeb0f4>
   26268:	003ebe06 	br	25d64 <_gp+0xfffeac00>
   2626c:	00c05504 	movi	r3,340
   26270:	18801236 	bltu	r3,r2,262bc <_malloc_r+0x6f8>
   26274:	8804d3fa 	srli	r2,r17,15
   26278:	12001e04 	addi	r8,r2,120
   2627c:	11c01dc4 	addi	r7,r2,119
   26280:	4209883a 	add	r4,r8,r8
   26284:	003e6d06 	br	25c3c <_gp+0xfffeaad8>
   26288:	00c40004 	movi	r3,4096
   2628c:	003f4606 	br	25fa8 <_gp+0xfffeae44>
   26290:	00800044 	movi	r2,1
   26294:	a0800115 	stw	r2,4(r20)
   26298:	003f7406 	br	2606c <_gp+0xfffeaf08>
   2629c:	1805d0ba 	srai	r2,r3,2
   262a0:	01c00044 	movi	r7,1
   262a4:	30c00117 	ldw	r3,4(r6)
   262a8:	388e983a 	sll	r7,r7,r2
   262ac:	2805883a 	mov	r2,r5
   262b0:	38c6b03a 	or	r3,r7,r3
   262b4:	30c00115 	stw	r3,4(r6)
   262b8:	003f9b06 	br	26128 <_gp+0xfffeafc4>
   262bc:	00c15504 	movi	r3,1364
   262c0:	18801a36 	bltu	r3,r2,2632c <_malloc_r+0x768>
   262c4:	8804d4ba 	srli	r2,r17,18
   262c8:	12001f44 	addi	r8,r2,125
   262cc:	11c01f04 	addi	r7,r2,124
   262d0:	4209883a 	add	r4,r8,r8
   262d4:	003e5906 	br	25c3c <_gp+0xfffeaad8>
   262d8:	ad400404 	addi	r21,r21,16
   262dc:	003f1706 	br	25f3c <_gp+0xfffeadd8>
   262e0:	00c01504 	movi	r3,84
   262e4:	18802336 	bltu	r3,r2,26374 <_malloc_r+0x7b0>
   262e8:	3804d33a 	srli	r2,r7,12
   262ec:	11401bc4 	addi	r5,r2,111
   262f0:	10c01b84 	addi	r3,r2,110
   262f4:	294b883a 	add	r5,r5,r5
   262f8:	003f7b06 	br	260e8 <_gp+0xfffeaf84>
   262fc:	9c000217 	ldw	r16,8(r19)
   26300:	00bfff04 	movi	r2,-4
   26304:	80c00117 	ldw	r3,4(r16)
   26308:	1886703a 	and	r3,r3,r2
   2630c:	003f5306 	br	2605c <_gp+0xfffeaef8>
   26310:	3083ffcc 	andi	r2,r6,4095
   26314:	103f181e 	bne	r2,zero,25f78 <_gp+0xfffeae14>
   26318:	99000217 	ldw	r4,8(r19)
   2631c:	b545883a 	add	r2,r22,r21
   26320:	10800054 	ori	r2,r2,1
   26324:	20800115 	stw	r2,4(r4)
   26328:	003f3e06 	br	26024 <_gp+0xfffeaec0>
   2632c:	01003f84 	movi	r4,254
   26330:	02001fc4 	movi	r8,127
   26334:	01c01f84 	movi	r7,126
   26338:	003e4006 	br	25c3c <_gp+0xfffeaad8>
   2633c:	008000f4 	movhi	r2,3
   26340:	108c5c04 	addi	r2,r2,12656
   26344:	15000015 	stw	r20,0(r2)
   26348:	003f1106 	br	25f90 <_gp+0xfffeae2c>
   2634c:	00800044 	movi	r2,1
   26350:	002b883a 	mov	r21,zero
   26354:	003f1f06 	br	25fd4 <_gp+0xfffeae70>
   26358:	81400204 	addi	r5,r16,8
   2635c:	9009883a 	mov	r4,r18
   26360:	0024fcc0 	call	24fcc <_free_r>
   26364:	008000f4 	movhi	r2,3
   26368:	10937e04 	addi	r2,r2,19960
   2636c:	10c00017 	ldw	r3,0(r2)
   26370:	003f2c06 	br	26024 <_gp+0xfffeaec0>
   26374:	00c05504 	movi	r3,340
   26378:	18800536 	bltu	r3,r2,26390 <_malloc_r+0x7cc>
   2637c:	3804d3fa 	srli	r2,r7,15
   26380:	11401e04 	addi	r5,r2,120
   26384:	10c01dc4 	addi	r3,r2,119
   26388:	294b883a 	add	r5,r5,r5
   2638c:	003f5606 	br	260e8 <_gp+0xfffeaf84>
   26390:	00c15504 	movi	r3,1364
   26394:	18800536 	bltu	r3,r2,263ac <_malloc_r+0x7e8>
   26398:	3804d4ba 	srli	r2,r7,18
   2639c:	11401f44 	addi	r5,r2,125
   263a0:	10c01f04 	addi	r3,r2,124
   263a4:	294b883a 	add	r5,r5,r5
   263a8:	003f4f06 	br	260e8 <_gp+0xfffeaf84>
   263ac:	01403f84 	movi	r5,254
   263b0:	00c01f84 	movi	r3,126
   263b4:	003f4c06 	br	260e8 <_gp+0xfffeaf84>
   263b8:	98800117 	ldw	r2,4(r19)
   263bc:	003fa006 	br	26240 <_gp+0xfffeb0dc>
   263c0:	8808d0fa 	srli	r4,r17,3
   263c4:	20800044 	addi	r2,r4,1
   263c8:	1085883a 	add	r2,r2,r2
   263cc:	003e9006 	br	25e10 <_gp+0xfffeacac>

000263d0 <memchr>:
   263d0:	208000cc 	andi	r2,r4,3
   263d4:	280f883a 	mov	r7,r5
   263d8:	10003426 	beq	r2,zero,264ac <memchr+0xdc>
   263dc:	30bfffc4 	addi	r2,r6,-1
   263e0:	30001a26 	beq	r6,zero,2644c <memchr+0x7c>
   263e4:	20c00003 	ldbu	r3,0(r4)
   263e8:	29803fcc 	andi	r6,r5,255
   263ec:	30c0051e 	bne	r6,r3,26404 <memchr+0x34>
   263f0:	00001806 	br	26454 <memchr+0x84>
   263f4:	10001526 	beq	r2,zero,2644c <memchr+0x7c>
   263f8:	20c00003 	ldbu	r3,0(r4)
   263fc:	10bfffc4 	addi	r2,r2,-1
   26400:	30c01426 	beq	r6,r3,26454 <memchr+0x84>
   26404:	21000044 	addi	r4,r4,1
   26408:	20c000cc 	andi	r3,r4,3
   2640c:	183ff91e 	bne	r3,zero,263f4 <_gp+0xfffeb290>
   26410:	020000c4 	movi	r8,3
   26414:	40801136 	bltu	r8,r2,2645c <memchr+0x8c>
   26418:	10000c26 	beq	r2,zero,2644c <memchr+0x7c>
   2641c:	20c00003 	ldbu	r3,0(r4)
   26420:	29403fcc 	andi	r5,r5,255
   26424:	28c00b26 	beq	r5,r3,26454 <memchr+0x84>
   26428:	20c00044 	addi	r3,r4,1
   2642c:	39803fcc 	andi	r6,r7,255
   26430:	2089883a 	add	r4,r4,r2
   26434:	00000306 	br	26444 <memchr+0x74>
   26438:	18c00044 	addi	r3,r3,1
   2643c:	197fffc3 	ldbu	r5,-1(r3)
   26440:	31400526 	beq	r6,r5,26458 <memchr+0x88>
   26444:	1805883a 	mov	r2,r3
   26448:	20fffb1e 	bne	r4,r3,26438 <_gp+0xfffeb2d4>
   2644c:	0005883a 	mov	r2,zero
   26450:	f800283a 	ret
   26454:	2005883a 	mov	r2,r4
   26458:	f800283a 	ret
   2645c:	28c03fcc 	andi	r3,r5,255
   26460:	1812923a 	slli	r9,r3,8
   26464:	02ffbff4 	movhi	r11,65279
   26468:	02a02074 	movhi	r10,32897
   2646c:	48d2b03a 	or	r9,r9,r3
   26470:	4806943a 	slli	r3,r9,16
   26474:	5affbfc4 	addi	r11,r11,-257
   26478:	52a02004 	addi	r10,r10,-32640
   2647c:	48d2b03a 	or	r9,r9,r3
   26480:	20c00017 	ldw	r3,0(r4)
   26484:	48c6f03a 	xor	r3,r9,r3
   26488:	1acd883a 	add	r6,r3,r11
   2648c:	00c6303a 	nor	r3,zero,r3
   26490:	30c6703a 	and	r3,r6,r3
   26494:	1a86703a 	and	r3,r3,r10
   26498:	183fe01e 	bne	r3,zero,2641c <_gp+0xfffeb2b8>
   2649c:	10bfff04 	addi	r2,r2,-4
   264a0:	21000104 	addi	r4,r4,4
   264a4:	40bff636 	bltu	r8,r2,26480 <_gp+0xfffeb31c>
   264a8:	003fdb06 	br	26418 <_gp+0xfffeb2b4>
   264ac:	3005883a 	mov	r2,r6
   264b0:	003fd706 	br	26410 <_gp+0xfffeb2ac>

000264b4 <memcpy>:
   264b4:	defffd04 	addi	sp,sp,-12
   264b8:	dfc00215 	stw	ra,8(sp)
   264bc:	dc400115 	stw	r17,4(sp)
   264c0:	dc000015 	stw	r16,0(sp)
   264c4:	00c003c4 	movi	r3,15
   264c8:	2005883a 	mov	r2,r4
   264cc:	1980452e 	bgeu	r3,r6,265e4 <memcpy+0x130>
   264d0:	2906b03a 	or	r3,r5,r4
   264d4:	18c000cc 	andi	r3,r3,3
   264d8:	1800441e 	bne	r3,zero,265ec <memcpy+0x138>
   264dc:	347ffc04 	addi	r17,r6,-16
   264e0:	8822d13a 	srli	r17,r17,4
   264e4:	28c00104 	addi	r3,r5,4
   264e8:	23400104 	addi	r13,r4,4
   264ec:	8820913a 	slli	r16,r17,4
   264f0:	2b000204 	addi	r12,r5,8
   264f4:	22c00204 	addi	r11,r4,8
   264f8:	84000504 	addi	r16,r16,20
   264fc:	2a800304 	addi	r10,r5,12
   26500:	22400304 	addi	r9,r4,12
   26504:	2c21883a 	add	r16,r5,r16
   26508:	2811883a 	mov	r8,r5
   2650c:	200f883a 	mov	r7,r4
   26510:	41000017 	ldw	r4,0(r8)
   26514:	1fc00017 	ldw	ra,0(r3)
   26518:	63c00017 	ldw	r15,0(r12)
   2651c:	39000015 	stw	r4,0(r7)
   26520:	53800017 	ldw	r14,0(r10)
   26524:	6fc00015 	stw	ra,0(r13)
   26528:	5bc00015 	stw	r15,0(r11)
   2652c:	4b800015 	stw	r14,0(r9)
   26530:	18c00404 	addi	r3,r3,16
   26534:	39c00404 	addi	r7,r7,16
   26538:	42000404 	addi	r8,r8,16
   2653c:	6b400404 	addi	r13,r13,16
   26540:	63000404 	addi	r12,r12,16
   26544:	5ac00404 	addi	r11,r11,16
   26548:	52800404 	addi	r10,r10,16
   2654c:	4a400404 	addi	r9,r9,16
   26550:	1c3fef1e 	bne	r3,r16,26510 <_gp+0xfffeb3ac>
   26554:	89c00044 	addi	r7,r17,1
   26558:	380e913a 	slli	r7,r7,4
   2655c:	310003cc 	andi	r4,r6,15
   26560:	02c000c4 	movi	r11,3
   26564:	11c7883a 	add	r3,r2,r7
   26568:	29cb883a 	add	r5,r5,r7
   2656c:	5900212e 	bgeu	r11,r4,265f4 <memcpy+0x140>
   26570:	1813883a 	mov	r9,r3
   26574:	2811883a 	mov	r8,r5
   26578:	200f883a 	mov	r7,r4
   2657c:	42800017 	ldw	r10,0(r8)
   26580:	4a400104 	addi	r9,r9,4
   26584:	39ffff04 	addi	r7,r7,-4
   26588:	4abfff15 	stw	r10,-4(r9)
   2658c:	42000104 	addi	r8,r8,4
   26590:	59fffa36 	bltu	r11,r7,2657c <_gp+0xfffeb418>
   26594:	213fff04 	addi	r4,r4,-4
   26598:	2008d0ba 	srli	r4,r4,2
   2659c:	318000cc 	andi	r6,r6,3
   265a0:	21000044 	addi	r4,r4,1
   265a4:	2109883a 	add	r4,r4,r4
   265a8:	2109883a 	add	r4,r4,r4
   265ac:	1907883a 	add	r3,r3,r4
   265b0:	290b883a 	add	r5,r5,r4
   265b4:	30000626 	beq	r6,zero,265d0 <memcpy+0x11c>
   265b8:	198d883a 	add	r6,r3,r6
   265bc:	29c00003 	ldbu	r7,0(r5)
   265c0:	18c00044 	addi	r3,r3,1
   265c4:	29400044 	addi	r5,r5,1
   265c8:	19ffffc5 	stb	r7,-1(r3)
   265cc:	19bffb1e 	bne	r3,r6,265bc <_gp+0xfffeb458>
   265d0:	dfc00217 	ldw	ra,8(sp)
   265d4:	dc400117 	ldw	r17,4(sp)
   265d8:	dc000017 	ldw	r16,0(sp)
   265dc:	dec00304 	addi	sp,sp,12
   265e0:	f800283a 	ret
   265e4:	2007883a 	mov	r3,r4
   265e8:	003ff206 	br	265b4 <_gp+0xfffeb450>
   265ec:	2007883a 	mov	r3,r4
   265f0:	003ff106 	br	265b8 <_gp+0xfffeb454>
   265f4:	200d883a 	mov	r6,r4
   265f8:	003fee06 	br	265b4 <_gp+0xfffeb450>

000265fc <memmove>:
   265fc:	2005883a 	mov	r2,r4
   26600:	29000b2e 	bgeu	r5,r4,26630 <memmove+0x34>
   26604:	298f883a 	add	r7,r5,r6
   26608:	21c0092e 	bgeu	r4,r7,26630 <memmove+0x34>
   2660c:	2187883a 	add	r3,r4,r6
   26610:	198bc83a 	sub	r5,r3,r6
   26614:	30004826 	beq	r6,zero,26738 <memmove+0x13c>
   26618:	39ffffc4 	addi	r7,r7,-1
   2661c:	39000003 	ldbu	r4,0(r7)
   26620:	18ffffc4 	addi	r3,r3,-1
   26624:	19000005 	stb	r4,0(r3)
   26628:	28fffb1e 	bne	r5,r3,26618 <_gp+0xfffeb4b4>
   2662c:	f800283a 	ret
   26630:	00c003c4 	movi	r3,15
   26634:	1980412e 	bgeu	r3,r6,2673c <memmove+0x140>
   26638:	2886b03a 	or	r3,r5,r2
   2663c:	18c000cc 	andi	r3,r3,3
   26640:	1800401e 	bne	r3,zero,26744 <memmove+0x148>
   26644:	33fffc04 	addi	r15,r6,-16
   26648:	781ed13a 	srli	r15,r15,4
   2664c:	28c00104 	addi	r3,r5,4
   26650:	13400104 	addi	r13,r2,4
   26654:	781c913a 	slli	r14,r15,4
   26658:	2b000204 	addi	r12,r5,8
   2665c:	12c00204 	addi	r11,r2,8
   26660:	73800504 	addi	r14,r14,20
   26664:	2a800304 	addi	r10,r5,12
   26668:	12400304 	addi	r9,r2,12
   2666c:	2b9d883a 	add	r14,r5,r14
   26670:	2811883a 	mov	r8,r5
   26674:	100f883a 	mov	r7,r2
   26678:	41000017 	ldw	r4,0(r8)
   2667c:	39c00404 	addi	r7,r7,16
   26680:	18c00404 	addi	r3,r3,16
   26684:	393ffc15 	stw	r4,-16(r7)
   26688:	193ffc17 	ldw	r4,-16(r3)
   2668c:	6b400404 	addi	r13,r13,16
   26690:	5ac00404 	addi	r11,r11,16
   26694:	693ffc15 	stw	r4,-16(r13)
   26698:	61000017 	ldw	r4,0(r12)
   2669c:	4a400404 	addi	r9,r9,16
   266a0:	42000404 	addi	r8,r8,16
   266a4:	593ffc15 	stw	r4,-16(r11)
   266a8:	51000017 	ldw	r4,0(r10)
   266ac:	63000404 	addi	r12,r12,16
   266b0:	52800404 	addi	r10,r10,16
   266b4:	493ffc15 	stw	r4,-16(r9)
   266b8:	1bbfef1e 	bne	r3,r14,26678 <_gp+0xfffeb514>
   266bc:	79000044 	addi	r4,r15,1
   266c0:	2008913a 	slli	r4,r4,4
   266c4:	328003cc 	andi	r10,r6,15
   266c8:	02c000c4 	movi	r11,3
   266cc:	1107883a 	add	r3,r2,r4
   266d0:	290b883a 	add	r5,r5,r4
   266d4:	5a801e2e 	bgeu	r11,r10,26750 <memmove+0x154>
   266d8:	1813883a 	mov	r9,r3
   266dc:	2811883a 	mov	r8,r5
   266e0:	500f883a 	mov	r7,r10
   266e4:	41000017 	ldw	r4,0(r8)
   266e8:	4a400104 	addi	r9,r9,4
   266ec:	39ffff04 	addi	r7,r7,-4
   266f0:	493fff15 	stw	r4,-4(r9)
   266f4:	42000104 	addi	r8,r8,4
   266f8:	59fffa36 	bltu	r11,r7,266e4 <_gp+0xfffeb580>
   266fc:	513fff04 	addi	r4,r10,-4
   26700:	2008d0ba 	srli	r4,r4,2
   26704:	318000cc 	andi	r6,r6,3
   26708:	21000044 	addi	r4,r4,1
   2670c:	2109883a 	add	r4,r4,r4
   26710:	2109883a 	add	r4,r4,r4
   26714:	1907883a 	add	r3,r3,r4
   26718:	290b883a 	add	r5,r5,r4
   2671c:	30000b26 	beq	r6,zero,2674c <memmove+0x150>
   26720:	198d883a 	add	r6,r3,r6
   26724:	29c00003 	ldbu	r7,0(r5)
   26728:	18c00044 	addi	r3,r3,1
   2672c:	29400044 	addi	r5,r5,1
   26730:	19ffffc5 	stb	r7,-1(r3)
   26734:	19bffb1e 	bne	r3,r6,26724 <_gp+0xfffeb5c0>
   26738:	f800283a 	ret
   2673c:	1007883a 	mov	r3,r2
   26740:	003ff606 	br	2671c <_gp+0xfffeb5b8>
   26744:	1007883a 	mov	r3,r2
   26748:	003ff506 	br	26720 <_gp+0xfffeb5bc>
   2674c:	f800283a 	ret
   26750:	500d883a 	mov	r6,r10
   26754:	003ff106 	br	2671c <_gp+0xfffeb5b8>

00026758 <memset>:
   26758:	20c000cc 	andi	r3,r4,3
   2675c:	2005883a 	mov	r2,r4
   26760:	18004426 	beq	r3,zero,26874 <memset+0x11c>
   26764:	31ffffc4 	addi	r7,r6,-1
   26768:	30004026 	beq	r6,zero,2686c <memset+0x114>
   2676c:	2813883a 	mov	r9,r5
   26770:	200d883a 	mov	r6,r4
   26774:	2007883a 	mov	r3,r4
   26778:	00000406 	br	2678c <memset+0x34>
   2677c:	3a3fffc4 	addi	r8,r7,-1
   26780:	31800044 	addi	r6,r6,1
   26784:	38003926 	beq	r7,zero,2686c <memset+0x114>
   26788:	400f883a 	mov	r7,r8
   2678c:	18c00044 	addi	r3,r3,1
   26790:	32400005 	stb	r9,0(r6)
   26794:	1a0000cc 	andi	r8,r3,3
   26798:	403ff81e 	bne	r8,zero,2677c <_gp+0xfffeb618>
   2679c:	010000c4 	movi	r4,3
   267a0:	21c02d2e 	bgeu	r4,r7,26858 <memset+0x100>
   267a4:	29003fcc 	andi	r4,r5,255
   267a8:	200c923a 	slli	r6,r4,8
   267ac:	3108b03a 	or	r4,r6,r4
   267b0:	200c943a 	slli	r6,r4,16
   267b4:	218cb03a 	or	r6,r4,r6
   267b8:	010003c4 	movi	r4,15
   267bc:	21c0182e 	bgeu	r4,r7,26820 <memset+0xc8>
   267c0:	3b3ffc04 	addi	r12,r7,-16
   267c4:	6018d13a 	srli	r12,r12,4
   267c8:	1a000104 	addi	r8,r3,4
   267cc:	1ac00204 	addi	r11,r3,8
   267d0:	6008913a 	slli	r4,r12,4
   267d4:	1a800304 	addi	r10,r3,12
   267d8:	1813883a 	mov	r9,r3
   267dc:	21000504 	addi	r4,r4,20
   267e0:	1909883a 	add	r4,r3,r4
   267e4:	49800015 	stw	r6,0(r9)
   267e8:	41800015 	stw	r6,0(r8)
   267ec:	59800015 	stw	r6,0(r11)
   267f0:	51800015 	stw	r6,0(r10)
   267f4:	42000404 	addi	r8,r8,16
   267f8:	4a400404 	addi	r9,r9,16
   267fc:	5ac00404 	addi	r11,r11,16
   26800:	52800404 	addi	r10,r10,16
   26804:	413ff71e 	bne	r8,r4,267e4 <_gp+0xfffeb680>
   26808:	63000044 	addi	r12,r12,1
   2680c:	6018913a 	slli	r12,r12,4
   26810:	39c003cc 	andi	r7,r7,15
   26814:	010000c4 	movi	r4,3
   26818:	1b07883a 	add	r3,r3,r12
   2681c:	21c00e2e 	bgeu	r4,r7,26858 <memset+0x100>
   26820:	1813883a 	mov	r9,r3
   26824:	3811883a 	mov	r8,r7
   26828:	010000c4 	movi	r4,3
   2682c:	49800015 	stw	r6,0(r9)
   26830:	423fff04 	addi	r8,r8,-4
   26834:	4a400104 	addi	r9,r9,4
   26838:	223ffc36 	bltu	r4,r8,2682c <_gp+0xfffeb6c8>
   2683c:	393fff04 	addi	r4,r7,-4
   26840:	2008d0ba 	srli	r4,r4,2
   26844:	39c000cc 	andi	r7,r7,3
   26848:	21000044 	addi	r4,r4,1
   2684c:	2109883a 	add	r4,r4,r4
   26850:	2109883a 	add	r4,r4,r4
   26854:	1907883a 	add	r3,r3,r4
   26858:	38000526 	beq	r7,zero,26870 <memset+0x118>
   2685c:	19cf883a 	add	r7,r3,r7
   26860:	19400005 	stb	r5,0(r3)
   26864:	18c00044 	addi	r3,r3,1
   26868:	38fffd1e 	bne	r7,r3,26860 <_gp+0xfffeb6fc>
   2686c:	f800283a 	ret
   26870:	f800283a 	ret
   26874:	2007883a 	mov	r3,r4
   26878:	300f883a 	mov	r7,r6
   2687c:	003fc706 	br	2679c <_gp+0xfffeb638>

00026880 <_Balloc>:
   26880:	20801317 	ldw	r2,76(r4)
   26884:	defffc04 	addi	sp,sp,-16
   26888:	dc400115 	stw	r17,4(sp)
   2688c:	dc000015 	stw	r16,0(sp)
   26890:	dfc00315 	stw	ra,12(sp)
   26894:	dc800215 	stw	r18,8(sp)
   26898:	2023883a 	mov	r17,r4
   2689c:	2821883a 	mov	r16,r5
   268a0:	10000f26 	beq	r2,zero,268e0 <_Balloc+0x60>
   268a4:	8407883a 	add	r3,r16,r16
   268a8:	18c7883a 	add	r3,r3,r3
   268ac:	10c7883a 	add	r3,r2,r3
   268b0:	18800017 	ldw	r2,0(r3)
   268b4:	10001126 	beq	r2,zero,268fc <_Balloc+0x7c>
   268b8:	11000017 	ldw	r4,0(r2)
   268bc:	19000015 	stw	r4,0(r3)
   268c0:	10000415 	stw	zero,16(r2)
   268c4:	10000315 	stw	zero,12(r2)
   268c8:	dfc00317 	ldw	ra,12(sp)
   268cc:	dc800217 	ldw	r18,8(sp)
   268d0:	dc400117 	ldw	r17,4(sp)
   268d4:	dc000017 	ldw	r16,0(sp)
   268d8:	dec00404 	addi	sp,sp,16
   268dc:	f800283a 	ret
   268e0:	01800844 	movi	r6,33
   268e4:	01400104 	movi	r5,4
   268e8:	00299280 	call	29928 <_calloc_r>
   268ec:	88801315 	stw	r2,76(r17)
   268f0:	103fec1e 	bne	r2,zero,268a4 <_gp+0xfffeb740>
   268f4:	0005883a 	mov	r2,zero
   268f8:	003ff306 	br	268c8 <_gp+0xfffeb764>
   268fc:	01400044 	movi	r5,1
   26900:	2c24983a 	sll	r18,r5,r16
   26904:	8809883a 	mov	r4,r17
   26908:	91800144 	addi	r6,r18,5
   2690c:	318d883a 	add	r6,r6,r6
   26910:	318d883a 	add	r6,r6,r6
   26914:	00299280 	call	29928 <_calloc_r>
   26918:	103ff626 	beq	r2,zero,268f4 <_gp+0xfffeb790>
   2691c:	14000115 	stw	r16,4(r2)
   26920:	14800215 	stw	r18,8(r2)
   26924:	003fe606 	br	268c0 <_gp+0xfffeb75c>

00026928 <_Bfree>:
   26928:	28000826 	beq	r5,zero,2694c <_Bfree+0x24>
   2692c:	28c00117 	ldw	r3,4(r5)
   26930:	20801317 	ldw	r2,76(r4)
   26934:	18c7883a 	add	r3,r3,r3
   26938:	18c7883a 	add	r3,r3,r3
   2693c:	10c5883a 	add	r2,r2,r3
   26940:	10c00017 	ldw	r3,0(r2)
   26944:	28c00015 	stw	r3,0(r5)
   26948:	11400015 	stw	r5,0(r2)
   2694c:	f800283a 	ret

00026950 <__multadd>:
   26950:	defff704 	addi	sp,sp,-36
   26954:	dc800215 	stw	r18,8(sp)
   26958:	2c800417 	ldw	r18,16(r5)
   2695c:	dd800615 	stw	r22,24(sp)
   26960:	dd400515 	stw	r21,20(sp)
   26964:	dd000415 	stw	r20,16(sp)
   26968:	dcc00315 	stw	r19,12(sp)
   2696c:	dc400115 	stw	r17,4(sp)
   26970:	dc000015 	stw	r16,0(sp)
   26974:	dfc00815 	stw	ra,32(sp)
   26978:	ddc00715 	stw	r23,28(sp)
   2697c:	2827883a 	mov	r19,r5
   26980:	2029883a 	mov	r20,r4
   26984:	3023883a 	mov	r17,r6
   26988:	3821883a 	mov	r16,r7
   2698c:	2d400504 	addi	r21,r5,20
   26990:	002d883a 	mov	r22,zero
   26994:	adc00017 	ldw	r23,0(r21)
   26998:	880b883a 	mov	r5,r17
   2699c:	ad400104 	addi	r21,r21,4
   269a0:	b93fffcc 	andi	r4,r23,65535
   269a4:	00208980 	call	20898 <__mulsi3>
   269a8:	b808d43a 	srli	r4,r23,16
   269ac:	880b883a 	mov	r5,r17
   269b0:	1421883a 	add	r16,r2,r16
   269b4:	00208980 	call	20898 <__mulsi3>
   269b8:	800ed43a 	srli	r7,r16,16
   269bc:	80ffffcc 	andi	r3,r16,65535
   269c0:	b5800044 	addi	r22,r22,1
   269c4:	11c5883a 	add	r2,r2,r7
   269c8:	100e943a 	slli	r7,r2,16
   269cc:	1020d43a 	srli	r16,r2,16
   269d0:	38c7883a 	add	r3,r7,r3
   269d4:	a8ffff15 	stw	r3,-4(r21)
   269d8:	b4bfee16 	blt	r22,r18,26994 <_gp+0xfffeb830>
   269dc:	80000926 	beq	r16,zero,26a04 <__multadd+0xb4>
   269e0:	98800217 	ldw	r2,8(r19)
   269e4:	9080130e 	bge	r18,r2,26a34 <__multadd+0xe4>
   269e8:	90800144 	addi	r2,r18,5
   269ec:	1085883a 	add	r2,r2,r2
   269f0:	1085883a 	add	r2,r2,r2
   269f4:	9885883a 	add	r2,r19,r2
   269f8:	14000015 	stw	r16,0(r2)
   269fc:	94800044 	addi	r18,r18,1
   26a00:	9c800415 	stw	r18,16(r19)
   26a04:	9805883a 	mov	r2,r19
   26a08:	dfc00817 	ldw	ra,32(sp)
   26a0c:	ddc00717 	ldw	r23,28(sp)
   26a10:	dd800617 	ldw	r22,24(sp)
   26a14:	dd400517 	ldw	r21,20(sp)
   26a18:	dd000417 	ldw	r20,16(sp)
   26a1c:	dcc00317 	ldw	r19,12(sp)
   26a20:	dc800217 	ldw	r18,8(sp)
   26a24:	dc400117 	ldw	r17,4(sp)
   26a28:	dc000017 	ldw	r16,0(sp)
   26a2c:	dec00904 	addi	sp,sp,36
   26a30:	f800283a 	ret
   26a34:	99400117 	ldw	r5,4(r19)
   26a38:	a009883a 	mov	r4,r20
   26a3c:	29400044 	addi	r5,r5,1
   26a40:	00268800 	call	26880 <_Balloc>
   26a44:	99800417 	ldw	r6,16(r19)
   26a48:	99400304 	addi	r5,r19,12
   26a4c:	11000304 	addi	r4,r2,12
   26a50:	31800084 	addi	r6,r6,2
   26a54:	318d883a 	add	r6,r6,r6
   26a58:	318d883a 	add	r6,r6,r6
   26a5c:	1023883a 	mov	r17,r2
   26a60:	00264b40 	call	264b4 <memcpy>
   26a64:	98000a26 	beq	r19,zero,26a90 <__multadd+0x140>
   26a68:	98c00117 	ldw	r3,4(r19)
   26a6c:	a0801317 	ldw	r2,76(r20)
   26a70:	18c7883a 	add	r3,r3,r3
   26a74:	18c7883a 	add	r3,r3,r3
   26a78:	10c5883a 	add	r2,r2,r3
   26a7c:	10c00017 	ldw	r3,0(r2)
   26a80:	98c00015 	stw	r3,0(r19)
   26a84:	14c00015 	stw	r19,0(r2)
   26a88:	8827883a 	mov	r19,r17
   26a8c:	003fd606 	br	269e8 <_gp+0xfffeb884>
   26a90:	8827883a 	mov	r19,r17
   26a94:	003fd406 	br	269e8 <_gp+0xfffeb884>

00026a98 <__s2b>:
   26a98:	defff904 	addi	sp,sp,-28
   26a9c:	dc400115 	stw	r17,4(sp)
   26aa0:	dc000015 	stw	r16,0(sp)
   26aa4:	2023883a 	mov	r17,r4
   26aa8:	2821883a 	mov	r16,r5
   26aac:	39000204 	addi	r4,r7,8
   26ab0:	01400244 	movi	r5,9
   26ab4:	dcc00315 	stw	r19,12(sp)
   26ab8:	dc800215 	stw	r18,8(sp)
   26abc:	dfc00615 	stw	ra,24(sp)
   26ac0:	dd400515 	stw	r21,20(sp)
   26ac4:	dd000415 	stw	r20,16(sp)
   26ac8:	3825883a 	mov	r18,r7
   26acc:	3027883a 	mov	r19,r6
   26ad0:	002ad800 	call	2ad80 <__divsi3>
   26ad4:	00c00044 	movi	r3,1
   26ad8:	000b883a 	mov	r5,zero
   26adc:	1880030e 	bge	r3,r2,26aec <__s2b+0x54>
   26ae0:	18c7883a 	add	r3,r3,r3
   26ae4:	29400044 	addi	r5,r5,1
   26ae8:	18bffd16 	blt	r3,r2,26ae0 <_gp+0xfffeb97c>
   26aec:	8809883a 	mov	r4,r17
   26af0:	00268800 	call	26880 <_Balloc>
   26af4:	d8c00717 	ldw	r3,28(sp)
   26af8:	10c00515 	stw	r3,20(r2)
   26afc:	00c00044 	movi	r3,1
   26b00:	10c00415 	stw	r3,16(r2)
   26b04:	00c00244 	movi	r3,9
   26b08:	1cc0210e 	bge	r3,r19,26b90 <__s2b+0xf8>
   26b0c:	80eb883a 	add	r21,r16,r3
   26b10:	a829883a 	mov	r20,r21
   26b14:	84e1883a 	add	r16,r16,r19
   26b18:	a1c00007 	ldb	r7,0(r20)
   26b1c:	01800284 	movi	r6,10
   26b20:	a5000044 	addi	r20,r20,1
   26b24:	100b883a 	mov	r5,r2
   26b28:	39fff404 	addi	r7,r7,-48
   26b2c:	8809883a 	mov	r4,r17
   26b30:	00269500 	call	26950 <__multadd>
   26b34:	a43ff81e 	bne	r20,r16,26b18 <_gp+0xfffeb9b4>
   26b38:	ace1883a 	add	r16,r21,r19
   26b3c:	843ffe04 	addi	r16,r16,-8
   26b40:	9c800a0e 	bge	r19,r18,26b6c <__s2b+0xd4>
   26b44:	94e5c83a 	sub	r18,r18,r19
   26b48:	84a5883a 	add	r18,r16,r18
   26b4c:	81c00007 	ldb	r7,0(r16)
   26b50:	01800284 	movi	r6,10
   26b54:	84000044 	addi	r16,r16,1
   26b58:	100b883a 	mov	r5,r2
   26b5c:	39fff404 	addi	r7,r7,-48
   26b60:	8809883a 	mov	r4,r17
   26b64:	00269500 	call	26950 <__multadd>
   26b68:	84bff81e 	bne	r16,r18,26b4c <_gp+0xfffeb9e8>
   26b6c:	dfc00617 	ldw	ra,24(sp)
   26b70:	dd400517 	ldw	r21,20(sp)
   26b74:	dd000417 	ldw	r20,16(sp)
   26b78:	dcc00317 	ldw	r19,12(sp)
   26b7c:	dc800217 	ldw	r18,8(sp)
   26b80:	dc400117 	ldw	r17,4(sp)
   26b84:	dc000017 	ldw	r16,0(sp)
   26b88:	dec00704 	addi	sp,sp,28
   26b8c:	f800283a 	ret
   26b90:	84000284 	addi	r16,r16,10
   26b94:	1827883a 	mov	r19,r3
   26b98:	003fe906 	br	26b40 <_gp+0xfffeb9dc>

00026b9c <__hi0bits>:
   26b9c:	20bfffec 	andhi	r2,r4,65535
   26ba0:	1000141e 	bne	r2,zero,26bf4 <__hi0bits+0x58>
   26ba4:	2008943a 	slli	r4,r4,16
   26ba8:	00800404 	movi	r2,16
   26bac:	20ffc02c 	andhi	r3,r4,65280
   26bb0:	1800021e 	bne	r3,zero,26bbc <__hi0bits+0x20>
   26bb4:	2008923a 	slli	r4,r4,8
   26bb8:	10800204 	addi	r2,r2,8
   26bbc:	20fc002c 	andhi	r3,r4,61440
   26bc0:	1800021e 	bne	r3,zero,26bcc <__hi0bits+0x30>
   26bc4:	2008913a 	slli	r4,r4,4
   26bc8:	10800104 	addi	r2,r2,4
   26bcc:	20f0002c 	andhi	r3,r4,49152
   26bd0:	1800031e 	bne	r3,zero,26be0 <__hi0bits+0x44>
   26bd4:	2109883a 	add	r4,r4,r4
   26bd8:	10800084 	addi	r2,r2,2
   26bdc:	2109883a 	add	r4,r4,r4
   26be0:	20000316 	blt	r4,zero,26bf0 <__hi0bits+0x54>
   26be4:	2110002c 	andhi	r4,r4,16384
   26be8:	2000041e 	bne	r4,zero,26bfc <__hi0bits+0x60>
   26bec:	00800804 	movi	r2,32
   26bf0:	f800283a 	ret
   26bf4:	0005883a 	mov	r2,zero
   26bf8:	003fec06 	br	26bac <_gp+0xfffeba48>
   26bfc:	10800044 	addi	r2,r2,1
   26c00:	f800283a 	ret

00026c04 <__lo0bits>:
   26c04:	20c00017 	ldw	r3,0(r4)
   26c08:	188001cc 	andi	r2,r3,7
   26c0c:	10000826 	beq	r2,zero,26c30 <__lo0bits+0x2c>
   26c10:	1880004c 	andi	r2,r3,1
   26c14:	1000211e 	bne	r2,zero,26c9c <__lo0bits+0x98>
   26c18:	1880008c 	andi	r2,r3,2
   26c1c:	1000211e 	bne	r2,zero,26ca4 <__lo0bits+0xa0>
   26c20:	1806d0ba 	srli	r3,r3,2
   26c24:	00800084 	movi	r2,2
   26c28:	20c00015 	stw	r3,0(r4)
   26c2c:	f800283a 	ret
   26c30:	18bfffcc 	andi	r2,r3,65535
   26c34:	10001326 	beq	r2,zero,26c84 <__lo0bits+0x80>
   26c38:	0005883a 	mov	r2,zero
   26c3c:	19403fcc 	andi	r5,r3,255
   26c40:	2800021e 	bne	r5,zero,26c4c <__lo0bits+0x48>
   26c44:	1806d23a 	srli	r3,r3,8
   26c48:	10800204 	addi	r2,r2,8
   26c4c:	194003cc 	andi	r5,r3,15
   26c50:	2800021e 	bne	r5,zero,26c5c <__lo0bits+0x58>
   26c54:	1806d13a 	srli	r3,r3,4
   26c58:	10800104 	addi	r2,r2,4
   26c5c:	194000cc 	andi	r5,r3,3
   26c60:	2800021e 	bne	r5,zero,26c6c <__lo0bits+0x68>
   26c64:	1806d0ba 	srli	r3,r3,2
   26c68:	10800084 	addi	r2,r2,2
   26c6c:	1940004c 	andi	r5,r3,1
   26c70:	2800081e 	bne	r5,zero,26c94 <__lo0bits+0x90>
   26c74:	1806d07a 	srli	r3,r3,1
   26c78:	1800051e 	bne	r3,zero,26c90 <__lo0bits+0x8c>
   26c7c:	00800804 	movi	r2,32
   26c80:	f800283a 	ret
   26c84:	1806d43a 	srli	r3,r3,16
   26c88:	00800404 	movi	r2,16
   26c8c:	003feb06 	br	26c3c <_gp+0xfffebad8>
   26c90:	10800044 	addi	r2,r2,1
   26c94:	20c00015 	stw	r3,0(r4)
   26c98:	f800283a 	ret
   26c9c:	0005883a 	mov	r2,zero
   26ca0:	f800283a 	ret
   26ca4:	1806d07a 	srli	r3,r3,1
   26ca8:	00800044 	movi	r2,1
   26cac:	20c00015 	stw	r3,0(r4)
   26cb0:	f800283a 	ret

00026cb4 <__i2b>:
   26cb4:	defffd04 	addi	sp,sp,-12
   26cb8:	dc000015 	stw	r16,0(sp)
   26cbc:	04000044 	movi	r16,1
   26cc0:	dc400115 	stw	r17,4(sp)
   26cc4:	2823883a 	mov	r17,r5
   26cc8:	800b883a 	mov	r5,r16
   26ccc:	dfc00215 	stw	ra,8(sp)
   26cd0:	00268800 	call	26880 <_Balloc>
   26cd4:	14400515 	stw	r17,20(r2)
   26cd8:	14000415 	stw	r16,16(r2)
   26cdc:	dfc00217 	ldw	ra,8(sp)
   26ce0:	dc400117 	ldw	r17,4(sp)
   26ce4:	dc000017 	ldw	r16,0(sp)
   26ce8:	dec00304 	addi	sp,sp,12
   26cec:	f800283a 	ret

00026cf0 <__multiply>:
   26cf0:	deffef04 	addi	sp,sp,-68
   26cf4:	dc400815 	stw	r17,32(sp)
   26cf8:	dc000715 	stw	r16,28(sp)
   26cfc:	34400417 	ldw	r17,16(r6)
   26d00:	2c000417 	ldw	r16,16(r5)
   26d04:	dd800d15 	stw	r22,52(sp)
   26d08:	dc800915 	stw	r18,36(sp)
   26d0c:	dfc01015 	stw	ra,64(sp)
   26d10:	df000f15 	stw	fp,60(sp)
   26d14:	ddc00e15 	stw	r23,56(sp)
   26d18:	dd400c15 	stw	r21,48(sp)
   26d1c:	dd000b15 	stw	r20,44(sp)
   26d20:	dcc00a15 	stw	r19,40(sp)
   26d24:	2825883a 	mov	r18,r5
   26d28:	302d883a 	mov	r22,r6
   26d2c:	8440050e 	bge	r16,r17,26d44 <__multiply+0x54>
   26d30:	8007883a 	mov	r3,r16
   26d34:	3025883a 	mov	r18,r6
   26d38:	8821883a 	mov	r16,r17
   26d3c:	282d883a 	mov	r22,r5
   26d40:	1823883a 	mov	r17,r3
   26d44:	90800217 	ldw	r2,8(r18)
   26d48:	8447883a 	add	r3,r16,r17
   26d4c:	d8c00215 	stw	r3,8(sp)
   26d50:	91400117 	ldw	r5,4(r18)
   26d54:	10c0010e 	bge	r2,r3,26d5c <__multiply+0x6c>
   26d58:	29400044 	addi	r5,r5,1
   26d5c:	00268800 	call	26880 <_Balloc>
   26d60:	d8c00217 	ldw	r3,8(sp)
   26d64:	d8800615 	stw	r2,24(sp)
   26d68:	18eb883a 	add	r21,r3,r3
   26d6c:	ad6b883a 	add	r21,r21,r21
   26d70:	10c00504 	addi	r3,r2,20
   26d74:	1d6b883a 	add	r21,r3,r21
   26d78:	d8c00115 	stw	r3,4(sp)
   26d7c:	dd400315 	stw	r21,12(sp)
   26d80:	1805883a 	mov	r2,r3
   26d84:	1d40042e 	bgeu	r3,r21,26d98 <__multiply+0xa8>
   26d88:	d8c00317 	ldw	r3,12(sp)
   26d8c:	10000015 	stw	zero,0(r2)
   26d90:	10800104 	addi	r2,r2,4
   26d94:	10fffc36 	bltu	r2,r3,26d88 <_gp+0xfffebc24>
   26d98:	8c63883a 	add	r17,r17,r17
   26d9c:	b5800504 	addi	r22,r22,20
   26da0:	8c63883a 	add	r17,r17,r17
   26da4:	94800504 	addi	r18,r18,20
   26da8:	8421883a 	add	r16,r16,r16
   26dac:	b463883a 	add	r17,r22,r17
   26db0:	8421883a 	add	r16,r16,r16
   26db4:	dd800015 	stw	r22,0(sp)
   26db8:	dc800415 	stw	r18,16(sp)
   26dbc:	dc400515 	stw	r17,20(sp)
   26dc0:	9429883a 	add	r20,r18,r16
   26dc4:	b4404f2e 	bgeu	r22,r17,26f04 <__multiply+0x214>
   26dc8:	d8c00017 	ldw	r3,0(sp)
   26dcc:	1c800017 	ldw	r18,0(r3)
   26dd0:	947fffcc 	andi	r17,r18,65535
   26dd4:	88001e26 	beq	r17,zero,26e50 <__multiply+0x160>
   26dd8:	dd800117 	ldw	r22,4(sp)
   26ddc:	dd400417 	ldw	r21,16(sp)
   26de0:	0027883a 	mov	r19,zero
   26de4:	ac800017 	ldw	r18,0(r21)
   26de8:	b4000017 	ldw	r16,0(r22)
   26dec:	880b883a 	mov	r5,r17
   26df0:	913fffcc 	andi	r4,r18,65535
   26df4:	00208980 	call	20898 <__mulsi3>
   26df8:	9008d43a 	srli	r4,r18,16
   26dfc:	84bfffcc 	andi	r18,r16,65535
   26e00:	1485883a 	add	r2,r2,r18
   26e04:	14e5883a 	add	r18,r2,r19
   26e08:	8020d43a 	srli	r16,r16,16
   26e0c:	9026d43a 	srli	r19,r18,16
   26e10:	880b883a 	mov	r5,r17
   26e14:	00208980 	call	20898 <__mulsi3>
   26e18:	1405883a 	add	r2,r2,r16
   26e1c:	14e1883a 	add	r16,r2,r19
   26e20:	90ffffcc 	andi	r3,r18,65535
   26e24:	8024943a 	slli	r18,r16,16
   26e28:	ad400104 	addi	r21,r21,4
   26e2c:	b005883a 	mov	r2,r22
   26e30:	90c6b03a 	or	r3,r18,r3
   26e34:	b0c00015 	stw	r3,0(r22)
   26e38:	8026d43a 	srli	r19,r16,16
   26e3c:	b5800104 	addi	r22,r22,4
   26e40:	ad3fe836 	bltu	r21,r20,26de4 <_gp+0xfffebc80>
   26e44:	d8c00017 	ldw	r3,0(sp)
   26e48:	14c00115 	stw	r19,4(r2)
   26e4c:	1c800017 	ldw	r18,0(r3)
   26e50:	9024d43a 	srli	r18,r18,16
   26e54:	90002226 	beq	r18,zero,26ee0 <__multiply+0x1f0>
   26e58:	d8c00117 	ldw	r3,4(sp)
   26e5c:	dd800417 	ldw	r22,16(sp)
   26e60:	002f883a 	mov	r23,zero
   26e64:	1f000017 	ldw	fp,0(r3)
   26e68:	1823883a 	mov	r17,r3
   26e6c:	182b883a 	mov	r21,r3
   26e70:	e021883a 	mov	r16,fp
   26e74:	00000106 	br	26e7c <__multiply+0x18c>
   26e78:	982b883a 	mov	r21,r19
   26e7c:	b100000b 	ldhu	r4,0(r22)
   26e80:	8020d43a 	srli	r16,r16,16
   26e84:	900b883a 	mov	r5,r18
   26e88:	00208980 	call	20898 <__mulsi3>
   26e8c:	1405883a 	add	r2,r2,r16
   26e90:	15ef883a 	add	r23,r2,r23
   26e94:	b804943a 	slli	r2,r23,16
   26e98:	e0ffffcc 	andi	r3,fp,65535
   26e9c:	8c400104 	addi	r17,r17,4
   26ea0:	10c6b03a 	or	r3,r2,r3
   26ea4:	88ffff15 	stw	r3,-4(r17)
   26ea8:	b5800104 	addi	r22,r22,4
   26eac:	b13fff17 	ldw	r4,-4(r22)
   26eb0:	acc00104 	addi	r19,r21,4
   26eb4:	900b883a 	mov	r5,r18
   26eb8:	2008d43a 	srli	r4,r4,16
   26ebc:	9c000017 	ldw	r16,0(r19)
   26ec0:	00208980 	call	20898 <__mulsi3>
   26ec4:	b806d43a 	srli	r3,r23,16
   26ec8:	813fffcc 	andi	r4,r16,65535
   26ecc:	1105883a 	add	r2,r2,r4
   26ed0:	10f9883a 	add	fp,r2,r3
   26ed4:	e02ed43a 	srli	r23,fp,16
   26ed8:	b53fe736 	bltu	r22,r20,26e78 <_gp+0xfffebd14>
   26edc:	af000115 	stw	fp,4(r21)
   26ee0:	d8c00017 	ldw	r3,0(sp)
   26ee4:	d9000517 	ldw	r4,20(sp)
   26ee8:	18c00104 	addi	r3,r3,4
   26eec:	d8c00015 	stw	r3,0(sp)
   26ef0:	d8c00117 	ldw	r3,4(sp)
   26ef4:	18c00104 	addi	r3,r3,4
   26ef8:	d8c00115 	stw	r3,4(sp)
   26efc:	d8c00017 	ldw	r3,0(sp)
   26f00:	193fb136 	bltu	r3,r4,26dc8 <_gp+0xfffebc64>
   26f04:	d8c00217 	ldw	r3,8(sp)
   26f08:	00c00c0e 	bge	zero,r3,26f3c <__multiply+0x24c>
   26f0c:	d8c00317 	ldw	r3,12(sp)
   26f10:	18bfff17 	ldw	r2,-4(r3)
   26f14:	1d7fff04 	addi	r21,r3,-4
   26f18:	10000326 	beq	r2,zero,26f28 <__multiply+0x238>
   26f1c:	00000706 	br	26f3c <__multiply+0x24c>
   26f20:	a8800017 	ldw	r2,0(r21)
   26f24:	1000051e 	bne	r2,zero,26f3c <__multiply+0x24c>
   26f28:	d8c00217 	ldw	r3,8(sp)
   26f2c:	ad7fff04 	addi	r21,r21,-4
   26f30:	18ffffc4 	addi	r3,r3,-1
   26f34:	d8c00215 	stw	r3,8(sp)
   26f38:	183ff91e 	bne	r3,zero,26f20 <_gp+0xfffebdbc>
   26f3c:	d8c00617 	ldw	r3,24(sp)
   26f40:	d9000217 	ldw	r4,8(sp)
   26f44:	1805883a 	mov	r2,r3
   26f48:	19000415 	stw	r4,16(r3)
   26f4c:	dfc01017 	ldw	ra,64(sp)
   26f50:	df000f17 	ldw	fp,60(sp)
   26f54:	ddc00e17 	ldw	r23,56(sp)
   26f58:	dd800d17 	ldw	r22,52(sp)
   26f5c:	dd400c17 	ldw	r21,48(sp)
   26f60:	dd000b17 	ldw	r20,44(sp)
   26f64:	dcc00a17 	ldw	r19,40(sp)
   26f68:	dc800917 	ldw	r18,36(sp)
   26f6c:	dc400817 	ldw	r17,32(sp)
   26f70:	dc000717 	ldw	r16,28(sp)
   26f74:	dec01104 	addi	sp,sp,68
   26f78:	f800283a 	ret

00026f7c <__pow5mult>:
   26f7c:	defffa04 	addi	sp,sp,-24
   26f80:	dcc00315 	stw	r19,12(sp)
   26f84:	dc000015 	stw	r16,0(sp)
   26f88:	dfc00515 	stw	ra,20(sp)
   26f8c:	dd000415 	stw	r20,16(sp)
   26f90:	dc800215 	stw	r18,8(sp)
   26f94:	dc400115 	stw	r17,4(sp)
   26f98:	308000cc 	andi	r2,r6,3
   26f9c:	3021883a 	mov	r16,r6
   26fa0:	2027883a 	mov	r19,r4
   26fa4:	10002f1e 	bne	r2,zero,27064 <__pow5mult+0xe8>
   26fa8:	2825883a 	mov	r18,r5
   26fac:	8021d0ba 	srai	r16,r16,2
   26fb0:	80001a26 	beq	r16,zero,2701c <__pow5mult+0xa0>
   26fb4:	9c401217 	ldw	r17,72(r19)
   26fb8:	8800061e 	bne	r17,zero,26fd4 <__pow5mult+0x58>
   26fbc:	00003406 	br	27090 <__pow5mult+0x114>
   26fc0:	8021d07a 	srai	r16,r16,1
   26fc4:	80001526 	beq	r16,zero,2701c <__pow5mult+0xa0>
   26fc8:	88800017 	ldw	r2,0(r17)
   26fcc:	10001c26 	beq	r2,zero,27040 <__pow5mult+0xc4>
   26fd0:	1023883a 	mov	r17,r2
   26fd4:	8080004c 	andi	r2,r16,1
   26fd8:	103ff926 	beq	r2,zero,26fc0 <_gp+0xfffebe5c>
   26fdc:	880d883a 	mov	r6,r17
   26fe0:	900b883a 	mov	r5,r18
   26fe4:	9809883a 	mov	r4,r19
   26fe8:	0026cf00 	call	26cf0 <__multiply>
   26fec:	90001b26 	beq	r18,zero,2705c <__pow5mult+0xe0>
   26ff0:	91000117 	ldw	r4,4(r18)
   26ff4:	98c01317 	ldw	r3,76(r19)
   26ff8:	8021d07a 	srai	r16,r16,1
   26ffc:	2109883a 	add	r4,r4,r4
   27000:	2109883a 	add	r4,r4,r4
   27004:	1907883a 	add	r3,r3,r4
   27008:	19000017 	ldw	r4,0(r3)
   2700c:	91000015 	stw	r4,0(r18)
   27010:	1c800015 	stw	r18,0(r3)
   27014:	1025883a 	mov	r18,r2
   27018:	803feb1e 	bne	r16,zero,26fc8 <_gp+0xfffebe64>
   2701c:	9005883a 	mov	r2,r18
   27020:	dfc00517 	ldw	ra,20(sp)
   27024:	dd000417 	ldw	r20,16(sp)
   27028:	dcc00317 	ldw	r19,12(sp)
   2702c:	dc800217 	ldw	r18,8(sp)
   27030:	dc400117 	ldw	r17,4(sp)
   27034:	dc000017 	ldw	r16,0(sp)
   27038:	dec00604 	addi	sp,sp,24
   2703c:	f800283a 	ret
   27040:	880d883a 	mov	r6,r17
   27044:	880b883a 	mov	r5,r17
   27048:	9809883a 	mov	r4,r19
   2704c:	0026cf00 	call	26cf0 <__multiply>
   27050:	88800015 	stw	r2,0(r17)
   27054:	10000015 	stw	zero,0(r2)
   27058:	003fdd06 	br	26fd0 <_gp+0xfffebe6c>
   2705c:	1025883a 	mov	r18,r2
   27060:	003fd706 	br	26fc0 <_gp+0xfffebe5c>
   27064:	10bfffc4 	addi	r2,r2,-1
   27068:	1085883a 	add	r2,r2,r2
   2706c:	00c000f4 	movhi	r3,3
   27070:	18c42704 	addi	r3,r3,4252
   27074:	1085883a 	add	r2,r2,r2
   27078:	1885883a 	add	r2,r3,r2
   2707c:	11800017 	ldw	r6,0(r2)
   27080:	000f883a 	mov	r7,zero
   27084:	00269500 	call	26950 <__multadd>
   27088:	1025883a 	mov	r18,r2
   2708c:	003fc706 	br	26fac <_gp+0xfffebe48>
   27090:	05000044 	movi	r20,1
   27094:	a00b883a 	mov	r5,r20
   27098:	9809883a 	mov	r4,r19
   2709c:	00268800 	call	26880 <_Balloc>
   270a0:	1023883a 	mov	r17,r2
   270a4:	00809c44 	movi	r2,625
   270a8:	88800515 	stw	r2,20(r17)
   270ac:	8d000415 	stw	r20,16(r17)
   270b0:	9c401215 	stw	r17,72(r19)
   270b4:	88000015 	stw	zero,0(r17)
   270b8:	003fc606 	br	26fd4 <_gp+0xfffebe70>

000270bc <__lshift>:
   270bc:	defff904 	addi	sp,sp,-28
   270c0:	dd400515 	stw	r21,20(sp)
   270c4:	dcc00315 	stw	r19,12(sp)
   270c8:	302bd17a 	srai	r21,r6,5
   270cc:	2cc00417 	ldw	r19,16(r5)
   270d0:	28800217 	ldw	r2,8(r5)
   270d4:	dd000415 	stw	r20,16(sp)
   270d8:	ace7883a 	add	r19,r21,r19
   270dc:	dc800215 	stw	r18,8(sp)
   270e0:	dc400115 	stw	r17,4(sp)
   270e4:	dc000015 	stw	r16,0(sp)
   270e8:	dfc00615 	stw	ra,24(sp)
   270ec:	9c000044 	addi	r16,r19,1
   270f0:	2823883a 	mov	r17,r5
   270f4:	3029883a 	mov	r20,r6
   270f8:	2025883a 	mov	r18,r4
   270fc:	29400117 	ldw	r5,4(r5)
   27100:	1400030e 	bge	r2,r16,27110 <__lshift+0x54>
   27104:	1085883a 	add	r2,r2,r2
   27108:	29400044 	addi	r5,r5,1
   2710c:	143ffd16 	blt	r2,r16,27104 <_gp+0xfffebfa0>
   27110:	9009883a 	mov	r4,r18
   27114:	00268800 	call	26880 <_Balloc>
   27118:	10c00504 	addi	r3,r2,20
   2711c:	0540070e 	bge	zero,r21,2713c <__lshift+0x80>
   27120:	ad6b883a 	add	r21,r21,r21
   27124:	ad6b883a 	add	r21,r21,r21
   27128:	1809883a 	mov	r4,r3
   2712c:	1d47883a 	add	r3,r3,r21
   27130:	20000015 	stw	zero,0(r4)
   27134:	21000104 	addi	r4,r4,4
   27138:	193ffd1e 	bne	r3,r4,27130 <_gp+0xfffebfcc>
   2713c:	8a000417 	ldw	r8,16(r17)
   27140:	89000504 	addi	r4,r17,20
   27144:	a18007cc 	andi	r6,r20,31
   27148:	4211883a 	add	r8,r8,r8
   2714c:	4211883a 	add	r8,r8,r8
   27150:	2211883a 	add	r8,r4,r8
   27154:	30002326 	beq	r6,zero,271e4 <__lshift+0x128>
   27158:	02400804 	movi	r9,32
   2715c:	4993c83a 	sub	r9,r9,r6
   27160:	000b883a 	mov	r5,zero
   27164:	21c00017 	ldw	r7,0(r4)
   27168:	1815883a 	mov	r10,r3
   2716c:	18c00104 	addi	r3,r3,4
   27170:	398e983a 	sll	r7,r7,r6
   27174:	21000104 	addi	r4,r4,4
   27178:	394ab03a 	or	r5,r7,r5
   2717c:	197fff15 	stw	r5,-4(r3)
   27180:	217fff17 	ldw	r5,-4(r4)
   27184:	2a4ad83a 	srl	r5,r5,r9
   27188:	223ff636 	bltu	r4,r8,27164 <_gp+0xfffec000>
   2718c:	51400115 	stw	r5,4(r10)
   27190:	28001a1e 	bne	r5,zero,271fc <__lshift+0x140>
   27194:	843fffc4 	addi	r16,r16,-1
   27198:	14000415 	stw	r16,16(r2)
   2719c:	88000826 	beq	r17,zero,271c0 <__lshift+0x104>
   271a0:	89000117 	ldw	r4,4(r17)
   271a4:	90c01317 	ldw	r3,76(r18)
   271a8:	2109883a 	add	r4,r4,r4
   271ac:	2109883a 	add	r4,r4,r4
   271b0:	1907883a 	add	r3,r3,r4
   271b4:	19000017 	ldw	r4,0(r3)
   271b8:	89000015 	stw	r4,0(r17)
   271bc:	1c400015 	stw	r17,0(r3)
   271c0:	dfc00617 	ldw	ra,24(sp)
   271c4:	dd400517 	ldw	r21,20(sp)
   271c8:	dd000417 	ldw	r20,16(sp)
   271cc:	dcc00317 	ldw	r19,12(sp)
   271d0:	dc800217 	ldw	r18,8(sp)
   271d4:	dc400117 	ldw	r17,4(sp)
   271d8:	dc000017 	ldw	r16,0(sp)
   271dc:	dec00704 	addi	sp,sp,28
   271e0:	f800283a 	ret
   271e4:	21400017 	ldw	r5,0(r4)
   271e8:	18c00104 	addi	r3,r3,4
   271ec:	21000104 	addi	r4,r4,4
   271f0:	197fff15 	stw	r5,-4(r3)
   271f4:	223ffb36 	bltu	r4,r8,271e4 <_gp+0xfffec080>
   271f8:	003fe606 	br	27194 <_gp+0xfffec030>
   271fc:	9c000084 	addi	r16,r19,2
   27200:	003fe406 	br	27194 <_gp+0xfffec030>

00027204 <__mcmp>:
   27204:	20800417 	ldw	r2,16(r4)
   27208:	28c00417 	ldw	r3,16(r5)
   2720c:	10c5c83a 	sub	r2,r2,r3
   27210:	1000111e 	bne	r2,zero,27258 <__mcmp+0x54>
   27214:	18c7883a 	add	r3,r3,r3
   27218:	18c7883a 	add	r3,r3,r3
   2721c:	21000504 	addi	r4,r4,20
   27220:	29400504 	addi	r5,r5,20
   27224:	20c5883a 	add	r2,r4,r3
   27228:	28cb883a 	add	r5,r5,r3
   2722c:	00000106 	br	27234 <__mcmp+0x30>
   27230:	20800a2e 	bgeu	r4,r2,2725c <__mcmp+0x58>
   27234:	10bfff04 	addi	r2,r2,-4
   27238:	297fff04 	addi	r5,r5,-4
   2723c:	11800017 	ldw	r6,0(r2)
   27240:	28c00017 	ldw	r3,0(r5)
   27244:	30fffa26 	beq	r6,r3,27230 <_gp+0xfffec0cc>
   27248:	30c00236 	bltu	r6,r3,27254 <__mcmp+0x50>
   2724c:	00800044 	movi	r2,1
   27250:	f800283a 	ret
   27254:	00bfffc4 	movi	r2,-1
   27258:	f800283a 	ret
   2725c:	0005883a 	mov	r2,zero
   27260:	f800283a 	ret

00027264 <__mdiff>:
   27264:	28c00417 	ldw	r3,16(r5)
   27268:	30800417 	ldw	r2,16(r6)
   2726c:	defffa04 	addi	sp,sp,-24
   27270:	dcc00315 	stw	r19,12(sp)
   27274:	dc800215 	stw	r18,8(sp)
   27278:	dfc00515 	stw	ra,20(sp)
   2727c:	dd000415 	stw	r20,16(sp)
   27280:	dc400115 	stw	r17,4(sp)
   27284:	dc000015 	stw	r16,0(sp)
   27288:	1887c83a 	sub	r3,r3,r2
   2728c:	2825883a 	mov	r18,r5
   27290:	3027883a 	mov	r19,r6
   27294:	1800141e 	bne	r3,zero,272e8 <__mdiff+0x84>
   27298:	1085883a 	add	r2,r2,r2
   2729c:	1085883a 	add	r2,r2,r2
   272a0:	2a000504 	addi	r8,r5,20
   272a4:	34000504 	addi	r16,r6,20
   272a8:	4087883a 	add	r3,r8,r2
   272ac:	8085883a 	add	r2,r16,r2
   272b0:	00000106 	br	272b8 <__mdiff+0x54>
   272b4:	40c0592e 	bgeu	r8,r3,2741c <__mdiff+0x1b8>
   272b8:	18ffff04 	addi	r3,r3,-4
   272bc:	10bfff04 	addi	r2,r2,-4
   272c0:	19c00017 	ldw	r7,0(r3)
   272c4:	11400017 	ldw	r5,0(r2)
   272c8:	397ffa26 	beq	r7,r5,272b4 <_gp+0xfffec150>
   272cc:	3940592e 	bgeu	r7,r5,27434 <__mdiff+0x1d0>
   272d0:	9005883a 	mov	r2,r18
   272d4:	4023883a 	mov	r17,r8
   272d8:	9825883a 	mov	r18,r19
   272dc:	05000044 	movi	r20,1
   272e0:	1027883a 	mov	r19,r2
   272e4:	00000406 	br	272f8 <__mdiff+0x94>
   272e8:	18005616 	blt	r3,zero,27444 <__mdiff+0x1e0>
   272ec:	34400504 	addi	r17,r6,20
   272f0:	2c000504 	addi	r16,r5,20
   272f4:	0029883a 	mov	r20,zero
   272f8:	91400117 	ldw	r5,4(r18)
   272fc:	00268800 	call	26880 <_Balloc>
   27300:	92400417 	ldw	r9,16(r18)
   27304:	9b000417 	ldw	r12,16(r19)
   27308:	12c00504 	addi	r11,r2,20
   2730c:	4a51883a 	add	r8,r9,r9
   27310:	6319883a 	add	r12,r12,r12
   27314:	4211883a 	add	r8,r8,r8
   27318:	6319883a 	add	r12,r12,r12
   2731c:	15000315 	stw	r20,12(r2)
   27320:	8211883a 	add	r8,r16,r8
   27324:	8b19883a 	add	r12,r17,r12
   27328:	0007883a 	mov	r3,zero
   2732c:	81400017 	ldw	r5,0(r16)
   27330:	89c00017 	ldw	r7,0(r17)
   27334:	59800104 	addi	r6,r11,4
   27338:	293fffcc 	andi	r4,r5,65535
   2733c:	20c7883a 	add	r3,r4,r3
   27340:	393fffcc 	andi	r4,r7,65535
   27344:	1909c83a 	sub	r4,r3,r4
   27348:	280ad43a 	srli	r5,r5,16
   2734c:	380ed43a 	srli	r7,r7,16
   27350:	2007d43a 	srai	r3,r4,16
   27354:	213fffcc 	andi	r4,r4,65535
   27358:	29cbc83a 	sub	r5,r5,r7
   2735c:	28c7883a 	add	r3,r5,r3
   27360:	180a943a 	slli	r5,r3,16
   27364:	8c400104 	addi	r17,r17,4
   27368:	84000104 	addi	r16,r16,4
   2736c:	2908b03a 	or	r4,r5,r4
   27370:	59000015 	stw	r4,0(r11)
   27374:	1807d43a 	srai	r3,r3,16
   27378:	3015883a 	mov	r10,r6
   2737c:	3017883a 	mov	r11,r6
   27380:	8b3fea36 	bltu	r17,r12,2732c <_gp+0xfffec1c8>
   27384:	8200162e 	bgeu	r16,r8,273e0 <__mdiff+0x17c>
   27388:	8017883a 	mov	r11,r16
   2738c:	59400017 	ldw	r5,0(r11)
   27390:	31800104 	addi	r6,r6,4
   27394:	5ac00104 	addi	r11,r11,4
   27398:	293fffcc 	andi	r4,r5,65535
   2739c:	20c7883a 	add	r3,r4,r3
   273a0:	280ed43a 	srli	r7,r5,16
   273a4:	180bd43a 	srai	r5,r3,16
   273a8:	193fffcc 	andi	r4,r3,65535
   273ac:	3947883a 	add	r3,r7,r5
   273b0:	180a943a 	slli	r5,r3,16
   273b4:	1807d43a 	srai	r3,r3,16
   273b8:	2908b03a 	or	r4,r5,r4
   273bc:	313fff15 	stw	r4,-4(r6)
   273c0:	5a3ff236 	bltu	r11,r8,2738c <_gp+0xfffec228>
   273c4:	0406303a 	nor	r3,zero,r16
   273c8:	1a07883a 	add	r3,r3,r8
   273cc:	1806d0ba 	srli	r3,r3,2
   273d0:	18c00044 	addi	r3,r3,1
   273d4:	18c7883a 	add	r3,r3,r3
   273d8:	18c7883a 	add	r3,r3,r3
   273dc:	50d5883a 	add	r10,r10,r3
   273e0:	50ffff04 	addi	r3,r10,-4
   273e4:	2000041e 	bne	r4,zero,273f8 <__mdiff+0x194>
   273e8:	18ffff04 	addi	r3,r3,-4
   273ec:	19000017 	ldw	r4,0(r3)
   273f0:	4a7fffc4 	addi	r9,r9,-1
   273f4:	203ffc26 	beq	r4,zero,273e8 <_gp+0xfffec284>
   273f8:	12400415 	stw	r9,16(r2)
   273fc:	dfc00517 	ldw	ra,20(sp)
   27400:	dd000417 	ldw	r20,16(sp)
   27404:	dcc00317 	ldw	r19,12(sp)
   27408:	dc800217 	ldw	r18,8(sp)
   2740c:	dc400117 	ldw	r17,4(sp)
   27410:	dc000017 	ldw	r16,0(sp)
   27414:	dec00604 	addi	sp,sp,24
   27418:	f800283a 	ret
   2741c:	000b883a 	mov	r5,zero
   27420:	00268800 	call	26880 <_Balloc>
   27424:	00c00044 	movi	r3,1
   27428:	10c00415 	stw	r3,16(r2)
   2742c:	10000515 	stw	zero,20(r2)
   27430:	003ff206 	br	273fc <_gp+0xfffec298>
   27434:	8023883a 	mov	r17,r16
   27438:	0029883a 	mov	r20,zero
   2743c:	4021883a 	mov	r16,r8
   27440:	003fad06 	br	272f8 <_gp+0xfffec194>
   27444:	9005883a 	mov	r2,r18
   27448:	94400504 	addi	r17,r18,20
   2744c:	9c000504 	addi	r16,r19,20
   27450:	9825883a 	mov	r18,r19
   27454:	05000044 	movi	r20,1
   27458:	1027883a 	mov	r19,r2
   2745c:	003fa606 	br	272f8 <_gp+0xfffec194>

00027460 <__ulp>:
   27460:	295ffc2c 	andhi	r5,r5,32752
   27464:	00bf3034 	movhi	r2,64704
   27468:	2887883a 	add	r3,r5,r2
   2746c:	00c0020e 	bge	zero,r3,27478 <__ulp+0x18>
   27470:	0005883a 	mov	r2,zero
   27474:	f800283a 	ret
   27478:	00c7c83a 	sub	r3,zero,r3
   2747c:	1807d53a 	srai	r3,r3,20
   27480:	008004c4 	movi	r2,19
   27484:	10c00b0e 	bge	r2,r3,274b4 <__ulp+0x54>
   27488:	18bffb04 	addi	r2,r3,-20
   2748c:	01000784 	movi	r4,30
   27490:	0007883a 	mov	r3,zero
   27494:	20800516 	blt	r4,r2,274ac <__ulp+0x4c>
   27498:	010007c4 	movi	r4,31
   2749c:	2089c83a 	sub	r4,r4,r2
   274a0:	00800044 	movi	r2,1
   274a4:	1104983a 	sll	r2,r2,r4
   274a8:	f800283a 	ret
   274ac:	00800044 	movi	r2,1
   274b0:	f800283a 	ret
   274b4:	01400234 	movhi	r5,8
   274b8:	28c7d83a 	sra	r3,r5,r3
   274bc:	0005883a 	mov	r2,zero
   274c0:	f800283a 	ret

000274c4 <__b2d>:
   274c4:	defffa04 	addi	sp,sp,-24
   274c8:	dc000015 	stw	r16,0(sp)
   274cc:	24000417 	ldw	r16,16(r4)
   274d0:	dc400115 	stw	r17,4(sp)
   274d4:	24400504 	addi	r17,r4,20
   274d8:	8421883a 	add	r16,r16,r16
   274dc:	8421883a 	add	r16,r16,r16
   274e0:	8c21883a 	add	r16,r17,r16
   274e4:	dc800215 	stw	r18,8(sp)
   274e8:	84bfff17 	ldw	r18,-4(r16)
   274ec:	dd000415 	stw	r20,16(sp)
   274f0:	dcc00315 	stw	r19,12(sp)
   274f4:	9009883a 	mov	r4,r18
   274f8:	2829883a 	mov	r20,r5
   274fc:	dfc00515 	stw	ra,20(sp)
   27500:	0026b9c0 	call	26b9c <__hi0bits>
   27504:	00c00804 	movi	r3,32
   27508:	1889c83a 	sub	r4,r3,r2
   2750c:	a1000015 	stw	r4,0(r20)
   27510:	01000284 	movi	r4,10
   27514:	84ffff04 	addi	r19,r16,-4
   27518:	20801216 	blt	r4,r2,27564 <__b2d+0xa0>
   2751c:	018002c4 	movi	r6,11
   27520:	308dc83a 	sub	r6,r6,r2
   27524:	9186d83a 	srl	r3,r18,r6
   27528:	18cffc34 	orhi	r3,r3,16368
   2752c:	8cc0212e 	bgeu	r17,r19,275b4 <__b2d+0xf0>
   27530:	813ffe17 	ldw	r4,-8(r16)
   27534:	218cd83a 	srl	r6,r4,r6
   27538:	10800544 	addi	r2,r2,21
   2753c:	9084983a 	sll	r2,r18,r2
   27540:	1184b03a 	or	r2,r2,r6
   27544:	dfc00517 	ldw	ra,20(sp)
   27548:	dd000417 	ldw	r20,16(sp)
   2754c:	dcc00317 	ldw	r19,12(sp)
   27550:	dc800217 	ldw	r18,8(sp)
   27554:	dc400117 	ldw	r17,4(sp)
   27558:	dc000017 	ldw	r16,0(sp)
   2755c:	dec00604 	addi	sp,sp,24
   27560:	f800283a 	ret
   27564:	8cc00f2e 	bgeu	r17,r19,275a4 <__b2d+0xe0>
   27568:	117ffd44 	addi	r5,r2,-11
   2756c:	80bffe17 	ldw	r2,-8(r16)
   27570:	28000e26 	beq	r5,zero,275ac <__b2d+0xe8>
   27574:	1949c83a 	sub	r4,r3,r5
   27578:	9164983a 	sll	r18,r18,r5
   2757c:	1106d83a 	srl	r3,r2,r4
   27580:	81bffe04 	addi	r6,r16,-8
   27584:	948ffc34 	orhi	r18,r18,16368
   27588:	90c6b03a 	or	r3,r18,r3
   2758c:	89800e2e 	bgeu	r17,r6,275c8 <__b2d+0x104>
   27590:	81bffd17 	ldw	r6,-12(r16)
   27594:	1144983a 	sll	r2,r2,r5
   27598:	310ad83a 	srl	r5,r6,r4
   2759c:	2884b03a 	or	r2,r5,r2
   275a0:	003fe806 	br	27544 <_gp+0xfffec3e0>
   275a4:	10bffd44 	addi	r2,r2,-11
   275a8:	1000041e 	bne	r2,zero,275bc <__b2d+0xf8>
   275ac:	90cffc34 	orhi	r3,r18,16368
   275b0:	003fe406 	br	27544 <_gp+0xfffec3e0>
   275b4:	000d883a 	mov	r6,zero
   275b8:	003fdf06 	br	27538 <_gp+0xfffec3d4>
   275bc:	90a4983a 	sll	r18,r18,r2
   275c0:	0005883a 	mov	r2,zero
   275c4:	003ff906 	br	275ac <_gp+0xfffec448>
   275c8:	1144983a 	sll	r2,r2,r5
   275cc:	003fdd06 	br	27544 <_gp+0xfffec3e0>

000275d0 <__d2b>:
   275d0:	defff804 	addi	sp,sp,-32
   275d4:	dc000215 	stw	r16,8(sp)
   275d8:	3021883a 	mov	r16,r6
   275dc:	dc400315 	stw	r17,12(sp)
   275e0:	8022907a 	slli	r17,r16,1
   275e4:	dd000615 	stw	r20,24(sp)
   275e8:	2829883a 	mov	r20,r5
   275ec:	01400044 	movi	r5,1
   275f0:	dcc00515 	stw	r19,20(sp)
   275f4:	dc800415 	stw	r18,16(sp)
   275f8:	dfc00715 	stw	ra,28(sp)
   275fc:	3825883a 	mov	r18,r7
   27600:	8822d57a 	srli	r17,r17,21
   27604:	00268800 	call	26880 <_Balloc>
   27608:	1027883a 	mov	r19,r2
   2760c:	00800434 	movhi	r2,16
   27610:	10bfffc4 	addi	r2,r2,-1
   27614:	808c703a 	and	r6,r16,r2
   27618:	88000126 	beq	r17,zero,27620 <__d2b+0x50>
   2761c:	31800434 	orhi	r6,r6,16
   27620:	d9800015 	stw	r6,0(sp)
   27624:	a0002426 	beq	r20,zero,276b8 <__d2b+0xe8>
   27628:	d9000104 	addi	r4,sp,4
   2762c:	dd000115 	stw	r20,4(sp)
   27630:	0026c040 	call	26c04 <__lo0bits>
   27634:	d8c00017 	ldw	r3,0(sp)
   27638:	10002f1e 	bne	r2,zero,276f8 <__d2b+0x128>
   2763c:	d9000117 	ldw	r4,4(sp)
   27640:	99000515 	stw	r4,20(r19)
   27644:	1821003a 	cmpeq	r16,r3,zero
   27648:	01000084 	movi	r4,2
   2764c:	2421c83a 	sub	r16,r4,r16
   27650:	98c00615 	stw	r3,24(r19)
   27654:	9c000415 	stw	r16,16(r19)
   27658:	88001f1e 	bne	r17,zero,276d8 <__d2b+0x108>
   2765c:	10bef384 	addi	r2,r2,-1074
   27660:	90800015 	stw	r2,0(r18)
   27664:	00900034 	movhi	r2,16384
   27668:	10bfffc4 	addi	r2,r2,-1
   2766c:	8085883a 	add	r2,r16,r2
   27670:	1085883a 	add	r2,r2,r2
   27674:	1085883a 	add	r2,r2,r2
   27678:	9885883a 	add	r2,r19,r2
   2767c:	11000517 	ldw	r4,20(r2)
   27680:	8020917a 	slli	r16,r16,5
   27684:	0026b9c0 	call	26b9c <__hi0bits>
   27688:	d8c00817 	ldw	r3,32(sp)
   2768c:	8085c83a 	sub	r2,r16,r2
   27690:	18800015 	stw	r2,0(r3)
   27694:	9805883a 	mov	r2,r19
   27698:	dfc00717 	ldw	ra,28(sp)
   2769c:	dd000617 	ldw	r20,24(sp)
   276a0:	dcc00517 	ldw	r19,20(sp)
   276a4:	dc800417 	ldw	r18,16(sp)
   276a8:	dc400317 	ldw	r17,12(sp)
   276ac:	dc000217 	ldw	r16,8(sp)
   276b0:	dec00804 	addi	sp,sp,32
   276b4:	f800283a 	ret
   276b8:	d809883a 	mov	r4,sp
   276bc:	0026c040 	call	26c04 <__lo0bits>
   276c0:	d8c00017 	ldw	r3,0(sp)
   276c4:	04000044 	movi	r16,1
   276c8:	9c000415 	stw	r16,16(r19)
   276cc:	98c00515 	stw	r3,20(r19)
   276d0:	10800804 	addi	r2,r2,32
   276d4:	883fe126 	beq	r17,zero,2765c <_gp+0xfffec4f8>
   276d8:	00c00d44 	movi	r3,53
   276dc:	8c7ef344 	addi	r17,r17,-1075
   276e0:	88a3883a 	add	r17,r17,r2
   276e4:	1885c83a 	sub	r2,r3,r2
   276e8:	d8c00817 	ldw	r3,32(sp)
   276ec:	94400015 	stw	r17,0(r18)
   276f0:	18800015 	stw	r2,0(r3)
   276f4:	003fe706 	br	27694 <_gp+0xfffec530>
   276f8:	01000804 	movi	r4,32
   276fc:	2089c83a 	sub	r4,r4,r2
   27700:	1908983a 	sll	r4,r3,r4
   27704:	d9400117 	ldw	r5,4(sp)
   27708:	1886d83a 	srl	r3,r3,r2
   2770c:	2148b03a 	or	r4,r4,r5
   27710:	99000515 	stw	r4,20(r19)
   27714:	d8c00015 	stw	r3,0(sp)
   27718:	003fca06 	br	27644 <_gp+0xfffec4e0>

0002771c <__ratio>:
   2771c:	defff904 	addi	sp,sp,-28
   27720:	dc400315 	stw	r17,12(sp)
   27724:	2823883a 	mov	r17,r5
   27728:	d9400104 	addi	r5,sp,4
   2772c:	dfc00615 	stw	ra,24(sp)
   27730:	dcc00515 	stw	r19,20(sp)
   27734:	dc800415 	stw	r18,16(sp)
   27738:	2027883a 	mov	r19,r4
   2773c:	dc000215 	stw	r16,8(sp)
   27740:	00274c40 	call	274c4 <__b2d>
   27744:	d80b883a 	mov	r5,sp
   27748:	8809883a 	mov	r4,r17
   2774c:	1025883a 	mov	r18,r2
   27750:	1821883a 	mov	r16,r3
   27754:	00274c40 	call	274c4 <__b2d>
   27758:	8a000417 	ldw	r8,16(r17)
   2775c:	99000417 	ldw	r4,16(r19)
   27760:	d9400117 	ldw	r5,4(sp)
   27764:	2209c83a 	sub	r4,r4,r8
   27768:	2010917a 	slli	r8,r4,5
   2776c:	d9000017 	ldw	r4,0(sp)
   27770:	2909c83a 	sub	r4,r5,r4
   27774:	4109883a 	add	r4,r8,r4
   27778:	01000e0e 	bge	zero,r4,277b4 <__ratio+0x98>
   2777c:	2008953a 	slli	r4,r4,20
   27780:	2421883a 	add	r16,r4,r16
   27784:	100d883a 	mov	r6,r2
   27788:	180f883a 	mov	r7,r3
   2778c:	9009883a 	mov	r4,r18
   27790:	800b883a 	mov	r5,r16
   27794:	002b7e00 	call	2b7e0 <__divdf3>
   27798:	dfc00617 	ldw	ra,24(sp)
   2779c:	dcc00517 	ldw	r19,20(sp)
   277a0:	dc800417 	ldw	r18,16(sp)
   277a4:	dc400317 	ldw	r17,12(sp)
   277a8:	dc000217 	ldw	r16,8(sp)
   277ac:	dec00704 	addi	sp,sp,28
   277b0:	f800283a 	ret
   277b4:	2008953a 	slli	r4,r4,20
   277b8:	1907c83a 	sub	r3,r3,r4
   277bc:	003ff106 	br	27784 <_gp+0xfffec620>

000277c0 <_mprec_log10>:
   277c0:	defffe04 	addi	sp,sp,-8
   277c4:	dc000015 	stw	r16,0(sp)
   277c8:	dfc00115 	stw	ra,4(sp)
   277cc:	008005c4 	movi	r2,23
   277d0:	2021883a 	mov	r16,r4
   277d4:	11000d0e 	bge	r2,r4,2780c <_mprec_log10+0x4c>
   277d8:	0005883a 	mov	r2,zero
   277dc:	00cffc34 	movhi	r3,16368
   277e0:	843fffc4 	addi	r16,r16,-1
   277e4:	000d883a 	mov	r6,zero
   277e8:	01d00934 	movhi	r7,16420
   277ec:	1009883a 	mov	r4,r2
   277f0:	180b883a 	mov	r5,r3
   277f4:	002c4080 	call	2c408 <__muldf3>
   277f8:	803ff91e 	bne	r16,zero,277e0 <_gp+0xfffec67c>
   277fc:	dfc00117 	ldw	ra,4(sp)
   27800:	dc000017 	ldw	r16,0(sp)
   27804:	dec00204 	addi	sp,sp,8
   27808:	f800283a 	ret
   2780c:	202090fa 	slli	r16,r4,3
   27810:	008000f4 	movhi	r2,3
   27814:	10843e04 	addi	r2,r2,4344
   27818:	1421883a 	add	r16,r2,r16
   2781c:	80800017 	ldw	r2,0(r16)
   27820:	80c00117 	ldw	r3,4(r16)
   27824:	dfc00117 	ldw	ra,4(sp)
   27828:	dc000017 	ldw	r16,0(sp)
   2782c:	dec00204 	addi	sp,sp,8
   27830:	f800283a 	ret

00027834 <__copybits>:
   27834:	297fffc4 	addi	r5,r5,-1
   27838:	280fd17a 	srai	r7,r5,5
   2783c:	30c00417 	ldw	r3,16(r6)
   27840:	30800504 	addi	r2,r6,20
   27844:	39c00044 	addi	r7,r7,1
   27848:	18c7883a 	add	r3,r3,r3
   2784c:	39cf883a 	add	r7,r7,r7
   27850:	18c7883a 	add	r3,r3,r3
   27854:	39cf883a 	add	r7,r7,r7
   27858:	10c7883a 	add	r3,r2,r3
   2785c:	21cf883a 	add	r7,r4,r7
   27860:	10c00d2e 	bgeu	r2,r3,27898 <__copybits+0x64>
   27864:	200b883a 	mov	r5,r4
   27868:	12000017 	ldw	r8,0(r2)
   2786c:	29400104 	addi	r5,r5,4
   27870:	10800104 	addi	r2,r2,4
   27874:	2a3fff15 	stw	r8,-4(r5)
   27878:	10fffb36 	bltu	r2,r3,27868 <_gp+0xfffec704>
   2787c:	1985c83a 	sub	r2,r3,r6
   27880:	10bffac4 	addi	r2,r2,-21
   27884:	1004d0ba 	srli	r2,r2,2
   27888:	10800044 	addi	r2,r2,1
   2788c:	1085883a 	add	r2,r2,r2
   27890:	1085883a 	add	r2,r2,r2
   27894:	2089883a 	add	r4,r4,r2
   27898:	21c0032e 	bgeu	r4,r7,278a8 <__copybits+0x74>
   2789c:	20000015 	stw	zero,0(r4)
   278a0:	21000104 	addi	r4,r4,4
   278a4:	21fffd36 	bltu	r4,r7,2789c <_gp+0xfffec738>
   278a8:	f800283a 	ret

000278ac <__any_on>:
   278ac:	20c00417 	ldw	r3,16(r4)
   278b0:	2805d17a 	srai	r2,r5,5
   278b4:	21000504 	addi	r4,r4,20
   278b8:	18800d0e 	bge	r3,r2,278f0 <__any_on+0x44>
   278bc:	18c7883a 	add	r3,r3,r3
   278c0:	18c7883a 	add	r3,r3,r3
   278c4:	20c7883a 	add	r3,r4,r3
   278c8:	20c0192e 	bgeu	r4,r3,27930 <__any_on+0x84>
   278cc:	18bfff17 	ldw	r2,-4(r3)
   278d0:	18ffff04 	addi	r3,r3,-4
   278d4:	1000041e 	bne	r2,zero,278e8 <__any_on+0x3c>
   278d8:	20c0142e 	bgeu	r4,r3,2792c <__any_on+0x80>
   278dc:	18ffff04 	addi	r3,r3,-4
   278e0:	19400017 	ldw	r5,0(r3)
   278e4:	283ffc26 	beq	r5,zero,278d8 <_gp+0xfffec774>
   278e8:	00800044 	movi	r2,1
   278ec:	f800283a 	ret
   278f0:	10c00a0e 	bge	r2,r3,2791c <__any_on+0x70>
   278f4:	1085883a 	add	r2,r2,r2
   278f8:	1085883a 	add	r2,r2,r2
   278fc:	294007cc 	andi	r5,r5,31
   27900:	2087883a 	add	r3,r4,r2
   27904:	283ff026 	beq	r5,zero,278c8 <_gp+0xfffec764>
   27908:	19800017 	ldw	r6,0(r3)
   2790c:	3144d83a 	srl	r2,r6,r5
   27910:	114a983a 	sll	r5,r2,r5
   27914:	317ff41e 	bne	r6,r5,278e8 <_gp+0xfffec784>
   27918:	003feb06 	br	278c8 <_gp+0xfffec764>
   2791c:	1085883a 	add	r2,r2,r2
   27920:	1085883a 	add	r2,r2,r2
   27924:	2087883a 	add	r3,r4,r2
   27928:	003fe706 	br	278c8 <_gp+0xfffec764>
   2792c:	f800283a 	ret
   27930:	0005883a 	mov	r2,zero
   27934:	f800283a 	ret

00027938 <_realloc_r>:
   27938:	defff604 	addi	sp,sp,-40
   2793c:	dc800215 	stw	r18,8(sp)
   27940:	dfc00915 	stw	ra,36(sp)
   27944:	df000815 	stw	fp,32(sp)
   27948:	ddc00715 	stw	r23,28(sp)
   2794c:	dd800615 	stw	r22,24(sp)
   27950:	dd400515 	stw	r21,20(sp)
   27954:	dd000415 	stw	r20,16(sp)
   27958:	dcc00315 	stw	r19,12(sp)
   2795c:	dc400115 	stw	r17,4(sp)
   27960:	dc000015 	stw	r16,0(sp)
   27964:	3025883a 	mov	r18,r6
   27968:	2800b726 	beq	r5,zero,27c48 <_realloc_r+0x310>
   2796c:	282b883a 	mov	r21,r5
   27970:	2029883a 	mov	r20,r4
   27974:	002dd740 	call	2dd74 <__malloc_lock>
   27978:	a8bfff17 	ldw	r2,-4(r21)
   2797c:	043fff04 	movi	r16,-4
   27980:	90c002c4 	addi	r3,r18,11
   27984:	01000584 	movi	r4,22
   27988:	acfffe04 	addi	r19,r21,-8
   2798c:	1420703a 	and	r16,r2,r16
   27990:	20c0332e 	bgeu	r4,r3,27a60 <_realloc_r+0x128>
   27994:	047ffe04 	movi	r17,-8
   27998:	1c62703a 	and	r17,r3,r17
   2799c:	8807883a 	mov	r3,r17
   279a0:	88005816 	blt	r17,zero,27b04 <_realloc_r+0x1cc>
   279a4:	8c805736 	bltu	r17,r18,27b04 <_realloc_r+0x1cc>
   279a8:	80c0300e 	bge	r16,r3,27a6c <_realloc_r+0x134>
   279ac:	070000f4 	movhi	fp,3
   279b0:	e7068d04 	addi	fp,fp,6708
   279b4:	e1c00217 	ldw	r7,8(fp)
   279b8:	9c09883a 	add	r4,r19,r16
   279bc:	22000117 	ldw	r8,4(r4)
   279c0:	21c06326 	beq	r4,r7,27b50 <_realloc_r+0x218>
   279c4:	017fff84 	movi	r5,-2
   279c8:	414a703a 	and	r5,r8,r5
   279cc:	214b883a 	add	r5,r4,r5
   279d0:	29800117 	ldw	r6,4(r5)
   279d4:	3180004c 	andi	r6,r6,1
   279d8:	30003f26 	beq	r6,zero,27ad8 <_realloc_r+0x1a0>
   279dc:	1080004c 	andi	r2,r2,1
   279e0:	10008326 	beq	r2,zero,27bf0 <_realloc_r+0x2b8>
   279e4:	900b883a 	mov	r5,r18
   279e8:	a009883a 	mov	r4,r20
   279ec:	0025bc40 	call	25bc4 <_malloc_r>
   279f0:	1025883a 	mov	r18,r2
   279f4:	10011e26 	beq	r2,zero,27e70 <_realloc_r+0x538>
   279f8:	a93fff17 	ldw	r4,-4(r21)
   279fc:	10fffe04 	addi	r3,r2,-8
   27a00:	00bfff84 	movi	r2,-2
   27a04:	2084703a 	and	r2,r4,r2
   27a08:	9885883a 	add	r2,r19,r2
   27a0c:	1880ee26 	beq	r3,r2,27dc8 <_realloc_r+0x490>
   27a10:	81bfff04 	addi	r6,r16,-4
   27a14:	00800904 	movi	r2,36
   27a18:	1180b836 	bltu	r2,r6,27cfc <_realloc_r+0x3c4>
   27a1c:	00c004c4 	movi	r3,19
   27a20:	19809636 	bltu	r3,r6,27c7c <_realloc_r+0x344>
   27a24:	9005883a 	mov	r2,r18
   27a28:	a807883a 	mov	r3,r21
   27a2c:	19000017 	ldw	r4,0(r3)
   27a30:	11000015 	stw	r4,0(r2)
   27a34:	19000117 	ldw	r4,4(r3)
   27a38:	11000115 	stw	r4,4(r2)
   27a3c:	18c00217 	ldw	r3,8(r3)
   27a40:	10c00215 	stw	r3,8(r2)
   27a44:	a80b883a 	mov	r5,r21
   27a48:	a009883a 	mov	r4,r20
   27a4c:	0024fcc0 	call	24fcc <_free_r>
   27a50:	a009883a 	mov	r4,r20
   27a54:	002dd980 	call	2dd98 <__malloc_unlock>
   27a58:	9005883a 	mov	r2,r18
   27a5c:	00001206 	br	27aa8 <_realloc_r+0x170>
   27a60:	00c00404 	movi	r3,16
   27a64:	1823883a 	mov	r17,r3
   27a68:	003fce06 	br	279a4 <_gp+0xfffec840>
   27a6c:	a825883a 	mov	r18,r21
   27a70:	8445c83a 	sub	r2,r16,r17
   27a74:	00c003c4 	movi	r3,15
   27a78:	18802636 	bltu	r3,r2,27b14 <_realloc_r+0x1dc>
   27a7c:	99800117 	ldw	r6,4(r19)
   27a80:	9c07883a 	add	r3,r19,r16
   27a84:	3180004c 	andi	r6,r6,1
   27a88:	3420b03a 	or	r16,r6,r16
   27a8c:	9c000115 	stw	r16,4(r19)
   27a90:	18800117 	ldw	r2,4(r3)
   27a94:	10800054 	ori	r2,r2,1
   27a98:	18800115 	stw	r2,4(r3)
   27a9c:	a009883a 	mov	r4,r20
   27aa0:	002dd980 	call	2dd98 <__malloc_unlock>
   27aa4:	9005883a 	mov	r2,r18
   27aa8:	dfc00917 	ldw	ra,36(sp)
   27aac:	df000817 	ldw	fp,32(sp)
   27ab0:	ddc00717 	ldw	r23,28(sp)
   27ab4:	dd800617 	ldw	r22,24(sp)
   27ab8:	dd400517 	ldw	r21,20(sp)
   27abc:	dd000417 	ldw	r20,16(sp)
   27ac0:	dcc00317 	ldw	r19,12(sp)
   27ac4:	dc800217 	ldw	r18,8(sp)
   27ac8:	dc400117 	ldw	r17,4(sp)
   27acc:	dc000017 	ldw	r16,0(sp)
   27ad0:	dec00a04 	addi	sp,sp,40
   27ad4:	f800283a 	ret
   27ad8:	017fff04 	movi	r5,-4
   27adc:	414a703a 	and	r5,r8,r5
   27ae0:	814d883a 	add	r6,r16,r5
   27ae4:	30c01f16 	blt	r6,r3,27b64 <_realloc_r+0x22c>
   27ae8:	20800317 	ldw	r2,12(r4)
   27aec:	20c00217 	ldw	r3,8(r4)
   27af0:	a825883a 	mov	r18,r21
   27af4:	3021883a 	mov	r16,r6
   27af8:	18800315 	stw	r2,12(r3)
   27afc:	10c00215 	stw	r3,8(r2)
   27b00:	003fdb06 	br	27a70 <_gp+0xfffec90c>
   27b04:	00800304 	movi	r2,12
   27b08:	a0800015 	stw	r2,0(r20)
   27b0c:	0005883a 	mov	r2,zero
   27b10:	003fe506 	br	27aa8 <_gp+0xfffec944>
   27b14:	98c00117 	ldw	r3,4(r19)
   27b18:	9c4b883a 	add	r5,r19,r17
   27b1c:	11000054 	ori	r4,r2,1
   27b20:	18c0004c 	andi	r3,r3,1
   27b24:	1c62b03a 	or	r17,r3,r17
   27b28:	9c400115 	stw	r17,4(r19)
   27b2c:	29000115 	stw	r4,4(r5)
   27b30:	2885883a 	add	r2,r5,r2
   27b34:	10c00117 	ldw	r3,4(r2)
   27b38:	29400204 	addi	r5,r5,8
   27b3c:	a009883a 	mov	r4,r20
   27b40:	18c00054 	ori	r3,r3,1
   27b44:	10c00115 	stw	r3,4(r2)
   27b48:	0024fcc0 	call	24fcc <_free_r>
   27b4c:	003fd306 	br	27a9c <_gp+0xfffec938>
   27b50:	017fff04 	movi	r5,-4
   27b54:	414a703a 	and	r5,r8,r5
   27b58:	89800404 	addi	r6,r17,16
   27b5c:	8151883a 	add	r8,r16,r5
   27b60:	4180590e 	bge	r8,r6,27cc8 <_realloc_r+0x390>
   27b64:	1080004c 	andi	r2,r2,1
   27b68:	103f9e1e 	bne	r2,zero,279e4 <_gp+0xfffec880>
   27b6c:	adbffe17 	ldw	r22,-8(r21)
   27b70:	00bfff04 	movi	r2,-4
   27b74:	9dadc83a 	sub	r22,r19,r22
   27b78:	b1800117 	ldw	r6,4(r22)
   27b7c:	3084703a 	and	r2,r6,r2
   27b80:	20002026 	beq	r4,zero,27c04 <_realloc_r+0x2cc>
   27b84:	80af883a 	add	r23,r16,r2
   27b88:	b96f883a 	add	r23,r23,r5
   27b8c:	21c05f26 	beq	r4,r7,27d0c <_realloc_r+0x3d4>
   27b90:	b8c01c16 	blt	r23,r3,27c04 <_realloc_r+0x2cc>
   27b94:	20800317 	ldw	r2,12(r4)
   27b98:	20c00217 	ldw	r3,8(r4)
   27b9c:	81bfff04 	addi	r6,r16,-4
   27ba0:	01000904 	movi	r4,36
   27ba4:	18800315 	stw	r2,12(r3)
   27ba8:	10c00215 	stw	r3,8(r2)
   27bac:	b0c00217 	ldw	r3,8(r22)
   27bb0:	b0800317 	ldw	r2,12(r22)
   27bb4:	b4800204 	addi	r18,r22,8
   27bb8:	18800315 	stw	r2,12(r3)
   27bbc:	10c00215 	stw	r3,8(r2)
   27bc0:	21801b36 	bltu	r4,r6,27c30 <_realloc_r+0x2f8>
   27bc4:	008004c4 	movi	r2,19
   27bc8:	1180352e 	bgeu	r2,r6,27ca0 <_realloc_r+0x368>
   27bcc:	a8800017 	ldw	r2,0(r21)
   27bd0:	b0800215 	stw	r2,8(r22)
   27bd4:	a8800117 	ldw	r2,4(r21)
   27bd8:	b0800315 	stw	r2,12(r22)
   27bdc:	008006c4 	movi	r2,27
   27be0:	11807f36 	bltu	r2,r6,27de0 <_realloc_r+0x4a8>
   27be4:	b0800404 	addi	r2,r22,16
   27be8:	ad400204 	addi	r21,r21,8
   27bec:	00002d06 	br	27ca4 <_realloc_r+0x36c>
   27bf0:	adbffe17 	ldw	r22,-8(r21)
   27bf4:	00bfff04 	movi	r2,-4
   27bf8:	9dadc83a 	sub	r22,r19,r22
   27bfc:	b1000117 	ldw	r4,4(r22)
   27c00:	2084703a 	and	r2,r4,r2
   27c04:	b03f7726 	beq	r22,zero,279e4 <_gp+0xfffec880>
   27c08:	80af883a 	add	r23,r16,r2
   27c0c:	b8ff7516 	blt	r23,r3,279e4 <_gp+0xfffec880>
   27c10:	b0800317 	ldw	r2,12(r22)
   27c14:	b0c00217 	ldw	r3,8(r22)
   27c18:	81bfff04 	addi	r6,r16,-4
   27c1c:	01000904 	movi	r4,36
   27c20:	18800315 	stw	r2,12(r3)
   27c24:	10c00215 	stw	r3,8(r2)
   27c28:	b4800204 	addi	r18,r22,8
   27c2c:	21bfe52e 	bgeu	r4,r6,27bc4 <_gp+0xfffeca60>
   27c30:	a80b883a 	mov	r5,r21
   27c34:	9009883a 	mov	r4,r18
   27c38:	00265fc0 	call	265fc <memmove>
   27c3c:	b821883a 	mov	r16,r23
   27c40:	b027883a 	mov	r19,r22
   27c44:	003f8a06 	br	27a70 <_gp+0xfffec90c>
   27c48:	300b883a 	mov	r5,r6
   27c4c:	dfc00917 	ldw	ra,36(sp)
   27c50:	df000817 	ldw	fp,32(sp)
   27c54:	ddc00717 	ldw	r23,28(sp)
   27c58:	dd800617 	ldw	r22,24(sp)
   27c5c:	dd400517 	ldw	r21,20(sp)
   27c60:	dd000417 	ldw	r20,16(sp)
   27c64:	dcc00317 	ldw	r19,12(sp)
   27c68:	dc800217 	ldw	r18,8(sp)
   27c6c:	dc400117 	ldw	r17,4(sp)
   27c70:	dc000017 	ldw	r16,0(sp)
   27c74:	dec00a04 	addi	sp,sp,40
   27c78:	0025bc41 	jmpi	25bc4 <_malloc_r>
   27c7c:	a8c00017 	ldw	r3,0(r21)
   27c80:	90c00015 	stw	r3,0(r18)
   27c84:	a8c00117 	ldw	r3,4(r21)
   27c88:	90c00115 	stw	r3,4(r18)
   27c8c:	00c006c4 	movi	r3,27
   27c90:	19804536 	bltu	r3,r6,27da8 <_realloc_r+0x470>
   27c94:	90800204 	addi	r2,r18,8
   27c98:	a8c00204 	addi	r3,r21,8
   27c9c:	003f6306 	br	27a2c <_gp+0xfffec8c8>
   27ca0:	9005883a 	mov	r2,r18
   27ca4:	a8c00017 	ldw	r3,0(r21)
   27ca8:	b821883a 	mov	r16,r23
   27cac:	b027883a 	mov	r19,r22
   27cb0:	10c00015 	stw	r3,0(r2)
   27cb4:	a8c00117 	ldw	r3,4(r21)
   27cb8:	10c00115 	stw	r3,4(r2)
   27cbc:	a8c00217 	ldw	r3,8(r21)
   27cc0:	10c00215 	stw	r3,8(r2)
   27cc4:	003f6a06 	br	27a70 <_gp+0xfffec90c>
   27cc8:	9c67883a 	add	r19,r19,r17
   27ccc:	4445c83a 	sub	r2,r8,r17
   27cd0:	e4c00215 	stw	r19,8(fp)
   27cd4:	10800054 	ori	r2,r2,1
   27cd8:	98800115 	stw	r2,4(r19)
   27cdc:	a8bfff17 	ldw	r2,-4(r21)
   27ce0:	a009883a 	mov	r4,r20
   27ce4:	1080004c 	andi	r2,r2,1
   27ce8:	1462b03a 	or	r17,r2,r17
   27cec:	ac7fff15 	stw	r17,-4(r21)
   27cf0:	002dd980 	call	2dd98 <__malloc_unlock>
   27cf4:	a805883a 	mov	r2,r21
   27cf8:	003f6b06 	br	27aa8 <_gp+0xfffec944>
   27cfc:	a80b883a 	mov	r5,r21
   27d00:	9009883a 	mov	r4,r18
   27d04:	00265fc0 	call	265fc <memmove>
   27d08:	003f4e06 	br	27a44 <_gp+0xfffec8e0>
   27d0c:	89000404 	addi	r4,r17,16
   27d10:	b93fbc16 	blt	r23,r4,27c04 <_gp+0xfffecaa0>
   27d14:	b0800317 	ldw	r2,12(r22)
   27d18:	b0c00217 	ldw	r3,8(r22)
   27d1c:	81bfff04 	addi	r6,r16,-4
   27d20:	01000904 	movi	r4,36
   27d24:	18800315 	stw	r2,12(r3)
   27d28:	10c00215 	stw	r3,8(r2)
   27d2c:	b4800204 	addi	r18,r22,8
   27d30:	21804336 	bltu	r4,r6,27e40 <_realloc_r+0x508>
   27d34:	008004c4 	movi	r2,19
   27d38:	11803f2e 	bgeu	r2,r6,27e38 <_realloc_r+0x500>
   27d3c:	a8800017 	ldw	r2,0(r21)
   27d40:	b0800215 	stw	r2,8(r22)
   27d44:	a8800117 	ldw	r2,4(r21)
   27d48:	b0800315 	stw	r2,12(r22)
   27d4c:	008006c4 	movi	r2,27
   27d50:	11803f36 	bltu	r2,r6,27e50 <_realloc_r+0x518>
   27d54:	b0800404 	addi	r2,r22,16
   27d58:	ad400204 	addi	r21,r21,8
   27d5c:	a8c00017 	ldw	r3,0(r21)
   27d60:	10c00015 	stw	r3,0(r2)
   27d64:	a8c00117 	ldw	r3,4(r21)
   27d68:	10c00115 	stw	r3,4(r2)
   27d6c:	a8c00217 	ldw	r3,8(r21)
   27d70:	10c00215 	stw	r3,8(r2)
   27d74:	b447883a 	add	r3,r22,r17
   27d78:	bc45c83a 	sub	r2,r23,r17
   27d7c:	e0c00215 	stw	r3,8(fp)
   27d80:	10800054 	ori	r2,r2,1
   27d84:	18800115 	stw	r2,4(r3)
   27d88:	b0800117 	ldw	r2,4(r22)
   27d8c:	a009883a 	mov	r4,r20
   27d90:	1080004c 	andi	r2,r2,1
   27d94:	1462b03a 	or	r17,r2,r17
   27d98:	b4400115 	stw	r17,4(r22)
   27d9c:	002dd980 	call	2dd98 <__malloc_unlock>
   27da0:	9005883a 	mov	r2,r18
   27da4:	003f4006 	br	27aa8 <_gp+0xfffec944>
   27da8:	a8c00217 	ldw	r3,8(r21)
   27dac:	90c00215 	stw	r3,8(r18)
   27db0:	a8c00317 	ldw	r3,12(r21)
   27db4:	90c00315 	stw	r3,12(r18)
   27db8:	30801126 	beq	r6,r2,27e00 <_realloc_r+0x4c8>
   27dbc:	90800404 	addi	r2,r18,16
   27dc0:	a8c00404 	addi	r3,r21,16
   27dc4:	003f1906 	br	27a2c <_gp+0xfffec8c8>
   27dc8:	90ffff17 	ldw	r3,-4(r18)
   27dcc:	00bfff04 	movi	r2,-4
   27dd0:	a825883a 	mov	r18,r21
   27dd4:	1884703a 	and	r2,r3,r2
   27dd8:	80a1883a 	add	r16,r16,r2
   27ddc:	003f2406 	br	27a70 <_gp+0xfffec90c>
   27de0:	a8800217 	ldw	r2,8(r21)
   27de4:	b0800415 	stw	r2,16(r22)
   27de8:	a8800317 	ldw	r2,12(r21)
   27dec:	b0800515 	stw	r2,20(r22)
   27df0:	31000a26 	beq	r6,r4,27e1c <_realloc_r+0x4e4>
   27df4:	b0800604 	addi	r2,r22,24
   27df8:	ad400404 	addi	r21,r21,16
   27dfc:	003fa906 	br	27ca4 <_gp+0xfffecb40>
   27e00:	a9000417 	ldw	r4,16(r21)
   27e04:	90800604 	addi	r2,r18,24
   27e08:	a8c00604 	addi	r3,r21,24
   27e0c:	91000415 	stw	r4,16(r18)
   27e10:	a9000517 	ldw	r4,20(r21)
   27e14:	91000515 	stw	r4,20(r18)
   27e18:	003f0406 	br	27a2c <_gp+0xfffec8c8>
   27e1c:	a8c00417 	ldw	r3,16(r21)
   27e20:	ad400604 	addi	r21,r21,24
   27e24:	b0800804 	addi	r2,r22,32
   27e28:	b0c00615 	stw	r3,24(r22)
   27e2c:	a8ffff17 	ldw	r3,-4(r21)
   27e30:	b0c00715 	stw	r3,28(r22)
   27e34:	003f9b06 	br	27ca4 <_gp+0xfffecb40>
   27e38:	9005883a 	mov	r2,r18
   27e3c:	003fc706 	br	27d5c <_gp+0xfffecbf8>
   27e40:	a80b883a 	mov	r5,r21
   27e44:	9009883a 	mov	r4,r18
   27e48:	00265fc0 	call	265fc <memmove>
   27e4c:	003fc906 	br	27d74 <_gp+0xfffecc10>
   27e50:	a8800217 	ldw	r2,8(r21)
   27e54:	b0800415 	stw	r2,16(r22)
   27e58:	a8800317 	ldw	r2,12(r21)
   27e5c:	b0800515 	stw	r2,20(r22)
   27e60:	31000726 	beq	r6,r4,27e80 <_realloc_r+0x548>
   27e64:	b0800604 	addi	r2,r22,24
   27e68:	ad400404 	addi	r21,r21,16
   27e6c:	003fbb06 	br	27d5c <_gp+0xfffecbf8>
   27e70:	a009883a 	mov	r4,r20
   27e74:	002dd980 	call	2dd98 <__malloc_unlock>
   27e78:	0005883a 	mov	r2,zero
   27e7c:	003f0a06 	br	27aa8 <_gp+0xfffec944>
   27e80:	a8c00417 	ldw	r3,16(r21)
   27e84:	ad400604 	addi	r21,r21,24
   27e88:	b0800804 	addi	r2,r22,32
   27e8c:	b0c00615 	stw	r3,24(r22)
   27e90:	a8ffff17 	ldw	r3,-4(r21)
   27e94:	b0c00715 	stw	r3,28(r22)
   27e98:	003fb006 	br	27d5c <_gp+0xfffecbf8>

00027e9c <__fpclassifyd>:
   27e9c:	00a00034 	movhi	r2,32768
   27ea0:	10bfffc4 	addi	r2,r2,-1
   27ea4:	2884703a 	and	r2,r5,r2
   27ea8:	10000726 	beq	r2,zero,27ec8 <__fpclassifyd+0x2c>
   27eac:	00fffc34 	movhi	r3,65520
   27eb0:	019ff834 	movhi	r6,32736
   27eb4:	28c7883a 	add	r3,r5,r3
   27eb8:	31bfffc4 	addi	r6,r6,-1
   27ebc:	30c00536 	bltu	r6,r3,27ed4 <__fpclassifyd+0x38>
   27ec0:	00800104 	movi	r2,4
   27ec4:	f800283a 	ret
   27ec8:	2000021e 	bne	r4,zero,27ed4 <__fpclassifyd+0x38>
   27ecc:	00800084 	movi	r2,2
   27ed0:	f800283a 	ret
   27ed4:	00dffc34 	movhi	r3,32752
   27ed8:	019ff834 	movhi	r6,32736
   27edc:	28cb883a 	add	r5,r5,r3
   27ee0:	31bfffc4 	addi	r6,r6,-1
   27ee4:	317ff62e 	bgeu	r6,r5,27ec0 <_gp+0xfffecd5c>
   27ee8:	01400434 	movhi	r5,16
   27eec:	297fffc4 	addi	r5,r5,-1
   27ef0:	28800236 	bltu	r5,r2,27efc <__fpclassifyd+0x60>
   27ef4:	008000c4 	movi	r2,3
   27ef8:	f800283a 	ret
   27efc:	10c00226 	beq	r2,r3,27f08 <__fpclassifyd+0x6c>
   27f00:	0005883a 	mov	r2,zero
   27f04:	f800283a 	ret
   27f08:	2005003a 	cmpeq	r2,r4,zero
   27f0c:	f800283a 	ret

00027f10 <_sbrk_r>:
   27f10:	defffd04 	addi	sp,sp,-12
   27f14:	dc000015 	stw	r16,0(sp)
   27f18:	040000f4 	movhi	r16,3
   27f1c:	dc400115 	stw	r17,4(sp)
   27f20:	84137604 	addi	r16,r16,19928
   27f24:	2023883a 	mov	r17,r4
   27f28:	2809883a 	mov	r4,r5
   27f2c:	dfc00215 	stw	ra,8(sp)
   27f30:	80000015 	stw	zero,0(r16)
   27f34:	002df800 	call	2df80 <sbrk>
   27f38:	00ffffc4 	movi	r3,-1
   27f3c:	10c00526 	beq	r2,r3,27f54 <_sbrk_r+0x44>
   27f40:	dfc00217 	ldw	ra,8(sp)
   27f44:	dc400117 	ldw	r17,4(sp)
   27f48:	dc000017 	ldw	r16,0(sp)
   27f4c:	dec00304 	addi	sp,sp,12
   27f50:	f800283a 	ret
   27f54:	80c00017 	ldw	r3,0(r16)
   27f58:	183ff926 	beq	r3,zero,27f40 <_gp+0xfffecddc>
   27f5c:	88c00015 	stw	r3,0(r17)
   27f60:	003ff706 	br	27f40 <_gp+0xfffecddc>

00027f64 <__sread>:
   27f64:	defffe04 	addi	sp,sp,-8
   27f68:	dc000015 	stw	r16,0(sp)
   27f6c:	2821883a 	mov	r16,r5
   27f70:	2940038f 	ldh	r5,14(r5)
   27f74:	dfc00115 	stw	ra,4(sp)
   27f78:	0029e200 	call	29e20 <_read_r>
   27f7c:	10000716 	blt	r2,zero,27f9c <__sread+0x38>
   27f80:	80c01417 	ldw	r3,80(r16)
   27f84:	1887883a 	add	r3,r3,r2
   27f88:	80c01415 	stw	r3,80(r16)
   27f8c:	dfc00117 	ldw	ra,4(sp)
   27f90:	dc000017 	ldw	r16,0(sp)
   27f94:	dec00204 	addi	sp,sp,8
   27f98:	f800283a 	ret
   27f9c:	80c0030b 	ldhu	r3,12(r16)
   27fa0:	18fbffcc 	andi	r3,r3,61439
   27fa4:	80c0030d 	sth	r3,12(r16)
   27fa8:	dfc00117 	ldw	ra,4(sp)
   27fac:	dc000017 	ldw	r16,0(sp)
   27fb0:	dec00204 	addi	sp,sp,8
   27fb4:	f800283a 	ret

00027fb8 <__seofread>:
   27fb8:	0005883a 	mov	r2,zero
   27fbc:	f800283a 	ret

00027fc0 <__swrite>:
   27fc0:	2880030b 	ldhu	r2,12(r5)
   27fc4:	defffb04 	addi	sp,sp,-20
   27fc8:	dcc00315 	stw	r19,12(sp)
   27fcc:	dc800215 	stw	r18,8(sp)
   27fd0:	dc400115 	stw	r17,4(sp)
   27fd4:	dc000015 	stw	r16,0(sp)
   27fd8:	dfc00415 	stw	ra,16(sp)
   27fdc:	10c0400c 	andi	r3,r2,256
   27fe0:	2821883a 	mov	r16,r5
   27fe4:	2023883a 	mov	r17,r4
   27fe8:	3025883a 	mov	r18,r6
   27fec:	3827883a 	mov	r19,r7
   27ff0:	18000526 	beq	r3,zero,28008 <__swrite+0x48>
   27ff4:	2940038f 	ldh	r5,14(r5)
   27ff8:	01c00084 	movi	r7,2
   27ffc:	000d883a 	mov	r6,zero
   28000:	0029dc00 	call	29dc0 <_lseek_r>
   28004:	8080030b 	ldhu	r2,12(r16)
   28008:	8140038f 	ldh	r5,14(r16)
   2800c:	10bbffcc 	andi	r2,r2,61439
   28010:	980f883a 	mov	r7,r19
   28014:	900d883a 	mov	r6,r18
   28018:	8809883a 	mov	r4,r17
   2801c:	8080030d 	sth	r2,12(r16)
   28020:	dfc00417 	ldw	ra,16(sp)
   28024:	dcc00317 	ldw	r19,12(sp)
   28028:	dc800217 	ldw	r18,8(sp)
   2802c:	dc400117 	ldw	r17,4(sp)
   28030:	dc000017 	ldw	r16,0(sp)
   28034:	dec00504 	addi	sp,sp,20
   28038:	00298741 	jmpi	29874 <_write_r>

0002803c <__sseek>:
   2803c:	defffe04 	addi	sp,sp,-8
   28040:	dc000015 	stw	r16,0(sp)
   28044:	2821883a 	mov	r16,r5
   28048:	2940038f 	ldh	r5,14(r5)
   2804c:	dfc00115 	stw	ra,4(sp)
   28050:	0029dc00 	call	29dc0 <_lseek_r>
   28054:	00ffffc4 	movi	r3,-1
   28058:	10c00826 	beq	r2,r3,2807c <__sseek+0x40>
   2805c:	80c0030b 	ldhu	r3,12(r16)
   28060:	80801415 	stw	r2,80(r16)
   28064:	18c40014 	ori	r3,r3,4096
   28068:	80c0030d 	sth	r3,12(r16)
   2806c:	dfc00117 	ldw	ra,4(sp)
   28070:	dc000017 	ldw	r16,0(sp)
   28074:	dec00204 	addi	sp,sp,8
   28078:	f800283a 	ret
   2807c:	80c0030b 	ldhu	r3,12(r16)
   28080:	18fbffcc 	andi	r3,r3,61439
   28084:	80c0030d 	sth	r3,12(r16)
   28088:	dfc00117 	ldw	ra,4(sp)
   2808c:	dc000017 	ldw	r16,0(sp)
   28090:	dec00204 	addi	sp,sp,8
   28094:	f800283a 	ret

00028098 <__sclose>:
   28098:	2940038f 	ldh	r5,14(r5)
   2809c:	00298d41 	jmpi	298d4 <_close_r>

000280a0 <strcmp>:
   280a0:	2144b03a 	or	r2,r4,r5
   280a4:	108000cc 	andi	r2,r2,3
   280a8:	1000171e 	bne	r2,zero,28108 <strcmp+0x68>
   280ac:	20800017 	ldw	r2,0(r4)
   280b0:	28c00017 	ldw	r3,0(r5)
   280b4:	10c0141e 	bne	r2,r3,28108 <strcmp+0x68>
   280b8:	027fbff4 	movhi	r9,65279
   280bc:	4a7fbfc4 	addi	r9,r9,-257
   280c0:	0086303a 	nor	r3,zero,r2
   280c4:	02202074 	movhi	r8,32897
   280c8:	1245883a 	add	r2,r2,r9
   280cc:	42202004 	addi	r8,r8,-32640
   280d0:	10c4703a 	and	r2,r2,r3
   280d4:	1204703a 	and	r2,r2,r8
   280d8:	10000226 	beq	r2,zero,280e4 <strcmp+0x44>
   280dc:	00002306 	br	2816c <strcmp+0xcc>
   280e0:	1000221e 	bne	r2,zero,2816c <strcmp+0xcc>
   280e4:	21000104 	addi	r4,r4,4
   280e8:	20c00017 	ldw	r3,0(r4)
   280ec:	29400104 	addi	r5,r5,4
   280f0:	29800017 	ldw	r6,0(r5)
   280f4:	1a4f883a 	add	r7,r3,r9
   280f8:	00c4303a 	nor	r2,zero,r3
   280fc:	3884703a 	and	r2,r7,r2
   28100:	1204703a 	and	r2,r2,r8
   28104:	19bff626 	beq	r3,r6,280e0 <_gp+0xfffecf7c>
   28108:	20800003 	ldbu	r2,0(r4)
   2810c:	10c03fcc 	andi	r3,r2,255
   28110:	18c0201c 	xori	r3,r3,128
   28114:	18ffe004 	addi	r3,r3,-128
   28118:	18000c26 	beq	r3,zero,2814c <strcmp+0xac>
   2811c:	29800007 	ldb	r6,0(r5)
   28120:	19800326 	beq	r3,r6,28130 <strcmp+0x90>
   28124:	00001306 	br	28174 <strcmp+0xd4>
   28128:	29800007 	ldb	r6,0(r5)
   2812c:	11800b1e 	bne	r2,r6,2815c <strcmp+0xbc>
   28130:	21000044 	addi	r4,r4,1
   28134:	20c00003 	ldbu	r3,0(r4)
   28138:	29400044 	addi	r5,r5,1
   2813c:	18803fcc 	andi	r2,r3,255
   28140:	1080201c 	xori	r2,r2,128
   28144:	10bfe004 	addi	r2,r2,-128
   28148:	103ff71e 	bne	r2,zero,28128 <_gp+0xfffecfc4>
   2814c:	0007883a 	mov	r3,zero
   28150:	28800003 	ldbu	r2,0(r5)
   28154:	1885c83a 	sub	r2,r3,r2
   28158:	f800283a 	ret
   2815c:	28800003 	ldbu	r2,0(r5)
   28160:	18c03fcc 	andi	r3,r3,255
   28164:	1885c83a 	sub	r2,r3,r2
   28168:	f800283a 	ret
   2816c:	0005883a 	mov	r2,zero
   28170:	f800283a 	ret
   28174:	10c03fcc 	andi	r3,r2,255
   28178:	003ff506 	br	28150 <_gp+0xfffecfec>

0002817c <__sprint_r.part.0>:
   2817c:	28801917 	ldw	r2,100(r5)
   28180:	defff604 	addi	sp,sp,-40
   28184:	dd400515 	stw	r21,20(sp)
   28188:	dfc00915 	stw	ra,36(sp)
   2818c:	df000815 	stw	fp,32(sp)
   28190:	ddc00715 	stw	r23,28(sp)
   28194:	dd800615 	stw	r22,24(sp)
   28198:	dd000415 	stw	r20,16(sp)
   2819c:	dcc00315 	stw	r19,12(sp)
   281a0:	dc800215 	stw	r18,8(sp)
   281a4:	dc400115 	stw	r17,4(sp)
   281a8:	dc000015 	stw	r16,0(sp)
   281ac:	1088000c 	andi	r2,r2,8192
   281b0:	302b883a 	mov	r21,r6
   281b4:	10002e26 	beq	r2,zero,28270 <__sprint_r.part.0+0xf4>
   281b8:	30800217 	ldw	r2,8(r6)
   281bc:	35800017 	ldw	r22,0(r6)
   281c0:	10002926 	beq	r2,zero,28268 <__sprint_r.part.0+0xec>
   281c4:	2827883a 	mov	r19,r5
   281c8:	2029883a 	mov	r20,r4
   281cc:	b5c00104 	addi	r23,r22,4
   281d0:	04bfffc4 	movi	r18,-1
   281d4:	bc400017 	ldw	r17,0(r23)
   281d8:	b4000017 	ldw	r16,0(r22)
   281dc:	0039883a 	mov	fp,zero
   281e0:	8822d0ba 	srli	r17,r17,2
   281e4:	8800031e 	bne	r17,zero,281f4 <__sprint_r.part.0+0x78>
   281e8:	00001806 	br	2824c <__sprint_r.part.0+0xd0>
   281ec:	84000104 	addi	r16,r16,4
   281f0:	8f001526 	beq	r17,fp,28248 <__sprint_r.part.0+0xcc>
   281f4:	81400017 	ldw	r5,0(r16)
   281f8:	980d883a 	mov	r6,r19
   281fc:	a009883a 	mov	r4,r20
   28200:	0029c6c0 	call	29c6c <_fputwc_r>
   28204:	e7000044 	addi	fp,fp,1
   28208:	14bff81e 	bne	r2,r18,281ec <_gp+0xfffed088>
   2820c:	9005883a 	mov	r2,r18
   28210:	a8000215 	stw	zero,8(r21)
   28214:	a8000115 	stw	zero,4(r21)
   28218:	dfc00917 	ldw	ra,36(sp)
   2821c:	df000817 	ldw	fp,32(sp)
   28220:	ddc00717 	ldw	r23,28(sp)
   28224:	dd800617 	ldw	r22,24(sp)
   28228:	dd400517 	ldw	r21,20(sp)
   2822c:	dd000417 	ldw	r20,16(sp)
   28230:	dcc00317 	ldw	r19,12(sp)
   28234:	dc800217 	ldw	r18,8(sp)
   28238:	dc400117 	ldw	r17,4(sp)
   2823c:	dc000017 	ldw	r16,0(sp)
   28240:	dec00a04 	addi	sp,sp,40
   28244:	f800283a 	ret
   28248:	a8800217 	ldw	r2,8(r21)
   2824c:	8c63883a 	add	r17,r17,r17
   28250:	8c63883a 	add	r17,r17,r17
   28254:	1445c83a 	sub	r2,r2,r17
   28258:	a8800215 	stw	r2,8(r21)
   2825c:	b5800204 	addi	r22,r22,8
   28260:	bdc00204 	addi	r23,r23,8
   28264:	103fdb1e 	bne	r2,zero,281d4 <_gp+0xfffed070>
   28268:	0005883a 	mov	r2,zero
   2826c:	003fe806 	br	28210 <_gp+0xfffed0ac>
   28270:	00252dc0 	call	252dc <__sfvwrite_r>
   28274:	003fe606 	br	28210 <_gp+0xfffed0ac>

00028278 <__sprint_r>:
   28278:	30c00217 	ldw	r3,8(r6)
   2827c:	18000126 	beq	r3,zero,28284 <__sprint_r+0xc>
   28280:	002817c1 	jmpi	2817c <__sprint_r.part.0>
   28284:	30000115 	stw	zero,4(r6)
   28288:	0005883a 	mov	r2,zero
   2828c:	f800283a 	ret

00028290 <___vfiprintf_internal_r>:
   28290:	deffca04 	addi	sp,sp,-216
   28294:	dd403115 	stw	r21,196(sp)
   28298:	dfc03515 	stw	ra,212(sp)
   2829c:	df003415 	stw	fp,208(sp)
   282a0:	ddc03315 	stw	r23,204(sp)
   282a4:	dd803215 	stw	r22,200(sp)
   282a8:	dd003015 	stw	r20,192(sp)
   282ac:	dcc02f15 	stw	r19,188(sp)
   282b0:	dc802e15 	stw	r18,184(sp)
   282b4:	dc402d15 	stw	r17,180(sp)
   282b8:	dc002c15 	stw	r16,176(sp)
   282bc:	d9002115 	stw	r4,132(sp)
   282c0:	d9402015 	stw	r5,128(sp)
   282c4:	d9c02215 	stw	r7,136(sp)
   282c8:	302b883a 	mov	r21,r6
   282cc:	20000226 	beq	r4,zero,282d8 <___vfiprintf_internal_r+0x48>
   282d0:	20800e17 	ldw	r2,56(r4)
   282d4:	1000cf26 	beq	r2,zero,28614 <___vfiprintf_internal_r+0x384>
   282d8:	d8c02017 	ldw	r3,128(sp)
   282dc:	1880030b 	ldhu	r2,12(r3)
   282e0:	10c8000c 	andi	r3,r2,8192
   282e4:	1800071e 	bne	r3,zero,28304 <___vfiprintf_internal_r+0x74>
   282e8:	d9402017 	ldw	r5,128(sp)
   282ec:	00f7ffc4 	movi	r3,-8193
   282f0:	10880014 	ori	r2,r2,8192
   282f4:	29001917 	ldw	r4,100(r5)
   282f8:	2880030d 	sth	r2,12(r5)
   282fc:	20c6703a 	and	r3,r4,r3
   28300:	28c01915 	stw	r3,100(r5)
   28304:	10c0020c 	andi	r3,r2,8
   28308:	1800a526 	beq	r3,zero,285a0 <___vfiprintf_internal_r+0x310>
   2830c:	d9002017 	ldw	r4,128(sp)
   28310:	20c00417 	ldw	r3,16(r4)
   28314:	1800a226 	beq	r3,zero,285a0 <___vfiprintf_internal_r+0x310>
   28318:	1080068c 	andi	r2,r2,26
   2831c:	00c00284 	movi	r3,10
   28320:	10c0a826 	beq	r2,r3,285c4 <___vfiprintf_internal_r+0x334>
   28324:	d9001a04 	addi	r4,sp,104
   28328:	d94019c4 	addi	r5,sp,103
   2832c:	048000f4 	movhi	r18,3
   28330:	2145c83a 	sub	r2,r4,r5
   28334:	94847004 	addi	r18,r18,4544
   28338:	d9001e15 	stw	r4,120(sp)
   2833c:	d9401f15 	stw	r5,124(sp)
   28340:	dec01a15 	stw	sp,104(sp)
   28344:	d8001c15 	stw	zero,112(sp)
   28348:	d8001b15 	stw	zero,108(sp)
   2834c:	d811883a 	mov	r8,sp
   28350:	d8002615 	stw	zero,152(sp)
   28354:	d8002415 	stw	zero,144(sp)
   28358:	d8802815 	stw	r2,160(sp)
   2835c:	a82d883a 	mov	r22,r21
   28360:	b0800007 	ldb	r2,0(r22)
   28364:	10040d26 	beq	r2,zero,2939c <___vfiprintf_internal_r+0x110c>
   28368:	00c00944 	movi	r3,37
   2836c:	b029883a 	mov	r20,r22
   28370:	10c0021e 	bne	r2,r3,2837c <___vfiprintf_internal_r+0xec>
   28374:	00001606 	br	283d0 <___vfiprintf_internal_r+0x140>
   28378:	10c00326 	beq	r2,r3,28388 <___vfiprintf_internal_r+0xf8>
   2837c:	a5000044 	addi	r20,r20,1
   28380:	a0800007 	ldb	r2,0(r20)
   28384:	103ffc1e 	bne	r2,zero,28378 <_gp+0xfffed214>
   28388:	a5a1c83a 	sub	r16,r20,r22
   2838c:	80001026 	beq	r16,zero,283d0 <___vfiprintf_internal_r+0x140>
   28390:	d8c01c17 	ldw	r3,112(sp)
   28394:	d8801b17 	ldw	r2,108(sp)
   28398:	45800015 	stw	r22,0(r8)
   2839c:	80c7883a 	add	r3,r16,r3
   283a0:	10800044 	addi	r2,r2,1
   283a4:	44000115 	stw	r16,4(r8)
   283a8:	d8c01c15 	stw	r3,112(sp)
   283ac:	d8801b15 	stw	r2,108(sp)
   283b0:	010001c4 	movi	r4,7
   283b4:	2080750e 	bge	r4,r2,2858c <___vfiprintf_internal_r+0x2fc>
   283b8:	1803951e 	bne	r3,zero,29210 <___vfiprintf_internal_r+0xf80>
   283bc:	d8c02417 	ldw	r3,144(sp)
   283c0:	d8001b15 	stw	zero,108(sp)
   283c4:	d811883a 	mov	r8,sp
   283c8:	1c07883a 	add	r3,r3,r16
   283cc:	d8c02415 	stw	r3,144(sp)
   283d0:	a0800007 	ldb	r2,0(r20)
   283d4:	1002e026 	beq	r2,zero,28f58 <___vfiprintf_internal_r+0xcc8>
   283d8:	a5800044 	addi	r22,r20,1
   283dc:	a0c00047 	ldb	r3,1(r20)
   283e0:	d8001d85 	stb	zero,118(sp)
   283e4:	0027883a 	mov	r19,zero
   283e8:	d8002305 	stb	zero,140(sp)
   283ec:	043fffc4 	movi	r16,-1
   283f0:	d8002515 	stw	zero,148(sp)
   283f4:	0023883a 	mov	r17,zero
   283f8:	05001604 	movi	r20,88
   283fc:	05400244 	movi	r21,9
   28400:	402f883a 	mov	r23,r8
   28404:	b5800044 	addi	r22,r22,1
   28408:	18bff804 	addi	r2,r3,-32
   2840c:	a0827736 	bltu	r20,r2,28dec <___vfiprintf_internal_r+0xb5c>
   28410:	100490ba 	slli	r2,r2,2
   28414:	010000f4 	movhi	r4,3
   28418:	21210a04 	addi	r4,r4,-31704
   2841c:	1105883a 	add	r2,r2,r4
   28420:	10800017 	ldw	r2,0(r2)
   28424:	1000683a 	jmp	r2
   28428:	00028aec 	andhi	zero,zero,2603
   2842c:	00028dec 	andhi	zero,zero,2615
   28430:	00028dec 	andhi	zero,zero,2615
   28434:	00028b08 	cmpgei	zero,zero,2604
   28438:	00028dec 	andhi	zero,zero,2615
   2843c:	00028dec 	andhi	zero,zero,2615
   28440:	00028dec 	andhi	zero,zero,2615
   28444:	00028dec 	andhi	zero,zero,2615
   28448:	00028dec 	andhi	zero,zero,2615
   2844c:	00028dec 	andhi	zero,zero,2615
   28450:	00028d10 	cmplti	zero,zero,2612
   28454:	00028d34 	movhi	zero,2612
   28458:	00028dec 	andhi	zero,zero,2615
   2845c:	0002862c 	andhi	zero,zero,2584
   28460:	00028d48 	cmpgei	zero,zero,2613
   28464:	00028dec 	andhi	zero,zero,2615
   28468:	00028b14 	movui	zero,2604
   2846c:	00028b20 	cmpeqi	zero,zero,2604
   28470:	00028b20 	cmpeqi	zero,zero,2604
   28474:	00028b20 	cmpeqi	zero,zero,2604
   28478:	00028b20 	cmpeqi	zero,zero,2604
   2847c:	00028b20 	cmpeqi	zero,zero,2604
   28480:	00028b20 	cmpeqi	zero,zero,2604
   28484:	00028b20 	cmpeqi	zero,zero,2604
   28488:	00028b20 	cmpeqi	zero,zero,2604
   2848c:	00028b20 	cmpeqi	zero,zero,2604
   28490:	00028dec 	andhi	zero,zero,2615
   28494:	00028dec 	andhi	zero,zero,2615
   28498:	00028dec 	andhi	zero,zero,2615
   2849c:	00028dec 	andhi	zero,zero,2615
   284a0:	00028dec 	andhi	zero,zero,2615
   284a4:	00028dec 	andhi	zero,zero,2615
   284a8:	00028dec 	andhi	zero,zero,2615
   284ac:	00028dec 	andhi	zero,zero,2615
   284b0:	00028dec 	andhi	zero,zero,2615
   284b4:	00028dec 	andhi	zero,zero,2615
   284b8:	00028b60 	cmpeqi	zero,zero,2605
   284bc:	00028dec 	andhi	zero,zero,2615
   284c0:	00028dec 	andhi	zero,zero,2615
   284c4:	00028dec 	andhi	zero,zero,2615
   284c8:	00028dec 	andhi	zero,zero,2615
   284cc:	00028dec 	andhi	zero,zero,2615
   284d0:	00028dec 	andhi	zero,zero,2615
   284d4:	00028dec 	andhi	zero,zero,2615
   284d8:	00028dec 	andhi	zero,zero,2615
   284dc:	00028dec 	andhi	zero,zero,2615
   284e0:	00028dec 	andhi	zero,zero,2615
   284e4:	00028b9c 	xori	zero,zero,2606
   284e8:	00028dec 	andhi	zero,zero,2615
   284ec:	00028dec 	andhi	zero,zero,2615
   284f0:	00028dec 	andhi	zero,zero,2615
   284f4:	00028dec 	andhi	zero,zero,2615
   284f8:	00028dec 	andhi	zero,zero,2615
   284fc:	00028bf8 	rdprs	zero,zero,2607
   28500:	00028dec 	andhi	zero,zero,2615
   28504:	00028dec 	andhi	zero,zero,2615
   28508:	00028c6c 	andhi	zero,zero,2609
   2850c:	00028dec 	andhi	zero,zero,2615
   28510:	00028dec 	andhi	zero,zero,2615
   28514:	00028dec 	andhi	zero,zero,2615
   28518:	00028dec 	andhi	zero,zero,2615
   2851c:	00028dec 	andhi	zero,zero,2615
   28520:	00028dec 	andhi	zero,zero,2615
   28524:	00028dec 	andhi	zero,zero,2615
   28528:	00028dec 	andhi	zero,zero,2615
   2852c:	00028dec 	andhi	zero,zero,2615
   28530:	00028dec 	andhi	zero,zero,2615
   28534:	00028a14 	movui	zero,2600
   28538:	00028a44 	movi	zero,2601
   2853c:	00028dec 	andhi	zero,zero,2615
   28540:	00028dec 	andhi	zero,zero,2615
   28544:	00028dec 	andhi	zero,zero,2615
   28548:	00028d94 	movui	zero,2614
   2854c:	00028a44 	movi	zero,2601
   28550:	00028dec 	andhi	zero,zero,2615
   28554:	00028dec 	andhi	zero,zero,2615
   28558:	000288ec 	andhi	zero,zero,2595
   2855c:	00028dec 	andhi	zero,zero,2615
   28560:	00028900 	call	2890 <__reset-0x1d770>
   28564:	00028938 	rdprs	zero,zero,2596
   28568:	00028638 	rdprs	zero,zero,2584
   2856c:	000288e0 	cmpeqi	zero,zero,2595
   28570:	00028dec 	andhi	zero,zero,2615
   28574:	00028cac 	andhi	zero,zero,2610
   28578:	00028dec 	andhi	zero,zero,2615
   2857c:	00028cf8 	rdprs	zero,zero,2611
   28580:	00028dec 	andhi	zero,zero,2615
   28584:	00028dec 	andhi	zero,zero,2615
   28588:	000289bc 	xorhi	zero,zero,2598
   2858c:	42000204 	addi	r8,r8,8
   28590:	d8c02417 	ldw	r3,144(sp)
   28594:	1c07883a 	add	r3,r3,r16
   28598:	d8c02415 	stw	r3,144(sp)
   2859c:	003f8c06 	br	283d0 <_gp+0xfffed26c>
   285a0:	d9402017 	ldw	r5,128(sp)
   285a4:	d9002117 	ldw	r4,132(sp)
   285a8:	0022e4c0 	call	22e4c <__swsetup_r>
   285ac:	1003c11e 	bne	r2,zero,294b4 <___vfiprintf_internal_r+0x1224>
   285b0:	d9402017 	ldw	r5,128(sp)
   285b4:	00c00284 	movi	r3,10
   285b8:	2880030b 	ldhu	r2,12(r5)
   285bc:	1080068c 	andi	r2,r2,26
   285c0:	10ff581e 	bne	r2,r3,28324 <_gp+0xfffed1c0>
   285c4:	d8c02017 	ldw	r3,128(sp)
   285c8:	1880038f 	ldh	r2,14(r3)
   285cc:	103f5516 	blt	r2,zero,28324 <_gp+0xfffed1c0>
   285d0:	d9c02217 	ldw	r7,136(sp)
   285d4:	d9002117 	ldw	r4,132(sp)
   285d8:	a80d883a 	mov	r6,r21
   285dc:	180b883a 	mov	r5,r3
   285e0:	00297b80 	call	297b8 <__sbprintf>
   285e4:	dfc03517 	ldw	ra,212(sp)
   285e8:	df003417 	ldw	fp,208(sp)
   285ec:	ddc03317 	ldw	r23,204(sp)
   285f0:	dd803217 	ldw	r22,200(sp)
   285f4:	dd403117 	ldw	r21,196(sp)
   285f8:	dd003017 	ldw	r20,192(sp)
   285fc:	dcc02f17 	ldw	r19,188(sp)
   28600:	dc802e17 	ldw	r18,184(sp)
   28604:	dc402d17 	ldw	r17,180(sp)
   28608:	dc002c17 	ldw	r16,176(sp)
   2860c:	dec03604 	addi	sp,sp,216
   28610:	f800283a 	ret
   28614:	0024e580 	call	24e58 <__sinit>
   28618:	003f2f06 	br	282d8 <_gp+0xfffed174>
   2861c:	d8c02517 	ldw	r3,148(sp)
   28620:	d8802215 	stw	r2,136(sp)
   28624:	00c7c83a 	sub	r3,zero,r3
   28628:	d8c02515 	stw	r3,148(sp)
   2862c:	8c400114 	ori	r17,r17,4
   28630:	b0c00007 	ldb	r3,0(r22)
   28634:	003f7306 	br	28404 <_gp+0xfffed2a0>
   28638:	00800c04 	movi	r2,48
   2863c:	d9402217 	ldw	r5,136(sp)
   28640:	d8801d05 	stb	r2,116(sp)
   28644:	00801e04 	movi	r2,120
   28648:	d8801d45 	stb	r2,117(sp)
   2864c:	d8001d85 	stb	zero,118(sp)
   28650:	b811883a 	mov	r8,r23
   28654:	28c00104 	addi	r3,r5,4
   28658:	2cc00017 	ldw	r19,0(r5)
   2865c:	0029883a 	mov	r20,zero
   28660:	88800094 	ori	r2,r17,2
   28664:	80032516 	blt	r16,zero,292fc <___vfiprintf_internal_r+0x106c>
   28668:	00bfdfc4 	movi	r2,-129
   2866c:	88a2703a 	and	r17,r17,r2
   28670:	d8c02215 	stw	r3,136(sp)
   28674:	8c400094 	ori	r17,r17,2
   28678:	98032a1e 	bne	r19,zero,29324 <___vfiprintf_internal_r+0x1094>
   2867c:	008000f4 	movhi	r2,3
   28680:	10840f04 	addi	r2,r2,4156
   28684:	d8802615 	stw	r2,152(sp)
   28688:	002b883a 	mov	r21,zero
   2868c:	8001741e 	bne	r16,zero,28c60 <___vfiprintf_internal_r+0x9d0>
   28690:	0021883a 	mov	r16,zero
   28694:	0029883a 	mov	r20,zero
   28698:	ddc01a04 	addi	r23,sp,104
   2869c:	8027883a 	mov	r19,r16
   286a0:	8500010e 	bge	r16,r20,286a8 <___vfiprintf_internal_r+0x418>
   286a4:	a027883a 	mov	r19,r20
   286a8:	ad403fcc 	andi	r21,r21,255
   286ac:	ad40201c 	xori	r21,r21,128
   286b0:	ad7fe004 	addi	r21,r21,-128
   286b4:	a8000126 	beq	r21,zero,286bc <___vfiprintf_internal_r+0x42c>
   286b8:	9cc00044 	addi	r19,r19,1
   286bc:	89c0008c 	andi	r7,r17,2
   286c0:	38000126 	beq	r7,zero,286c8 <___vfiprintf_internal_r+0x438>
   286c4:	9cc00084 	addi	r19,r19,2
   286c8:	88c0210c 	andi	r3,r17,132
   286cc:	1801dd1e 	bne	r3,zero,28e44 <___vfiprintf_internal_r+0xbb4>
   286d0:	d9402517 	ldw	r5,148(sp)
   286d4:	2cebc83a 	sub	r21,r5,r19
   286d8:	0541da0e 	bge	zero,r21,28e44 <___vfiprintf_internal_r+0xbb4>
   286dc:	07000404 	movi	fp,16
   286e0:	d8801c17 	ldw	r2,112(sp)
   286e4:	e543be0e 	bge	fp,r21,295e0 <___vfiprintf_internal_r+0x1350>
   286e8:	014000f4 	movhi	r5,3
   286ec:	29447404 	addi	r5,r5,4560
   286f0:	dc002715 	stw	r16,156(sp)
   286f4:	d9801b17 	ldw	r6,108(sp)
   286f8:	a821883a 	mov	r16,r21
   286fc:	d9402315 	stw	r5,140(sp)
   28700:	028001c4 	movi	r10,7
   28704:	d9c02915 	stw	r7,164(sp)
   28708:	182b883a 	mov	r21,r3
   2870c:	00000506 	br	28724 <___vfiprintf_internal_r+0x494>
   28710:	31000084 	addi	r4,r6,2
   28714:	42000204 	addi	r8,r8,8
   28718:	180d883a 	mov	r6,r3
   2871c:	843ffc04 	addi	r16,r16,-16
   28720:	e4000f0e 	bge	fp,r16,28760 <___vfiprintf_internal_r+0x4d0>
   28724:	010000f4 	movhi	r4,3
   28728:	10800404 	addi	r2,r2,16
   2872c:	30c00044 	addi	r3,r6,1
   28730:	21047404 	addi	r4,r4,4560
   28734:	41000015 	stw	r4,0(r8)
   28738:	47000115 	stw	fp,4(r8)
   2873c:	d8801c15 	stw	r2,112(sp)
   28740:	d8c01b15 	stw	r3,108(sp)
   28744:	50fff20e 	bge	r10,r3,28710 <_gp+0xfffed5ac>
   28748:	1001b21e 	bne	r2,zero,28e14 <___vfiprintf_internal_r+0xb84>
   2874c:	843ffc04 	addi	r16,r16,-16
   28750:	000d883a 	mov	r6,zero
   28754:	01000044 	movi	r4,1
   28758:	d811883a 	mov	r8,sp
   2875c:	e43ff116 	blt	fp,r16,28724 <_gp+0xfffed5c0>
   28760:	a807883a 	mov	r3,r21
   28764:	d9c02917 	ldw	r7,164(sp)
   28768:	802b883a 	mov	r21,r16
   2876c:	dc002717 	ldw	r16,156(sp)
   28770:	d9402317 	ldw	r5,140(sp)
   28774:	a885883a 	add	r2,r21,r2
   28778:	45400115 	stw	r21,4(r8)
   2877c:	41400015 	stw	r5,0(r8)
   28780:	d8801c15 	stw	r2,112(sp)
   28784:	d9001b15 	stw	r4,108(sp)
   28788:	014001c4 	movi	r5,7
   2878c:	29026216 	blt	r5,r4,29118 <___vfiprintf_internal_r+0xe88>
   28790:	d9801d87 	ldb	r6,118(sp)
   28794:	42000204 	addi	r8,r8,8
   28798:	21400044 	addi	r5,r4,1
   2879c:	3001ae1e 	bne	r6,zero,28e58 <___vfiprintf_internal_r+0xbc8>
   287a0:	3801bb26 	beq	r7,zero,28e90 <___vfiprintf_internal_r+0xc00>
   287a4:	d9001d04 	addi	r4,sp,116
   287a8:	10800084 	addi	r2,r2,2
   287ac:	41000015 	stw	r4,0(r8)
   287b0:	01000084 	movi	r4,2
   287b4:	41000115 	stw	r4,4(r8)
   287b8:	d8801c15 	stw	r2,112(sp)
   287bc:	d9401b15 	stw	r5,108(sp)
   287c0:	010001c4 	movi	r4,7
   287c4:	2142680e 	bge	r4,r5,29168 <___vfiprintf_internal_r+0xed8>
   287c8:	1002b11e 	bne	r2,zero,29290 <___vfiprintf_internal_r+0x1000>
   287cc:	01802004 	movi	r6,128
   287d0:	01400044 	movi	r5,1
   287d4:	0009883a 	mov	r4,zero
   287d8:	d811883a 	mov	r8,sp
   287dc:	1981ae1e 	bne	r3,r6,28e98 <___vfiprintf_internal_r+0xc08>
   287e0:	d8c02517 	ldw	r3,148(sp)
   287e4:	1cf9c83a 	sub	fp,r3,r19
   287e8:	0701ab0e 	bge	zero,fp,28e98 <___vfiprintf_internal_r+0xc08>
   287ec:	05400404 	movi	r21,16
   287f0:	af03a90e 	bge	r21,fp,29698 <___vfiprintf_internal_r+0x1408>
   287f4:	014000f4 	movhi	r5,3
   287f8:	29447004 	addi	r5,r5,4544
   287fc:	d9402315 	stw	r5,140(sp)
   28800:	01c001c4 	movi	r7,7
   28804:	00000506 	br	2881c <___vfiprintf_internal_r+0x58c>
   28808:	21800084 	addi	r6,r4,2
   2880c:	42000204 	addi	r8,r8,8
   28810:	1809883a 	mov	r4,r3
   28814:	e73ffc04 	addi	fp,fp,-16
   28818:	af000d0e 	bge	r21,fp,28850 <___vfiprintf_internal_r+0x5c0>
   2881c:	10800404 	addi	r2,r2,16
   28820:	20c00044 	addi	r3,r4,1
   28824:	44800015 	stw	r18,0(r8)
   28828:	45400115 	stw	r21,4(r8)
   2882c:	d8801c15 	stw	r2,112(sp)
   28830:	d8c01b15 	stw	r3,108(sp)
   28834:	38fff40e 	bge	r7,r3,28808 <_gp+0xfffed6a4>
   28838:	10022b1e 	bne	r2,zero,290e8 <___vfiprintf_internal_r+0xe58>
   2883c:	e73ffc04 	addi	fp,fp,-16
   28840:	01800044 	movi	r6,1
   28844:	0009883a 	mov	r4,zero
   28848:	d811883a 	mov	r8,sp
   2884c:	af3ff316 	blt	r21,fp,2881c <_gp+0xfffed6b8>
   28850:	d8c02317 	ldw	r3,140(sp)
   28854:	1705883a 	add	r2,r2,fp
   28858:	47000115 	stw	fp,4(r8)
   2885c:	40c00015 	stw	r3,0(r8)
   28860:	d8801c15 	stw	r2,112(sp)
   28864:	d9801b15 	stw	r6,108(sp)
   28868:	00c001c4 	movi	r3,7
   2886c:	19829416 	blt	r3,r6,292c0 <___vfiprintf_internal_r+0x1030>
   28870:	8521c83a 	sub	r16,r16,r20
   28874:	42000204 	addi	r8,r8,8
   28878:	31400044 	addi	r5,r6,1
   2887c:	3009883a 	mov	r4,r6
   28880:	04018716 	blt	zero,r16,28ea0 <___vfiprintf_internal_r+0xc10>
   28884:	a085883a 	add	r2,r20,r2
   28888:	45c00015 	stw	r23,0(r8)
   2888c:	45000115 	stw	r20,4(r8)
   28890:	d8801c15 	stw	r2,112(sp)
   28894:	d9401b15 	stw	r5,108(sp)
   28898:	00c001c4 	movi	r3,7
   2889c:	1941c20e 	bge	r3,r5,28fa8 <___vfiprintf_internal_r+0xd18>
   288a0:	1002531e 	bne	r2,zero,291f0 <___vfiprintf_internal_r+0xf60>
   288a4:	d8001b15 	stw	zero,108(sp)
   288a8:	8c40010c 	andi	r17,r17,4
   288ac:	88023226 	beq	r17,zero,29178 <___vfiprintf_internal_r+0xee8>
   288b0:	d9002517 	ldw	r4,148(sp)
   288b4:	24e3c83a 	sub	r17,r4,r19
   288b8:	04432916 	blt	zero,r17,29560 <___vfiprintf_internal_r+0x12d0>
   288bc:	d8802517 	ldw	r2,148(sp)
   288c0:	14c0010e 	bge	r2,r19,288c8 <___vfiprintf_internal_r+0x638>
   288c4:	9805883a 	mov	r2,r19
   288c8:	d8c02417 	ldw	r3,144(sp)
   288cc:	1887883a 	add	r3,r3,r2
   288d0:	d8c02415 	stw	r3,144(sp)
   288d4:	d8001b15 	stw	zero,108(sp)
   288d8:	d811883a 	mov	r8,sp
   288dc:	003ea006 	br	28360 <_gp+0xfffed1fc>
   288e0:	8c400814 	ori	r17,r17,32
   288e4:	b0c00007 	ldb	r3,0(r22)
   288e8:	003ec606 	br	28404 <_gp+0xfffed2a0>
   288ec:	b0c00007 	ldb	r3,0(r22)
   288f0:	00801b04 	movi	r2,108
   288f4:	18832026 	beq	r3,r2,29578 <___vfiprintf_internal_r+0x12e8>
   288f8:	8c400414 	ori	r17,r17,16
   288fc:	003ec106 	br	28404 <_gp+0xfffed2a0>
   28900:	9cc03fcc 	andi	r19,r19,255
   28904:	b811883a 	mov	r8,r23
   28908:	9803981e 	bne	r19,zero,2976c <___vfiprintf_internal_r+0x14dc>
   2890c:	8880080c 	andi	r2,r17,32
   28910:	1002be26 	beq	r2,zero,2940c <___vfiprintf_internal_r+0x117c>
   28914:	d9002217 	ldw	r4,136(sp)
   28918:	d9402417 	ldw	r5,144(sp)
   2891c:	20800017 	ldw	r2,0(r4)
   28920:	2807d7fa 	srai	r3,r5,31
   28924:	21000104 	addi	r4,r4,4
   28928:	d9002215 	stw	r4,136(sp)
   2892c:	11400015 	stw	r5,0(r2)
   28930:	10c00115 	stw	r3,4(r2)
   28934:	003e8a06 	br	28360 <_gp+0xfffed1fc>
   28938:	9cc03fcc 	andi	r19,r19,255
   2893c:	b811883a 	mov	r8,r23
   28940:	9803871e 	bne	r19,zero,29760 <___vfiprintf_internal_r+0x14d0>
   28944:	8880080c 	andi	r2,r17,32
   28948:	10009a26 	beq	r2,zero,28bb4 <___vfiprintf_internal_r+0x924>
   2894c:	d9002217 	ldw	r4,136(sp)
   28950:	d8001d85 	stb	zero,118(sp)
   28954:	20800204 	addi	r2,r4,8
   28958:	24c00017 	ldw	r19,0(r4)
   2895c:	25000117 	ldw	r20,4(r4)
   28960:	8002a416 	blt	r16,zero,293f4 <___vfiprintf_internal_r+0x1164>
   28964:	013fdfc4 	movi	r4,-129
   28968:	9d06b03a 	or	r3,r19,r20
   2896c:	d8802215 	stw	r2,136(sp)
   28970:	8922703a 	and	r17,r17,r4
   28974:	18009b26 	beq	r3,zero,28be4 <___vfiprintf_internal_r+0x954>
   28978:	002b883a 	mov	r21,zero
   2897c:	ddc01a04 	addi	r23,sp,104
   28980:	9806d0fa 	srli	r3,r19,3
   28984:	a008977a 	slli	r4,r20,29
   28988:	a028d0fa 	srli	r20,r20,3
   2898c:	9cc001cc 	andi	r19,r19,7
   28990:	98800c04 	addi	r2,r19,48
   28994:	bdffffc4 	addi	r23,r23,-1
   28998:	20e6b03a 	or	r19,r4,r3
   2899c:	b8800005 	stb	r2,0(r23)
   289a0:	9d06b03a 	or	r3,r19,r20
   289a4:	183ff61e 	bne	r3,zero,28980 <_gp+0xfffed81c>
   289a8:	88c0004c 	andi	r3,r17,1
   289ac:	18021f1e 	bne	r3,zero,2922c <___vfiprintf_internal_r+0xf9c>
   289b0:	d9401e17 	ldw	r5,120(sp)
   289b4:	2de9c83a 	sub	r20,r5,r23
   289b8:	003f3806 	br	2869c <_gp+0xfffed538>
   289bc:	9cc03fcc 	andi	r19,r19,255
   289c0:	b811883a 	mov	r8,r23
   289c4:	98034f1e 	bne	r19,zero,29704 <___vfiprintf_internal_r+0x1474>
   289c8:	008000f4 	movhi	r2,3
   289cc:	10840f04 	addi	r2,r2,4156
   289d0:	d8802615 	stw	r2,152(sp)
   289d4:	8880080c 	andi	r2,r17,32
   289d8:	1000ac26 	beq	r2,zero,28c8c <___vfiprintf_internal_r+0x9fc>
   289dc:	d9002217 	ldw	r4,136(sp)
   289e0:	24c00017 	ldw	r19,0(r4)
   289e4:	25000117 	ldw	r20,4(r4)
   289e8:	21000204 	addi	r4,r4,8
   289ec:	d9002215 	stw	r4,136(sp)
   289f0:	8880004c 	andi	r2,r17,1
   289f4:	1001e726 	beq	r2,zero,29194 <___vfiprintf_internal_r+0xf04>
   289f8:	9d04b03a 	or	r2,r19,r20
   289fc:	10025c1e 	bne	r2,zero,29370 <___vfiprintf_internal_r+0x10e0>
   28a00:	d8001d85 	stb	zero,118(sp)
   28a04:	80024416 	blt	r16,zero,29318 <___vfiprintf_internal_r+0x1088>
   28a08:	00bfdfc4 	movi	r2,-129
   28a0c:	88a2703a 	and	r17,r17,r2
   28a10:	003f1d06 	br	28688 <_gp+0xfffed524>
   28a14:	d8c02217 	ldw	r3,136(sp)
   28a18:	04c00044 	movi	r19,1
   28a1c:	b811883a 	mov	r8,r23
   28a20:	18800017 	ldw	r2,0(r3)
   28a24:	18c00104 	addi	r3,r3,4
   28a28:	d8001d85 	stb	zero,118(sp)
   28a2c:	d8801005 	stb	r2,64(sp)
   28a30:	d8c02215 	stw	r3,136(sp)
   28a34:	9829883a 	mov	r20,r19
   28a38:	ddc01004 	addi	r23,sp,64
   28a3c:	0021883a 	mov	r16,zero
   28a40:	003f1e06 	br	286bc <_gp+0xfffed558>
   28a44:	9cc03fcc 	andi	r19,r19,255
   28a48:	b811883a 	mov	r8,r23
   28a4c:	9803331e 	bne	r19,zero,2971c <___vfiprintf_internal_r+0x148c>
   28a50:	8880080c 	andi	r2,r17,32
   28a54:	10004826 	beq	r2,zero,28b78 <___vfiprintf_internal_r+0x8e8>
   28a58:	d9002217 	ldw	r4,136(sp)
   28a5c:	20800117 	ldw	r2,4(r4)
   28a60:	24c00017 	ldw	r19,0(r4)
   28a64:	21000204 	addi	r4,r4,8
   28a68:	d9002215 	stw	r4,136(sp)
   28a6c:	1029883a 	mov	r20,r2
   28a70:	10024c16 	blt	r2,zero,293a4 <___vfiprintf_internal_r+0x1114>
   28a74:	dd401d83 	ldbu	r21,118(sp)
   28a78:	80007116 	blt	r16,zero,28c40 <___vfiprintf_internal_r+0x9b0>
   28a7c:	00ffdfc4 	movi	r3,-129
   28a80:	9d04b03a 	or	r2,r19,r20
   28a84:	88e2703a 	and	r17,r17,r3
   28a88:	1000d126 	beq	r2,zero,28dd0 <___vfiprintf_internal_r+0xb40>
   28a8c:	a0023526 	beq	r20,zero,29364 <___vfiprintf_internal_r+0x10d4>
   28a90:	ddc01a04 	addi	r23,sp,104
   28a94:	4039883a 	mov	fp,r8
   28a98:	9809883a 	mov	r4,r19
   28a9c:	a00b883a 	mov	r5,r20
   28aa0:	01800284 	movi	r6,10
   28aa4:	000f883a 	mov	r7,zero
   28aa8:	002a7bc0 	call	2a7bc <__umoddi3>
   28aac:	10800c04 	addi	r2,r2,48
   28ab0:	bdffffc4 	addi	r23,r23,-1
   28ab4:	9809883a 	mov	r4,r19
   28ab8:	a00b883a 	mov	r5,r20
   28abc:	b8800005 	stb	r2,0(r23)
   28ac0:	01800284 	movi	r6,10
   28ac4:	000f883a 	mov	r7,zero
   28ac8:	002a1c00 	call	2a1c0 <__udivdi3>
   28acc:	1027883a 	mov	r19,r2
   28ad0:	10c4b03a 	or	r2,r2,r3
   28ad4:	1829883a 	mov	r20,r3
   28ad8:	103fef1e 	bne	r2,zero,28a98 <_gp+0xfffed934>
   28adc:	d9001e17 	ldw	r4,120(sp)
   28ae0:	e011883a 	mov	r8,fp
   28ae4:	25e9c83a 	sub	r20,r4,r23
   28ae8:	003eec06 	br	2869c <_gp+0xfffed538>
   28aec:	d8802307 	ldb	r2,140(sp)
   28af0:	1002361e 	bne	r2,zero,293cc <___vfiprintf_internal_r+0x113c>
   28af4:	00c00804 	movi	r3,32
   28af8:	d8c02305 	stb	r3,140(sp)
   28afc:	04c00044 	movi	r19,1
   28b00:	b0c00007 	ldb	r3,0(r22)
   28b04:	003e3f06 	br	28404 <_gp+0xfffed2a0>
   28b08:	8c400054 	ori	r17,r17,1
   28b0c:	b0c00007 	ldb	r3,0(r22)
   28b10:	003e3c06 	br	28404 <_gp+0xfffed2a0>
   28b14:	8c402014 	ori	r17,r17,128
   28b18:	b0c00007 	ldb	r3,0(r22)
   28b1c:	003e3906 	br	28404 <_gp+0xfffed2a0>
   28b20:	dc002715 	stw	r16,156(sp)
   28b24:	d8002515 	stw	zero,148(sp)
   28b28:	1f3ff404 	addi	fp,r3,-48
   28b2c:	0009883a 	mov	r4,zero
   28b30:	b021883a 	mov	r16,r22
   28b34:	01400284 	movi	r5,10
   28b38:	00208980 	call	20898 <__mulsi3>
   28b3c:	80c00007 	ldb	r3,0(r16)
   28b40:	e089883a 	add	r4,fp,r2
   28b44:	b5800044 	addi	r22,r22,1
   28b48:	1f3ff404 	addi	fp,r3,-48
   28b4c:	b021883a 	mov	r16,r22
   28b50:	af3ff82e 	bgeu	r21,fp,28b34 <_gp+0xfffed9d0>
   28b54:	d9002515 	stw	r4,148(sp)
   28b58:	dc002717 	ldw	r16,156(sp)
   28b5c:	003e2a06 	br	28408 <_gp+0xfffed2a4>
   28b60:	9cc03fcc 	andi	r19,r19,255
   28b64:	b811883a 	mov	r8,r23
   28b68:	9802e91e 	bne	r19,zero,29710 <___vfiprintf_internal_r+0x1480>
   28b6c:	8c400414 	ori	r17,r17,16
   28b70:	8880080c 	andi	r2,r17,32
   28b74:	103fb81e 	bne	r2,zero,28a58 <_gp+0xfffed8f4>
   28b78:	8880040c 	andi	r2,r17,16
   28b7c:	10022e26 	beq	r2,zero,29438 <___vfiprintf_internal_r+0x11a8>
   28b80:	d9402217 	ldw	r5,136(sp)
   28b84:	2cc00017 	ldw	r19,0(r5)
   28b88:	29400104 	addi	r5,r5,4
   28b8c:	d9402215 	stw	r5,136(sp)
   28b90:	9829d7fa 	srai	r20,r19,31
   28b94:	a005883a 	mov	r2,r20
   28b98:	003fb506 	br	28a70 <_gp+0xfffed90c>
   28b9c:	9cc03fcc 	andi	r19,r19,255
   28ba0:	b811883a 	mov	r8,r23
   28ba4:	9802fa1e 	bne	r19,zero,29790 <___vfiprintf_internal_r+0x1500>
   28ba8:	8c400414 	ori	r17,r17,16
   28bac:	8880080c 	andi	r2,r17,32
   28bb0:	103f661e 	bne	r2,zero,2894c <_gp+0xfffed7e8>
   28bb4:	8880040c 	andi	r2,r17,16
   28bb8:	10020626 	beq	r2,zero,293d4 <___vfiprintf_internal_r+0x1144>
   28bbc:	d9402217 	ldw	r5,136(sp)
   28bc0:	d8001d85 	stb	zero,118(sp)
   28bc4:	0029883a 	mov	r20,zero
   28bc8:	28800104 	addi	r2,r5,4
   28bcc:	2cc00017 	ldw	r19,0(r5)
   28bd0:	80020816 	blt	r16,zero,293f4 <___vfiprintf_internal_r+0x1164>
   28bd4:	00ffdfc4 	movi	r3,-129
   28bd8:	d8802215 	stw	r2,136(sp)
   28bdc:	88e2703a 	and	r17,r17,r3
   28be0:	983f651e 	bne	r19,zero,28978 <_gp+0xfffed814>
   28be4:	002b883a 	mov	r21,zero
   28be8:	8002cf26 	beq	r16,zero,29728 <___vfiprintf_internal_r+0x1498>
   28bec:	0027883a 	mov	r19,zero
   28bf0:	0029883a 	mov	r20,zero
   28bf4:	003f6106 	br	2897c <_gp+0xfffed818>
   28bf8:	9cc03fcc 	andi	r19,r19,255
   28bfc:	b811883a 	mov	r8,r23
   28c00:	9802e01e 	bne	r19,zero,29784 <___vfiprintf_internal_r+0x14f4>
   28c04:	8c400414 	ori	r17,r17,16
   28c08:	8880080c 	andi	r2,r17,32
   28c0c:	1000641e 	bne	r2,zero,28da0 <___vfiprintf_internal_r+0xb10>
   28c10:	8880040c 	andi	r2,r17,16
   28c14:	1001c81e 	bne	r2,zero,29338 <___vfiprintf_internal_r+0x10a8>
   28c18:	8880100c 	andi	r2,r17,64
   28c1c:	d8001d85 	stb	zero,118(sp)
   28c20:	1002281e 	bne	r2,zero,294c4 <___vfiprintf_internal_r+0x1234>
   28c24:	d9002217 	ldw	r4,136(sp)
   28c28:	0029883a 	mov	r20,zero
   28c2c:	20800104 	addi	r2,r4,4
   28c30:	24c00017 	ldw	r19,0(r4)
   28c34:	8001c60e 	bge	r16,zero,29350 <___vfiprintf_internal_r+0x10c0>
   28c38:	d8802215 	stw	r2,136(sp)
   28c3c:	002b883a 	mov	r21,zero
   28c40:	9d04b03a 	or	r2,r19,r20
   28c44:	103f911e 	bne	r2,zero,28a8c <_gp+0xfffed928>
   28c48:	00800044 	movi	r2,1
   28c4c:	10803fcc 	andi	r2,r2,255
   28c50:	00c00044 	movi	r3,1
   28c54:	10c05f26 	beq	r2,r3,28dd4 <___vfiprintf_internal_r+0xb44>
   28c58:	00c00084 	movi	r3,2
   28c5c:	10ffe31e 	bne	r2,r3,28bec <_gp+0xfffeda88>
   28c60:	0027883a 	mov	r19,zero
   28c64:	0029883a 	mov	r20,zero
   28c68:	00015106 	br	291b0 <___vfiprintf_internal_r+0xf20>
   28c6c:	9cc03fcc 	andi	r19,r19,255
   28c70:	b811883a 	mov	r8,r23
   28c74:	9802c01e 	bne	r19,zero,29778 <___vfiprintf_internal_r+0x14e8>
   28c78:	014000f4 	movhi	r5,3
   28c7c:	29440a04 	addi	r5,r5,4136
   28c80:	d9402615 	stw	r5,152(sp)
   28c84:	8880080c 	andi	r2,r17,32
   28c88:	103f541e 	bne	r2,zero,289dc <_gp+0xfffed878>
   28c8c:	8880040c 	andi	r2,r17,16
   28c90:	1001f226 	beq	r2,zero,2945c <___vfiprintf_internal_r+0x11cc>
   28c94:	d9402217 	ldw	r5,136(sp)
   28c98:	0029883a 	mov	r20,zero
   28c9c:	2cc00017 	ldw	r19,0(r5)
   28ca0:	29400104 	addi	r5,r5,4
   28ca4:	d9402215 	stw	r5,136(sp)
   28ca8:	003f5106 	br	289f0 <_gp+0xfffed88c>
   28cac:	d8c02217 	ldw	r3,136(sp)
   28cb0:	b811883a 	mov	r8,r23
   28cb4:	d8001d85 	stb	zero,118(sp)
   28cb8:	1dc00017 	ldw	r23,0(r3)
   28cbc:	1f000104 	addi	fp,r3,4
   28cc0:	b8025926 	beq	r23,zero,29628 <___vfiprintf_internal_r+0x1398>
   28cc4:	80023316 	blt	r16,zero,29594 <___vfiprintf_internal_r+0x1304>
   28cc8:	800d883a 	mov	r6,r16
   28ccc:	000b883a 	mov	r5,zero
   28cd0:	b809883a 	mov	r4,r23
   28cd4:	da002a15 	stw	r8,168(sp)
   28cd8:	00263d00 	call	263d0 <memchr>
   28cdc:	da002a17 	ldw	r8,168(sp)
   28ce0:	10026826 	beq	r2,zero,29684 <___vfiprintf_internal_r+0x13f4>
   28ce4:	15e9c83a 	sub	r20,r2,r23
   28ce8:	dd401d83 	ldbu	r21,118(sp)
   28cec:	df002215 	stw	fp,136(sp)
   28cf0:	0021883a 	mov	r16,zero
   28cf4:	003e6906 	br	2869c <_gp+0xfffed538>
   28cf8:	9cc03fcc 	andi	r19,r19,255
   28cfc:	b811883a 	mov	r8,r23
   28d00:	983fc126 	beq	r19,zero,28c08 <_gp+0xfffedaa4>
   28d04:	d8c02303 	ldbu	r3,140(sp)
   28d08:	d8c01d85 	stb	r3,118(sp)
   28d0c:	003fbe06 	br	28c08 <_gp+0xfffedaa4>
   28d10:	d9002217 	ldw	r4,136(sp)
   28d14:	d9402217 	ldw	r5,136(sp)
   28d18:	21000017 	ldw	r4,0(r4)
   28d1c:	28800104 	addi	r2,r5,4
   28d20:	d9002515 	stw	r4,148(sp)
   28d24:	203e3d16 	blt	r4,zero,2861c <_gp+0xfffed4b8>
   28d28:	d8802215 	stw	r2,136(sp)
   28d2c:	b0c00007 	ldb	r3,0(r22)
   28d30:	003db406 	br	28404 <_gp+0xfffed2a0>
   28d34:	00c00ac4 	movi	r3,43
   28d38:	d8c02305 	stb	r3,140(sp)
   28d3c:	04c00044 	movi	r19,1
   28d40:	b0c00007 	ldb	r3,0(r22)
   28d44:	003daf06 	br	28404 <_gp+0xfffed2a0>
   28d48:	b0c00007 	ldb	r3,0(r22)
   28d4c:	01000a84 	movi	r4,42
   28d50:	b4000044 	addi	r16,r22,1
   28d54:	19025e26 	beq	r3,r4,296d0 <___vfiprintf_internal_r+0x1440>
   28d58:	1f3ff404 	addi	fp,r3,-48
   28d5c:	0009883a 	mov	r4,zero
   28d60:	af025236 	bltu	r21,fp,296ac <___vfiprintf_internal_r+0x141c>
   28d64:	01400284 	movi	r5,10
   28d68:	00208980 	call	20898 <__mulsi3>
   28d6c:	80c00007 	ldb	r3,0(r16)
   28d70:	1709883a 	add	r4,r2,fp
   28d74:	85800044 	addi	r22,r16,1
   28d78:	1f3ff404 	addi	fp,r3,-48
   28d7c:	b021883a 	mov	r16,r22
   28d80:	af3ff82e 	bgeu	r21,fp,28d64 <_gp+0xfffedc00>
   28d84:	2021883a 	mov	r16,r4
   28d88:	203d9f0e 	bge	r4,zero,28408 <_gp+0xfffed2a4>
   28d8c:	043fffc4 	movi	r16,-1
   28d90:	003d9d06 	br	28408 <_gp+0xfffed2a4>
   28d94:	8c401014 	ori	r17,r17,64
   28d98:	b0c00007 	ldb	r3,0(r22)
   28d9c:	003d9906 	br	28404 <_gp+0xfffed2a0>
   28da0:	d9002217 	ldw	r4,136(sp)
   28da4:	d8001d85 	stb	zero,118(sp)
   28da8:	20c00204 	addi	r3,r4,8
   28dac:	24c00017 	ldw	r19,0(r4)
   28db0:	25000117 	ldw	r20,4(r4)
   28db4:	8001e716 	blt	r16,zero,29554 <___vfiprintf_internal_r+0x12c4>
   28db8:	013fdfc4 	movi	r4,-129
   28dbc:	9d04b03a 	or	r2,r19,r20
   28dc0:	d8c02215 	stw	r3,136(sp)
   28dc4:	8922703a 	and	r17,r17,r4
   28dc8:	002b883a 	mov	r21,zero
   28dcc:	103f2f1e 	bne	r2,zero,28a8c <_gp+0xfffed928>
   28dd0:	803e2f26 	beq	r16,zero,28690 <_gp+0xfffed52c>
   28dd4:	0027883a 	mov	r19,zero
   28dd8:	9cc00c04 	addi	r19,r19,48
   28ddc:	dcc019c5 	stb	r19,103(sp)
   28de0:	dd002817 	ldw	r20,160(sp)
   28de4:	ddc019c4 	addi	r23,sp,103
   28de8:	003e2c06 	br	2869c <_gp+0xfffed538>
   28dec:	9cc03fcc 	andi	r19,r19,255
   28df0:	b811883a 	mov	r8,r23
   28df4:	9802571e 	bne	r19,zero,29754 <___vfiprintf_internal_r+0x14c4>
   28df8:	18005726 	beq	r3,zero,28f58 <___vfiprintf_internal_r+0xcc8>
   28dfc:	04c00044 	movi	r19,1
   28e00:	d8c01005 	stb	r3,64(sp)
   28e04:	d8001d85 	stb	zero,118(sp)
   28e08:	9829883a 	mov	r20,r19
   28e0c:	ddc01004 	addi	r23,sp,64
   28e10:	003f0a06 	br	28a3c <_gp+0xfffed8d8>
   28e14:	d9402017 	ldw	r5,128(sp)
   28e18:	d9002117 	ldw	r4,132(sp)
   28e1c:	d9801a04 	addi	r6,sp,104
   28e20:	da802a15 	stw	r10,168(sp)
   28e24:	002817c0 	call	2817c <__sprint_r.part.0>
   28e28:	da802a17 	ldw	r10,168(sp)
   28e2c:	1000501e 	bne	r2,zero,28f70 <___vfiprintf_internal_r+0xce0>
   28e30:	d9801b17 	ldw	r6,108(sp)
   28e34:	d8801c17 	ldw	r2,112(sp)
   28e38:	d811883a 	mov	r8,sp
   28e3c:	31000044 	addi	r4,r6,1
   28e40:	003e3606 	br	2871c <_gp+0xfffed5b8>
   28e44:	d9001b17 	ldw	r4,108(sp)
   28e48:	d8801c17 	ldw	r2,112(sp)
   28e4c:	21400044 	addi	r5,r4,1
   28e50:	d9801d87 	ldb	r6,118(sp)
   28e54:	303e5226 	beq	r6,zero,287a0 <_gp+0xfffed63c>
   28e58:	01800044 	movi	r6,1
   28e5c:	d9001d84 	addi	r4,sp,118
   28e60:	1185883a 	add	r2,r2,r6
   28e64:	41000015 	stw	r4,0(r8)
   28e68:	41800115 	stw	r6,4(r8)
   28e6c:	d8801c15 	stw	r2,112(sp)
   28e70:	d9401b15 	stw	r5,108(sp)
   28e74:	010001c4 	movi	r4,7
   28e78:	2140b00e 	bge	r4,r5,2913c <___vfiprintf_internal_r+0xeac>
   28e7c:	1000f61e 	bne	r2,zero,29258 <___vfiprintf_internal_r+0xfc8>
   28e80:	3800b31e 	bne	r7,zero,29150 <___vfiprintf_internal_r+0xec0>
   28e84:	0009883a 	mov	r4,zero
   28e88:	300b883a 	mov	r5,r6
   28e8c:	d811883a 	mov	r8,sp
   28e90:	01802004 	movi	r6,128
   28e94:	19be5226 	beq	r3,r6,287e0 <_gp+0xfffed67c>
   28e98:	8521c83a 	sub	r16,r16,r20
   28e9c:	043e790e 	bge	zero,r16,28884 <_gp+0xfffed720>
   28ea0:	05400404 	movi	r21,16
   28ea4:	ac01b00e 	bge	r21,r16,29568 <___vfiprintf_internal_r+0x12d8>
   28ea8:	014000f4 	movhi	r5,3
   28eac:	29447004 	addi	r5,r5,4544
   28eb0:	d9402315 	stw	r5,140(sp)
   28eb4:	070001c4 	movi	fp,7
   28eb8:	00000506 	br	28ed0 <___vfiprintf_internal_r+0xc40>
   28ebc:	21400084 	addi	r5,r4,2
   28ec0:	42000204 	addi	r8,r8,8
   28ec4:	1809883a 	mov	r4,r3
   28ec8:	843ffc04 	addi	r16,r16,-16
   28ecc:	ac000d0e 	bge	r21,r16,28f04 <___vfiprintf_internal_r+0xc74>
   28ed0:	10800404 	addi	r2,r2,16
   28ed4:	20c00044 	addi	r3,r4,1
   28ed8:	44800015 	stw	r18,0(r8)
   28edc:	45400115 	stw	r21,4(r8)
   28ee0:	d8801c15 	stw	r2,112(sp)
   28ee4:	d8c01b15 	stw	r3,108(sp)
   28ee8:	e0fff40e 	bge	fp,r3,28ebc <_gp+0xfffedd58>
   28eec:	1000101e 	bne	r2,zero,28f30 <___vfiprintf_internal_r+0xca0>
   28ef0:	843ffc04 	addi	r16,r16,-16
   28ef4:	01400044 	movi	r5,1
   28ef8:	0009883a 	mov	r4,zero
   28efc:	d811883a 	mov	r8,sp
   28f00:	ac3ff316 	blt	r21,r16,28ed0 <_gp+0xfffedd6c>
   28f04:	d8c02317 	ldw	r3,140(sp)
   28f08:	1405883a 	add	r2,r2,r16
   28f0c:	44000115 	stw	r16,4(r8)
   28f10:	40c00015 	stw	r3,0(r8)
   28f14:	d8801c15 	stw	r2,112(sp)
   28f18:	d9401b15 	stw	r5,108(sp)
   28f1c:	00c001c4 	movi	r3,7
   28f20:	19401916 	blt	r3,r5,28f88 <___vfiprintf_internal_r+0xcf8>
   28f24:	42000204 	addi	r8,r8,8
   28f28:	29400044 	addi	r5,r5,1
   28f2c:	003e5506 	br	28884 <_gp+0xfffed720>
   28f30:	d9402017 	ldw	r5,128(sp)
   28f34:	d9002117 	ldw	r4,132(sp)
   28f38:	d9801a04 	addi	r6,sp,104
   28f3c:	002817c0 	call	2817c <__sprint_r.part.0>
   28f40:	10000b1e 	bne	r2,zero,28f70 <___vfiprintf_internal_r+0xce0>
   28f44:	d9001b17 	ldw	r4,108(sp)
   28f48:	d8801c17 	ldw	r2,112(sp)
   28f4c:	d811883a 	mov	r8,sp
   28f50:	21400044 	addi	r5,r4,1
   28f54:	003fdc06 	br	28ec8 <_gp+0xfffedd64>
   28f58:	d8801c17 	ldw	r2,112(sp)
   28f5c:	10000426 	beq	r2,zero,28f70 <___vfiprintf_internal_r+0xce0>
   28f60:	d9402017 	ldw	r5,128(sp)
   28f64:	d9002117 	ldw	r4,132(sp)
   28f68:	d9801a04 	addi	r6,sp,104
   28f6c:	002817c0 	call	2817c <__sprint_r.part.0>
   28f70:	d9402017 	ldw	r5,128(sp)
   28f74:	2880030b 	ldhu	r2,12(r5)
   28f78:	1080100c 	andi	r2,r2,64
   28f7c:	10014d1e 	bne	r2,zero,294b4 <___vfiprintf_internal_r+0x1224>
   28f80:	d8802417 	ldw	r2,144(sp)
   28f84:	003d9706 	br	285e4 <_gp+0xfffed480>
   28f88:	1000d21e 	bne	r2,zero,292d4 <___vfiprintf_internal_r+0x1044>
   28f8c:	00c00044 	movi	r3,1
   28f90:	a005883a 	mov	r2,r20
   28f94:	ddc00015 	stw	r23,0(sp)
   28f98:	dd000115 	stw	r20,4(sp)
   28f9c:	dd001c15 	stw	r20,112(sp)
   28fa0:	d8c01b15 	stw	r3,108(sp)
   28fa4:	d811883a 	mov	r8,sp
   28fa8:	42000204 	addi	r8,r8,8
   28fac:	8c40010c 	andi	r17,r17,4
   28fb0:	88004026 	beq	r17,zero,290b4 <___vfiprintf_internal_r+0xe24>
   28fb4:	d9002517 	ldw	r4,148(sp)
   28fb8:	24e3c83a 	sub	r17,r4,r19
   28fbc:	04403d0e 	bge	zero,r17,290b4 <___vfiprintf_internal_r+0xe24>
   28fc0:	04000404 	movi	r16,16
   28fc4:	8441a90e 	bge	r16,r17,2966c <___vfiprintf_internal_r+0x13dc>
   28fc8:	00c000f4 	movhi	r3,3
   28fcc:	18c47404 	addi	r3,r3,4560
   28fd0:	d9001b17 	ldw	r4,108(sp)
   28fd4:	d8c02315 	stw	r3,140(sp)
   28fd8:	050001c4 	movi	r20,7
   28fdc:	dd402117 	ldw	r21,132(sp)
   28fe0:	ddc02017 	ldw	r23,128(sp)
   28fe4:	00000506 	br	28ffc <___vfiprintf_internal_r+0xd6c>
   28fe8:	21400084 	addi	r5,r4,2
   28fec:	42000204 	addi	r8,r8,8
   28ff0:	1809883a 	mov	r4,r3
   28ff4:	8c7ffc04 	addi	r17,r17,-16
   28ff8:	84400f0e 	bge	r16,r17,29038 <___vfiprintf_internal_r+0xda8>
   28ffc:	014000f4 	movhi	r5,3
   29000:	10800404 	addi	r2,r2,16
   29004:	20c00044 	addi	r3,r4,1
   29008:	29447404 	addi	r5,r5,4560
   2900c:	41400015 	stw	r5,0(r8)
   29010:	44000115 	stw	r16,4(r8)
   29014:	d8801c15 	stw	r2,112(sp)
   29018:	d8c01b15 	stw	r3,108(sp)
   2901c:	a0fff20e 	bge	r20,r3,28fe8 <_gp+0xfffede84>
   29020:	1000141e 	bne	r2,zero,29074 <___vfiprintf_internal_r+0xde4>
   29024:	8c7ffc04 	addi	r17,r17,-16
   29028:	01400044 	movi	r5,1
   2902c:	0009883a 	mov	r4,zero
   29030:	d811883a 	mov	r8,sp
   29034:	847ff116 	blt	r16,r17,28ffc <_gp+0xfffede98>
   29038:	d8c02317 	ldw	r3,140(sp)
   2903c:	1445883a 	add	r2,r2,r17
   29040:	44400115 	stw	r17,4(r8)
   29044:	40c00015 	stw	r3,0(r8)
   29048:	d8801c15 	stw	r2,112(sp)
   2904c:	d9401b15 	stw	r5,108(sp)
   29050:	00c001c4 	movi	r3,7
   29054:	1940170e 	bge	r3,r5,290b4 <___vfiprintf_internal_r+0xe24>
   29058:	1000101e 	bne	r2,zero,2909c <___vfiprintf_internal_r+0xe0c>
   2905c:	d8802517 	ldw	r2,148(sp)
   29060:	14c11616 	blt	r2,r19,294bc <___vfiprintf_internal_r+0x122c>
   29064:	d9002417 	ldw	r4,144(sp)
   29068:	2089883a 	add	r4,r4,r2
   2906c:	d9002415 	stw	r4,144(sp)
   29070:	003e1806 	br	288d4 <_gp+0xfffed770>
   29074:	d9801a04 	addi	r6,sp,104
   29078:	b80b883a 	mov	r5,r23
   2907c:	a809883a 	mov	r4,r21
   29080:	002817c0 	call	2817c <__sprint_r.part.0>
   29084:	103fba1e 	bne	r2,zero,28f70 <_gp+0xfffede0c>
   29088:	d9001b17 	ldw	r4,108(sp)
   2908c:	d8801c17 	ldw	r2,112(sp)
   29090:	d811883a 	mov	r8,sp
   29094:	21400044 	addi	r5,r4,1
   29098:	003fd606 	br	28ff4 <_gp+0xfffede90>
   2909c:	d9402017 	ldw	r5,128(sp)
   290a0:	d9002117 	ldw	r4,132(sp)
   290a4:	d9801a04 	addi	r6,sp,104
   290a8:	002817c0 	call	2817c <__sprint_r.part.0>
   290ac:	103fb01e 	bne	r2,zero,28f70 <_gp+0xfffede0c>
   290b0:	d8801c17 	ldw	r2,112(sp)
   290b4:	d8c02517 	ldw	r3,148(sp)
   290b8:	1cc0010e 	bge	r3,r19,290c0 <___vfiprintf_internal_r+0xe30>
   290bc:	9807883a 	mov	r3,r19
   290c0:	d9002417 	ldw	r4,144(sp)
   290c4:	20c9883a 	add	r4,r4,r3
   290c8:	d9002415 	stw	r4,144(sp)
   290cc:	103e0126 	beq	r2,zero,288d4 <_gp+0xfffed770>
   290d0:	d9402017 	ldw	r5,128(sp)
   290d4:	d9002117 	ldw	r4,132(sp)
   290d8:	d9801a04 	addi	r6,sp,104
   290dc:	002817c0 	call	2817c <__sprint_r.part.0>
   290e0:	103dfc26 	beq	r2,zero,288d4 <_gp+0xfffed770>
   290e4:	003fa206 	br	28f70 <_gp+0xfffede0c>
   290e8:	d9402017 	ldw	r5,128(sp)
   290ec:	d9002117 	ldw	r4,132(sp)
   290f0:	d9801a04 	addi	r6,sp,104
   290f4:	d9c02b15 	stw	r7,172(sp)
   290f8:	002817c0 	call	2817c <__sprint_r.part.0>
   290fc:	d9c02b17 	ldw	r7,172(sp)
   29100:	103f9b1e 	bne	r2,zero,28f70 <_gp+0xfffede0c>
   29104:	d9001b17 	ldw	r4,108(sp)
   29108:	d8801c17 	ldw	r2,112(sp)
   2910c:	d811883a 	mov	r8,sp
   29110:	21800044 	addi	r6,r4,1
   29114:	003dbf06 	br	28814 <_gp+0xfffed6b0>
   29118:	1000d81e 	bne	r2,zero,2947c <___vfiprintf_internal_r+0x11ec>
   2911c:	d9001d87 	ldb	r4,118(sp)
   29120:	20000a26 	beq	r4,zero,2914c <___vfiprintf_internal_r+0xebc>
   29124:	00800044 	movi	r2,1
   29128:	d9001d84 	addi	r4,sp,118
   2912c:	100b883a 	mov	r5,r2
   29130:	d9000015 	stw	r4,0(sp)
   29134:	d8800115 	stw	r2,4(sp)
   29138:	d811883a 	mov	r8,sp
   2913c:	2809883a 	mov	r4,r5
   29140:	42000204 	addi	r8,r8,8
   29144:	29400044 	addi	r5,r5,1
   29148:	003d9506 	br	287a0 <_gp+0xfffed63c>
   2914c:	3800fd26 	beq	r7,zero,29544 <___vfiprintf_internal_r+0x12b4>
   29150:	00800084 	movi	r2,2
   29154:	d9001d04 	addi	r4,sp,116
   29158:	d9000015 	stw	r4,0(sp)
   2915c:	d8800115 	stw	r2,4(sp)
   29160:	01400044 	movi	r5,1
   29164:	d811883a 	mov	r8,sp
   29168:	2809883a 	mov	r4,r5
   2916c:	42000204 	addi	r8,r8,8
   29170:	29400044 	addi	r5,r5,1
   29174:	003f4606 	br	28e90 <_gp+0xfffedd2c>
   29178:	d8802517 	ldw	r2,148(sp)
   2917c:	14c0010e 	bge	r2,r19,29184 <___vfiprintf_internal_r+0xef4>
   29180:	9805883a 	mov	r2,r19
   29184:	d9402417 	ldw	r5,144(sp)
   29188:	288b883a 	add	r5,r5,r2
   2918c:	d9402415 	stw	r5,144(sp)
   29190:	003dd006 	br	288d4 <_gp+0xfffed770>
   29194:	d8001d85 	stb	zero,118(sp)
   29198:	80005d16 	blt	r16,zero,29310 <___vfiprintf_internal_r+0x1080>
   2919c:	00ffdfc4 	movi	r3,-129
   291a0:	9d04b03a 	or	r2,r19,r20
   291a4:	88e2703a 	and	r17,r17,r3
   291a8:	103d3726 	beq	r2,zero,28688 <_gp+0xfffed524>
   291ac:	002b883a 	mov	r21,zero
   291b0:	d9002617 	ldw	r4,152(sp)
   291b4:	ddc01a04 	addi	r23,sp,104
   291b8:	988003cc 	andi	r2,r19,15
   291bc:	a006973a 	slli	r3,r20,28
   291c0:	2085883a 	add	r2,r4,r2
   291c4:	9826d13a 	srli	r19,r19,4
   291c8:	10800003 	ldbu	r2,0(r2)
   291cc:	a028d13a 	srli	r20,r20,4
   291d0:	bdffffc4 	addi	r23,r23,-1
   291d4:	1ce6b03a 	or	r19,r3,r19
   291d8:	b8800005 	stb	r2,0(r23)
   291dc:	9d04b03a 	or	r2,r19,r20
   291e0:	103ff51e 	bne	r2,zero,291b8 <_gp+0xfffee054>
   291e4:	d8801e17 	ldw	r2,120(sp)
   291e8:	15e9c83a 	sub	r20,r2,r23
   291ec:	003d2b06 	br	2869c <_gp+0xfffed538>
   291f0:	d9402017 	ldw	r5,128(sp)
   291f4:	d9002117 	ldw	r4,132(sp)
   291f8:	d9801a04 	addi	r6,sp,104
   291fc:	002817c0 	call	2817c <__sprint_r.part.0>
   29200:	103f5b1e 	bne	r2,zero,28f70 <_gp+0xfffede0c>
   29204:	d8801c17 	ldw	r2,112(sp)
   29208:	d811883a 	mov	r8,sp
   2920c:	003f6706 	br	28fac <_gp+0xfffede48>
   29210:	d9402017 	ldw	r5,128(sp)
   29214:	d9002117 	ldw	r4,132(sp)
   29218:	d9801a04 	addi	r6,sp,104
   2921c:	002817c0 	call	2817c <__sprint_r.part.0>
   29220:	103f531e 	bne	r2,zero,28f70 <_gp+0xfffede0c>
   29224:	d811883a 	mov	r8,sp
   29228:	003cd906 	br	28590 <_gp+0xfffed42c>
   2922c:	10803fcc 	andi	r2,r2,255
   29230:	1080201c 	xori	r2,r2,128
   29234:	10bfe004 	addi	r2,r2,-128
   29238:	00c00c04 	movi	r3,48
   2923c:	10ffe926 	beq	r2,r3,291e4 <_gp+0xfffee080>
   29240:	b8ffffc5 	stb	r3,-1(r23)
   29244:	d8c01e17 	ldw	r3,120(sp)
   29248:	b8bfffc4 	addi	r2,r23,-1
   2924c:	102f883a 	mov	r23,r2
   29250:	18a9c83a 	sub	r20,r3,r2
   29254:	003d1106 	br	2869c <_gp+0xfffed538>
   29258:	d9402017 	ldw	r5,128(sp)
   2925c:	d9002117 	ldw	r4,132(sp)
   29260:	d9801a04 	addi	r6,sp,104
   29264:	d8c02a15 	stw	r3,168(sp)
   29268:	d9c02b15 	stw	r7,172(sp)
   2926c:	002817c0 	call	2817c <__sprint_r.part.0>
   29270:	d8c02a17 	ldw	r3,168(sp)
   29274:	d9c02b17 	ldw	r7,172(sp)
   29278:	103f3d1e 	bne	r2,zero,28f70 <_gp+0xfffede0c>
   2927c:	d9001b17 	ldw	r4,108(sp)
   29280:	d8801c17 	ldw	r2,112(sp)
   29284:	d811883a 	mov	r8,sp
   29288:	21400044 	addi	r5,r4,1
   2928c:	003d4406 	br	287a0 <_gp+0xfffed63c>
   29290:	d9402017 	ldw	r5,128(sp)
   29294:	d9002117 	ldw	r4,132(sp)
   29298:	d9801a04 	addi	r6,sp,104
   2929c:	d8c02a15 	stw	r3,168(sp)
   292a0:	002817c0 	call	2817c <__sprint_r.part.0>
   292a4:	d8c02a17 	ldw	r3,168(sp)
   292a8:	103f311e 	bne	r2,zero,28f70 <_gp+0xfffede0c>
   292ac:	d9001b17 	ldw	r4,108(sp)
   292b0:	d8801c17 	ldw	r2,112(sp)
   292b4:	d811883a 	mov	r8,sp
   292b8:	21400044 	addi	r5,r4,1
   292bc:	003ef406 	br	28e90 <_gp+0xfffedd2c>
   292c0:	1000bd1e 	bne	r2,zero,295b8 <___vfiprintf_internal_r+0x1328>
   292c4:	01400044 	movi	r5,1
   292c8:	0009883a 	mov	r4,zero
   292cc:	d811883a 	mov	r8,sp
   292d0:	003ef106 	br	28e98 <_gp+0xfffedd34>
   292d4:	d9402017 	ldw	r5,128(sp)
   292d8:	d9002117 	ldw	r4,132(sp)
   292dc:	d9801a04 	addi	r6,sp,104
   292e0:	002817c0 	call	2817c <__sprint_r.part.0>
   292e4:	103f221e 	bne	r2,zero,28f70 <_gp+0xfffede0c>
   292e8:	d9401b17 	ldw	r5,108(sp)
   292ec:	d8801c17 	ldw	r2,112(sp)
   292f0:	d811883a 	mov	r8,sp
   292f4:	29400044 	addi	r5,r5,1
   292f8:	003d6206 	br	28884 <_gp+0xfffed720>
   292fc:	014000f4 	movhi	r5,3
   29300:	29440f04 	addi	r5,r5,4156
   29304:	d9402615 	stw	r5,152(sp)
   29308:	d8c02215 	stw	r3,136(sp)
   2930c:	1023883a 	mov	r17,r2
   29310:	9d04b03a 	or	r2,r19,r20
   29314:	103fa51e 	bne	r2,zero,291ac <_gp+0xfffee048>
   29318:	002b883a 	mov	r21,zero
   2931c:	00800084 	movi	r2,2
   29320:	003e4a06 	br	28c4c <_gp+0xfffedae8>
   29324:	014000f4 	movhi	r5,3
   29328:	29440f04 	addi	r5,r5,4156
   2932c:	002b883a 	mov	r21,zero
   29330:	d9402615 	stw	r5,152(sp)
   29334:	003f9e06 	br	291b0 <_gp+0xfffee04c>
   29338:	d9402217 	ldw	r5,136(sp)
   2933c:	d8001d85 	stb	zero,118(sp)
   29340:	0029883a 	mov	r20,zero
   29344:	28800104 	addi	r2,r5,4
   29348:	2cc00017 	ldw	r19,0(r5)
   2934c:	803e3a16 	blt	r16,zero,28c38 <_gp+0xfffedad4>
   29350:	00ffdfc4 	movi	r3,-129
   29354:	d8802215 	stw	r2,136(sp)
   29358:	88e2703a 	and	r17,r17,r3
   2935c:	002b883a 	mov	r21,zero
   29360:	983e9b26 	beq	r19,zero,28dd0 <_gp+0xfffedc6c>
   29364:	00800244 	movi	r2,9
   29368:	14fdc936 	bltu	r2,r19,28a90 <_gp+0xfffed92c>
   2936c:	003e9a06 	br	28dd8 <_gp+0xfffedc74>
   29370:	00800c04 	movi	r2,48
   29374:	d8c01d45 	stb	r3,117(sp)
   29378:	d8801d05 	stb	r2,116(sp)
   2937c:	d8001d85 	stb	zero,118(sp)
   29380:	88c00094 	ori	r3,r17,2
   29384:	80009c16 	blt	r16,zero,295f8 <___vfiprintf_internal_r+0x1368>
   29388:	00bfdfc4 	movi	r2,-129
   2938c:	88a2703a 	and	r17,r17,r2
   29390:	8c400094 	ori	r17,r17,2
   29394:	002b883a 	mov	r21,zero
   29398:	003f8506 	br	291b0 <_gp+0xfffee04c>
   2939c:	b029883a 	mov	r20,r22
   293a0:	003c0b06 	br	283d0 <_gp+0xfffed26c>
   293a4:	04e7c83a 	sub	r19,zero,r19
   293a8:	05400b44 	movi	r21,45
   293ac:	9804c03a 	cmpne	r2,r19,zero
   293b0:	0529c83a 	sub	r20,zero,r20
   293b4:	dd401d85 	stb	r21,118(sp)
   293b8:	a0a9c83a 	sub	r20,r20,r2
   293bc:	80009716 	blt	r16,zero,2961c <___vfiprintf_internal_r+0x138c>
   293c0:	00bfdfc4 	movi	r2,-129
   293c4:	88a2703a 	and	r17,r17,r2
   293c8:	003db006 	br	28a8c <_gp+0xfffed928>
   293cc:	b0c00007 	ldb	r3,0(r22)
   293d0:	003c0c06 	br	28404 <_gp+0xfffed2a0>
   293d4:	8880100c 	andi	r2,r17,64
   293d8:	d8001d85 	stb	zero,118(sp)
   293dc:	1000461e 	bne	r2,zero,294f8 <___vfiprintf_internal_r+0x1268>
   293e0:	d9002217 	ldw	r4,136(sp)
   293e4:	0029883a 	mov	r20,zero
   293e8:	20800104 	addi	r2,r4,4
   293ec:	24c00017 	ldw	r19,0(r4)
   293f0:	803df80e 	bge	r16,zero,28bd4 <_gp+0xfffeda70>
   293f4:	9d06b03a 	or	r3,r19,r20
   293f8:	d8802215 	stw	r2,136(sp)
   293fc:	183d5e1e 	bne	r3,zero,28978 <_gp+0xfffed814>
   29400:	002b883a 	mov	r21,zero
   29404:	0005883a 	mov	r2,zero
   29408:	003e1006 	br	28c4c <_gp+0xfffedae8>
   2940c:	8880040c 	andi	r2,r17,16
   29410:	1000321e 	bne	r2,zero,294dc <___vfiprintf_internal_r+0x124c>
   29414:	8c40100c 	andi	r17,r17,64
   29418:	88008d26 	beq	r17,zero,29650 <___vfiprintf_internal_r+0x13c0>
   2941c:	d9402217 	ldw	r5,136(sp)
   29420:	d8c02417 	ldw	r3,144(sp)
   29424:	28800017 	ldw	r2,0(r5)
   29428:	29400104 	addi	r5,r5,4
   2942c:	d9402215 	stw	r5,136(sp)
   29430:	10c0000d 	sth	r3,0(r2)
   29434:	003bca06 	br	28360 <_gp+0xfffed1fc>
   29438:	8880100c 	andi	r2,r17,64
   2943c:	10003a26 	beq	r2,zero,29528 <___vfiprintf_internal_r+0x1298>
   29440:	d8802217 	ldw	r2,136(sp)
   29444:	14c0000f 	ldh	r19,0(r2)
   29448:	10800104 	addi	r2,r2,4
   2944c:	d8802215 	stw	r2,136(sp)
   29450:	9829d7fa 	srai	r20,r19,31
   29454:	a005883a 	mov	r2,r20
   29458:	003d8506 	br	28a70 <_gp+0xfffed90c>
   2945c:	8880100c 	andi	r2,r17,64
   29460:	10002b26 	beq	r2,zero,29510 <___vfiprintf_internal_r+0x1280>
   29464:	d8802217 	ldw	r2,136(sp)
   29468:	0029883a 	mov	r20,zero
   2946c:	14c0000b 	ldhu	r19,0(r2)
   29470:	10800104 	addi	r2,r2,4
   29474:	d8802215 	stw	r2,136(sp)
   29478:	003d5d06 	br	289f0 <_gp+0xfffed88c>
   2947c:	d9402017 	ldw	r5,128(sp)
   29480:	d9002117 	ldw	r4,132(sp)
   29484:	d9801a04 	addi	r6,sp,104
   29488:	d8c02a15 	stw	r3,168(sp)
   2948c:	d9c02b15 	stw	r7,172(sp)
   29490:	002817c0 	call	2817c <__sprint_r.part.0>
   29494:	d8c02a17 	ldw	r3,168(sp)
   29498:	d9c02b17 	ldw	r7,172(sp)
   2949c:	103eb41e 	bne	r2,zero,28f70 <_gp+0xfffede0c>
   294a0:	d9001b17 	ldw	r4,108(sp)
   294a4:	d8801c17 	ldw	r2,112(sp)
   294a8:	d811883a 	mov	r8,sp
   294ac:	21400044 	addi	r5,r4,1
   294b0:	003e6706 	br	28e50 <_gp+0xfffedcec>
   294b4:	00bfffc4 	movi	r2,-1
   294b8:	003c4a06 	br	285e4 <_gp+0xfffed480>
   294bc:	9805883a 	mov	r2,r19
   294c0:	003ee806 	br	29064 <_gp+0xfffedf00>
   294c4:	d8c02217 	ldw	r3,136(sp)
   294c8:	0029883a 	mov	r20,zero
   294cc:	18800104 	addi	r2,r3,4
   294d0:	1cc0000b 	ldhu	r19,0(r3)
   294d4:	803f9e0e 	bge	r16,zero,29350 <_gp+0xfffee1ec>
   294d8:	003dd706 	br	28c38 <_gp+0xfffedad4>
   294dc:	d8c02217 	ldw	r3,136(sp)
   294e0:	d9002417 	ldw	r4,144(sp)
   294e4:	18800017 	ldw	r2,0(r3)
   294e8:	18c00104 	addi	r3,r3,4
   294ec:	d8c02215 	stw	r3,136(sp)
   294f0:	11000015 	stw	r4,0(r2)
   294f4:	003b9a06 	br	28360 <_gp+0xfffed1fc>
   294f8:	d8c02217 	ldw	r3,136(sp)
   294fc:	0029883a 	mov	r20,zero
   29500:	18800104 	addi	r2,r3,4
   29504:	1cc0000b 	ldhu	r19,0(r3)
   29508:	803db20e 	bge	r16,zero,28bd4 <_gp+0xfffeda70>
   2950c:	003fb906 	br	293f4 <_gp+0xfffee290>
   29510:	d9002217 	ldw	r4,136(sp)
   29514:	0029883a 	mov	r20,zero
   29518:	24c00017 	ldw	r19,0(r4)
   2951c:	21000104 	addi	r4,r4,4
   29520:	d9002215 	stw	r4,136(sp)
   29524:	003d3206 	br	289f0 <_gp+0xfffed88c>
   29528:	d8c02217 	ldw	r3,136(sp)
   2952c:	1cc00017 	ldw	r19,0(r3)
   29530:	18c00104 	addi	r3,r3,4
   29534:	d8c02215 	stw	r3,136(sp)
   29538:	9829d7fa 	srai	r20,r19,31
   2953c:	a005883a 	mov	r2,r20
   29540:	003d4b06 	br	28a70 <_gp+0xfffed90c>
   29544:	0009883a 	mov	r4,zero
   29548:	01400044 	movi	r5,1
   2954c:	d811883a 	mov	r8,sp
   29550:	003e4f06 	br	28e90 <_gp+0xfffedd2c>
   29554:	d8c02215 	stw	r3,136(sp)
   29558:	002b883a 	mov	r21,zero
   2955c:	003db806 	br	28c40 <_gp+0xfffedadc>
   29560:	d811883a 	mov	r8,sp
   29564:	003e9606 	br	28fc0 <_gp+0xfffede5c>
   29568:	010000f4 	movhi	r4,3
   2956c:	21047004 	addi	r4,r4,4544
   29570:	d9002315 	stw	r4,140(sp)
   29574:	003e6306 	br	28f04 <_gp+0xfffedda0>
   29578:	b0c00043 	ldbu	r3,1(r22)
   2957c:	8c400814 	ori	r17,r17,32
   29580:	b5800044 	addi	r22,r22,1
   29584:	18c03fcc 	andi	r3,r3,255
   29588:	18c0201c 	xori	r3,r3,128
   2958c:	18ffe004 	addi	r3,r3,-128
   29590:	003b9c06 	br	28404 <_gp+0xfffed2a0>
   29594:	b809883a 	mov	r4,r23
   29598:	da002a15 	stw	r8,168(sp)
   2959c:	0020a000 	call	20a00 <strlen>
   295a0:	1029883a 	mov	r20,r2
   295a4:	dd401d83 	ldbu	r21,118(sp)
   295a8:	df002215 	stw	fp,136(sp)
   295ac:	0021883a 	mov	r16,zero
   295b0:	da002a17 	ldw	r8,168(sp)
   295b4:	003c3906 	br	2869c <_gp+0xfffed538>
   295b8:	d9402017 	ldw	r5,128(sp)
   295bc:	d9002117 	ldw	r4,132(sp)
   295c0:	d9801a04 	addi	r6,sp,104
   295c4:	002817c0 	call	2817c <__sprint_r.part.0>
   295c8:	103e691e 	bne	r2,zero,28f70 <_gp+0xfffede0c>
   295cc:	d9001b17 	ldw	r4,108(sp)
   295d0:	d8801c17 	ldw	r2,112(sp)
   295d4:	d811883a 	mov	r8,sp
   295d8:	21400044 	addi	r5,r4,1
   295dc:	003e2e06 	br	28e98 <_gp+0xfffedd34>
   295e0:	010000f4 	movhi	r4,3
   295e4:	21047404 	addi	r4,r4,4560
   295e8:	d9002315 	stw	r4,140(sp)
   295ec:	d9001b17 	ldw	r4,108(sp)
   295f0:	21000044 	addi	r4,r4,1
   295f4:	003c5e06 	br	28770 <_gp+0xfffed60c>
   295f8:	002b883a 	mov	r21,zero
   295fc:	00800084 	movi	r2,2
   29600:	10803fcc 	andi	r2,r2,255
   29604:	01000044 	movi	r4,1
   29608:	11002b26 	beq	r2,r4,296b8 <___vfiprintf_internal_r+0x1428>
   2960c:	01000084 	movi	r4,2
   29610:	11002b1e 	bne	r2,r4,296c0 <___vfiprintf_internal_r+0x1430>
   29614:	1823883a 	mov	r17,r3
   29618:	003ee506 	br	291b0 <_gp+0xfffee04c>
   2961c:	8807883a 	mov	r3,r17
   29620:	00800044 	movi	r2,1
   29624:	003ff606 	br	29600 <_gp+0xfffee49c>
   29628:	00800184 	movi	r2,6
   2962c:	1400012e 	bgeu	r2,r16,29634 <___vfiprintf_internal_r+0x13a4>
   29630:	1021883a 	mov	r16,r2
   29634:	8029883a 	mov	r20,r16
   29638:	8027883a 	mov	r19,r16
   2963c:	80002216 	blt	r16,zero,296c8 <___vfiprintf_internal_r+0x1438>
   29640:	05c000f4 	movhi	r23,3
   29644:	df002215 	stw	fp,136(sp)
   29648:	bdc41404 	addi	r23,r23,4176
   2964c:	003cfb06 	br	28a3c <_gp+0xfffed8d8>
   29650:	d9002217 	ldw	r4,136(sp)
   29654:	d9402417 	ldw	r5,144(sp)
   29658:	20800017 	ldw	r2,0(r4)
   2965c:	21000104 	addi	r4,r4,4
   29660:	d9002215 	stw	r4,136(sp)
   29664:	11400015 	stw	r5,0(r2)
   29668:	003b3d06 	br	28360 <_gp+0xfffed1fc>
   2966c:	014000f4 	movhi	r5,3
   29670:	29447404 	addi	r5,r5,4560
   29674:	d9402315 	stw	r5,140(sp)
   29678:	d9401b17 	ldw	r5,108(sp)
   2967c:	29400044 	addi	r5,r5,1
   29680:	003e6d06 	br	29038 <_gp+0xfffeded4>
   29684:	8029883a 	mov	r20,r16
   29688:	dd401d83 	ldbu	r21,118(sp)
   2968c:	df002215 	stw	fp,136(sp)
   29690:	0021883a 	mov	r16,zero
   29694:	003c0106 	br	2869c <_gp+0xfffed538>
   29698:	00c000f4 	movhi	r3,3
   2969c:	18c47004 	addi	r3,r3,4544
   296a0:	d8c02315 	stw	r3,140(sp)
   296a4:	280d883a 	mov	r6,r5
   296a8:	003c6906 	br	28850 <_gp+0xfffed6ec>
   296ac:	802d883a 	mov	r22,r16
   296b0:	0021883a 	mov	r16,zero
   296b4:	003b5406 	br	28408 <_gp+0xfffed2a4>
   296b8:	1823883a 	mov	r17,r3
   296bc:	003cf306 	br	28a8c <_gp+0xfffed928>
   296c0:	1823883a 	mov	r17,r3
   296c4:	003cad06 	br	2897c <_gp+0xfffed818>
   296c8:	0027883a 	mov	r19,zero
   296cc:	003fdc06 	br	29640 <_gp+0xfffee4dc>
   296d0:	d9402217 	ldw	r5,136(sp)
   296d4:	8005883a 	mov	r2,r16
   296d8:	b0c00043 	ldbu	r3,1(r22)
   296dc:	2c000017 	ldw	r16,0(r5)
   296e0:	29000104 	addi	r4,r5,4
   296e4:	d9002215 	stw	r4,136(sp)
   296e8:	102d883a 	mov	r22,r2
   296ec:	803fa50e 	bge	r16,zero,29584 <_gp+0xfffee420>
   296f0:	18c03fcc 	andi	r3,r3,255
   296f4:	18c0201c 	xori	r3,r3,128
   296f8:	043fffc4 	movi	r16,-1
   296fc:	18ffe004 	addi	r3,r3,-128
   29700:	003b4006 	br	28404 <_gp+0xfffed2a0>
   29704:	d9402303 	ldbu	r5,140(sp)
   29708:	d9401d85 	stb	r5,118(sp)
   2970c:	003cae06 	br	289c8 <_gp+0xfffed864>
   29710:	d8c02303 	ldbu	r3,140(sp)
   29714:	d8c01d85 	stb	r3,118(sp)
   29718:	003d1406 	br	28b6c <_gp+0xfffeda08>
   2971c:	d8c02303 	ldbu	r3,140(sp)
   29720:	d8c01d85 	stb	r3,118(sp)
   29724:	003cca06 	br	28a50 <_gp+0xfffed8ec>
   29728:	8880004c 	andi	r2,r17,1
   2972c:	002b883a 	mov	r21,zero
   29730:	10000526 	beq	r2,zero,29748 <___vfiprintf_internal_r+0x14b8>
   29734:	00800c04 	movi	r2,48
   29738:	d88019c5 	stb	r2,103(sp)
   2973c:	dd002817 	ldw	r20,160(sp)
   29740:	ddc019c4 	addi	r23,sp,103
   29744:	003bd506 	br	2869c <_gp+0xfffed538>
   29748:	0029883a 	mov	r20,zero
   2974c:	ddc01a04 	addi	r23,sp,104
   29750:	003bd206 	br	2869c <_gp+0xfffed538>
   29754:	d9002303 	ldbu	r4,140(sp)
   29758:	d9001d85 	stb	r4,118(sp)
   2975c:	003da606 	br	28df8 <_gp+0xfffedc94>
   29760:	d8c02303 	ldbu	r3,140(sp)
   29764:	d8c01d85 	stb	r3,118(sp)
   29768:	003c7606 	br	28944 <_gp+0xfffed7e0>
   2976c:	d8c02303 	ldbu	r3,140(sp)
   29770:	d8c01d85 	stb	r3,118(sp)
   29774:	003c6506 	br	2890c <_gp+0xfffed7a8>
   29778:	d9002303 	ldbu	r4,140(sp)
   2977c:	d9001d85 	stb	r4,118(sp)
   29780:	003d3d06 	br	28c78 <_gp+0xfffedb14>
   29784:	d8c02303 	ldbu	r3,140(sp)
   29788:	d8c01d85 	stb	r3,118(sp)
   2978c:	003d1d06 	br	28c04 <_gp+0xfffedaa0>
   29790:	d8c02303 	ldbu	r3,140(sp)
   29794:	d8c01d85 	stb	r3,118(sp)
   29798:	003d0306 	br	28ba8 <_gp+0xfffeda44>

0002979c <__vfiprintf_internal>:
   2979c:	008000f4 	movhi	r2,3
   297a0:	108c5a04 	addi	r2,r2,12648
   297a4:	300f883a 	mov	r7,r6
   297a8:	280d883a 	mov	r6,r5
   297ac:	200b883a 	mov	r5,r4
   297b0:	11000017 	ldw	r4,0(r2)
   297b4:	00282901 	jmpi	28290 <___vfiprintf_internal_r>

000297b8 <__sbprintf>:
   297b8:	2880030b 	ldhu	r2,12(r5)
   297bc:	2ac01917 	ldw	r11,100(r5)
   297c0:	2a80038b 	ldhu	r10,14(r5)
   297c4:	2a400717 	ldw	r9,28(r5)
   297c8:	2a000917 	ldw	r8,36(r5)
   297cc:	defee204 	addi	sp,sp,-1144
   297d0:	00c10004 	movi	r3,1024
   297d4:	dc011a15 	stw	r16,1128(sp)
   297d8:	10bfff4c 	andi	r2,r2,65533
   297dc:	2821883a 	mov	r16,r5
   297e0:	d8cb883a 	add	r5,sp,r3
   297e4:	dc811c15 	stw	r18,1136(sp)
   297e8:	dc411b15 	stw	r17,1132(sp)
   297ec:	dfc11d15 	stw	ra,1140(sp)
   297f0:	2025883a 	mov	r18,r4
   297f4:	d881030d 	sth	r2,1036(sp)
   297f8:	dac11915 	stw	r11,1124(sp)
   297fc:	da81038d 	sth	r10,1038(sp)
   29800:	da410715 	stw	r9,1052(sp)
   29804:	da010915 	stw	r8,1060(sp)
   29808:	dec10015 	stw	sp,1024(sp)
   2980c:	dec10415 	stw	sp,1040(sp)
   29810:	d8c10215 	stw	r3,1032(sp)
   29814:	d8c10515 	stw	r3,1044(sp)
   29818:	d8010615 	stw	zero,1048(sp)
   2981c:	00282900 	call	28290 <___vfiprintf_internal_r>
   29820:	1023883a 	mov	r17,r2
   29824:	10000416 	blt	r2,zero,29838 <__sbprintf+0x80>
   29828:	d9410004 	addi	r5,sp,1024
   2982c:	9009883a 	mov	r4,r18
   29830:	0024a6c0 	call	24a6c <_fflush_r>
   29834:	10000d1e 	bne	r2,zero,2986c <__sbprintf+0xb4>
   29838:	d881030b 	ldhu	r2,1036(sp)
   2983c:	1080100c 	andi	r2,r2,64
   29840:	10000326 	beq	r2,zero,29850 <__sbprintf+0x98>
   29844:	8080030b 	ldhu	r2,12(r16)
   29848:	10801014 	ori	r2,r2,64
   2984c:	8080030d 	sth	r2,12(r16)
   29850:	8805883a 	mov	r2,r17
   29854:	dfc11d17 	ldw	ra,1140(sp)
   29858:	dc811c17 	ldw	r18,1136(sp)
   2985c:	dc411b17 	ldw	r17,1132(sp)
   29860:	dc011a17 	ldw	r16,1128(sp)
   29864:	dec11e04 	addi	sp,sp,1144
   29868:	f800283a 	ret
   2986c:	047fffc4 	movi	r17,-1
   29870:	003ff106 	br	29838 <_gp+0xfffee6d4>

00029874 <_write_r>:
   29874:	defffd04 	addi	sp,sp,-12
   29878:	2805883a 	mov	r2,r5
   2987c:	dc000015 	stw	r16,0(sp)
   29880:	040000f4 	movhi	r16,3
   29884:	dc400115 	stw	r17,4(sp)
   29888:	300b883a 	mov	r5,r6
   2988c:	84137604 	addi	r16,r16,19928
   29890:	2023883a 	mov	r17,r4
   29894:	380d883a 	mov	r6,r7
   29898:	1009883a 	mov	r4,r2
   2989c:	dfc00215 	stw	ra,8(sp)
   298a0:	80000015 	stw	zero,0(r16)
   298a4:	002e09c0 	call	2e09c <write>
   298a8:	00ffffc4 	movi	r3,-1
   298ac:	10c00526 	beq	r2,r3,298c4 <_write_r+0x50>
   298b0:	dfc00217 	ldw	ra,8(sp)
   298b4:	dc400117 	ldw	r17,4(sp)
   298b8:	dc000017 	ldw	r16,0(sp)
   298bc:	dec00304 	addi	sp,sp,12
   298c0:	f800283a 	ret
   298c4:	80c00017 	ldw	r3,0(r16)
   298c8:	183ff926 	beq	r3,zero,298b0 <_gp+0xfffee74c>
   298cc:	88c00015 	stw	r3,0(r17)
   298d0:	003ff706 	br	298b0 <_gp+0xfffee74c>

000298d4 <_close_r>:
   298d4:	defffd04 	addi	sp,sp,-12
   298d8:	dc000015 	stw	r16,0(sp)
   298dc:	040000f4 	movhi	r16,3
   298e0:	dc400115 	stw	r17,4(sp)
   298e4:	84137604 	addi	r16,r16,19928
   298e8:	2023883a 	mov	r17,r4
   298ec:	2809883a 	mov	r4,r5
   298f0:	dfc00215 	stw	ra,8(sp)
   298f4:	80000015 	stw	zero,0(r16)
   298f8:	002d8140 	call	2d814 <close>
   298fc:	00ffffc4 	movi	r3,-1
   29900:	10c00526 	beq	r2,r3,29918 <_close_r+0x44>
   29904:	dfc00217 	ldw	ra,8(sp)
   29908:	dc400117 	ldw	r17,4(sp)
   2990c:	dc000017 	ldw	r16,0(sp)
   29910:	dec00304 	addi	sp,sp,12
   29914:	f800283a 	ret
   29918:	80c00017 	ldw	r3,0(r16)
   2991c:	183ff926 	beq	r3,zero,29904 <_gp+0xfffee7a0>
   29920:	88c00015 	stw	r3,0(r17)
   29924:	003ff706 	br	29904 <_gp+0xfffee7a0>

00029928 <_calloc_r>:
   29928:	defffe04 	addi	sp,sp,-8
   2992c:	2805883a 	mov	r2,r5
   29930:	dc000015 	stw	r16,0(sp)
   29934:	300b883a 	mov	r5,r6
   29938:	2021883a 	mov	r16,r4
   2993c:	1009883a 	mov	r4,r2
   29940:	dfc00115 	stw	ra,4(sp)
   29944:	00208980 	call	20898 <__mulsi3>
   29948:	100b883a 	mov	r5,r2
   2994c:	8009883a 	mov	r4,r16
   29950:	0025bc40 	call	25bc4 <_malloc_r>
   29954:	10002926 	beq	r2,zero,299fc <_calloc_r+0xd4>
   29958:	11bfff17 	ldw	r6,-4(r2)
   2995c:	1021883a 	mov	r16,r2
   29960:	00bfff04 	movi	r2,-4
   29964:	308c703a 	and	r6,r6,r2
   29968:	00c00904 	movi	r3,36
   2996c:	308d883a 	add	r6,r6,r2
   29970:	19801636 	bltu	r3,r6,299cc <_calloc_r+0xa4>
   29974:	008004c4 	movi	r2,19
   29978:	11800b2e 	bgeu	r2,r6,299a8 <_calloc_r+0x80>
   2997c:	80000015 	stw	zero,0(r16)
   29980:	80000115 	stw	zero,4(r16)
   29984:	008006c4 	movi	r2,27
   29988:	11801a2e 	bgeu	r2,r6,299f4 <_calloc_r+0xcc>
   2998c:	80000215 	stw	zero,8(r16)
   29990:	80000315 	stw	zero,12(r16)
   29994:	30c0151e 	bne	r6,r3,299ec <_calloc_r+0xc4>
   29998:	80000415 	stw	zero,16(r16)
   2999c:	80800604 	addi	r2,r16,24
   299a0:	80000515 	stw	zero,20(r16)
   299a4:	00000106 	br	299ac <_calloc_r+0x84>
   299a8:	8005883a 	mov	r2,r16
   299ac:	10000015 	stw	zero,0(r2)
   299b0:	10000115 	stw	zero,4(r2)
   299b4:	10000215 	stw	zero,8(r2)
   299b8:	8005883a 	mov	r2,r16
   299bc:	dfc00117 	ldw	ra,4(sp)
   299c0:	dc000017 	ldw	r16,0(sp)
   299c4:	dec00204 	addi	sp,sp,8
   299c8:	f800283a 	ret
   299cc:	000b883a 	mov	r5,zero
   299d0:	8009883a 	mov	r4,r16
   299d4:	00267580 	call	26758 <memset>
   299d8:	8005883a 	mov	r2,r16
   299dc:	dfc00117 	ldw	ra,4(sp)
   299e0:	dc000017 	ldw	r16,0(sp)
   299e4:	dec00204 	addi	sp,sp,8
   299e8:	f800283a 	ret
   299ec:	80800404 	addi	r2,r16,16
   299f0:	003fee06 	br	299ac <_gp+0xfffee848>
   299f4:	80800204 	addi	r2,r16,8
   299f8:	003fec06 	br	299ac <_gp+0xfffee848>
   299fc:	0005883a 	mov	r2,zero
   29a00:	003fee06 	br	299bc <_gp+0xfffee858>

00029a04 <_fclose_r>:
   29a04:	28003926 	beq	r5,zero,29aec <_fclose_r+0xe8>
   29a08:	defffc04 	addi	sp,sp,-16
   29a0c:	dc400115 	stw	r17,4(sp)
   29a10:	dc000015 	stw	r16,0(sp)
   29a14:	dfc00315 	stw	ra,12(sp)
   29a18:	dc800215 	stw	r18,8(sp)
   29a1c:	2023883a 	mov	r17,r4
   29a20:	2821883a 	mov	r16,r5
   29a24:	20000226 	beq	r4,zero,29a30 <_fclose_r+0x2c>
   29a28:	20800e17 	ldw	r2,56(r4)
   29a2c:	10002726 	beq	r2,zero,29acc <_fclose_r+0xc8>
   29a30:	8080030f 	ldh	r2,12(r16)
   29a34:	1000071e 	bne	r2,zero,29a54 <_fclose_r+0x50>
   29a38:	0005883a 	mov	r2,zero
   29a3c:	dfc00317 	ldw	ra,12(sp)
   29a40:	dc800217 	ldw	r18,8(sp)
   29a44:	dc400117 	ldw	r17,4(sp)
   29a48:	dc000017 	ldw	r16,0(sp)
   29a4c:	dec00404 	addi	sp,sp,16
   29a50:	f800283a 	ret
   29a54:	800b883a 	mov	r5,r16
   29a58:	8809883a 	mov	r4,r17
   29a5c:	00248500 	call	24850 <__sflush_r>
   29a60:	1025883a 	mov	r18,r2
   29a64:	80800b17 	ldw	r2,44(r16)
   29a68:	10000426 	beq	r2,zero,29a7c <_fclose_r+0x78>
   29a6c:	81400717 	ldw	r5,28(r16)
   29a70:	8809883a 	mov	r4,r17
   29a74:	103ee83a 	callr	r2
   29a78:	10001616 	blt	r2,zero,29ad4 <_fclose_r+0xd0>
   29a7c:	8080030b 	ldhu	r2,12(r16)
   29a80:	1080200c 	andi	r2,r2,128
   29a84:	1000151e 	bne	r2,zero,29adc <_fclose_r+0xd8>
   29a88:	81400c17 	ldw	r5,48(r16)
   29a8c:	28000526 	beq	r5,zero,29aa4 <_fclose_r+0xa0>
   29a90:	80801004 	addi	r2,r16,64
   29a94:	28800226 	beq	r5,r2,29aa0 <_fclose_r+0x9c>
   29a98:	8809883a 	mov	r4,r17
   29a9c:	0024fcc0 	call	24fcc <_free_r>
   29aa0:	80000c15 	stw	zero,48(r16)
   29aa4:	81401117 	ldw	r5,68(r16)
   29aa8:	28000326 	beq	r5,zero,29ab8 <_fclose_r+0xb4>
   29aac:	8809883a 	mov	r4,r17
   29ab0:	0024fcc0 	call	24fcc <_free_r>
   29ab4:	80001115 	stw	zero,68(r16)
   29ab8:	0024e680 	call	24e68 <__sfp_lock_acquire>
   29abc:	8000030d 	sth	zero,12(r16)
   29ac0:	0024e6c0 	call	24e6c <__sfp_lock_release>
   29ac4:	9005883a 	mov	r2,r18
   29ac8:	003fdc06 	br	29a3c <_gp+0xfffee8d8>
   29acc:	0024e580 	call	24e58 <__sinit>
   29ad0:	003fd706 	br	29a30 <_gp+0xfffee8cc>
   29ad4:	04bfffc4 	movi	r18,-1
   29ad8:	003fe806 	br	29a7c <_gp+0xfffee918>
   29adc:	81400417 	ldw	r5,16(r16)
   29ae0:	8809883a 	mov	r4,r17
   29ae4:	0024fcc0 	call	24fcc <_free_r>
   29ae8:	003fe706 	br	29a88 <_gp+0xfffee924>
   29aec:	0005883a 	mov	r2,zero
   29af0:	f800283a 	ret

00029af4 <fclose>:
   29af4:	008000f4 	movhi	r2,3
   29af8:	108c5a04 	addi	r2,r2,12648
   29afc:	200b883a 	mov	r5,r4
   29b00:	11000017 	ldw	r4,0(r2)
   29b04:	0029a041 	jmpi	29a04 <_fclose_r>

00029b08 <__fputwc>:
   29b08:	defff804 	addi	sp,sp,-32
   29b0c:	dcc00415 	stw	r19,16(sp)
   29b10:	dc800315 	stw	r18,12(sp)
   29b14:	dc000115 	stw	r16,4(sp)
   29b18:	dfc00715 	stw	ra,28(sp)
   29b1c:	dd400615 	stw	r21,24(sp)
   29b20:	dd000515 	stw	r20,20(sp)
   29b24:	dc400215 	stw	r17,8(sp)
   29b28:	2027883a 	mov	r19,r4
   29b2c:	2825883a 	mov	r18,r5
   29b30:	3021883a 	mov	r16,r6
   29b34:	00259b40 	call	259b4 <__locale_mb_cur_max>
   29b38:	00c00044 	movi	r3,1
   29b3c:	10c03e26 	beq	r2,r3,29c38 <__fputwc+0x130>
   29b40:	81c01704 	addi	r7,r16,92
   29b44:	900d883a 	mov	r6,r18
   29b48:	d80b883a 	mov	r5,sp
   29b4c:	9809883a 	mov	r4,r19
   29b50:	0029fd80 	call	29fd8 <_wcrtomb_r>
   29b54:	1029883a 	mov	r20,r2
   29b58:	00bfffc4 	movi	r2,-1
   29b5c:	a0802026 	beq	r20,r2,29be0 <__fputwc+0xd8>
   29b60:	d9400003 	ldbu	r5,0(sp)
   29b64:	a0001c26 	beq	r20,zero,29bd8 <__fputwc+0xd0>
   29b68:	0023883a 	mov	r17,zero
   29b6c:	05400284 	movi	r21,10
   29b70:	00000906 	br	29b98 <__fputwc+0x90>
   29b74:	80800017 	ldw	r2,0(r16)
   29b78:	11400005 	stb	r5,0(r2)
   29b7c:	80c00017 	ldw	r3,0(r16)
   29b80:	18c00044 	addi	r3,r3,1
   29b84:	80c00015 	stw	r3,0(r16)
   29b88:	8c400044 	addi	r17,r17,1
   29b8c:	dc45883a 	add	r2,sp,r17
   29b90:	8d00112e 	bgeu	r17,r20,29bd8 <__fputwc+0xd0>
   29b94:	11400003 	ldbu	r5,0(r2)
   29b98:	80c00217 	ldw	r3,8(r16)
   29b9c:	18ffffc4 	addi	r3,r3,-1
   29ba0:	80c00215 	stw	r3,8(r16)
   29ba4:	183ff30e 	bge	r3,zero,29b74 <_gp+0xfffeea10>
   29ba8:	80800617 	ldw	r2,24(r16)
   29bac:	18801916 	blt	r3,r2,29c14 <__fputwc+0x10c>
   29bb0:	80800017 	ldw	r2,0(r16)
   29bb4:	11400005 	stb	r5,0(r2)
   29bb8:	80800017 	ldw	r2,0(r16)
   29bbc:	10c00003 	ldbu	r3,0(r2)
   29bc0:	10800044 	addi	r2,r2,1
   29bc4:	1d402326 	beq	r3,r21,29c54 <__fputwc+0x14c>
   29bc8:	80800015 	stw	r2,0(r16)
   29bcc:	8c400044 	addi	r17,r17,1
   29bd0:	dc45883a 	add	r2,sp,r17
   29bd4:	8d3fef36 	bltu	r17,r20,29b94 <_gp+0xfffeea30>
   29bd8:	9005883a 	mov	r2,r18
   29bdc:	00000406 	br	29bf0 <__fputwc+0xe8>
   29be0:	80c0030b 	ldhu	r3,12(r16)
   29be4:	a005883a 	mov	r2,r20
   29be8:	18c01014 	ori	r3,r3,64
   29bec:	80c0030d 	sth	r3,12(r16)
   29bf0:	dfc00717 	ldw	ra,28(sp)
   29bf4:	dd400617 	ldw	r21,24(sp)
   29bf8:	dd000517 	ldw	r20,20(sp)
   29bfc:	dcc00417 	ldw	r19,16(sp)
   29c00:	dc800317 	ldw	r18,12(sp)
   29c04:	dc400217 	ldw	r17,8(sp)
   29c08:	dc000117 	ldw	r16,4(sp)
   29c0c:	dec00804 	addi	sp,sp,32
   29c10:	f800283a 	ret
   29c14:	800d883a 	mov	r6,r16
   29c18:	29403fcc 	andi	r5,r5,255
   29c1c:	9809883a 	mov	r4,r19
   29c20:	0029e800 	call	29e80 <__swbuf_r>
   29c24:	10bfffe0 	cmpeqi	r2,r2,-1
   29c28:	10803fcc 	andi	r2,r2,255
   29c2c:	103fd626 	beq	r2,zero,29b88 <_gp+0xfffeea24>
   29c30:	00bfffc4 	movi	r2,-1
   29c34:	003fee06 	br	29bf0 <_gp+0xfffeea8c>
   29c38:	90ffffc4 	addi	r3,r18,-1
   29c3c:	01003f84 	movi	r4,254
   29c40:	20ffbf36 	bltu	r4,r3,29b40 <_gp+0xfffee9dc>
   29c44:	900b883a 	mov	r5,r18
   29c48:	dc800005 	stb	r18,0(sp)
   29c4c:	1029883a 	mov	r20,r2
   29c50:	003fc506 	br	29b68 <_gp+0xfffeea04>
   29c54:	800d883a 	mov	r6,r16
   29c58:	a80b883a 	mov	r5,r21
   29c5c:	9809883a 	mov	r4,r19
   29c60:	0029e800 	call	29e80 <__swbuf_r>
   29c64:	10bfffe0 	cmpeqi	r2,r2,-1
   29c68:	003fef06 	br	29c28 <_gp+0xfffeeac4>

00029c6c <_fputwc_r>:
   29c6c:	3080030b 	ldhu	r2,12(r6)
   29c70:	10c8000c 	andi	r3,r2,8192
   29c74:	1800051e 	bne	r3,zero,29c8c <_fputwc_r+0x20>
   29c78:	30c01917 	ldw	r3,100(r6)
   29c7c:	10880014 	ori	r2,r2,8192
   29c80:	3080030d 	sth	r2,12(r6)
   29c84:	18880014 	ori	r2,r3,8192
   29c88:	30801915 	stw	r2,100(r6)
   29c8c:	0029b081 	jmpi	29b08 <__fputwc>

00029c90 <fputwc>:
   29c90:	008000f4 	movhi	r2,3
   29c94:	defffc04 	addi	sp,sp,-16
   29c98:	108c5a04 	addi	r2,r2,12648
   29c9c:	dc000115 	stw	r16,4(sp)
   29ca0:	14000017 	ldw	r16,0(r2)
   29ca4:	dc400215 	stw	r17,8(sp)
   29ca8:	dfc00315 	stw	ra,12(sp)
   29cac:	2023883a 	mov	r17,r4
   29cb0:	80000226 	beq	r16,zero,29cbc <fputwc+0x2c>
   29cb4:	80800e17 	ldw	r2,56(r16)
   29cb8:	10001026 	beq	r2,zero,29cfc <fputwc+0x6c>
   29cbc:	2880030b 	ldhu	r2,12(r5)
   29cc0:	10c8000c 	andi	r3,r2,8192
   29cc4:	1800051e 	bne	r3,zero,29cdc <fputwc+0x4c>
   29cc8:	28c01917 	ldw	r3,100(r5)
   29ccc:	10880014 	ori	r2,r2,8192
   29cd0:	2880030d 	sth	r2,12(r5)
   29cd4:	18880014 	ori	r2,r3,8192
   29cd8:	28801915 	stw	r2,100(r5)
   29cdc:	280d883a 	mov	r6,r5
   29ce0:	8009883a 	mov	r4,r16
   29ce4:	880b883a 	mov	r5,r17
   29ce8:	dfc00317 	ldw	ra,12(sp)
   29cec:	dc400217 	ldw	r17,8(sp)
   29cf0:	dc000117 	ldw	r16,4(sp)
   29cf4:	dec00404 	addi	sp,sp,16
   29cf8:	0029b081 	jmpi	29b08 <__fputwc>
   29cfc:	8009883a 	mov	r4,r16
   29d00:	d9400015 	stw	r5,0(sp)
   29d04:	0024e580 	call	24e58 <__sinit>
   29d08:	d9400017 	ldw	r5,0(sp)
   29d0c:	003feb06 	br	29cbc <_gp+0xfffeeb58>

00029d10 <_fstat_r>:
   29d10:	defffd04 	addi	sp,sp,-12
   29d14:	2805883a 	mov	r2,r5
   29d18:	dc000015 	stw	r16,0(sp)
   29d1c:	040000f4 	movhi	r16,3
   29d20:	dc400115 	stw	r17,4(sp)
   29d24:	84137604 	addi	r16,r16,19928
   29d28:	2023883a 	mov	r17,r4
   29d2c:	300b883a 	mov	r5,r6
   29d30:	1009883a 	mov	r4,r2
   29d34:	dfc00215 	stw	ra,8(sp)
   29d38:	80000015 	stw	zero,0(r16)
   29d3c:	002d9540 	call	2d954 <fstat>
   29d40:	00ffffc4 	movi	r3,-1
   29d44:	10c00526 	beq	r2,r3,29d5c <_fstat_r+0x4c>
   29d48:	dfc00217 	ldw	ra,8(sp)
   29d4c:	dc400117 	ldw	r17,4(sp)
   29d50:	dc000017 	ldw	r16,0(sp)
   29d54:	dec00304 	addi	sp,sp,12
   29d58:	f800283a 	ret
   29d5c:	80c00017 	ldw	r3,0(r16)
   29d60:	183ff926 	beq	r3,zero,29d48 <_gp+0xfffeebe4>
   29d64:	88c00015 	stw	r3,0(r17)
   29d68:	003ff706 	br	29d48 <_gp+0xfffeebe4>

00029d6c <_isatty_r>:
   29d6c:	defffd04 	addi	sp,sp,-12
   29d70:	dc000015 	stw	r16,0(sp)
   29d74:	040000f4 	movhi	r16,3
   29d78:	dc400115 	stw	r17,4(sp)
   29d7c:	84137604 	addi	r16,r16,19928
   29d80:	2023883a 	mov	r17,r4
   29d84:	2809883a 	mov	r4,r5
   29d88:	dfc00215 	stw	ra,8(sp)
   29d8c:	80000015 	stw	zero,0(r16)
   29d90:	002da480 	call	2da48 <isatty>
   29d94:	00ffffc4 	movi	r3,-1
   29d98:	10c00526 	beq	r2,r3,29db0 <_isatty_r+0x44>
   29d9c:	dfc00217 	ldw	ra,8(sp)
   29da0:	dc400117 	ldw	r17,4(sp)
   29da4:	dc000017 	ldw	r16,0(sp)
   29da8:	dec00304 	addi	sp,sp,12
   29dac:	f800283a 	ret
   29db0:	80c00017 	ldw	r3,0(r16)
   29db4:	183ff926 	beq	r3,zero,29d9c <_gp+0xfffeec38>
   29db8:	88c00015 	stw	r3,0(r17)
   29dbc:	003ff706 	br	29d9c <_gp+0xfffeec38>

00029dc0 <_lseek_r>:
   29dc0:	defffd04 	addi	sp,sp,-12
   29dc4:	2805883a 	mov	r2,r5
   29dc8:	dc000015 	stw	r16,0(sp)
   29dcc:	040000f4 	movhi	r16,3
   29dd0:	dc400115 	stw	r17,4(sp)
   29dd4:	300b883a 	mov	r5,r6
   29dd8:	84137604 	addi	r16,r16,19928
   29ddc:	2023883a 	mov	r17,r4
   29de0:	380d883a 	mov	r6,r7
   29de4:	1009883a 	mov	r4,r2
   29de8:	dfc00215 	stw	ra,8(sp)
   29dec:	80000015 	stw	zero,0(r16)
   29df0:	002dc1c0 	call	2dc1c <lseek>
   29df4:	00ffffc4 	movi	r3,-1
   29df8:	10c00526 	beq	r2,r3,29e10 <_lseek_r+0x50>
   29dfc:	dfc00217 	ldw	ra,8(sp)
   29e00:	dc400117 	ldw	r17,4(sp)
   29e04:	dc000017 	ldw	r16,0(sp)
   29e08:	dec00304 	addi	sp,sp,12
   29e0c:	f800283a 	ret
   29e10:	80c00017 	ldw	r3,0(r16)
   29e14:	183ff926 	beq	r3,zero,29dfc <_gp+0xfffeec98>
   29e18:	88c00015 	stw	r3,0(r17)
   29e1c:	003ff706 	br	29dfc <_gp+0xfffeec98>

00029e20 <_read_r>:
   29e20:	defffd04 	addi	sp,sp,-12
   29e24:	2805883a 	mov	r2,r5
   29e28:	dc000015 	stw	r16,0(sp)
   29e2c:	040000f4 	movhi	r16,3
   29e30:	dc400115 	stw	r17,4(sp)
   29e34:	300b883a 	mov	r5,r6
   29e38:	84137604 	addi	r16,r16,19928
   29e3c:	2023883a 	mov	r17,r4
   29e40:	380d883a 	mov	r6,r7
   29e44:	1009883a 	mov	r4,r2
   29e48:	dfc00215 	stw	ra,8(sp)
   29e4c:	80000015 	stw	zero,0(r16)
   29e50:	002ddf80 	call	2ddf8 <read>
   29e54:	00ffffc4 	movi	r3,-1
   29e58:	10c00526 	beq	r2,r3,29e70 <_read_r+0x50>
   29e5c:	dfc00217 	ldw	ra,8(sp)
   29e60:	dc400117 	ldw	r17,4(sp)
   29e64:	dc000017 	ldw	r16,0(sp)
   29e68:	dec00304 	addi	sp,sp,12
   29e6c:	f800283a 	ret
   29e70:	80c00017 	ldw	r3,0(r16)
   29e74:	183ff926 	beq	r3,zero,29e5c <_gp+0xfffeecf8>
   29e78:	88c00015 	stw	r3,0(r17)
   29e7c:	003ff706 	br	29e5c <_gp+0xfffeecf8>

00029e80 <__swbuf_r>:
   29e80:	defffb04 	addi	sp,sp,-20
   29e84:	dcc00315 	stw	r19,12(sp)
   29e88:	dc800215 	stw	r18,8(sp)
   29e8c:	dc000015 	stw	r16,0(sp)
   29e90:	dfc00415 	stw	ra,16(sp)
   29e94:	dc400115 	stw	r17,4(sp)
   29e98:	2025883a 	mov	r18,r4
   29e9c:	2827883a 	mov	r19,r5
   29ea0:	3021883a 	mov	r16,r6
   29ea4:	20000226 	beq	r4,zero,29eb0 <__swbuf_r+0x30>
   29ea8:	20800e17 	ldw	r2,56(r4)
   29eac:	10004226 	beq	r2,zero,29fb8 <__swbuf_r+0x138>
   29eb0:	80800617 	ldw	r2,24(r16)
   29eb4:	8100030b 	ldhu	r4,12(r16)
   29eb8:	80800215 	stw	r2,8(r16)
   29ebc:	2080020c 	andi	r2,r4,8
   29ec0:	10003626 	beq	r2,zero,29f9c <__swbuf_r+0x11c>
   29ec4:	80c00417 	ldw	r3,16(r16)
   29ec8:	18003426 	beq	r3,zero,29f9c <__swbuf_r+0x11c>
   29ecc:	2088000c 	andi	r2,r4,8192
   29ed0:	9c403fcc 	andi	r17,r19,255
   29ed4:	10001a26 	beq	r2,zero,29f40 <__swbuf_r+0xc0>
   29ed8:	80800017 	ldw	r2,0(r16)
   29edc:	81000517 	ldw	r4,20(r16)
   29ee0:	10c7c83a 	sub	r3,r2,r3
   29ee4:	1900200e 	bge	r3,r4,29f68 <__swbuf_r+0xe8>
   29ee8:	18c00044 	addi	r3,r3,1
   29eec:	81000217 	ldw	r4,8(r16)
   29ef0:	11400044 	addi	r5,r2,1
   29ef4:	81400015 	stw	r5,0(r16)
   29ef8:	213fffc4 	addi	r4,r4,-1
   29efc:	81000215 	stw	r4,8(r16)
   29f00:	14c00005 	stb	r19,0(r2)
   29f04:	80800517 	ldw	r2,20(r16)
   29f08:	10c01e26 	beq	r2,r3,29f84 <__swbuf_r+0x104>
   29f0c:	8080030b 	ldhu	r2,12(r16)
   29f10:	1080004c 	andi	r2,r2,1
   29f14:	10000226 	beq	r2,zero,29f20 <__swbuf_r+0xa0>
   29f18:	00800284 	movi	r2,10
   29f1c:	88801926 	beq	r17,r2,29f84 <__swbuf_r+0x104>
   29f20:	8805883a 	mov	r2,r17
   29f24:	dfc00417 	ldw	ra,16(sp)
   29f28:	dcc00317 	ldw	r19,12(sp)
   29f2c:	dc800217 	ldw	r18,8(sp)
   29f30:	dc400117 	ldw	r17,4(sp)
   29f34:	dc000017 	ldw	r16,0(sp)
   29f38:	dec00504 	addi	sp,sp,20
   29f3c:	f800283a 	ret
   29f40:	81401917 	ldw	r5,100(r16)
   29f44:	00b7ffc4 	movi	r2,-8193
   29f48:	21080014 	ori	r4,r4,8192
   29f4c:	2884703a 	and	r2,r5,r2
   29f50:	80801915 	stw	r2,100(r16)
   29f54:	80800017 	ldw	r2,0(r16)
   29f58:	8100030d 	sth	r4,12(r16)
   29f5c:	81000517 	ldw	r4,20(r16)
   29f60:	10c7c83a 	sub	r3,r2,r3
   29f64:	193fe016 	blt	r3,r4,29ee8 <_gp+0xfffeed84>
   29f68:	800b883a 	mov	r5,r16
   29f6c:	9009883a 	mov	r4,r18
   29f70:	0024a6c0 	call	24a6c <_fflush_r>
   29f74:	1000071e 	bne	r2,zero,29f94 <__swbuf_r+0x114>
   29f78:	80800017 	ldw	r2,0(r16)
   29f7c:	00c00044 	movi	r3,1
   29f80:	003fda06 	br	29eec <_gp+0xfffeed88>
   29f84:	800b883a 	mov	r5,r16
   29f88:	9009883a 	mov	r4,r18
   29f8c:	0024a6c0 	call	24a6c <_fflush_r>
   29f90:	103fe326 	beq	r2,zero,29f20 <_gp+0xfffeedbc>
   29f94:	00bfffc4 	movi	r2,-1
   29f98:	003fe206 	br	29f24 <_gp+0xfffeedc0>
   29f9c:	800b883a 	mov	r5,r16
   29fa0:	9009883a 	mov	r4,r18
   29fa4:	0022e4c0 	call	22e4c <__swsetup_r>
   29fa8:	103ffa1e 	bne	r2,zero,29f94 <_gp+0xfffeee30>
   29fac:	8100030b 	ldhu	r4,12(r16)
   29fb0:	80c00417 	ldw	r3,16(r16)
   29fb4:	003fc506 	br	29ecc <_gp+0xfffeed68>
   29fb8:	0024e580 	call	24e58 <__sinit>
   29fbc:	003fbc06 	br	29eb0 <_gp+0xfffeed4c>

00029fc0 <__swbuf>:
   29fc0:	008000f4 	movhi	r2,3
   29fc4:	108c5a04 	addi	r2,r2,12648
   29fc8:	280d883a 	mov	r6,r5
   29fcc:	200b883a 	mov	r5,r4
   29fd0:	11000017 	ldw	r4,0(r2)
   29fd4:	0029e801 	jmpi	29e80 <__swbuf_r>

00029fd8 <_wcrtomb_r>:
   29fd8:	defff604 	addi	sp,sp,-40
   29fdc:	008000f4 	movhi	r2,3
   29fe0:	dc800815 	stw	r18,32(sp)
   29fe4:	dc400715 	stw	r17,28(sp)
   29fe8:	dc000615 	stw	r16,24(sp)
   29fec:	108c5e04 	addi	r2,r2,12664
   29ff0:	dfc00915 	stw	ra,36(sp)
   29ff4:	2021883a 	mov	r16,r4
   29ff8:	3823883a 	mov	r17,r7
   29ffc:	14800017 	ldw	r18,0(r2)
   2a000:	28001426 	beq	r5,zero,2a054 <_wcrtomb_r+0x7c>
   2a004:	d9400415 	stw	r5,16(sp)
   2a008:	d9800515 	stw	r6,20(sp)
   2a00c:	00259a80 	call	259a8 <__locale_charset>
   2a010:	d9800517 	ldw	r6,20(sp)
   2a014:	d9400417 	ldw	r5,16(sp)
   2a018:	100f883a 	mov	r7,r2
   2a01c:	dc400015 	stw	r17,0(sp)
   2a020:	8009883a 	mov	r4,r16
   2a024:	903ee83a 	callr	r18
   2a028:	00ffffc4 	movi	r3,-1
   2a02c:	10c0031e 	bne	r2,r3,2a03c <_wcrtomb_r+0x64>
   2a030:	88000015 	stw	zero,0(r17)
   2a034:	00c02284 	movi	r3,138
   2a038:	80c00015 	stw	r3,0(r16)
   2a03c:	dfc00917 	ldw	ra,36(sp)
   2a040:	dc800817 	ldw	r18,32(sp)
   2a044:	dc400717 	ldw	r17,28(sp)
   2a048:	dc000617 	ldw	r16,24(sp)
   2a04c:	dec00a04 	addi	sp,sp,40
   2a050:	f800283a 	ret
   2a054:	00259a80 	call	259a8 <__locale_charset>
   2a058:	100f883a 	mov	r7,r2
   2a05c:	dc400015 	stw	r17,0(sp)
   2a060:	000d883a 	mov	r6,zero
   2a064:	d9400104 	addi	r5,sp,4
   2a068:	8009883a 	mov	r4,r16
   2a06c:	903ee83a 	callr	r18
   2a070:	003fed06 	br	2a028 <_gp+0xfffeeec4>

0002a074 <wcrtomb>:
   2a074:	defff604 	addi	sp,sp,-40
   2a078:	008000f4 	movhi	r2,3
   2a07c:	dc800615 	stw	r18,24(sp)
   2a080:	dc400515 	stw	r17,20(sp)
   2a084:	108c5a04 	addi	r2,r2,12648
   2a088:	dfc00915 	stw	ra,36(sp)
   2a08c:	dd000815 	stw	r20,32(sp)
   2a090:	dcc00715 	stw	r19,28(sp)
   2a094:	dc000415 	stw	r16,16(sp)
   2a098:	3025883a 	mov	r18,r6
   2a09c:	14400017 	ldw	r17,0(r2)
   2a0a0:	20001926 	beq	r4,zero,2a108 <wcrtomb+0x94>
   2a0a4:	008000f4 	movhi	r2,3
   2a0a8:	108c5e04 	addi	r2,r2,12664
   2a0ac:	15000017 	ldw	r20,0(r2)
   2a0b0:	2021883a 	mov	r16,r4
   2a0b4:	2827883a 	mov	r19,r5
   2a0b8:	00259a80 	call	259a8 <__locale_charset>
   2a0bc:	100f883a 	mov	r7,r2
   2a0c0:	dc800015 	stw	r18,0(sp)
   2a0c4:	980d883a 	mov	r6,r19
   2a0c8:	800b883a 	mov	r5,r16
   2a0cc:	8809883a 	mov	r4,r17
   2a0d0:	a03ee83a 	callr	r20
   2a0d4:	00ffffc4 	movi	r3,-1
   2a0d8:	10c0031e 	bne	r2,r3,2a0e8 <wcrtomb+0x74>
   2a0dc:	90000015 	stw	zero,0(r18)
   2a0e0:	00c02284 	movi	r3,138
   2a0e4:	88c00015 	stw	r3,0(r17)
   2a0e8:	dfc00917 	ldw	ra,36(sp)
   2a0ec:	dd000817 	ldw	r20,32(sp)
   2a0f0:	dcc00717 	ldw	r19,28(sp)
   2a0f4:	dc800617 	ldw	r18,24(sp)
   2a0f8:	dc400517 	ldw	r17,20(sp)
   2a0fc:	dc000417 	ldw	r16,16(sp)
   2a100:	dec00a04 	addi	sp,sp,40
   2a104:	f800283a 	ret
   2a108:	008000f4 	movhi	r2,3
   2a10c:	108c5e04 	addi	r2,r2,12664
   2a110:	14000017 	ldw	r16,0(r2)
   2a114:	00259a80 	call	259a8 <__locale_charset>
   2a118:	100f883a 	mov	r7,r2
   2a11c:	dc800015 	stw	r18,0(sp)
   2a120:	000d883a 	mov	r6,zero
   2a124:	d9400104 	addi	r5,sp,4
   2a128:	8809883a 	mov	r4,r17
   2a12c:	803ee83a 	callr	r16
   2a130:	003fe806 	br	2a0d4 <_gp+0xfffeef70>

0002a134 <__ascii_wctomb>:
   2a134:	28000526 	beq	r5,zero,2a14c <__ascii_wctomb+0x18>
   2a138:	00803fc4 	movi	r2,255
   2a13c:	11800536 	bltu	r2,r6,2a154 <__ascii_wctomb+0x20>
   2a140:	29800005 	stb	r6,0(r5)
   2a144:	00800044 	movi	r2,1
   2a148:	f800283a 	ret
   2a14c:	0005883a 	mov	r2,zero
   2a150:	f800283a 	ret
   2a154:	00802284 	movi	r2,138
   2a158:	20800015 	stw	r2,0(r4)
   2a15c:	00bfffc4 	movi	r2,-1
   2a160:	f800283a 	ret

0002a164 <_wctomb_r>:
   2a164:	008000f4 	movhi	r2,3
   2a168:	defff904 	addi	sp,sp,-28
   2a16c:	108c5e04 	addi	r2,r2,12664
   2a170:	dfc00615 	stw	ra,24(sp)
   2a174:	dc400515 	stw	r17,20(sp)
   2a178:	dc000415 	stw	r16,16(sp)
   2a17c:	3823883a 	mov	r17,r7
   2a180:	14000017 	ldw	r16,0(r2)
   2a184:	d9000115 	stw	r4,4(sp)
   2a188:	d9400215 	stw	r5,8(sp)
   2a18c:	d9800315 	stw	r6,12(sp)
   2a190:	00259a80 	call	259a8 <__locale_charset>
   2a194:	d9800317 	ldw	r6,12(sp)
   2a198:	d9400217 	ldw	r5,8(sp)
   2a19c:	d9000117 	ldw	r4,4(sp)
   2a1a0:	100f883a 	mov	r7,r2
   2a1a4:	dc400015 	stw	r17,0(sp)
   2a1a8:	803ee83a 	callr	r16
   2a1ac:	dfc00617 	ldw	ra,24(sp)
   2a1b0:	dc400517 	ldw	r17,20(sp)
   2a1b4:	dc000417 	ldw	r16,16(sp)
   2a1b8:	dec00704 	addi	sp,sp,28
   2a1bc:	f800283a 	ret

0002a1c0 <__udivdi3>:
   2a1c0:	defff404 	addi	sp,sp,-48
   2a1c4:	dcc00515 	stw	r19,20(sp)
   2a1c8:	dc000215 	stw	r16,8(sp)
   2a1cc:	dfc00b15 	stw	ra,44(sp)
   2a1d0:	df000a15 	stw	fp,40(sp)
   2a1d4:	ddc00915 	stw	r23,36(sp)
   2a1d8:	dd800815 	stw	r22,32(sp)
   2a1dc:	dd400715 	stw	r21,28(sp)
   2a1e0:	dd000615 	stw	r20,24(sp)
   2a1e4:	dc800415 	stw	r18,16(sp)
   2a1e8:	dc400315 	stw	r17,12(sp)
   2a1ec:	2027883a 	mov	r19,r4
   2a1f0:	2821883a 	mov	r16,r5
   2a1f4:	3800461e 	bne	r7,zero,2a310 <__udivdi3+0x150>
   2a1f8:	3023883a 	mov	r17,r6
   2a1fc:	2025883a 	mov	r18,r4
   2a200:	2980572e 	bgeu	r5,r6,2a360 <__udivdi3+0x1a0>
   2a204:	00bfffd4 	movui	r2,65535
   2a208:	282d883a 	mov	r22,r5
   2a20c:	1180b236 	bltu	r2,r6,2a4d8 <__udivdi3+0x318>
   2a210:	00803fc4 	movi	r2,255
   2a214:	1185803a 	cmpltu	r2,r2,r6
   2a218:	100490fa 	slli	r2,r2,3
   2a21c:	3086d83a 	srl	r3,r6,r2
   2a220:	010000f4 	movhi	r4,3
   2a224:	21047804 	addi	r4,r4,4576
   2a228:	20c7883a 	add	r3,r4,r3
   2a22c:	18c00003 	ldbu	r3,0(r3)
   2a230:	1885883a 	add	r2,r3,r2
   2a234:	00c00804 	movi	r3,32
   2a238:	1887c83a 	sub	r3,r3,r2
   2a23c:	18000526 	beq	r3,zero,2a254 <__udivdi3+0x94>
   2a240:	80e0983a 	sll	r16,r16,r3
   2a244:	9884d83a 	srl	r2,r19,r2
   2a248:	30e2983a 	sll	r17,r6,r3
   2a24c:	98e4983a 	sll	r18,r19,r3
   2a250:	142cb03a 	or	r22,r2,r16
   2a254:	882ad43a 	srli	r21,r17,16
   2a258:	b009883a 	mov	r4,r22
   2a25c:	8d3fffcc 	andi	r20,r17,65535
   2a260:	a80b883a 	mov	r5,r21
   2a264:	002aedc0 	call	2aedc <__umodsi3>
   2a268:	b009883a 	mov	r4,r22
   2a26c:	a80b883a 	mov	r5,r21
   2a270:	1027883a 	mov	r19,r2
   2a274:	002ae780 	call	2ae78 <__udivsi3>
   2a278:	100b883a 	mov	r5,r2
   2a27c:	a009883a 	mov	r4,r20
   2a280:	102d883a 	mov	r22,r2
   2a284:	00208980 	call	20898 <__mulsi3>
   2a288:	9826943a 	slli	r19,r19,16
   2a28c:	9006d43a 	srli	r3,r18,16
   2a290:	1cc6b03a 	or	r3,r3,r19
   2a294:	1880052e 	bgeu	r3,r2,2a2ac <__udivdi3+0xec>
   2a298:	1c47883a 	add	r3,r3,r17
   2a29c:	b13fffc4 	addi	r4,r22,-1
   2a2a0:	1c400136 	bltu	r3,r17,2a2a8 <__udivdi3+0xe8>
   2a2a4:	18814236 	bltu	r3,r2,2a7b0 <__udivdi3+0x5f0>
   2a2a8:	202d883a 	mov	r22,r4
   2a2ac:	18a1c83a 	sub	r16,r3,r2
   2a2b0:	8009883a 	mov	r4,r16
   2a2b4:	a80b883a 	mov	r5,r21
   2a2b8:	002aedc0 	call	2aedc <__umodsi3>
   2a2bc:	1027883a 	mov	r19,r2
   2a2c0:	8009883a 	mov	r4,r16
   2a2c4:	a80b883a 	mov	r5,r21
   2a2c8:	9826943a 	slli	r19,r19,16
   2a2cc:	002ae780 	call	2ae78 <__udivsi3>
   2a2d0:	100b883a 	mov	r5,r2
   2a2d4:	a009883a 	mov	r4,r20
   2a2d8:	94bfffcc 	andi	r18,r18,65535
   2a2dc:	1021883a 	mov	r16,r2
   2a2e0:	94e4b03a 	or	r18,r18,r19
   2a2e4:	00208980 	call	20898 <__mulsi3>
   2a2e8:	9080052e 	bgeu	r18,r2,2a300 <__udivdi3+0x140>
   2a2ec:	8ca5883a 	add	r18,r17,r18
   2a2f0:	80ffffc4 	addi	r3,r16,-1
   2a2f4:	94410c36 	bltu	r18,r17,2a728 <__udivdi3+0x568>
   2a2f8:	90810b2e 	bgeu	r18,r2,2a728 <__udivdi3+0x568>
   2a2fc:	843fff84 	addi	r16,r16,-2
   2a300:	b004943a 	slli	r2,r22,16
   2a304:	0007883a 	mov	r3,zero
   2a308:	1404b03a 	or	r2,r2,r16
   2a30c:	00005e06 	br	2a488 <__udivdi3+0x2c8>
   2a310:	29c05b36 	bltu	r5,r7,2a480 <__udivdi3+0x2c0>
   2a314:	00bfffd4 	movui	r2,65535
   2a318:	11c0672e 	bgeu	r2,r7,2a4b8 <__udivdi3+0x2f8>
   2a31c:	00804034 	movhi	r2,256
   2a320:	10bfffc4 	addi	r2,r2,-1
   2a324:	11c10a36 	bltu	r2,r7,2a750 <__udivdi3+0x590>
   2a328:	00800404 	movi	r2,16
   2a32c:	3886d83a 	srl	r3,r7,r2
   2a330:	010000f4 	movhi	r4,3
   2a334:	21047804 	addi	r4,r4,4576
   2a338:	20c7883a 	add	r3,r4,r3
   2a33c:	18c00003 	ldbu	r3,0(r3)
   2a340:	05c00804 	movi	r23,32
   2a344:	1885883a 	add	r2,r3,r2
   2a348:	b8afc83a 	sub	r23,r23,r2
   2a34c:	b800671e 	bne	r23,zero,2a4ec <__udivdi3+0x32c>
   2a350:	3c010536 	bltu	r7,r16,2a768 <__udivdi3+0x5a8>
   2a354:	9985403a 	cmpgeu	r2,r19,r6
   2a358:	0007883a 	mov	r3,zero
   2a35c:	00004a06 	br	2a488 <__udivdi3+0x2c8>
   2a360:	3000041e 	bne	r6,zero,2a374 <__udivdi3+0x1b4>
   2a364:	000b883a 	mov	r5,zero
   2a368:	01000044 	movi	r4,1
   2a36c:	002ae780 	call	2ae78 <__udivsi3>
   2a370:	1023883a 	mov	r17,r2
   2a374:	00bfffd4 	movui	r2,65535
   2a378:	1440532e 	bgeu	r2,r17,2a4c8 <__udivdi3+0x308>
   2a37c:	00804034 	movhi	r2,256
   2a380:	10bfffc4 	addi	r2,r2,-1
   2a384:	1440f436 	bltu	r2,r17,2a758 <__udivdi3+0x598>
   2a388:	00800404 	movi	r2,16
   2a38c:	8886d83a 	srl	r3,r17,r2
   2a390:	010000f4 	movhi	r4,3
   2a394:	21047804 	addi	r4,r4,4576
   2a398:	20c7883a 	add	r3,r4,r3
   2a39c:	18c00003 	ldbu	r3,0(r3)
   2a3a0:	1885883a 	add	r2,r3,r2
   2a3a4:	00c00804 	movi	r3,32
   2a3a8:	1887c83a 	sub	r3,r3,r2
   2a3ac:	1800a51e 	bne	r3,zero,2a644 <__udivdi3+0x484>
   2a3b0:	882ad43a 	srli	r21,r17,16
   2a3b4:	8461c83a 	sub	r16,r16,r17
   2a3b8:	8d3fffcc 	andi	r20,r17,65535
   2a3bc:	00c00044 	movi	r3,1
   2a3c0:	a80b883a 	mov	r5,r21
   2a3c4:	8009883a 	mov	r4,r16
   2a3c8:	d8c00115 	stw	r3,4(sp)
   2a3cc:	002aedc0 	call	2aedc <__umodsi3>
   2a3d0:	a80b883a 	mov	r5,r21
   2a3d4:	8009883a 	mov	r4,r16
   2a3d8:	1027883a 	mov	r19,r2
   2a3dc:	002ae780 	call	2ae78 <__udivsi3>
   2a3e0:	a00b883a 	mov	r5,r20
   2a3e4:	1009883a 	mov	r4,r2
   2a3e8:	102d883a 	mov	r22,r2
   2a3ec:	00208980 	call	20898 <__mulsi3>
   2a3f0:	9826943a 	slli	r19,r19,16
   2a3f4:	900ed43a 	srli	r7,r18,16
   2a3f8:	d8c00117 	ldw	r3,4(sp)
   2a3fc:	3cceb03a 	or	r7,r7,r19
   2a400:	3880052e 	bgeu	r7,r2,2a418 <__udivdi3+0x258>
   2a404:	3c4f883a 	add	r7,r7,r17
   2a408:	b13fffc4 	addi	r4,r22,-1
   2a40c:	3c400136 	bltu	r7,r17,2a414 <__udivdi3+0x254>
   2a410:	3880e436 	bltu	r7,r2,2a7a4 <__udivdi3+0x5e4>
   2a414:	202d883a 	mov	r22,r4
   2a418:	38a1c83a 	sub	r16,r7,r2
   2a41c:	8009883a 	mov	r4,r16
   2a420:	a80b883a 	mov	r5,r21
   2a424:	d8c00115 	stw	r3,4(sp)
   2a428:	002aedc0 	call	2aedc <__umodsi3>
   2a42c:	1027883a 	mov	r19,r2
   2a430:	8009883a 	mov	r4,r16
   2a434:	a80b883a 	mov	r5,r21
   2a438:	9826943a 	slli	r19,r19,16
   2a43c:	002ae780 	call	2ae78 <__udivsi3>
   2a440:	a00b883a 	mov	r5,r20
   2a444:	1009883a 	mov	r4,r2
   2a448:	94bfffcc 	andi	r18,r18,65535
   2a44c:	1021883a 	mov	r16,r2
   2a450:	94e4b03a 	or	r18,r18,r19
   2a454:	00208980 	call	20898 <__mulsi3>
   2a458:	d8c00117 	ldw	r3,4(sp)
   2a45c:	9080052e 	bgeu	r18,r2,2a474 <__udivdi3+0x2b4>
   2a460:	8ca5883a 	add	r18,r17,r18
   2a464:	813fffc4 	addi	r4,r16,-1
   2a468:	9440ad36 	bltu	r18,r17,2a720 <__udivdi3+0x560>
   2a46c:	9080ac2e 	bgeu	r18,r2,2a720 <__udivdi3+0x560>
   2a470:	843fff84 	addi	r16,r16,-2
   2a474:	b004943a 	slli	r2,r22,16
   2a478:	1404b03a 	or	r2,r2,r16
   2a47c:	00000206 	br	2a488 <__udivdi3+0x2c8>
   2a480:	0007883a 	mov	r3,zero
   2a484:	0005883a 	mov	r2,zero
   2a488:	dfc00b17 	ldw	ra,44(sp)
   2a48c:	df000a17 	ldw	fp,40(sp)
   2a490:	ddc00917 	ldw	r23,36(sp)
   2a494:	dd800817 	ldw	r22,32(sp)
   2a498:	dd400717 	ldw	r21,28(sp)
   2a49c:	dd000617 	ldw	r20,24(sp)
   2a4a0:	dcc00517 	ldw	r19,20(sp)
   2a4a4:	dc800417 	ldw	r18,16(sp)
   2a4a8:	dc400317 	ldw	r17,12(sp)
   2a4ac:	dc000217 	ldw	r16,8(sp)
   2a4b0:	dec00c04 	addi	sp,sp,48
   2a4b4:	f800283a 	ret
   2a4b8:	00803fc4 	movi	r2,255
   2a4bc:	11c5803a 	cmpltu	r2,r2,r7
   2a4c0:	100490fa 	slli	r2,r2,3
   2a4c4:	003f9906 	br	2a32c <_gp+0xfffef1c8>
   2a4c8:	00803fc4 	movi	r2,255
   2a4cc:	1445803a 	cmpltu	r2,r2,r17
   2a4d0:	100490fa 	slli	r2,r2,3
   2a4d4:	003fad06 	br	2a38c <_gp+0xfffef228>
   2a4d8:	00804034 	movhi	r2,256
   2a4dc:	10bfffc4 	addi	r2,r2,-1
   2a4e0:	11809f36 	bltu	r2,r6,2a760 <__udivdi3+0x5a0>
   2a4e4:	00800404 	movi	r2,16
   2a4e8:	003f4c06 	br	2a21c <_gp+0xfffef0b8>
   2a4ec:	3dce983a 	sll	r7,r7,r23
   2a4f0:	30b8d83a 	srl	fp,r6,r2
   2a4f4:	80a2d83a 	srl	r17,r16,r2
   2a4f8:	35cc983a 	sll	r6,r6,r23
   2a4fc:	3f38b03a 	or	fp,r7,fp
   2a500:	e024d43a 	srli	r18,fp,16
   2a504:	9884d83a 	srl	r2,r19,r2
   2a508:	85e0983a 	sll	r16,r16,r23
   2a50c:	8809883a 	mov	r4,r17
   2a510:	900b883a 	mov	r5,r18
   2a514:	d9800015 	stw	r6,0(sp)
   2a518:	1420b03a 	or	r16,r2,r16
   2a51c:	002aedc0 	call	2aedc <__umodsi3>
   2a520:	900b883a 	mov	r5,r18
   2a524:	8809883a 	mov	r4,r17
   2a528:	1029883a 	mov	r20,r2
   2a52c:	e5bfffcc 	andi	r22,fp,65535
   2a530:	002ae780 	call	2ae78 <__udivsi3>
   2a534:	100b883a 	mov	r5,r2
   2a538:	b009883a 	mov	r4,r22
   2a53c:	102b883a 	mov	r21,r2
   2a540:	00208980 	call	20898 <__mulsi3>
   2a544:	a028943a 	slli	r20,r20,16
   2a548:	8006d43a 	srli	r3,r16,16
   2a54c:	1d06b03a 	or	r3,r3,r20
   2a550:	1880042e 	bgeu	r3,r2,2a564 <__udivdi3+0x3a4>
   2a554:	1f07883a 	add	r3,r3,fp
   2a558:	a93fffc4 	addi	r4,r21,-1
   2a55c:	1f00892e 	bgeu	r3,fp,2a784 <__udivdi3+0x5c4>
   2a560:	202b883a 	mov	r21,r4
   2a564:	18a3c83a 	sub	r17,r3,r2
   2a568:	8809883a 	mov	r4,r17
   2a56c:	900b883a 	mov	r5,r18
   2a570:	002aedc0 	call	2aedc <__umodsi3>
   2a574:	1029883a 	mov	r20,r2
   2a578:	8809883a 	mov	r4,r17
   2a57c:	900b883a 	mov	r5,r18
   2a580:	a028943a 	slli	r20,r20,16
   2a584:	002ae780 	call	2ae78 <__udivsi3>
   2a588:	100b883a 	mov	r5,r2
   2a58c:	b009883a 	mov	r4,r22
   2a590:	843fffcc 	andi	r16,r16,65535
   2a594:	1023883a 	mov	r17,r2
   2a598:	8520b03a 	or	r16,r16,r20
   2a59c:	00208980 	call	20898 <__mulsi3>
   2a5a0:	8080042e 	bgeu	r16,r2,2a5b4 <__udivdi3+0x3f4>
   2a5a4:	8721883a 	add	r16,r16,fp
   2a5a8:	88ffffc4 	addi	r3,r17,-1
   2a5ac:	8700712e 	bgeu	r16,fp,2a774 <__udivdi3+0x5b4>
   2a5b0:	1823883a 	mov	r17,r3
   2a5b4:	a80e943a 	slli	r7,r21,16
   2a5b8:	d8c00017 	ldw	r3,0(sp)
   2a5bc:	80a1c83a 	sub	r16,r16,r2
   2a5c0:	3c64b03a 	or	r18,r7,r17
   2a5c4:	1d3fffcc 	andi	r20,r3,65535
   2a5c8:	9022d43a 	srli	r17,r18,16
   2a5cc:	95bfffcc 	andi	r22,r18,65535
   2a5d0:	a00b883a 	mov	r5,r20
   2a5d4:	b009883a 	mov	r4,r22
   2a5d8:	182ad43a 	srli	r21,r3,16
   2a5dc:	00208980 	call	20898 <__mulsi3>
   2a5e0:	a00b883a 	mov	r5,r20
   2a5e4:	8809883a 	mov	r4,r17
   2a5e8:	1039883a 	mov	fp,r2
   2a5ec:	00208980 	call	20898 <__mulsi3>
   2a5f0:	8809883a 	mov	r4,r17
   2a5f4:	a80b883a 	mov	r5,r21
   2a5f8:	1029883a 	mov	r20,r2
   2a5fc:	00208980 	call	20898 <__mulsi3>
   2a600:	a80b883a 	mov	r5,r21
   2a604:	b009883a 	mov	r4,r22
   2a608:	1023883a 	mov	r17,r2
   2a60c:	00208980 	call	20898 <__mulsi3>
   2a610:	e006d43a 	srli	r3,fp,16
   2a614:	1505883a 	add	r2,r2,r20
   2a618:	1887883a 	add	r3,r3,r2
   2a61c:	1d00022e 	bgeu	r3,r20,2a628 <__udivdi3+0x468>
   2a620:	00800074 	movhi	r2,1
   2a624:	88a3883a 	add	r17,r17,r2
   2a628:	1804d43a 	srli	r2,r3,16
   2a62c:	1463883a 	add	r17,r2,r17
   2a630:	84404436 	bltu	r16,r17,2a744 <__udivdi3+0x584>
   2a634:	84403e26 	beq	r16,r17,2a730 <__udivdi3+0x570>
   2a638:	9005883a 	mov	r2,r18
   2a63c:	0007883a 	mov	r3,zero
   2a640:	003f9106 	br	2a488 <_gp+0xfffef324>
   2a644:	88e2983a 	sll	r17,r17,r3
   2a648:	80aed83a 	srl	r23,r16,r2
   2a64c:	80e0983a 	sll	r16,r16,r3
   2a650:	882ad43a 	srli	r21,r17,16
   2a654:	9884d83a 	srl	r2,r19,r2
   2a658:	b809883a 	mov	r4,r23
   2a65c:	a80b883a 	mov	r5,r21
   2a660:	98e4983a 	sll	r18,r19,r3
   2a664:	142cb03a 	or	r22,r2,r16
   2a668:	002aedc0 	call	2aedc <__umodsi3>
   2a66c:	b809883a 	mov	r4,r23
   2a670:	a80b883a 	mov	r5,r21
   2a674:	1027883a 	mov	r19,r2
   2a678:	8d3fffcc 	andi	r20,r17,65535
   2a67c:	002ae780 	call	2ae78 <__udivsi3>
   2a680:	a009883a 	mov	r4,r20
   2a684:	100b883a 	mov	r5,r2
   2a688:	102f883a 	mov	r23,r2
   2a68c:	00208980 	call	20898 <__mulsi3>
   2a690:	9826943a 	slli	r19,r19,16
   2a694:	b008d43a 	srli	r4,r22,16
   2a698:	24c8b03a 	or	r4,r4,r19
   2a69c:	2080062e 	bgeu	r4,r2,2a6b8 <__udivdi3+0x4f8>
   2a6a0:	2449883a 	add	r4,r4,r17
   2a6a4:	b8ffffc4 	addi	r3,r23,-1
   2a6a8:	24403c36 	bltu	r4,r17,2a79c <__udivdi3+0x5dc>
   2a6ac:	20803b2e 	bgeu	r4,r2,2a79c <__udivdi3+0x5dc>
   2a6b0:	bdffff84 	addi	r23,r23,-2
   2a6b4:	2449883a 	add	r4,r4,r17
   2a6b8:	20a1c83a 	sub	r16,r4,r2
   2a6bc:	a80b883a 	mov	r5,r21
   2a6c0:	8009883a 	mov	r4,r16
   2a6c4:	002aedc0 	call	2aedc <__umodsi3>
   2a6c8:	a80b883a 	mov	r5,r21
   2a6cc:	8009883a 	mov	r4,r16
   2a6d0:	1027883a 	mov	r19,r2
   2a6d4:	002ae780 	call	2ae78 <__udivsi3>
   2a6d8:	a009883a 	mov	r4,r20
   2a6dc:	100b883a 	mov	r5,r2
   2a6e0:	9826943a 	slli	r19,r19,16
   2a6e4:	1039883a 	mov	fp,r2
   2a6e8:	00208980 	call	20898 <__mulsi3>
   2a6ec:	b13fffcc 	andi	r4,r22,65535
   2a6f0:	24c8b03a 	or	r4,r4,r19
   2a6f4:	2080062e 	bgeu	r4,r2,2a710 <__udivdi3+0x550>
   2a6f8:	2449883a 	add	r4,r4,r17
   2a6fc:	e0ffffc4 	addi	r3,fp,-1
   2a700:	24402436 	bltu	r4,r17,2a794 <__udivdi3+0x5d4>
   2a704:	2080232e 	bgeu	r4,r2,2a794 <__udivdi3+0x5d4>
   2a708:	e73fff84 	addi	fp,fp,-2
   2a70c:	2449883a 	add	r4,r4,r17
   2a710:	b82e943a 	slli	r23,r23,16
   2a714:	20a1c83a 	sub	r16,r4,r2
   2a718:	bf06b03a 	or	r3,r23,fp
   2a71c:	003f2806 	br	2a3c0 <_gp+0xfffef25c>
   2a720:	2021883a 	mov	r16,r4
   2a724:	003f5306 	br	2a474 <_gp+0xfffef310>
   2a728:	1821883a 	mov	r16,r3
   2a72c:	003ef406 	br	2a300 <_gp+0xfffef19c>
   2a730:	1806943a 	slli	r3,r3,16
   2a734:	9de6983a 	sll	r19,r19,r23
   2a738:	e73fffcc 	andi	fp,fp,65535
   2a73c:	1f07883a 	add	r3,r3,fp
   2a740:	98ffbd2e 	bgeu	r19,r3,2a638 <_gp+0xfffef4d4>
   2a744:	90bfffc4 	addi	r2,r18,-1
   2a748:	0007883a 	mov	r3,zero
   2a74c:	003f4e06 	br	2a488 <_gp+0xfffef324>
   2a750:	00800604 	movi	r2,24
   2a754:	003ef506 	br	2a32c <_gp+0xfffef1c8>
   2a758:	00800604 	movi	r2,24
   2a75c:	003f0b06 	br	2a38c <_gp+0xfffef228>
   2a760:	00800604 	movi	r2,24
   2a764:	003ead06 	br	2a21c <_gp+0xfffef0b8>
   2a768:	0007883a 	mov	r3,zero
   2a76c:	00800044 	movi	r2,1
   2a770:	003f4506 	br	2a488 <_gp+0xfffef324>
   2a774:	80bf8e2e 	bgeu	r16,r2,2a5b0 <_gp+0xfffef44c>
   2a778:	8c7fff84 	addi	r17,r17,-2
   2a77c:	8721883a 	add	r16,r16,fp
   2a780:	003f8c06 	br	2a5b4 <_gp+0xfffef450>
   2a784:	18bf762e 	bgeu	r3,r2,2a560 <_gp+0xfffef3fc>
   2a788:	ad7fff84 	addi	r21,r21,-2
   2a78c:	1f07883a 	add	r3,r3,fp
   2a790:	003f7406 	br	2a564 <_gp+0xfffef400>
   2a794:	1839883a 	mov	fp,r3
   2a798:	003fdd06 	br	2a710 <_gp+0xfffef5ac>
   2a79c:	182f883a 	mov	r23,r3
   2a7a0:	003fc506 	br	2a6b8 <_gp+0xfffef554>
   2a7a4:	b5bfff84 	addi	r22,r22,-2
   2a7a8:	3c4f883a 	add	r7,r7,r17
   2a7ac:	003f1a06 	br	2a418 <_gp+0xfffef2b4>
   2a7b0:	b5bfff84 	addi	r22,r22,-2
   2a7b4:	1c47883a 	add	r3,r3,r17
   2a7b8:	003ebc06 	br	2a2ac <_gp+0xfffef148>

0002a7bc <__umoddi3>:
   2a7bc:	defff304 	addi	sp,sp,-52
   2a7c0:	df000b15 	stw	fp,44(sp)
   2a7c4:	dc400415 	stw	r17,16(sp)
   2a7c8:	dc000315 	stw	r16,12(sp)
   2a7cc:	dfc00c15 	stw	ra,48(sp)
   2a7d0:	ddc00a15 	stw	r23,40(sp)
   2a7d4:	dd800915 	stw	r22,36(sp)
   2a7d8:	dd400815 	stw	r21,32(sp)
   2a7dc:	dd000715 	stw	r20,28(sp)
   2a7e0:	dcc00615 	stw	r19,24(sp)
   2a7e4:	dc800515 	stw	r18,20(sp)
   2a7e8:	2021883a 	mov	r16,r4
   2a7ec:	2823883a 	mov	r17,r5
   2a7f0:	2839883a 	mov	fp,r5
   2a7f4:	3800401e 	bne	r7,zero,2a8f8 <__umoddi3+0x13c>
   2a7f8:	3027883a 	mov	r19,r6
   2a7fc:	2029883a 	mov	r20,r4
   2a800:	2980552e 	bgeu	r5,r6,2a958 <__umoddi3+0x19c>
   2a804:	00bfffd4 	movui	r2,65535
   2a808:	1180a236 	bltu	r2,r6,2aa94 <__umoddi3+0x2d8>
   2a80c:	01003fc4 	movi	r4,255
   2a810:	2189803a 	cmpltu	r4,r4,r6
   2a814:	200890fa 	slli	r4,r4,3
   2a818:	3104d83a 	srl	r2,r6,r4
   2a81c:	00c000f4 	movhi	r3,3
   2a820:	18c47804 	addi	r3,r3,4576
   2a824:	1885883a 	add	r2,r3,r2
   2a828:	10c00003 	ldbu	r3,0(r2)
   2a82c:	00800804 	movi	r2,32
   2a830:	1909883a 	add	r4,r3,r4
   2a834:	1125c83a 	sub	r18,r2,r4
   2a838:	90000526 	beq	r18,zero,2a850 <__umoddi3+0x94>
   2a83c:	8ca2983a 	sll	r17,r17,r18
   2a840:	8108d83a 	srl	r4,r16,r4
   2a844:	34a6983a 	sll	r19,r6,r18
   2a848:	84a8983a 	sll	r20,r16,r18
   2a84c:	2478b03a 	or	fp,r4,r17
   2a850:	982cd43a 	srli	r22,r19,16
   2a854:	e009883a 	mov	r4,fp
   2a858:	9dffffcc 	andi	r23,r19,65535
   2a85c:	b00b883a 	mov	r5,r22
   2a860:	002aedc0 	call	2aedc <__umodsi3>
   2a864:	b00b883a 	mov	r5,r22
   2a868:	e009883a 	mov	r4,fp
   2a86c:	102b883a 	mov	r21,r2
   2a870:	002ae780 	call	2ae78 <__udivsi3>
   2a874:	100b883a 	mov	r5,r2
   2a878:	b809883a 	mov	r4,r23
   2a87c:	00208980 	call	20898 <__mulsi3>
   2a880:	a82a943a 	slli	r21,r21,16
   2a884:	a006d43a 	srli	r3,r20,16
   2a888:	1d46b03a 	or	r3,r3,r21
   2a88c:	1880032e 	bgeu	r3,r2,2a89c <__umoddi3+0xe0>
   2a890:	1cc7883a 	add	r3,r3,r19
   2a894:	1cc00136 	bltu	r3,r19,2a89c <__umoddi3+0xe0>
   2a898:	18813136 	bltu	r3,r2,2ad60 <__umoddi3+0x5a4>
   2a89c:	18a1c83a 	sub	r16,r3,r2
   2a8a0:	b00b883a 	mov	r5,r22
   2a8a4:	8009883a 	mov	r4,r16
   2a8a8:	002aedc0 	call	2aedc <__umodsi3>
   2a8ac:	b00b883a 	mov	r5,r22
   2a8b0:	8009883a 	mov	r4,r16
   2a8b4:	1023883a 	mov	r17,r2
   2a8b8:	002ae780 	call	2ae78 <__udivsi3>
   2a8bc:	100b883a 	mov	r5,r2
   2a8c0:	b809883a 	mov	r4,r23
   2a8c4:	8822943a 	slli	r17,r17,16
   2a8c8:	00208980 	call	20898 <__mulsi3>
   2a8cc:	a0ffffcc 	andi	r3,r20,65535
   2a8d0:	1c46b03a 	or	r3,r3,r17
   2a8d4:	1880042e 	bgeu	r3,r2,2a8e8 <__umoddi3+0x12c>
   2a8d8:	1cc7883a 	add	r3,r3,r19
   2a8dc:	1cc00236 	bltu	r3,r19,2a8e8 <__umoddi3+0x12c>
   2a8e0:	1880012e 	bgeu	r3,r2,2a8e8 <__umoddi3+0x12c>
   2a8e4:	1cc7883a 	add	r3,r3,r19
   2a8e8:	1885c83a 	sub	r2,r3,r2
   2a8ec:	1484d83a 	srl	r2,r2,r18
   2a8f0:	0007883a 	mov	r3,zero
   2a8f4:	00005306 	br	2aa44 <__umoddi3+0x288>
   2a8f8:	29c05036 	bltu	r5,r7,2aa3c <__umoddi3+0x280>
   2a8fc:	00bfffd4 	movui	r2,65535
   2a900:	11c05c2e 	bgeu	r2,r7,2aa74 <__umoddi3+0x2b8>
   2a904:	00804034 	movhi	r2,256
   2a908:	10bfffc4 	addi	r2,r2,-1
   2a90c:	11c10636 	bltu	r2,r7,2ad28 <__umoddi3+0x56c>
   2a910:	01000404 	movi	r4,16
   2a914:	3904d83a 	srl	r2,r7,r4
   2a918:	00c000f4 	movhi	r3,3
   2a91c:	18c47804 	addi	r3,r3,4576
   2a920:	1885883a 	add	r2,r3,r2
   2a924:	14c00003 	ldbu	r19,0(r2)
   2a928:	00c00804 	movi	r3,32
   2a92c:	9927883a 	add	r19,r19,r4
   2a930:	1ce9c83a 	sub	r20,r3,r19
   2a934:	a0005c1e 	bne	r20,zero,2aaa8 <__umoddi3+0x2ec>
   2a938:	3c400136 	bltu	r7,r17,2a940 <__umoddi3+0x184>
   2a93c:	81810a36 	bltu	r16,r6,2ad68 <__umoddi3+0x5ac>
   2a940:	8185c83a 	sub	r2,r16,r6
   2a944:	89e3c83a 	sub	r17,r17,r7
   2a948:	8089803a 	cmpltu	r4,r16,r2
   2a94c:	8939c83a 	sub	fp,r17,r4
   2a950:	e007883a 	mov	r3,fp
   2a954:	00003b06 	br	2aa44 <__umoddi3+0x288>
   2a958:	3000041e 	bne	r6,zero,2a96c <__umoddi3+0x1b0>
   2a95c:	000b883a 	mov	r5,zero
   2a960:	01000044 	movi	r4,1
   2a964:	002ae780 	call	2ae78 <__udivsi3>
   2a968:	1027883a 	mov	r19,r2
   2a96c:	00bfffd4 	movui	r2,65535
   2a970:	14c0442e 	bgeu	r2,r19,2aa84 <__umoddi3+0x2c8>
   2a974:	00804034 	movhi	r2,256
   2a978:	10bfffc4 	addi	r2,r2,-1
   2a97c:	14c0ec36 	bltu	r2,r19,2ad30 <__umoddi3+0x574>
   2a980:	00800404 	movi	r2,16
   2a984:	9886d83a 	srl	r3,r19,r2
   2a988:	010000f4 	movhi	r4,3
   2a98c:	21047804 	addi	r4,r4,4576
   2a990:	20c7883a 	add	r3,r4,r3
   2a994:	18c00003 	ldbu	r3,0(r3)
   2a998:	1887883a 	add	r3,r3,r2
   2a99c:	00800804 	movi	r2,32
   2a9a0:	10e5c83a 	sub	r18,r2,r3
   2a9a4:	9000ab1e 	bne	r18,zero,2ac54 <__umoddi3+0x498>
   2a9a8:	982cd43a 	srli	r22,r19,16
   2a9ac:	8ce3c83a 	sub	r17,r17,r19
   2a9b0:	9dffffcc 	andi	r23,r19,65535
   2a9b4:	b00b883a 	mov	r5,r22
   2a9b8:	8809883a 	mov	r4,r17
   2a9bc:	002aedc0 	call	2aedc <__umodsi3>
   2a9c0:	b00b883a 	mov	r5,r22
   2a9c4:	8809883a 	mov	r4,r17
   2a9c8:	102b883a 	mov	r21,r2
   2a9cc:	002ae780 	call	2ae78 <__udivsi3>
   2a9d0:	b80b883a 	mov	r5,r23
   2a9d4:	1009883a 	mov	r4,r2
   2a9d8:	00208980 	call	20898 <__mulsi3>
   2a9dc:	a82a943a 	slli	r21,r21,16
   2a9e0:	a006d43a 	srli	r3,r20,16
   2a9e4:	1d46b03a 	or	r3,r3,r21
   2a9e8:	1880042e 	bgeu	r3,r2,2a9fc <__umoddi3+0x240>
   2a9ec:	1cc7883a 	add	r3,r3,r19
   2a9f0:	1cc00236 	bltu	r3,r19,2a9fc <__umoddi3+0x240>
   2a9f4:	1880012e 	bgeu	r3,r2,2a9fc <__umoddi3+0x240>
   2a9f8:	1cc7883a 	add	r3,r3,r19
   2a9fc:	18a1c83a 	sub	r16,r3,r2
   2aa00:	b00b883a 	mov	r5,r22
   2aa04:	8009883a 	mov	r4,r16
   2aa08:	002aedc0 	call	2aedc <__umodsi3>
   2aa0c:	1023883a 	mov	r17,r2
   2aa10:	b00b883a 	mov	r5,r22
   2aa14:	8009883a 	mov	r4,r16
   2aa18:	002ae780 	call	2ae78 <__udivsi3>
   2aa1c:	8822943a 	slli	r17,r17,16
   2aa20:	b80b883a 	mov	r5,r23
   2aa24:	1009883a 	mov	r4,r2
   2aa28:	00208980 	call	20898 <__mulsi3>
   2aa2c:	a53fffcc 	andi	r20,r20,65535
   2aa30:	a446b03a 	or	r3,r20,r17
   2aa34:	18bfac2e 	bgeu	r3,r2,2a8e8 <_gp+0xfffef784>
   2aa38:	003fa706 	br	2a8d8 <_gp+0xfffef774>
   2aa3c:	2005883a 	mov	r2,r4
   2aa40:	2807883a 	mov	r3,r5
   2aa44:	dfc00c17 	ldw	ra,48(sp)
   2aa48:	df000b17 	ldw	fp,44(sp)
   2aa4c:	ddc00a17 	ldw	r23,40(sp)
   2aa50:	dd800917 	ldw	r22,36(sp)
   2aa54:	dd400817 	ldw	r21,32(sp)
   2aa58:	dd000717 	ldw	r20,28(sp)
   2aa5c:	dcc00617 	ldw	r19,24(sp)
   2aa60:	dc800517 	ldw	r18,20(sp)
   2aa64:	dc400417 	ldw	r17,16(sp)
   2aa68:	dc000317 	ldw	r16,12(sp)
   2aa6c:	dec00d04 	addi	sp,sp,52
   2aa70:	f800283a 	ret
   2aa74:	04c03fc4 	movi	r19,255
   2aa78:	99c9803a 	cmpltu	r4,r19,r7
   2aa7c:	200890fa 	slli	r4,r4,3
   2aa80:	003fa406 	br	2a914 <_gp+0xfffef7b0>
   2aa84:	00803fc4 	movi	r2,255
   2aa88:	14c5803a 	cmpltu	r2,r2,r19
   2aa8c:	100490fa 	slli	r2,r2,3
   2aa90:	003fbc06 	br	2a984 <_gp+0xfffef820>
   2aa94:	00804034 	movhi	r2,256
   2aa98:	10bfffc4 	addi	r2,r2,-1
   2aa9c:	1180a636 	bltu	r2,r6,2ad38 <__umoddi3+0x57c>
   2aaa0:	01000404 	movi	r4,16
   2aaa4:	003f5c06 	br	2a818 <_gp+0xfffef6b4>
   2aaa8:	3d0e983a 	sll	r7,r7,r20
   2aaac:	34ead83a 	srl	r21,r6,r19
   2aab0:	8cc6d83a 	srl	r3,r17,r19
   2aab4:	8d10983a 	sll	r8,r17,r20
   2aab8:	3d6ab03a 	or	r21,r7,r21
   2aabc:	a82cd43a 	srli	r22,r21,16
   2aac0:	84e2d83a 	srl	r17,r16,r19
   2aac4:	1809883a 	mov	r4,r3
   2aac8:	b00b883a 	mov	r5,r22
   2aacc:	8a22b03a 	or	r17,r17,r8
   2aad0:	3524983a 	sll	r18,r6,r20
   2aad4:	dc400015 	stw	r17,0(sp)
   2aad8:	d8c00115 	stw	r3,4(sp)
   2aadc:	002aedc0 	call	2aedc <__umodsi3>
   2aae0:	d8c00117 	ldw	r3,4(sp)
   2aae4:	b00b883a 	mov	r5,r22
   2aae8:	1039883a 	mov	fp,r2
   2aaec:	1809883a 	mov	r4,r3
   2aaf0:	002ae780 	call	2ae78 <__udivsi3>
   2aaf4:	adffffcc 	andi	r23,r21,65535
   2aaf8:	100b883a 	mov	r5,r2
   2aafc:	b809883a 	mov	r4,r23
   2ab00:	1023883a 	mov	r17,r2
   2ab04:	00208980 	call	20898 <__mulsi3>
   2ab08:	d9400017 	ldw	r5,0(sp)
   2ab0c:	e008943a 	slli	r4,fp,16
   2ab10:	8520983a 	sll	r16,r16,r20
   2ab14:	2806d43a 	srli	r3,r5,16
   2ab18:	1906b03a 	or	r3,r3,r4
   2ab1c:	1880042e 	bgeu	r3,r2,2ab30 <__umoddi3+0x374>
   2ab20:	1d47883a 	add	r3,r3,r21
   2ab24:	893fffc4 	addi	r4,r17,-1
   2ab28:	1d40892e 	bgeu	r3,r21,2ad50 <__umoddi3+0x594>
   2ab2c:	2023883a 	mov	r17,r4
   2ab30:	18b9c83a 	sub	fp,r3,r2
   2ab34:	b00b883a 	mov	r5,r22
   2ab38:	e009883a 	mov	r4,fp
   2ab3c:	002aedc0 	call	2aedc <__umodsi3>
   2ab40:	b00b883a 	mov	r5,r22
   2ab44:	e009883a 	mov	r4,fp
   2ab48:	d8800215 	stw	r2,8(sp)
   2ab4c:	002ae780 	call	2ae78 <__udivsi3>
   2ab50:	100b883a 	mov	r5,r2
   2ab54:	b809883a 	mov	r4,r23
   2ab58:	102d883a 	mov	r22,r2
   2ab5c:	00208980 	call	20898 <__mulsi3>
   2ab60:	d9800217 	ldw	r6,8(sp)
   2ab64:	d8c00017 	ldw	r3,0(sp)
   2ab68:	300c943a 	slli	r6,r6,16
   2ab6c:	1a3fffcc 	andi	r8,r3,65535
   2ab70:	4190b03a 	or	r8,r8,r6
   2ab74:	4080042e 	bgeu	r8,r2,2ab88 <__umoddi3+0x3cc>
   2ab78:	4551883a 	add	r8,r8,r21
   2ab7c:	b0ffffc4 	addi	r3,r22,-1
   2ab80:	45406f2e 	bgeu	r8,r21,2ad40 <__umoddi3+0x584>
   2ab84:	182d883a 	mov	r22,r3
   2ab88:	880e943a 	slli	r7,r17,16
   2ab8c:	9006d43a 	srli	r3,r18,16
   2ab90:	91bfffcc 	andi	r6,r18,65535
   2ab94:	3dacb03a 	or	r22,r7,r22
   2ab98:	b02ed43a 	srli	r23,r22,16
   2ab9c:	b5bfffcc 	andi	r22,r22,65535
   2aba0:	300b883a 	mov	r5,r6
   2aba4:	b009883a 	mov	r4,r22
   2aba8:	40a3c83a 	sub	r17,r8,r2
   2abac:	d8c00115 	stw	r3,4(sp)
   2abb0:	d9800215 	stw	r6,8(sp)
   2abb4:	00208980 	call	20898 <__mulsi3>
   2abb8:	d9800217 	ldw	r6,8(sp)
   2abbc:	b809883a 	mov	r4,r23
   2abc0:	1039883a 	mov	fp,r2
   2abc4:	300b883a 	mov	r5,r6
   2abc8:	00208980 	call	20898 <__mulsi3>
   2abcc:	d8c00117 	ldw	r3,4(sp)
   2abd0:	b809883a 	mov	r4,r23
   2abd4:	d8800215 	stw	r2,8(sp)
   2abd8:	180b883a 	mov	r5,r3
   2abdc:	00208980 	call	20898 <__mulsi3>
   2abe0:	d8c00117 	ldw	r3,4(sp)
   2abe4:	b009883a 	mov	r4,r22
   2abe8:	102f883a 	mov	r23,r2
   2abec:	180b883a 	mov	r5,r3
   2abf0:	00208980 	call	20898 <__mulsi3>
   2abf4:	d9800217 	ldw	r6,8(sp)
   2abf8:	e006d43a 	srli	r3,fp,16
   2abfc:	1185883a 	add	r2,r2,r6
   2ac00:	1885883a 	add	r2,r3,r2
   2ac04:	1180022e 	bgeu	r2,r6,2ac10 <__umoddi3+0x454>
   2ac08:	00c00074 	movhi	r3,1
   2ac0c:	b8ef883a 	add	r23,r23,r3
   2ac10:	1006d43a 	srli	r3,r2,16
   2ac14:	1004943a 	slli	r2,r2,16
   2ac18:	e73fffcc 	andi	fp,fp,65535
   2ac1c:	1dc7883a 	add	r3,r3,r23
   2ac20:	1739883a 	add	fp,r2,fp
   2ac24:	88c03a36 	bltu	r17,r3,2ad10 <__umoddi3+0x554>
   2ac28:	88c05126 	beq	r17,r3,2ad70 <__umoddi3+0x5b4>
   2ac2c:	88c9c83a 	sub	r4,r17,r3
   2ac30:	e00f883a 	mov	r7,fp
   2ac34:	81cfc83a 	sub	r7,r16,r7
   2ac38:	81c7803a 	cmpltu	r3,r16,r7
   2ac3c:	20c7c83a 	sub	r3,r4,r3
   2ac40:	1cc4983a 	sll	r2,r3,r19
   2ac44:	3d0ed83a 	srl	r7,r7,r20
   2ac48:	1d06d83a 	srl	r3,r3,r20
   2ac4c:	11c4b03a 	or	r2,r2,r7
   2ac50:	003f7c06 	br	2aa44 <_gp+0xfffef8e0>
   2ac54:	9ca6983a 	sll	r19,r19,r18
   2ac58:	88f8d83a 	srl	fp,r17,r3
   2ac5c:	80c4d83a 	srl	r2,r16,r3
   2ac60:	982cd43a 	srli	r22,r19,16
   2ac64:	8ca2983a 	sll	r17,r17,r18
   2ac68:	e009883a 	mov	r4,fp
   2ac6c:	b00b883a 	mov	r5,r22
   2ac70:	146ab03a 	or	r21,r2,r17
   2ac74:	002aedc0 	call	2aedc <__umodsi3>
   2ac78:	b00b883a 	mov	r5,r22
   2ac7c:	e009883a 	mov	r4,fp
   2ac80:	1029883a 	mov	r20,r2
   2ac84:	9dffffcc 	andi	r23,r19,65535
   2ac88:	002ae780 	call	2ae78 <__udivsi3>
   2ac8c:	b809883a 	mov	r4,r23
   2ac90:	100b883a 	mov	r5,r2
   2ac94:	00208980 	call	20898 <__mulsi3>
   2ac98:	a008943a 	slli	r4,r20,16
   2ac9c:	a806d43a 	srli	r3,r21,16
   2aca0:	84a8983a 	sll	r20,r16,r18
   2aca4:	1906b03a 	or	r3,r3,r4
   2aca8:	1880042e 	bgeu	r3,r2,2acbc <__umoddi3+0x500>
   2acac:	1cc7883a 	add	r3,r3,r19
   2acb0:	1cc00236 	bltu	r3,r19,2acbc <__umoddi3+0x500>
   2acb4:	1880012e 	bgeu	r3,r2,2acbc <__umoddi3+0x500>
   2acb8:	1cc7883a 	add	r3,r3,r19
   2acbc:	18a3c83a 	sub	r17,r3,r2
   2acc0:	b00b883a 	mov	r5,r22
   2acc4:	8809883a 	mov	r4,r17
   2acc8:	002aedc0 	call	2aedc <__umodsi3>
   2accc:	b00b883a 	mov	r5,r22
   2acd0:	8809883a 	mov	r4,r17
   2acd4:	1021883a 	mov	r16,r2
   2acd8:	002ae780 	call	2ae78 <__udivsi3>
   2acdc:	100b883a 	mov	r5,r2
   2ace0:	b809883a 	mov	r4,r23
   2ace4:	8020943a 	slli	r16,r16,16
   2ace8:	00208980 	call	20898 <__mulsi3>
   2acec:	a8ffffcc 	andi	r3,r21,65535
   2acf0:	1c06b03a 	or	r3,r3,r16
   2acf4:	1880042e 	bgeu	r3,r2,2ad08 <__umoddi3+0x54c>
   2acf8:	1cc7883a 	add	r3,r3,r19
   2acfc:	1cc00236 	bltu	r3,r19,2ad08 <__umoddi3+0x54c>
   2ad00:	1880012e 	bgeu	r3,r2,2ad08 <__umoddi3+0x54c>
   2ad04:	1cc7883a 	add	r3,r3,r19
   2ad08:	18a3c83a 	sub	r17,r3,r2
   2ad0c:	003f2906 	br	2a9b4 <_gp+0xfffef850>
   2ad10:	e48fc83a 	sub	r7,fp,r18
   2ad14:	1d49c83a 	sub	r4,r3,r21
   2ad18:	e1f9803a 	cmpltu	fp,fp,r7
   2ad1c:	2739c83a 	sub	fp,r4,fp
   2ad20:	8f09c83a 	sub	r4,r17,fp
   2ad24:	003fc306 	br	2ac34 <_gp+0xfffefad0>
   2ad28:	01000604 	movi	r4,24
   2ad2c:	003ef906 	br	2a914 <_gp+0xfffef7b0>
   2ad30:	00800604 	movi	r2,24
   2ad34:	003f1306 	br	2a984 <_gp+0xfffef820>
   2ad38:	01000604 	movi	r4,24
   2ad3c:	003eb606 	br	2a818 <_gp+0xfffef6b4>
   2ad40:	40bf902e 	bgeu	r8,r2,2ab84 <_gp+0xfffefa20>
   2ad44:	b5bfff84 	addi	r22,r22,-2
   2ad48:	4551883a 	add	r8,r8,r21
   2ad4c:	003f8e06 	br	2ab88 <_gp+0xfffefa24>
   2ad50:	18bf762e 	bgeu	r3,r2,2ab2c <_gp+0xfffef9c8>
   2ad54:	8c7fff84 	addi	r17,r17,-2
   2ad58:	1d47883a 	add	r3,r3,r21
   2ad5c:	003f7406 	br	2ab30 <_gp+0xfffef9cc>
   2ad60:	1cc7883a 	add	r3,r3,r19
   2ad64:	003ecd06 	br	2a89c <_gp+0xfffef738>
   2ad68:	8005883a 	mov	r2,r16
   2ad6c:	003ef806 	br	2a950 <_gp+0xfffef7ec>
   2ad70:	873fe736 	bltu	r16,fp,2ad10 <_gp+0xfffefbac>
   2ad74:	e00f883a 	mov	r7,fp
   2ad78:	0009883a 	mov	r4,zero
   2ad7c:	003fad06 	br	2ac34 <_gp+0xfffefad0>

0002ad80 <__divsi3>:
   2ad80:	20001b16 	blt	r4,zero,2adf0 <__divsi3+0x70>
   2ad84:	000f883a 	mov	r7,zero
   2ad88:	28001616 	blt	r5,zero,2ade4 <__divsi3+0x64>
   2ad8c:	200d883a 	mov	r6,r4
   2ad90:	29001a2e 	bgeu	r5,r4,2adfc <__divsi3+0x7c>
   2ad94:	00800804 	movi	r2,32
   2ad98:	00c00044 	movi	r3,1
   2ad9c:	00000106 	br	2ada4 <__divsi3+0x24>
   2ada0:	10000d26 	beq	r2,zero,2add8 <__divsi3+0x58>
   2ada4:	294b883a 	add	r5,r5,r5
   2ada8:	10bfffc4 	addi	r2,r2,-1
   2adac:	18c7883a 	add	r3,r3,r3
   2adb0:	293ffb36 	bltu	r5,r4,2ada0 <_gp+0xfffefc3c>
   2adb4:	0005883a 	mov	r2,zero
   2adb8:	18000726 	beq	r3,zero,2add8 <__divsi3+0x58>
   2adbc:	0005883a 	mov	r2,zero
   2adc0:	31400236 	bltu	r6,r5,2adcc <__divsi3+0x4c>
   2adc4:	314dc83a 	sub	r6,r6,r5
   2adc8:	10c4b03a 	or	r2,r2,r3
   2adcc:	1806d07a 	srli	r3,r3,1
   2add0:	280ad07a 	srli	r5,r5,1
   2add4:	183ffa1e 	bne	r3,zero,2adc0 <_gp+0xfffefc5c>
   2add8:	38000126 	beq	r7,zero,2ade0 <__divsi3+0x60>
   2addc:	0085c83a 	sub	r2,zero,r2
   2ade0:	f800283a 	ret
   2ade4:	014bc83a 	sub	r5,zero,r5
   2ade8:	39c0005c 	xori	r7,r7,1
   2adec:	003fe706 	br	2ad8c <_gp+0xfffefc28>
   2adf0:	0109c83a 	sub	r4,zero,r4
   2adf4:	01c00044 	movi	r7,1
   2adf8:	003fe306 	br	2ad88 <_gp+0xfffefc24>
   2adfc:	00c00044 	movi	r3,1
   2ae00:	003fee06 	br	2adbc <_gp+0xfffefc58>

0002ae04 <__modsi3>:
   2ae04:	20001716 	blt	r4,zero,2ae64 <__modsi3+0x60>
   2ae08:	000f883a 	mov	r7,zero
   2ae0c:	2005883a 	mov	r2,r4
   2ae10:	28001216 	blt	r5,zero,2ae5c <__modsi3+0x58>
   2ae14:	2900162e 	bgeu	r5,r4,2ae70 <__modsi3+0x6c>
   2ae18:	01800804 	movi	r6,32
   2ae1c:	00c00044 	movi	r3,1
   2ae20:	00000106 	br	2ae28 <__modsi3+0x24>
   2ae24:	30000a26 	beq	r6,zero,2ae50 <__modsi3+0x4c>
   2ae28:	294b883a 	add	r5,r5,r5
   2ae2c:	31bfffc4 	addi	r6,r6,-1
   2ae30:	18c7883a 	add	r3,r3,r3
   2ae34:	293ffb36 	bltu	r5,r4,2ae24 <_gp+0xfffefcc0>
   2ae38:	18000526 	beq	r3,zero,2ae50 <__modsi3+0x4c>
   2ae3c:	1806d07a 	srli	r3,r3,1
   2ae40:	11400136 	bltu	r2,r5,2ae48 <__modsi3+0x44>
   2ae44:	1145c83a 	sub	r2,r2,r5
   2ae48:	280ad07a 	srli	r5,r5,1
   2ae4c:	183ffb1e 	bne	r3,zero,2ae3c <_gp+0xfffefcd8>
   2ae50:	38000126 	beq	r7,zero,2ae58 <__modsi3+0x54>
   2ae54:	0085c83a 	sub	r2,zero,r2
   2ae58:	f800283a 	ret
   2ae5c:	014bc83a 	sub	r5,zero,r5
   2ae60:	003fec06 	br	2ae14 <_gp+0xfffefcb0>
   2ae64:	0109c83a 	sub	r4,zero,r4
   2ae68:	01c00044 	movi	r7,1
   2ae6c:	003fe706 	br	2ae0c <_gp+0xfffefca8>
   2ae70:	00c00044 	movi	r3,1
   2ae74:	003ff106 	br	2ae3c <_gp+0xfffefcd8>

0002ae78 <__udivsi3>:
   2ae78:	200d883a 	mov	r6,r4
   2ae7c:	2900152e 	bgeu	r5,r4,2aed4 <__udivsi3+0x5c>
   2ae80:	28001416 	blt	r5,zero,2aed4 <__udivsi3+0x5c>
   2ae84:	00800804 	movi	r2,32
   2ae88:	00c00044 	movi	r3,1
   2ae8c:	00000206 	br	2ae98 <__udivsi3+0x20>
   2ae90:	10000e26 	beq	r2,zero,2aecc <__udivsi3+0x54>
   2ae94:	28000516 	blt	r5,zero,2aeac <__udivsi3+0x34>
   2ae98:	294b883a 	add	r5,r5,r5
   2ae9c:	10bfffc4 	addi	r2,r2,-1
   2aea0:	18c7883a 	add	r3,r3,r3
   2aea4:	293ffa36 	bltu	r5,r4,2ae90 <_gp+0xfffefd2c>
   2aea8:	18000826 	beq	r3,zero,2aecc <__udivsi3+0x54>
   2aeac:	0005883a 	mov	r2,zero
   2aeb0:	31400236 	bltu	r6,r5,2aebc <__udivsi3+0x44>
   2aeb4:	314dc83a 	sub	r6,r6,r5
   2aeb8:	10c4b03a 	or	r2,r2,r3
   2aebc:	1806d07a 	srli	r3,r3,1
   2aec0:	280ad07a 	srli	r5,r5,1
   2aec4:	183ffa1e 	bne	r3,zero,2aeb0 <_gp+0xfffefd4c>
   2aec8:	f800283a 	ret
   2aecc:	0005883a 	mov	r2,zero
   2aed0:	f800283a 	ret
   2aed4:	00c00044 	movi	r3,1
   2aed8:	003ff406 	br	2aeac <_gp+0xfffefd48>

0002aedc <__umodsi3>:
   2aedc:	2005883a 	mov	r2,r4
   2aee0:	2900122e 	bgeu	r5,r4,2af2c <__umodsi3+0x50>
   2aee4:	28001116 	blt	r5,zero,2af2c <__umodsi3+0x50>
   2aee8:	01800804 	movi	r6,32
   2aeec:	00c00044 	movi	r3,1
   2aef0:	00000206 	br	2aefc <__umodsi3+0x20>
   2aef4:	30000c26 	beq	r6,zero,2af28 <__umodsi3+0x4c>
   2aef8:	28000516 	blt	r5,zero,2af10 <__umodsi3+0x34>
   2aefc:	294b883a 	add	r5,r5,r5
   2af00:	31bfffc4 	addi	r6,r6,-1
   2af04:	18c7883a 	add	r3,r3,r3
   2af08:	293ffa36 	bltu	r5,r4,2aef4 <_gp+0xfffefd90>
   2af0c:	18000626 	beq	r3,zero,2af28 <__umodsi3+0x4c>
   2af10:	1806d07a 	srli	r3,r3,1
   2af14:	11400136 	bltu	r2,r5,2af1c <__umodsi3+0x40>
   2af18:	1145c83a 	sub	r2,r2,r5
   2af1c:	280ad07a 	srli	r5,r5,1
   2af20:	183ffb1e 	bne	r3,zero,2af10 <_gp+0xfffefdac>
   2af24:	f800283a 	ret
   2af28:	f800283a 	ret
   2af2c:	00c00044 	movi	r3,1
   2af30:	003ff706 	br	2af10 <_gp+0xfffefdac>

0002af34 <__adddf3>:
   2af34:	02c00434 	movhi	r11,16
   2af38:	5affffc4 	addi	r11,r11,-1
   2af3c:	2806d7fa 	srli	r3,r5,31
   2af40:	2ad4703a 	and	r10,r5,r11
   2af44:	3ad2703a 	and	r9,r7,r11
   2af48:	3804d53a 	srli	r2,r7,20
   2af4c:	3018d77a 	srli	r12,r6,29
   2af50:	280ad53a 	srli	r5,r5,20
   2af54:	501490fa 	slli	r10,r10,3
   2af58:	2010d77a 	srli	r8,r4,29
   2af5c:	481290fa 	slli	r9,r9,3
   2af60:	380ed7fa 	srli	r7,r7,31
   2af64:	defffb04 	addi	sp,sp,-20
   2af68:	dc800215 	stw	r18,8(sp)
   2af6c:	dc400115 	stw	r17,4(sp)
   2af70:	dc000015 	stw	r16,0(sp)
   2af74:	dfc00415 	stw	ra,16(sp)
   2af78:	dcc00315 	stw	r19,12(sp)
   2af7c:	1c803fcc 	andi	r18,r3,255
   2af80:	2c01ffcc 	andi	r16,r5,2047
   2af84:	5210b03a 	or	r8,r10,r8
   2af88:	202290fa 	slli	r17,r4,3
   2af8c:	1081ffcc 	andi	r2,r2,2047
   2af90:	4b12b03a 	or	r9,r9,r12
   2af94:	300c90fa 	slli	r6,r6,3
   2af98:	91c07526 	beq	r18,r7,2b170 <__adddf3+0x23c>
   2af9c:	8087c83a 	sub	r3,r16,r2
   2afa0:	00c0ab0e 	bge	zero,r3,2b250 <__adddf3+0x31c>
   2afa4:	10002a1e 	bne	r2,zero,2b050 <__adddf3+0x11c>
   2afa8:	4984b03a 	or	r2,r9,r6
   2afac:	1000961e 	bne	r2,zero,2b208 <__adddf3+0x2d4>
   2afb0:	888001cc 	andi	r2,r17,7
   2afb4:	10000726 	beq	r2,zero,2afd4 <__adddf3+0xa0>
   2afb8:	888003cc 	andi	r2,r17,15
   2afbc:	00c00104 	movi	r3,4
   2afc0:	10c00426 	beq	r2,r3,2afd4 <__adddf3+0xa0>
   2afc4:	88c7883a 	add	r3,r17,r3
   2afc8:	1c63803a 	cmpltu	r17,r3,r17
   2afcc:	4451883a 	add	r8,r8,r17
   2afd0:	1823883a 	mov	r17,r3
   2afd4:	4080202c 	andhi	r2,r8,128
   2afd8:	10005926 	beq	r2,zero,2b140 <__adddf3+0x20c>
   2afdc:	84000044 	addi	r16,r16,1
   2afe0:	0081ffc4 	movi	r2,2047
   2afe4:	8080ba26 	beq	r16,r2,2b2d0 <__adddf3+0x39c>
   2afe8:	00bfe034 	movhi	r2,65408
   2afec:	10bfffc4 	addi	r2,r2,-1
   2aff0:	4090703a 	and	r8,r8,r2
   2aff4:	4004977a 	slli	r2,r8,29
   2aff8:	4010927a 	slli	r8,r8,9
   2affc:	8822d0fa 	srli	r17,r17,3
   2b000:	8401ffcc 	andi	r16,r16,2047
   2b004:	4010d33a 	srli	r8,r8,12
   2b008:	9007883a 	mov	r3,r18
   2b00c:	1444b03a 	or	r2,r2,r17
   2b010:	8401ffcc 	andi	r16,r16,2047
   2b014:	8020953a 	slli	r16,r16,20
   2b018:	18c03fcc 	andi	r3,r3,255
   2b01c:	01000434 	movhi	r4,16
   2b020:	213fffc4 	addi	r4,r4,-1
   2b024:	180697fa 	slli	r3,r3,31
   2b028:	4110703a 	and	r8,r8,r4
   2b02c:	4410b03a 	or	r8,r8,r16
   2b030:	40c6b03a 	or	r3,r8,r3
   2b034:	dfc00417 	ldw	ra,16(sp)
   2b038:	dcc00317 	ldw	r19,12(sp)
   2b03c:	dc800217 	ldw	r18,8(sp)
   2b040:	dc400117 	ldw	r17,4(sp)
   2b044:	dc000017 	ldw	r16,0(sp)
   2b048:	dec00504 	addi	sp,sp,20
   2b04c:	f800283a 	ret
   2b050:	0081ffc4 	movi	r2,2047
   2b054:	80bfd626 	beq	r16,r2,2afb0 <_gp+0xfffefe4c>
   2b058:	4a402034 	orhi	r9,r9,128
   2b05c:	00800e04 	movi	r2,56
   2b060:	10c09f16 	blt	r2,r3,2b2e0 <__adddf3+0x3ac>
   2b064:	008007c4 	movi	r2,31
   2b068:	10c0c216 	blt	r2,r3,2b374 <__adddf3+0x440>
   2b06c:	00800804 	movi	r2,32
   2b070:	10c5c83a 	sub	r2,r2,r3
   2b074:	488a983a 	sll	r5,r9,r2
   2b078:	30c8d83a 	srl	r4,r6,r3
   2b07c:	3084983a 	sll	r2,r6,r2
   2b080:	48c6d83a 	srl	r3,r9,r3
   2b084:	290cb03a 	or	r6,r5,r4
   2b088:	1004c03a 	cmpne	r2,r2,zero
   2b08c:	308cb03a 	or	r6,r6,r2
   2b090:	898dc83a 	sub	r6,r17,r6
   2b094:	89a3803a 	cmpltu	r17,r17,r6
   2b098:	40d1c83a 	sub	r8,r8,r3
   2b09c:	4451c83a 	sub	r8,r8,r17
   2b0a0:	3023883a 	mov	r17,r6
   2b0a4:	4080202c 	andhi	r2,r8,128
   2b0a8:	10002326 	beq	r2,zero,2b138 <__adddf3+0x204>
   2b0ac:	04c02034 	movhi	r19,128
   2b0b0:	9cffffc4 	addi	r19,r19,-1
   2b0b4:	44e6703a 	and	r19,r8,r19
   2b0b8:	98007626 	beq	r19,zero,2b294 <__adddf3+0x360>
   2b0bc:	9809883a 	mov	r4,r19
   2b0c0:	002d7740 	call	2d774 <__clzsi2>
   2b0c4:	10fffe04 	addi	r3,r2,-8
   2b0c8:	010007c4 	movi	r4,31
   2b0cc:	20c07716 	blt	r4,r3,2b2ac <__adddf3+0x378>
   2b0d0:	00800804 	movi	r2,32
   2b0d4:	10c5c83a 	sub	r2,r2,r3
   2b0d8:	8884d83a 	srl	r2,r17,r2
   2b0dc:	98d0983a 	sll	r8,r19,r3
   2b0e0:	88e2983a 	sll	r17,r17,r3
   2b0e4:	1204b03a 	or	r2,r2,r8
   2b0e8:	1c007416 	blt	r3,r16,2b2bc <__adddf3+0x388>
   2b0ec:	1c21c83a 	sub	r16,r3,r16
   2b0f0:	82000044 	addi	r8,r16,1
   2b0f4:	00c007c4 	movi	r3,31
   2b0f8:	1a009116 	blt	r3,r8,2b340 <__adddf3+0x40c>
   2b0fc:	00c00804 	movi	r3,32
   2b100:	1a07c83a 	sub	r3,r3,r8
   2b104:	8a08d83a 	srl	r4,r17,r8
   2b108:	88e2983a 	sll	r17,r17,r3
   2b10c:	10c6983a 	sll	r3,r2,r3
   2b110:	1210d83a 	srl	r8,r2,r8
   2b114:	8804c03a 	cmpne	r2,r17,zero
   2b118:	1906b03a 	or	r3,r3,r4
   2b11c:	18a2b03a 	or	r17,r3,r2
   2b120:	0021883a 	mov	r16,zero
   2b124:	003fa206 	br	2afb0 <_gp+0xfffefe4c>
   2b128:	1890b03a 	or	r8,r3,r2
   2b12c:	40017d26 	beq	r8,zero,2b724 <__adddf3+0x7f0>
   2b130:	1011883a 	mov	r8,r2
   2b134:	1823883a 	mov	r17,r3
   2b138:	888001cc 	andi	r2,r17,7
   2b13c:	103f9e1e 	bne	r2,zero,2afb8 <_gp+0xfffefe54>
   2b140:	4004977a 	slli	r2,r8,29
   2b144:	8822d0fa 	srli	r17,r17,3
   2b148:	4010d0fa 	srli	r8,r8,3
   2b14c:	9007883a 	mov	r3,r18
   2b150:	1444b03a 	or	r2,r2,r17
   2b154:	0101ffc4 	movi	r4,2047
   2b158:	81002426 	beq	r16,r4,2b1ec <__adddf3+0x2b8>
   2b15c:	8120703a 	and	r16,r16,r4
   2b160:	01000434 	movhi	r4,16
   2b164:	213fffc4 	addi	r4,r4,-1
   2b168:	4110703a 	and	r8,r8,r4
   2b16c:	003fa806 	br	2b010 <_gp+0xfffefeac>
   2b170:	8089c83a 	sub	r4,r16,r2
   2b174:	01005e0e 	bge	zero,r4,2b2f0 <__adddf3+0x3bc>
   2b178:	10002b26 	beq	r2,zero,2b228 <__adddf3+0x2f4>
   2b17c:	0081ffc4 	movi	r2,2047
   2b180:	80bf8b26 	beq	r16,r2,2afb0 <_gp+0xfffefe4c>
   2b184:	4a402034 	orhi	r9,r9,128
   2b188:	00800e04 	movi	r2,56
   2b18c:	1100a40e 	bge	r2,r4,2b420 <__adddf3+0x4ec>
   2b190:	498cb03a 	or	r6,r9,r6
   2b194:	300ac03a 	cmpne	r5,r6,zero
   2b198:	0013883a 	mov	r9,zero
   2b19c:	2c4b883a 	add	r5,r5,r17
   2b1a0:	2c63803a 	cmpltu	r17,r5,r17
   2b1a4:	4a11883a 	add	r8,r9,r8
   2b1a8:	8a11883a 	add	r8,r17,r8
   2b1ac:	2823883a 	mov	r17,r5
   2b1b0:	4080202c 	andhi	r2,r8,128
   2b1b4:	103fe026 	beq	r2,zero,2b138 <_gp+0xfffeffd4>
   2b1b8:	84000044 	addi	r16,r16,1
   2b1bc:	0081ffc4 	movi	r2,2047
   2b1c0:	8080d226 	beq	r16,r2,2b50c <__adddf3+0x5d8>
   2b1c4:	00bfe034 	movhi	r2,65408
   2b1c8:	10bfffc4 	addi	r2,r2,-1
   2b1cc:	4090703a 	and	r8,r8,r2
   2b1d0:	880ad07a 	srli	r5,r17,1
   2b1d4:	400897fa 	slli	r4,r8,31
   2b1d8:	88c0004c 	andi	r3,r17,1
   2b1dc:	28e2b03a 	or	r17,r5,r3
   2b1e0:	4010d07a 	srli	r8,r8,1
   2b1e4:	2462b03a 	or	r17,r4,r17
   2b1e8:	003f7106 	br	2afb0 <_gp+0xfffefe4c>
   2b1ec:	4088b03a 	or	r4,r8,r2
   2b1f0:	20014526 	beq	r4,zero,2b708 <__adddf3+0x7d4>
   2b1f4:	01000434 	movhi	r4,16
   2b1f8:	42000234 	orhi	r8,r8,8
   2b1fc:	213fffc4 	addi	r4,r4,-1
   2b200:	4110703a 	and	r8,r8,r4
   2b204:	003f8206 	br	2b010 <_gp+0xfffefeac>
   2b208:	18ffffc4 	addi	r3,r3,-1
   2b20c:	1800491e 	bne	r3,zero,2b334 <__adddf3+0x400>
   2b210:	898bc83a 	sub	r5,r17,r6
   2b214:	8963803a 	cmpltu	r17,r17,r5
   2b218:	4251c83a 	sub	r8,r8,r9
   2b21c:	4451c83a 	sub	r8,r8,r17
   2b220:	2823883a 	mov	r17,r5
   2b224:	003f9f06 	br	2b0a4 <_gp+0xfffeff40>
   2b228:	4984b03a 	or	r2,r9,r6
   2b22c:	103f6026 	beq	r2,zero,2afb0 <_gp+0xfffefe4c>
   2b230:	213fffc4 	addi	r4,r4,-1
   2b234:	2000931e 	bne	r4,zero,2b484 <__adddf3+0x550>
   2b238:	898d883a 	add	r6,r17,r6
   2b23c:	3463803a 	cmpltu	r17,r6,r17
   2b240:	4251883a 	add	r8,r8,r9
   2b244:	8a11883a 	add	r8,r17,r8
   2b248:	3023883a 	mov	r17,r6
   2b24c:	003fd806 	br	2b1b0 <_gp+0xffff004c>
   2b250:	1800541e 	bne	r3,zero,2b3a4 <__adddf3+0x470>
   2b254:	80800044 	addi	r2,r16,1
   2b258:	1081ffcc 	andi	r2,r2,2047
   2b25c:	00c00044 	movi	r3,1
   2b260:	1880a00e 	bge	r3,r2,2b4e4 <__adddf3+0x5b0>
   2b264:	8989c83a 	sub	r4,r17,r6
   2b268:	8905803a 	cmpltu	r2,r17,r4
   2b26c:	4267c83a 	sub	r19,r8,r9
   2b270:	98a7c83a 	sub	r19,r19,r2
   2b274:	9880202c 	andhi	r2,r19,128
   2b278:	10006326 	beq	r2,zero,2b408 <__adddf3+0x4d4>
   2b27c:	3463c83a 	sub	r17,r6,r17
   2b280:	4a07c83a 	sub	r3,r9,r8
   2b284:	344d803a 	cmpltu	r6,r6,r17
   2b288:	19a7c83a 	sub	r19,r3,r6
   2b28c:	3825883a 	mov	r18,r7
   2b290:	983f8a1e 	bne	r19,zero,2b0bc <_gp+0xfffeff58>
   2b294:	8809883a 	mov	r4,r17
   2b298:	002d7740 	call	2d774 <__clzsi2>
   2b29c:	10800804 	addi	r2,r2,32
   2b2a0:	10fffe04 	addi	r3,r2,-8
   2b2a4:	010007c4 	movi	r4,31
   2b2a8:	20ff890e 	bge	r4,r3,2b0d0 <_gp+0xfffeff6c>
   2b2ac:	10bff604 	addi	r2,r2,-40
   2b2b0:	8884983a 	sll	r2,r17,r2
   2b2b4:	0023883a 	mov	r17,zero
   2b2b8:	1c3f8c0e 	bge	r3,r16,2b0ec <_gp+0xfffeff88>
   2b2bc:	023fe034 	movhi	r8,65408
   2b2c0:	423fffc4 	addi	r8,r8,-1
   2b2c4:	80e1c83a 	sub	r16,r16,r3
   2b2c8:	1210703a 	and	r8,r2,r8
   2b2cc:	003f3806 	br	2afb0 <_gp+0xfffefe4c>
   2b2d0:	9007883a 	mov	r3,r18
   2b2d4:	0011883a 	mov	r8,zero
   2b2d8:	0005883a 	mov	r2,zero
   2b2dc:	003f4c06 	br	2b010 <_gp+0xfffefeac>
   2b2e0:	498cb03a 	or	r6,r9,r6
   2b2e4:	300cc03a 	cmpne	r6,r6,zero
   2b2e8:	0007883a 	mov	r3,zero
   2b2ec:	003f6806 	br	2b090 <_gp+0xfffeff2c>
   2b2f0:	20009c1e 	bne	r4,zero,2b564 <__adddf3+0x630>
   2b2f4:	80800044 	addi	r2,r16,1
   2b2f8:	1141ffcc 	andi	r5,r2,2047
   2b2fc:	01000044 	movi	r4,1
   2b300:	2140670e 	bge	r4,r5,2b4a0 <__adddf3+0x56c>
   2b304:	0101ffc4 	movi	r4,2047
   2b308:	11007f26 	beq	r2,r4,2b508 <__adddf3+0x5d4>
   2b30c:	898d883a 	add	r6,r17,r6
   2b310:	4247883a 	add	r3,r8,r9
   2b314:	3451803a 	cmpltu	r8,r6,r17
   2b318:	40d1883a 	add	r8,r8,r3
   2b31c:	402297fa 	slli	r17,r8,31
   2b320:	300cd07a 	srli	r6,r6,1
   2b324:	4010d07a 	srli	r8,r8,1
   2b328:	1021883a 	mov	r16,r2
   2b32c:	89a2b03a 	or	r17,r17,r6
   2b330:	003f1f06 	br	2afb0 <_gp+0xfffefe4c>
   2b334:	0081ffc4 	movi	r2,2047
   2b338:	80bf481e 	bne	r16,r2,2b05c <_gp+0xfffefef8>
   2b33c:	003f1c06 	br	2afb0 <_gp+0xfffefe4c>
   2b340:	843ff844 	addi	r16,r16,-31
   2b344:	01000804 	movi	r4,32
   2b348:	1406d83a 	srl	r3,r2,r16
   2b34c:	41005026 	beq	r8,r4,2b490 <__adddf3+0x55c>
   2b350:	01001004 	movi	r4,64
   2b354:	2211c83a 	sub	r8,r4,r8
   2b358:	1204983a 	sll	r2,r2,r8
   2b35c:	88a2b03a 	or	r17,r17,r2
   2b360:	8822c03a 	cmpne	r17,r17,zero
   2b364:	1c62b03a 	or	r17,r3,r17
   2b368:	0011883a 	mov	r8,zero
   2b36c:	0021883a 	mov	r16,zero
   2b370:	003f7106 	br	2b138 <_gp+0xfffeffd4>
   2b374:	193ff804 	addi	r4,r3,-32
   2b378:	00800804 	movi	r2,32
   2b37c:	4908d83a 	srl	r4,r9,r4
   2b380:	18804526 	beq	r3,r2,2b498 <__adddf3+0x564>
   2b384:	00801004 	movi	r2,64
   2b388:	10c5c83a 	sub	r2,r2,r3
   2b38c:	4886983a 	sll	r3,r9,r2
   2b390:	198cb03a 	or	r6,r3,r6
   2b394:	300cc03a 	cmpne	r6,r6,zero
   2b398:	218cb03a 	or	r6,r4,r6
   2b39c:	0007883a 	mov	r3,zero
   2b3a0:	003f3b06 	br	2b090 <_gp+0xfffeff2c>
   2b3a4:	80002a26 	beq	r16,zero,2b450 <__adddf3+0x51c>
   2b3a8:	0101ffc4 	movi	r4,2047
   2b3ac:	11006826 	beq	r2,r4,2b550 <__adddf3+0x61c>
   2b3b0:	00c7c83a 	sub	r3,zero,r3
   2b3b4:	42002034 	orhi	r8,r8,128
   2b3b8:	01000e04 	movi	r4,56
   2b3bc:	20c07c16 	blt	r4,r3,2b5b0 <__adddf3+0x67c>
   2b3c0:	010007c4 	movi	r4,31
   2b3c4:	20c0da16 	blt	r4,r3,2b730 <__adddf3+0x7fc>
   2b3c8:	01000804 	movi	r4,32
   2b3cc:	20c9c83a 	sub	r4,r4,r3
   2b3d0:	4114983a 	sll	r10,r8,r4
   2b3d4:	88cad83a 	srl	r5,r17,r3
   2b3d8:	8908983a 	sll	r4,r17,r4
   2b3dc:	40c6d83a 	srl	r3,r8,r3
   2b3e0:	5162b03a 	or	r17,r10,r5
   2b3e4:	2008c03a 	cmpne	r4,r4,zero
   2b3e8:	8922b03a 	or	r17,r17,r4
   2b3ec:	3463c83a 	sub	r17,r6,r17
   2b3f0:	48c7c83a 	sub	r3,r9,r3
   2b3f4:	344d803a 	cmpltu	r6,r6,r17
   2b3f8:	1991c83a 	sub	r8,r3,r6
   2b3fc:	1021883a 	mov	r16,r2
   2b400:	3825883a 	mov	r18,r7
   2b404:	003f2706 	br	2b0a4 <_gp+0xfffeff40>
   2b408:	24d0b03a 	or	r8,r4,r19
   2b40c:	40001b1e 	bne	r8,zero,2b47c <__adddf3+0x548>
   2b410:	0005883a 	mov	r2,zero
   2b414:	0007883a 	mov	r3,zero
   2b418:	0021883a 	mov	r16,zero
   2b41c:	003f4d06 	br	2b154 <_gp+0xfffefff0>
   2b420:	008007c4 	movi	r2,31
   2b424:	11003c16 	blt	r2,r4,2b518 <__adddf3+0x5e4>
   2b428:	00800804 	movi	r2,32
   2b42c:	1105c83a 	sub	r2,r2,r4
   2b430:	488e983a 	sll	r7,r9,r2
   2b434:	310ad83a 	srl	r5,r6,r4
   2b438:	3084983a 	sll	r2,r6,r2
   2b43c:	4912d83a 	srl	r9,r9,r4
   2b440:	394ab03a 	or	r5,r7,r5
   2b444:	1004c03a 	cmpne	r2,r2,zero
   2b448:	288ab03a 	or	r5,r5,r2
   2b44c:	003f5306 	br	2b19c <_gp+0xffff0038>
   2b450:	4448b03a 	or	r4,r8,r17
   2b454:	20003e26 	beq	r4,zero,2b550 <__adddf3+0x61c>
   2b458:	00c6303a 	nor	r3,zero,r3
   2b45c:	18003a1e 	bne	r3,zero,2b548 <__adddf3+0x614>
   2b460:	3463c83a 	sub	r17,r6,r17
   2b464:	4a07c83a 	sub	r3,r9,r8
   2b468:	344d803a 	cmpltu	r6,r6,r17
   2b46c:	1991c83a 	sub	r8,r3,r6
   2b470:	1021883a 	mov	r16,r2
   2b474:	3825883a 	mov	r18,r7
   2b478:	003f0a06 	br	2b0a4 <_gp+0xfffeff40>
   2b47c:	2023883a 	mov	r17,r4
   2b480:	003f0d06 	br	2b0b8 <_gp+0xfffeff54>
   2b484:	0081ffc4 	movi	r2,2047
   2b488:	80bf3f1e 	bne	r16,r2,2b188 <_gp+0xffff0024>
   2b48c:	003ec806 	br	2afb0 <_gp+0xfffefe4c>
   2b490:	0005883a 	mov	r2,zero
   2b494:	003fb106 	br	2b35c <_gp+0xffff01f8>
   2b498:	0007883a 	mov	r3,zero
   2b49c:	003fbc06 	br	2b390 <_gp+0xffff022c>
   2b4a0:	4444b03a 	or	r2,r8,r17
   2b4a4:	8000871e 	bne	r16,zero,2b6c4 <__adddf3+0x790>
   2b4a8:	1000ba26 	beq	r2,zero,2b794 <__adddf3+0x860>
   2b4ac:	4984b03a 	or	r2,r9,r6
   2b4b0:	103ebf26 	beq	r2,zero,2afb0 <_gp+0xfffefe4c>
   2b4b4:	8985883a 	add	r2,r17,r6
   2b4b8:	4247883a 	add	r3,r8,r9
   2b4bc:	1451803a 	cmpltu	r8,r2,r17
   2b4c0:	40d1883a 	add	r8,r8,r3
   2b4c4:	40c0202c 	andhi	r3,r8,128
   2b4c8:	1023883a 	mov	r17,r2
   2b4cc:	183f1a26 	beq	r3,zero,2b138 <_gp+0xfffeffd4>
   2b4d0:	00bfe034 	movhi	r2,65408
   2b4d4:	10bfffc4 	addi	r2,r2,-1
   2b4d8:	2021883a 	mov	r16,r4
   2b4dc:	4090703a 	and	r8,r8,r2
   2b4e0:	003eb306 	br	2afb0 <_gp+0xfffefe4c>
   2b4e4:	4444b03a 	or	r2,r8,r17
   2b4e8:	8000291e 	bne	r16,zero,2b590 <__adddf3+0x65c>
   2b4ec:	10004b1e 	bne	r2,zero,2b61c <__adddf3+0x6e8>
   2b4f0:	4990b03a 	or	r8,r9,r6
   2b4f4:	40008b26 	beq	r8,zero,2b724 <__adddf3+0x7f0>
   2b4f8:	4811883a 	mov	r8,r9
   2b4fc:	3023883a 	mov	r17,r6
   2b500:	3825883a 	mov	r18,r7
   2b504:	003eaa06 	br	2afb0 <_gp+0xfffefe4c>
   2b508:	1021883a 	mov	r16,r2
   2b50c:	0011883a 	mov	r8,zero
   2b510:	0005883a 	mov	r2,zero
   2b514:	003f0f06 	br	2b154 <_gp+0xfffefff0>
   2b518:	217ff804 	addi	r5,r4,-32
   2b51c:	00800804 	movi	r2,32
   2b520:	494ad83a 	srl	r5,r9,r5
   2b524:	20807d26 	beq	r4,r2,2b71c <__adddf3+0x7e8>
   2b528:	00801004 	movi	r2,64
   2b52c:	1109c83a 	sub	r4,r2,r4
   2b530:	4912983a 	sll	r9,r9,r4
   2b534:	498cb03a 	or	r6,r9,r6
   2b538:	300cc03a 	cmpne	r6,r6,zero
   2b53c:	298ab03a 	or	r5,r5,r6
   2b540:	0013883a 	mov	r9,zero
   2b544:	003f1506 	br	2b19c <_gp+0xffff0038>
   2b548:	0101ffc4 	movi	r4,2047
   2b54c:	113f9a1e 	bne	r2,r4,2b3b8 <_gp+0xffff0254>
   2b550:	4811883a 	mov	r8,r9
   2b554:	3023883a 	mov	r17,r6
   2b558:	1021883a 	mov	r16,r2
   2b55c:	3825883a 	mov	r18,r7
   2b560:	003e9306 	br	2afb0 <_gp+0xfffefe4c>
   2b564:	8000161e 	bne	r16,zero,2b5c0 <__adddf3+0x68c>
   2b568:	444ab03a 	or	r5,r8,r17
   2b56c:	28005126 	beq	r5,zero,2b6b4 <__adddf3+0x780>
   2b570:	0108303a 	nor	r4,zero,r4
   2b574:	20004d1e 	bne	r4,zero,2b6ac <__adddf3+0x778>
   2b578:	89a3883a 	add	r17,r17,r6
   2b57c:	4253883a 	add	r9,r8,r9
   2b580:	898d803a 	cmpltu	r6,r17,r6
   2b584:	3251883a 	add	r8,r6,r9
   2b588:	1021883a 	mov	r16,r2
   2b58c:	003f0806 	br	2b1b0 <_gp+0xffff004c>
   2b590:	1000301e 	bne	r2,zero,2b654 <__adddf3+0x720>
   2b594:	4984b03a 	or	r2,r9,r6
   2b598:	10007126 	beq	r2,zero,2b760 <__adddf3+0x82c>
   2b59c:	4811883a 	mov	r8,r9
   2b5a0:	3023883a 	mov	r17,r6
   2b5a4:	3825883a 	mov	r18,r7
   2b5a8:	0401ffc4 	movi	r16,2047
   2b5ac:	003e8006 	br	2afb0 <_gp+0xfffefe4c>
   2b5b0:	4462b03a 	or	r17,r8,r17
   2b5b4:	8822c03a 	cmpne	r17,r17,zero
   2b5b8:	0007883a 	mov	r3,zero
   2b5bc:	003f8b06 	br	2b3ec <_gp+0xffff0288>
   2b5c0:	0141ffc4 	movi	r5,2047
   2b5c4:	11403b26 	beq	r2,r5,2b6b4 <__adddf3+0x780>
   2b5c8:	0109c83a 	sub	r4,zero,r4
   2b5cc:	42002034 	orhi	r8,r8,128
   2b5d0:	01400e04 	movi	r5,56
   2b5d4:	29006716 	blt	r5,r4,2b774 <__adddf3+0x840>
   2b5d8:	014007c4 	movi	r5,31
   2b5dc:	29007016 	blt	r5,r4,2b7a0 <__adddf3+0x86c>
   2b5e0:	01400804 	movi	r5,32
   2b5e4:	290bc83a 	sub	r5,r5,r4
   2b5e8:	4154983a 	sll	r10,r8,r5
   2b5ec:	890ed83a 	srl	r7,r17,r4
   2b5f0:	894a983a 	sll	r5,r17,r5
   2b5f4:	4108d83a 	srl	r4,r8,r4
   2b5f8:	51e2b03a 	or	r17,r10,r7
   2b5fc:	280ac03a 	cmpne	r5,r5,zero
   2b600:	8962b03a 	or	r17,r17,r5
   2b604:	89a3883a 	add	r17,r17,r6
   2b608:	2253883a 	add	r9,r4,r9
   2b60c:	898d803a 	cmpltu	r6,r17,r6
   2b610:	3251883a 	add	r8,r6,r9
   2b614:	1021883a 	mov	r16,r2
   2b618:	003ee506 	br	2b1b0 <_gp+0xffff004c>
   2b61c:	4984b03a 	or	r2,r9,r6
   2b620:	103e6326 	beq	r2,zero,2afb0 <_gp+0xfffefe4c>
   2b624:	8987c83a 	sub	r3,r17,r6
   2b628:	88c9803a 	cmpltu	r4,r17,r3
   2b62c:	4245c83a 	sub	r2,r8,r9
   2b630:	1105c83a 	sub	r2,r2,r4
   2b634:	1100202c 	andhi	r4,r2,128
   2b638:	203ebb26 	beq	r4,zero,2b128 <_gp+0xfffeffc4>
   2b63c:	3463c83a 	sub	r17,r6,r17
   2b640:	4a07c83a 	sub	r3,r9,r8
   2b644:	344d803a 	cmpltu	r6,r6,r17
   2b648:	1991c83a 	sub	r8,r3,r6
   2b64c:	3825883a 	mov	r18,r7
   2b650:	003e5706 	br	2afb0 <_gp+0xfffefe4c>
   2b654:	4984b03a 	or	r2,r9,r6
   2b658:	10002e26 	beq	r2,zero,2b714 <__adddf3+0x7e0>
   2b65c:	4004d0fa 	srli	r2,r8,3
   2b660:	8822d0fa 	srli	r17,r17,3
   2b664:	4010977a 	slli	r8,r8,29
   2b668:	10c0022c 	andhi	r3,r2,8
   2b66c:	4462b03a 	or	r17,r8,r17
   2b670:	18000826 	beq	r3,zero,2b694 <__adddf3+0x760>
   2b674:	4808d0fa 	srli	r4,r9,3
   2b678:	20c0022c 	andhi	r3,r4,8
   2b67c:	1800051e 	bne	r3,zero,2b694 <__adddf3+0x760>
   2b680:	300cd0fa 	srli	r6,r6,3
   2b684:	4806977a 	slli	r3,r9,29
   2b688:	2005883a 	mov	r2,r4
   2b68c:	3825883a 	mov	r18,r7
   2b690:	19a2b03a 	or	r17,r3,r6
   2b694:	8810d77a 	srli	r8,r17,29
   2b698:	100490fa 	slli	r2,r2,3
   2b69c:	882290fa 	slli	r17,r17,3
   2b6a0:	0401ffc4 	movi	r16,2047
   2b6a4:	4090b03a 	or	r8,r8,r2
   2b6a8:	003e4106 	br	2afb0 <_gp+0xfffefe4c>
   2b6ac:	0141ffc4 	movi	r5,2047
   2b6b0:	117fc71e 	bne	r2,r5,2b5d0 <_gp+0xffff046c>
   2b6b4:	4811883a 	mov	r8,r9
   2b6b8:	3023883a 	mov	r17,r6
   2b6bc:	1021883a 	mov	r16,r2
   2b6c0:	003e3b06 	br	2afb0 <_gp+0xfffefe4c>
   2b6c4:	10002f26 	beq	r2,zero,2b784 <__adddf3+0x850>
   2b6c8:	4984b03a 	or	r2,r9,r6
   2b6cc:	10001126 	beq	r2,zero,2b714 <__adddf3+0x7e0>
   2b6d0:	4004d0fa 	srli	r2,r8,3
   2b6d4:	8822d0fa 	srli	r17,r17,3
   2b6d8:	4010977a 	slli	r8,r8,29
   2b6dc:	10c0022c 	andhi	r3,r2,8
   2b6e0:	4462b03a 	or	r17,r8,r17
   2b6e4:	183feb26 	beq	r3,zero,2b694 <_gp+0xffff0530>
   2b6e8:	4808d0fa 	srli	r4,r9,3
   2b6ec:	20c0022c 	andhi	r3,r4,8
   2b6f0:	183fe81e 	bne	r3,zero,2b694 <_gp+0xffff0530>
   2b6f4:	300cd0fa 	srli	r6,r6,3
   2b6f8:	4806977a 	slli	r3,r9,29
   2b6fc:	2005883a 	mov	r2,r4
   2b700:	19a2b03a 	or	r17,r3,r6
   2b704:	003fe306 	br	2b694 <_gp+0xffff0530>
   2b708:	0011883a 	mov	r8,zero
   2b70c:	0005883a 	mov	r2,zero
   2b710:	003e3f06 	br	2b010 <_gp+0xfffefeac>
   2b714:	0401ffc4 	movi	r16,2047
   2b718:	003e2506 	br	2afb0 <_gp+0xfffefe4c>
   2b71c:	0013883a 	mov	r9,zero
   2b720:	003f8406 	br	2b534 <_gp+0xffff03d0>
   2b724:	0005883a 	mov	r2,zero
   2b728:	0007883a 	mov	r3,zero
   2b72c:	003e8906 	br	2b154 <_gp+0xfffefff0>
   2b730:	197ff804 	addi	r5,r3,-32
   2b734:	01000804 	movi	r4,32
   2b738:	414ad83a 	srl	r5,r8,r5
   2b73c:	19002426 	beq	r3,r4,2b7d0 <__adddf3+0x89c>
   2b740:	01001004 	movi	r4,64
   2b744:	20c7c83a 	sub	r3,r4,r3
   2b748:	40c6983a 	sll	r3,r8,r3
   2b74c:	1c46b03a 	or	r3,r3,r17
   2b750:	1806c03a 	cmpne	r3,r3,zero
   2b754:	28e2b03a 	or	r17,r5,r3
   2b758:	0007883a 	mov	r3,zero
   2b75c:	003f2306 	br	2b3ec <_gp+0xffff0288>
   2b760:	0007883a 	mov	r3,zero
   2b764:	5811883a 	mov	r8,r11
   2b768:	00bfffc4 	movi	r2,-1
   2b76c:	0401ffc4 	movi	r16,2047
   2b770:	003e7806 	br	2b154 <_gp+0xfffefff0>
   2b774:	4462b03a 	or	r17,r8,r17
   2b778:	8822c03a 	cmpne	r17,r17,zero
   2b77c:	0009883a 	mov	r4,zero
   2b780:	003fa006 	br	2b604 <_gp+0xffff04a0>
   2b784:	4811883a 	mov	r8,r9
   2b788:	3023883a 	mov	r17,r6
   2b78c:	0401ffc4 	movi	r16,2047
   2b790:	003e0706 	br	2afb0 <_gp+0xfffefe4c>
   2b794:	4811883a 	mov	r8,r9
   2b798:	3023883a 	mov	r17,r6
   2b79c:	003e0406 	br	2afb0 <_gp+0xfffefe4c>
   2b7a0:	21fff804 	addi	r7,r4,-32
   2b7a4:	01400804 	movi	r5,32
   2b7a8:	41ced83a 	srl	r7,r8,r7
   2b7ac:	21400a26 	beq	r4,r5,2b7d8 <__adddf3+0x8a4>
   2b7b0:	01401004 	movi	r5,64
   2b7b4:	2909c83a 	sub	r4,r5,r4
   2b7b8:	4108983a 	sll	r4,r8,r4
   2b7bc:	2448b03a 	or	r4,r4,r17
   2b7c0:	2008c03a 	cmpne	r4,r4,zero
   2b7c4:	3922b03a 	or	r17,r7,r4
   2b7c8:	0009883a 	mov	r4,zero
   2b7cc:	003f8d06 	br	2b604 <_gp+0xffff04a0>
   2b7d0:	0007883a 	mov	r3,zero
   2b7d4:	003fdd06 	br	2b74c <_gp+0xffff05e8>
   2b7d8:	0009883a 	mov	r4,zero
   2b7dc:	003ff706 	br	2b7bc <_gp+0xffff0658>

0002b7e0 <__divdf3>:
   2b7e0:	defff004 	addi	sp,sp,-64
   2b7e4:	dc800815 	stw	r18,32(sp)
   2b7e8:	2824d53a 	srli	r18,r5,20
   2b7ec:	dd800c15 	stw	r22,48(sp)
   2b7f0:	282cd7fa 	srli	r22,r5,31
   2b7f4:	dc000615 	stw	r16,24(sp)
   2b7f8:	04000434 	movhi	r16,16
   2b7fc:	843fffc4 	addi	r16,r16,-1
   2b800:	dfc00f15 	stw	ra,60(sp)
   2b804:	df000e15 	stw	fp,56(sp)
   2b808:	ddc00d15 	stw	r23,52(sp)
   2b80c:	dd400b15 	stw	r21,44(sp)
   2b810:	dd000a15 	stw	r20,40(sp)
   2b814:	dcc00915 	stw	r19,36(sp)
   2b818:	dc400715 	stw	r17,28(sp)
   2b81c:	9481ffcc 	andi	r18,r18,2047
   2b820:	2c20703a 	and	r16,r5,r16
   2b824:	b2003fcc 	andi	r8,r22,255
   2b828:	90006126 	beq	r18,zero,2b9b0 <__divdf3+0x1d0>
   2b82c:	0081ffc4 	movi	r2,2047
   2b830:	202b883a 	mov	r21,r4
   2b834:	90803726 	beq	r18,r2,2b914 <__divdf3+0x134>
   2b838:	80800434 	orhi	r2,r16,16
   2b83c:	100490fa 	slli	r2,r2,3
   2b840:	2020d77a 	srli	r16,r4,29
   2b844:	202a90fa 	slli	r21,r4,3
   2b848:	94bf0044 	addi	r18,r18,-1023
   2b84c:	80a0b03a 	or	r16,r16,r2
   2b850:	0013883a 	mov	r9,zero
   2b854:	000b883a 	mov	r5,zero
   2b858:	3806d53a 	srli	r3,r7,20
   2b85c:	382ed7fa 	srli	r23,r7,31
   2b860:	04400434 	movhi	r17,16
   2b864:	8c7fffc4 	addi	r17,r17,-1
   2b868:	18c1ffcc 	andi	r3,r3,2047
   2b86c:	3029883a 	mov	r20,r6
   2b870:	3c62703a 	and	r17,r7,r17
   2b874:	bf003fcc 	andi	fp,r23,255
   2b878:	18006e26 	beq	r3,zero,2ba34 <__divdf3+0x254>
   2b87c:	0081ffc4 	movi	r2,2047
   2b880:	18806626 	beq	r3,r2,2ba1c <__divdf3+0x23c>
   2b884:	88800434 	orhi	r2,r17,16
   2b888:	100490fa 	slli	r2,r2,3
   2b88c:	3022d77a 	srli	r17,r6,29
   2b890:	302890fa 	slli	r20,r6,3
   2b894:	18ff0044 	addi	r3,r3,-1023
   2b898:	88a2b03a 	or	r17,r17,r2
   2b89c:	000f883a 	mov	r7,zero
   2b8a0:	b5e6f03a 	xor	r19,r22,r23
   2b8a4:	3a4cb03a 	or	r6,r7,r9
   2b8a8:	008003c4 	movi	r2,15
   2b8ac:	9809883a 	mov	r4,r19
   2b8b0:	90c7c83a 	sub	r3,r18,r3
   2b8b4:	9cc03fcc 	andi	r19,r19,255
   2b8b8:	11809636 	bltu	r2,r6,2bb14 <__divdf3+0x334>
   2b8bc:	300c90ba 	slli	r6,r6,2
   2b8c0:	008000f4 	movhi	r2,3
   2b8c4:	10ae3504 	addi	r2,r2,-18220
   2b8c8:	308d883a 	add	r6,r6,r2
   2b8cc:	30800017 	ldw	r2,0(r6)
   2b8d0:	1000683a 	jmp	r2
   2b8d4:	0002bb14 	movui	zero,2796
   2b8d8:	0002b94c 	andi	zero,zero,2789
   2b8dc:	0002bb04 	movi	zero,2796
   2b8e0:	0002b940 	call	2b94 <__reset-0x1d46c>
   2b8e4:	0002bb04 	movi	zero,2796
   2b8e8:	0002bad8 	cmpnei	zero,zero,2795
   2b8ec:	0002bb04 	movi	zero,2796
   2b8f0:	0002b940 	call	2b94 <__reset-0x1d46c>
   2b8f4:	0002b94c 	andi	zero,zero,2789
   2b8f8:	0002b94c 	andi	zero,zero,2789
   2b8fc:	0002bad8 	cmpnei	zero,zero,2795
   2b900:	0002b940 	call	2b94 <__reset-0x1d46c>
   2b904:	0002b930 	cmpltui	zero,zero,2788
   2b908:	0002b930 	cmpltui	zero,zero,2788
   2b90c:	0002b930 	cmpltui	zero,zero,2788
   2b910:	0002be9c 	xori	zero,zero,2810
   2b914:	2404b03a 	or	r2,r4,r16
   2b918:	10006c1e 	bne	r2,zero,2bacc <__divdf3+0x2ec>
   2b91c:	02400204 	movi	r9,8
   2b920:	0021883a 	mov	r16,zero
   2b924:	002b883a 	mov	r21,zero
   2b928:	01400084 	movi	r5,2
   2b92c:	003fca06 	br	2b858 <_gp+0xffff06f4>
   2b930:	8023883a 	mov	r17,r16
   2b934:	a829883a 	mov	r20,r21
   2b938:	4039883a 	mov	fp,r8
   2b93c:	280f883a 	mov	r7,r5
   2b940:	00800084 	movi	r2,2
   2b944:	3881601e 	bne	r7,r2,2bec8 <__divdf3+0x6e8>
   2b948:	e027883a 	mov	r19,fp
   2b94c:	9900004c 	andi	r4,r19,1
   2b950:	0081ffc4 	movi	r2,2047
   2b954:	0021883a 	mov	r16,zero
   2b958:	002b883a 	mov	r21,zero
   2b95c:	1004953a 	slli	r2,r2,20
   2b960:	20c03fcc 	andi	r3,r4,255
   2b964:	01400434 	movhi	r5,16
   2b968:	297fffc4 	addi	r5,r5,-1
   2b96c:	180697fa 	slli	r3,r3,31
   2b970:	8160703a 	and	r16,r16,r5
   2b974:	80a0b03a 	or	r16,r16,r2
   2b978:	80c6b03a 	or	r3,r16,r3
   2b97c:	a805883a 	mov	r2,r21
   2b980:	dfc00f17 	ldw	ra,60(sp)
   2b984:	df000e17 	ldw	fp,56(sp)
   2b988:	ddc00d17 	ldw	r23,52(sp)
   2b98c:	dd800c17 	ldw	r22,48(sp)
   2b990:	dd400b17 	ldw	r21,44(sp)
   2b994:	dd000a17 	ldw	r20,40(sp)
   2b998:	dcc00917 	ldw	r19,36(sp)
   2b99c:	dc800817 	ldw	r18,32(sp)
   2b9a0:	dc400717 	ldw	r17,28(sp)
   2b9a4:	dc000617 	ldw	r16,24(sp)
   2b9a8:	dec01004 	addi	sp,sp,64
   2b9ac:	f800283a 	ret
   2b9b0:	2404b03a 	or	r2,r4,r16
   2b9b4:	2023883a 	mov	r17,r4
   2b9b8:	10003f26 	beq	r2,zero,2bab8 <__divdf3+0x2d8>
   2b9bc:	80015e26 	beq	r16,zero,2bf38 <__divdf3+0x758>
   2b9c0:	8009883a 	mov	r4,r16
   2b9c4:	d9800215 	stw	r6,8(sp)
   2b9c8:	d9c00515 	stw	r7,20(sp)
   2b9cc:	da000415 	stw	r8,16(sp)
   2b9d0:	002d7740 	call	2d774 <__clzsi2>
   2b9d4:	d9800217 	ldw	r6,8(sp)
   2b9d8:	d9c00517 	ldw	r7,20(sp)
   2b9dc:	da000417 	ldw	r8,16(sp)
   2b9e0:	113ffd44 	addi	r4,r2,-11
   2b9e4:	00c00704 	movi	r3,28
   2b9e8:	19014f16 	blt	r3,r4,2bf28 <__divdf3+0x748>
   2b9ec:	00c00744 	movi	r3,29
   2b9f0:	157ffe04 	addi	r21,r2,-8
   2b9f4:	1907c83a 	sub	r3,r3,r4
   2b9f8:	8560983a 	sll	r16,r16,r21
   2b9fc:	88c6d83a 	srl	r3,r17,r3
   2ba00:	8d6a983a 	sll	r21,r17,r21
   2ba04:	1c20b03a 	or	r16,r3,r16
   2ba08:	1080fcc4 	addi	r2,r2,1011
   2ba0c:	00a5c83a 	sub	r18,zero,r2
   2ba10:	0013883a 	mov	r9,zero
   2ba14:	000b883a 	mov	r5,zero
   2ba18:	003f8f06 	br	2b858 <_gp+0xffff06f4>
   2ba1c:	3444b03a 	or	r2,r6,r17
   2ba20:	1000231e 	bne	r2,zero,2bab0 <__divdf3+0x2d0>
   2ba24:	0023883a 	mov	r17,zero
   2ba28:	0029883a 	mov	r20,zero
   2ba2c:	01c00084 	movi	r7,2
   2ba30:	003f9b06 	br	2b8a0 <_gp+0xffff073c>
   2ba34:	3444b03a 	or	r2,r6,r17
   2ba38:	10001926 	beq	r2,zero,2baa0 <__divdf3+0x2c0>
   2ba3c:	88014b26 	beq	r17,zero,2bf6c <__divdf3+0x78c>
   2ba40:	8809883a 	mov	r4,r17
   2ba44:	d9400115 	stw	r5,4(sp)
   2ba48:	d9800215 	stw	r6,8(sp)
   2ba4c:	da000415 	stw	r8,16(sp)
   2ba50:	da400315 	stw	r9,12(sp)
   2ba54:	002d7740 	call	2d774 <__clzsi2>
   2ba58:	d9400117 	ldw	r5,4(sp)
   2ba5c:	d9800217 	ldw	r6,8(sp)
   2ba60:	da000417 	ldw	r8,16(sp)
   2ba64:	da400317 	ldw	r9,12(sp)
   2ba68:	113ffd44 	addi	r4,r2,-11
   2ba6c:	00c00704 	movi	r3,28
   2ba70:	19013a16 	blt	r3,r4,2bf5c <__divdf3+0x77c>
   2ba74:	00c00744 	movi	r3,29
   2ba78:	153ffe04 	addi	r20,r2,-8
   2ba7c:	1907c83a 	sub	r3,r3,r4
   2ba80:	8d22983a 	sll	r17,r17,r20
   2ba84:	30c6d83a 	srl	r3,r6,r3
   2ba88:	3528983a 	sll	r20,r6,r20
   2ba8c:	1c62b03a 	or	r17,r3,r17
   2ba90:	1080fcc4 	addi	r2,r2,1011
   2ba94:	0087c83a 	sub	r3,zero,r2
   2ba98:	000f883a 	mov	r7,zero
   2ba9c:	003f8006 	br	2b8a0 <_gp+0xffff073c>
   2baa0:	0023883a 	mov	r17,zero
   2baa4:	0029883a 	mov	r20,zero
   2baa8:	01c00044 	movi	r7,1
   2baac:	003f7c06 	br	2b8a0 <_gp+0xffff073c>
   2bab0:	01c000c4 	movi	r7,3
   2bab4:	003f7a06 	br	2b8a0 <_gp+0xffff073c>
   2bab8:	02400104 	movi	r9,4
   2babc:	0021883a 	mov	r16,zero
   2bac0:	002b883a 	mov	r21,zero
   2bac4:	01400044 	movi	r5,1
   2bac8:	003f6306 	br	2b858 <_gp+0xffff06f4>
   2bacc:	02400304 	movi	r9,12
   2bad0:	014000c4 	movi	r5,3
   2bad4:	003f6006 	br	2b858 <_gp+0xffff06f4>
   2bad8:	04000434 	movhi	r16,16
   2badc:	0009883a 	mov	r4,zero
   2bae0:	843fffc4 	addi	r16,r16,-1
   2bae4:	057fffc4 	movi	r21,-1
   2bae8:	0081ffc4 	movi	r2,2047
   2baec:	003f9b06 	br	2b95c <_gp+0xffff07f8>
   2baf0:	00c00044 	movi	r3,1
   2baf4:	1887c83a 	sub	r3,r3,r2
   2baf8:	01000e04 	movi	r4,56
   2bafc:	20c1530e 	bge	r4,r3,2c04c <__divdf3+0x86c>
   2bb00:	9900004c 	andi	r4,r19,1
   2bb04:	0005883a 	mov	r2,zero
   2bb08:	0021883a 	mov	r16,zero
   2bb0c:	002b883a 	mov	r21,zero
   2bb10:	003f9206 	br	2b95c <_gp+0xffff07f8>
   2bb14:	8c012e36 	bltu	r17,r16,2bfd0 <__divdf3+0x7f0>
   2bb18:	84412c26 	beq	r16,r17,2bfcc <__divdf3+0x7ec>
   2bb1c:	a82f883a 	mov	r23,r21
   2bb20:	18ffffc4 	addi	r3,r3,-1
   2bb24:	002b883a 	mov	r21,zero
   2bb28:	a004d63a 	srli	r2,r20,24
   2bb2c:	8822923a 	slli	r17,r17,8
   2bb30:	a028923a 	slli	r20,r20,8
   2bb34:	8009883a 	mov	r4,r16
   2bb38:	88acb03a 	or	r22,r17,r2
   2bb3c:	dd000015 	stw	r20,0(sp)
   2bb40:	b028d43a 	srli	r20,r22,16
   2bb44:	d8c00215 	stw	r3,8(sp)
   2bb48:	b4bfffcc 	andi	r18,r22,65535
   2bb4c:	a00b883a 	mov	r5,r20
   2bb50:	002ae780 	call	2ae78 <__udivsi3>
   2bb54:	100b883a 	mov	r5,r2
   2bb58:	9009883a 	mov	r4,r18
   2bb5c:	1023883a 	mov	r17,r2
   2bb60:	00208980 	call	20898 <__mulsi3>
   2bb64:	8009883a 	mov	r4,r16
   2bb68:	a00b883a 	mov	r5,r20
   2bb6c:	1039883a 	mov	fp,r2
   2bb70:	002aedc0 	call	2aedc <__umodsi3>
   2bb74:	1004943a 	slli	r2,r2,16
   2bb78:	b808d43a 	srli	r4,r23,16
   2bb7c:	d8c00217 	ldw	r3,8(sp)
   2bb80:	2084b03a 	or	r2,r4,r2
   2bb84:	1700062e 	bgeu	r2,fp,2bba0 <__divdf3+0x3c0>
   2bb88:	1585883a 	add	r2,r2,r22
   2bb8c:	893fffc4 	addi	r4,r17,-1
   2bb90:	15811d36 	bltu	r2,r22,2c008 <__divdf3+0x828>
   2bb94:	17011c2e 	bgeu	r2,fp,2c008 <__divdf3+0x828>
   2bb98:	8c7fff84 	addi	r17,r17,-2
   2bb9c:	1585883a 	add	r2,r2,r22
   2bba0:	1739c83a 	sub	fp,r2,fp
   2bba4:	a00b883a 	mov	r5,r20
   2bba8:	e009883a 	mov	r4,fp
   2bbac:	d8c00215 	stw	r3,8(sp)
   2bbb0:	002ae780 	call	2ae78 <__udivsi3>
   2bbb4:	100b883a 	mov	r5,r2
   2bbb8:	9009883a 	mov	r4,r18
   2bbbc:	1021883a 	mov	r16,r2
   2bbc0:	00208980 	call	20898 <__mulsi3>
   2bbc4:	a00b883a 	mov	r5,r20
   2bbc8:	e009883a 	mov	r4,fp
   2bbcc:	d8800415 	stw	r2,16(sp)
   2bbd0:	002aedc0 	call	2aedc <__umodsi3>
   2bbd4:	1004943a 	slli	r2,r2,16
   2bbd8:	da000417 	ldw	r8,16(sp)
   2bbdc:	bdffffcc 	andi	r23,r23,65535
   2bbe0:	b884b03a 	or	r2,r23,r2
   2bbe4:	d8c00217 	ldw	r3,8(sp)
   2bbe8:	1200062e 	bgeu	r2,r8,2bc04 <__divdf3+0x424>
   2bbec:	1585883a 	add	r2,r2,r22
   2bbf0:	813fffc4 	addi	r4,r16,-1
   2bbf4:	15810236 	bltu	r2,r22,2c000 <__divdf3+0x820>
   2bbf8:	1201012e 	bgeu	r2,r8,2c000 <__divdf3+0x820>
   2bbfc:	843fff84 	addi	r16,r16,-2
   2bc00:	1585883a 	add	r2,r2,r22
   2bc04:	8822943a 	slli	r17,r17,16
   2bc08:	d9800017 	ldw	r6,0(sp)
   2bc0c:	1211c83a 	sub	r8,r2,r8
   2bc10:	8c22b03a 	or	r17,r17,r16
   2bc14:	373fffcc 	andi	fp,r6,65535
   2bc18:	8abfffcc 	andi	r10,r17,65535
   2bc1c:	8820d43a 	srli	r16,r17,16
   2bc20:	5009883a 	mov	r4,r10
   2bc24:	e00b883a 	mov	r5,fp
   2bc28:	302ed43a 	srli	r23,r6,16
   2bc2c:	d8c00215 	stw	r3,8(sp)
   2bc30:	da000415 	stw	r8,16(sp)
   2bc34:	da800115 	stw	r10,4(sp)
   2bc38:	00208980 	call	20898 <__mulsi3>
   2bc3c:	800b883a 	mov	r5,r16
   2bc40:	e009883a 	mov	r4,fp
   2bc44:	d8800515 	stw	r2,20(sp)
   2bc48:	00208980 	call	20898 <__mulsi3>
   2bc4c:	8009883a 	mov	r4,r16
   2bc50:	b80b883a 	mov	r5,r23
   2bc54:	d8800315 	stw	r2,12(sp)
   2bc58:	00208980 	call	20898 <__mulsi3>
   2bc5c:	da800117 	ldw	r10,4(sp)
   2bc60:	b80b883a 	mov	r5,r23
   2bc64:	1021883a 	mov	r16,r2
   2bc68:	5009883a 	mov	r4,r10
   2bc6c:	00208980 	call	20898 <__mulsi3>
   2bc70:	d9c00517 	ldw	r7,20(sp)
   2bc74:	da400317 	ldw	r9,12(sp)
   2bc78:	d8c00217 	ldw	r3,8(sp)
   2bc7c:	3808d43a 	srli	r4,r7,16
   2bc80:	1245883a 	add	r2,r2,r9
   2bc84:	da000417 	ldw	r8,16(sp)
   2bc88:	2085883a 	add	r2,r4,r2
   2bc8c:	1240022e 	bgeu	r2,r9,2bc98 <__divdf3+0x4b8>
   2bc90:	01000074 	movhi	r4,1
   2bc94:	8121883a 	add	r16,r16,r4
   2bc98:	1008d43a 	srli	r4,r2,16
   2bc9c:	1004943a 	slli	r2,r2,16
   2bca0:	39ffffcc 	andi	r7,r7,65535
   2bca4:	2409883a 	add	r4,r4,r16
   2bca8:	11c5883a 	add	r2,r2,r7
   2bcac:	4100bb36 	bltu	r8,r4,2bf9c <__divdf3+0x7bc>
   2bcb0:	4100d726 	beq	r8,r4,2c010 <__divdf3+0x830>
   2bcb4:	4109c83a 	sub	r4,r8,r4
   2bcb8:	a8a1c83a 	sub	r16,r21,r2
   2bcbc:	ac2b803a 	cmpltu	r21,r21,r16
   2bcc0:	256bc83a 	sub	r21,r4,r21
   2bcc4:	b540d926 	beq	r22,r21,2c02c <__divdf3+0x84c>
   2bcc8:	a00b883a 	mov	r5,r20
   2bccc:	a809883a 	mov	r4,r21
   2bcd0:	d8c00215 	stw	r3,8(sp)
   2bcd4:	002ae780 	call	2ae78 <__udivsi3>
   2bcd8:	100b883a 	mov	r5,r2
   2bcdc:	9009883a 	mov	r4,r18
   2bce0:	d8800515 	stw	r2,20(sp)
   2bce4:	00208980 	call	20898 <__mulsi3>
   2bce8:	a809883a 	mov	r4,r21
   2bcec:	a00b883a 	mov	r5,r20
   2bcf0:	d8800415 	stw	r2,16(sp)
   2bcf4:	002aedc0 	call	2aedc <__umodsi3>
   2bcf8:	1004943a 	slli	r2,r2,16
   2bcfc:	8008d43a 	srli	r4,r16,16
   2bd00:	da000417 	ldw	r8,16(sp)
   2bd04:	d8c00217 	ldw	r3,8(sp)
   2bd08:	2084b03a 	or	r2,r4,r2
   2bd0c:	d9c00517 	ldw	r7,20(sp)
   2bd10:	1200062e 	bgeu	r2,r8,2bd2c <__divdf3+0x54c>
   2bd14:	1585883a 	add	r2,r2,r22
   2bd18:	393fffc4 	addi	r4,r7,-1
   2bd1c:	1580c536 	bltu	r2,r22,2c034 <__divdf3+0x854>
   2bd20:	1200c42e 	bgeu	r2,r8,2c034 <__divdf3+0x854>
   2bd24:	39ffff84 	addi	r7,r7,-2
   2bd28:	1585883a 	add	r2,r2,r22
   2bd2c:	122bc83a 	sub	r21,r2,r8
   2bd30:	a00b883a 	mov	r5,r20
   2bd34:	a809883a 	mov	r4,r21
   2bd38:	d8c00215 	stw	r3,8(sp)
   2bd3c:	d9c00515 	stw	r7,20(sp)
   2bd40:	002ae780 	call	2ae78 <__udivsi3>
   2bd44:	9009883a 	mov	r4,r18
   2bd48:	100b883a 	mov	r5,r2
   2bd4c:	d8800415 	stw	r2,16(sp)
   2bd50:	00208980 	call	20898 <__mulsi3>
   2bd54:	a809883a 	mov	r4,r21
   2bd58:	a00b883a 	mov	r5,r20
   2bd5c:	1025883a 	mov	r18,r2
   2bd60:	002aedc0 	call	2aedc <__umodsi3>
   2bd64:	1004943a 	slli	r2,r2,16
   2bd68:	813fffcc 	andi	r4,r16,65535
   2bd6c:	d8c00217 	ldw	r3,8(sp)
   2bd70:	20a0b03a 	or	r16,r4,r2
   2bd74:	d9c00517 	ldw	r7,20(sp)
   2bd78:	da000417 	ldw	r8,16(sp)
   2bd7c:	8480062e 	bgeu	r16,r18,2bd98 <__divdf3+0x5b8>
   2bd80:	85a1883a 	add	r16,r16,r22
   2bd84:	40bfffc4 	addi	r2,r8,-1
   2bd88:	8580ac36 	bltu	r16,r22,2c03c <__divdf3+0x85c>
   2bd8c:	8480ab2e 	bgeu	r16,r18,2c03c <__divdf3+0x85c>
   2bd90:	423fff84 	addi	r8,r8,-2
   2bd94:	85a1883a 	add	r16,r16,r22
   2bd98:	3804943a 	slli	r2,r7,16
   2bd9c:	84a1c83a 	sub	r16,r16,r18
   2bda0:	e009883a 	mov	r4,fp
   2bda4:	1228b03a 	or	r20,r2,r8
   2bda8:	a1ffffcc 	andi	r7,r20,65535
   2bdac:	a024d43a 	srli	r18,r20,16
   2bdb0:	380b883a 	mov	r5,r7
   2bdb4:	d8c00215 	stw	r3,8(sp)
   2bdb8:	d9c00515 	stw	r7,20(sp)
   2bdbc:	00208980 	call	20898 <__mulsi3>
   2bdc0:	900b883a 	mov	r5,r18
   2bdc4:	e009883a 	mov	r4,fp
   2bdc8:	102b883a 	mov	r21,r2
   2bdcc:	00208980 	call	20898 <__mulsi3>
   2bdd0:	900b883a 	mov	r5,r18
   2bdd4:	b809883a 	mov	r4,r23
   2bdd8:	1039883a 	mov	fp,r2
   2bddc:	00208980 	call	20898 <__mulsi3>
   2bde0:	d9c00517 	ldw	r7,20(sp)
   2bde4:	b80b883a 	mov	r5,r23
   2bde8:	1025883a 	mov	r18,r2
   2bdec:	3809883a 	mov	r4,r7
   2bdf0:	00208980 	call	20898 <__mulsi3>
   2bdf4:	a808d43a 	srli	r4,r21,16
   2bdf8:	1705883a 	add	r2,r2,fp
   2bdfc:	d8c00217 	ldw	r3,8(sp)
   2be00:	2085883a 	add	r2,r4,r2
   2be04:	1700022e 	bgeu	r2,fp,2be10 <__divdf3+0x630>
   2be08:	01000074 	movhi	r4,1
   2be0c:	9125883a 	add	r18,r18,r4
   2be10:	1008d43a 	srli	r4,r2,16
   2be14:	1004943a 	slli	r2,r2,16
   2be18:	ad7fffcc 	andi	r21,r21,65535
   2be1c:	2489883a 	add	r4,r4,r18
   2be20:	1545883a 	add	r2,r2,r21
   2be24:	81003836 	bltu	r16,r4,2bf08 <__divdf3+0x728>
   2be28:	81003626 	beq	r16,r4,2bf04 <__divdf3+0x724>
   2be2c:	a5000054 	ori	r20,r20,1
   2be30:	1880ffc4 	addi	r2,r3,1023
   2be34:	00bf2e0e 	bge	zero,r2,2baf0 <_gp+0xffff098c>
   2be38:	a10001cc 	andi	r4,r20,7
   2be3c:	20000726 	beq	r4,zero,2be5c <__divdf3+0x67c>
   2be40:	a10003cc 	andi	r4,r20,15
   2be44:	01400104 	movi	r5,4
   2be48:	21400426 	beq	r4,r5,2be5c <__divdf3+0x67c>
   2be4c:	a149883a 	add	r4,r20,r5
   2be50:	2529803a 	cmpltu	r20,r4,r20
   2be54:	8d23883a 	add	r17,r17,r20
   2be58:	2029883a 	mov	r20,r4
   2be5c:	8900402c 	andhi	r4,r17,256
   2be60:	20000426 	beq	r4,zero,2be74 <__divdf3+0x694>
   2be64:	18810004 	addi	r2,r3,1024
   2be68:	00ffc034 	movhi	r3,65280
   2be6c:	18ffffc4 	addi	r3,r3,-1
   2be70:	88e2703a 	and	r17,r17,r3
   2be74:	00c1ff84 	movi	r3,2046
   2be78:	18beb416 	blt	r3,r2,2b94c <_gp+0xffff07e8>
   2be7c:	a028d0fa 	srli	r20,r20,3
   2be80:	882a977a 	slli	r21,r17,29
   2be84:	8820927a 	slli	r16,r17,9
   2be88:	1081ffcc 	andi	r2,r2,2047
   2be8c:	ad2ab03a 	or	r21,r21,r20
   2be90:	8020d33a 	srli	r16,r16,12
   2be94:	9900004c 	andi	r4,r19,1
   2be98:	003eb006 	br	2b95c <_gp+0xffff07f8>
   2be9c:	8080022c 	andhi	r2,r16,8
   2bea0:	10001226 	beq	r2,zero,2beec <__divdf3+0x70c>
   2bea4:	8880022c 	andhi	r2,r17,8
   2bea8:	1000101e 	bne	r2,zero,2beec <__divdf3+0x70c>
   2beac:	00800434 	movhi	r2,16
   2beb0:	8c000234 	orhi	r16,r17,8
   2beb4:	10bfffc4 	addi	r2,r2,-1
   2beb8:	b809883a 	mov	r4,r23
   2bebc:	80a0703a 	and	r16,r16,r2
   2bec0:	a02b883a 	mov	r21,r20
   2bec4:	003f0806 	br	2bae8 <_gp+0xffff0984>
   2bec8:	008000c4 	movi	r2,3
   2becc:	3880b126 	beq	r7,r2,2c194 <__divdf3+0x9b4>
   2bed0:	00800044 	movi	r2,1
   2bed4:	38805b1e 	bne	r7,r2,2c044 <__divdf3+0x864>
   2bed8:	e009883a 	mov	r4,fp
   2bedc:	0005883a 	mov	r2,zero
   2bee0:	0021883a 	mov	r16,zero
   2bee4:	002b883a 	mov	r21,zero
   2bee8:	003e9c06 	br	2b95c <_gp+0xffff07f8>
   2beec:	00800434 	movhi	r2,16
   2bef0:	84000234 	orhi	r16,r16,8
   2bef4:	10bfffc4 	addi	r2,r2,-1
   2bef8:	b009883a 	mov	r4,r22
   2befc:	80a0703a 	and	r16,r16,r2
   2bf00:	003ef906 	br	2bae8 <_gp+0xffff0984>
   2bf04:	103fca26 	beq	r2,zero,2be30 <_gp+0xffff0ccc>
   2bf08:	b421883a 	add	r16,r22,r16
   2bf0c:	a17fffc4 	addi	r5,r20,-1
   2bf10:	8580422e 	bgeu	r16,r22,2c01c <__divdf3+0x83c>
   2bf14:	2829883a 	mov	r20,r5
   2bf18:	813fc41e 	bne	r16,r4,2be2c <_gp+0xffff0cc8>
   2bf1c:	d9800017 	ldw	r6,0(sp)
   2bf20:	30bfc21e 	bne	r6,r2,2be2c <_gp+0xffff0cc8>
   2bf24:	003fc206 	br	2be30 <_gp+0xffff0ccc>
   2bf28:	143ff604 	addi	r16,r2,-40
   2bf2c:	8c20983a 	sll	r16,r17,r16
   2bf30:	002b883a 	mov	r21,zero
   2bf34:	003eb406 	br	2ba08 <_gp+0xffff08a4>
   2bf38:	d9800215 	stw	r6,8(sp)
   2bf3c:	d9c00515 	stw	r7,20(sp)
   2bf40:	da000415 	stw	r8,16(sp)
   2bf44:	002d7740 	call	2d774 <__clzsi2>
   2bf48:	10800804 	addi	r2,r2,32
   2bf4c:	da000417 	ldw	r8,16(sp)
   2bf50:	d9c00517 	ldw	r7,20(sp)
   2bf54:	d9800217 	ldw	r6,8(sp)
   2bf58:	003ea106 	br	2b9e0 <_gp+0xffff087c>
   2bf5c:	147ff604 	addi	r17,r2,-40
   2bf60:	3462983a 	sll	r17,r6,r17
   2bf64:	0029883a 	mov	r20,zero
   2bf68:	003ec906 	br	2ba90 <_gp+0xffff092c>
   2bf6c:	3009883a 	mov	r4,r6
   2bf70:	d9400115 	stw	r5,4(sp)
   2bf74:	d9800215 	stw	r6,8(sp)
   2bf78:	da000415 	stw	r8,16(sp)
   2bf7c:	da400315 	stw	r9,12(sp)
   2bf80:	002d7740 	call	2d774 <__clzsi2>
   2bf84:	10800804 	addi	r2,r2,32
   2bf88:	da400317 	ldw	r9,12(sp)
   2bf8c:	da000417 	ldw	r8,16(sp)
   2bf90:	d9800217 	ldw	r6,8(sp)
   2bf94:	d9400117 	ldw	r5,4(sp)
   2bf98:	003eb306 	br	2ba68 <_gp+0xffff0904>
   2bf9c:	d9800017 	ldw	r6,0(sp)
   2bfa0:	a9ab883a 	add	r21,r21,r6
   2bfa4:	a98b803a 	cmpltu	r5,r21,r6
   2bfa8:	2d8b883a 	add	r5,r5,r22
   2bfac:	2a11883a 	add	r8,r5,r8
   2bfb0:	897fffc4 	addi	r5,r17,-1
   2bfb4:	b2000c2e 	bgeu	r22,r8,2bfe8 <__divdf3+0x808>
   2bfb8:	41003f36 	bltu	r8,r4,2c0b8 <__divdf3+0x8d8>
   2bfbc:	22006c26 	beq	r4,r8,2c170 <__divdf3+0x990>
   2bfc0:	4109c83a 	sub	r4,r8,r4
   2bfc4:	2823883a 	mov	r17,r5
   2bfc8:	003f3b06 	br	2bcb8 <_gp+0xffff0b54>
   2bfcc:	ad3ed336 	bltu	r21,r20,2bb1c <_gp+0xffff09b8>
   2bfd0:	a804d07a 	srli	r2,r21,1
   2bfd4:	802e97fa 	slli	r23,r16,31
   2bfd8:	a82a97fa 	slli	r21,r21,31
   2bfdc:	8020d07a 	srli	r16,r16,1
   2bfe0:	b8aeb03a 	or	r23,r23,r2
   2bfe4:	003ed006 	br	2bb28 <_gp+0xffff09c4>
   2bfe8:	b23ff51e 	bne	r22,r8,2bfc0 <_gp+0xffff0e5c>
   2bfec:	d9800017 	ldw	r6,0(sp)
   2bff0:	a9bff12e 	bgeu	r21,r6,2bfb8 <_gp+0xffff0e54>
   2bff4:	b109c83a 	sub	r4,r22,r4
   2bff8:	2823883a 	mov	r17,r5
   2bffc:	003f2e06 	br	2bcb8 <_gp+0xffff0b54>
   2c000:	2021883a 	mov	r16,r4
   2c004:	003eff06 	br	2bc04 <_gp+0xffff0aa0>
   2c008:	2023883a 	mov	r17,r4
   2c00c:	003ee406 	br	2bba0 <_gp+0xffff0a3c>
   2c010:	a8bfe236 	bltu	r21,r2,2bf9c <_gp+0xffff0e38>
   2c014:	0009883a 	mov	r4,zero
   2c018:	003f2706 	br	2bcb8 <_gp+0xffff0b54>
   2c01c:	81002d36 	bltu	r16,r4,2c0d4 <__divdf3+0x8f4>
   2c020:	24005626 	beq	r4,r16,2c17c <__divdf3+0x99c>
   2c024:	2829883a 	mov	r20,r5
   2c028:	003f8006 	br	2be2c <_gp+0xffff0cc8>
   2c02c:	053fffc4 	movi	r20,-1
   2c030:	003f7f06 	br	2be30 <_gp+0xffff0ccc>
   2c034:	200f883a 	mov	r7,r4
   2c038:	003f3c06 	br	2bd2c <_gp+0xffff0bc8>
   2c03c:	1011883a 	mov	r8,r2
   2c040:	003f5506 	br	2bd98 <_gp+0xffff0c34>
   2c044:	e027883a 	mov	r19,fp
   2c048:	003f7906 	br	2be30 <_gp+0xffff0ccc>
   2c04c:	010007c4 	movi	r4,31
   2c050:	20c02816 	blt	r4,r3,2c0f4 <__divdf3+0x914>
   2c054:	00800804 	movi	r2,32
   2c058:	10c5c83a 	sub	r2,r2,r3
   2c05c:	888a983a 	sll	r5,r17,r2
   2c060:	a0c8d83a 	srl	r4,r20,r3
   2c064:	a084983a 	sll	r2,r20,r2
   2c068:	88e2d83a 	srl	r17,r17,r3
   2c06c:	2906b03a 	or	r3,r5,r4
   2c070:	1004c03a 	cmpne	r2,r2,zero
   2c074:	1886b03a 	or	r3,r3,r2
   2c078:	188001cc 	andi	r2,r3,7
   2c07c:	10000726 	beq	r2,zero,2c09c <__divdf3+0x8bc>
   2c080:	188003cc 	andi	r2,r3,15
   2c084:	01000104 	movi	r4,4
   2c088:	11000426 	beq	r2,r4,2c09c <__divdf3+0x8bc>
   2c08c:	1805883a 	mov	r2,r3
   2c090:	10c00104 	addi	r3,r2,4
   2c094:	1885803a 	cmpltu	r2,r3,r2
   2c098:	88a3883a 	add	r17,r17,r2
   2c09c:	8880202c 	andhi	r2,r17,128
   2c0a0:	10002926 	beq	r2,zero,2c148 <__divdf3+0x968>
   2c0a4:	9900004c 	andi	r4,r19,1
   2c0a8:	00800044 	movi	r2,1
   2c0ac:	0021883a 	mov	r16,zero
   2c0b0:	002b883a 	mov	r21,zero
   2c0b4:	003e2906 	br	2b95c <_gp+0xffff07f8>
   2c0b8:	d9800017 	ldw	r6,0(sp)
   2c0bc:	8c7fff84 	addi	r17,r17,-2
   2c0c0:	a9ab883a 	add	r21,r21,r6
   2c0c4:	a98b803a 	cmpltu	r5,r21,r6
   2c0c8:	2d8b883a 	add	r5,r5,r22
   2c0cc:	2a11883a 	add	r8,r5,r8
   2c0d0:	003ef806 	br	2bcb4 <_gp+0xffff0b50>
   2c0d4:	d9800017 	ldw	r6,0(sp)
   2c0d8:	318f883a 	add	r7,r6,r6
   2c0dc:	398b803a 	cmpltu	r5,r7,r6
   2c0e0:	2d8d883a 	add	r6,r5,r22
   2c0e4:	81a1883a 	add	r16,r16,r6
   2c0e8:	a17fff84 	addi	r5,r20,-2
   2c0ec:	d9c00015 	stw	r7,0(sp)
   2c0f0:	003f8806 	br	2bf14 <_gp+0xffff0db0>
   2c0f4:	013ff844 	movi	r4,-31
   2c0f8:	2085c83a 	sub	r2,r4,r2
   2c0fc:	8888d83a 	srl	r4,r17,r2
   2c100:	00800804 	movi	r2,32
   2c104:	18802126 	beq	r3,r2,2c18c <__divdf3+0x9ac>
   2c108:	04001004 	movi	r16,64
   2c10c:	80c7c83a 	sub	r3,r16,r3
   2c110:	88e0983a 	sll	r16,r17,r3
   2c114:	8504b03a 	or	r2,r16,r20
   2c118:	1004c03a 	cmpne	r2,r2,zero
   2c11c:	2084b03a 	or	r2,r4,r2
   2c120:	144001cc 	andi	r17,r2,7
   2c124:	88000d1e 	bne	r17,zero,2c15c <__divdf3+0x97c>
   2c128:	0021883a 	mov	r16,zero
   2c12c:	102ad0fa 	srli	r21,r2,3
   2c130:	9900004c 	andi	r4,r19,1
   2c134:	0005883a 	mov	r2,zero
   2c138:	ac6ab03a 	or	r21,r21,r17
   2c13c:	003e0706 	br	2b95c <_gp+0xffff07f8>
   2c140:	1007883a 	mov	r3,r2
   2c144:	0023883a 	mov	r17,zero
   2c148:	8820927a 	slli	r16,r17,9
   2c14c:	1805883a 	mov	r2,r3
   2c150:	8822977a 	slli	r17,r17,29
   2c154:	8020d33a 	srli	r16,r16,12
   2c158:	003ff406 	br	2c12c <_gp+0xffff0fc8>
   2c15c:	10c003cc 	andi	r3,r2,15
   2c160:	01000104 	movi	r4,4
   2c164:	193ff626 	beq	r3,r4,2c140 <_gp+0xffff0fdc>
   2c168:	0023883a 	mov	r17,zero
   2c16c:	003fc806 	br	2c090 <_gp+0xffff0f2c>
   2c170:	a8bfd136 	bltu	r21,r2,2c0b8 <_gp+0xffff0f54>
   2c174:	2823883a 	mov	r17,r5
   2c178:	003fa606 	br	2c014 <_gp+0xffff0eb0>
   2c17c:	d9800017 	ldw	r6,0(sp)
   2c180:	30bfd436 	bltu	r6,r2,2c0d4 <_gp+0xffff0f70>
   2c184:	2829883a 	mov	r20,r5
   2c188:	003f6406 	br	2bf1c <_gp+0xffff0db8>
   2c18c:	0021883a 	mov	r16,zero
   2c190:	003fe006 	br	2c114 <_gp+0xffff0fb0>
   2c194:	00800434 	movhi	r2,16
   2c198:	8c000234 	orhi	r16,r17,8
   2c19c:	10bfffc4 	addi	r2,r2,-1
   2c1a0:	e009883a 	mov	r4,fp
   2c1a4:	80a0703a 	and	r16,r16,r2
   2c1a8:	a02b883a 	mov	r21,r20
   2c1ac:	003e4e06 	br	2bae8 <_gp+0xffff0984>

0002c1b0 <__eqdf2>:
   2c1b0:	2804d53a 	srli	r2,r5,20
   2c1b4:	3806d53a 	srli	r3,r7,20
   2c1b8:	02000434 	movhi	r8,16
   2c1bc:	423fffc4 	addi	r8,r8,-1
   2c1c0:	1081ffcc 	andi	r2,r2,2047
   2c1c4:	0281ffc4 	movi	r10,2047
   2c1c8:	2a12703a 	and	r9,r5,r8
   2c1cc:	18c1ffcc 	andi	r3,r3,2047
   2c1d0:	3a10703a 	and	r8,r7,r8
   2c1d4:	280ad7fa 	srli	r5,r5,31
   2c1d8:	380ed7fa 	srli	r7,r7,31
   2c1dc:	12801026 	beq	r2,r10,2c220 <__eqdf2+0x70>
   2c1e0:	0281ffc4 	movi	r10,2047
   2c1e4:	1a800a26 	beq	r3,r10,2c210 <__eqdf2+0x60>
   2c1e8:	10c00226 	beq	r2,r3,2c1f4 <__eqdf2+0x44>
   2c1ec:	00800044 	movi	r2,1
   2c1f0:	f800283a 	ret
   2c1f4:	4a3ffd1e 	bne	r9,r8,2c1ec <_gp+0xffff1088>
   2c1f8:	21bffc1e 	bne	r4,r6,2c1ec <_gp+0xffff1088>
   2c1fc:	29c00c26 	beq	r5,r7,2c230 <__eqdf2+0x80>
   2c200:	103ffa1e 	bne	r2,zero,2c1ec <_gp+0xffff1088>
   2c204:	2244b03a 	or	r2,r4,r9
   2c208:	1004c03a 	cmpne	r2,r2,zero
   2c20c:	f800283a 	ret
   2c210:	3214b03a 	or	r10,r6,r8
   2c214:	503ff426 	beq	r10,zero,2c1e8 <_gp+0xffff1084>
   2c218:	00800044 	movi	r2,1
   2c21c:	f800283a 	ret
   2c220:	2254b03a 	or	r10,r4,r9
   2c224:	503fee26 	beq	r10,zero,2c1e0 <_gp+0xffff107c>
   2c228:	00800044 	movi	r2,1
   2c22c:	f800283a 	ret
   2c230:	0005883a 	mov	r2,zero
   2c234:	f800283a 	ret

0002c238 <__gedf2>:
   2c238:	2804d53a 	srli	r2,r5,20
   2c23c:	3806d53a 	srli	r3,r7,20
   2c240:	02000434 	movhi	r8,16
   2c244:	423fffc4 	addi	r8,r8,-1
   2c248:	1081ffcc 	andi	r2,r2,2047
   2c24c:	0241ffc4 	movi	r9,2047
   2c250:	2a14703a 	and	r10,r5,r8
   2c254:	18c1ffcc 	andi	r3,r3,2047
   2c258:	3a10703a 	and	r8,r7,r8
   2c25c:	280ad7fa 	srli	r5,r5,31
   2c260:	380ed7fa 	srli	r7,r7,31
   2c264:	12401d26 	beq	r2,r9,2c2dc <__gedf2+0xa4>
   2c268:	0241ffc4 	movi	r9,2047
   2c26c:	1a401226 	beq	r3,r9,2c2b8 <__gedf2+0x80>
   2c270:	1000081e 	bne	r2,zero,2c294 <__gedf2+0x5c>
   2c274:	2296b03a 	or	r11,r4,r10
   2c278:	5813003a 	cmpeq	r9,r11,zero
   2c27c:	1800091e 	bne	r3,zero,2c2a4 <__gedf2+0x6c>
   2c280:	3218b03a 	or	r12,r6,r8
   2c284:	6000071e 	bne	r12,zero,2c2a4 <__gedf2+0x6c>
   2c288:	0005883a 	mov	r2,zero
   2c28c:	5800101e 	bne	r11,zero,2c2d0 <__gedf2+0x98>
   2c290:	f800283a 	ret
   2c294:	18000c1e 	bne	r3,zero,2c2c8 <__gedf2+0x90>
   2c298:	3212b03a 	or	r9,r6,r8
   2c29c:	48000c26 	beq	r9,zero,2c2d0 <__gedf2+0x98>
   2c2a0:	0013883a 	mov	r9,zero
   2c2a4:	39c03fcc 	andi	r7,r7,255
   2c2a8:	48000826 	beq	r9,zero,2c2cc <__gedf2+0x94>
   2c2ac:	38000926 	beq	r7,zero,2c2d4 <__gedf2+0x9c>
   2c2b0:	00800044 	movi	r2,1
   2c2b4:	f800283a 	ret
   2c2b8:	3212b03a 	or	r9,r6,r8
   2c2bc:	483fec26 	beq	r9,zero,2c270 <_gp+0xffff110c>
   2c2c0:	00bfff84 	movi	r2,-2
   2c2c4:	f800283a 	ret
   2c2c8:	39c03fcc 	andi	r7,r7,255
   2c2cc:	29c00626 	beq	r5,r7,2c2e8 <__gedf2+0xb0>
   2c2d0:	283ff726 	beq	r5,zero,2c2b0 <_gp+0xffff114c>
   2c2d4:	00bfffc4 	movi	r2,-1
   2c2d8:	f800283a 	ret
   2c2dc:	2292b03a 	or	r9,r4,r10
   2c2e0:	483fe126 	beq	r9,zero,2c268 <_gp+0xffff1104>
   2c2e4:	003ff606 	br	2c2c0 <_gp+0xffff115c>
   2c2e8:	18bff916 	blt	r3,r2,2c2d0 <_gp+0xffff116c>
   2c2ec:	10c00316 	blt	r2,r3,2c2fc <__gedf2+0xc4>
   2c2f0:	42bff736 	bltu	r8,r10,2c2d0 <_gp+0xffff116c>
   2c2f4:	52000326 	beq	r10,r8,2c304 <__gedf2+0xcc>
   2c2f8:	5200042e 	bgeu	r10,r8,2c30c <__gedf2+0xd4>
   2c2fc:	283fec1e 	bne	r5,zero,2c2b0 <_gp+0xffff114c>
   2c300:	003ff406 	br	2c2d4 <_gp+0xffff1170>
   2c304:	313ff236 	bltu	r6,r4,2c2d0 <_gp+0xffff116c>
   2c308:	21bffc36 	bltu	r4,r6,2c2fc <_gp+0xffff1198>
   2c30c:	0005883a 	mov	r2,zero
   2c310:	f800283a 	ret

0002c314 <__ledf2>:
   2c314:	2804d53a 	srli	r2,r5,20
   2c318:	3810d53a 	srli	r8,r7,20
   2c31c:	00c00434 	movhi	r3,16
   2c320:	18ffffc4 	addi	r3,r3,-1
   2c324:	1081ffcc 	andi	r2,r2,2047
   2c328:	0241ffc4 	movi	r9,2047
   2c32c:	28d4703a 	and	r10,r5,r3
   2c330:	4201ffcc 	andi	r8,r8,2047
   2c334:	38c6703a 	and	r3,r7,r3
   2c338:	280ad7fa 	srli	r5,r5,31
   2c33c:	380ed7fa 	srli	r7,r7,31
   2c340:	12401f26 	beq	r2,r9,2c3c0 <__ledf2+0xac>
   2c344:	0241ffc4 	movi	r9,2047
   2c348:	42401426 	beq	r8,r9,2c39c <__ledf2+0x88>
   2c34c:	1000091e 	bne	r2,zero,2c374 <__ledf2+0x60>
   2c350:	2296b03a 	or	r11,r4,r10
   2c354:	5813003a 	cmpeq	r9,r11,zero
   2c358:	29403fcc 	andi	r5,r5,255
   2c35c:	40000a1e 	bne	r8,zero,2c388 <__ledf2+0x74>
   2c360:	30d8b03a 	or	r12,r6,r3
   2c364:	6000081e 	bne	r12,zero,2c388 <__ledf2+0x74>
   2c368:	0005883a 	mov	r2,zero
   2c36c:	5800111e 	bne	r11,zero,2c3b4 <__ledf2+0xa0>
   2c370:	f800283a 	ret
   2c374:	29403fcc 	andi	r5,r5,255
   2c378:	40000c1e 	bne	r8,zero,2c3ac <__ledf2+0x98>
   2c37c:	30d2b03a 	or	r9,r6,r3
   2c380:	48000c26 	beq	r9,zero,2c3b4 <__ledf2+0xa0>
   2c384:	0013883a 	mov	r9,zero
   2c388:	39c03fcc 	andi	r7,r7,255
   2c38c:	48000826 	beq	r9,zero,2c3b0 <__ledf2+0x9c>
   2c390:	38001126 	beq	r7,zero,2c3d8 <__ledf2+0xc4>
   2c394:	00800044 	movi	r2,1
   2c398:	f800283a 	ret
   2c39c:	30d2b03a 	or	r9,r6,r3
   2c3a0:	483fea26 	beq	r9,zero,2c34c <_gp+0xffff11e8>
   2c3a4:	00800084 	movi	r2,2
   2c3a8:	f800283a 	ret
   2c3ac:	39c03fcc 	andi	r7,r7,255
   2c3b0:	39400726 	beq	r7,r5,2c3d0 <__ledf2+0xbc>
   2c3b4:	2800081e 	bne	r5,zero,2c3d8 <__ledf2+0xc4>
   2c3b8:	00800044 	movi	r2,1
   2c3bc:	f800283a 	ret
   2c3c0:	2292b03a 	or	r9,r4,r10
   2c3c4:	483fdf26 	beq	r9,zero,2c344 <_gp+0xffff11e0>
   2c3c8:	00800084 	movi	r2,2
   2c3cc:	f800283a 	ret
   2c3d0:	4080030e 	bge	r8,r2,2c3e0 <__ledf2+0xcc>
   2c3d4:	383fef26 	beq	r7,zero,2c394 <_gp+0xffff1230>
   2c3d8:	00bfffc4 	movi	r2,-1
   2c3dc:	f800283a 	ret
   2c3e0:	123feb16 	blt	r2,r8,2c390 <_gp+0xffff122c>
   2c3e4:	1abff336 	bltu	r3,r10,2c3b4 <_gp+0xffff1250>
   2c3e8:	50c00326 	beq	r10,r3,2c3f8 <__ledf2+0xe4>
   2c3ec:	50c0042e 	bgeu	r10,r3,2c400 <__ledf2+0xec>
   2c3f0:	283fe81e 	bne	r5,zero,2c394 <_gp+0xffff1230>
   2c3f4:	003ff806 	br	2c3d8 <_gp+0xffff1274>
   2c3f8:	313fee36 	bltu	r6,r4,2c3b4 <_gp+0xffff1250>
   2c3fc:	21bffc36 	bltu	r4,r6,2c3f0 <_gp+0xffff128c>
   2c400:	0005883a 	mov	r2,zero
   2c404:	f800283a 	ret

0002c408 <__muldf3>:
   2c408:	deffee04 	addi	sp,sp,-72
   2c40c:	dd000c15 	stw	r20,48(sp)
   2c410:	2828d53a 	srli	r20,r5,20
   2c414:	ddc00f15 	stw	r23,60(sp)
   2c418:	282ed7fa 	srli	r23,r5,31
   2c41c:	dc000815 	stw	r16,32(sp)
   2c420:	04000434 	movhi	r16,16
   2c424:	dcc00b15 	stw	r19,44(sp)
   2c428:	843fffc4 	addi	r16,r16,-1
   2c42c:	dfc01115 	stw	ra,68(sp)
   2c430:	df001015 	stw	fp,64(sp)
   2c434:	dd800e15 	stw	r22,56(sp)
   2c438:	dd400d15 	stw	r21,52(sp)
   2c43c:	dc800a15 	stw	r18,40(sp)
   2c440:	dc400915 	stw	r17,36(sp)
   2c444:	a501ffcc 	andi	r20,r20,2047
   2c448:	2c20703a 	and	r16,r5,r16
   2c44c:	b827883a 	mov	r19,r23
   2c450:	ba403fcc 	andi	r9,r23,255
   2c454:	a0006026 	beq	r20,zero,2c5d8 <__muldf3+0x1d0>
   2c458:	0081ffc4 	movi	r2,2047
   2c45c:	202d883a 	mov	r22,r4
   2c460:	a0803626 	beq	r20,r2,2c53c <__muldf3+0x134>
   2c464:	84000434 	orhi	r16,r16,16
   2c468:	200ad77a 	srli	r5,r4,29
   2c46c:	800490fa 	slli	r2,r16,3
   2c470:	202c90fa 	slli	r22,r4,3
   2c474:	a53f0044 	addi	r20,r20,-1023
   2c478:	28a0b03a 	or	r16,r5,r2
   2c47c:	002b883a 	mov	r21,zero
   2c480:	000b883a 	mov	r5,zero
   2c484:	3804d53a 	srli	r2,r7,20
   2c488:	3838d7fa 	srli	fp,r7,31
   2c48c:	04400434 	movhi	r17,16
   2c490:	8c7fffc4 	addi	r17,r17,-1
   2c494:	1081ffcc 	andi	r2,r2,2047
   2c498:	3025883a 	mov	r18,r6
   2c49c:	3c62703a 	and	r17,r7,r17
   2c4a0:	e2803fcc 	andi	r10,fp,255
   2c4a4:	10006d26 	beq	r2,zero,2c65c <__muldf3+0x254>
   2c4a8:	00c1ffc4 	movi	r3,2047
   2c4ac:	10c06526 	beq	r2,r3,2c644 <__muldf3+0x23c>
   2c4b0:	8c400434 	orhi	r17,r17,16
   2c4b4:	300ed77a 	srli	r7,r6,29
   2c4b8:	880690fa 	slli	r3,r17,3
   2c4bc:	302490fa 	slli	r18,r6,3
   2c4c0:	10bf0044 	addi	r2,r2,-1023
   2c4c4:	38e2b03a 	or	r17,r7,r3
   2c4c8:	000f883a 	mov	r7,zero
   2c4cc:	a087883a 	add	r3,r20,r2
   2c4d0:	010003c4 	movi	r4,15
   2c4d4:	3d44b03a 	or	r2,r7,r21
   2c4d8:	e5ccf03a 	xor	r6,fp,r23
   2c4dc:	1a000044 	addi	r8,r3,1
   2c4e0:	20809b36 	bltu	r4,r2,2c750 <__muldf3+0x348>
   2c4e4:	100490ba 	slli	r2,r2,2
   2c4e8:	010000f4 	movhi	r4,3
   2c4ec:	21313f04 	addi	r4,r4,-15108
   2c4f0:	1105883a 	add	r2,r2,r4
   2c4f4:	10800017 	ldw	r2,0(r2)
   2c4f8:	1000683a 	jmp	r2
   2c4fc:	0002c750 	cmplti	zero,zero,2845
   2c500:	0002c55c 	xori	zero,zero,2837
   2c504:	0002c55c 	xori	zero,zero,2837
   2c508:	0002c558 	cmpnei	zero,zero,2837
   2c50c:	0002c72c 	andhi	zero,zero,2844
   2c510:	0002c72c 	andhi	zero,zero,2844
   2c514:	0002c714 	movui	zero,2844
   2c518:	0002c558 	cmpnei	zero,zero,2837
   2c51c:	0002c72c 	andhi	zero,zero,2844
   2c520:	0002c714 	movui	zero,2844
   2c524:	0002c72c 	andhi	zero,zero,2844
   2c528:	0002c558 	cmpnei	zero,zero,2837
   2c52c:	0002c73c 	xorhi	zero,zero,2844
   2c530:	0002c73c 	xorhi	zero,zero,2844
   2c534:	0002c73c 	xorhi	zero,zero,2844
   2c538:	0002ca9c 	xori	zero,zero,2858
   2c53c:	2404b03a 	or	r2,r4,r16
   2c540:	1000711e 	bne	r2,zero,2c708 <__muldf3+0x300>
   2c544:	05400204 	movi	r21,8
   2c548:	0021883a 	mov	r16,zero
   2c54c:	002d883a 	mov	r22,zero
   2c550:	01400084 	movi	r5,2
   2c554:	003fcb06 	br	2c484 <_gp+0xffff1320>
   2c558:	500d883a 	mov	r6,r10
   2c55c:	00800084 	movi	r2,2
   2c560:	38805926 	beq	r7,r2,2c6c8 <__muldf3+0x2c0>
   2c564:	008000c4 	movi	r2,3
   2c568:	3881bb26 	beq	r7,r2,2cc58 <__muldf3+0x850>
   2c56c:	00800044 	movi	r2,1
   2c570:	3881961e 	bne	r7,r2,2cbcc <__muldf3+0x7c4>
   2c574:	3027883a 	mov	r19,r6
   2c578:	0005883a 	mov	r2,zero
   2c57c:	0021883a 	mov	r16,zero
   2c580:	002d883a 	mov	r22,zero
   2c584:	1004953a 	slli	r2,r2,20
   2c588:	98c03fcc 	andi	r3,r19,255
   2c58c:	04400434 	movhi	r17,16
   2c590:	8c7fffc4 	addi	r17,r17,-1
   2c594:	180697fa 	slli	r3,r3,31
   2c598:	8460703a 	and	r16,r16,r17
   2c59c:	80a0b03a 	or	r16,r16,r2
   2c5a0:	80c6b03a 	or	r3,r16,r3
   2c5a4:	b005883a 	mov	r2,r22
   2c5a8:	dfc01117 	ldw	ra,68(sp)
   2c5ac:	df001017 	ldw	fp,64(sp)
   2c5b0:	ddc00f17 	ldw	r23,60(sp)
   2c5b4:	dd800e17 	ldw	r22,56(sp)
   2c5b8:	dd400d17 	ldw	r21,52(sp)
   2c5bc:	dd000c17 	ldw	r20,48(sp)
   2c5c0:	dcc00b17 	ldw	r19,44(sp)
   2c5c4:	dc800a17 	ldw	r18,40(sp)
   2c5c8:	dc400917 	ldw	r17,36(sp)
   2c5cc:	dc000817 	ldw	r16,32(sp)
   2c5d0:	dec01204 	addi	sp,sp,72
   2c5d4:	f800283a 	ret
   2c5d8:	2404b03a 	or	r2,r4,r16
   2c5dc:	202b883a 	mov	r21,r4
   2c5e0:	10004426 	beq	r2,zero,2c6f4 <__muldf3+0x2ec>
   2c5e4:	80015126 	beq	r16,zero,2cb2c <__muldf3+0x724>
   2c5e8:	8009883a 	mov	r4,r16
   2c5ec:	d9800715 	stw	r6,28(sp)
   2c5f0:	d9c00215 	stw	r7,8(sp)
   2c5f4:	da400415 	stw	r9,16(sp)
   2c5f8:	002d7740 	call	2d774 <__clzsi2>
   2c5fc:	d9800717 	ldw	r6,28(sp)
   2c600:	d9c00217 	ldw	r7,8(sp)
   2c604:	da400417 	ldw	r9,16(sp)
   2c608:	113ffd44 	addi	r4,r2,-11
   2c60c:	00c00704 	movi	r3,28
   2c610:	19014216 	blt	r3,r4,2cb1c <__muldf3+0x714>
   2c614:	00c00744 	movi	r3,29
   2c618:	15bffe04 	addi	r22,r2,-8
   2c61c:	1907c83a 	sub	r3,r3,r4
   2c620:	85a0983a 	sll	r16,r16,r22
   2c624:	a8c6d83a 	srl	r3,r21,r3
   2c628:	adac983a 	sll	r22,r21,r22
   2c62c:	1c20b03a 	or	r16,r3,r16
   2c630:	1080fcc4 	addi	r2,r2,1011
   2c634:	00a9c83a 	sub	r20,zero,r2
   2c638:	002b883a 	mov	r21,zero
   2c63c:	000b883a 	mov	r5,zero
   2c640:	003f9006 	br	2c484 <_gp+0xffff1320>
   2c644:	3446b03a 	or	r3,r6,r17
   2c648:	1800281e 	bne	r3,zero,2c6ec <__muldf3+0x2e4>
   2c64c:	0023883a 	mov	r17,zero
   2c650:	0025883a 	mov	r18,zero
   2c654:	01c00084 	movi	r7,2
   2c658:	003f9c06 	br	2c4cc <_gp+0xffff1368>
   2c65c:	3446b03a 	or	r3,r6,r17
   2c660:	18001e26 	beq	r3,zero,2c6dc <__muldf3+0x2d4>
   2c664:	88012126 	beq	r17,zero,2caec <__muldf3+0x6e4>
   2c668:	8809883a 	mov	r4,r17
   2c66c:	d9400215 	stw	r5,8(sp)
   2c670:	d9800715 	stw	r6,28(sp)
   2c674:	da400415 	stw	r9,16(sp)
   2c678:	da800315 	stw	r10,12(sp)
   2c67c:	002d7740 	call	2d774 <__clzsi2>
   2c680:	d9400217 	ldw	r5,8(sp)
   2c684:	d9800717 	ldw	r6,28(sp)
   2c688:	da400417 	ldw	r9,16(sp)
   2c68c:	da800317 	ldw	r10,12(sp)
   2c690:	113ffd44 	addi	r4,r2,-11
   2c694:	00c00704 	movi	r3,28
   2c698:	19011016 	blt	r3,r4,2cadc <__muldf3+0x6d4>
   2c69c:	00c00744 	movi	r3,29
   2c6a0:	14bffe04 	addi	r18,r2,-8
   2c6a4:	1907c83a 	sub	r3,r3,r4
   2c6a8:	8ca2983a 	sll	r17,r17,r18
   2c6ac:	30c6d83a 	srl	r3,r6,r3
   2c6b0:	34a4983a 	sll	r18,r6,r18
   2c6b4:	1c62b03a 	or	r17,r3,r17
   2c6b8:	1080fcc4 	addi	r2,r2,1011
   2c6bc:	0085c83a 	sub	r2,zero,r2
   2c6c0:	000f883a 	mov	r7,zero
   2c6c4:	003f8106 	br	2c4cc <_gp+0xffff1368>
   2c6c8:	3027883a 	mov	r19,r6
   2c6cc:	0081ffc4 	movi	r2,2047
   2c6d0:	0021883a 	mov	r16,zero
   2c6d4:	002d883a 	mov	r22,zero
   2c6d8:	003faa06 	br	2c584 <_gp+0xffff1420>
   2c6dc:	0023883a 	mov	r17,zero
   2c6e0:	0025883a 	mov	r18,zero
   2c6e4:	01c00044 	movi	r7,1
   2c6e8:	003f7806 	br	2c4cc <_gp+0xffff1368>
   2c6ec:	01c000c4 	movi	r7,3
   2c6f0:	003f7606 	br	2c4cc <_gp+0xffff1368>
   2c6f4:	05400104 	movi	r21,4
   2c6f8:	0021883a 	mov	r16,zero
   2c6fc:	002d883a 	mov	r22,zero
   2c700:	01400044 	movi	r5,1
   2c704:	003f5f06 	br	2c484 <_gp+0xffff1320>
   2c708:	05400304 	movi	r21,12
   2c70c:	014000c4 	movi	r5,3
   2c710:	003f5c06 	br	2c484 <_gp+0xffff1320>
   2c714:	04000434 	movhi	r16,16
   2c718:	0027883a 	mov	r19,zero
   2c71c:	843fffc4 	addi	r16,r16,-1
   2c720:	05bfffc4 	movi	r22,-1
   2c724:	0081ffc4 	movi	r2,2047
   2c728:	003f9606 	br	2c584 <_gp+0xffff1420>
   2c72c:	8023883a 	mov	r17,r16
   2c730:	b025883a 	mov	r18,r22
   2c734:	280f883a 	mov	r7,r5
   2c738:	003f8806 	br	2c55c <_gp+0xffff13f8>
   2c73c:	8023883a 	mov	r17,r16
   2c740:	b025883a 	mov	r18,r22
   2c744:	480d883a 	mov	r6,r9
   2c748:	280f883a 	mov	r7,r5
   2c74c:	003f8306 	br	2c55c <_gp+0xffff13f8>
   2c750:	b026d43a 	srli	r19,r22,16
   2c754:	902ed43a 	srli	r23,r18,16
   2c758:	b5bfffcc 	andi	r22,r22,65535
   2c75c:	94bfffcc 	andi	r18,r18,65535
   2c760:	b00b883a 	mov	r5,r22
   2c764:	9009883a 	mov	r4,r18
   2c768:	d8c00515 	stw	r3,20(sp)
   2c76c:	d9800715 	stw	r6,28(sp)
   2c770:	da000615 	stw	r8,24(sp)
   2c774:	00208980 	call	20898 <__mulsi3>
   2c778:	980b883a 	mov	r5,r19
   2c77c:	9009883a 	mov	r4,r18
   2c780:	1029883a 	mov	r20,r2
   2c784:	00208980 	call	20898 <__mulsi3>
   2c788:	b80b883a 	mov	r5,r23
   2c78c:	9809883a 	mov	r4,r19
   2c790:	102b883a 	mov	r21,r2
   2c794:	00208980 	call	20898 <__mulsi3>
   2c798:	b809883a 	mov	r4,r23
   2c79c:	b00b883a 	mov	r5,r22
   2c7a0:	1039883a 	mov	fp,r2
   2c7a4:	00208980 	call	20898 <__mulsi3>
   2c7a8:	a008d43a 	srli	r4,r20,16
   2c7ac:	1545883a 	add	r2,r2,r21
   2c7b0:	d8c00517 	ldw	r3,20(sp)
   2c7b4:	2085883a 	add	r2,r4,r2
   2c7b8:	d9800717 	ldw	r6,28(sp)
   2c7bc:	da000617 	ldw	r8,24(sp)
   2c7c0:	1540022e 	bgeu	r2,r21,2c7cc <__muldf3+0x3c4>
   2c7c4:	01000074 	movhi	r4,1
   2c7c8:	e139883a 	add	fp,fp,r4
   2c7cc:	100e943a 	slli	r7,r2,16
   2c7d0:	1004d43a 	srli	r2,r2,16
   2c7d4:	882ad43a 	srli	r21,r17,16
   2c7d8:	a53fffcc 	andi	r20,r20,65535
   2c7dc:	8c7fffcc 	andi	r17,r17,65535
   2c7e0:	3d29883a 	add	r20,r7,r20
   2c7e4:	b00b883a 	mov	r5,r22
   2c7e8:	8809883a 	mov	r4,r17
   2c7ec:	d8c00515 	stw	r3,20(sp)
   2c7f0:	d9800715 	stw	r6,28(sp)
   2c7f4:	da000615 	stw	r8,24(sp)
   2c7f8:	dd000115 	stw	r20,4(sp)
   2c7fc:	d8800015 	stw	r2,0(sp)
   2c800:	00208980 	call	20898 <__mulsi3>
   2c804:	980b883a 	mov	r5,r19
   2c808:	8809883a 	mov	r4,r17
   2c80c:	d8800215 	stw	r2,8(sp)
   2c810:	00208980 	call	20898 <__mulsi3>
   2c814:	9809883a 	mov	r4,r19
   2c818:	a80b883a 	mov	r5,r21
   2c81c:	1029883a 	mov	r20,r2
   2c820:	00208980 	call	20898 <__mulsi3>
   2c824:	b00b883a 	mov	r5,r22
   2c828:	a809883a 	mov	r4,r21
   2c82c:	d8800415 	stw	r2,16(sp)
   2c830:	00208980 	call	20898 <__mulsi3>
   2c834:	d9c00217 	ldw	r7,8(sp)
   2c838:	1505883a 	add	r2,r2,r20
   2c83c:	d8c00517 	ldw	r3,20(sp)
   2c840:	3826d43a 	srli	r19,r7,16
   2c844:	d9800717 	ldw	r6,28(sp)
   2c848:	da000617 	ldw	r8,24(sp)
   2c84c:	9885883a 	add	r2,r19,r2
   2c850:	da400417 	ldw	r9,16(sp)
   2c854:	1500022e 	bgeu	r2,r20,2c860 <__muldf3+0x458>
   2c858:	01000074 	movhi	r4,1
   2c85c:	4913883a 	add	r9,r9,r4
   2c860:	1028d43a 	srli	r20,r2,16
   2c864:	1004943a 	slli	r2,r2,16
   2c868:	802cd43a 	srli	r22,r16,16
   2c86c:	843fffcc 	andi	r16,r16,65535
   2c870:	3cffffcc 	andi	r19,r7,65535
   2c874:	9009883a 	mov	r4,r18
   2c878:	800b883a 	mov	r5,r16
   2c87c:	a269883a 	add	r20,r20,r9
   2c880:	d8c00515 	stw	r3,20(sp)
   2c884:	d9800715 	stw	r6,28(sp)
   2c888:	da000615 	stw	r8,24(sp)
   2c88c:	14e7883a 	add	r19,r2,r19
   2c890:	00208980 	call	20898 <__mulsi3>
   2c894:	9009883a 	mov	r4,r18
   2c898:	b00b883a 	mov	r5,r22
   2c89c:	d8800315 	stw	r2,12(sp)
   2c8a0:	00208980 	call	20898 <__mulsi3>
   2c8a4:	b809883a 	mov	r4,r23
   2c8a8:	b00b883a 	mov	r5,r22
   2c8ac:	d8800215 	stw	r2,8(sp)
   2c8b0:	00208980 	call	20898 <__mulsi3>
   2c8b4:	b80b883a 	mov	r5,r23
   2c8b8:	8009883a 	mov	r4,r16
   2c8bc:	d8800415 	stw	r2,16(sp)
   2c8c0:	00208980 	call	20898 <__mulsi3>
   2c8c4:	da800317 	ldw	r10,12(sp)
   2c8c8:	d9c00217 	ldw	r7,8(sp)
   2c8cc:	d9000017 	ldw	r4,0(sp)
   2c8d0:	502ed43a 	srli	r23,r10,16
   2c8d4:	11c5883a 	add	r2,r2,r7
   2c8d8:	24e5883a 	add	r18,r4,r19
   2c8dc:	b885883a 	add	r2,r23,r2
   2c8e0:	d8c00517 	ldw	r3,20(sp)
   2c8e4:	d9800717 	ldw	r6,28(sp)
   2c8e8:	da000617 	ldw	r8,24(sp)
   2c8ec:	da400417 	ldw	r9,16(sp)
   2c8f0:	11c0022e 	bgeu	r2,r7,2c8fc <__muldf3+0x4f4>
   2c8f4:	01000074 	movhi	r4,1
   2c8f8:	4913883a 	add	r9,r9,r4
   2c8fc:	100ed43a 	srli	r7,r2,16
   2c900:	1004943a 	slli	r2,r2,16
   2c904:	55ffffcc 	andi	r23,r10,65535
   2c908:	3a53883a 	add	r9,r7,r9
   2c90c:	8809883a 	mov	r4,r17
   2c910:	800b883a 	mov	r5,r16
   2c914:	d8c00515 	stw	r3,20(sp)
   2c918:	d9800715 	stw	r6,28(sp)
   2c91c:	da000615 	stw	r8,24(sp)
   2c920:	da400415 	stw	r9,16(sp)
   2c924:	15ef883a 	add	r23,r2,r23
   2c928:	00208980 	call	20898 <__mulsi3>
   2c92c:	8809883a 	mov	r4,r17
   2c930:	b00b883a 	mov	r5,r22
   2c934:	d8800215 	stw	r2,8(sp)
   2c938:	00208980 	call	20898 <__mulsi3>
   2c93c:	b00b883a 	mov	r5,r22
   2c940:	a809883a 	mov	r4,r21
   2c944:	d8800315 	stw	r2,12(sp)
   2c948:	00208980 	call	20898 <__mulsi3>
   2c94c:	8009883a 	mov	r4,r16
   2c950:	a80b883a 	mov	r5,r21
   2c954:	1023883a 	mov	r17,r2
   2c958:	00208980 	call	20898 <__mulsi3>
   2c95c:	d9c00217 	ldw	r7,8(sp)
   2c960:	da800317 	ldw	r10,12(sp)
   2c964:	d8c00517 	ldw	r3,20(sp)
   2c968:	3808d43a 	srli	r4,r7,16
   2c96c:	1285883a 	add	r2,r2,r10
   2c970:	d9800717 	ldw	r6,28(sp)
   2c974:	2085883a 	add	r2,r4,r2
   2c978:	da000617 	ldw	r8,24(sp)
   2c97c:	da400417 	ldw	r9,16(sp)
   2c980:	1280022e 	bgeu	r2,r10,2c98c <__muldf3+0x584>
   2c984:	01000074 	movhi	r4,1
   2c988:	8923883a 	add	r17,r17,r4
   2c98c:	1008943a 	slli	r4,r2,16
   2c990:	39ffffcc 	andi	r7,r7,65535
   2c994:	e4b9883a 	add	fp,fp,r18
   2c998:	21cf883a 	add	r7,r4,r7
   2c99c:	e4e7803a 	cmpltu	r19,fp,r19
   2c9a0:	3d0f883a 	add	r7,r7,r20
   2c9a4:	bf39883a 	add	fp,r23,fp
   2c9a8:	99c9883a 	add	r4,r19,r7
   2c9ac:	e5ef803a 	cmpltu	r23,fp,r23
   2c9b0:	490b883a 	add	r5,r9,r4
   2c9b4:	1004d43a 	srli	r2,r2,16
   2c9b8:	b965883a 	add	r18,r23,r5
   2c9bc:	24c9803a 	cmpltu	r4,r4,r19
   2c9c0:	3d29803a 	cmpltu	r20,r7,r20
   2c9c4:	a128b03a 	or	r20,r20,r4
   2c9c8:	95ef803a 	cmpltu	r23,r18,r23
   2c9cc:	2a53803a 	cmpltu	r9,r5,r9
   2c9d0:	a0a9883a 	add	r20,r20,r2
   2c9d4:	4deeb03a 	or	r23,r9,r23
   2c9d8:	a5ef883a 	add	r23,r20,r23
   2c9dc:	bc63883a 	add	r17,r23,r17
   2c9e0:	e004927a 	slli	r2,fp,9
   2c9e4:	d9000117 	ldw	r4,4(sp)
   2c9e8:	882e927a 	slli	r23,r17,9
   2c9ec:	9022d5fa 	srli	r17,r18,23
   2c9f0:	e038d5fa 	srli	fp,fp,23
   2c9f4:	1104b03a 	or	r2,r2,r4
   2c9f8:	9024927a 	slli	r18,r18,9
   2c9fc:	1004c03a 	cmpne	r2,r2,zero
   2ca00:	bc62b03a 	or	r17,r23,r17
   2ca04:	1738b03a 	or	fp,r2,fp
   2ca08:	8880402c 	andhi	r2,r17,256
   2ca0c:	e4a4b03a 	or	r18,fp,r18
   2ca10:	10000726 	beq	r2,zero,2ca30 <__muldf3+0x628>
   2ca14:	9006d07a 	srli	r3,r18,1
   2ca18:	880497fa 	slli	r2,r17,31
   2ca1c:	9480004c 	andi	r18,r18,1
   2ca20:	8822d07a 	srli	r17,r17,1
   2ca24:	1ca4b03a 	or	r18,r3,r18
   2ca28:	14a4b03a 	or	r18,r2,r18
   2ca2c:	4007883a 	mov	r3,r8
   2ca30:	1880ffc4 	addi	r2,r3,1023
   2ca34:	0080460e 	bge	zero,r2,2cb50 <__muldf3+0x748>
   2ca38:	910001cc 	andi	r4,r18,7
   2ca3c:	20000726 	beq	r4,zero,2ca5c <__muldf3+0x654>
   2ca40:	910003cc 	andi	r4,r18,15
   2ca44:	01400104 	movi	r5,4
   2ca48:	21400426 	beq	r4,r5,2ca5c <__muldf3+0x654>
   2ca4c:	9149883a 	add	r4,r18,r5
   2ca50:	24a5803a 	cmpltu	r18,r4,r18
   2ca54:	8ca3883a 	add	r17,r17,r18
   2ca58:	2025883a 	mov	r18,r4
   2ca5c:	8900402c 	andhi	r4,r17,256
   2ca60:	20000426 	beq	r4,zero,2ca74 <__muldf3+0x66c>
   2ca64:	18810004 	addi	r2,r3,1024
   2ca68:	00ffc034 	movhi	r3,65280
   2ca6c:	18ffffc4 	addi	r3,r3,-1
   2ca70:	88e2703a 	and	r17,r17,r3
   2ca74:	00c1ff84 	movi	r3,2046
   2ca78:	18bf1316 	blt	r3,r2,2c6c8 <_gp+0xffff1564>
   2ca7c:	882c977a 	slli	r22,r17,29
   2ca80:	9024d0fa 	srli	r18,r18,3
   2ca84:	8822927a 	slli	r17,r17,9
   2ca88:	1081ffcc 	andi	r2,r2,2047
   2ca8c:	b4acb03a 	or	r22,r22,r18
   2ca90:	8820d33a 	srli	r16,r17,12
   2ca94:	3027883a 	mov	r19,r6
   2ca98:	003eba06 	br	2c584 <_gp+0xffff1420>
   2ca9c:	8080022c 	andhi	r2,r16,8
   2caa0:	10000926 	beq	r2,zero,2cac8 <__muldf3+0x6c0>
   2caa4:	8880022c 	andhi	r2,r17,8
   2caa8:	1000071e 	bne	r2,zero,2cac8 <__muldf3+0x6c0>
   2caac:	00800434 	movhi	r2,16
   2cab0:	8c000234 	orhi	r16,r17,8
   2cab4:	10bfffc4 	addi	r2,r2,-1
   2cab8:	e027883a 	mov	r19,fp
   2cabc:	80a0703a 	and	r16,r16,r2
   2cac0:	902d883a 	mov	r22,r18
   2cac4:	003f1706 	br	2c724 <_gp+0xffff15c0>
   2cac8:	00800434 	movhi	r2,16
   2cacc:	84000234 	orhi	r16,r16,8
   2cad0:	10bfffc4 	addi	r2,r2,-1
   2cad4:	80a0703a 	and	r16,r16,r2
   2cad8:	003f1206 	br	2c724 <_gp+0xffff15c0>
   2cadc:	147ff604 	addi	r17,r2,-40
   2cae0:	3462983a 	sll	r17,r6,r17
   2cae4:	0025883a 	mov	r18,zero
   2cae8:	003ef306 	br	2c6b8 <_gp+0xffff1554>
   2caec:	3009883a 	mov	r4,r6
   2caf0:	d9400215 	stw	r5,8(sp)
   2caf4:	d9800715 	stw	r6,28(sp)
   2caf8:	da400415 	stw	r9,16(sp)
   2cafc:	da800315 	stw	r10,12(sp)
   2cb00:	002d7740 	call	2d774 <__clzsi2>
   2cb04:	10800804 	addi	r2,r2,32
   2cb08:	da800317 	ldw	r10,12(sp)
   2cb0c:	da400417 	ldw	r9,16(sp)
   2cb10:	d9800717 	ldw	r6,28(sp)
   2cb14:	d9400217 	ldw	r5,8(sp)
   2cb18:	003edd06 	br	2c690 <_gp+0xffff152c>
   2cb1c:	143ff604 	addi	r16,r2,-40
   2cb20:	ac20983a 	sll	r16,r21,r16
   2cb24:	002d883a 	mov	r22,zero
   2cb28:	003ec106 	br	2c630 <_gp+0xffff14cc>
   2cb2c:	d9800715 	stw	r6,28(sp)
   2cb30:	d9c00215 	stw	r7,8(sp)
   2cb34:	da400415 	stw	r9,16(sp)
   2cb38:	002d7740 	call	2d774 <__clzsi2>
   2cb3c:	10800804 	addi	r2,r2,32
   2cb40:	da400417 	ldw	r9,16(sp)
   2cb44:	d9c00217 	ldw	r7,8(sp)
   2cb48:	d9800717 	ldw	r6,28(sp)
   2cb4c:	003eae06 	br	2c608 <_gp+0xffff14a4>
   2cb50:	00c00044 	movi	r3,1
   2cb54:	1887c83a 	sub	r3,r3,r2
   2cb58:	01000e04 	movi	r4,56
   2cb5c:	20fe8516 	blt	r4,r3,2c574 <_gp+0xffff1410>
   2cb60:	010007c4 	movi	r4,31
   2cb64:	20c01b16 	blt	r4,r3,2cbd4 <__muldf3+0x7cc>
   2cb68:	00800804 	movi	r2,32
   2cb6c:	10c5c83a 	sub	r2,r2,r3
   2cb70:	888a983a 	sll	r5,r17,r2
   2cb74:	90c8d83a 	srl	r4,r18,r3
   2cb78:	9084983a 	sll	r2,r18,r2
   2cb7c:	88e2d83a 	srl	r17,r17,r3
   2cb80:	2906b03a 	or	r3,r5,r4
   2cb84:	1004c03a 	cmpne	r2,r2,zero
   2cb88:	1886b03a 	or	r3,r3,r2
   2cb8c:	188001cc 	andi	r2,r3,7
   2cb90:	10000726 	beq	r2,zero,2cbb0 <__muldf3+0x7a8>
   2cb94:	188003cc 	andi	r2,r3,15
   2cb98:	01000104 	movi	r4,4
   2cb9c:	11000426 	beq	r2,r4,2cbb0 <__muldf3+0x7a8>
   2cba0:	1805883a 	mov	r2,r3
   2cba4:	10c00104 	addi	r3,r2,4
   2cba8:	1885803a 	cmpltu	r2,r3,r2
   2cbac:	88a3883a 	add	r17,r17,r2
   2cbb0:	8880202c 	andhi	r2,r17,128
   2cbb4:	10001c26 	beq	r2,zero,2cc28 <__muldf3+0x820>
   2cbb8:	3027883a 	mov	r19,r6
   2cbbc:	00800044 	movi	r2,1
   2cbc0:	0021883a 	mov	r16,zero
   2cbc4:	002d883a 	mov	r22,zero
   2cbc8:	003e6e06 	br	2c584 <_gp+0xffff1420>
   2cbcc:	4007883a 	mov	r3,r8
   2cbd0:	003f9706 	br	2ca30 <_gp+0xffff18cc>
   2cbd4:	017ff844 	movi	r5,-31
   2cbd8:	2885c83a 	sub	r2,r5,r2
   2cbdc:	888ad83a 	srl	r5,r17,r2
   2cbe0:	00800804 	movi	r2,32
   2cbe4:	18801a26 	beq	r3,r2,2cc50 <__muldf3+0x848>
   2cbe8:	01001004 	movi	r4,64
   2cbec:	20c7c83a 	sub	r3,r4,r3
   2cbf0:	88e2983a 	sll	r17,r17,r3
   2cbf4:	8ca4b03a 	or	r18,r17,r18
   2cbf8:	9004c03a 	cmpne	r2,r18,zero
   2cbfc:	2884b03a 	or	r2,r5,r2
   2cc00:	144001cc 	andi	r17,r2,7
   2cc04:	88000d1e 	bne	r17,zero,2cc3c <__muldf3+0x834>
   2cc08:	0021883a 	mov	r16,zero
   2cc0c:	102cd0fa 	srli	r22,r2,3
   2cc10:	3027883a 	mov	r19,r6
   2cc14:	0005883a 	mov	r2,zero
   2cc18:	b46cb03a 	or	r22,r22,r17
   2cc1c:	003e5906 	br	2c584 <_gp+0xffff1420>
   2cc20:	1007883a 	mov	r3,r2
   2cc24:	0023883a 	mov	r17,zero
   2cc28:	8820927a 	slli	r16,r17,9
   2cc2c:	1805883a 	mov	r2,r3
   2cc30:	8822977a 	slli	r17,r17,29
   2cc34:	8020d33a 	srli	r16,r16,12
   2cc38:	003ff406 	br	2cc0c <_gp+0xffff1aa8>
   2cc3c:	10c003cc 	andi	r3,r2,15
   2cc40:	01000104 	movi	r4,4
   2cc44:	193ff626 	beq	r3,r4,2cc20 <_gp+0xffff1abc>
   2cc48:	0023883a 	mov	r17,zero
   2cc4c:	003fd506 	br	2cba4 <_gp+0xffff1a40>
   2cc50:	0023883a 	mov	r17,zero
   2cc54:	003fe706 	br	2cbf4 <_gp+0xffff1a90>
   2cc58:	00800434 	movhi	r2,16
   2cc5c:	8c000234 	orhi	r16,r17,8
   2cc60:	10bfffc4 	addi	r2,r2,-1
   2cc64:	3027883a 	mov	r19,r6
   2cc68:	80a0703a 	and	r16,r16,r2
   2cc6c:	902d883a 	mov	r22,r18
   2cc70:	003eac06 	br	2c724 <_gp+0xffff15c0>

0002cc74 <__subdf3>:
   2cc74:	02000434 	movhi	r8,16
   2cc78:	423fffc4 	addi	r8,r8,-1
   2cc7c:	defffb04 	addi	sp,sp,-20
   2cc80:	2a14703a 	and	r10,r5,r8
   2cc84:	3812d53a 	srli	r9,r7,20
   2cc88:	3a10703a 	and	r8,r7,r8
   2cc8c:	2006d77a 	srli	r3,r4,29
   2cc90:	3004d77a 	srli	r2,r6,29
   2cc94:	dc000015 	stw	r16,0(sp)
   2cc98:	501490fa 	slli	r10,r10,3
   2cc9c:	2820d53a 	srli	r16,r5,20
   2cca0:	401090fa 	slli	r8,r8,3
   2cca4:	dc800215 	stw	r18,8(sp)
   2cca8:	dc400115 	stw	r17,4(sp)
   2ccac:	dfc00415 	stw	ra,16(sp)
   2ccb0:	202290fa 	slli	r17,r4,3
   2ccb4:	dcc00315 	stw	r19,12(sp)
   2ccb8:	4a41ffcc 	andi	r9,r9,2047
   2ccbc:	0101ffc4 	movi	r4,2047
   2ccc0:	2824d7fa 	srli	r18,r5,31
   2ccc4:	8401ffcc 	andi	r16,r16,2047
   2ccc8:	50c6b03a 	or	r3,r10,r3
   2cccc:	380ed7fa 	srli	r7,r7,31
   2ccd0:	408ab03a 	or	r5,r8,r2
   2ccd4:	300c90fa 	slli	r6,r6,3
   2ccd8:	49009626 	beq	r9,r4,2cf34 <__subdf3+0x2c0>
   2ccdc:	39c0005c 	xori	r7,r7,1
   2cce0:	8245c83a 	sub	r2,r16,r9
   2cce4:	3c807426 	beq	r7,r18,2ceb8 <__subdf3+0x244>
   2cce8:	0080af0e 	bge	zero,r2,2cfa8 <__subdf3+0x334>
   2ccec:	48002a1e 	bne	r9,zero,2cd98 <__subdf3+0x124>
   2ccf0:	2988b03a 	or	r4,r5,r6
   2ccf4:	20009a1e 	bne	r4,zero,2cf60 <__subdf3+0x2ec>
   2ccf8:	888001cc 	andi	r2,r17,7
   2ccfc:	10000726 	beq	r2,zero,2cd1c <__subdf3+0xa8>
   2cd00:	888003cc 	andi	r2,r17,15
   2cd04:	01000104 	movi	r4,4
   2cd08:	11000426 	beq	r2,r4,2cd1c <__subdf3+0xa8>
   2cd0c:	890b883a 	add	r5,r17,r4
   2cd10:	2c63803a 	cmpltu	r17,r5,r17
   2cd14:	1c47883a 	add	r3,r3,r17
   2cd18:	2823883a 	mov	r17,r5
   2cd1c:	1880202c 	andhi	r2,r3,128
   2cd20:	10005926 	beq	r2,zero,2ce88 <__subdf3+0x214>
   2cd24:	84000044 	addi	r16,r16,1
   2cd28:	0081ffc4 	movi	r2,2047
   2cd2c:	8080be26 	beq	r16,r2,2d028 <__subdf3+0x3b4>
   2cd30:	017fe034 	movhi	r5,65408
   2cd34:	297fffc4 	addi	r5,r5,-1
   2cd38:	1946703a 	and	r3,r3,r5
   2cd3c:	1804977a 	slli	r2,r3,29
   2cd40:	1806927a 	slli	r3,r3,9
   2cd44:	8822d0fa 	srli	r17,r17,3
   2cd48:	8401ffcc 	andi	r16,r16,2047
   2cd4c:	180ad33a 	srli	r5,r3,12
   2cd50:	9100004c 	andi	r4,r18,1
   2cd54:	1444b03a 	or	r2,r2,r17
   2cd58:	80c1ffcc 	andi	r3,r16,2047
   2cd5c:	1820953a 	slli	r16,r3,20
   2cd60:	20c03fcc 	andi	r3,r4,255
   2cd64:	180897fa 	slli	r4,r3,31
   2cd68:	00c00434 	movhi	r3,16
   2cd6c:	18ffffc4 	addi	r3,r3,-1
   2cd70:	28c6703a 	and	r3,r5,r3
   2cd74:	1c06b03a 	or	r3,r3,r16
   2cd78:	1906b03a 	or	r3,r3,r4
   2cd7c:	dfc00417 	ldw	ra,16(sp)
   2cd80:	dcc00317 	ldw	r19,12(sp)
   2cd84:	dc800217 	ldw	r18,8(sp)
   2cd88:	dc400117 	ldw	r17,4(sp)
   2cd8c:	dc000017 	ldw	r16,0(sp)
   2cd90:	dec00504 	addi	sp,sp,20
   2cd94:	f800283a 	ret
   2cd98:	0101ffc4 	movi	r4,2047
   2cd9c:	813fd626 	beq	r16,r4,2ccf8 <_gp+0xffff1b94>
   2cda0:	29402034 	orhi	r5,r5,128
   2cda4:	01000e04 	movi	r4,56
   2cda8:	2080a316 	blt	r4,r2,2d038 <__subdf3+0x3c4>
   2cdac:	010007c4 	movi	r4,31
   2cdb0:	2080c616 	blt	r4,r2,2d0cc <__subdf3+0x458>
   2cdb4:	01000804 	movi	r4,32
   2cdb8:	2089c83a 	sub	r4,r4,r2
   2cdbc:	2910983a 	sll	r8,r5,r4
   2cdc0:	308ed83a 	srl	r7,r6,r2
   2cdc4:	3108983a 	sll	r4,r6,r4
   2cdc8:	2884d83a 	srl	r2,r5,r2
   2cdcc:	41ccb03a 	or	r6,r8,r7
   2cdd0:	2008c03a 	cmpne	r4,r4,zero
   2cdd4:	310cb03a 	or	r6,r6,r4
   2cdd8:	898dc83a 	sub	r6,r17,r6
   2cddc:	89a3803a 	cmpltu	r17,r17,r6
   2cde0:	1887c83a 	sub	r3,r3,r2
   2cde4:	1c47c83a 	sub	r3,r3,r17
   2cde8:	3023883a 	mov	r17,r6
   2cdec:	1880202c 	andhi	r2,r3,128
   2cdf0:	10002326 	beq	r2,zero,2ce80 <__subdf3+0x20c>
   2cdf4:	04c02034 	movhi	r19,128
   2cdf8:	9cffffc4 	addi	r19,r19,-1
   2cdfc:	1ce6703a 	and	r19,r3,r19
   2ce00:	98007a26 	beq	r19,zero,2cfec <__subdf3+0x378>
   2ce04:	9809883a 	mov	r4,r19
   2ce08:	002d7740 	call	2d774 <__clzsi2>
   2ce0c:	113ffe04 	addi	r4,r2,-8
   2ce10:	00c007c4 	movi	r3,31
   2ce14:	19007b16 	blt	r3,r4,2d004 <__subdf3+0x390>
   2ce18:	00800804 	movi	r2,32
   2ce1c:	1105c83a 	sub	r2,r2,r4
   2ce20:	8884d83a 	srl	r2,r17,r2
   2ce24:	9906983a 	sll	r3,r19,r4
   2ce28:	8922983a 	sll	r17,r17,r4
   2ce2c:	10c4b03a 	or	r2,r2,r3
   2ce30:	24007816 	blt	r4,r16,2d014 <__subdf3+0x3a0>
   2ce34:	2421c83a 	sub	r16,r4,r16
   2ce38:	80c00044 	addi	r3,r16,1
   2ce3c:	010007c4 	movi	r4,31
   2ce40:	20c09516 	blt	r4,r3,2d098 <__subdf3+0x424>
   2ce44:	01400804 	movi	r5,32
   2ce48:	28cbc83a 	sub	r5,r5,r3
   2ce4c:	88c8d83a 	srl	r4,r17,r3
   2ce50:	8962983a 	sll	r17,r17,r5
   2ce54:	114a983a 	sll	r5,r2,r5
   2ce58:	10c6d83a 	srl	r3,r2,r3
   2ce5c:	8804c03a 	cmpne	r2,r17,zero
   2ce60:	290ab03a 	or	r5,r5,r4
   2ce64:	28a2b03a 	or	r17,r5,r2
   2ce68:	0021883a 	mov	r16,zero
   2ce6c:	003fa206 	br	2ccf8 <_gp+0xffff1b94>
   2ce70:	2090b03a 	or	r8,r4,r2
   2ce74:	40018e26 	beq	r8,zero,2d4b0 <__subdf3+0x83c>
   2ce78:	1007883a 	mov	r3,r2
   2ce7c:	2023883a 	mov	r17,r4
   2ce80:	888001cc 	andi	r2,r17,7
   2ce84:	103f9e1e 	bne	r2,zero,2cd00 <_gp+0xffff1b9c>
   2ce88:	1804977a 	slli	r2,r3,29
   2ce8c:	8822d0fa 	srli	r17,r17,3
   2ce90:	1810d0fa 	srli	r8,r3,3
   2ce94:	9100004c 	andi	r4,r18,1
   2ce98:	1444b03a 	or	r2,r2,r17
   2ce9c:	00c1ffc4 	movi	r3,2047
   2cea0:	80c02826 	beq	r16,r3,2cf44 <__subdf3+0x2d0>
   2cea4:	01400434 	movhi	r5,16
   2cea8:	297fffc4 	addi	r5,r5,-1
   2ceac:	80e0703a 	and	r16,r16,r3
   2ceb0:	414a703a 	and	r5,r8,r5
   2ceb4:	003fa806 	br	2cd58 <_gp+0xffff1bf4>
   2ceb8:	0080630e 	bge	zero,r2,2d048 <__subdf3+0x3d4>
   2cebc:	48003026 	beq	r9,zero,2cf80 <__subdf3+0x30c>
   2cec0:	0101ffc4 	movi	r4,2047
   2cec4:	813f8c26 	beq	r16,r4,2ccf8 <_gp+0xffff1b94>
   2cec8:	29402034 	orhi	r5,r5,128
   2cecc:	01000e04 	movi	r4,56
   2ced0:	2080a90e 	bge	r4,r2,2d178 <__subdf3+0x504>
   2ced4:	298cb03a 	or	r6,r5,r6
   2ced8:	3012c03a 	cmpne	r9,r6,zero
   2cedc:	0005883a 	mov	r2,zero
   2cee0:	4c53883a 	add	r9,r9,r17
   2cee4:	4c63803a 	cmpltu	r17,r9,r17
   2cee8:	10c7883a 	add	r3,r2,r3
   2ceec:	88c7883a 	add	r3,r17,r3
   2cef0:	4823883a 	mov	r17,r9
   2cef4:	1880202c 	andhi	r2,r3,128
   2cef8:	1000d026 	beq	r2,zero,2d23c <__subdf3+0x5c8>
   2cefc:	84000044 	addi	r16,r16,1
   2cf00:	0081ffc4 	movi	r2,2047
   2cf04:	8080fe26 	beq	r16,r2,2d300 <__subdf3+0x68c>
   2cf08:	00bfe034 	movhi	r2,65408
   2cf0c:	10bfffc4 	addi	r2,r2,-1
   2cf10:	1886703a 	and	r3,r3,r2
   2cf14:	880ad07a 	srli	r5,r17,1
   2cf18:	180497fa 	slli	r2,r3,31
   2cf1c:	8900004c 	andi	r4,r17,1
   2cf20:	2922b03a 	or	r17,r5,r4
   2cf24:	1806d07a 	srli	r3,r3,1
   2cf28:	1462b03a 	or	r17,r2,r17
   2cf2c:	3825883a 	mov	r18,r7
   2cf30:	003f7106 	br	2ccf8 <_gp+0xffff1b94>
   2cf34:	2984b03a 	or	r2,r5,r6
   2cf38:	103f6826 	beq	r2,zero,2ccdc <_gp+0xffff1b78>
   2cf3c:	39c03fcc 	andi	r7,r7,255
   2cf40:	003f6706 	br	2cce0 <_gp+0xffff1b7c>
   2cf44:	4086b03a 	or	r3,r8,r2
   2cf48:	18015226 	beq	r3,zero,2d494 <__subdf3+0x820>
   2cf4c:	00c00434 	movhi	r3,16
   2cf50:	41400234 	orhi	r5,r8,8
   2cf54:	18ffffc4 	addi	r3,r3,-1
   2cf58:	28ca703a 	and	r5,r5,r3
   2cf5c:	003f7e06 	br	2cd58 <_gp+0xffff1bf4>
   2cf60:	10bfffc4 	addi	r2,r2,-1
   2cf64:	1000491e 	bne	r2,zero,2d08c <__subdf3+0x418>
   2cf68:	898fc83a 	sub	r7,r17,r6
   2cf6c:	89e3803a 	cmpltu	r17,r17,r7
   2cf70:	1947c83a 	sub	r3,r3,r5
   2cf74:	1c47c83a 	sub	r3,r3,r17
   2cf78:	3823883a 	mov	r17,r7
   2cf7c:	003f9b06 	br	2cdec <_gp+0xffff1c88>
   2cf80:	2988b03a 	or	r4,r5,r6
   2cf84:	203f5c26 	beq	r4,zero,2ccf8 <_gp+0xffff1b94>
   2cf88:	10bfffc4 	addi	r2,r2,-1
   2cf8c:	1000931e 	bne	r2,zero,2d1dc <__subdf3+0x568>
   2cf90:	898d883a 	add	r6,r17,r6
   2cf94:	3463803a 	cmpltu	r17,r6,r17
   2cf98:	1947883a 	add	r3,r3,r5
   2cf9c:	88c7883a 	add	r3,r17,r3
   2cfa0:	3023883a 	mov	r17,r6
   2cfa4:	003fd306 	br	2cef4 <_gp+0xffff1d90>
   2cfa8:	1000541e 	bne	r2,zero,2d0fc <__subdf3+0x488>
   2cfac:	80800044 	addi	r2,r16,1
   2cfb0:	1081ffcc 	andi	r2,r2,2047
   2cfb4:	01000044 	movi	r4,1
   2cfb8:	2080a20e 	bge	r4,r2,2d244 <__subdf3+0x5d0>
   2cfbc:	8989c83a 	sub	r4,r17,r6
   2cfc0:	8905803a 	cmpltu	r2,r17,r4
   2cfc4:	1967c83a 	sub	r19,r3,r5
   2cfc8:	98a7c83a 	sub	r19,r19,r2
   2cfcc:	9880202c 	andhi	r2,r19,128
   2cfd0:	10006326 	beq	r2,zero,2d160 <__subdf3+0x4ec>
   2cfd4:	3463c83a 	sub	r17,r6,r17
   2cfd8:	28c7c83a 	sub	r3,r5,r3
   2cfdc:	344d803a 	cmpltu	r6,r6,r17
   2cfe0:	19a7c83a 	sub	r19,r3,r6
   2cfe4:	3825883a 	mov	r18,r7
   2cfe8:	983f861e 	bne	r19,zero,2ce04 <_gp+0xffff1ca0>
   2cfec:	8809883a 	mov	r4,r17
   2cff0:	002d7740 	call	2d774 <__clzsi2>
   2cff4:	10800804 	addi	r2,r2,32
   2cff8:	113ffe04 	addi	r4,r2,-8
   2cffc:	00c007c4 	movi	r3,31
   2d000:	193f850e 	bge	r3,r4,2ce18 <_gp+0xffff1cb4>
   2d004:	10bff604 	addi	r2,r2,-40
   2d008:	8884983a 	sll	r2,r17,r2
   2d00c:	0023883a 	mov	r17,zero
   2d010:	243f880e 	bge	r4,r16,2ce34 <_gp+0xffff1cd0>
   2d014:	00ffe034 	movhi	r3,65408
   2d018:	18ffffc4 	addi	r3,r3,-1
   2d01c:	8121c83a 	sub	r16,r16,r4
   2d020:	10c6703a 	and	r3,r2,r3
   2d024:	003f3406 	br	2ccf8 <_gp+0xffff1b94>
   2d028:	9100004c 	andi	r4,r18,1
   2d02c:	000b883a 	mov	r5,zero
   2d030:	0005883a 	mov	r2,zero
   2d034:	003f4806 	br	2cd58 <_gp+0xffff1bf4>
   2d038:	298cb03a 	or	r6,r5,r6
   2d03c:	300cc03a 	cmpne	r6,r6,zero
   2d040:	0005883a 	mov	r2,zero
   2d044:	003f6406 	br	2cdd8 <_gp+0xffff1c74>
   2d048:	10009a1e 	bne	r2,zero,2d2b4 <__subdf3+0x640>
   2d04c:	82400044 	addi	r9,r16,1
   2d050:	4881ffcc 	andi	r2,r9,2047
   2d054:	02800044 	movi	r10,1
   2d058:	5080670e 	bge	r10,r2,2d1f8 <__subdf3+0x584>
   2d05c:	0081ffc4 	movi	r2,2047
   2d060:	4880af26 	beq	r9,r2,2d320 <__subdf3+0x6ac>
   2d064:	898d883a 	add	r6,r17,r6
   2d068:	1945883a 	add	r2,r3,r5
   2d06c:	3447803a 	cmpltu	r3,r6,r17
   2d070:	1887883a 	add	r3,r3,r2
   2d074:	182297fa 	slli	r17,r3,31
   2d078:	300cd07a 	srli	r6,r6,1
   2d07c:	1806d07a 	srli	r3,r3,1
   2d080:	4821883a 	mov	r16,r9
   2d084:	89a2b03a 	or	r17,r17,r6
   2d088:	003f1b06 	br	2ccf8 <_gp+0xffff1b94>
   2d08c:	0101ffc4 	movi	r4,2047
   2d090:	813f441e 	bne	r16,r4,2cda4 <_gp+0xffff1c40>
   2d094:	003f1806 	br	2ccf8 <_gp+0xffff1b94>
   2d098:	843ff844 	addi	r16,r16,-31
   2d09c:	01400804 	movi	r5,32
   2d0a0:	1408d83a 	srl	r4,r2,r16
   2d0a4:	19405026 	beq	r3,r5,2d1e8 <__subdf3+0x574>
   2d0a8:	01401004 	movi	r5,64
   2d0ac:	28c7c83a 	sub	r3,r5,r3
   2d0b0:	10c4983a 	sll	r2,r2,r3
   2d0b4:	88a2b03a 	or	r17,r17,r2
   2d0b8:	8822c03a 	cmpne	r17,r17,zero
   2d0bc:	2462b03a 	or	r17,r4,r17
   2d0c0:	0007883a 	mov	r3,zero
   2d0c4:	0021883a 	mov	r16,zero
   2d0c8:	003f6d06 	br	2ce80 <_gp+0xffff1d1c>
   2d0cc:	11fff804 	addi	r7,r2,-32
   2d0d0:	01000804 	movi	r4,32
   2d0d4:	29ced83a 	srl	r7,r5,r7
   2d0d8:	11004526 	beq	r2,r4,2d1f0 <__subdf3+0x57c>
   2d0dc:	01001004 	movi	r4,64
   2d0e0:	2089c83a 	sub	r4,r4,r2
   2d0e4:	2904983a 	sll	r2,r5,r4
   2d0e8:	118cb03a 	or	r6,r2,r6
   2d0ec:	300cc03a 	cmpne	r6,r6,zero
   2d0f0:	398cb03a 	or	r6,r7,r6
   2d0f4:	0005883a 	mov	r2,zero
   2d0f8:	003f3706 	br	2cdd8 <_gp+0xffff1c74>
   2d0fc:	80002a26 	beq	r16,zero,2d1a8 <__subdf3+0x534>
   2d100:	0101ffc4 	movi	r4,2047
   2d104:	49006626 	beq	r9,r4,2d2a0 <__subdf3+0x62c>
   2d108:	0085c83a 	sub	r2,zero,r2
   2d10c:	18c02034 	orhi	r3,r3,128
   2d110:	01000e04 	movi	r4,56
   2d114:	20807e16 	blt	r4,r2,2d310 <__subdf3+0x69c>
   2d118:	010007c4 	movi	r4,31
   2d11c:	2080e716 	blt	r4,r2,2d4bc <__subdf3+0x848>
   2d120:	01000804 	movi	r4,32
   2d124:	2089c83a 	sub	r4,r4,r2
   2d128:	1914983a 	sll	r10,r3,r4
   2d12c:	8890d83a 	srl	r8,r17,r2
   2d130:	8908983a 	sll	r4,r17,r4
   2d134:	1884d83a 	srl	r2,r3,r2
   2d138:	5222b03a 	or	r17,r10,r8
   2d13c:	2006c03a 	cmpne	r3,r4,zero
   2d140:	88e2b03a 	or	r17,r17,r3
   2d144:	3463c83a 	sub	r17,r6,r17
   2d148:	2885c83a 	sub	r2,r5,r2
   2d14c:	344d803a 	cmpltu	r6,r6,r17
   2d150:	1187c83a 	sub	r3,r2,r6
   2d154:	4821883a 	mov	r16,r9
   2d158:	3825883a 	mov	r18,r7
   2d15c:	003f2306 	br	2cdec <_gp+0xffff1c88>
   2d160:	24d0b03a 	or	r8,r4,r19
   2d164:	40001b1e 	bne	r8,zero,2d1d4 <__subdf3+0x560>
   2d168:	0005883a 	mov	r2,zero
   2d16c:	0009883a 	mov	r4,zero
   2d170:	0021883a 	mov	r16,zero
   2d174:	003f4906 	br	2ce9c <_gp+0xffff1d38>
   2d178:	010007c4 	movi	r4,31
   2d17c:	20803a16 	blt	r4,r2,2d268 <__subdf3+0x5f4>
   2d180:	01000804 	movi	r4,32
   2d184:	2089c83a 	sub	r4,r4,r2
   2d188:	2912983a 	sll	r9,r5,r4
   2d18c:	3090d83a 	srl	r8,r6,r2
   2d190:	3108983a 	sll	r4,r6,r4
   2d194:	2884d83a 	srl	r2,r5,r2
   2d198:	4a12b03a 	or	r9,r9,r8
   2d19c:	2008c03a 	cmpne	r4,r4,zero
   2d1a0:	4912b03a 	or	r9,r9,r4
   2d1a4:	003f4e06 	br	2cee0 <_gp+0xffff1d7c>
   2d1a8:	1c48b03a 	or	r4,r3,r17
   2d1ac:	20003c26 	beq	r4,zero,2d2a0 <__subdf3+0x62c>
   2d1b0:	0084303a 	nor	r2,zero,r2
   2d1b4:	1000381e 	bne	r2,zero,2d298 <__subdf3+0x624>
   2d1b8:	3463c83a 	sub	r17,r6,r17
   2d1bc:	28c5c83a 	sub	r2,r5,r3
   2d1c0:	344d803a 	cmpltu	r6,r6,r17
   2d1c4:	1187c83a 	sub	r3,r2,r6
   2d1c8:	4821883a 	mov	r16,r9
   2d1cc:	3825883a 	mov	r18,r7
   2d1d0:	003f0606 	br	2cdec <_gp+0xffff1c88>
   2d1d4:	2023883a 	mov	r17,r4
   2d1d8:	003f0906 	br	2ce00 <_gp+0xffff1c9c>
   2d1dc:	0101ffc4 	movi	r4,2047
   2d1e0:	813f3a1e 	bne	r16,r4,2cecc <_gp+0xffff1d68>
   2d1e4:	003ec406 	br	2ccf8 <_gp+0xffff1b94>
   2d1e8:	0005883a 	mov	r2,zero
   2d1ec:	003fb106 	br	2d0b4 <_gp+0xffff1f50>
   2d1f0:	0005883a 	mov	r2,zero
   2d1f4:	003fbc06 	br	2d0e8 <_gp+0xffff1f84>
   2d1f8:	1c44b03a 	or	r2,r3,r17
   2d1fc:	80008e1e 	bne	r16,zero,2d438 <__subdf3+0x7c4>
   2d200:	1000c826 	beq	r2,zero,2d524 <__subdf3+0x8b0>
   2d204:	2984b03a 	or	r2,r5,r6
   2d208:	103ebb26 	beq	r2,zero,2ccf8 <_gp+0xffff1b94>
   2d20c:	8989883a 	add	r4,r17,r6
   2d210:	1945883a 	add	r2,r3,r5
   2d214:	2447803a 	cmpltu	r3,r4,r17
   2d218:	1887883a 	add	r3,r3,r2
   2d21c:	1880202c 	andhi	r2,r3,128
   2d220:	2023883a 	mov	r17,r4
   2d224:	103f1626 	beq	r2,zero,2ce80 <_gp+0xffff1d1c>
   2d228:	00bfe034 	movhi	r2,65408
   2d22c:	10bfffc4 	addi	r2,r2,-1
   2d230:	5021883a 	mov	r16,r10
   2d234:	1886703a 	and	r3,r3,r2
   2d238:	003eaf06 	br	2ccf8 <_gp+0xffff1b94>
   2d23c:	3825883a 	mov	r18,r7
   2d240:	003f0f06 	br	2ce80 <_gp+0xffff1d1c>
   2d244:	1c44b03a 	or	r2,r3,r17
   2d248:	8000251e 	bne	r16,zero,2d2e0 <__subdf3+0x66c>
   2d24c:	1000661e 	bne	r2,zero,2d3e8 <__subdf3+0x774>
   2d250:	2990b03a 	or	r8,r5,r6
   2d254:	40009626 	beq	r8,zero,2d4b0 <__subdf3+0x83c>
   2d258:	2807883a 	mov	r3,r5
   2d25c:	3023883a 	mov	r17,r6
   2d260:	3825883a 	mov	r18,r7
   2d264:	003ea406 	br	2ccf8 <_gp+0xffff1b94>
   2d268:	127ff804 	addi	r9,r2,-32
   2d26c:	01000804 	movi	r4,32
   2d270:	2a52d83a 	srl	r9,r5,r9
   2d274:	11008c26 	beq	r2,r4,2d4a8 <__subdf3+0x834>
   2d278:	01001004 	movi	r4,64
   2d27c:	2085c83a 	sub	r2,r4,r2
   2d280:	2884983a 	sll	r2,r5,r2
   2d284:	118cb03a 	or	r6,r2,r6
   2d288:	300cc03a 	cmpne	r6,r6,zero
   2d28c:	4992b03a 	or	r9,r9,r6
   2d290:	0005883a 	mov	r2,zero
   2d294:	003f1206 	br	2cee0 <_gp+0xffff1d7c>
   2d298:	0101ffc4 	movi	r4,2047
   2d29c:	493f9c1e 	bne	r9,r4,2d110 <_gp+0xffff1fac>
   2d2a0:	2807883a 	mov	r3,r5
   2d2a4:	3023883a 	mov	r17,r6
   2d2a8:	4821883a 	mov	r16,r9
   2d2ac:	3825883a 	mov	r18,r7
   2d2b0:	003e9106 	br	2ccf8 <_gp+0xffff1b94>
   2d2b4:	80001f1e 	bne	r16,zero,2d334 <__subdf3+0x6c0>
   2d2b8:	1c48b03a 	or	r4,r3,r17
   2d2bc:	20005a26 	beq	r4,zero,2d428 <__subdf3+0x7b4>
   2d2c0:	0084303a 	nor	r2,zero,r2
   2d2c4:	1000561e 	bne	r2,zero,2d420 <__subdf3+0x7ac>
   2d2c8:	89a3883a 	add	r17,r17,r6
   2d2cc:	1945883a 	add	r2,r3,r5
   2d2d0:	898d803a 	cmpltu	r6,r17,r6
   2d2d4:	3087883a 	add	r3,r6,r2
   2d2d8:	4821883a 	mov	r16,r9
   2d2dc:	003f0506 	br	2cef4 <_gp+0xffff1d90>
   2d2e0:	10002b1e 	bne	r2,zero,2d390 <__subdf3+0x71c>
   2d2e4:	2984b03a 	or	r2,r5,r6
   2d2e8:	10008026 	beq	r2,zero,2d4ec <__subdf3+0x878>
   2d2ec:	2807883a 	mov	r3,r5
   2d2f0:	3023883a 	mov	r17,r6
   2d2f4:	3825883a 	mov	r18,r7
   2d2f8:	0401ffc4 	movi	r16,2047
   2d2fc:	003e7e06 	br	2ccf8 <_gp+0xffff1b94>
   2d300:	3809883a 	mov	r4,r7
   2d304:	0011883a 	mov	r8,zero
   2d308:	0005883a 	mov	r2,zero
   2d30c:	003ee306 	br	2ce9c <_gp+0xffff1d38>
   2d310:	1c62b03a 	or	r17,r3,r17
   2d314:	8822c03a 	cmpne	r17,r17,zero
   2d318:	0005883a 	mov	r2,zero
   2d31c:	003f8906 	br	2d144 <_gp+0xffff1fe0>
   2d320:	3809883a 	mov	r4,r7
   2d324:	4821883a 	mov	r16,r9
   2d328:	0011883a 	mov	r8,zero
   2d32c:	0005883a 	mov	r2,zero
   2d330:	003eda06 	br	2ce9c <_gp+0xffff1d38>
   2d334:	0101ffc4 	movi	r4,2047
   2d338:	49003b26 	beq	r9,r4,2d428 <__subdf3+0x7b4>
   2d33c:	0085c83a 	sub	r2,zero,r2
   2d340:	18c02034 	orhi	r3,r3,128
   2d344:	01000e04 	movi	r4,56
   2d348:	20806e16 	blt	r4,r2,2d504 <__subdf3+0x890>
   2d34c:	010007c4 	movi	r4,31
   2d350:	20807716 	blt	r4,r2,2d530 <__subdf3+0x8bc>
   2d354:	01000804 	movi	r4,32
   2d358:	2089c83a 	sub	r4,r4,r2
   2d35c:	1914983a 	sll	r10,r3,r4
   2d360:	8890d83a 	srl	r8,r17,r2
   2d364:	8908983a 	sll	r4,r17,r4
   2d368:	1884d83a 	srl	r2,r3,r2
   2d36c:	5222b03a 	or	r17,r10,r8
   2d370:	2006c03a 	cmpne	r3,r4,zero
   2d374:	88e2b03a 	or	r17,r17,r3
   2d378:	89a3883a 	add	r17,r17,r6
   2d37c:	1145883a 	add	r2,r2,r5
   2d380:	898d803a 	cmpltu	r6,r17,r6
   2d384:	3087883a 	add	r3,r6,r2
   2d388:	4821883a 	mov	r16,r9
   2d38c:	003ed906 	br	2cef4 <_gp+0xffff1d90>
   2d390:	2984b03a 	or	r2,r5,r6
   2d394:	10004226 	beq	r2,zero,2d4a0 <__subdf3+0x82c>
   2d398:	1808d0fa 	srli	r4,r3,3
   2d39c:	8822d0fa 	srli	r17,r17,3
   2d3a0:	1806977a 	slli	r3,r3,29
   2d3a4:	2080022c 	andhi	r2,r4,8
   2d3a8:	1c62b03a 	or	r17,r3,r17
   2d3ac:	10000826 	beq	r2,zero,2d3d0 <__subdf3+0x75c>
   2d3b0:	2812d0fa 	srli	r9,r5,3
   2d3b4:	4880022c 	andhi	r2,r9,8
   2d3b8:	1000051e 	bne	r2,zero,2d3d0 <__subdf3+0x75c>
   2d3bc:	300cd0fa 	srli	r6,r6,3
   2d3c0:	2804977a 	slli	r2,r5,29
   2d3c4:	4809883a 	mov	r4,r9
   2d3c8:	3825883a 	mov	r18,r7
   2d3cc:	11a2b03a 	or	r17,r2,r6
   2d3d0:	8806d77a 	srli	r3,r17,29
   2d3d4:	200890fa 	slli	r4,r4,3
   2d3d8:	882290fa 	slli	r17,r17,3
   2d3dc:	0401ffc4 	movi	r16,2047
   2d3e0:	1906b03a 	or	r3,r3,r4
   2d3e4:	003e4406 	br	2ccf8 <_gp+0xffff1b94>
   2d3e8:	2984b03a 	or	r2,r5,r6
   2d3ec:	103e4226 	beq	r2,zero,2ccf8 <_gp+0xffff1b94>
   2d3f0:	8989c83a 	sub	r4,r17,r6
   2d3f4:	8911803a 	cmpltu	r8,r17,r4
   2d3f8:	1945c83a 	sub	r2,r3,r5
   2d3fc:	1205c83a 	sub	r2,r2,r8
   2d400:	1200202c 	andhi	r8,r2,128
   2d404:	403e9a26 	beq	r8,zero,2ce70 <_gp+0xffff1d0c>
   2d408:	3463c83a 	sub	r17,r6,r17
   2d40c:	28c5c83a 	sub	r2,r5,r3
   2d410:	344d803a 	cmpltu	r6,r6,r17
   2d414:	1187c83a 	sub	r3,r2,r6
   2d418:	3825883a 	mov	r18,r7
   2d41c:	003e3606 	br	2ccf8 <_gp+0xffff1b94>
   2d420:	0101ffc4 	movi	r4,2047
   2d424:	493fc71e 	bne	r9,r4,2d344 <_gp+0xffff21e0>
   2d428:	2807883a 	mov	r3,r5
   2d42c:	3023883a 	mov	r17,r6
   2d430:	4821883a 	mov	r16,r9
   2d434:	003e3006 	br	2ccf8 <_gp+0xffff1b94>
   2d438:	10003626 	beq	r2,zero,2d514 <__subdf3+0x8a0>
   2d43c:	2984b03a 	or	r2,r5,r6
   2d440:	10001726 	beq	r2,zero,2d4a0 <__subdf3+0x82c>
   2d444:	1808d0fa 	srli	r4,r3,3
   2d448:	8822d0fa 	srli	r17,r17,3
   2d44c:	1806977a 	slli	r3,r3,29
   2d450:	2080022c 	andhi	r2,r4,8
   2d454:	1c62b03a 	or	r17,r3,r17
   2d458:	10000726 	beq	r2,zero,2d478 <__subdf3+0x804>
   2d45c:	2812d0fa 	srli	r9,r5,3
   2d460:	4880022c 	andhi	r2,r9,8
   2d464:	1000041e 	bne	r2,zero,2d478 <__subdf3+0x804>
   2d468:	300cd0fa 	srli	r6,r6,3
   2d46c:	2804977a 	slli	r2,r5,29
   2d470:	4809883a 	mov	r4,r9
   2d474:	11a2b03a 	or	r17,r2,r6
   2d478:	8806d77a 	srli	r3,r17,29
   2d47c:	200890fa 	slli	r4,r4,3
   2d480:	882290fa 	slli	r17,r17,3
   2d484:	3825883a 	mov	r18,r7
   2d488:	1906b03a 	or	r3,r3,r4
   2d48c:	0401ffc4 	movi	r16,2047
   2d490:	003e1906 	br	2ccf8 <_gp+0xffff1b94>
   2d494:	000b883a 	mov	r5,zero
   2d498:	0005883a 	mov	r2,zero
   2d49c:	003e2e06 	br	2cd58 <_gp+0xffff1bf4>
   2d4a0:	0401ffc4 	movi	r16,2047
   2d4a4:	003e1406 	br	2ccf8 <_gp+0xffff1b94>
   2d4a8:	0005883a 	mov	r2,zero
   2d4ac:	003f7506 	br	2d284 <_gp+0xffff2120>
   2d4b0:	0005883a 	mov	r2,zero
   2d4b4:	0009883a 	mov	r4,zero
   2d4b8:	003e7806 	br	2ce9c <_gp+0xffff1d38>
   2d4bc:	123ff804 	addi	r8,r2,-32
   2d4c0:	01000804 	movi	r4,32
   2d4c4:	1a10d83a 	srl	r8,r3,r8
   2d4c8:	11002526 	beq	r2,r4,2d560 <__subdf3+0x8ec>
   2d4cc:	01001004 	movi	r4,64
   2d4d0:	2085c83a 	sub	r2,r4,r2
   2d4d4:	1884983a 	sll	r2,r3,r2
   2d4d8:	1444b03a 	or	r2,r2,r17
   2d4dc:	1004c03a 	cmpne	r2,r2,zero
   2d4e0:	40a2b03a 	or	r17,r8,r2
   2d4e4:	0005883a 	mov	r2,zero
   2d4e8:	003f1606 	br	2d144 <_gp+0xffff1fe0>
   2d4ec:	02000434 	movhi	r8,16
   2d4f0:	0009883a 	mov	r4,zero
   2d4f4:	423fffc4 	addi	r8,r8,-1
   2d4f8:	00bfffc4 	movi	r2,-1
   2d4fc:	0401ffc4 	movi	r16,2047
   2d500:	003e6606 	br	2ce9c <_gp+0xffff1d38>
   2d504:	1c62b03a 	or	r17,r3,r17
   2d508:	8822c03a 	cmpne	r17,r17,zero
   2d50c:	0005883a 	mov	r2,zero
   2d510:	003f9906 	br	2d378 <_gp+0xffff2214>
   2d514:	2807883a 	mov	r3,r5
   2d518:	3023883a 	mov	r17,r6
   2d51c:	0401ffc4 	movi	r16,2047
   2d520:	003df506 	br	2ccf8 <_gp+0xffff1b94>
   2d524:	2807883a 	mov	r3,r5
   2d528:	3023883a 	mov	r17,r6
   2d52c:	003df206 	br	2ccf8 <_gp+0xffff1b94>
   2d530:	123ff804 	addi	r8,r2,-32
   2d534:	01000804 	movi	r4,32
   2d538:	1a10d83a 	srl	r8,r3,r8
   2d53c:	11000a26 	beq	r2,r4,2d568 <__subdf3+0x8f4>
   2d540:	01001004 	movi	r4,64
   2d544:	2085c83a 	sub	r2,r4,r2
   2d548:	1884983a 	sll	r2,r3,r2
   2d54c:	1444b03a 	or	r2,r2,r17
   2d550:	1004c03a 	cmpne	r2,r2,zero
   2d554:	40a2b03a 	or	r17,r8,r2
   2d558:	0005883a 	mov	r2,zero
   2d55c:	003f8606 	br	2d378 <_gp+0xffff2214>
   2d560:	0005883a 	mov	r2,zero
   2d564:	003fdc06 	br	2d4d8 <_gp+0xffff2374>
   2d568:	0005883a 	mov	r2,zero
   2d56c:	003ff706 	br	2d54c <_gp+0xffff23e8>

0002d570 <__fixdfsi>:
   2d570:	280cd53a 	srli	r6,r5,20
   2d574:	00c00434 	movhi	r3,16
   2d578:	18ffffc4 	addi	r3,r3,-1
   2d57c:	3181ffcc 	andi	r6,r6,2047
   2d580:	01c0ff84 	movi	r7,1022
   2d584:	28c6703a 	and	r3,r5,r3
   2d588:	280ad7fa 	srli	r5,r5,31
   2d58c:	3980120e 	bge	r7,r6,2d5d8 <__fixdfsi+0x68>
   2d590:	00810744 	movi	r2,1053
   2d594:	11800c16 	blt	r2,r6,2d5c8 <__fixdfsi+0x58>
   2d598:	00810cc4 	movi	r2,1075
   2d59c:	1185c83a 	sub	r2,r2,r6
   2d5a0:	01c007c4 	movi	r7,31
   2d5a4:	18c00434 	orhi	r3,r3,16
   2d5a8:	38800d16 	blt	r7,r2,2d5e0 <__fixdfsi+0x70>
   2d5ac:	31befb44 	addi	r6,r6,-1043
   2d5b0:	2084d83a 	srl	r2,r4,r2
   2d5b4:	1986983a 	sll	r3,r3,r6
   2d5b8:	1884b03a 	or	r2,r3,r2
   2d5bc:	28000726 	beq	r5,zero,2d5dc <__fixdfsi+0x6c>
   2d5c0:	0085c83a 	sub	r2,zero,r2
   2d5c4:	f800283a 	ret
   2d5c8:	00a00034 	movhi	r2,32768
   2d5cc:	10bfffc4 	addi	r2,r2,-1
   2d5d0:	2885883a 	add	r2,r5,r2
   2d5d4:	f800283a 	ret
   2d5d8:	0005883a 	mov	r2,zero
   2d5dc:	f800283a 	ret
   2d5e0:	008104c4 	movi	r2,1043
   2d5e4:	1185c83a 	sub	r2,r2,r6
   2d5e8:	1884d83a 	srl	r2,r3,r2
   2d5ec:	003ff306 	br	2d5bc <_gp+0xffff2458>

0002d5f0 <__floatsidf>:
   2d5f0:	defffd04 	addi	sp,sp,-12
   2d5f4:	dfc00215 	stw	ra,8(sp)
   2d5f8:	dc400115 	stw	r17,4(sp)
   2d5fc:	dc000015 	stw	r16,0(sp)
   2d600:	20002b26 	beq	r4,zero,2d6b0 <__floatsidf+0xc0>
   2d604:	2023883a 	mov	r17,r4
   2d608:	2020d7fa 	srli	r16,r4,31
   2d60c:	20002d16 	blt	r4,zero,2d6c4 <__floatsidf+0xd4>
   2d610:	8809883a 	mov	r4,r17
   2d614:	002d7740 	call	2d774 <__clzsi2>
   2d618:	01410784 	movi	r5,1054
   2d61c:	288bc83a 	sub	r5,r5,r2
   2d620:	01010cc4 	movi	r4,1075
   2d624:	2149c83a 	sub	r4,r4,r5
   2d628:	00c007c4 	movi	r3,31
   2d62c:	1900160e 	bge	r3,r4,2d688 <__floatsidf+0x98>
   2d630:	00c104c4 	movi	r3,1043
   2d634:	1947c83a 	sub	r3,r3,r5
   2d638:	88c6983a 	sll	r3,r17,r3
   2d63c:	00800434 	movhi	r2,16
   2d640:	10bfffc4 	addi	r2,r2,-1
   2d644:	1886703a 	and	r3,r3,r2
   2d648:	2941ffcc 	andi	r5,r5,2047
   2d64c:	800d883a 	mov	r6,r16
   2d650:	0005883a 	mov	r2,zero
   2d654:	280a953a 	slli	r5,r5,20
   2d658:	31803fcc 	andi	r6,r6,255
   2d65c:	01000434 	movhi	r4,16
   2d660:	300c97fa 	slli	r6,r6,31
   2d664:	213fffc4 	addi	r4,r4,-1
   2d668:	1906703a 	and	r3,r3,r4
   2d66c:	1946b03a 	or	r3,r3,r5
   2d670:	1986b03a 	or	r3,r3,r6
   2d674:	dfc00217 	ldw	ra,8(sp)
   2d678:	dc400117 	ldw	r17,4(sp)
   2d67c:	dc000017 	ldw	r16,0(sp)
   2d680:	dec00304 	addi	sp,sp,12
   2d684:	f800283a 	ret
   2d688:	00c002c4 	movi	r3,11
   2d68c:	1887c83a 	sub	r3,r3,r2
   2d690:	88c6d83a 	srl	r3,r17,r3
   2d694:	8904983a 	sll	r2,r17,r4
   2d698:	01000434 	movhi	r4,16
   2d69c:	213fffc4 	addi	r4,r4,-1
   2d6a0:	2941ffcc 	andi	r5,r5,2047
   2d6a4:	1906703a 	and	r3,r3,r4
   2d6a8:	800d883a 	mov	r6,r16
   2d6ac:	003fe906 	br	2d654 <_gp+0xffff24f0>
   2d6b0:	000d883a 	mov	r6,zero
   2d6b4:	000b883a 	mov	r5,zero
   2d6b8:	0007883a 	mov	r3,zero
   2d6bc:	0005883a 	mov	r2,zero
   2d6c0:	003fe406 	br	2d654 <_gp+0xffff24f0>
   2d6c4:	0123c83a 	sub	r17,zero,r4
   2d6c8:	003fd106 	br	2d610 <_gp+0xffff24ac>

0002d6cc <__floatunsidf>:
   2d6cc:	defffe04 	addi	sp,sp,-8
   2d6d0:	dc000015 	stw	r16,0(sp)
   2d6d4:	dfc00115 	stw	ra,4(sp)
   2d6d8:	2021883a 	mov	r16,r4
   2d6dc:	20002226 	beq	r4,zero,2d768 <__floatunsidf+0x9c>
   2d6e0:	002d7740 	call	2d774 <__clzsi2>
   2d6e4:	01010784 	movi	r4,1054
   2d6e8:	2089c83a 	sub	r4,r4,r2
   2d6ec:	01810cc4 	movi	r6,1075
   2d6f0:	310dc83a 	sub	r6,r6,r4
   2d6f4:	00c007c4 	movi	r3,31
   2d6f8:	1980120e 	bge	r3,r6,2d744 <__floatunsidf+0x78>
   2d6fc:	00c104c4 	movi	r3,1043
   2d700:	1907c83a 	sub	r3,r3,r4
   2d704:	80ca983a 	sll	r5,r16,r3
   2d708:	00800434 	movhi	r2,16
   2d70c:	10bfffc4 	addi	r2,r2,-1
   2d710:	2101ffcc 	andi	r4,r4,2047
   2d714:	0021883a 	mov	r16,zero
   2d718:	288a703a 	and	r5,r5,r2
   2d71c:	2008953a 	slli	r4,r4,20
   2d720:	00c00434 	movhi	r3,16
   2d724:	18ffffc4 	addi	r3,r3,-1
   2d728:	28c6703a 	and	r3,r5,r3
   2d72c:	8005883a 	mov	r2,r16
   2d730:	1906b03a 	or	r3,r3,r4
   2d734:	dfc00117 	ldw	ra,4(sp)
   2d738:	dc000017 	ldw	r16,0(sp)
   2d73c:	dec00204 	addi	sp,sp,8
   2d740:	f800283a 	ret
   2d744:	00c002c4 	movi	r3,11
   2d748:	188bc83a 	sub	r5,r3,r2
   2d74c:	814ad83a 	srl	r5,r16,r5
   2d750:	00c00434 	movhi	r3,16
   2d754:	18ffffc4 	addi	r3,r3,-1
   2d758:	81a0983a 	sll	r16,r16,r6
   2d75c:	2101ffcc 	andi	r4,r4,2047
   2d760:	28ca703a 	and	r5,r5,r3
   2d764:	003fed06 	br	2d71c <_gp+0xffff25b8>
   2d768:	0009883a 	mov	r4,zero
   2d76c:	000b883a 	mov	r5,zero
   2d770:	003fea06 	br	2d71c <_gp+0xffff25b8>

0002d774 <__clzsi2>:
   2d774:	00bfffd4 	movui	r2,65535
   2d778:	11000536 	bltu	r2,r4,2d790 <__clzsi2+0x1c>
   2d77c:	00803fc4 	movi	r2,255
   2d780:	11000f36 	bltu	r2,r4,2d7c0 <__clzsi2+0x4c>
   2d784:	00800804 	movi	r2,32
   2d788:	0007883a 	mov	r3,zero
   2d78c:	00000506 	br	2d7a4 <__clzsi2+0x30>
   2d790:	00804034 	movhi	r2,256
   2d794:	10bfffc4 	addi	r2,r2,-1
   2d798:	11000c2e 	bgeu	r2,r4,2d7cc <__clzsi2+0x58>
   2d79c:	00800204 	movi	r2,8
   2d7a0:	00c00604 	movi	r3,24
   2d7a4:	20c8d83a 	srl	r4,r4,r3
   2d7a8:	00c000f4 	movhi	r3,3
   2d7ac:	18c47804 	addi	r3,r3,4576
   2d7b0:	1909883a 	add	r4,r3,r4
   2d7b4:	20c00003 	ldbu	r3,0(r4)
   2d7b8:	10c5c83a 	sub	r2,r2,r3
   2d7bc:	f800283a 	ret
   2d7c0:	00800604 	movi	r2,24
   2d7c4:	00c00204 	movi	r3,8
   2d7c8:	003ff606 	br	2d7a4 <_gp+0xffff2640>
   2d7cc:	00800404 	movi	r2,16
   2d7d0:	1007883a 	mov	r3,r2
   2d7d4:	003ff306 	br	2d7a4 <_gp+0xffff2640>

0002d7d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d7d8:	defffe04 	addi	sp,sp,-8
   2d7dc:	dfc00115 	stw	ra,4(sp)
   2d7e0:	df000015 	stw	fp,0(sp)
   2d7e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d7e8:	d0a00b17 	ldw	r2,-32724(gp)
   2d7ec:	10000326 	beq	r2,zero,2d7fc <alt_get_errno+0x24>
   2d7f0:	d0a00b17 	ldw	r2,-32724(gp)
   2d7f4:	103ee83a 	callr	r2
   2d7f8:	00000106 	br	2d800 <alt_get_errno+0x28>
   2d7fc:	d0a71d04 	addi	r2,gp,-25484
}
   2d800:	e037883a 	mov	sp,fp
   2d804:	dfc00117 	ldw	ra,4(sp)
   2d808:	df000017 	ldw	fp,0(sp)
   2d80c:	dec00204 	addi	sp,sp,8
   2d810:	f800283a 	ret

0002d814 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2d814:	defffb04 	addi	sp,sp,-20
   2d818:	dfc00415 	stw	ra,16(sp)
   2d81c:	df000315 	stw	fp,12(sp)
   2d820:	df000304 	addi	fp,sp,12
   2d824:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2d828:	e0bfff17 	ldw	r2,-4(fp)
   2d82c:	10000816 	blt	r2,zero,2d850 <close+0x3c>
   2d830:	01400304 	movi	r5,12
   2d834:	e13fff17 	ldw	r4,-4(fp)
   2d838:	00208980 	call	20898 <__mulsi3>
   2d83c:	1007883a 	mov	r3,r2
   2d840:	008000f4 	movhi	r2,3
   2d844:	10879904 	addi	r2,r2,7780
   2d848:	1885883a 	add	r2,r3,r2
   2d84c:	00000106 	br	2d854 <close+0x40>
   2d850:	0005883a 	mov	r2,zero
   2d854:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2d858:	e0bffd17 	ldw	r2,-12(fp)
   2d85c:	10001926 	beq	r2,zero,2d8c4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2d860:	e0bffd17 	ldw	r2,-12(fp)
   2d864:	10800017 	ldw	r2,0(r2)
   2d868:	10800417 	ldw	r2,16(r2)
   2d86c:	10000626 	beq	r2,zero,2d888 <close+0x74>
   2d870:	e0bffd17 	ldw	r2,-12(fp)
   2d874:	10800017 	ldw	r2,0(r2)
   2d878:	10800417 	ldw	r2,16(r2)
   2d87c:	e13ffd17 	ldw	r4,-12(fp)
   2d880:	103ee83a 	callr	r2
   2d884:	00000106 	br	2d88c <close+0x78>
   2d888:	0005883a 	mov	r2,zero
   2d88c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2d890:	e13fff17 	ldw	r4,-4(fp)
   2d894:	002defc0 	call	2defc <alt_release_fd>
    if (rval < 0)
   2d898:	e0bffe17 	ldw	r2,-8(fp)
   2d89c:	1000070e 	bge	r2,zero,2d8bc <close+0xa8>
    {
      ALT_ERRNO = -rval;
   2d8a0:	002d7d80 	call	2d7d8 <alt_get_errno>
   2d8a4:	1007883a 	mov	r3,r2
   2d8a8:	e0bffe17 	ldw	r2,-8(fp)
   2d8ac:	0085c83a 	sub	r2,zero,r2
   2d8b0:	18800015 	stw	r2,0(r3)
      return -1;
   2d8b4:	00bfffc4 	movi	r2,-1
   2d8b8:	00000706 	br	2d8d8 <close+0xc4>
    }
    return 0;
   2d8bc:	0005883a 	mov	r2,zero
   2d8c0:	00000506 	br	2d8d8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d8c4:	002d7d80 	call	2d7d8 <alt_get_errno>
   2d8c8:	1007883a 	mov	r3,r2
   2d8cc:	00801444 	movi	r2,81
   2d8d0:	18800015 	stw	r2,0(r3)
    return -1;
   2d8d4:	00bfffc4 	movi	r2,-1
  }
}
   2d8d8:	e037883a 	mov	sp,fp
   2d8dc:	dfc00117 	ldw	ra,4(sp)
   2d8e0:	df000017 	ldw	fp,0(sp)
   2d8e4:	dec00204 	addi	sp,sp,8
   2d8e8:	f800283a 	ret

0002d8ec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2d8ec:	defffc04 	addi	sp,sp,-16
   2d8f0:	df000315 	stw	fp,12(sp)
   2d8f4:	df000304 	addi	fp,sp,12
   2d8f8:	e13ffd15 	stw	r4,-12(fp)
   2d8fc:	e17ffe15 	stw	r5,-8(fp)
   2d900:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2d904:	e0bfff17 	ldw	r2,-4(fp)
}
   2d908:	e037883a 	mov	sp,fp
   2d90c:	df000017 	ldw	fp,0(sp)
   2d910:	dec00104 	addi	sp,sp,4
   2d914:	f800283a 	ret

0002d918 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d918:	defffe04 	addi	sp,sp,-8
   2d91c:	dfc00115 	stw	ra,4(sp)
   2d920:	df000015 	stw	fp,0(sp)
   2d924:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d928:	d0a00b17 	ldw	r2,-32724(gp)
   2d92c:	10000326 	beq	r2,zero,2d93c <alt_get_errno+0x24>
   2d930:	d0a00b17 	ldw	r2,-32724(gp)
   2d934:	103ee83a 	callr	r2
   2d938:	00000106 	br	2d940 <alt_get_errno+0x28>
   2d93c:	d0a71d04 	addi	r2,gp,-25484
}
   2d940:	e037883a 	mov	sp,fp
   2d944:	dfc00117 	ldw	ra,4(sp)
   2d948:	df000017 	ldw	fp,0(sp)
   2d94c:	dec00204 	addi	sp,sp,8
   2d950:	f800283a 	ret

0002d954 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2d954:	defffb04 	addi	sp,sp,-20
   2d958:	dfc00415 	stw	ra,16(sp)
   2d95c:	df000315 	stw	fp,12(sp)
   2d960:	df000304 	addi	fp,sp,12
   2d964:	e13ffe15 	stw	r4,-8(fp)
   2d968:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d96c:	e0bffe17 	ldw	r2,-8(fp)
   2d970:	10000816 	blt	r2,zero,2d994 <fstat+0x40>
   2d974:	01400304 	movi	r5,12
   2d978:	e13ffe17 	ldw	r4,-8(fp)
   2d97c:	00208980 	call	20898 <__mulsi3>
   2d980:	1007883a 	mov	r3,r2
   2d984:	008000f4 	movhi	r2,3
   2d988:	10879904 	addi	r2,r2,7780
   2d98c:	1885883a 	add	r2,r3,r2
   2d990:	00000106 	br	2d998 <fstat+0x44>
   2d994:	0005883a 	mov	r2,zero
   2d998:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2d99c:	e0bffd17 	ldw	r2,-12(fp)
   2d9a0:	10001026 	beq	r2,zero,2d9e4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2d9a4:	e0bffd17 	ldw	r2,-12(fp)
   2d9a8:	10800017 	ldw	r2,0(r2)
   2d9ac:	10800817 	ldw	r2,32(r2)
   2d9b0:	10000726 	beq	r2,zero,2d9d0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   2d9b4:	e0bffd17 	ldw	r2,-12(fp)
   2d9b8:	10800017 	ldw	r2,0(r2)
   2d9bc:	10800817 	ldw	r2,32(r2)
   2d9c0:	e17fff17 	ldw	r5,-4(fp)
   2d9c4:	e13ffd17 	ldw	r4,-12(fp)
   2d9c8:	103ee83a 	callr	r2
   2d9cc:	00000a06 	br	2d9f8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2d9d0:	e0bfff17 	ldw	r2,-4(fp)
   2d9d4:	00c80004 	movi	r3,8192
   2d9d8:	10c00115 	stw	r3,4(r2)
      return 0;
   2d9dc:	0005883a 	mov	r2,zero
   2d9e0:	00000506 	br	2d9f8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d9e4:	002d9180 	call	2d918 <alt_get_errno>
   2d9e8:	1007883a 	mov	r3,r2
   2d9ec:	00801444 	movi	r2,81
   2d9f0:	18800015 	stw	r2,0(r3)
    return -1;
   2d9f4:	00bfffc4 	movi	r2,-1
  }
}
   2d9f8:	e037883a 	mov	sp,fp
   2d9fc:	dfc00117 	ldw	ra,4(sp)
   2da00:	df000017 	ldw	fp,0(sp)
   2da04:	dec00204 	addi	sp,sp,8
   2da08:	f800283a 	ret

0002da0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2da0c:	defffe04 	addi	sp,sp,-8
   2da10:	dfc00115 	stw	ra,4(sp)
   2da14:	df000015 	stw	fp,0(sp)
   2da18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2da1c:	d0a00b17 	ldw	r2,-32724(gp)
   2da20:	10000326 	beq	r2,zero,2da30 <alt_get_errno+0x24>
   2da24:	d0a00b17 	ldw	r2,-32724(gp)
   2da28:	103ee83a 	callr	r2
   2da2c:	00000106 	br	2da34 <alt_get_errno+0x28>
   2da30:	d0a71d04 	addi	r2,gp,-25484
}
   2da34:	e037883a 	mov	sp,fp
   2da38:	dfc00117 	ldw	ra,4(sp)
   2da3c:	df000017 	ldw	fp,0(sp)
   2da40:	dec00204 	addi	sp,sp,8
   2da44:	f800283a 	ret

0002da48 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2da48:	deffed04 	addi	sp,sp,-76
   2da4c:	dfc01215 	stw	ra,72(sp)
   2da50:	df001115 	stw	fp,68(sp)
   2da54:	df001104 	addi	fp,sp,68
   2da58:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2da5c:	e0bfff17 	ldw	r2,-4(fp)
   2da60:	10000816 	blt	r2,zero,2da84 <isatty+0x3c>
   2da64:	01400304 	movi	r5,12
   2da68:	e13fff17 	ldw	r4,-4(fp)
   2da6c:	00208980 	call	20898 <__mulsi3>
   2da70:	1007883a 	mov	r3,r2
   2da74:	008000f4 	movhi	r2,3
   2da78:	10879904 	addi	r2,r2,7780
   2da7c:	1885883a 	add	r2,r3,r2
   2da80:	00000106 	br	2da88 <isatty+0x40>
   2da84:	0005883a 	mov	r2,zero
   2da88:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2da8c:	e0bfef17 	ldw	r2,-68(fp)
   2da90:	10000e26 	beq	r2,zero,2dacc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2da94:	e0bfef17 	ldw	r2,-68(fp)
   2da98:	10800017 	ldw	r2,0(r2)
   2da9c:	10800817 	ldw	r2,32(r2)
   2daa0:	1000021e 	bne	r2,zero,2daac <isatty+0x64>
    {
      return 1;
   2daa4:	00800044 	movi	r2,1
   2daa8:	00000d06 	br	2dae0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2daac:	e0bff004 	addi	r2,fp,-64
   2dab0:	100b883a 	mov	r5,r2
   2dab4:	e13fff17 	ldw	r4,-4(fp)
   2dab8:	002d9540 	call	2d954 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2dabc:	e0bff117 	ldw	r2,-60(fp)
   2dac0:	10880020 	cmpeqi	r2,r2,8192
   2dac4:	10803fcc 	andi	r2,r2,255
   2dac8:	00000506 	br	2dae0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2dacc:	002da0c0 	call	2da0c <alt_get_errno>
   2dad0:	1007883a 	mov	r3,r2
   2dad4:	00801444 	movi	r2,81
   2dad8:	18800015 	stw	r2,0(r3)
    return 0;
   2dadc:	0005883a 	mov	r2,zero
  }
}
   2dae0:	e037883a 	mov	sp,fp
   2dae4:	dfc00117 	ldw	ra,4(sp)
   2dae8:	df000017 	ldw	fp,0(sp)
   2daec:	dec00204 	addi	sp,sp,8
   2daf0:	f800283a 	ret

0002daf4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2daf4:	defffc04 	addi	sp,sp,-16
   2daf8:	df000315 	stw	fp,12(sp)
   2dafc:	df000304 	addi	fp,sp,12
   2db00:	e13ffd15 	stw	r4,-12(fp)
   2db04:	e17ffe15 	stw	r5,-8(fp)
   2db08:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2db0c:	e0fffe17 	ldw	r3,-8(fp)
   2db10:	e0bffd17 	ldw	r2,-12(fp)
   2db14:	18800c26 	beq	r3,r2,2db48 <alt_load_section+0x54>
  {
    while( to != end )
   2db18:	00000806 	br	2db3c <alt_load_section+0x48>
    {
      *to++ = *from++;
   2db1c:	e0bffe17 	ldw	r2,-8(fp)
   2db20:	10c00104 	addi	r3,r2,4
   2db24:	e0fffe15 	stw	r3,-8(fp)
   2db28:	e0fffd17 	ldw	r3,-12(fp)
   2db2c:	19000104 	addi	r4,r3,4
   2db30:	e13ffd15 	stw	r4,-12(fp)
   2db34:	18c00017 	ldw	r3,0(r3)
   2db38:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2db3c:	e0fffe17 	ldw	r3,-8(fp)
   2db40:	e0bfff17 	ldw	r2,-4(fp)
   2db44:	18bff51e 	bne	r3,r2,2db1c <_gp+0xffff29b8>
    {
      *to++ = *from++;
    }
  }
}
   2db48:	0001883a 	nop
   2db4c:	e037883a 	mov	sp,fp
   2db50:	df000017 	ldw	fp,0(sp)
   2db54:	dec00104 	addi	sp,sp,4
   2db58:	f800283a 	ret

0002db5c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2db5c:	defffe04 	addi	sp,sp,-8
   2db60:	dfc00115 	stw	ra,4(sp)
   2db64:	df000015 	stw	fp,0(sp)
   2db68:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2db6c:	018000f4 	movhi	r6,3
   2db70:	318c6b04 	addi	r6,r6,12716
   2db74:	014000f4 	movhi	r5,3
   2db78:	29456604 	addi	r5,r5,5528
   2db7c:	010000f4 	movhi	r4,3
   2db80:	210c6b04 	addi	r4,r4,12716
   2db84:	002daf40 	call	2daf4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2db88:	018000b4 	movhi	r6,2
   2db8c:	31808c04 	addi	r6,r6,560
   2db90:	014000b4 	movhi	r5,2
   2db94:	29400804 	addi	r5,r5,32
   2db98:	010000b4 	movhi	r4,2
   2db9c:	21000804 	addi	r4,r4,32
   2dba0:	002daf40 	call	2daf4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2dba4:	018000f4 	movhi	r6,3
   2dba8:	31856604 	addi	r6,r6,5528
   2dbac:	014000f4 	movhi	r5,3
   2dbb0:	2943ef04 	addi	r5,r5,4028
   2dbb4:	010000f4 	movhi	r4,3
   2dbb8:	2103ef04 	addi	r4,r4,4028
   2dbbc:	002daf40 	call	2daf4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2dbc0:	002ff040 	call	2ff04 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2dbc4:	00300c40 	call	300c4 <alt_icache_flush_all>
}
   2dbc8:	0001883a 	nop
   2dbcc:	e037883a 	mov	sp,fp
   2dbd0:	dfc00117 	ldw	ra,4(sp)
   2dbd4:	df000017 	ldw	fp,0(sp)
   2dbd8:	dec00204 	addi	sp,sp,8
   2dbdc:	f800283a 	ret

0002dbe0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2dbe0:	defffe04 	addi	sp,sp,-8
   2dbe4:	dfc00115 	stw	ra,4(sp)
   2dbe8:	df000015 	stw	fp,0(sp)
   2dbec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2dbf0:	d0a00b17 	ldw	r2,-32724(gp)
   2dbf4:	10000326 	beq	r2,zero,2dc04 <alt_get_errno+0x24>
   2dbf8:	d0a00b17 	ldw	r2,-32724(gp)
   2dbfc:	103ee83a 	callr	r2
   2dc00:	00000106 	br	2dc08 <alt_get_errno+0x28>
   2dc04:	d0a71d04 	addi	r2,gp,-25484
}
   2dc08:	e037883a 	mov	sp,fp
   2dc0c:	dfc00117 	ldw	ra,4(sp)
   2dc10:	df000017 	ldw	fp,0(sp)
   2dc14:	dec00204 	addi	sp,sp,8
   2dc18:	f800283a 	ret

0002dc1c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2dc1c:	defff904 	addi	sp,sp,-28
   2dc20:	dfc00615 	stw	ra,24(sp)
   2dc24:	df000515 	stw	fp,20(sp)
   2dc28:	df000504 	addi	fp,sp,20
   2dc2c:	e13ffd15 	stw	r4,-12(fp)
   2dc30:	e17ffe15 	stw	r5,-8(fp)
   2dc34:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2dc38:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2dc3c:	e0bffd17 	ldw	r2,-12(fp)
   2dc40:	10000816 	blt	r2,zero,2dc64 <lseek+0x48>
   2dc44:	01400304 	movi	r5,12
   2dc48:	e13ffd17 	ldw	r4,-12(fp)
   2dc4c:	00208980 	call	20898 <__mulsi3>
   2dc50:	1007883a 	mov	r3,r2
   2dc54:	008000f4 	movhi	r2,3
   2dc58:	10879904 	addi	r2,r2,7780
   2dc5c:	1885883a 	add	r2,r3,r2
   2dc60:	00000106 	br	2dc68 <lseek+0x4c>
   2dc64:	0005883a 	mov	r2,zero
   2dc68:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2dc6c:	e0bffc17 	ldw	r2,-16(fp)
   2dc70:	10001026 	beq	r2,zero,2dcb4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2dc74:	e0bffc17 	ldw	r2,-16(fp)
   2dc78:	10800017 	ldw	r2,0(r2)
   2dc7c:	10800717 	ldw	r2,28(r2)
   2dc80:	10000926 	beq	r2,zero,2dca8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2dc84:	e0bffc17 	ldw	r2,-16(fp)
   2dc88:	10800017 	ldw	r2,0(r2)
   2dc8c:	10800717 	ldw	r2,28(r2)
   2dc90:	e1bfff17 	ldw	r6,-4(fp)
   2dc94:	e17ffe17 	ldw	r5,-8(fp)
   2dc98:	e13ffc17 	ldw	r4,-16(fp)
   2dc9c:	103ee83a 	callr	r2
   2dca0:	e0bffb15 	stw	r2,-20(fp)
   2dca4:	00000506 	br	2dcbc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2dca8:	00bfde84 	movi	r2,-134
   2dcac:	e0bffb15 	stw	r2,-20(fp)
   2dcb0:	00000206 	br	2dcbc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   2dcb4:	00bfebc4 	movi	r2,-81
   2dcb8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2dcbc:	e0bffb17 	ldw	r2,-20(fp)
   2dcc0:	1000070e 	bge	r2,zero,2dce0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   2dcc4:	002dbe00 	call	2dbe0 <alt_get_errno>
   2dcc8:	1007883a 	mov	r3,r2
   2dccc:	e0bffb17 	ldw	r2,-20(fp)
   2dcd0:	0085c83a 	sub	r2,zero,r2
   2dcd4:	18800015 	stw	r2,0(r3)
    rc = -1;
   2dcd8:	00bfffc4 	movi	r2,-1
   2dcdc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2dce0:	e0bffb17 	ldw	r2,-20(fp)
}
   2dce4:	e037883a 	mov	sp,fp
   2dce8:	dfc00117 	ldw	ra,4(sp)
   2dcec:	df000017 	ldw	fp,0(sp)
   2dcf0:	dec00204 	addi	sp,sp,8
   2dcf4:	f800283a 	ret

0002dcf8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2dcf8:	defffd04 	addi	sp,sp,-12
   2dcfc:	dfc00215 	stw	ra,8(sp)
   2dd00:	df000115 	stw	fp,4(sp)
   2dd04:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2dd08:	0009883a 	mov	r4,zero
   2dd0c:	002e1d00 	call	2e1d0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2dd10:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2dd14:	002e2080 	call	2e208 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2dd18:	018000f4 	movhi	r6,3
   2dd1c:	3184bb04 	addi	r6,r6,4844
   2dd20:	014000f4 	movhi	r5,3
   2dd24:	2944bb04 	addi	r5,r5,4844
   2dd28:	010000f4 	movhi	r4,3
   2dd2c:	2104bb04 	addi	r4,r4,4844
   2dd30:	00304680 	call	30468 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2dd34:	00300040 	call	30004 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2dd38:	010000f4 	movhi	r4,3
   2dd3c:	21001904 	addi	r4,r4,100
   2dd40:	0030c280 	call	30c28 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2dd44:	d0a71e17 	ldw	r2,-25480(gp)
   2dd48:	d0e71f17 	ldw	r3,-25476(gp)
   2dd4c:	d1272017 	ldw	r4,-25472(gp)
   2dd50:	200d883a 	mov	r6,r4
   2dd54:	180b883a 	mov	r5,r3
   2dd58:	1009883a 	mov	r4,r2
   2dd5c:	00206b80 	call	206b8 <main>
   2dd60:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2dd64:	01000044 	movi	r4,1
   2dd68:	002d8140 	call	2d814 <close>
  exit (result);
   2dd6c:	e13fff17 	ldw	r4,-4(fp)
   2dd70:	0030c3c0 	call	30c3c <exit>

0002dd74 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2dd74:	defffe04 	addi	sp,sp,-8
   2dd78:	df000115 	stw	fp,4(sp)
   2dd7c:	df000104 	addi	fp,sp,4
   2dd80:	e13fff15 	stw	r4,-4(fp)
}
   2dd84:	0001883a 	nop
   2dd88:	e037883a 	mov	sp,fp
   2dd8c:	df000017 	ldw	fp,0(sp)
   2dd90:	dec00104 	addi	sp,sp,4
   2dd94:	f800283a 	ret

0002dd98 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2dd98:	defffe04 	addi	sp,sp,-8
   2dd9c:	df000115 	stw	fp,4(sp)
   2dda0:	df000104 	addi	fp,sp,4
   2dda4:	e13fff15 	stw	r4,-4(fp)
}
   2dda8:	0001883a 	nop
   2ddac:	e037883a 	mov	sp,fp
   2ddb0:	df000017 	ldw	fp,0(sp)
   2ddb4:	dec00104 	addi	sp,sp,4
   2ddb8:	f800283a 	ret

0002ddbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2ddbc:	defffe04 	addi	sp,sp,-8
   2ddc0:	dfc00115 	stw	ra,4(sp)
   2ddc4:	df000015 	stw	fp,0(sp)
   2ddc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2ddcc:	d0a00b17 	ldw	r2,-32724(gp)
   2ddd0:	10000326 	beq	r2,zero,2dde0 <alt_get_errno+0x24>
   2ddd4:	d0a00b17 	ldw	r2,-32724(gp)
   2ddd8:	103ee83a 	callr	r2
   2dddc:	00000106 	br	2dde4 <alt_get_errno+0x28>
   2dde0:	d0a71d04 	addi	r2,gp,-25484
}
   2dde4:	e037883a 	mov	sp,fp
   2dde8:	dfc00117 	ldw	ra,4(sp)
   2ddec:	df000017 	ldw	fp,0(sp)
   2ddf0:	dec00204 	addi	sp,sp,8
   2ddf4:	f800283a 	ret

0002ddf8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2ddf8:	defff904 	addi	sp,sp,-28
   2ddfc:	dfc00615 	stw	ra,24(sp)
   2de00:	df000515 	stw	fp,20(sp)
   2de04:	df000504 	addi	fp,sp,20
   2de08:	e13ffd15 	stw	r4,-12(fp)
   2de0c:	e17ffe15 	stw	r5,-8(fp)
   2de10:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2de14:	e0bffd17 	ldw	r2,-12(fp)
   2de18:	10000816 	blt	r2,zero,2de3c <read+0x44>
   2de1c:	01400304 	movi	r5,12
   2de20:	e13ffd17 	ldw	r4,-12(fp)
   2de24:	00208980 	call	20898 <__mulsi3>
   2de28:	1007883a 	mov	r3,r2
   2de2c:	008000f4 	movhi	r2,3
   2de30:	10879904 	addi	r2,r2,7780
   2de34:	1885883a 	add	r2,r3,r2
   2de38:	00000106 	br	2de40 <read+0x48>
   2de3c:	0005883a 	mov	r2,zero
   2de40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2de44:	e0bffb17 	ldw	r2,-20(fp)
   2de48:	10002226 	beq	r2,zero,2ded4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2de4c:	e0bffb17 	ldw	r2,-20(fp)
   2de50:	10800217 	ldw	r2,8(r2)
   2de54:	108000cc 	andi	r2,r2,3
   2de58:	10800060 	cmpeqi	r2,r2,1
   2de5c:	1000181e 	bne	r2,zero,2dec0 <read+0xc8>
        (fd->dev->read))
   2de60:	e0bffb17 	ldw	r2,-20(fp)
   2de64:	10800017 	ldw	r2,0(r2)
   2de68:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2de6c:	10001426 	beq	r2,zero,2dec0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2de70:	e0bffb17 	ldw	r2,-20(fp)
   2de74:	10800017 	ldw	r2,0(r2)
   2de78:	10800517 	ldw	r2,20(r2)
   2de7c:	e0ffff17 	ldw	r3,-4(fp)
   2de80:	180d883a 	mov	r6,r3
   2de84:	e17ffe17 	ldw	r5,-8(fp)
   2de88:	e13ffb17 	ldw	r4,-20(fp)
   2de8c:	103ee83a 	callr	r2
   2de90:	e0bffc15 	stw	r2,-16(fp)
   2de94:	e0bffc17 	ldw	r2,-16(fp)
   2de98:	1000070e 	bge	r2,zero,2deb8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   2de9c:	002ddbc0 	call	2ddbc <alt_get_errno>
   2dea0:	1007883a 	mov	r3,r2
   2dea4:	e0bffc17 	ldw	r2,-16(fp)
   2dea8:	0085c83a 	sub	r2,zero,r2
   2deac:	18800015 	stw	r2,0(r3)
          return -1;
   2deb0:	00bfffc4 	movi	r2,-1
   2deb4:	00000c06 	br	2dee8 <read+0xf0>
        }
        return rval;
   2deb8:	e0bffc17 	ldw	r2,-16(fp)
   2debc:	00000a06 	br	2dee8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2dec0:	002ddbc0 	call	2ddbc <alt_get_errno>
   2dec4:	1007883a 	mov	r3,r2
   2dec8:	00800344 	movi	r2,13
   2decc:	18800015 	stw	r2,0(r3)
   2ded0:	00000406 	br	2dee4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2ded4:	002ddbc0 	call	2ddbc <alt_get_errno>
   2ded8:	1007883a 	mov	r3,r2
   2dedc:	00801444 	movi	r2,81
   2dee0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2dee4:	00bfffc4 	movi	r2,-1
}
   2dee8:	e037883a 	mov	sp,fp
   2deec:	dfc00117 	ldw	ra,4(sp)
   2def0:	df000017 	ldw	fp,0(sp)
   2def4:	dec00204 	addi	sp,sp,8
   2def8:	f800283a 	ret

0002defc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2defc:	defffc04 	addi	sp,sp,-16
   2df00:	dfc00315 	stw	ra,12(sp)
   2df04:	df000215 	stw	fp,8(sp)
   2df08:	dc000115 	stw	r16,4(sp)
   2df0c:	df000204 	addi	fp,sp,8
   2df10:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   2df14:	e0bffe17 	ldw	r2,-8(fp)
   2df18:	108000d0 	cmplti	r2,r2,3
   2df1c:	1000111e 	bne	r2,zero,2df64 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   2df20:	040000f4 	movhi	r16,3
   2df24:	84079904 	addi	r16,r16,7780
   2df28:	e0bffe17 	ldw	r2,-8(fp)
   2df2c:	01400304 	movi	r5,12
   2df30:	1009883a 	mov	r4,r2
   2df34:	00208980 	call	20898 <__mulsi3>
   2df38:	8085883a 	add	r2,r16,r2
   2df3c:	10800204 	addi	r2,r2,8
   2df40:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2df44:	040000f4 	movhi	r16,3
   2df48:	84079904 	addi	r16,r16,7780
   2df4c:	e0bffe17 	ldw	r2,-8(fp)
   2df50:	01400304 	movi	r5,12
   2df54:	1009883a 	mov	r4,r2
   2df58:	00208980 	call	20898 <__mulsi3>
   2df5c:	8085883a 	add	r2,r16,r2
   2df60:	10000015 	stw	zero,0(r2)
  }
}
   2df64:	0001883a 	nop
   2df68:	e6ffff04 	addi	sp,fp,-4
   2df6c:	dfc00217 	ldw	ra,8(sp)
   2df70:	df000117 	ldw	fp,4(sp)
   2df74:	dc000017 	ldw	r16,0(sp)
   2df78:	dec00304 	addi	sp,sp,12
   2df7c:	f800283a 	ret

0002df80 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2df80:	defff904 	addi	sp,sp,-28
   2df84:	df000615 	stw	fp,24(sp)
   2df88:	df000604 	addi	fp,sp,24
   2df8c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2df90:	0005303a 	rdctl	r2,status
   2df94:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2df98:	e0fffe17 	ldw	r3,-8(fp)
   2df9c:	00bfff84 	movi	r2,-2
   2dfa0:	1884703a 	and	r2,r3,r2
   2dfa4:	1001703a 	wrctl	status,r2
  
  return context;
   2dfa8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2dfac:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2dfb0:	d0a00c17 	ldw	r2,-32720(gp)
   2dfb4:	10c000c4 	addi	r3,r2,3
   2dfb8:	00bfff04 	movi	r2,-4
   2dfbc:	1884703a 	and	r2,r3,r2
   2dfc0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2dfc4:	d0e00c17 	ldw	r3,-32720(gp)
   2dfc8:	e0bfff17 	ldw	r2,-4(fp)
   2dfcc:	1887883a 	add	r3,r3,r2
   2dfd0:	00800134 	movhi	r2,4
   2dfd4:	10a1a804 	addi	r2,r2,-31072
   2dfd8:	10c0062e 	bgeu	r2,r3,2dff4 <sbrk+0x74>
   2dfdc:	e0bffb17 	ldw	r2,-20(fp)
   2dfe0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2dfe4:	e0bffa17 	ldw	r2,-24(fp)
   2dfe8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2dfec:	00bfffc4 	movi	r2,-1
   2dff0:	00000b06 	br	2e020 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2dff4:	d0a00c17 	ldw	r2,-32720(gp)
   2dff8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   2dffc:	d0e00c17 	ldw	r3,-32720(gp)
   2e000:	e0bfff17 	ldw	r2,-4(fp)
   2e004:	1885883a 	add	r2,r3,r2
   2e008:	d0a00c15 	stw	r2,-32720(gp)
   2e00c:	e0bffb17 	ldw	r2,-20(fp)
   2e010:	e0bffc15 	stw	r2,-16(fp)
   2e014:	e0bffc17 	ldw	r2,-16(fp)
   2e018:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2e01c:	e0bffd17 	ldw	r2,-12(fp)
} 
   2e020:	e037883a 	mov	sp,fp
   2e024:	df000017 	ldw	fp,0(sp)
   2e028:	dec00104 	addi	sp,sp,4
   2e02c:	f800283a 	ret

0002e030 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   2e030:	defffd04 	addi	sp,sp,-12
   2e034:	dfc00215 	stw	ra,8(sp)
   2e038:	df000115 	stw	fp,4(sp)
   2e03c:	df000104 	addi	fp,sp,4
   2e040:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   2e044:	e13fff17 	ldw	r4,-4(fp)
   2e048:	002fdac0 	call	2fdac <alt_busy_sleep>
}
   2e04c:	e037883a 	mov	sp,fp
   2e050:	dfc00117 	ldw	ra,4(sp)
   2e054:	df000017 	ldw	fp,0(sp)
   2e058:	dec00204 	addi	sp,sp,8
   2e05c:	f800283a 	ret

0002e060 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2e060:	defffe04 	addi	sp,sp,-8
   2e064:	dfc00115 	stw	ra,4(sp)
   2e068:	df000015 	stw	fp,0(sp)
   2e06c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2e070:	d0a00b17 	ldw	r2,-32724(gp)
   2e074:	10000326 	beq	r2,zero,2e084 <alt_get_errno+0x24>
   2e078:	d0a00b17 	ldw	r2,-32724(gp)
   2e07c:	103ee83a 	callr	r2
   2e080:	00000106 	br	2e088 <alt_get_errno+0x28>
   2e084:	d0a71d04 	addi	r2,gp,-25484
}
   2e088:	e037883a 	mov	sp,fp
   2e08c:	dfc00117 	ldw	ra,4(sp)
   2e090:	df000017 	ldw	fp,0(sp)
   2e094:	dec00204 	addi	sp,sp,8
   2e098:	f800283a 	ret

0002e09c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2e09c:	defff904 	addi	sp,sp,-28
   2e0a0:	dfc00615 	stw	ra,24(sp)
   2e0a4:	df000515 	stw	fp,20(sp)
   2e0a8:	df000504 	addi	fp,sp,20
   2e0ac:	e13ffd15 	stw	r4,-12(fp)
   2e0b0:	e17ffe15 	stw	r5,-8(fp)
   2e0b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2e0b8:	e0bffd17 	ldw	r2,-12(fp)
   2e0bc:	10000816 	blt	r2,zero,2e0e0 <write+0x44>
   2e0c0:	01400304 	movi	r5,12
   2e0c4:	e13ffd17 	ldw	r4,-12(fp)
   2e0c8:	00208980 	call	20898 <__mulsi3>
   2e0cc:	1007883a 	mov	r3,r2
   2e0d0:	008000f4 	movhi	r2,3
   2e0d4:	10879904 	addi	r2,r2,7780
   2e0d8:	1885883a 	add	r2,r3,r2
   2e0dc:	00000106 	br	2e0e4 <write+0x48>
   2e0e0:	0005883a 	mov	r2,zero
   2e0e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2e0e8:	e0bffb17 	ldw	r2,-20(fp)
   2e0ec:	10002126 	beq	r2,zero,2e174 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2e0f0:	e0bffb17 	ldw	r2,-20(fp)
   2e0f4:	10800217 	ldw	r2,8(r2)
   2e0f8:	108000cc 	andi	r2,r2,3
   2e0fc:	10001826 	beq	r2,zero,2e160 <write+0xc4>
   2e100:	e0bffb17 	ldw	r2,-20(fp)
   2e104:	10800017 	ldw	r2,0(r2)
   2e108:	10800617 	ldw	r2,24(r2)
   2e10c:	10001426 	beq	r2,zero,2e160 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2e110:	e0bffb17 	ldw	r2,-20(fp)
   2e114:	10800017 	ldw	r2,0(r2)
   2e118:	10800617 	ldw	r2,24(r2)
   2e11c:	e0ffff17 	ldw	r3,-4(fp)
   2e120:	180d883a 	mov	r6,r3
   2e124:	e17ffe17 	ldw	r5,-8(fp)
   2e128:	e13ffb17 	ldw	r4,-20(fp)
   2e12c:	103ee83a 	callr	r2
   2e130:	e0bffc15 	stw	r2,-16(fp)
   2e134:	e0bffc17 	ldw	r2,-16(fp)
   2e138:	1000070e 	bge	r2,zero,2e158 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   2e13c:	002e0600 	call	2e060 <alt_get_errno>
   2e140:	1007883a 	mov	r3,r2
   2e144:	e0bffc17 	ldw	r2,-16(fp)
   2e148:	0085c83a 	sub	r2,zero,r2
   2e14c:	18800015 	stw	r2,0(r3)
        return -1;
   2e150:	00bfffc4 	movi	r2,-1
   2e154:	00000c06 	br	2e188 <write+0xec>
      }
      return rval;
   2e158:	e0bffc17 	ldw	r2,-16(fp)
   2e15c:	00000a06 	br	2e188 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2e160:	002e0600 	call	2e060 <alt_get_errno>
   2e164:	1007883a 	mov	r3,r2
   2e168:	00800344 	movi	r2,13
   2e16c:	18800015 	stw	r2,0(r3)
   2e170:	00000406 	br	2e184 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2e174:	002e0600 	call	2e060 <alt_get_errno>
   2e178:	1007883a 	mov	r3,r2
   2e17c:	00801444 	movi	r2,81
   2e180:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2e184:	00bfffc4 	movi	r2,-1
}
   2e188:	e037883a 	mov	sp,fp
   2e18c:	dfc00117 	ldw	ra,4(sp)
   2e190:	df000017 	ldw	fp,0(sp)
   2e194:	dec00204 	addi	sp,sp,8
   2e198:	f800283a 	ret

0002e19c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2e19c:	defffd04 	addi	sp,sp,-12
   2e1a0:	dfc00215 	stw	ra,8(sp)
   2e1a4:	df000115 	stw	fp,4(sp)
   2e1a8:	df000104 	addi	fp,sp,4
   2e1ac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2e1b0:	d1600804 	addi	r5,gp,-32736
   2e1b4:	e13fff17 	ldw	r4,-4(fp)
   2e1b8:	002ff600 	call	2ff60 <alt_dev_llist_insert>
}
   2e1bc:	e037883a 	mov	sp,fp
   2e1c0:	dfc00117 	ldw	ra,4(sp)
   2e1c4:	df000017 	ldw	fp,0(sp)
   2e1c8:	dec00204 	addi	sp,sp,8
   2e1cc:	f800283a 	ret

0002e1d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2e1d0:	defffd04 	addi	sp,sp,-12
   2e1d4:	dfc00215 	stw	ra,8(sp)
   2e1d8:	df000115 	stw	fp,4(sp)
   2e1dc:	df000104 	addi	fp,sp,4
   2e1e0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   2e1e4:	003090c0 	call	3090c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2e1e8:	00800044 	movi	r2,1
   2e1ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2e1f0:	0001883a 	nop
   2e1f4:	e037883a 	mov	sp,fp
   2e1f8:	dfc00117 	ldw	ra,4(sp)
   2e1fc:	df000017 	ldw	fp,0(sp)
   2e200:	dec00204 	addi	sp,sp,8
   2e204:	f800283a 	ret

0002e208 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2e208:	defffe04 	addi	sp,sp,-8
   2e20c:	dfc00115 	stw	ra,4(sp)
   2e210:	df000015 	stw	fp,0(sp)
   2e214:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   2e218:	000d883a 	mov	r6,zero
   2e21c:	000b883a 	mov	r5,zero
   2e220:	010000f4 	movhi	r4,3
   2e224:	21080304 	addi	r4,r4,8204
   2e228:	002e3d00 	call	2e3d0 <altera_avalon_jtag_uart_init>
   2e22c:	010000f4 	movhi	r4,3
   2e230:	2107f904 	addi	r4,r4,8164
   2e234:	002e19c0 	call	2e19c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_0, lcd_0);
   2e238:	010000f4 	movhi	r4,3
   2e23c:	210c1b04 	addi	r4,r4,12396
   2e240:	002faec0 	call	2faec <altera_avalon_lcd_16207_init>
   2e244:	010000f4 	movhi	r4,3
   2e248:	210c1104 	addi	r4,r4,12356
   2e24c:	002e19c0 	call	2e19c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   2e250:	0001883a 	nop
}
   2e254:	0001883a 	nop
   2e258:	e037883a 	mov	sp,fp
   2e25c:	dfc00117 	ldw	ra,4(sp)
   2e260:	df000017 	ldw	fp,0(sp)
   2e264:	dec00204 	addi	sp,sp,8
   2e268:	f800283a 	ret

0002e26c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2e26c:	defffa04 	addi	sp,sp,-24
   2e270:	dfc00515 	stw	ra,20(sp)
   2e274:	df000415 	stw	fp,16(sp)
   2e278:	df000404 	addi	fp,sp,16
   2e27c:	e13ffd15 	stw	r4,-12(fp)
   2e280:	e17ffe15 	stw	r5,-8(fp)
   2e284:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e288:	e0bffd17 	ldw	r2,-12(fp)
   2e28c:	10800017 	ldw	r2,0(r2)
   2e290:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2e294:	e0bffc17 	ldw	r2,-16(fp)
   2e298:	10c00a04 	addi	r3,r2,40
   2e29c:	e0bffd17 	ldw	r2,-12(fp)
   2e2a0:	10800217 	ldw	r2,8(r2)
   2e2a4:	100f883a 	mov	r7,r2
   2e2a8:	e1bfff17 	ldw	r6,-4(fp)
   2e2ac:	e17ffe17 	ldw	r5,-8(fp)
   2e2b0:	1809883a 	mov	r4,r3
   2e2b4:	002e8940 	call	2e894 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2e2b8:	e037883a 	mov	sp,fp
   2e2bc:	dfc00117 	ldw	ra,4(sp)
   2e2c0:	df000017 	ldw	fp,0(sp)
   2e2c4:	dec00204 	addi	sp,sp,8
   2e2c8:	f800283a 	ret

0002e2cc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2e2cc:	defffa04 	addi	sp,sp,-24
   2e2d0:	dfc00515 	stw	ra,20(sp)
   2e2d4:	df000415 	stw	fp,16(sp)
   2e2d8:	df000404 	addi	fp,sp,16
   2e2dc:	e13ffd15 	stw	r4,-12(fp)
   2e2e0:	e17ffe15 	stw	r5,-8(fp)
   2e2e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e2e8:	e0bffd17 	ldw	r2,-12(fp)
   2e2ec:	10800017 	ldw	r2,0(r2)
   2e2f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2e2f4:	e0bffc17 	ldw	r2,-16(fp)
   2e2f8:	10c00a04 	addi	r3,r2,40
   2e2fc:	e0bffd17 	ldw	r2,-12(fp)
   2e300:	10800217 	ldw	r2,8(r2)
   2e304:	100f883a 	mov	r7,r2
   2e308:	e1bfff17 	ldw	r6,-4(fp)
   2e30c:	e17ffe17 	ldw	r5,-8(fp)
   2e310:	1809883a 	mov	r4,r3
   2e314:	002eab00 	call	2eab0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2e318:	e037883a 	mov	sp,fp
   2e31c:	dfc00117 	ldw	ra,4(sp)
   2e320:	df000017 	ldw	fp,0(sp)
   2e324:	dec00204 	addi	sp,sp,8
   2e328:	f800283a 	ret

0002e32c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2e32c:	defffc04 	addi	sp,sp,-16
   2e330:	dfc00315 	stw	ra,12(sp)
   2e334:	df000215 	stw	fp,8(sp)
   2e338:	df000204 	addi	fp,sp,8
   2e33c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e340:	e0bfff17 	ldw	r2,-4(fp)
   2e344:	10800017 	ldw	r2,0(r2)
   2e348:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2e34c:	e0bffe17 	ldw	r2,-8(fp)
   2e350:	10c00a04 	addi	r3,r2,40
   2e354:	e0bfff17 	ldw	r2,-4(fp)
   2e358:	10800217 	ldw	r2,8(r2)
   2e35c:	100b883a 	mov	r5,r2
   2e360:	1809883a 	mov	r4,r3
   2e364:	002e73c0 	call	2e73c <altera_avalon_jtag_uart_close>
}
   2e368:	e037883a 	mov	sp,fp
   2e36c:	dfc00117 	ldw	ra,4(sp)
   2e370:	df000017 	ldw	fp,0(sp)
   2e374:	dec00204 	addi	sp,sp,8
   2e378:	f800283a 	ret

0002e37c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2e37c:	defffa04 	addi	sp,sp,-24
   2e380:	dfc00515 	stw	ra,20(sp)
   2e384:	df000415 	stw	fp,16(sp)
   2e388:	df000404 	addi	fp,sp,16
   2e38c:	e13ffd15 	stw	r4,-12(fp)
   2e390:	e17ffe15 	stw	r5,-8(fp)
   2e394:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2e398:	e0bffd17 	ldw	r2,-12(fp)
   2e39c:	10800017 	ldw	r2,0(r2)
   2e3a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2e3a4:	e0bffc17 	ldw	r2,-16(fp)
   2e3a8:	10800a04 	addi	r2,r2,40
   2e3ac:	e1bfff17 	ldw	r6,-4(fp)
   2e3b0:	e17ffe17 	ldw	r5,-8(fp)
   2e3b4:	1009883a 	mov	r4,r2
   2e3b8:	002e7a40 	call	2e7a4 <altera_avalon_jtag_uart_ioctl>
}
   2e3bc:	e037883a 	mov	sp,fp
   2e3c0:	dfc00117 	ldw	ra,4(sp)
   2e3c4:	df000017 	ldw	fp,0(sp)
   2e3c8:	dec00204 	addi	sp,sp,8
   2e3cc:	f800283a 	ret

0002e3d0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2e3d0:	defffa04 	addi	sp,sp,-24
   2e3d4:	dfc00515 	stw	ra,20(sp)
   2e3d8:	df000415 	stw	fp,16(sp)
   2e3dc:	df000404 	addi	fp,sp,16
   2e3e0:	e13ffd15 	stw	r4,-12(fp)
   2e3e4:	e17ffe15 	stw	r5,-8(fp)
   2e3e8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e3ec:	e0bffd17 	ldw	r2,-12(fp)
   2e3f0:	00c00044 	movi	r3,1
   2e3f4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2e3f8:	e0bffd17 	ldw	r2,-12(fp)
   2e3fc:	10800017 	ldw	r2,0(r2)
   2e400:	10800104 	addi	r2,r2,4
   2e404:	1007883a 	mov	r3,r2
   2e408:	e0bffd17 	ldw	r2,-12(fp)
   2e40c:	10800817 	ldw	r2,32(r2)
   2e410:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2e414:	e0bffe17 	ldw	r2,-8(fp)
   2e418:	e0ffff17 	ldw	r3,-4(fp)
   2e41c:	d8000015 	stw	zero,0(sp)
   2e420:	e1fffd17 	ldw	r7,-12(fp)
   2e424:	018000f4 	movhi	r6,3
   2e428:	31b92404 	addi	r6,r6,-7024
   2e42c:	180b883a 	mov	r5,r3
   2e430:	1009883a 	mov	r4,r2
   2e434:	00300e40 	call	300e4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2e438:	e0bffd17 	ldw	r2,-12(fp)
   2e43c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2e440:	e0bffd17 	ldw	r2,-12(fp)
   2e444:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2e448:	d0e72217 	ldw	r3,-25464(gp)
   2e44c:	e1fffd17 	ldw	r7,-12(fp)
   2e450:	018000f4 	movhi	r6,3
   2e454:	31b9a704 	addi	r6,r6,-6500
   2e458:	180b883a 	mov	r5,r3
   2e45c:	1009883a 	mov	r4,r2
   2e460:	002fc800 	call	2fc80 <alt_alarm_start>
   2e464:	1000040e 	bge	r2,zero,2e478 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2e468:	e0fffd17 	ldw	r3,-12(fp)
   2e46c:	00a00034 	movhi	r2,32768
   2e470:	10bfffc4 	addi	r2,r2,-1
   2e474:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2e478:	0001883a 	nop
   2e47c:	e037883a 	mov	sp,fp
   2e480:	dfc00117 	ldw	ra,4(sp)
   2e484:	df000017 	ldw	fp,0(sp)
   2e488:	dec00204 	addi	sp,sp,8
   2e48c:	f800283a 	ret

0002e490 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2e490:	defff804 	addi	sp,sp,-32
   2e494:	df000715 	stw	fp,28(sp)
   2e498:	df000704 	addi	fp,sp,28
   2e49c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2e4a0:	e0bfff17 	ldw	r2,-4(fp)
   2e4a4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2e4a8:	e0bffb17 	ldw	r2,-20(fp)
   2e4ac:	10800017 	ldw	r2,0(r2)
   2e4b0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e4b4:	e0bffc17 	ldw	r2,-16(fp)
   2e4b8:	10800104 	addi	r2,r2,4
   2e4bc:	10800037 	ldwio	r2,0(r2)
   2e4c0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2e4c4:	e0bffd17 	ldw	r2,-12(fp)
   2e4c8:	1080c00c 	andi	r2,r2,768
   2e4cc:	10006d26 	beq	r2,zero,2e684 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2e4d0:	e0bffd17 	ldw	r2,-12(fp)
   2e4d4:	1080400c 	andi	r2,r2,256
   2e4d8:	10003526 	beq	r2,zero,2e5b0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2e4dc:	00800074 	movhi	r2,1
   2e4e0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e4e4:	e0bffb17 	ldw	r2,-20(fp)
   2e4e8:	10800a17 	ldw	r2,40(r2)
   2e4ec:	10800044 	addi	r2,r2,1
   2e4f0:	1081ffcc 	andi	r2,r2,2047
   2e4f4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2e4f8:	e0bffb17 	ldw	r2,-20(fp)
   2e4fc:	10c00b17 	ldw	r3,44(r2)
   2e500:	e0bffe17 	ldw	r2,-8(fp)
   2e504:	18801526 	beq	r3,r2,2e55c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2e508:	e0bffc17 	ldw	r2,-16(fp)
   2e50c:	10800037 	ldwio	r2,0(r2)
   2e510:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2e514:	e0bff917 	ldw	r2,-28(fp)
   2e518:	10a0000c 	andi	r2,r2,32768
   2e51c:	10001126 	beq	r2,zero,2e564 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2e520:	e0bffb17 	ldw	r2,-20(fp)
   2e524:	10800a17 	ldw	r2,40(r2)
   2e528:	e0fff917 	ldw	r3,-28(fp)
   2e52c:	1809883a 	mov	r4,r3
   2e530:	e0fffb17 	ldw	r3,-20(fp)
   2e534:	1885883a 	add	r2,r3,r2
   2e538:	10800e04 	addi	r2,r2,56
   2e53c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e540:	e0bffb17 	ldw	r2,-20(fp)
   2e544:	10800a17 	ldw	r2,40(r2)
   2e548:	10800044 	addi	r2,r2,1
   2e54c:	10c1ffcc 	andi	r3,r2,2047
   2e550:	e0bffb17 	ldw	r2,-20(fp)
   2e554:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2e558:	003fe206 	br	2e4e4 <_gp+0xffff3380>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2e55c:	0001883a 	nop
   2e560:	00000106 	br	2e568 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2e564:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2e568:	e0bff917 	ldw	r2,-28(fp)
   2e56c:	10bfffec 	andhi	r2,r2,65535
   2e570:	10000f26 	beq	r2,zero,2e5b0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e574:	e0bffb17 	ldw	r2,-20(fp)
   2e578:	10c00817 	ldw	r3,32(r2)
   2e57c:	00bfff84 	movi	r2,-2
   2e580:	1886703a 	and	r3,r3,r2
   2e584:	e0bffb17 	ldw	r2,-20(fp)
   2e588:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2e58c:	e0bffc17 	ldw	r2,-16(fp)
   2e590:	10800104 	addi	r2,r2,4
   2e594:	1007883a 	mov	r3,r2
   2e598:	e0bffb17 	ldw	r2,-20(fp)
   2e59c:	10800817 	ldw	r2,32(r2)
   2e5a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e5a4:	e0bffc17 	ldw	r2,-16(fp)
   2e5a8:	10800104 	addi	r2,r2,4
   2e5ac:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2e5b0:	e0bffd17 	ldw	r2,-12(fp)
   2e5b4:	1080800c 	andi	r2,r2,512
   2e5b8:	103fbe26 	beq	r2,zero,2e4b4 <_gp+0xffff3350>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2e5bc:	e0bffd17 	ldw	r2,-12(fp)
   2e5c0:	1004d43a 	srli	r2,r2,16
   2e5c4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2e5c8:	00001406 	br	2e61c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2e5cc:	e0bffc17 	ldw	r2,-16(fp)
   2e5d0:	e0fffb17 	ldw	r3,-20(fp)
   2e5d4:	18c00d17 	ldw	r3,52(r3)
   2e5d8:	e13ffb17 	ldw	r4,-20(fp)
   2e5dc:	20c7883a 	add	r3,r4,r3
   2e5e0:	18c20e04 	addi	r3,r3,2104
   2e5e4:	18c00003 	ldbu	r3,0(r3)
   2e5e8:	18c03fcc 	andi	r3,r3,255
   2e5ec:	18c0201c 	xori	r3,r3,128
   2e5f0:	18ffe004 	addi	r3,r3,-128
   2e5f4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e5f8:	e0bffb17 	ldw	r2,-20(fp)
   2e5fc:	10800d17 	ldw	r2,52(r2)
   2e600:	10800044 	addi	r2,r2,1
   2e604:	10c1ffcc 	andi	r3,r2,2047
   2e608:	e0bffb17 	ldw	r2,-20(fp)
   2e60c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2e610:	e0bffa17 	ldw	r2,-24(fp)
   2e614:	10bfffc4 	addi	r2,r2,-1
   2e618:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2e61c:	e0bffa17 	ldw	r2,-24(fp)
   2e620:	10000526 	beq	r2,zero,2e638 <altera_avalon_jtag_uart_irq+0x1a8>
   2e624:	e0bffb17 	ldw	r2,-20(fp)
   2e628:	10c00d17 	ldw	r3,52(r2)
   2e62c:	e0bffb17 	ldw	r2,-20(fp)
   2e630:	10800c17 	ldw	r2,48(r2)
   2e634:	18bfe51e 	bne	r3,r2,2e5cc <_gp+0xffff3468>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2e638:	e0bffa17 	ldw	r2,-24(fp)
   2e63c:	103f9d26 	beq	r2,zero,2e4b4 <_gp+0xffff3350>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2e640:	e0bffb17 	ldw	r2,-20(fp)
   2e644:	10c00817 	ldw	r3,32(r2)
   2e648:	00bfff44 	movi	r2,-3
   2e64c:	1886703a 	and	r3,r3,r2
   2e650:	e0bffb17 	ldw	r2,-20(fp)
   2e654:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2e658:	e0bffb17 	ldw	r2,-20(fp)
   2e65c:	10800017 	ldw	r2,0(r2)
   2e660:	10800104 	addi	r2,r2,4
   2e664:	1007883a 	mov	r3,r2
   2e668:	e0bffb17 	ldw	r2,-20(fp)
   2e66c:	10800817 	ldw	r2,32(r2)
   2e670:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e674:	e0bffc17 	ldw	r2,-16(fp)
   2e678:	10800104 	addi	r2,r2,4
   2e67c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2e680:	003f8c06 	br	2e4b4 <_gp+0xffff3350>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   2e684:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2e688:	0001883a 	nop
   2e68c:	e037883a 	mov	sp,fp
   2e690:	df000017 	ldw	fp,0(sp)
   2e694:	dec00104 	addi	sp,sp,4
   2e698:	f800283a 	ret

0002e69c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2e69c:	defff804 	addi	sp,sp,-32
   2e6a0:	df000715 	stw	fp,28(sp)
   2e6a4:	df000704 	addi	fp,sp,28
   2e6a8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2e6ac:	e0bffb17 	ldw	r2,-20(fp)
   2e6b0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2e6b4:	e0bff917 	ldw	r2,-28(fp)
   2e6b8:	10800017 	ldw	r2,0(r2)
   2e6bc:	10800104 	addi	r2,r2,4
   2e6c0:	10800037 	ldwio	r2,0(r2)
   2e6c4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2e6c8:	e0bffa17 	ldw	r2,-24(fp)
   2e6cc:	1081000c 	andi	r2,r2,1024
   2e6d0:	10000b26 	beq	r2,zero,2e700 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2e6d4:	e0bff917 	ldw	r2,-28(fp)
   2e6d8:	10800017 	ldw	r2,0(r2)
   2e6dc:	10800104 	addi	r2,r2,4
   2e6e0:	1007883a 	mov	r3,r2
   2e6e4:	e0bff917 	ldw	r2,-28(fp)
   2e6e8:	10800817 	ldw	r2,32(r2)
   2e6ec:	10810014 	ori	r2,r2,1024
   2e6f0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2e6f4:	e0bff917 	ldw	r2,-28(fp)
   2e6f8:	10000915 	stw	zero,36(r2)
   2e6fc:	00000a06 	br	2e728 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2e700:	e0bff917 	ldw	r2,-28(fp)
   2e704:	10c00917 	ldw	r3,36(r2)
   2e708:	00a00034 	movhi	r2,32768
   2e70c:	10bfff04 	addi	r2,r2,-4
   2e710:	10c00536 	bltu	r2,r3,2e728 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   2e714:	e0bff917 	ldw	r2,-28(fp)
   2e718:	10800917 	ldw	r2,36(r2)
   2e71c:	10c00044 	addi	r3,r2,1
   2e720:	e0bff917 	ldw	r2,-28(fp)
   2e724:	10c00915 	stw	r3,36(r2)
   2e728:	d0a72217 	ldw	r2,-25464(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2e72c:	e037883a 	mov	sp,fp
   2e730:	df000017 	ldw	fp,0(sp)
   2e734:	dec00104 	addi	sp,sp,4
   2e738:	f800283a 	ret

0002e73c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2e73c:	defffd04 	addi	sp,sp,-12
   2e740:	df000215 	stw	fp,8(sp)
   2e744:	df000204 	addi	fp,sp,8
   2e748:	e13ffe15 	stw	r4,-8(fp)
   2e74c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2e750:	00000506 	br	2e768 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2e754:	e0bfff17 	ldw	r2,-4(fp)
   2e758:	1090000c 	andi	r2,r2,16384
   2e75c:	10000226 	beq	r2,zero,2e768 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2e760:	00bffd44 	movi	r2,-11
   2e764:	00000b06 	br	2e794 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2e768:	e0bffe17 	ldw	r2,-8(fp)
   2e76c:	10c00d17 	ldw	r3,52(r2)
   2e770:	e0bffe17 	ldw	r2,-8(fp)
   2e774:	10800c17 	ldw	r2,48(r2)
   2e778:	18800526 	beq	r3,r2,2e790 <altera_avalon_jtag_uart_close+0x54>
   2e77c:	e0bffe17 	ldw	r2,-8(fp)
   2e780:	10c00917 	ldw	r3,36(r2)
   2e784:	e0bffe17 	ldw	r2,-8(fp)
   2e788:	10800117 	ldw	r2,4(r2)
   2e78c:	18bff136 	bltu	r3,r2,2e754 <_gp+0xffff35f0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2e790:	0005883a 	mov	r2,zero
}
   2e794:	e037883a 	mov	sp,fp
   2e798:	df000017 	ldw	fp,0(sp)
   2e79c:	dec00104 	addi	sp,sp,4
   2e7a0:	f800283a 	ret

0002e7a4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2e7a4:	defffa04 	addi	sp,sp,-24
   2e7a8:	df000515 	stw	fp,20(sp)
   2e7ac:	df000504 	addi	fp,sp,20
   2e7b0:	e13ffd15 	stw	r4,-12(fp)
   2e7b4:	e17ffe15 	stw	r5,-8(fp)
   2e7b8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2e7bc:	00bff9c4 	movi	r2,-25
   2e7c0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2e7c4:	e0bffe17 	ldw	r2,-8(fp)
   2e7c8:	10da8060 	cmpeqi	r3,r2,27137
   2e7cc:	1800031e 	bne	r3,zero,2e7dc <altera_avalon_jtag_uart_ioctl+0x38>
   2e7d0:	109a80a0 	cmpeqi	r2,r2,27138
   2e7d4:	1000181e 	bne	r2,zero,2e838 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   2e7d8:	00002906 	br	2e880 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2e7dc:	e0bffd17 	ldw	r2,-12(fp)
   2e7e0:	10c00117 	ldw	r3,4(r2)
   2e7e4:	00a00034 	movhi	r2,32768
   2e7e8:	10bfffc4 	addi	r2,r2,-1
   2e7ec:	18802126 	beq	r3,r2,2e874 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   2e7f0:	e0bfff17 	ldw	r2,-4(fp)
   2e7f4:	10800017 	ldw	r2,0(r2)
   2e7f8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2e7fc:	e0bffc17 	ldw	r2,-16(fp)
   2e800:	10800090 	cmplti	r2,r2,2
   2e804:	1000061e 	bne	r2,zero,2e820 <altera_avalon_jtag_uart_ioctl+0x7c>
   2e808:	e0fffc17 	ldw	r3,-16(fp)
   2e80c:	00a00034 	movhi	r2,32768
   2e810:	10bfffc4 	addi	r2,r2,-1
   2e814:	18800226 	beq	r3,r2,2e820 <altera_avalon_jtag_uart_ioctl+0x7c>
   2e818:	e0bffc17 	ldw	r2,-16(fp)
   2e81c:	00000206 	br	2e828 <altera_avalon_jtag_uart_ioctl+0x84>
   2e820:	00a00034 	movhi	r2,32768
   2e824:	10bfff84 	addi	r2,r2,-2
   2e828:	e0fffd17 	ldw	r3,-12(fp)
   2e82c:	18800115 	stw	r2,4(r3)
      rc = 0;
   2e830:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2e834:	00000f06 	br	2e874 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2e838:	e0bffd17 	ldw	r2,-12(fp)
   2e83c:	10c00117 	ldw	r3,4(r2)
   2e840:	00a00034 	movhi	r2,32768
   2e844:	10bfffc4 	addi	r2,r2,-1
   2e848:	18800c26 	beq	r3,r2,2e87c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2e84c:	e0bffd17 	ldw	r2,-12(fp)
   2e850:	10c00917 	ldw	r3,36(r2)
   2e854:	e0bffd17 	ldw	r2,-12(fp)
   2e858:	10800117 	ldw	r2,4(r2)
   2e85c:	1885803a 	cmpltu	r2,r3,r2
   2e860:	10c03fcc 	andi	r3,r2,255
   2e864:	e0bfff17 	ldw	r2,-4(fp)
   2e868:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2e86c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2e870:	00000206 	br	2e87c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2e874:	0001883a 	nop
   2e878:	00000106 	br	2e880 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2e87c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2e880:	e0bffb17 	ldw	r2,-20(fp)
}
   2e884:	e037883a 	mov	sp,fp
   2e888:	df000017 	ldw	fp,0(sp)
   2e88c:	dec00104 	addi	sp,sp,4
   2e890:	f800283a 	ret

0002e894 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2e894:	defff304 	addi	sp,sp,-52
   2e898:	dfc00c15 	stw	ra,48(sp)
   2e89c:	df000b15 	stw	fp,44(sp)
   2e8a0:	df000b04 	addi	fp,sp,44
   2e8a4:	e13ffc15 	stw	r4,-16(fp)
   2e8a8:	e17ffd15 	stw	r5,-12(fp)
   2e8ac:	e1bffe15 	stw	r6,-8(fp)
   2e8b0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2e8b4:	e0bffd17 	ldw	r2,-12(fp)
   2e8b8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2e8bc:	00004706 	br	2e9dc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2e8c0:	e0bffc17 	ldw	r2,-16(fp)
   2e8c4:	10800a17 	ldw	r2,40(r2)
   2e8c8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2e8cc:	e0bffc17 	ldw	r2,-16(fp)
   2e8d0:	10800b17 	ldw	r2,44(r2)
   2e8d4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2e8d8:	e0fff717 	ldw	r3,-36(fp)
   2e8dc:	e0bff817 	ldw	r2,-32(fp)
   2e8e0:	18800536 	bltu	r3,r2,2e8f8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2e8e4:	e0fff717 	ldw	r3,-36(fp)
   2e8e8:	e0bff817 	ldw	r2,-32(fp)
   2e8ec:	1885c83a 	sub	r2,r3,r2
   2e8f0:	e0bff615 	stw	r2,-40(fp)
   2e8f4:	00000406 	br	2e908 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2e8f8:	00c20004 	movi	r3,2048
   2e8fc:	e0bff817 	ldw	r2,-32(fp)
   2e900:	1885c83a 	sub	r2,r3,r2
   2e904:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2e908:	e0bff617 	ldw	r2,-40(fp)
   2e90c:	10001e26 	beq	r2,zero,2e988 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2e910:	e0fffe17 	ldw	r3,-8(fp)
   2e914:	e0bff617 	ldw	r2,-40(fp)
   2e918:	1880022e 	bgeu	r3,r2,2e924 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   2e91c:	e0bffe17 	ldw	r2,-8(fp)
   2e920:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2e924:	e0bffc17 	ldw	r2,-16(fp)
   2e928:	10c00e04 	addi	r3,r2,56
   2e92c:	e0bff817 	ldw	r2,-32(fp)
   2e930:	1885883a 	add	r2,r3,r2
   2e934:	e1bff617 	ldw	r6,-40(fp)
   2e938:	100b883a 	mov	r5,r2
   2e93c:	e13ff517 	ldw	r4,-44(fp)
   2e940:	00264b40 	call	264b4 <memcpy>
      ptr   += n;
   2e944:	e0fff517 	ldw	r3,-44(fp)
   2e948:	e0bff617 	ldw	r2,-40(fp)
   2e94c:	1885883a 	add	r2,r3,r2
   2e950:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2e954:	e0fffe17 	ldw	r3,-8(fp)
   2e958:	e0bff617 	ldw	r2,-40(fp)
   2e95c:	1885c83a 	sub	r2,r3,r2
   2e960:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e964:	e0fff817 	ldw	r3,-32(fp)
   2e968:	e0bff617 	ldw	r2,-40(fp)
   2e96c:	1885883a 	add	r2,r3,r2
   2e970:	10c1ffcc 	andi	r3,r2,2047
   2e974:	e0bffc17 	ldw	r2,-16(fp)
   2e978:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2e97c:	e0bffe17 	ldw	r2,-8(fp)
   2e980:	00bfcf16 	blt	zero,r2,2e8c0 <_gp+0xffff375c>
   2e984:	00000106 	br	2e98c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   2e988:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2e98c:	e0fff517 	ldw	r3,-44(fp)
   2e990:	e0bffd17 	ldw	r2,-12(fp)
   2e994:	1880141e 	bne	r3,r2,2e9e8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2e998:	e0bfff17 	ldw	r2,-4(fp)
   2e99c:	1090000c 	andi	r2,r2,16384
   2e9a0:	1000131e 	bne	r2,zero,2e9f0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2e9a4:	0001883a 	nop
   2e9a8:	e0bffc17 	ldw	r2,-16(fp)
   2e9ac:	10c00a17 	ldw	r3,40(r2)
   2e9b0:	e0bff717 	ldw	r2,-36(fp)
   2e9b4:	1880051e 	bne	r3,r2,2e9cc <altera_avalon_jtag_uart_read+0x138>
   2e9b8:	e0bffc17 	ldw	r2,-16(fp)
   2e9bc:	10c00917 	ldw	r3,36(r2)
   2e9c0:	e0bffc17 	ldw	r2,-16(fp)
   2e9c4:	10800117 	ldw	r2,4(r2)
   2e9c8:	18bff736 	bltu	r3,r2,2e9a8 <_gp+0xffff3844>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2e9cc:	e0bffc17 	ldw	r2,-16(fp)
   2e9d0:	10c00a17 	ldw	r3,40(r2)
   2e9d4:	e0bff717 	ldw	r2,-36(fp)
   2e9d8:	18800726 	beq	r3,r2,2e9f8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2e9dc:	e0bffe17 	ldw	r2,-8(fp)
   2e9e0:	00bfb716 	blt	zero,r2,2e8c0 <_gp+0xffff375c>
   2e9e4:	00000506 	br	2e9fc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2e9e8:	0001883a 	nop
   2e9ec:	00000306 	br	2e9fc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2e9f0:	0001883a 	nop
   2e9f4:	00000106 	br	2e9fc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2e9f8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2e9fc:	e0fff517 	ldw	r3,-44(fp)
   2ea00:	e0bffd17 	ldw	r2,-12(fp)
   2ea04:	18801826 	beq	r3,r2,2ea68 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ea08:	0005303a 	rdctl	r2,status
   2ea0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ea10:	e0fffb17 	ldw	r3,-20(fp)
   2ea14:	00bfff84 	movi	r2,-2
   2ea18:	1884703a 	and	r2,r3,r2
   2ea1c:	1001703a 	wrctl	status,r2
  
  return context;
   2ea20:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2ea24:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2ea28:	e0bffc17 	ldw	r2,-16(fp)
   2ea2c:	10800817 	ldw	r2,32(r2)
   2ea30:	10c00054 	ori	r3,r2,1
   2ea34:	e0bffc17 	ldw	r2,-16(fp)
   2ea38:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2ea3c:	e0bffc17 	ldw	r2,-16(fp)
   2ea40:	10800017 	ldw	r2,0(r2)
   2ea44:	10800104 	addi	r2,r2,4
   2ea48:	1007883a 	mov	r3,r2
   2ea4c:	e0bffc17 	ldw	r2,-16(fp)
   2ea50:	10800817 	ldw	r2,32(r2)
   2ea54:	18800035 	stwio	r2,0(r3)
   2ea58:	e0bffa17 	ldw	r2,-24(fp)
   2ea5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ea60:	e0bff917 	ldw	r2,-28(fp)
   2ea64:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2ea68:	e0fff517 	ldw	r3,-44(fp)
   2ea6c:	e0bffd17 	ldw	r2,-12(fp)
   2ea70:	18800426 	beq	r3,r2,2ea84 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   2ea74:	e0fff517 	ldw	r3,-44(fp)
   2ea78:	e0bffd17 	ldw	r2,-12(fp)
   2ea7c:	1885c83a 	sub	r2,r3,r2
   2ea80:	00000606 	br	2ea9c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   2ea84:	e0bfff17 	ldw	r2,-4(fp)
   2ea88:	1090000c 	andi	r2,r2,16384
   2ea8c:	10000226 	beq	r2,zero,2ea98 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2ea90:	00bffd44 	movi	r2,-11
   2ea94:	00000106 	br	2ea9c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   2ea98:	00bffec4 	movi	r2,-5
}
   2ea9c:	e037883a 	mov	sp,fp
   2eaa0:	dfc00117 	ldw	ra,4(sp)
   2eaa4:	df000017 	ldw	fp,0(sp)
   2eaa8:	dec00204 	addi	sp,sp,8
   2eaac:	f800283a 	ret

0002eab0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2eab0:	defff304 	addi	sp,sp,-52
   2eab4:	dfc00c15 	stw	ra,48(sp)
   2eab8:	df000b15 	stw	fp,44(sp)
   2eabc:	df000b04 	addi	fp,sp,44
   2eac0:	e13ffc15 	stw	r4,-16(fp)
   2eac4:	e17ffd15 	stw	r5,-12(fp)
   2eac8:	e1bffe15 	stw	r6,-8(fp)
   2eacc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2ead0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2ead4:	e0bffd17 	ldw	r2,-12(fp)
   2ead8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2eadc:	00003706 	br	2ebbc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2eae0:	e0bffc17 	ldw	r2,-16(fp)
   2eae4:	10800c17 	ldw	r2,48(r2)
   2eae8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   2eaec:	e0bffc17 	ldw	r2,-16(fp)
   2eaf0:	10800d17 	ldw	r2,52(r2)
   2eaf4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2eaf8:	e0fff917 	ldw	r3,-28(fp)
   2eafc:	e0bff517 	ldw	r2,-44(fp)
   2eb00:	1880062e 	bgeu	r3,r2,2eb1c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2eb04:	e0fff517 	ldw	r3,-44(fp)
   2eb08:	e0bff917 	ldw	r2,-28(fp)
   2eb0c:	1885c83a 	sub	r2,r3,r2
   2eb10:	10bfffc4 	addi	r2,r2,-1
   2eb14:	e0bff615 	stw	r2,-40(fp)
   2eb18:	00000b06 	br	2eb48 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2eb1c:	e0bff517 	ldw	r2,-44(fp)
   2eb20:	10000526 	beq	r2,zero,2eb38 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2eb24:	00c20004 	movi	r3,2048
   2eb28:	e0bff917 	ldw	r2,-28(fp)
   2eb2c:	1885c83a 	sub	r2,r3,r2
   2eb30:	e0bff615 	stw	r2,-40(fp)
   2eb34:	00000406 	br	2eb48 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2eb38:	00c1ffc4 	movi	r3,2047
   2eb3c:	e0bff917 	ldw	r2,-28(fp)
   2eb40:	1885c83a 	sub	r2,r3,r2
   2eb44:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2eb48:	e0bff617 	ldw	r2,-40(fp)
   2eb4c:	10001e26 	beq	r2,zero,2ebc8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2eb50:	e0fffe17 	ldw	r3,-8(fp)
   2eb54:	e0bff617 	ldw	r2,-40(fp)
   2eb58:	1880022e 	bgeu	r3,r2,2eb64 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2eb5c:	e0bffe17 	ldw	r2,-8(fp)
   2eb60:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2eb64:	e0bffc17 	ldw	r2,-16(fp)
   2eb68:	10c20e04 	addi	r3,r2,2104
   2eb6c:	e0bff917 	ldw	r2,-28(fp)
   2eb70:	1885883a 	add	r2,r3,r2
   2eb74:	e1bff617 	ldw	r6,-40(fp)
   2eb78:	e17ffd17 	ldw	r5,-12(fp)
   2eb7c:	1009883a 	mov	r4,r2
   2eb80:	00264b40 	call	264b4 <memcpy>
      ptr   += n;
   2eb84:	e0fffd17 	ldw	r3,-12(fp)
   2eb88:	e0bff617 	ldw	r2,-40(fp)
   2eb8c:	1885883a 	add	r2,r3,r2
   2eb90:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2eb94:	e0fffe17 	ldw	r3,-8(fp)
   2eb98:	e0bff617 	ldw	r2,-40(fp)
   2eb9c:	1885c83a 	sub	r2,r3,r2
   2eba0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2eba4:	e0fff917 	ldw	r3,-28(fp)
   2eba8:	e0bff617 	ldw	r2,-40(fp)
   2ebac:	1885883a 	add	r2,r3,r2
   2ebb0:	10c1ffcc 	andi	r3,r2,2047
   2ebb4:	e0bffc17 	ldw	r2,-16(fp)
   2ebb8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2ebbc:	e0bffe17 	ldw	r2,-8(fp)
   2ebc0:	00bfc716 	blt	zero,r2,2eae0 <_gp+0xffff397c>
   2ebc4:	00000106 	br	2ebcc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2ebc8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ebcc:	0005303a 	rdctl	r2,status
   2ebd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ebd4:	e0fffb17 	ldw	r3,-20(fp)
   2ebd8:	00bfff84 	movi	r2,-2
   2ebdc:	1884703a 	and	r2,r3,r2
   2ebe0:	1001703a 	wrctl	status,r2
  
  return context;
   2ebe4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2ebe8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2ebec:	e0bffc17 	ldw	r2,-16(fp)
   2ebf0:	10800817 	ldw	r2,32(r2)
   2ebf4:	10c00094 	ori	r3,r2,2
   2ebf8:	e0bffc17 	ldw	r2,-16(fp)
   2ebfc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2ec00:	e0bffc17 	ldw	r2,-16(fp)
   2ec04:	10800017 	ldw	r2,0(r2)
   2ec08:	10800104 	addi	r2,r2,4
   2ec0c:	1007883a 	mov	r3,r2
   2ec10:	e0bffc17 	ldw	r2,-16(fp)
   2ec14:	10800817 	ldw	r2,32(r2)
   2ec18:	18800035 	stwio	r2,0(r3)
   2ec1c:	e0bffa17 	ldw	r2,-24(fp)
   2ec20:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ec24:	e0bff817 	ldw	r2,-32(fp)
   2ec28:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2ec2c:	e0bffe17 	ldw	r2,-8(fp)
   2ec30:	0080100e 	bge	zero,r2,2ec74 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   2ec34:	e0bfff17 	ldw	r2,-4(fp)
   2ec38:	1090000c 	andi	r2,r2,16384
   2ec3c:	1000101e 	bne	r2,zero,2ec80 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2ec40:	0001883a 	nop
   2ec44:	e0bffc17 	ldw	r2,-16(fp)
   2ec48:	10c00d17 	ldw	r3,52(r2)
   2ec4c:	e0bff517 	ldw	r2,-44(fp)
   2ec50:	1880051e 	bne	r3,r2,2ec68 <altera_avalon_jtag_uart_write+0x1b8>
   2ec54:	e0bffc17 	ldw	r2,-16(fp)
   2ec58:	10c00917 	ldw	r3,36(r2)
   2ec5c:	e0bffc17 	ldw	r2,-16(fp)
   2ec60:	10800117 	ldw	r2,4(r2)
   2ec64:	18bff736 	bltu	r3,r2,2ec44 <_gp+0xffff3ae0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2ec68:	e0bffc17 	ldw	r2,-16(fp)
   2ec6c:	10800917 	ldw	r2,36(r2)
   2ec70:	1000051e 	bne	r2,zero,2ec88 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2ec74:	e0bffe17 	ldw	r2,-8(fp)
   2ec78:	00bfd016 	blt	zero,r2,2ebbc <_gp+0xffff3a58>
   2ec7c:	00000306 	br	2ec8c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2ec80:	0001883a 	nop
   2ec84:	00000106 	br	2ec8c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   2ec88:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2ec8c:	e0fffd17 	ldw	r3,-12(fp)
   2ec90:	e0bff717 	ldw	r2,-36(fp)
   2ec94:	18800426 	beq	r3,r2,2eca8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2ec98:	e0fffd17 	ldw	r3,-12(fp)
   2ec9c:	e0bff717 	ldw	r2,-36(fp)
   2eca0:	1885c83a 	sub	r2,r3,r2
   2eca4:	00000606 	br	2ecc0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2eca8:	e0bfff17 	ldw	r2,-4(fp)
   2ecac:	1090000c 	andi	r2,r2,16384
   2ecb0:	10000226 	beq	r2,zero,2ecbc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2ecb4:	00bffd44 	movi	r2,-11
   2ecb8:	00000106 	br	2ecc0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2ecbc:	00bffec4 	movi	r2,-5
}
   2ecc0:	e037883a 	mov	sp,fp
   2ecc4:	dfc00117 	ldw	ra,4(sp)
   2ecc8:	df000017 	ldw	fp,0(sp)
   2eccc:	dec00204 	addi	sp,sp,8
   2ecd0:	f800283a 	ret

0002ecd4 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
   2ecd4:	defffa04 	addi	sp,sp,-24
   2ecd8:	dfc00515 	stw	ra,20(sp)
   2ecdc:	df000415 	stw	fp,16(sp)
   2ece0:	df000404 	addi	fp,sp,16
   2ece4:	e13ffe15 	stw	r4,-8(fp)
   2ece8:	2805883a 	mov	r2,r5
   2ecec:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   2ecf0:	e0bffe17 	ldw	r2,-8(fp)
   2ecf4:	10800017 	ldw	r2,0(r2)
   2ecf8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   2ecfc:	008003f4 	movhi	r2,15
   2ed00:	10909004 	addi	r2,r2,16960
   2ed04:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   2ed08:	e0bffe17 	ldw	r2,-8(fp)
   2ed0c:	10800803 	ldbu	r2,32(r2)
   2ed10:	10803fcc 	andi	r2,r2,255
   2ed14:	1080201c 	xori	r2,r2,128
   2ed18:	10bfe004 	addi	r2,r2,-128
   2ed1c:	1000151e 	bne	r2,zero,2ed74 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   2ed20:	00000906 	br	2ed48 <lcd_write_command+0x74>
    if (--i == 0)
   2ed24:	e0bffc17 	ldw	r2,-16(fp)
   2ed28:	10bfffc4 	addi	r2,r2,-1
   2ed2c:	e0bffc15 	stw	r2,-16(fp)
   2ed30:	e0bffc17 	ldw	r2,-16(fp)
   2ed34:	1000041e 	bne	r2,zero,2ed48 <lcd_write_command+0x74>
    {
      sp->broken = 1;
   2ed38:	e0bffe17 	ldw	r2,-8(fp)
   2ed3c:	00c00044 	movi	r3,1
   2ed40:	10c00805 	stb	r3,32(r2)
      return;
   2ed44:	00000c06 	br	2ed78 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   2ed48:	e0bffd17 	ldw	r2,-12(fp)
   2ed4c:	10800104 	addi	r2,r2,4
   2ed50:	10800037 	ldwio	r2,0(r2)
   2ed54:	1080200c 	andi	r2,r2,128
   2ed58:	103ff21e 	bne	r2,zero,2ed24 <_gp+0xffff3bc0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   2ed5c:	01001904 	movi	r4,100
   2ed60:	002e0300 	call	2e030 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
   2ed64:	e0bffd17 	ldw	r2,-12(fp)
   2ed68:	e0ffff03 	ldbu	r3,-4(fp)
   2ed6c:	10c00035 	stwio	r3,0(r2)
   2ed70:	00000106 	br	2ed78 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   2ed74:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
   2ed78:	e037883a 	mov	sp,fp
   2ed7c:	dfc00117 	ldw	ra,4(sp)
   2ed80:	df000017 	ldw	fp,0(sp)
   2ed84:	dec00204 	addi	sp,sp,8
   2ed88:	f800283a 	ret

0002ed8c <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
   2ed8c:	defffa04 	addi	sp,sp,-24
   2ed90:	dfc00515 	stw	ra,20(sp)
   2ed94:	df000415 	stw	fp,16(sp)
   2ed98:	df000404 	addi	fp,sp,16
   2ed9c:	e13ffe15 	stw	r4,-8(fp)
   2eda0:	2805883a 	mov	r2,r5
   2eda4:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   2eda8:	e0bffe17 	ldw	r2,-8(fp)
   2edac:	10800017 	ldw	r2,0(r2)
   2edb0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   2edb4:	008003f4 	movhi	r2,15
   2edb8:	10909004 	addi	r2,r2,16960
   2edbc:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   2edc0:	e0bffe17 	ldw	r2,-8(fp)
   2edc4:	10800803 	ldbu	r2,32(r2)
   2edc8:	10803fcc 	andi	r2,r2,255
   2edcc:	1080201c 	xori	r2,r2,128
   2edd0:	10bfe004 	addi	r2,r2,-128
   2edd4:	10001d1e 	bne	r2,zero,2ee4c <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   2edd8:	00000906 	br	2ee00 <lcd_write_data+0x74>
    if (--i == 0)
   2eddc:	e0bffc17 	ldw	r2,-16(fp)
   2ede0:	10bfffc4 	addi	r2,r2,-1
   2ede4:	e0bffc15 	stw	r2,-16(fp)
   2ede8:	e0bffc17 	ldw	r2,-16(fp)
   2edec:	1000041e 	bne	r2,zero,2ee00 <lcd_write_data+0x74>
    {
      sp->broken = 1;
   2edf0:	e0bffe17 	ldw	r2,-8(fp)
   2edf4:	00c00044 	movi	r3,1
   2edf8:	10c00805 	stb	r3,32(r2)
      return;
   2edfc:	00001406 	br	2ee50 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   2ee00:	e0bffd17 	ldw	r2,-12(fp)
   2ee04:	10800104 	addi	r2,r2,4
   2ee08:	10800037 	ldwio	r2,0(r2)
   2ee0c:	1080200c 	andi	r2,r2,128
   2ee10:	103ff21e 	bne	r2,zero,2eddc <_gp+0xffff3c78>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   2ee14:	01001904 	movi	r4,100
   2ee18:	002e0300 	call	2e030 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
   2ee1c:	e0bffd17 	ldw	r2,-12(fp)
   2ee20:	10800204 	addi	r2,r2,8
   2ee24:	1007883a 	mov	r3,r2
   2ee28:	e0bfff03 	ldbu	r2,-4(fp)
   2ee2c:	18800035 	stwio	r2,0(r3)

  sp->address++;
   2ee30:	e0bffe17 	ldw	r2,-8(fp)
   2ee34:	108008c3 	ldbu	r2,35(r2)
   2ee38:	10800044 	addi	r2,r2,1
   2ee3c:	1007883a 	mov	r3,r2
   2ee40:	e0bffe17 	ldw	r2,-8(fp)
   2ee44:	10c008c5 	stb	r3,35(r2)
   2ee48:	00000106 	br	2ee50 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   2ee4c:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
   2ee50:	e037883a 	mov	sp,fp
   2ee54:	dfc00117 	ldw	ra,4(sp)
   2ee58:	df000017 	ldw	fp,0(sp)
   2ee5c:	dec00204 	addi	sp,sp,8
   2ee60:	f800283a 	ret

0002ee64 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
   2ee64:	defffb04 	addi	sp,sp,-20
   2ee68:	dfc00415 	stw	ra,16(sp)
   2ee6c:	df000315 	stw	fp,12(sp)
   2ee70:	dc000215 	stw	r16,8(sp)
   2ee74:	df000304 	addi	fp,sp,12
   2ee78:	e13ffe15 	stw	r4,-8(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
   2ee7c:	01400044 	movi	r5,1
   2ee80:	e13ffe17 	ldw	r4,-8(fp)
   2ee84:	002ecd40 	call	2ecd4 <lcd_write_command>

  sp->x = 0;
   2ee88:	e0bffe17 	ldw	r2,-8(fp)
   2ee8c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
   2ee90:	e0bffe17 	ldw	r2,-8(fp)
   2ee94:	10000885 	stb	zero,34(r2)
  sp->address = 0;
   2ee98:	e0bffe17 	ldw	r2,-8(fp)
   2ee9c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2eea0:	e03ffd15 	stw	zero,-12(fp)
   2eea4:	00001f06 	br	2ef24 <lcd_clear_screen+0xc0>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
   2eea8:	014018c4 	movi	r5,99
   2eeac:	e13ffd17 	ldw	r4,-12(fp)
   2eeb0:	00208980 	call	20898 <__mulsi3>
   2eeb4:	10801004 	addi	r2,r2,64
   2eeb8:	e0fffe17 	ldw	r3,-8(fp)
   2eebc:	1885883a 	add	r2,r3,r2
   2eec0:	01801444 	movi	r6,81
   2eec4:	01400804 	movi	r5,32
   2eec8:	1009883a 	mov	r4,r2
   2eecc:	00267580 	call	26758 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
   2eed0:	014018c4 	movi	r5,99
   2eed4:	e13ffd17 	ldw	r4,-12(fp)
   2eed8:	00208980 	call	20898 <__mulsi3>
   2eedc:	10800c04 	addi	r2,r2,48
   2eee0:	e0fffe17 	ldw	r3,-8(fp)
   2eee4:	1885883a 	add	r2,r3,r2
   2eee8:	01800404 	movi	r6,16
   2eeec:	01400804 	movi	r5,32
   2eef0:	1009883a 	mov	r4,r2
   2eef4:	00267580 	call	26758 <memset>
    sp->line[y].width = 0;
   2eef8:	e43ffe17 	ldw	r16,-8(fp)
   2eefc:	e0bffd17 	ldw	r2,-12(fp)
   2ef00:	014018c4 	movi	r5,99
   2ef04:	1009883a 	mov	r4,r2
   2ef08:	00208980 	call	20898 <__mulsi3>
   2ef0c:	8085883a 	add	r2,r16,r2
   2ef10:	10802444 	addi	r2,r2,145
   2ef14:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2ef18:	e0bffd17 	ldw	r2,-12(fp)
   2ef1c:	10800044 	addi	r2,r2,1
   2ef20:	e0bffd15 	stw	r2,-12(fp)
   2ef24:	e0bffd17 	ldw	r2,-12(fp)
   2ef28:	10800090 	cmplti	r2,r2,2
   2ef2c:	103fde1e 	bne	r2,zero,2eea8 <_gp+0xffff3d44>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
   2ef30:	0001883a 	nop
   2ef34:	e6ffff04 	addi	sp,fp,-4
   2ef38:	dfc00217 	ldw	ra,8(sp)
   2ef3c:	df000117 	ldw	fp,4(sp)
   2ef40:	dc000017 	ldw	r16,0(sp)
   2ef44:	dec00304 	addi	sp,sp,12
   2ef48:	f800283a 	ret

0002ef4c <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
   2ef4c:	defff504 	addi	sp,sp,-44
   2ef50:	dfc00a15 	stw	ra,40(sp)
   2ef54:	df000915 	stw	fp,36(sp)
   2ef58:	dc400815 	stw	r17,32(sp)
   2ef5c:	dc000715 	stw	r16,28(sp)
   2ef60:	df000904 	addi	fp,sp,36
   2ef64:	e13ffd15 	stw	r4,-12(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
   2ef68:	e0bffd17 	ldw	r2,-12(fp)
   2ef6c:	10800943 	ldbu	r2,37(r2)
   2ef70:	10803fcc 	andi	r2,r2,255
   2ef74:	e0bffa15 	stw	r2,-24(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2ef78:	e03ff715 	stw	zero,-36(fp)
   2ef7c:	00007206 	br	2f148 <lcd_repaint_screen+0x1fc>
  {
    int width  = sp->line[y].width;
   2ef80:	e43ffd17 	ldw	r16,-12(fp)
   2ef84:	e0bff717 	ldw	r2,-36(fp)
   2ef88:	014018c4 	movi	r5,99
   2ef8c:	1009883a 	mov	r4,r2
   2ef90:	00208980 	call	20898 <__mulsi3>
   2ef94:	8085883a 	add	r2,r16,r2
   2ef98:	10802444 	addi	r2,r2,145
   2ef9c:	10800003 	ldbu	r2,0(r2)
   2efa0:	10803fcc 	andi	r2,r2,255
   2efa4:	1080201c 	xori	r2,r2,128
   2efa8:	10bfe004 	addi	r2,r2,-128
   2efac:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   2efb0:	e43ffd17 	ldw	r16,-12(fp)
   2efb4:	e0bff717 	ldw	r2,-36(fp)
   2efb8:	014018c4 	movi	r5,99
   2efbc:	1009883a 	mov	r4,r2
   2efc0:	00208980 	call	20898 <__mulsi3>
   2efc4:	8085883a 	add	r2,r16,r2
   2efc8:	10802484 	addi	r2,r2,146
   2efcc:	10800003 	ldbu	r2,0(r2)
   2efd0:	10803fcc 	andi	r2,r2,255
   2efd4:	e17ffa17 	ldw	r5,-24(fp)
   2efd8:	1009883a 	mov	r4,r2
   2efdc:	00208980 	call	20898 <__mulsi3>
   2efe0:	1005d23a 	srai	r2,r2,8
   2efe4:	e0bff915 	stw	r2,-28(fp)
    if (offset >= width)
   2efe8:	e0fff917 	ldw	r3,-28(fp)
   2efec:	e0bffb17 	ldw	r2,-20(fp)
   2eff0:	18800116 	blt	r3,r2,2eff8 <lcd_repaint_screen+0xac>
      offset = 0;
   2eff4:	e03ff915 	stw	zero,-28(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   2eff8:	e03ff815 	stw	zero,-32(fp)
   2effc:	00004c06 	br	2f130 <lcd_repaint_screen+0x1e4>
    {
      char c = sp->line[y].data[(x + offset) % width];
   2f000:	e0fff817 	ldw	r3,-32(fp)
   2f004:	e0bff917 	ldw	r2,-28(fp)
   2f008:	1885883a 	add	r2,r3,r2
   2f00c:	e17ffb17 	ldw	r5,-20(fp)
   2f010:	1009883a 	mov	r4,r2
   2f014:	002ae040 	call	2ae04 <__modsi3>
   2f018:	1023883a 	mov	r17,r2
   2f01c:	e43ffd17 	ldw	r16,-12(fp)
   2f020:	e0bff717 	ldw	r2,-36(fp)
   2f024:	014018c4 	movi	r5,99
   2f028:	1009883a 	mov	r4,r2
   2f02c:	00208980 	call	20898 <__mulsi3>
   2f030:	8085883a 	add	r2,r16,r2
   2f034:	1445883a 	add	r2,r2,r17
   2f038:	10801004 	addi	r2,r2,64
   2f03c:	10800003 	ldbu	r2,0(r2)
   2f040:	e0bffc05 	stb	r2,-16(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   2f044:	e43ffd17 	ldw	r16,-12(fp)
   2f048:	e0bff717 	ldw	r2,-36(fp)
   2f04c:	014018c4 	movi	r5,99
   2f050:	1009883a 	mov	r4,r2
   2f054:	00208980 	call	20898 <__mulsi3>
   2f058:	8087883a 	add	r3,r16,r2
   2f05c:	e0bff817 	ldw	r2,-32(fp)
   2f060:	1885883a 	add	r2,r3,r2
   2f064:	10800c04 	addi	r2,r2,48
   2f068:	10800003 	ldbu	r2,0(r2)
   2f06c:	10c03fcc 	andi	r3,r2,255
   2f070:	18c0201c 	xori	r3,r3,128
   2f074:	18ffe004 	addi	r3,r3,-128
   2f078:	e0bffc07 	ldb	r2,-16(fp)
   2f07c:	18802926 	beq	r3,r2,2f124 <lcd_repaint_screen+0x1d8>
      {
        unsigned char address = x + colstart[y];
   2f080:	e0fff717 	ldw	r3,-36(fp)
   2f084:	d0a00d04 	addi	r2,gp,-32716
   2f088:	1885883a 	add	r2,r3,r2
   2f08c:	10800003 	ldbu	r2,0(r2)
   2f090:	1007883a 	mov	r3,r2
   2f094:	e0bff817 	ldw	r2,-32(fp)
   2f098:	1885883a 	add	r2,r3,r2
   2f09c:	e0bffc45 	stb	r2,-15(fp)

        if (address != sp->address)
   2f0a0:	e0fffc43 	ldbu	r3,-15(fp)
   2f0a4:	e0bffd17 	ldw	r2,-12(fp)
   2f0a8:	108008c3 	ldbu	r2,35(r2)
   2f0ac:	10803fcc 	andi	r2,r2,255
   2f0b0:	1080201c 	xori	r2,r2,128
   2f0b4:	10bfe004 	addi	r2,r2,-128
   2f0b8:	18800a26 	beq	r3,r2,2f0e4 <lcd_repaint_screen+0x198>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   2f0bc:	e0fffc43 	ldbu	r3,-15(fp)
   2f0c0:	00bfe004 	movi	r2,-128
   2f0c4:	1884b03a 	or	r2,r3,r2
   2f0c8:	10803fcc 	andi	r2,r2,255
   2f0cc:	100b883a 	mov	r5,r2
   2f0d0:	e13ffd17 	ldw	r4,-12(fp)
   2f0d4:	002ecd40 	call	2ecd4 <lcd_write_command>
          sp->address = address;
   2f0d8:	e0fffc43 	ldbu	r3,-15(fp)
   2f0dc:	e0bffd17 	ldw	r2,-12(fp)
   2f0e0:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   2f0e4:	e0bffc03 	ldbu	r2,-16(fp)
   2f0e8:	10803fcc 	andi	r2,r2,255
   2f0ec:	100b883a 	mov	r5,r2
   2f0f0:	e13ffd17 	ldw	r4,-12(fp)
   2f0f4:	002ed8c0 	call	2ed8c <lcd_write_data>
        sp->line[y].visible[x] = c;
   2f0f8:	e43ffd17 	ldw	r16,-12(fp)
   2f0fc:	e0bff717 	ldw	r2,-36(fp)
   2f100:	014018c4 	movi	r5,99
   2f104:	1009883a 	mov	r4,r2
   2f108:	00208980 	call	20898 <__mulsi3>
   2f10c:	8087883a 	add	r3,r16,r2
   2f110:	e0bff817 	ldw	r2,-32(fp)
   2f114:	1885883a 	add	r2,r3,r2
   2f118:	10800c04 	addi	r2,r2,48
   2f11c:	e0fffc03 	ldbu	r3,-16(fp)
   2f120:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   2f124:	e0bff817 	ldw	r2,-32(fp)
   2f128:	10800044 	addi	r2,r2,1
   2f12c:	e0bff815 	stw	r2,-32(fp)
   2f130:	e0bff817 	ldw	r2,-32(fp)
   2f134:	10800410 	cmplti	r2,r2,16
   2f138:	103fb11e 	bne	r2,zero,2f000 <_gp+0xffff3e9c>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2f13c:	e0bff717 	ldw	r2,-36(fp)
   2f140:	10800044 	addi	r2,r2,1
   2f144:	e0bff715 	stw	r2,-36(fp)
   2f148:	e0bff717 	ldw	r2,-36(fp)
   2f14c:	10800090 	cmplti	r2,r2,2
   2f150:	103f8b1e 	bne	r2,zero,2ef80 <_gp+0xffff3e1c>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   2f154:	0001883a 	nop
   2f158:	e6fffe04 	addi	sp,fp,-8
   2f15c:	dfc00317 	ldw	ra,12(sp)
   2f160:	df000217 	ldw	fp,8(sp)
   2f164:	dc400117 	ldw	r17,4(sp)
   2f168:	dc000017 	ldw	r16,0(sp)
   2f16c:	dec00404 	addi	sp,sp,16
   2f170:	f800283a 	ret

0002f174 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   2f174:	defffb04 	addi	sp,sp,-20
   2f178:	dfc00415 	stw	ra,16(sp)
   2f17c:	df000315 	stw	fp,12(sp)
   2f180:	dc000215 	stw	r16,8(sp)
   2f184:	df000304 	addi	fp,sp,12
   2f188:	e13ffe15 	stw	r4,-8(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2f18c:	e03ffd15 	stw	zero,-12(fp)
   2f190:	00002206 	br	2f21c <lcd_scroll_up+0xa8>
  {
    if (y < ALT_LCD_HEIGHT-1)
   2f194:	e0bffd17 	ldw	r2,-12(fp)
   2f198:	00801316 	blt	zero,r2,2f1e8 <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   2f19c:	014018c4 	movi	r5,99
   2f1a0:	e13ffd17 	ldw	r4,-12(fp)
   2f1a4:	00208980 	call	20898 <__mulsi3>
   2f1a8:	10801004 	addi	r2,r2,64
   2f1ac:	e0fffe17 	ldw	r3,-8(fp)
   2f1b0:	18a1883a 	add	r16,r3,r2
   2f1b4:	e0bffd17 	ldw	r2,-12(fp)
   2f1b8:	10800044 	addi	r2,r2,1
   2f1bc:	014018c4 	movi	r5,99
   2f1c0:	1009883a 	mov	r4,r2
   2f1c4:	00208980 	call	20898 <__mulsi3>
   2f1c8:	10801004 	addi	r2,r2,64
   2f1cc:	e0fffe17 	ldw	r3,-8(fp)
   2f1d0:	1885883a 	add	r2,r3,r2
   2f1d4:	01801404 	movi	r6,80
   2f1d8:	100b883a 	mov	r5,r2
   2f1dc:	8009883a 	mov	r4,r16
   2f1e0:	00264b40 	call	264b4 <memcpy>
   2f1e4:	00000a06 	br	2f210 <lcd_scroll_up+0x9c>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   2f1e8:	014018c4 	movi	r5,99
   2f1ec:	e13ffd17 	ldw	r4,-12(fp)
   2f1f0:	00208980 	call	20898 <__mulsi3>
   2f1f4:	10801004 	addi	r2,r2,64
   2f1f8:	e0fffe17 	ldw	r3,-8(fp)
   2f1fc:	1885883a 	add	r2,r3,r2
   2f200:	01801404 	movi	r6,80
   2f204:	01400804 	movi	r5,32
   2f208:	1009883a 	mov	r4,r2
   2f20c:	00267580 	call	26758 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2f210:	e0bffd17 	ldw	r2,-12(fp)
   2f214:	10800044 	addi	r2,r2,1
   2f218:	e0bffd15 	stw	r2,-12(fp)
   2f21c:	e0bffd17 	ldw	r2,-12(fp)
   2f220:	10800090 	cmplti	r2,r2,2
   2f224:	103fdb1e 	bne	r2,zero,2f194 <_gp+0xffff4030>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   2f228:	e0bffe17 	ldw	r2,-8(fp)
   2f22c:	10800883 	ldbu	r2,34(r2)
   2f230:	10bfffc4 	addi	r2,r2,-1
   2f234:	1007883a 	mov	r3,r2
   2f238:	e0bffe17 	ldw	r2,-8(fp)
   2f23c:	10c00885 	stb	r3,34(r2)
}
   2f240:	0001883a 	nop
   2f244:	e6ffff04 	addi	sp,fp,-4
   2f248:	dfc00217 	ldw	ra,8(sp)
   2f24c:	df000117 	ldw	fp,4(sp)
   2f250:	dc000017 	ldw	r16,0(sp)
   2f254:	dec00304 	addi	sp,sp,12
   2f258:	f800283a 	ret

0002f25c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   2f25c:	defff904 	addi	sp,sp,-28
   2f260:	dfc00615 	stw	ra,24(sp)
   2f264:	df000515 	stw	fp,20(sp)
   2f268:	df000504 	addi	fp,sp,20
   2f26c:	e13ffe15 	stw	r4,-8(fp)
   2f270:	2805883a 	mov	r2,r5
   2f274:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
   2f278:	e03ffb15 	stw	zero,-20(fp)
   2f27c:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
   2f280:	e0bffe17 	ldw	r2,-8(fp)
   2f284:	10800a03 	ldbu	r2,40(r2)
   2f288:	10803fcc 	andi	r2,r2,255
   2f28c:	1080201c 	xori	r2,r2,128
   2f290:	10bfe004 	addi	r2,r2,-128
   2f294:	108016d8 	cmpnei	r2,r2,91
   2f298:	1000451e 	bne	r2,zero,2f3b0 <lcd_handle_escape+0x154>
  {
    char * ptr = sp->escape+1;
   2f29c:	e0bffe17 	ldw	r2,-8(fp)
   2f2a0:	10800a04 	addi	r2,r2,40
   2f2a4:	10800044 	addi	r2,r2,1
   2f2a8:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
   2f2ac:	00000e06 	br	2f2e8 <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   2f2b0:	01400284 	movi	r5,10
   2f2b4:	e13ffb17 	ldw	r4,-20(fp)
   2f2b8:	00208980 	call	20898 <__mulsi3>
   2f2bc:	1009883a 	mov	r4,r2
   2f2c0:	e0bffd17 	ldw	r2,-12(fp)
   2f2c4:	10c00044 	addi	r3,r2,1
   2f2c8:	e0fffd15 	stw	r3,-12(fp)
   2f2cc:	10800003 	ldbu	r2,0(r2)
   2f2d0:	10803fcc 	andi	r2,r2,255
   2f2d4:	1080201c 	xori	r2,r2,128
   2f2d8:	10bfe004 	addi	r2,r2,-128
   2f2dc:	10bff404 	addi	r2,r2,-48
   2f2e0:	2085883a 	add	r2,r4,r2
   2f2e4:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   2f2e8:	d0e01117 	ldw	r3,-32700(gp)
   2f2ec:	e0bffd17 	ldw	r2,-12(fp)
   2f2f0:	10800003 	ldbu	r2,0(r2)
   2f2f4:	10803fcc 	andi	r2,r2,255
   2f2f8:	1080201c 	xori	r2,r2,128
   2f2fc:	10bfe004 	addi	r2,r2,-128
   2f300:	10800044 	addi	r2,r2,1
   2f304:	1885883a 	add	r2,r3,r2
   2f308:	10800003 	ldbu	r2,0(r2)
   2f30c:	10803fcc 	andi	r2,r2,255
   2f310:	1080010c 	andi	r2,r2,4
   2f314:	103fe61e 	bne	r2,zero,2f2b0 <_gp+0xffff414c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   2f318:	e0bffd17 	ldw	r2,-12(fp)
   2f31c:	10800003 	ldbu	r2,0(r2)
   2f320:	10803fcc 	andi	r2,r2,255
   2f324:	1080201c 	xori	r2,r2,128
   2f328:	10bfe004 	addi	r2,r2,-128
   2f32c:	10800ed8 	cmpnei	r2,r2,59
   2f330:	1000211e 	bne	r2,zero,2f3b8 <lcd_handle_escape+0x15c>
    {
      ptr++;
   2f334:	e0bffd17 	ldw	r2,-12(fp)
   2f338:	10800044 	addi	r2,r2,1
   2f33c:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
   2f340:	00000e06 	br	2f37c <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   2f344:	01400284 	movi	r5,10
   2f348:	e13ffc17 	ldw	r4,-16(fp)
   2f34c:	00208980 	call	20898 <__mulsi3>
   2f350:	1009883a 	mov	r4,r2
   2f354:	e0bffd17 	ldw	r2,-12(fp)
   2f358:	10c00044 	addi	r3,r2,1
   2f35c:	e0fffd15 	stw	r3,-12(fp)
   2f360:	10800003 	ldbu	r2,0(r2)
   2f364:	10803fcc 	andi	r2,r2,255
   2f368:	1080201c 	xori	r2,r2,128
   2f36c:	10bfe004 	addi	r2,r2,-128
   2f370:	10bff404 	addi	r2,r2,-48
   2f374:	2085883a 	add	r2,r4,r2
   2f378:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   2f37c:	d0e01117 	ldw	r3,-32700(gp)
   2f380:	e0bffd17 	ldw	r2,-12(fp)
   2f384:	10800003 	ldbu	r2,0(r2)
   2f388:	10803fcc 	andi	r2,r2,255
   2f38c:	1080201c 	xori	r2,r2,128
   2f390:	10bfe004 	addi	r2,r2,-128
   2f394:	10800044 	addi	r2,r2,1
   2f398:	1885883a 	add	r2,r3,r2
   2f39c:	10800003 	ldbu	r2,0(r2)
   2f3a0:	10803fcc 	andi	r2,r2,255
   2f3a4:	1080010c 	andi	r2,r2,4
   2f3a8:	103fe61e 	bne	r2,zero,2f344 <_gp+0xffff41e0>
   2f3ac:	00000206 	br	2f3b8 <lcd_handle_escape+0x15c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   2f3b0:	00bfffc4 	movi	r2,-1
   2f3b4:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
   2f3b8:	e0bfff07 	ldb	r2,-4(fp)
   2f3bc:	10c012a0 	cmpeqi	r3,r2,74
   2f3c0:	1800291e 	bne	r3,zero,2f468 <lcd_handle_escape+0x20c>
   2f3c4:	10c012c8 	cmpgei	r3,r2,75
   2f3c8:	1800031e 	bne	r3,zero,2f3d8 <lcd_handle_escape+0x17c>
   2f3cc:	10801220 	cmpeqi	r2,r2,72
   2f3d0:	1000061e 	bne	r2,zero,2f3ec <lcd_handle_escape+0x190>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   2f3d4:	00004c06 	br	2f508 <lcd_handle_escape+0x2ac>
    }
  }
  else
    parm1 = -1;

  switch (c)
   2f3d8:	10c012e0 	cmpeqi	r3,r2,75
   2f3dc:	1800281e 	bne	r3,zero,2f480 <lcd_handle_escape+0x224>
   2f3e0:	108019a0 	cmpeqi	r2,r2,102
   2f3e4:	1000011e 	bne	r2,zero,2f3ec <lcd_handle_escape+0x190>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   2f3e8:	00004706 	br	2f508 <lcd_handle_escape+0x2ac>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   2f3ec:	e0bffc17 	ldw	r2,-16(fp)
   2f3f0:	0080050e 	bge	zero,r2,2f408 <lcd_handle_escape+0x1ac>
      sp->x = parm2 - 1;
   2f3f4:	e0bffc17 	ldw	r2,-16(fp)
   2f3f8:	10bfffc4 	addi	r2,r2,-1
   2f3fc:	1007883a 	mov	r3,r2
   2f400:	e0bffe17 	ldw	r2,-8(fp)
   2f404:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   2f408:	e0bffb17 	ldw	r2,-20(fp)
   2f40c:	0080390e 	bge	zero,r2,2f4f4 <lcd_handle_escape+0x298>
    {
      sp->y = parm1 - 1;
   2f410:	e0bffb17 	ldw	r2,-20(fp)
   2f414:	10bfffc4 	addi	r2,r2,-1
   2f418:	1007883a 	mov	r3,r2
   2f41c:	e0bffe17 	ldw	r2,-8(fp)
   2f420:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   2f424:	e0bffe17 	ldw	r2,-8(fp)
   2f428:	10800883 	ldbu	r2,34(r2)
   2f42c:	10803fcc 	andi	r2,r2,255
   2f430:	10800170 	cmpltui	r2,r2,5
   2f434:	1000061e 	bne	r2,zero,2f450 <lcd_handle_escape+0x1f4>
        sp->y = ALT_LCD_HEIGHT * 2;
   2f438:	e0bffe17 	ldw	r2,-8(fp)
   2f43c:	00c00104 	movi	r3,4
   2f440:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
   2f444:	00000206 	br	2f450 <lcd_handle_escape+0x1f4>
        lcd_scroll_up(sp);
   2f448:	e13ffe17 	ldw	r4,-8(fp)
   2f44c:	002f1740 	call	2f174 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   2f450:	e0bffe17 	ldw	r2,-8(fp)
   2f454:	10800883 	ldbu	r2,34(r2)
   2f458:	10803fcc 	andi	r2,r2,255
   2f45c:	108000e8 	cmpgeui	r2,r2,3
   2f460:	103ff91e 	bne	r2,zero,2f448 <_gp+0xffff42e4>
        lcd_scroll_up(sp);
    }
    break;
   2f464:	00002306 	br	2f4f4 <lcd_handle_escape+0x298>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   2f468:	e0bffb17 	ldw	r2,-20(fp)
   2f46c:	10800098 	cmpnei	r2,r2,2
   2f470:	1000221e 	bne	r2,zero,2f4fc <lcd_handle_escape+0x2a0>
      lcd_clear_screen(sp);
   2f474:	e13ffe17 	ldw	r4,-8(fp)
   2f478:	002ee640 	call	2ee64 <lcd_clear_screen>
    break;
   2f47c:	00001f06 	br	2f4fc <lcd_handle_escape+0x2a0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   2f480:	e0bffb17 	ldw	r2,-20(fp)
   2f484:	00801f16 	blt	zero,r2,2f504 <lcd_handle_escape+0x2a8>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   2f488:	e0bffe17 	ldw	r2,-8(fp)
   2f48c:	10800843 	ldbu	r2,33(r2)
   2f490:	10803fcc 	andi	r2,r2,255
   2f494:	10801428 	cmpgeui	r2,r2,80
   2f498:	10001a1e 	bne	r2,zero,2f504 <lcd_handle_escape+0x2a8>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   2f49c:	e0bffe17 	ldw	r2,-8(fp)
   2f4a0:	10800883 	ldbu	r2,34(r2)
   2f4a4:	10803fcc 	andi	r2,r2,255
   2f4a8:	014018c4 	movi	r5,99
   2f4ac:	1009883a 	mov	r4,r2
   2f4b0:	00208980 	call	20898 <__mulsi3>
   2f4b4:	10801004 	addi	r2,r2,64
   2f4b8:	e0fffe17 	ldw	r3,-8(fp)
   2f4bc:	1887883a 	add	r3,r3,r2
   2f4c0:	e0bffe17 	ldw	r2,-8(fp)
   2f4c4:	10800843 	ldbu	r2,33(r2)
   2f4c8:	10803fcc 	andi	r2,r2,255
   2f4cc:	1889883a 	add	r4,r3,r2
   2f4d0:	e0bffe17 	ldw	r2,-8(fp)
   2f4d4:	10800843 	ldbu	r2,33(r2)
   2f4d8:	10803fcc 	andi	r2,r2,255
   2f4dc:	00c01404 	movi	r3,80
   2f4e0:	1885c83a 	sub	r2,r3,r2
   2f4e4:	100d883a 	mov	r6,r2
   2f4e8:	01400804 	movi	r5,32
   2f4ec:	00267580 	call	26758 <memset>
    }
    break;
   2f4f0:	00000406 	br	2f504 <lcd_handle_escape+0x2a8>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
   2f4f4:	0001883a 	nop
   2f4f8:	00000306 	br	2f508 <lcd_handle_escape+0x2ac>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
   2f4fc:	0001883a 	nop
   2f500:	00000106 	br	2f508 <lcd_handle_escape+0x2ac>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
   2f504:	0001883a 	nop
  }
}
   2f508:	0001883a 	nop
   2f50c:	e037883a 	mov	sp,fp
   2f510:	dfc00117 	ldw	ra,4(sp)
   2f514:	df000017 	ldw	fp,0(sp)
   2f518:	dec00204 	addi	sp,sp,8
   2f51c:	f800283a 	ret

0002f520 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   2f520:	defff104 	addi	sp,sp,-60
   2f524:	dfc00e15 	stw	ra,56(sp)
   2f528:	df000d15 	stw	fp,52(sp)
   2f52c:	dc400c15 	stw	r17,48(sp)
   2f530:	dc000b15 	stw	r16,44(sp)
   2f534:	df000d04 	addi	fp,sp,52
   2f538:	e13ffa15 	stw	r4,-24(fp)
   2f53c:	e17ffb15 	stw	r5,-20(fp)
   2f540:	e1bffc15 	stw	r6,-16(fp)
   2f544:	e1fffd15 	stw	r7,-12(fp)
  const char* end = ptr + len;
   2f548:	e0bffc17 	ldw	r2,-16(fp)
   2f54c:	e0fffb17 	ldw	r3,-20(fp)
   2f550:	1885883a 	add	r2,r3,r2
   2f554:	e0bff615 	stw	r2,-40(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   2f558:	e0bffa17 	ldw	r2,-24(fp)
   2f55c:	00c00044 	movi	r3,1
   2f560:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
   2f564:	00009b06 	br	2f7d4 <altera_avalon_lcd_16207_write+0x2b4>
  {
    char c = *ptr;
   2f568:	e0bffb17 	ldw	r2,-20(fp)
   2f56c:	10800003 	ldbu	r2,0(r2)
   2f570:	e0bff705 	stb	r2,-36(fp)

    if (sp->esccount >= 0)
   2f574:	e0bffa17 	ldw	r2,-24(fp)
   2f578:	10800903 	ldbu	r2,36(r2)
   2f57c:	10803fcc 	andi	r2,r2,255
   2f580:	1080201c 	xori	r2,r2,128
   2f584:	10bfe004 	addi	r2,r2,-128
   2f588:	10003716 	blt	r2,zero,2f668 <altera_avalon_lcd_16207_write+0x148>
    {
      unsigned int esccount = sp->esccount;
   2f58c:	e0bffa17 	ldw	r2,-24(fp)
   2f590:	10800903 	ldbu	r2,36(r2)
   2f594:	10803fcc 	andi	r2,r2,255
   2f598:	1080201c 	xori	r2,r2,128
   2f59c:	10bfe004 	addi	r2,r2,-128
   2f5a0:	e0bff815 	stw	r2,-32(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   2f5a4:	e0bff817 	ldw	r2,-32(fp)
   2f5a8:	1000031e 	bne	r2,zero,2f5b8 <altera_avalon_lcd_16207_write+0x98>
   2f5ac:	e0bff707 	ldb	r2,-36(fp)
   2f5b0:	108016d8 	cmpnei	r2,r2,91
   2f5b4:	10000d1e 	bne	r2,zero,2f5ec <altera_avalon_lcd_16207_write+0xcc>
   2f5b8:	e0bff817 	ldw	r2,-32(fp)
   2f5bc:	10001826 	beq	r2,zero,2f620 <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
   2f5c0:	d0e01117 	ldw	r3,-32700(gp)
   2f5c4:	e0bff707 	ldb	r2,-36(fp)
   2f5c8:	10800044 	addi	r2,r2,1
   2f5cc:	1885883a 	add	r2,r3,r2
   2f5d0:	10800003 	ldbu	r2,0(r2)
   2f5d4:	10803fcc 	andi	r2,r2,255
   2f5d8:	1080010c 	andi	r2,r2,4
   2f5dc:	1000101e 	bne	r2,zero,2f620 <altera_avalon_lcd_16207_write+0x100>
   2f5e0:	e0bff707 	ldb	r2,-36(fp)
   2f5e4:	10800ee0 	cmpeqi	r2,r2,59
   2f5e8:	10000d1e 	bne	r2,zero,2f620 <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
   2f5ec:	e0fffa17 	ldw	r3,-24(fp)
   2f5f0:	e0bff817 	ldw	r2,-32(fp)
   2f5f4:	1885883a 	add	r2,r3,r2
   2f5f8:	10800a04 	addi	r2,r2,40
   2f5fc:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   2f600:	e0bff707 	ldb	r2,-36(fp)
   2f604:	100b883a 	mov	r5,r2
   2f608:	e13ffa17 	ldw	r4,-24(fp)
   2f60c:	002f25c0 	call	2f25c <lcd_handle_escape>

        sp->esccount = -1;
   2f610:	e0bffa17 	ldw	r2,-24(fp)
   2f614:	00ffffc4 	movi	r3,-1
   2f618:	10c00905 	stb	r3,36(r2)
   2f61c:	00006a06 	br	2f7c8 <altera_avalon_lcd_16207_write+0x2a8>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   2f620:	e0bffa17 	ldw	r2,-24(fp)
   2f624:	10800903 	ldbu	r2,36(r2)
   2f628:	10803fcc 	andi	r2,r2,255
   2f62c:	108001e8 	cmpgeui	r2,r2,7
   2f630:	1000651e 	bne	r2,zero,2f7c8 <altera_avalon_lcd_16207_write+0x2a8>
      {
        sp->escape[esccount] = c;
   2f634:	e0fffa17 	ldw	r3,-24(fp)
   2f638:	e0bff817 	ldw	r2,-32(fp)
   2f63c:	1885883a 	add	r2,r3,r2
   2f640:	10800a04 	addi	r2,r2,40
   2f644:	e0fff703 	ldbu	r3,-36(fp)
   2f648:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
   2f64c:	e0bffa17 	ldw	r2,-24(fp)
   2f650:	10800903 	ldbu	r2,36(r2)
   2f654:	10800044 	addi	r2,r2,1
   2f658:	1007883a 	mov	r3,r2
   2f65c:	e0bffa17 	ldw	r2,-24(fp)
   2f660:	10c00905 	stb	r3,36(r2)
   2f664:	00005806 	br	2f7c8 <altera_avalon_lcd_16207_write+0x2a8>
      }
    }
    else if (c == 27) /* ESC */
   2f668:	e0bff707 	ldb	r2,-36(fp)
   2f66c:	108006d8 	cmpnei	r2,r2,27
   2f670:	1000031e 	bne	r2,zero,2f680 <altera_avalon_lcd_16207_write+0x160>
    {
      sp->esccount = 0;
   2f674:	e0bffa17 	ldw	r2,-24(fp)
   2f678:	10000905 	stb	zero,36(r2)
   2f67c:	00005206 	br	2f7c8 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\r')
   2f680:	e0bff707 	ldb	r2,-36(fp)
   2f684:	10800358 	cmpnei	r2,r2,13
   2f688:	1000031e 	bne	r2,zero,2f698 <altera_avalon_lcd_16207_write+0x178>
    {
      sp->x = 0;
   2f68c:	e0bffa17 	ldw	r2,-24(fp)
   2f690:	10000845 	stb	zero,33(r2)
   2f694:	00004c06 	br	2f7c8 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\n')
   2f698:	e0bff707 	ldb	r2,-36(fp)
   2f69c:	10800298 	cmpnei	r2,r2,10
   2f6a0:	1000101e 	bne	r2,zero,2f6e4 <altera_avalon_lcd_16207_write+0x1c4>
    {
      sp->x = 0;
   2f6a4:	e0bffa17 	ldw	r2,-24(fp)
   2f6a8:	10000845 	stb	zero,33(r2)
      sp->y++;
   2f6ac:	e0bffa17 	ldw	r2,-24(fp)
   2f6b0:	10800883 	ldbu	r2,34(r2)
   2f6b4:	10800044 	addi	r2,r2,1
   2f6b8:	1007883a 	mov	r3,r2
   2f6bc:	e0bffa17 	ldw	r2,-24(fp)
   2f6c0:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   2f6c4:	e0bffa17 	ldw	r2,-24(fp)
   2f6c8:	10800883 	ldbu	r2,34(r2)
   2f6cc:	10803fcc 	andi	r2,r2,255
   2f6d0:	108000f0 	cmpltui	r2,r2,3
   2f6d4:	10003c1e 	bne	r2,zero,2f7c8 <altera_avalon_lcd_16207_write+0x2a8>
        lcd_scroll_up(sp);
   2f6d8:	e13ffa17 	ldw	r4,-24(fp)
   2f6dc:	002f1740 	call	2f174 <lcd_scroll_up>
   2f6e0:	00003906 	br	2f7c8 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\b')
   2f6e4:	e0bff707 	ldb	r2,-36(fp)
   2f6e8:	10800218 	cmpnei	r2,r2,8
   2f6ec:	10000b1e 	bne	r2,zero,2f71c <altera_avalon_lcd_16207_write+0x1fc>
    {
      if (sp->x > 0)
   2f6f0:	e0bffa17 	ldw	r2,-24(fp)
   2f6f4:	10800843 	ldbu	r2,33(r2)
   2f6f8:	10803fcc 	andi	r2,r2,255
   2f6fc:	10003226 	beq	r2,zero,2f7c8 <altera_avalon_lcd_16207_write+0x2a8>
        sp->x--;
   2f700:	e0bffa17 	ldw	r2,-24(fp)
   2f704:	10800843 	ldbu	r2,33(r2)
   2f708:	10bfffc4 	addi	r2,r2,-1
   2f70c:	1007883a 	mov	r3,r2
   2f710:	e0bffa17 	ldw	r2,-24(fp)
   2f714:	10c00845 	stb	r3,33(r2)
   2f718:	00002b06 	br	2f7c8 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (isprint(c))
   2f71c:	d0e01117 	ldw	r3,-32700(gp)
   2f720:	e0bff707 	ldb	r2,-36(fp)
   2f724:	10800044 	addi	r2,r2,1
   2f728:	1885883a 	add	r2,r3,r2
   2f72c:	10800003 	ldbu	r2,0(r2)
   2f730:	10803fcc 	andi	r2,r2,255
   2f734:	1080201c 	xori	r2,r2,128
   2f738:	10bfe004 	addi	r2,r2,-128
   2f73c:	108025cc 	andi	r2,r2,151
   2f740:	10002126 	beq	r2,zero,2f7c8 <altera_avalon_lcd_16207_write+0x2a8>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   2f744:	e0bffa17 	ldw	r2,-24(fp)
   2f748:	10800883 	ldbu	r2,34(r2)
   2f74c:	10803fcc 	andi	r2,r2,255
   2f750:	108000b0 	cmpltui	r2,r2,2
   2f754:	1000021e 	bne	r2,zero,2f760 <altera_avalon_lcd_16207_write+0x240>
        lcd_scroll_up(sp);
   2f758:	e13ffa17 	ldw	r4,-24(fp)
   2f75c:	002f1740 	call	2f174 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   2f760:	e0bffa17 	ldw	r2,-24(fp)
   2f764:	10800843 	ldbu	r2,33(r2)
   2f768:	10803fcc 	andi	r2,r2,255
   2f76c:	10801428 	cmpgeui	r2,r2,80
   2f770:	10000f1e 	bne	r2,zero,2f7b0 <altera_avalon_lcd_16207_write+0x290>
        sp->line[sp->y].data[sp->x] = c;
   2f774:	e0bffa17 	ldw	r2,-24(fp)
   2f778:	10800883 	ldbu	r2,34(r2)
   2f77c:	10c03fcc 	andi	r3,r2,255
   2f780:	e0bffa17 	ldw	r2,-24(fp)
   2f784:	10800843 	ldbu	r2,33(r2)
   2f788:	14003fcc 	andi	r16,r2,255
   2f78c:	e47ffa17 	ldw	r17,-24(fp)
   2f790:	014018c4 	movi	r5,99
   2f794:	1809883a 	mov	r4,r3
   2f798:	00208980 	call	20898 <__mulsi3>
   2f79c:	8885883a 	add	r2,r17,r2
   2f7a0:	1405883a 	add	r2,r2,r16
   2f7a4:	10801004 	addi	r2,r2,64
   2f7a8:	e0fff703 	ldbu	r3,-36(fp)
   2f7ac:	10c00005 	stb	r3,0(r2)

      sp->x++;
   2f7b0:	e0bffa17 	ldw	r2,-24(fp)
   2f7b4:	10800843 	ldbu	r2,33(r2)
   2f7b8:	10800044 	addi	r2,r2,1
   2f7bc:	1007883a 	mov	r3,r2
   2f7c0:	e0bffa17 	ldw	r2,-24(fp)
   2f7c4:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   2f7c8:	e0bffb17 	ldw	r2,-20(fp)
   2f7cc:	10800044 	addi	r2,r2,1
   2f7d0:	e0bffb15 	stw	r2,-20(fp)
   2f7d4:	e0fffb17 	ldw	r3,-20(fp)
   2f7d8:	e0bff617 	ldw	r2,-40(fp)
   2f7dc:	18bf6236 	bltu	r3,r2,2f568 <_gp+0xffff4404>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   2f7e0:	00800404 	movi	r2,16
   2f7e4:	e0bff415 	stw	r2,-48(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2f7e8:	e03ff315 	stw	zero,-52(fp)
   2f7ec:	00003d06 	br	2f8e4 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   2f7f0:	00801404 	movi	r2,80
   2f7f4:	e0bff515 	stw	r2,-44(fp)
   2f7f8:	00001306 	br	2f848 <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
   2f7fc:	e0bff517 	ldw	r2,-44(fp)
   2f800:	143fffc4 	addi	r16,r2,-1
   2f804:	e47ffa17 	ldw	r17,-24(fp)
   2f808:	e0bff317 	ldw	r2,-52(fp)
   2f80c:	014018c4 	movi	r5,99
   2f810:	1009883a 	mov	r4,r2
   2f814:	00208980 	call	20898 <__mulsi3>
   2f818:	8885883a 	add	r2,r17,r2
   2f81c:	1405883a 	add	r2,r2,r16
   2f820:	10801004 	addi	r2,r2,64
   2f824:	10800003 	ldbu	r2,0(r2)
   2f828:	10803fcc 	andi	r2,r2,255
   2f82c:	1080201c 	xori	r2,r2,128
   2f830:	10bfe004 	addi	r2,r2,-128
   2f834:	10800820 	cmpeqi	r2,r2,32
   2f838:	10000626 	beq	r2,zero,2f854 <altera_avalon_lcd_16207_write+0x334>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   2f83c:	e0bff517 	ldw	r2,-44(fp)
   2f840:	10bfffc4 	addi	r2,r2,-1
   2f844:	e0bff515 	stw	r2,-44(fp)
   2f848:	e0bff517 	ldw	r2,-44(fp)
   2f84c:	00bfeb16 	blt	zero,r2,2f7fc <_gp+0xffff4698>
   2f850:	00000106 	br	2f858 <altera_avalon_lcd_16207_write+0x338>
      if (sp->line[y].data[width-1] != ' ')
        break;
   2f854:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   2f858:	e0bff517 	ldw	r2,-44(fp)
   2f85c:	10800448 	cmpgei	r2,r2,17
   2f860:	1000031e 	bne	r2,zero,2f870 <altera_avalon_lcd_16207_write+0x350>
      width = ALT_LCD_WIDTH;
   2f864:	00800404 	movi	r2,16
   2f868:	e0bff515 	stw	r2,-44(fp)
   2f86c:	00000306 	br	2f87c <altera_avalon_lcd_16207_write+0x35c>
    else
      width++;
   2f870:	e0bff517 	ldw	r2,-44(fp)
   2f874:	10800044 	addi	r2,r2,1
   2f878:	e0bff515 	stw	r2,-44(fp)

    sp->line[y].width = width;
   2f87c:	e0bff517 	ldw	r2,-44(fp)
   2f880:	1023883a 	mov	r17,r2
   2f884:	e43ffa17 	ldw	r16,-24(fp)
   2f888:	e0bff317 	ldw	r2,-52(fp)
   2f88c:	014018c4 	movi	r5,99
   2f890:	1009883a 	mov	r4,r2
   2f894:	00208980 	call	20898 <__mulsi3>
   2f898:	8085883a 	add	r2,r16,r2
   2f89c:	10802444 	addi	r2,r2,145
   2f8a0:	14400005 	stb	r17,0(r2)
    if (widthmax < width)
   2f8a4:	e0fff417 	ldw	r3,-48(fp)
   2f8a8:	e0bff517 	ldw	r2,-44(fp)
   2f8ac:	1880020e 	bge	r3,r2,2f8b8 <altera_avalon_lcd_16207_write+0x398>
      widthmax = width;
   2f8b0:	e0bff517 	ldw	r2,-44(fp)
   2f8b4:	e0bff415 	stw	r2,-48(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   2f8b8:	e43ffa17 	ldw	r16,-24(fp)
   2f8bc:	e0bff317 	ldw	r2,-52(fp)
   2f8c0:	014018c4 	movi	r5,99
   2f8c4:	1009883a 	mov	r4,r2
   2f8c8:	00208980 	call	20898 <__mulsi3>
   2f8cc:	8085883a 	add	r2,r16,r2
   2f8d0:	10802484 	addi	r2,r2,146
   2f8d4:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2f8d8:	e0bff317 	ldw	r2,-52(fp)
   2f8dc:	10800044 	addi	r2,r2,1
   2f8e0:	e0bff315 	stw	r2,-52(fp)
   2f8e4:	e0bff317 	ldw	r2,-52(fp)
   2f8e8:	10800090 	cmplti	r2,r2,2
   2f8ec:	103fc01e 	bne	r2,zero,2f7f0 <_gp+0xffff468c>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   2f8f0:	e0bff417 	ldw	r2,-48(fp)
   2f8f4:	10800448 	cmpgei	r2,r2,17
   2f8f8:	1000031e 	bne	r2,zero,2f908 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
   2f8fc:	e0bffa17 	ldw	r2,-24(fp)
   2f900:	10000985 	stb	zero,38(r2)
   2f904:	00003406 	br	2f9d8 <altera_avalon_lcd_16207_write+0x4b8>
  else
  {
    widthmax *= 2;
   2f908:	e0bff417 	ldw	r2,-48(fp)
   2f90c:	1085883a 	add	r2,r2,r2
   2f910:	e0bff415 	stw	r2,-48(fp)
    sp->scrollmax = widthmax;
   2f914:	e0bff417 	ldw	r2,-48(fp)
   2f918:	1007883a 	mov	r3,r2
   2f91c:	e0bffa17 	ldw	r2,-24(fp)
   2f920:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2f924:	e03ff315 	stw	zero,-52(fp)
   2f928:	00002806 	br	2f9cc <altera_avalon_lcd_16207_write+0x4ac>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   2f92c:	e43ffa17 	ldw	r16,-24(fp)
   2f930:	e0bff317 	ldw	r2,-52(fp)
   2f934:	014018c4 	movi	r5,99
   2f938:	1009883a 	mov	r4,r2
   2f93c:	00208980 	call	20898 <__mulsi3>
   2f940:	8085883a 	add	r2,r16,r2
   2f944:	10802444 	addi	r2,r2,145
   2f948:	10800003 	ldbu	r2,0(r2)
   2f94c:	10803fcc 	andi	r2,r2,255
   2f950:	1080201c 	xori	r2,r2,128
   2f954:	10bfe004 	addi	r2,r2,-128
   2f958:	10800450 	cmplti	r2,r2,17
   2f95c:	1000181e 	bne	r2,zero,2f9c0 <altera_avalon_lcd_16207_write+0x4a0>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   2f960:	e43ffa17 	ldw	r16,-24(fp)
   2f964:	e0bff317 	ldw	r2,-52(fp)
   2f968:	014018c4 	movi	r5,99
   2f96c:	1009883a 	mov	r4,r2
   2f970:	00208980 	call	20898 <__mulsi3>
   2f974:	8085883a 	add	r2,r16,r2
   2f978:	10802444 	addi	r2,r2,145
   2f97c:	10800003 	ldbu	r2,0(r2)
   2f980:	10803fcc 	andi	r2,r2,255
   2f984:	1080201c 	xori	r2,r2,128
   2f988:	10bfe004 	addi	r2,r2,-128
   2f98c:	1004923a 	slli	r2,r2,8
   2f990:	e17ff417 	ldw	r5,-48(fp)
   2f994:	1009883a 	mov	r4,r2
   2f998:	002ad800 	call	2ad80 <__divsi3>
   2f99c:	1023883a 	mov	r17,r2
   2f9a0:	e43ffa17 	ldw	r16,-24(fp)
   2f9a4:	e0bff317 	ldw	r2,-52(fp)
   2f9a8:	014018c4 	movi	r5,99
   2f9ac:	1009883a 	mov	r4,r2
   2f9b0:	00208980 	call	20898 <__mulsi3>
   2f9b4:	8085883a 	add	r2,r16,r2
   2f9b8:	10802484 	addi	r2,r2,146
   2f9bc:	14400005 	stb	r17,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2f9c0:	e0bff317 	ldw	r2,-52(fp)
   2f9c4:	10800044 	addi	r2,r2,1
   2f9c8:	e0bff315 	stw	r2,-52(fp)
   2f9cc:	e0bff317 	ldw	r2,-52(fp)
   2f9d0:	10800090 	cmplti	r2,r2,2
   2f9d4:	103fd51e 	bne	r2,zero,2f92c <_gp+0xffff47c8>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   2f9d8:	e0bffa17 	ldw	r2,-24(fp)
   2f9dc:	10800943 	ldbu	r2,37(r2)
   2f9e0:	10803fcc 	andi	r2,r2,255
   2f9e4:	e0bff915 	stw	r2,-28(fp)

    lcd_repaint_screen(sp);
   2f9e8:	e13ffa17 	ldw	r4,-24(fp)
   2f9ec:	002ef4c0 	call	2ef4c <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   2f9f0:	e0bffa17 	ldw	r2,-24(fp)
   2f9f4:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   2f9f8:	e0bffa17 	ldw	r2,-24(fp)
   2f9fc:	10800943 	ldbu	r2,37(r2)
   2fa00:	10c03fcc 	andi	r3,r2,255
   2fa04:	e0bff917 	ldw	r2,-28(fp)
   2fa08:	18800426 	beq	r3,r2,2fa1c <altera_avalon_lcd_16207_write+0x4fc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   2fa0c:	e0bffa17 	ldw	r2,-24(fp)
   2fa10:	00c00044 	movi	r3,1
   2fa14:	10c009c5 	stb	r3,39(r2)
  }
   2fa18:	003fef06 	br	2f9d8 <_gp+0xffff4874>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
   2fa1c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   2fa20:	e0bffc17 	ldw	r2,-16(fp)
}
   2fa24:	e6fffe04 	addi	sp,fp,-8
   2fa28:	dfc00317 	ldw	ra,12(sp)
   2fa2c:	df000217 	ldw	fp,8(sp)
   2fa30:	dc400117 	ldw	r17,4(sp)
   2fa34:	dc000017 	ldw	r16,0(sp)
   2fa38:	dec00404 	addi	sp,sp,16
   2fa3c:	f800283a 	ret

0002fa40 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   2fa40:	defffc04 	addi	sp,sp,-16
   2fa44:	dfc00315 	stw	ra,12(sp)
   2fa48:	df000215 	stw	fp,8(sp)
   2fa4c:	df000204 	addi	fp,sp,8
   2fa50:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   2fa54:	e0bfff17 	ldw	r2,-4(fp)
   2fa58:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   2fa5c:	e0bffe17 	ldw	r2,-8(fp)
   2fa60:	10800943 	ldbu	r2,37(r2)
   2fa64:	10803fcc 	andi	r2,r2,255
   2fa68:	10c00044 	addi	r3,r2,1
   2fa6c:	e0bffe17 	ldw	r2,-8(fp)
   2fa70:	10800983 	ldbu	r2,38(r2)
   2fa74:	10803fcc 	andi	r2,r2,255
   2fa78:	18800316 	blt	r3,r2,2fa88 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
   2fa7c:	e0bffe17 	ldw	r2,-8(fp)
   2fa80:	10000945 	stb	zero,37(r2)
   2fa84:	00000606 	br	2faa0 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
   2fa88:	e0bffe17 	ldw	r2,-8(fp)
   2fa8c:	10800943 	ldbu	r2,37(r2)
   2fa90:	10800044 	addi	r2,r2,1
   2fa94:	1007883a 	mov	r3,r2
   2fa98:	e0bffe17 	ldw	r2,-8(fp)
   2fa9c:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   2faa0:	e0bffe17 	ldw	r2,-8(fp)
   2faa4:	10800983 	ldbu	r2,38(r2)
   2faa8:	10803fcc 	andi	r2,r2,255
   2faac:	10000826 	beq	r2,zero,2fad0 <alt_lcd_16207_timeout+0x90>
   2fab0:	e0bffe17 	ldw	r2,-8(fp)
   2fab4:	108009c3 	ldbu	r2,39(r2)
   2fab8:	10803fcc 	andi	r2,r2,255
   2fabc:	1080201c 	xori	r2,r2,128
   2fac0:	10bfe004 	addi	r2,r2,-128
   2fac4:	1000021e 	bne	r2,zero,2fad0 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
   2fac8:	e13ffe17 	ldw	r4,-8(fp)
   2facc:	002ef4c0 	call	2ef4c <lcd_repaint_screen>

  return sp->period;
   2fad0:	e0bffe17 	ldw	r2,-8(fp)
   2fad4:	10800717 	ldw	r2,28(r2)
}
   2fad8:	e037883a 	mov	sp,fp
   2fadc:	dfc00117 	ldw	ra,4(sp)
   2fae0:	df000017 	ldw	fp,0(sp)
   2fae4:	dec00204 	addi	sp,sp,8
   2fae8:	f800283a 	ret

0002faec <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   2faec:	defffc04 	addi	sp,sp,-16
   2faf0:	dfc00315 	stw	ra,12(sp)
   2faf4:	df000215 	stw	fp,8(sp)
   2faf8:	df000204 	addi	fp,sp,8
   2fafc:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   2fb00:	e0bfff17 	ldw	r2,-4(fp)
   2fb04:	10800017 	ldw	r2,0(r2)
   2fb08:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   2fb0c:	e0bfff17 	ldw	r2,-4(fp)
   2fb10:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   2fb14:	010ea604 	movi	r4,15000
   2fb18:	002e0300 	call	2e030 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   2fb1c:	e0bffe17 	ldw	r2,-8(fp)
   2fb20:	00c00c04 	movi	r3,48
   2fb24:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   2fb28:	01040104 	movi	r4,4100
   2fb2c:	002e0300 	call	2e030 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   2fb30:	e0bffe17 	ldw	r2,-8(fp)
   2fb34:	00c00c04 	movi	r3,48
   2fb38:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   2fb3c:	0100fa04 	movi	r4,1000
   2fb40:	002e0300 	call	2e030 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   2fb44:	e0bffe17 	ldw	r2,-8(fp)
   2fb48:	00c00c04 	movi	r3,48
   2fb4c:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   2fb50:	01400e04 	movi	r5,56
   2fb54:	e13fff17 	ldw	r4,-4(fp)
   2fb58:	002ecd40 	call	2ecd4 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   2fb5c:	01400204 	movi	r5,8
   2fb60:	e13fff17 	ldw	r4,-4(fp)
   2fb64:	002ecd40 	call	2ecd4 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   2fb68:	e13fff17 	ldw	r4,-4(fp)
   2fb6c:	002ee640 	call	2ee64 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   2fb70:	01400184 	movi	r5,6
   2fb74:	e13fff17 	ldw	r4,-4(fp)
   2fb78:	002ecd40 	call	2ecd4 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   2fb7c:	01400304 	movi	r5,12
   2fb80:	e13fff17 	ldw	r4,-4(fp)
   2fb84:	002ecd40 	call	2ecd4 <lcd_write_command>

  sp->esccount = -1;
   2fb88:	e0bfff17 	ldw	r2,-4(fp)
   2fb8c:	00ffffc4 	movi	r3,-1
   2fb90:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
   2fb94:	e0bfff17 	ldw	r2,-4(fp)
   2fb98:	10800a04 	addi	r2,r2,40
   2fb9c:	01800204 	movi	r6,8
   2fba0:	000b883a 	mov	r5,zero
   2fba4:	1009883a 	mov	r4,r2
   2fba8:	00267580 	call	26758 <memset>

  sp->scrollpos = 0;
   2fbac:	e0bfff17 	ldw	r2,-4(fp)
   2fbb0:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   2fbb4:	e0bfff17 	ldw	r2,-4(fp)
   2fbb8:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   2fbbc:	e0bfff17 	ldw	r2,-4(fp)
   2fbc0:	100009c5 	stb	zero,39(r2)
   2fbc4:	d0a72217 	ldw	r2,-25464(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   2fbc8:	01400284 	movi	r5,10
   2fbcc:	1009883a 	mov	r4,r2
   2fbd0:	002ae780 	call	2ae78 <__udivsi3>
   2fbd4:	1007883a 	mov	r3,r2
   2fbd8:	e0bfff17 	ldw	r2,-4(fp)
   2fbdc:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   2fbe0:	e0bfff17 	ldw	r2,-4(fp)
   2fbe4:	10c00104 	addi	r3,r2,4
   2fbe8:	e0bfff17 	ldw	r2,-4(fp)
   2fbec:	10800717 	ldw	r2,28(r2)
   2fbf0:	e1ffff17 	ldw	r7,-4(fp)
   2fbf4:	018000f4 	movhi	r6,3
   2fbf8:	31be9004 	addi	r6,r6,-1472
   2fbfc:	100b883a 	mov	r5,r2
   2fc00:	1809883a 	mov	r4,r3
   2fc04:	002fc800 	call	2fc80 <alt_alarm_start>
}
   2fc08:	0001883a 	nop
   2fc0c:	e037883a 	mov	sp,fp
   2fc10:	dfc00117 	ldw	ra,4(sp)
   2fc14:	df000017 	ldw	fp,0(sp)
   2fc18:	dec00204 	addi	sp,sp,8
   2fc1c:	f800283a 	ret

0002fc20 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2fc20:	defffa04 	addi	sp,sp,-24
   2fc24:	dfc00515 	stw	ra,20(sp)
   2fc28:	df000415 	stw	fp,16(sp)
   2fc2c:	df000404 	addi	fp,sp,16
   2fc30:	e13ffd15 	stw	r4,-12(fp)
   2fc34:	e17ffe15 	stw	r5,-8(fp)
   2fc38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   2fc3c:	e0bffd17 	ldw	r2,-12(fp)
   2fc40:	10800017 	ldw	r2,0(r2)
   2fc44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   2fc48:	e0bffc17 	ldw	r2,-16(fp)
   2fc4c:	10c00a04 	addi	r3,r2,40
   2fc50:	e0bffd17 	ldw	r2,-12(fp)
   2fc54:	10800217 	ldw	r2,8(r2)
   2fc58:	100f883a 	mov	r7,r2
   2fc5c:	e1bfff17 	ldw	r6,-4(fp)
   2fc60:	e17ffe17 	ldw	r5,-8(fp)
   2fc64:	1809883a 	mov	r4,r3
   2fc68:	002f5200 	call	2f520 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   2fc6c:	e037883a 	mov	sp,fp
   2fc70:	dfc00117 	ldw	ra,4(sp)
   2fc74:	df000017 	ldw	fp,0(sp)
   2fc78:	dec00204 	addi	sp,sp,8
   2fc7c:	f800283a 	ret

0002fc80 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2fc80:	defff504 	addi	sp,sp,-44
   2fc84:	df000a15 	stw	fp,40(sp)
   2fc88:	df000a04 	addi	fp,sp,40
   2fc8c:	e13ffc15 	stw	r4,-16(fp)
   2fc90:	e17ffd15 	stw	r5,-12(fp)
   2fc94:	e1bffe15 	stw	r6,-8(fp)
   2fc98:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2fc9c:	e03ff615 	stw	zero,-40(fp)
   2fca0:	d0a72217 	ldw	r2,-25464(gp)
  
  if (alt_ticks_per_second ())
   2fca4:	10003c26 	beq	r2,zero,2fd98 <alt_alarm_start+0x118>
  {
    if (alarm)
   2fca8:	e0bffc17 	ldw	r2,-16(fp)
   2fcac:	10003826 	beq	r2,zero,2fd90 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   2fcb0:	e0bffc17 	ldw	r2,-16(fp)
   2fcb4:	e0fffe17 	ldw	r3,-8(fp)
   2fcb8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2fcbc:	e0bffc17 	ldw	r2,-16(fp)
   2fcc0:	e0ffff17 	ldw	r3,-4(fp)
   2fcc4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2fcc8:	0005303a 	rdctl	r2,status
   2fccc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2fcd0:	e0fff917 	ldw	r3,-28(fp)
   2fcd4:	00bfff84 	movi	r2,-2
   2fcd8:	1884703a 	and	r2,r3,r2
   2fcdc:	1001703a 	wrctl	status,r2
  
  return context;
   2fce0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   2fce4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2fce8:	d0a72317 	ldw	r2,-25460(gp)
      
      current_nticks = alt_nticks();
   2fcec:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2fcf0:	e0fffd17 	ldw	r3,-12(fp)
   2fcf4:	e0bff617 	ldw	r2,-40(fp)
   2fcf8:	1885883a 	add	r2,r3,r2
   2fcfc:	10c00044 	addi	r3,r2,1
   2fd00:	e0bffc17 	ldw	r2,-16(fp)
   2fd04:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2fd08:	e0bffc17 	ldw	r2,-16(fp)
   2fd0c:	10c00217 	ldw	r3,8(r2)
   2fd10:	e0bff617 	ldw	r2,-40(fp)
   2fd14:	1880042e 	bgeu	r3,r2,2fd28 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   2fd18:	e0bffc17 	ldw	r2,-16(fp)
   2fd1c:	00c00044 	movi	r3,1
   2fd20:	10c00405 	stb	r3,16(r2)
   2fd24:	00000206 	br	2fd30 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   2fd28:	e0bffc17 	ldw	r2,-16(fp)
   2fd2c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2fd30:	e0bffc17 	ldw	r2,-16(fp)
   2fd34:	d0e00f04 	addi	r3,gp,-32708
   2fd38:	e0fffa15 	stw	r3,-24(fp)
   2fd3c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2fd40:	e0bffb17 	ldw	r2,-20(fp)
   2fd44:	e0fffa17 	ldw	r3,-24(fp)
   2fd48:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2fd4c:	e0bffa17 	ldw	r2,-24(fp)
   2fd50:	10c00017 	ldw	r3,0(r2)
   2fd54:	e0bffb17 	ldw	r2,-20(fp)
   2fd58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2fd5c:	e0bffa17 	ldw	r2,-24(fp)
   2fd60:	10800017 	ldw	r2,0(r2)
   2fd64:	e0fffb17 	ldw	r3,-20(fp)
   2fd68:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2fd6c:	e0bffa17 	ldw	r2,-24(fp)
   2fd70:	e0fffb17 	ldw	r3,-20(fp)
   2fd74:	10c00015 	stw	r3,0(r2)
   2fd78:	e0bff817 	ldw	r2,-32(fp)
   2fd7c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2fd80:	e0bff717 	ldw	r2,-36(fp)
   2fd84:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2fd88:	0005883a 	mov	r2,zero
   2fd8c:	00000306 	br	2fd9c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   2fd90:	00bffa84 	movi	r2,-22
   2fd94:	00000106 	br	2fd9c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   2fd98:	00bfde84 	movi	r2,-134
  }
}
   2fd9c:	e037883a 	mov	sp,fp
   2fda0:	df000017 	ldw	fp,0(sp)
   2fda4:	dec00104 	addi	sp,sp,4
   2fda8:	f800283a 	ret

0002fdac <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   2fdac:	defffa04 	addi	sp,sp,-24
   2fdb0:	dfc00515 	stw	ra,20(sp)
   2fdb4:	df000415 	stw	fp,16(sp)
   2fdb8:	df000404 	addi	fp,sp,16
   2fdbc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   2fdc0:	00800244 	movi	r2,9
   2fdc4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   2fdc8:	014003f4 	movhi	r5,15
   2fdcc:	29509004 	addi	r5,r5,16960
   2fdd0:	e13ffd17 	ldw	r4,-12(fp)
   2fdd4:	00208980 	call	20898 <__mulsi3>
   2fdd8:	100b883a 	mov	r5,r2
   2fddc:	0100bef4 	movhi	r4,763
   2fde0:	213c2004 	addi	r4,r4,-3968
   2fde4:	002ae780 	call	2ae78 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   2fde8:	100b883a 	mov	r5,r2
   2fdec:	01200034 	movhi	r4,32768
   2fdf0:	213fffc4 	addi	r4,r4,-1
   2fdf4:	002ae780 	call	2ae78 <__udivsi3>
   2fdf8:	100b883a 	mov	r5,r2
   2fdfc:	e13fff17 	ldw	r4,-4(fp)
   2fe00:	002ae780 	call	2ae78 <__udivsi3>
   2fe04:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   2fe08:	e0bffe17 	ldw	r2,-8(fp)
   2fe0c:	10002a26 	beq	r2,zero,2feb8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   2fe10:	e03ffc15 	stw	zero,-16(fp)
   2fe14:	00001706 	br	2fe74 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   2fe18:	00a00034 	movhi	r2,32768
   2fe1c:	10bfffc4 	addi	r2,r2,-1
   2fe20:	10bfffc4 	addi	r2,r2,-1
   2fe24:	103ffe1e 	bne	r2,zero,2fe20 <_gp+0xffff4cbc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   2fe28:	014003f4 	movhi	r5,15
   2fe2c:	29509004 	addi	r5,r5,16960
   2fe30:	e13ffd17 	ldw	r4,-12(fp)
   2fe34:	00208980 	call	20898 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   2fe38:	100b883a 	mov	r5,r2
   2fe3c:	0100bef4 	movhi	r4,763
   2fe40:	213c2004 	addi	r4,r4,-3968
   2fe44:	002ae780 	call	2ae78 <__udivsi3>
   2fe48:	100b883a 	mov	r5,r2
   2fe4c:	01200034 	movhi	r4,32768
   2fe50:	213fffc4 	addi	r4,r4,-1
   2fe54:	002ae780 	call	2ae78 <__udivsi3>
   2fe58:	1007883a 	mov	r3,r2
   2fe5c:	e0bfff17 	ldw	r2,-4(fp)
   2fe60:	10c5c83a 	sub	r2,r2,r3
   2fe64:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   2fe68:	e0bffc17 	ldw	r2,-16(fp)
   2fe6c:	10800044 	addi	r2,r2,1
   2fe70:	e0bffc15 	stw	r2,-16(fp)
   2fe74:	e0fffc17 	ldw	r3,-16(fp)
   2fe78:	e0bffe17 	ldw	r2,-8(fp)
   2fe7c:	18bfe616 	blt	r3,r2,2fe18 <_gp+0xffff4cb4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2fe80:	014003f4 	movhi	r5,15
   2fe84:	29509004 	addi	r5,r5,16960
   2fe88:	e13ffd17 	ldw	r4,-12(fp)
   2fe8c:	00208980 	call	20898 <__mulsi3>
   2fe90:	100b883a 	mov	r5,r2
   2fe94:	0100bef4 	movhi	r4,763
   2fe98:	213c2004 	addi	r4,r4,-3968
   2fe9c:	002ae780 	call	2ae78 <__udivsi3>
   2fea0:	e17fff17 	ldw	r5,-4(fp)
   2fea4:	1009883a 	mov	r4,r2
   2fea8:	00208980 	call	20898 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2feac:	10bfffc4 	addi	r2,r2,-1
   2feb0:	103ffe1e 	bne	r2,zero,2feac <_gp+0xffff4d48>
   2feb4:	00000d06 	br	2feec <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2feb8:	014003f4 	movhi	r5,15
   2febc:	29509004 	addi	r5,r5,16960
   2fec0:	e13ffd17 	ldw	r4,-12(fp)
   2fec4:	00208980 	call	20898 <__mulsi3>
   2fec8:	100b883a 	mov	r5,r2
   2fecc:	0100bef4 	movhi	r4,763
   2fed0:	213c2004 	addi	r4,r4,-3968
   2fed4:	002ae780 	call	2ae78 <__udivsi3>
   2fed8:	e17fff17 	ldw	r5,-4(fp)
   2fedc:	1009883a 	mov	r4,r2
   2fee0:	00208980 	call	20898 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2fee4:	10bfffc4 	addi	r2,r2,-1
   2fee8:	00bffe16 	blt	zero,r2,2fee4 <_gp+0xffff4d80>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   2feec:	0005883a 	mov	r2,zero
}
   2fef0:	e037883a 	mov	sp,fp
   2fef4:	dfc00117 	ldw	ra,4(sp)
   2fef8:	df000017 	ldw	fp,0(sp)
   2fefc:	dec00204 	addi	sp,sp,8
   2ff00:	f800283a 	ret

0002ff04 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2ff04:	deffff04 	addi	sp,sp,-4
   2ff08:	df000015 	stw	fp,0(sp)
   2ff0c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2ff10:	0001883a 	nop
   2ff14:	e037883a 	mov	sp,fp
   2ff18:	df000017 	ldw	fp,0(sp)
   2ff1c:	dec00104 	addi	sp,sp,4
   2ff20:	f800283a 	ret

0002ff24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2ff24:	defffe04 	addi	sp,sp,-8
   2ff28:	dfc00115 	stw	ra,4(sp)
   2ff2c:	df000015 	stw	fp,0(sp)
   2ff30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2ff34:	d0a00b17 	ldw	r2,-32724(gp)
   2ff38:	10000326 	beq	r2,zero,2ff48 <alt_get_errno+0x24>
   2ff3c:	d0a00b17 	ldw	r2,-32724(gp)
   2ff40:	103ee83a 	callr	r2
   2ff44:	00000106 	br	2ff4c <alt_get_errno+0x28>
   2ff48:	d0a71d04 	addi	r2,gp,-25484
}
   2ff4c:	e037883a 	mov	sp,fp
   2ff50:	dfc00117 	ldw	ra,4(sp)
   2ff54:	df000017 	ldw	fp,0(sp)
   2ff58:	dec00204 	addi	sp,sp,8
   2ff5c:	f800283a 	ret

0002ff60 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2ff60:	defffa04 	addi	sp,sp,-24
   2ff64:	dfc00515 	stw	ra,20(sp)
   2ff68:	df000415 	stw	fp,16(sp)
   2ff6c:	df000404 	addi	fp,sp,16
   2ff70:	e13ffe15 	stw	r4,-8(fp)
   2ff74:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2ff78:	e0bffe17 	ldw	r2,-8(fp)
   2ff7c:	10000326 	beq	r2,zero,2ff8c <alt_dev_llist_insert+0x2c>
   2ff80:	e0bffe17 	ldw	r2,-8(fp)
   2ff84:	10800217 	ldw	r2,8(r2)
   2ff88:	1000061e 	bne	r2,zero,2ffa4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2ff8c:	002ff240 	call	2ff24 <alt_get_errno>
   2ff90:	1007883a 	mov	r3,r2
   2ff94:	00800584 	movi	r2,22
   2ff98:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2ff9c:	00bffa84 	movi	r2,-22
   2ffa0:	00001306 	br	2fff0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2ffa4:	e0bffe17 	ldw	r2,-8(fp)
   2ffa8:	e0ffff17 	ldw	r3,-4(fp)
   2ffac:	e0fffc15 	stw	r3,-16(fp)
   2ffb0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2ffb4:	e0bffd17 	ldw	r2,-12(fp)
   2ffb8:	e0fffc17 	ldw	r3,-16(fp)
   2ffbc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2ffc0:	e0bffc17 	ldw	r2,-16(fp)
   2ffc4:	10c00017 	ldw	r3,0(r2)
   2ffc8:	e0bffd17 	ldw	r2,-12(fp)
   2ffcc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2ffd0:	e0bffc17 	ldw	r2,-16(fp)
   2ffd4:	10800017 	ldw	r2,0(r2)
   2ffd8:	e0fffd17 	ldw	r3,-12(fp)
   2ffdc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2ffe0:	e0bffc17 	ldw	r2,-16(fp)
   2ffe4:	e0fffd17 	ldw	r3,-12(fp)
   2ffe8:	10c00015 	stw	r3,0(r2)

  return 0;  
   2ffec:	0005883a 	mov	r2,zero
}
   2fff0:	e037883a 	mov	sp,fp
   2fff4:	dfc00117 	ldw	ra,4(sp)
   2fff8:	df000017 	ldw	fp,0(sp)
   2fffc:	dec00204 	addi	sp,sp,8
   30000:	f800283a 	ret

00030004 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   30004:	defffd04 	addi	sp,sp,-12
   30008:	dfc00215 	stw	ra,8(sp)
   3000c:	df000115 	stw	fp,4(sp)
   30010:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   30014:	008000f4 	movhi	r2,3
   30018:	1083ee04 	addi	r2,r2,4024
   3001c:	e0bfff15 	stw	r2,-4(fp)
   30020:	00000606 	br	3003c <_do_ctors+0x38>
        (*ctor) (); 
   30024:	e0bfff17 	ldw	r2,-4(fp)
   30028:	10800017 	ldw	r2,0(r2)
   3002c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   30030:	e0bfff17 	ldw	r2,-4(fp)
   30034:	10bfff04 	addi	r2,r2,-4
   30038:	e0bfff15 	stw	r2,-4(fp)
   3003c:	e0ffff17 	ldw	r3,-4(fp)
   30040:	008000f4 	movhi	r2,3
   30044:	1083ef04 	addi	r2,r2,4028
   30048:	18bff62e 	bgeu	r3,r2,30024 <_gp+0xffff4ec0>
        (*ctor) (); 
}
   3004c:	0001883a 	nop
   30050:	e037883a 	mov	sp,fp
   30054:	dfc00117 	ldw	ra,4(sp)
   30058:	df000017 	ldw	fp,0(sp)
   3005c:	dec00204 	addi	sp,sp,8
   30060:	f800283a 	ret

00030064 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   30064:	defffd04 	addi	sp,sp,-12
   30068:	dfc00215 	stw	ra,8(sp)
   3006c:	df000115 	stw	fp,4(sp)
   30070:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   30074:	008000f4 	movhi	r2,3
   30078:	1083ee04 	addi	r2,r2,4024
   3007c:	e0bfff15 	stw	r2,-4(fp)
   30080:	00000606 	br	3009c <_do_dtors+0x38>
        (*dtor) (); 
   30084:	e0bfff17 	ldw	r2,-4(fp)
   30088:	10800017 	ldw	r2,0(r2)
   3008c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   30090:	e0bfff17 	ldw	r2,-4(fp)
   30094:	10bfff04 	addi	r2,r2,-4
   30098:	e0bfff15 	stw	r2,-4(fp)
   3009c:	e0ffff17 	ldw	r3,-4(fp)
   300a0:	008000f4 	movhi	r2,3
   300a4:	1083ef04 	addi	r2,r2,4028
   300a8:	18bff62e 	bgeu	r3,r2,30084 <_gp+0xffff4f20>
        (*dtor) (); 
}
   300ac:	0001883a 	nop
   300b0:	e037883a 	mov	sp,fp
   300b4:	dfc00117 	ldw	ra,4(sp)
   300b8:	df000017 	ldw	fp,0(sp)
   300bc:	dec00204 	addi	sp,sp,8
   300c0:	f800283a 	ret

000300c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   300c4:	deffff04 	addi	sp,sp,-4
   300c8:	df000015 	stw	fp,0(sp)
   300cc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   300d0:	0001883a 	nop
   300d4:	e037883a 	mov	sp,fp
   300d8:	df000017 	ldw	fp,0(sp)
   300dc:	dec00104 	addi	sp,sp,4
   300e0:	f800283a 	ret

000300e4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   300e4:	defff904 	addi	sp,sp,-28
   300e8:	dfc00615 	stw	ra,24(sp)
   300ec:	df000515 	stw	fp,20(sp)
   300f0:	df000504 	addi	fp,sp,20
   300f4:	e13ffc15 	stw	r4,-16(fp)
   300f8:	e17ffd15 	stw	r5,-12(fp)
   300fc:	e1bffe15 	stw	r6,-8(fp)
   30100:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   30104:	e0800217 	ldw	r2,8(fp)
   30108:	d8800015 	stw	r2,0(sp)
   3010c:	e1ffff17 	ldw	r7,-4(fp)
   30110:	e1bffe17 	ldw	r6,-8(fp)
   30114:	e17ffd17 	ldw	r5,-12(fp)
   30118:	e13ffc17 	ldw	r4,-16(fp)
   3011c:	00302940 	call	30294 <alt_iic_isr_register>
}  
   30120:	e037883a 	mov	sp,fp
   30124:	dfc00117 	ldw	ra,4(sp)
   30128:	df000017 	ldw	fp,0(sp)
   3012c:	dec00204 	addi	sp,sp,8
   30130:	f800283a 	ret

00030134 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   30134:	defff904 	addi	sp,sp,-28
   30138:	df000615 	stw	fp,24(sp)
   3013c:	df000604 	addi	fp,sp,24
   30140:	e13ffe15 	stw	r4,-8(fp)
   30144:	e17fff15 	stw	r5,-4(fp)
   30148:	e0bfff17 	ldw	r2,-4(fp)
   3014c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30150:	0005303a 	rdctl	r2,status
   30154:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30158:	e0fffb17 	ldw	r3,-20(fp)
   3015c:	00bfff84 	movi	r2,-2
   30160:	1884703a 	and	r2,r3,r2
   30164:	1001703a 	wrctl	status,r2
  
  return context;
   30168:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   3016c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   30170:	00c00044 	movi	r3,1
   30174:	e0bffa17 	ldw	r2,-24(fp)
   30178:	1884983a 	sll	r2,r3,r2
   3017c:	1007883a 	mov	r3,r2
   30180:	d0a72117 	ldw	r2,-25468(gp)
   30184:	1884b03a 	or	r2,r3,r2
   30188:	d0a72115 	stw	r2,-25468(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   3018c:	d0a72117 	ldw	r2,-25468(gp)
   30190:	100170fa 	wrctl	ienable,r2
   30194:	e0bffc17 	ldw	r2,-16(fp)
   30198:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3019c:	e0bffd17 	ldw	r2,-12(fp)
   301a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   301a4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   301a8:	0001883a 	nop
}
   301ac:	e037883a 	mov	sp,fp
   301b0:	df000017 	ldw	fp,0(sp)
   301b4:	dec00104 	addi	sp,sp,4
   301b8:	f800283a 	ret

000301bc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   301bc:	defff904 	addi	sp,sp,-28
   301c0:	df000615 	stw	fp,24(sp)
   301c4:	df000604 	addi	fp,sp,24
   301c8:	e13ffe15 	stw	r4,-8(fp)
   301cc:	e17fff15 	stw	r5,-4(fp)
   301d0:	e0bfff17 	ldw	r2,-4(fp)
   301d4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   301d8:	0005303a 	rdctl	r2,status
   301dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   301e0:	e0fffb17 	ldw	r3,-20(fp)
   301e4:	00bfff84 	movi	r2,-2
   301e8:	1884703a 	and	r2,r3,r2
   301ec:	1001703a 	wrctl	status,r2
  
  return context;
   301f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   301f4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   301f8:	00c00044 	movi	r3,1
   301fc:	e0bffa17 	ldw	r2,-24(fp)
   30200:	1884983a 	sll	r2,r3,r2
   30204:	0084303a 	nor	r2,zero,r2
   30208:	1007883a 	mov	r3,r2
   3020c:	d0a72117 	ldw	r2,-25468(gp)
   30210:	1884703a 	and	r2,r3,r2
   30214:	d0a72115 	stw	r2,-25468(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   30218:	d0a72117 	ldw	r2,-25468(gp)
   3021c:	100170fa 	wrctl	ienable,r2
   30220:	e0bffc17 	ldw	r2,-16(fp)
   30224:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30228:	e0bffd17 	ldw	r2,-12(fp)
   3022c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   30230:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   30234:	0001883a 	nop
}
   30238:	e037883a 	mov	sp,fp
   3023c:	df000017 	ldw	fp,0(sp)
   30240:	dec00104 	addi	sp,sp,4
   30244:	f800283a 	ret

00030248 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   30248:	defffc04 	addi	sp,sp,-16
   3024c:	df000315 	stw	fp,12(sp)
   30250:	df000304 	addi	fp,sp,12
   30254:	e13ffe15 	stw	r4,-8(fp)
   30258:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   3025c:	000530fa 	rdctl	r2,ienable
   30260:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   30264:	00c00044 	movi	r3,1
   30268:	e0bfff17 	ldw	r2,-4(fp)
   3026c:	1884983a 	sll	r2,r3,r2
   30270:	1007883a 	mov	r3,r2
   30274:	e0bffd17 	ldw	r2,-12(fp)
   30278:	1884703a 	and	r2,r3,r2
   3027c:	1004c03a 	cmpne	r2,r2,zero
   30280:	10803fcc 	andi	r2,r2,255
}
   30284:	e037883a 	mov	sp,fp
   30288:	df000017 	ldw	fp,0(sp)
   3028c:	dec00104 	addi	sp,sp,4
   30290:	f800283a 	ret

00030294 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   30294:	defff504 	addi	sp,sp,-44
   30298:	dfc00a15 	stw	ra,40(sp)
   3029c:	df000915 	stw	fp,36(sp)
   302a0:	df000904 	addi	fp,sp,36
   302a4:	e13ffc15 	stw	r4,-16(fp)
   302a8:	e17ffd15 	stw	r5,-12(fp)
   302ac:	e1bffe15 	stw	r6,-8(fp)
   302b0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   302b4:	00bffa84 	movi	r2,-22
   302b8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   302bc:	e0bffd17 	ldw	r2,-12(fp)
   302c0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   302c4:	e0bff817 	ldw	r2,-32(fp)
   302c8:	10800808 	cmpgei	r2,r2,32
   302cc:	1000271e 	bne	r2,zero,3036c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   302d0:	0005303a 	rdctl	r2,status
   302d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   302d8:	e0fffb17 	ldw	r3,-20(fp)
   302dc:	00bfff84 	movi	r2,-2
   302e0:	1884703a 	and	r2,r3,r2
   302e4:	1001703a 	wrctl	status,r2
  
  return context;
   302e8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   302ec:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   302f0:	008000f4 	movhi	r2,3
   302f4:	10938804 	addi	r2,r2,20000
   302f8:	e0fff817 	ldw	r3,-32(fp)
   302fc:	180690fa 	slli	r3,r3,3
   30300:	10c5883a 	add	r2,r2,r3
   30304:	e0fffe17 	ldw	r3,-8(fp)
   30308:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   3030c:	008000f4 	movhi	r2,3
   30310:	10938804 	addi	r2,r2,20000
   30314:	e0fff817 	ldw	r3,-32(fp)
   30318:	180690fa 	slli	r3,r3,3
   3031c:	10c5883a 	add	r2,r2,r3
   30320:	10800104 	addi	r2,r2,4
   30324:	e0ffff17 	ldw	r3,-4(fp)
   30328:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   3032c:	e0bffe17 	ldw	r2,-8(fp)
   30330:	10000526 	beq	r2,zero,30348 <alt_iic_isr_register+0xb4>
   30334:	e0bff817 	ldw	r2,-32(fp)
   30338:	100b883a 	mov	r5,r2
   3033c:	e13ffc17 	ldw	r4,-16(fp)
   30340:	00301340 	call	30134 <alt_ic_irq_enable>
   30344:	00000406 	br	30358 <alt_iic_isr_register+0xc4>
   30348:	e0bff817 	ldw	r2,-32(fp)
   3034c:	100b883a 	mov	r5,r2
   30350:	e13ffc17 	ldw	r4,-16(fp)
   30354:	00301bc0 	call	301bc <alt_ic_irq_disable>
   30358:	e0bff715 	stw	r2,-36(fp)
   3035c:	e0bffa17 	ldw	r2,-24(fp)
   30360:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30364:	e0bff917 	ldw	r2,-28(fp)
   30368:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   3036c:	e0bff717 	ldw	r2,-36(fp)
}
   30370:	e037883a 	mov	sp,fp
   30374:	dfc00117 	ldw	ra,4(sp)
   30378:	df000017 	ldw	fp,0(sp)
   3037c:	dec00204 	addi	sp,sp,8
   30380:	f800283a 	ret

00030384 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   30384:	defff804 	addi	sp,sp,-32
   30388:	dfc00715 	stw	ra,28(sp)
   3038c:	df000615 	stw	fp,24(sp)
   30390:	dc000515 	stw	r16,20(sp)
   30394:	df000604 	addi	fp,sp,24
   30398:	e13ffb15 	stw	r4,-20(fp)
   3039c:	e17ffc15 	stw	r5,-16(fp)
   303a0:	e1bffd15 	stw	r6,-12(fp)
   303a4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   303a8:	e1bffe17 	ldw	r6,-8(fp)
   303ac:	e17ffd17 	ldw	r5,-12(fp)
   303b0:	e13ffc17 	ldw	r4,-16(fp)
   303b4:	003060c0 	call	3060c <open>
   303b8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   303bc:	e0bffa17 	ldw	r2,-24(fp)
   303c0:	10002216 	blt	r2,zero,3044c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   303c4:	040000f4 	movhi	r16,3
   303c8:	84079904 	addi	r16,r16,7780
   303cc:	e0bffa17 	ldw	r2,-24(fp)
   303d0:	01400304 	movi	r5,12
   303d4:	1009883a 	mov	r4,r2
   303d8:	00208980 	call	20898 <__mulsi3>
   303dc:	8085883a 	add	r2,r16,r2
   303e0:	10c00017 	ldw	r3,0(r2)
   303e4:	e0bffb17 	ldw	r2,-20(fp)
   303e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   303ec:	040000f4 	movhi	r16,3
   303f0:	84079904 	addi	r16,r16,7780
   303f4:	e0bffa17 	ldw	r2,-24(fp)
   303f8:	01400304 	movi	r5,12
   303fc:	1009883a 	mov	r4,r2
   30400:	00208980 	call	20898 <__mulsi3>
   30404:	8085883a 	add	r2,r16,r2
   30408:	10800104 	addi	r2,r2,4
   3040c:	10c00017 	ldw	r3,0(r2)
   30410:	e0bffb17 	ldw	r2,-20(fp)
   30414:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   30418:	040000f4 	movhi	r16,3
   3041c:	84079904 	addi	r16,r16,7780
   30420:	e0bffa17 	ldw	r2,-24(fp)
   30424:	01400304 	movi	r5,12
   30428:	1009883a 	mov	r4,r2
   3042c:	00208980 	call	20898 <__mulsi3>
   30430:	8085883a 	add	r2,r16,r2
   30434:	10800204 	addi	r2,r2,8
   30438:	10c00017 	ldw	r3,0(r2)
   3043c:	e0bffb17 	ldw	r2,-20(fp)
   30440:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   30444:	e13ffa17 	ldw	r4,-24(fp)
   30448:	002defc0 	call	2defc <alt_release_fd>
  }
} 
   3044c:	0001883a 	nop
   30450:	e6ffff04 	addi	sp,fp,-4
   30454:	dfc00217 	ldw	ra,8(sp)
   30458:	df000117 	ldw	fp,4(sp)
   3045c:	dc000017 	ldw	r16,0(sp)
   30460:	dec00304 	addi	sp,sp,12
   30464:	f800283a 	ret

00030468 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   30468:	defffb04 	addi	sp,sp,-20
   3046c:	dfc00415 	stw	ra,16(sp)
   30470:	df000315 	stw	fp,12(sp)
   30474:	df000304 	addi	fp,sp,12
   30478:	e13ffd15 	stw	r4,-12(fp)
   3047c:	e17ffe15 	stw	r5,-8(fp)
   30480:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   30484:	01c07fc4 	movi	r7,511
   30488:	01800044 	movi	r6,1
   3048c:	e17ffd17 	ldw	r5,-12(fp)
   30490:	010000f4 	movhi	r4,3
   30494:	21079c04 	addi	r4,r4,7792
   30498:	00303840 	call	30384 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   3049c:	01c07fc4 	movi	r7,511
   304a0:	000d883a 	mov	r6,zero
   304a4:	e17ffe17 	ldw	r5,-8(fp)
   304a8:	010000f4 	movhi	r4,3
   304ac:	21079904 	addi	r4,r4,7780
   304b0:	00303840 	call	30384 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   304b4:	01c07fc4 	movi	r7,511
   304b8:	01800044 	movi	r6,1
   304bc:	e17fff17 	ldw	r5,-4(fp)
   304c0:	010000f4 	movhi	r4,3
   304c4:	21079f04 	addi	r4,r4,7804
   304c8:	00303840 	call	30384 <alt_open_fd>
}  
   304cc:	0001883a 	nop
   304d0:	e037883a 	mov	sp,fp
   304d4:	dfc00117 	ldw	ra,4(sp)
   304d8:	df000017 	ldw	fp,0(sp)
   304dc:	dec00204 	addi	sp,sp,8
   304e0:	f800283a 	ret

000304e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   304e4:	defffe04 	addi	sp,sp,-8
   304e8:	dfc00115 	stw	ra,4(sp)
   304ec:	df000015 	stw	fp,0(sp)
   304f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   304f4:	d0a00b17 	ldw	r2,-32724(gp)
   304f8:	10000326 	beq	r2,zero,30508 <alt_get_errno+0x24>
   304fc:	d0a00b17 	ldw	r2,-32724(gp)
   30500:	103ee83a 	callr	r2
   30504:	00000106 	br	3050c <alt_get_errno+0x28>
   30508:	d0a71d04 	addi	r2,gp,-25484
}
   3050c:	e037883a 	mov	sp,fp
   30510:	dfc00117 	ldw	ra,4(sp)
   30514:	df000017 	ldw	fp,0(sp)
   30518:	dec00204 	addi	sp,sp,8
   3051c:	f800283a 	ret

00030520 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   30520:	defffb04 	addi	sp,sp,-20
   30524:	dfc00415 	stw	ra,16(sp)
   30528:	df000315 	stw	fp,12(sp)
   3052c:	dc000215 	stw	r16,8(sp)
   30530:	df000304 	addi	fp,sp,12
   30534:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   30538:	e0bffe17 	ldw	r2,-8(fp)
   3053c:	10800217 	ldw	r2,8(r2)
   30540:	10d00034 	orhi	r3,r2,16384
   30544:	e0bffe17 	ldw	r2,-8(fp)
   30548:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   3054c:	e03ffd15 	stw	zero,-12(fp)
   30550:	00002306 	br	305e0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   30554:	040000f4 	movhi	r16,3
   30558:	84079904 	addi	r16,r16,7780
   3055c:	e0bffd17 	ldw	r2,-12(fp)
   30560:	01400304 	movi	r5,12
   30564:	1009883a 	mov	r4,r2
   30568:	00208980 	call	20898 <__mulsi3>
   3056c:	8085883a 	add	r2,r16,r2
   30570:	10c00017 	ldw	r3,0(r2)
   30574:	e0bffe17 	ldw	r2,-8(fp)
   30578:	10800017 	ldw	r2,0(r2)
   3057c:	1880151e 	bne	r3,r2,305d4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   30580:	040000f4 	movhi	r16,3
   30584:	84079904 	addi	r16,r16,7780
   30588:	e0bffd17 	ldw	r2,-12(fp)
   3058c:	01400304 	movi	r5,12
   30590:	1009883a 	mov	r4,r2
   30594:	00208980 	call	20898 <__mulsi3>
   30598:	8085883a 	add	r2,r16,r2
   3059c:	10800204 	addi	r2,r2,8
   305a0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   305a4:	10000b0e 	bge	r2,zero,305d4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   305a8:	01400304 	movi	r5,12
   305ac:	e13ffd17 	ldw	r4,-12(fp)
   305b0:	00208980 	call	20898 <__mulsi3>
   305b4:	1007883a 	mov	r3,r2
   305b8:	008000f4 	movhi	r2,3
   305bc:	10879904 	addi	r2,r2,7780
   305c0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   305c4:	e0bffe17 	ldw	r2,-8(fp)
   305c8:	18800226 	beq	r3,r2,305d4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   305cc:	00bffcc4 	movi	r2,-13
   305d0:	00000806 	br	305f4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   305d4:	e0bffd17 	ldw	r2,-12(fp)
   305d8:	10800044 	addi	r2,r2,1
   305dc:	e0bffd15 	stw	r2,-12(fp)
   305e0:	d0a00a17 	ldw	r2,-32728(gp)
   305e4:	1007883a 	mov	r3,r2
   305e8:	e0bffd17 	ldw	r2,-12(fp)
   305ec:	18bfd92e 	bgeu	r3,r2,30554 <_gp+0xffff53f0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   305f0:	0005883a 	mov	r2,zero
}
   305f4:	e6ffff04 	addi	sp,fp,-4
   305f8:	dfc00217 	ldw	ra,8(sp)
   305fc:	df000117 	ldw	fp,4(sp)
   30600:	dc000017 	ldw	r16,0(sp)
   30604:	dec00304 	addi	sp,sp,12
   30608:	f800283a 	ret

0003060c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   3060c:	defff604 	addi	sp,sp,-40
   30610:	dfc00915 	stw	ra,36(sp)
   30614:	df000815 	stw	fp,32(sp)
   30618:	df000804 	addi	fp,sp,32
   3061c:	e13ffd15 	stw	r4,-12(fp)
   30620:	e17ffe15 	stw	r5,-8(fp)
   30624:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   30628:	00bfffc4 	movi	r2,-1
   3062c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   30630:	00bffb44 	movi	r2,-19
   30634:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   30638:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   3063c:	d1600804 	addi	r5,gp,-32736
   30640:	e13ffd17 	ldw	r4,-12(fp)
   30644:	00309300 	call	30930 <alt_find_dev>
   30648:	e0bff815 	stw	r2,-32(fp)
   3064c:	e0bff817 	ldw	r2,-32(fp)
   30650:	1000051e 	bne	r2,zero,30668 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   30654:	e13ffd17 	ldw	r4,-12(fp)
   30658:	00309c00 	call	309c0 <alt_find_file>
   3065c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   30660:	00800044 	movi	r2,1
   30664:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   30668:	e0bff817 	ldw	r2,-32(fp)
   3066c:	10002b26 	beq	r2,zero,3071c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   30670:	e13ff817 	ldw	r4,-32(fp)
   30674:	0030ac80 	call	30ac8 <alt_get_fd>
   30678:	e0bff915 	stw	r2,-28(fp)
   3067c:	e0bff917 	ldw	r2,-28(fp)
   30680:	1000030e 	bge	r2,zero,30690 <open+0x84>
    {
      status = index;
   30684:	e0bff917 	ldw	r2,-28(fp)
   30688:	e0bffa15 	stw	r2,-24(fp)
   3068c:	00002506 	br	30724 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   30690:	01400304 	movi	r5,12
   30694:	e13ff917 	ldw	r4,-28(fp)
   30698:	00208980 	call	20898 <__mulsi3>
   3069c:	1007883a 	mov	r3,r2
   306a0:	008000f4 	movhi	r2,3
   306a4:	10879904 	addi	r2,r2,7780
   306a8:	1885883a 	add	r2,r3,r2
   306ac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   306b0:	e0fffe17 	ldw	r3,-8(fp)
   306b4:	00900034 	movhi	r2,16384
   306b8:	10bfffc4 	addi	r2,r2,-1
   306bc:	1886703a 	and	r3,r3,r2
   306c0:	e0bffc17 	ldw	r2,-16(fp)
   306c4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   306c8:	e0bffb17 	ldw	r2,-20(fp)
   306cc:	1000051e 	bne	r2,zero,306e4 <open+0xd8>
   306d0:	e13ffc17 	ldw	r4,-16(fp)
   306d4:	00305200 	call	30520 <alt_file_locked>
   306d8:	e0bffa15 	stw	r2,-24(fp)
   306dc:	e0bffa17 	ldw	r2,-24(fp)
   306e0:	10001016 	blt	r2,zero,30724 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   306e4:	e0bff817 	ldw	r2,-32(fp)
   306e8:	10800317 	ldw	r2,12(r2)
   306ec:	10000826 	beq	r2,zero,30710 <open+0x104>
   306f0:	e0bff817 	ldw	r2,-32(fp)
   306f4:	10800317 	ldw	r2,12(r2)
   306f8:	e1ffff17 	ldw	r7,-4(fp)
   306fc:	e1bffe17 	ldw	r6,-8(fp)
   30700:	e17ffd17 	ldw	r5,-12(fp)
   30704:	e13ffc17 	ldw	r4,-16(fp)
   30708:	103ee83a 	callr	r2
   3070c:	00000106 	br	30714 <open+0x108>
   30710:	0005883a 	mov	r2,zero
   30714:	e0bffa15 	stw	r2,-24(fp)
   30718:	00000206 	br	30724 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   3071c:	00bffb44 	movi	r2,-19
   30720:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   30724:	e0bffa17 	ldw	r2,-24(fp)
   30728:	1000090e 	bge	r2,zero,30750 <open+0x144>
  {
    alt_release_fd (index);  
   3072c:	e13ff917 	ldw	r4,-28(fp)
   30730:	002defc0 	call	2defc <alt_release_fd>
    ALT_ERRNO = -status;
   30734:	00304e40 	call	304e4 <alt_get_errno>
   30738:	1007883a 	mov	r3,r2
   3073c:	e0bffa17 	ldw	r2,-24(fp)
   30740:	0085c83a 	sub	r2,zero,r2
   30744:	18800015 	stw	r2,0(r3)
    return -1;
   30748:	00bfffc4 	movi	r2,-1
   3074c:	00000106 	br	30754 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   30750:	e0bff917 	ldw	r2,-28(fp)
}
   30754:	e037883a 	mov	sp,fp
   30758:	dfc00117 	ldw	ra,4(sp)
   3075c:	df000017 	ldw	fp,0(sp)
   30760:	dec00204 	addi	sp,sp,8
   30764:	f800283a 	ret

00030768 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   30768:	defffa04 	addi	sp,sp,-24
   3076c:	df000515 	stw	fp,20(sp)
   30770:	df000504 	addi	fp,sp,20
   30774:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30778:	0005303a 	rdctl	r2,status
   3077c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30780:	e0fffc17 	ldw	r3,-16(fp)
   30784:	00bfff84 	movi	r2,-2
   30788:	1884703a 	and	r2,r3,r2
   3078c:	1001703a 	wrctl	status,r2
  
  return context;
   30790:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   30794:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   30798:	e0bfff17 	ldw	r2,-4(fp)
   3079c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   307a0:	e0bffd17 	ldw	r2,-12(fp)
   307a4:	10800017 	ldw	r2,0(r2)
   307a8:	e0fffd17 	ldw	r3,-12(fp)
   307ac:	18c00117 	ldw	r3,4(r3)
   307b0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   307b4:	e0bffd17 	ldw	r2,-12(fp)
   307b8:	10800117 	ldw	r2,4(r2)
   307bc:	e0fffd17 	ldw	r3,-12(fp)
   307c0:	18c00017 	ldw	r3,0(r3)
   307c4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   307c8:	e0bffd17 	ldw	r2,-12(fp)
   307cc:	e0fffd17 	ldw	r3,-12(fp)
   307d0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   307d4:	e0bffd17 	ldw	r2,-12(fp)
   307d8:	e0fffd17 	ldw	r3,-12(fp)
   307dc:	10c00015 	stw	r3,0(r2)
   307e0:	e0bffb17 	ldw	r2,-20(fp)
   307e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   307e8:	e0bffe17 	ldw	r2,-8(fp)
   307ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   307f0:	0001883a 	nop
   307f4:	e037883a 	mov	sp,fp
   307f8:	df000017 	ldw	fp,0(sp)
   307fc:	dec00104 	addi	sp,sp,4
   30800:	f800283a 	ret

00030804 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   30804:	defffb04 	addi	sp,sp,-20
   30808:	dfc00415 	stw	ra,16(sp)
   3080c:	df000315 	stw	fp,12(sp)
   30810:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   30814:	d0a00f17 	ldw	r2,-32708(gp)
   30818:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   3081c:	d0a72317 	ldw	r2,-25460(gp)
   30820:	10800044 	addi	r2,r2,1
   30824:	d0a72315 	stw	r2,-25460(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   30828:	00002e06 	br	308e4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   3082c:	e0bffd17 	ldw	r2,-12(fp)
   30830:	10800017 	ldw	r2,0(r2)
   30834:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   30838:	e0bffd17 	ldw	r2,-12(fp)
   3083c:	10800403 	ldbu	r2,16(r2)
   30840:	10803fcc 	andi	r2,r2,255
   30844:	10000426 	beq	r2,zero,30858 <alt_tick+0x54>
   30848:	d0a72317 	ldw	r2,-25460(gp)
   3084c:	1000021e 	bne	r2,zero,30858 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   30850:	e0bffd17 	ldw	r2,-12(fp)
   30854:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   30858:	e0bffd17 	ldw	r2,-12(fp)
   3085c:	10800217 	ldw	r2,8(r2)
   30860:	d0e72317 	ldw	r3,-25460(gp)
   30864:	18801d36 	bltu	r3,r2,308dc <alt_tick+0xd8>
   30868:	e0bffd17 	ldw	r2,-12(fp)
   3086c:	10800403 	ldbu	r2,16(r2)
   30870:	10803fcc 	andi	r2,r2,255
   30874:	1000191e 	bne	r2,zero,308dc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   30878:	e0bffd17 	ldw	r2,-12(fp)
   3087c:	10800317 	ldw	r2,12(r2)
   30880:	e0fffd17 	ldw	r3,-12(fp)
   30884:	18c00517 	ldw	r3,20(r3)
   30888:	1809883a 	mov	r4,r3
   3088c:	103ee83a 	callr	r2
   30890:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   30894:	e0bfff17 	ldw	r2,-4(fp)
   30898:	1000031e 	bne	r2,zero,308a8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   3089c:	e13ffd17 	ldw	r4,-12(fp)
   308a0:	00307680 	call	30768 <alt_alarm_stop>
   308a4:	00000d06 	br	308dc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   308a8:	e0bffd17 	ldw	r2,-12(fp)
   308ac:	10c00217 	ldw	r3,8(r2)
   308b0:	e0bfff17 	ldw	r2,-4(fp)
   308b4:	1887883a 	add	r3,r3,r2
   308b8:	e0bffd17 	ldw	r2,-12(fp)
   308bc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   308c0:	e0bffd17 	ldw	r2,-12(fp)
   308c4:	10c00217 	ldw	r3,8(r2)
   308c8:	d0a72317 	ldw	r2,-25460(gp)
   308cc:	1880032e 	bgeu	r3,r2,308dc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   308d0:	e0bffd17 	ldw	r2,-12(fp)
   308d4:	00c00044 	movi	r3,1
   308d8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   308dc:	e0bffe17 	ldw	r2,-8(fp)
   308e0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   308e4:	e0fffd17 	ldw	r3,-12(fp)
   308e8:	d0a00f04 	addi	r2,gp,-32708
   308ec:	18bfcf1e 	bne	r3,r2,3082c <_gp+0xffff56c8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   308f0:	0001883a 	nop
}
   308f4:	0001883a 	nop
   308f8:	e037883a 	mov	sp,fp
   308fc:	dfc00117 	ldw	ra,4(sp)
   30900:	df000017 	ldw	fp,0(sp)
   30904:	dec00204 	addi	sp,sp,8
   30908:	f800283a 	ret

0003090c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   3090c:	deffff04 	addi	sp,sp,-4
   30910:	df000015 	stw	fp,0(sp)
   30914:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   30918:	000170fa 	wrctl	ienable,zero
}
   3091c:	0001883a 	nop
   30920:	e037883a 	mov	sp,fp
   30924:	df000017 	ldw	fp,0(sp)
   30928:	dec00104 	addi	sp,sp,4
   3092c:	f800283a 	ret

00030930 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   30930:	defffa04 	addi	sp,sp,-24
   30934:	dfc00515 	stw	ra,20(sp)
   30938:	df000415 	stw	fp,16(sp)
   3093c:	df000404 	addi	fp,sp,16
   30940:	e13ffe15 	stw	r4,-8(fp)
   30944:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   30948:	e0bfff17 	ldw	r2,-4(fp)
   3094c:	10800017 	ldw	r2,0(r2)
   30950:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   30954:	e13ffe17 	ldw	r4,-8(fp)
   30958:	0020a000 	call	20a00 <strlen>
   3095c:	10800044 	addi	r2,r2,1
   30960:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   30964:	00000d06 	br	3099c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   30968:	e0bffc17 	ldw	r2,-16(fp)
   3096c:	10800217 	ldw	r2,8(r2)
   30970:	e0fffd17 	ldw	r3,-12(fp)
   30974:	180d883a 	mov	r6,r3
   30978:	e17ffe17 	ldw	r5,-8(fp)
   3097c:	1009883a 	mov	r4,r2
   30980:	0030c740 	call	30c74 <memcmp>
   30984:	1000021e 	bne	r2,zero,30990 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   30988:	e0bffc17 	ldw	r2,-16(fp)
   3098c:	00000706 	br	309ac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   30990:	e0bffc17 	ldw	r2,-16(fp)
   30994:	10800017 	ldw	r2,0(r2)
   30998:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   3099c:	e0fffc17 	ldw	r3,-16(fp)
   309a0:	e0bfff17 	ldw	r2,-4(fp)
   309a4:	18bff01e 	bne	r3,r2,30968 <_gp+0xffff5804>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   309a8:	0005883a 	mov	r2,zero
}
   309ac:	e037883a 	mov	sp,fp
   309b0:	dfc00117 	ldw	ra,4(sp)
   309b4:	df000017 	ldw	fp,0(sp)
   309b8:	dec00204 	addi	sp,sp,8
   309bc:	f800283a 	ret

000309c0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   309c0:	defffb04 	addi	sp,sp,-20
   309c4:	dfc00415 	stw	ra,16(sp)
   309c8:	df000315 	stw	fp,12(sp)
   309cc:	df000304 	addi	fp,sp,12
   309d0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   309d4:	d0a00617 	ldw	r2,-32744(gp)
   309d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   309dc:	00003106 	br	30aa4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   309e0:	e0bffd17 	ldw	r2,-12(fp)
   309e4:	10800217 	ldw	r2,8(r2)
   309e8:	1009883a 	mov	r4,r2
   309ec:	0020a000 	call	20a00 <strlen>
   309f0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   309f4:	e0bffd17 	ldw	r2,-12(fp)
   309f8:	10c00217 	ldw	r3,8(r2)
   309fc:	e0bffe17 	ldw	r2,-8(fp)
   30a00:	10bfffc4 	addi	r2,r2,-1
   30a04:	1885883a 	add	r2,r3,r2
   30a08:	10800003 	ldbu	r2,0(r2)
   30a0c:	10803fcc 	andi	r2,r2,255
   30a10:	1080201c 	xori	r2,r2,128
   30a14:	10bfe004 	addi	r2,r2,-128
   30a18:	10800bd8 	cmpnei	r2,r2,47
   30a1c:	1000031e 	bne	r2,zero,30a2c <alt_find_file+0x6c>
    {
      len -= 1;
   30a20:	e0bffe17 	ldw	r2,-8(fp)
   30a24:	10bfffc4 	addi	r2,r2,-1
   30a28:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   30a2c:	e0bffe17 	ldw	r2,-8(fp)
   30a30:	e0ffff17 	ldw	r3,-4(fp)
   30a34:	1885883a 	add	r2,r3,r2
   30a38:	10800003 	ldbu	r2,0(r2)
   30a3c:	10803fcc 	andi	r2,r2,255
   30a40:	1080201c 	xori	r2,r2,128
   30a44:	10bfe004 	addi	r2,r2,-128
   30a48:	10800be0 	cmpeqi	r2,r2,47
   30a4c:	1000081e 	bne	r2,zero,30a70 <alt_find_file+0xb0>
   30a50:	e0bffe17 	ldw	r2,-8(fp)
   30a54:	e0ffff17 	ldw	r3,-4(fp)
   30a58:	1885883a 	add	r2,r3,r2
   30a5c:	10800003 	ldbu	r2,0(r2)
   30a60:	10803fcc 	andi	r2,r2,255
   30a64:	1080201c 	xori	r2,r2,128
   30a68:	10bfe004 	addi	r2,r2,-128
   30a6c:	10000a1e 	bne	r2,zero,30a98 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   30a70:	e0bffd17 	ldw	r2,-12(fp)
   30a74:	10800217 	ldw	r2,8(r2)
   30a78:	e0fffe17 	ldw	r3,-8(fp)
   30a7c:	180d883a 	mov	r6,r3
   30a80:	e17fff17 	ldw	r5,-4(fp)
   30a84:	1009883a 	mov	r4,r2
   30a88:	0030c740 	call	30c74 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   30a8c:	1000021e 	bne	r2,zero,30a98 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   30a90:	e0bffd17 	ldw	r2,-12(fp)
   30a94:	00000706 	br	30ab4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   30a98:	e0bffd17 	ldw	r2,-12(fp)
   30a9c:	10800017 	ldw	r2,0(r2)
   30aa0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   30aa4:	e0fffd17 	ldw	r3,-12(fp)
   30aa8:	d0a00604 	addi	r2,gp,-32744
   30aac:	18bfcc1e 	bne	r3,r2,309e0 <_gp+0xffff587c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   30ab0:	0005883a 	mov	r2,zero
}
   30ab4:	e037883a 	mov	sp,fp
   30ab8:	dfc00117 	ldw	ra,4(sp)
   30abc:	df000017 	ldw	fp,0(sp)
   30ac0:	dec00204 	addi	sp,sp,8
   30ac4:	f800283a 	ret

00030ac8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   30ac8:	defffa04 	addi	sp,sp,-24
   30acc:	dfc00515 	stw	ra,20(sp)
   30ad0:	df000415 	stw	fp,16(sp)
   30ad4:	dc000315 	stw	r16,12(sp)
   30ad8:	df000404 	addi	fp,sp,16
   30adc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   30ae0:	00bffa04 	movi	r2,-24
   30ae4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   30ae8:	e03ffc15 	stw	zero,-16(fp)
   30aec:	00001d06 	br	30b64 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   30af0:	040000f4 	movhi	r16,3
   30af4:	84079904 	addi	r16,r16,7780
   30af8:	e0bffc17 	ldw	r2,-16(fp)
   30afc:	01400304 	movi	r5,12
   30b00:	1009883a 	mov	r4,r2
   30b04:	00208980 	call	20898 <__mulsi3>
   30b08:	8085883a 	add	r2,r16,r2
   30b0c:	10800017 	ldw	r2,0(r2)
   30b10:	1000111e 	bne	r2,zero,30b58 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   30b14:	040000f4 	movhi	r16,3
   30b18:	84079904 	addi	r16,r16,7780
   30b1c:	e0bffc17 	ldw	r2,-16(fp)
   30b20:	01400304 	movi	r5,12
   30b24:	1009883a 	mov	r4,r2
   30b28:	00208980 	call	20898 <__mulsi3>
   30b2c:	8085883a 	add	r2,r16,r2
   30b30:	e0fffe17 	ldw	r3,-8(fp)
   30b34:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   30b38:	d0e00a17 	ldw	r3,-32728(gp)
   30b3c:	e0bffc17 	ldw	r2,-16(fp)
   30b40:	1880020e 	bge	r3,r2,30b4c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   30b44:	e0bffc17 	ldw	r2,-16(fp)
   30b48:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   30b4c:	e0bffc17 	ldw	r2,-16(fp)
   30b50:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   30b54:	00000606 	br	30b70 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   30b58:	e0bffc17 	ldw	r2,-16(fp)
   30b5c:	10800044 	addi	r2,r2,1
   30b60:	e0bffc15 	stw	r2,-16(fp)
   30b64:	e0bffc17 	ldw	r2,-16(fp)
   30b68:	10800810 	cmplti	r2,r2,32
   30b6c:	103fe01e 	bne	r2,zero,30af0 <_gp+0xffff598c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   30b70:	e0bffd17 	ldw	r2,-12(fp)
}
   30b74:	e6ffff04 	addi	sp,fp,-4
   30b78:	dfc00217 	ldw	ra,8(sp)
   30b7c:	df000117 	ldw	fp,4(sp)
   30b80:	dc000017 	ldw	r16,0(sp)
   30b84:	dec00304 	addi	sp,sp,12
   30b88:	f800283a 	ret

00030b8c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   30b8c:	defffe04 	addi	sp,sp,-8
   30b90:	df000115 	stw	fp,4(sp)
   30b94:	df000104 	addi	fp,sp,4
   30b98:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   30b9c:	e0bfff17 	ldw	r2,-4(fp)
   30ba0:	10bffe84 	addi	r2,r2,-6
   30ba4:	10c00428 	cmpgeui	r3,r2,16
   30ba8:	18001a1e 	bne	r3,zero,30c14 <alt_exception_cause_generated_bad_addr+0x88>
   30bac:	100690ba 	slli	r3,r2,2
   30bb0:	008000f4 	movhi	r2,3
   30bb4:	1082f104 	addi	r2,r2,3012
   30bb8:	1885883a 	add	r2,r3,r2
   30bbc:	10800017 	ldw	r2,0(r2)
   30bc0:	1000683a 	jmp	r2
   30bc4:	00030c04 	movi	zero,3120
   30bc8:	00030c04 	movi	zero,3120
   30bcc:	00030c14 	movui	zero,3120
   30bd0:	00030c14 	movui	zero,3120
   30bd4:	00030c14 	movui	zero,3120
   30bd8:	00030c04 	movi	zero,3120
   30bdc:	00030c0c 	andi	zero,zero,3120
   30be0:	00030c14 	movui	zero,3120
   30be4:	00030c04 	movi	zero,3120
   30be8:	00030c04 	movi	zero,3120
   30bec:	00030c14 	movui	zero,3120
   30bf0:	00030c04 	movi	zero,3120
   30bf4:	00030c0c 	andi	zero,zero,3120
   30bf8:	00030c14 	movui	zero,3120
   30bfc:	00030c14 	movui	zero,3120
   30c00:	00030c04 	movi	zero,3120
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   30c04:	00800044 	movi	r2,1
   30c08:	00000306 	br	30c18 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   30c0c:	0005883a 	mov	r2,zero
   30c10:	00000106 	br	30c18 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   30c14:	0005883a 	mov	r2,zero
  }
}
   30c18:	e037883a 	mov	sp,fp
   30c1c:	df000017 	ldw	fp,0(sp)
   30c20:	dec00104 	addi	sp,sp,4
   30c24:	f800283a 	ret

00030c28 <atexit>:
   30c28:	200b883a 	mov	r5,r4
   30c2c:	000f883a 	mov	r7,zero
   30c30:	000d883a 	mov	r6,zero
   30c34:	0009883a 	mov	r4,zero
   30c38:	0030cf01 	jmpi	30cf0 <__register_exitproc>

00030c3c <exit>:
   30c3c:	defffe04 	addi	sp,sp,-8
   30c40:	000b883a 	mov	r5,zero
   30c44:	dc000015 	stw	r16,0(sp)
   30c48:	dfc00115 	stw	ra,4(sp)
   30c4c:	2021883a 	mov	r16,r4
   30c50:	0030e080 	call	30e08 <__call_exitprocs>
   30c54:	008000f4 	movhi	r2,3
   30c58:	108c5904 	addi	r2,r2,12644
   30c5c:	11000017 	ldw	r4,0(r2)
   30c60:	20800f17 	ldw	r2,60(r4)
   30c64:	10000126 	beq	r2,zero,30c6c <exit+0x30>
   30c68:	103ee83a 	callr	r2
   30c6c:	8009883a 	mov	r4,r16
   30c70:	0030f880 	call	30f88 <_exit>

00030c74 <memcmp>:
   30c74:	01c000c4 	movi	r7,3
   30c78:	3980192e 	bgeu	r7,r6,30ce0 <memcmp+0x6c>
   30c7c:	2144b03a 	or	r2,r4,r5
   30c80:	11c4703a 	and	r2,r2,r7
   30c84:	10000f26 	beq	r2,zero,30cc4 <memcmp+0x50>
   30c88:	20800003 	ldbu	r2,0(r4)
   30c8c:	28c00003 	ldbu	r3,0(r5)
   30c90:	10c0151e 	bne	r2,r3,30ce8 <memcmp+0x74>
   30c94:	31bfff84 	addi	r6,r6,-2
   30c98:	01ffffc4 	movi	r7,-1
   30c9c:	00000406 	br	30cb0 <memcmp+0x3c>
   30ca0:	20800003 	ldbu	r2,0(r4)
   30ca4:	28c00003 	ldbu	r3,0(r5)
   30ca8:	31bfffc4 	addi	r6,r6,-1
   30cac:	10c00e1e 	bne	r2,r3,30ce8 <memcmp+0x74>
   30cb0:	21000044 	addi	r4,r4,1
   30cb4:	29400044 	addi	r5,r5,1
   30cb8:	31fff91e 	bne	r6,r7,30ca0 <_gp+0xffff5b3c>
   30cbc:	0005883a 	mov	r2,zero
   30cc0:	f800283a 	ret
   30cc4:	20c00017 	ldw	r3,0(r4)
   30cc8:	28800017 	ldw	r2,0(r5)
   30ccc:	18bfee1e 	bne	r3,r2,30c88 <_gp+0xffff5b24>
   30cd0:	31bfff04 	addi	r6,r6,-4
   30cd4:	21000104 	addi	r4,r4,4
   30cd8:	29400104 	addi	r5,r5,4
   30cdc:	39bff936 	bltu	r7,r6,30cc4 <_gp+0xffff5b60>
   30ce0:	303fe91e 	bne	r6,zero,30c88 <_gp+0xffff5b24>
   30ce4:	003ff506 	br	30cbc <_gp+0xffff5b58>
   30ce8:	10c5c83a 	sub	r2,r2,r3
   30cec:	f800283a 	ret

00030cf0 <__register_exitproc>:
   30cf0:	defffa04 	addi	sp,sp,-24
   30cf4:	dc000315 	stw	r16,12(sp)
   30cf8:	040000f4 	movhi	r16,3
   30cfc:	840c5904 	addi	r16,r16,12644
   30d00:	80c00017 	ldw	r3,0(r16)
   30d04:	dc400415 	stw	r17,16(sp)
   30d08:	dfc00515 	stw	ra,20(sp)
   30d0c:	18805217 	ldw	r2,328(r3)
   30d10:	2023883a 	mov	r17,r4
   30d14:	10003726 	beq	r2,zero,30df4 <__register_exitproc+0x104>
   30d18:	10c00117 	ldw	r3,4(r2)
   30d1c:	010007c4 	movi	r4,31
   30d20:	20c00e16 	blt	r4,r3,30d5c <__register_exitproc+0x6c>
   30d24:	1a000044 	addi	r8,r3,1
   30d28:	8800221e 	bne	r17,zero,30db4 <__register_exitproc+0xc4>
   30d2c:	18c00084 	addi	r3,r3,2
   30d30:	18c7883a 	add	r3,r3,r3
   30d34:	18c7883a 	add	r3,r3,r3
   30d38:	12000115 	stw	r8,4(r2)
   30d3c:	10c7883a 	add	r3,r2,r3
   30d40:	19400015 	stw	r5,0(r3)
   30d44:	0005883a 	mov	r2,zero
   30d48:	dfc00517 	ldw	ra,20(sp)
   30d4c:	dc400417 	ldw	r17,16(sp)
   30d50:	dc000317 	ldw	r16,12(sp)
   30d54:	dec00604 	addi	sp,sp,24
   30d58:	f800283a 	ret
   30d5c:	00800034 	movhi	r2,0
   30d60:	10800004 	addi	r2,r2,0
   30d64:	10002626 	beq	r2,zero,30e00 <__register_exitproc+0x110>
   30d68:	01006404 	movi	r4,400
   30d6c:	d9400015 	stw	r5,0(sp)
   30d70:	d9800115 	stw	r6,4(sp)
   30d74:	d9c00215 	stw	r7,8(sp)
   30d78:	00000000 	call	0 <__reset-0x20000>
   30d7c:	d9400017 	ldw	r5,0(sp)
   30d80:	d9800117 	ldw	r6,4(sp)
   30d84:	d9c00217 	ldw	r7,8(sp)
   30d88:	10001d26 	beq	r2,zero,30e00 <__register_exitproc+0x110>
   30d8c:	81000017 	ldw	r4,0(r16)
   30d90:	10000115 	stw	zero,4(r2)
   30d94:	02000044 	movi	r8,1
   30d98:	22405217 	ldw	r9,328(r4)
   30d9c:	0007883a 	mov	r3,zero
   30da0:	12400015 	stw	r9,0(r2)
   30da4:	20805215 	stw	r2,328(r4)
   30da8:	10006215 	stw	zero,392(r2)
   30dac:	10006315 	stw	zero,396(r2)
   30db0:	883fde26 	beq	r17,zero,30d2c <_gp+0xffff5bc8>
   30db4:	18c9883a 	add	r4,r3,r3
   30db8:	2109883a 	add	r4,r4,r4
   30dbc:	1109883a 	add	r4,r2,r4
   30dc0:	21802215 	stw	r6,136(r4)
   30dc4:	01800044 	movi	r6,1
   30dc8:	12406217 	ldw	r9,392(r2)
   30dcc:	30cc983a 	sll	r6,r6,r3
   30dd0:	4992b03a 	or	r9,r9,r6
   30dd4:	12406215 	stw	r9,392(r2)
   30dd8:	21c04215 	stw	r7,264(r4)
   30ddc:	01000084 	movi	r4,2
   30de0:	893fd21e 	bne	r17,r4,30d2c <_gp+0xffff5bc8>
   30de4:	11006317 	ldw	r4,396(r2)
   30de8:	218cb03a 	or	r6,r4,r6
   30dec:	11806315 	stw	r6,396(r2)
   30df0:	003fce06 	br	30d2c <_gp+0xffff5bc8>
   30df4:	18805304 	addi	r2,r3,332
   30df8:	18805215 	stw	r2,328(r3)
   30dfc:	003fc606 	br	30d18 <_gp+0xffff5bb4>
   30e00:	00bfffc4 	movi	r2,-1
   30e04:	003fd006 	br	30d48 <_gp+0xffff5be4>

00030e08 <__call_exitprocs>:
   30e08:	defff504 	addi	sp,sp,-44
   30e0c:	df000915 	stw	fp,36(sp)
   30e10:	dd400615 	stw	r21,24(sp)
   30e14:	dc800315 	stw	r18,12(sp)
   30e18:	dfc00a15 	stw	ra,40(sp)
   30e1c:	ddc00815 	stw	r23,32(sp)
   30e20:	dd800715 	stw	r22,28(sp)
   30e24:	dd000515 	stw	r20,20(sp)
   30e28:	dcc00415 	stw	r19,16(sp)
   30e2c:	dc400215 	stw	r17,8(sp)
   30e30:	dc000115 	stw	r16,4(sp)
   30e34:	d9000015 	stw	r4,0(sp)
   30e38:	2839883a 	mov	fp,r5
   30e3c:	04800044 	movi	r18,1
   30e40:	057fffc4 	movi	r21,-1
   30e44:	008000f4 	movhi	r2,3
   30e48:	108c5904 	addi	r2,r2,12644
   30e4c:	12000017 	ldw	r8,0(r2)
   30e50:	45005217 	ldw	r20,328(r8)
   30e54:	44c05204 	addi	r19,r8,328
   30e58:	a0001c26 	beq	r20,zero,30ecc <__call_exitprocs+0xc4>
   30e5c:	a0800117 	ldw	r2,4(r20)
   30e60:	15ffffc4 	addi	r23,r2,-1
   30e64:	b8000d16 	blt	r23,zero,30e9c <__call_exitprocs+0x94>
   30e68:	14000044 	addi	r16,r2,1
   30e6c:	8421883a 	add	r16,r16,r16
   30e70:	8421883a 	add	r16,r16,r16
   30e74:	84402004 	addi	r17,r16,128
   30e78:	a463883a 	add	r17,r20,r17
   30e7c:	a421883a 	add	r16,r20,r16
   30e80:	e0001e26 	beq	fp,zero,30efc <__call_exitprocs+0xf4>
   30e84:	80804017 	ldw	r2,256(r16)
   30e88:	e0801c26 	beq	fp,r2,30efc <__call_exitprocs+0xf4>
   30e8c:	bdffffc4 	addi	r23,r23,-1
   30e90:	843fff04 	addi	r16,r16,-4
   30e94:	8c7fff04 	addi	r17,r17,-4
   30e98:	bd7ff91e 	bne	r23,r21,30e80 <_gp+0xffff5d1c>
   30e9c:	00800034 	movhi	r2,0
   30ea0:	10800004 	addi	r2,r2,0
   30ea4:	10000926 	beq	r2,zero,30ecc <__call_exitprocs+0xc4>
   30ea8:	a0800117 	ldw	r2,4(r20)
   30eac:	1000301e 	bne	r2,zero,30f70 <__call_exitprocs+0x168>
   30eb0:	a0800017 	ldw	r2,0(r20)
   30eb4:	10003226 	beq	r2,zero,30f80 <__call_exitprocs+0x178>
   30eb8:	a009883a 	mov	r4,r20
   30ebc:	98800015 	stw	r2,0(r19)
   30ec0:	00000000 	call	0 <__reset-0x20000>
   30ec4:	9d000017 	ldw	r20,0(r19)
   30ec8:	a03fe41e 	bne	r20,zero,30e5c <_gp+0xffff5cf8>
   30ecc:	dfc00a17 	ldw	ra,40(sp)
   30ed0:	df000917 	ldw	fp,36(sp)
   30ed4:	ddc00817 	ldw	r23,32(sp)
   30ed8:	dd800717 	ldw	r22,28(sp)
   30edc:	dd400617 	ldw	r21,24(sp)
   30ee0:	dd000517 	ldw	r20,20(sp)
   30ee4:	dcc00417 	ldw	r19,16(sp)
   30ee8:	dc800317 	ldw	r18,12(sp)
   30eec:	dc400217 	ldw	r17,8(sp)
   30ef0:	dc000117 	ldw	r16,4(sp)
   30ef4:	dec00b04 	addi	sp,sp,44
   30ef8:	f800283a 	ret
   30efc:	a0800117 	ldw	r2,4(r20)
   30f00:	80c00017 	ldw	r3,0(r16)
   30f04:	10bfffc4 	addi	r2,r2,-1
   30f08:	15c01426 	beq	r2,r23,30f5c <__call_exitprocs+0x154>
   30f0c:	80000015 	stw	zero,0(r16)
   30f10:	183fde26 	beq	r3,zero,30e8c <_gp+0xffff5d28>
   30f14:	95c8983a 	sll	r4,r18,r23
   30f18:	a0806217 	ldw	r2,392(r20)
   30f1c:	a5800117 	ldw	r22,4(r20)
   30f20:	2084703a 	and	r2,r4,r2
   30f24:	10000b26 	beq	r2,zero,30f54 <__call_exitprocs+0x14c>
   30f28:	a0806317 	ldw	r2,396(r20)
   30f2c:	2088703a 	and	r4,r4,r2
   30f30:	20000c1e 	bne	r4,zero,30f64 <__call_exitprocs+0x15c>
   30f34:	89400017 	ldw	r5,0(r17)
   30f38:	d9000017 	ldw	r4,0(sp)
   30f3c:	183ee83a 	callr	r3
   30f40:	a0800117 	ldw	r2,4(r20)
   30f44:	15bfbf1e 	bne	r2,r22,30e44 <_gp+0xffff5ce0>
   30f48:	98800017 	ldw	r2,0(r19)
   30f4c:	153fcf26 	beq	r2,r20,30e8c <_gp+0xffff5d28>
   30f50:	003fbc06 	br	30e44 <_gp+0xffff5ce0>
   30f54:	183ee83a 	callr	r3
   30f58:	003ff906 	br	30f40 <_gp+0xffff5ddc>
   30f5c:	a5c00115 	stw	r23,4(r20)
   30f60:	003feb06 	br	30f10 <_gp+0xffff5dac>
   30f64:	89000017 	ldw	r4,0(r17)
   30f68:	183ee83a 	callr	r3
   30f6c:	003ff406 	br	30f40 <_gp+0xffff5ddc>
   30f70:	a0800017 	ldw	r2,0(r20)
   30f74:	a027883a 	mov	r19,r20
   30f78:	1029883a 	mov	r20,r2
   30f7c:	003fb606 	br	30e58 <_gp+0xffff5cf4>
   30f80:	0005883a 	mov	r2,zero
   30f84:	003ffb06 	br	30f74 <_gp+0xffff5e10>

00030f88 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   30f88:	defffd04 	addi	sp,sp,-12
   30f8c:	df000215 	stw	fp,8(sp)
   30f90:	df000204 	addi	fp,sp,8
   30f94:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   30f98:	0001883a 	nop
   30f9c:	e0bfff17 	ldw	r2,-4(fp)
   30fa0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   30fa4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   30fa8:	10000226 	beq	r2,zero,30fb4 <_exit+0x2c>
    ALT_SIM_FAIL();
   30fac:	002af070 	cmpltui	zero,zero,43969
   30fb0:	00000106 	br	30fb8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   30fb4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   30fb8:	003fff06 	br	30fb8 <_gp+0xffff5e54>
