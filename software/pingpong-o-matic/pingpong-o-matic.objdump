
pingpong-o-matic.elf:     file format elf32-littlenios2
pingpong-o-matic.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00006ee0 memsz 0x00006ee0 flags r-x
    LOAD off    0x00007f00 vaddr 0x00026f00 paddr 0x00028a94 align 2**12
         filesz 0x00001b94 memsz 0x00001b94 flags rw-
    LOAD off    0x0000a628 vaddr 0x0002a628 paddr 0x0002a628 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006a00  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002d0  00026c30  00026c30  00007c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b94  00026f00  00028a94  00007f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0002a628  0002a628  0000a628  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  0002a77c  0002a77c  00009a94  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009a94  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000aa8  00000000  00000000  00009ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000172c9  00000000  00000000  0000a560  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000063ee  00000000  00000000  00021829  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006fb2  00000000  00000000  00027c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000017c4  00000000  00000000  0002ebcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002bf5  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  00032f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00037a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000698  00000000  00000000  00037aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003a946  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0003a949  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003a953  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003a954  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003a955  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003a959  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003a95d  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003a961  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003a96a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003a973  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  0003a97c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000031  00000000  00000000  0003a988  2**0
                  CONTENTS, READONLY
 29 .jdi          000043fe  00000000  00000000  0003a9b9  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000abc46  00000000  00000000  0003edb7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00026c30 l    d  .rodata	00000000 .rodata
00026f00 l    d  .rwdata	00000000 .rwdata
0002a628 l    d  .bss	00000000 .bss
0002a77c l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pingpong-o-matic_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00020960 l     F .text	00000008 __fp_unlock
00020974 l     F .text	0000019c __sinit.part.1
00020b10 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00026f00 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0002344c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00023560 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002358c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00023680 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00023768 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00023854 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00023a30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00028a7c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00023cd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023e10 l     F .text	00000034 alt_dev_reg
000278d4 l     O .rwdata	00001060 jtag_uart
00028934 l     O .rwdata	00000120 lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00024104 l     F .text	0000020c altera_avalon_jtag_uart_irq
00024310 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00028a80 l     O .rwdata	00000004 colstart
00024948 l     F .text	000000b8 lcd_write_command
00024a00 l     F .text	000000d8 lcd_write_data
00024ad8 l     F .text	000000e8 lcd_clear_screen
00024bc0 l     F .text	00000228 lcd_repaint_screen
00024de8 l     F .text	000000e8 lcd_scroll_up
00024ed0 l     F .text	000002c4 lcd_handle_escape
000256b4 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00025b98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00025ff8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00026158 l     F .text	0000003c alt_get_errno
00026194 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00026d80 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0002a650 g     O .bss	00000004 alt_instruction_exception_handler
000233d0 g     F .text	00000054 _isatty_r
0002396c g     F .text	0000007c alt_main
000207f4 g     F .text	000000c0 _puts_r
0002a67c g     O .bss	00000100 alt_irq
000230f8 g     F .text	00000060 _lseek_r
00028a94 g       *ABS*	00000000 __flash_rwdata_start
0002a77c g       *ABS*	00000000 __alt_heap_start
000226ac g     F .text	0000005c __sseek
00020cc0 g     F .text	00000010 __sinit
00020b18 g     F .text	00000078 __sfmoreglue
00023a0c g     F .text	00000024 __malloc_unlock
00021d98 g     F .text	0000015c memmove
00020ca8 g     F .text	00000018 _cleanup
00026580 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00023374 g     F .text	0000005c _fstat_r
0002a634 g     O .bss	00000004 errno
00022628 g     F .text	00000008 __seofread
0002a63c g     O .bss	00000004 alt_argv
00030a54 g       *ABS*	00000000 _gp
00023ca4 g     F .text	00000030 usleep
00027754 g     O .rwdata	00000180 alt_fd_list
000265a4 g     F .text	00000090 alt_find_dev
00021c50 g     F .text	00000148 memcpy
00020968 g     F .text	0000000c _cleanup_r
000260dc g     F .text	0000007c alt_io_redirect
00026c30 g       *ABS*	00000000 __DTOR_END__
000208b4 g     F .text	00000014 puts
00026800 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00024508 g     F .text	0000021c altera_avalon_jtag_uart_read
00020738 g     F .text	00000064 .hidden __udivsi3
000236bc g     F .text	000000ac isatty
0002a630 g     O .bss	00000004 __malloc_top_pad
00020d10 g     F .text	000004c8 __sfvwrite_r
00022580 g     F .text	00000054 _sbrk_r
00023314 g     F .text	00000060 _read_r
00028a74 g     O .rwdata	00000004 alt_max_fd
00022918 g     F .text	000000f0 _fclose_r
00022c94 g     F .text	00000030 fflush
0002a62c g     O .bss	00000004 __malloc_max_sbrked_mem
00023890 g     F .text	000000dc lseek
00028a54 g     O .rwdata	00000004 _global_impure_ptr
0002201c g     F .text	00000564 _realloc_r
0002a77c g       *ABS*	00000000 __bss_end
00025f08 g     F .text	000000f0 alt_iic_isr_register
00026478 g     F .text	00000108 alt_tick
00020ce0 g     F .text	00000018 __fp_lock_all
00025ebc g     F .text	0000004c alt_ic_irq_enabled
000263dc g     F .text	0000009c alt_alarm_stop
0002a644 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
0002772c g     O .rwdata	00000028 alt_dev_null
00025b78 g     F .text	00000020 alt_dcache_flush_all
00028a94 g       *ABS*	00000000 __ram_rwdata_end
00028a6c g     O .rwdata	00000008 alt_dev_list
00023d10 g     F .text	00000100 write
00026f00 g       *ABS*	00000000 __ram_rodata_end
000235c8 g     F .text	000000b8 fstat
0002079c g     F .text	00000058 .hidden __umodsi3
0002a77c g       *ABS*	00000000 end
00025194 g     F .text	00000520 altera_avalon_lcd_16207_write
00024044 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00026c30 g       *ABS*	00000000 __CTOR_LIST__
000386a0 g       *ABS*	00000000 __alt_stack_pointer
00024724 g     F .text	00000224 altera_avalon_jtag_uart_write
00020cd0 g     F .text	00000004 __sfp_lock_acquire
00021b6c g     F .text	000000e4 memchr
00022de8 g     F .text	00000310 _free_r
00026a7c g     F .text	00000180 __call_exitprocs
00028a5c g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
0002a648 g     O .bss	00000004 _alt_tick_rate
0002a64c g     O .bss	00000004 _alt_nticks
00023a6c g     F .text	00000104 read
00023e7c g     F .text	00000064 alt_sys_init
00026964 g     F .text	00000118 __register_exitproc
000243b0 g     F .text	00000068 altera_avalon_jtag_uart_close
00023424 g     F .text	00000028 .hidden __mulsi3
00026f00 g       *ABS*	00000000 __ram_rwdata_start
00026c30 g       *ABS*	00000000 __ram_rodata_start
0002a654 g     O .bss	00000028 __malloc_current_mallinfo
00023ee0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002673c g     F .text	000000c4 alt_get_fd
00025a20 g     F .text	00000158 alt_busy_sleep
000228c4 g     F .text	00000054 _close_r
000268e8 g     F .text	0000007c memcmp
00023fa0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002a77c g       *ABS*	00000000 __alt_stack_base
00023ff0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022770 g     F .text	00000154 __swsetup_r
00020b90 g     F .text	00000118 __sfp
00027324 g     O .rwdata	00000408 __malloc_av_
00020cdc g     F .text	00000004 __sinit_lock_release
000225d4 g     F .text	00000054 __sread
00026634 g     F .text	00000108 alt_find_file
00025bd4 g     F .text	000000a4 alt_dev_llist_insert
000239e8 g     F .text	00000024 __malloc_lock
00023bf4 g     F .text	000000b0 sbrk
00022c38 g     F .text	0000005c _fflush_r
0002a628 g       *ABS*	00000000 __bss_start
00021ef4 g     F .text	00000128 memset
0002026c g     F .text	00000108 lcd_init
00020540 g     F .text	00000100 main
0002a640 g     O .bss	00000004 alt_envp
0002a628 g     O .bss	00000004 __malloc_max_total_mem
00023f40 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00025760 g     F .text	00000134 altera_avalon_lcd_16207_init
00022708 g     F .text	00000008 __sclose
000386a0 g       *ABS*	00000000 __alt_heap_limit
00022a08 g     F .text	00000014 fclose
00021360 g     F .text	0000080c _malloc_r
00028a78 g     O .rwdata	00000004 alt_errno
000211d8 g     F .text	000000c4 _fwalk
00020640 g     F .text	00000084 .hidden __divsi3
00022cc4 g     F .text	00000124 _malloc_trim_r
00026c30 g       *ABS*	00000000 __CTOR_END__
00026c30 g       *ABS*	00000000 __flash_rodata_start
00020374 g     F .text	000001cc test_lcd
00026c30 g       *ABS*	00000000 __DTOR_LIST__
00023e44 g     F .text	00000038 alt_irq_init
00023b70 g     F .text	00000084 alt_release_fd
0002689c g     F .text	00000014 atexit
00022710 g     F .text	00000060 _write_r
00028a58 g     O .rwdata	00000004 _impure_ptr
0002a638 g     O .bss	00000004 alt_argc
00022a1c g     F .text	0000021c __sflush_r
00025cd8 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00020cf8 g     F .text	00000018 __fp_unlock_all
00025894 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00028a64 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00025d58 g     F .text	00000050 alt_ic_isr_register
00028a94 g       *ABS*	00000000 _edata
0002a77c g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
00024418 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00025e30 g     F .text	0000008c alt_ic_irq_disable
00022630 g     F .text	0000007c __swrite
00028a60 g     O .rwdata	00000004 __malloc_trim_threshold
000268b0 g     F .text	00000038 exit
0002129c g     F .text	000000c4 _fwalk_reent
000206c4 g     F .text	00000074 .hidden __modsi3
00028a90 g     O .rwdata	00000004 __ctype_ptr__
000386a0 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020cd4 g     F .text	00000004 __sfp_lock_release
00026c7f g     O .rodata	00000101 _ctype_
00026bfc g     F .text	00000034 _exit
000258f4 g     F .text	0000012c alt_alarm_start
00023158 g     F .text	000001bc __smakebuf_r
000208c8 g     F .text	00000098 strlen
00026280 g     F .text	0000015c open
00025d38 g     F .text	00000020 alt_icache_flush_all
00028a84 g     O .rwdata	00000004 alt_priority_mask
00025da8 g     F .text	00000088 alt_ic_irq_enable
00028a88 g     O .rwdata	00000008 alt_alarm_list
00025c78 g     F .text	00000060 _do_ctors
00023488 g     F .text	000000d8 close
000237d0 g     F .text	00000084 alt_load
00020cd8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10a99f04 	addi	r2,r2,-22916
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10a99f04 	addi	r2,r2,-22916
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe7a8c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe7a80>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a6ff17 	ldw	r2,-25604(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a6ff17 	ldw	r2,-25604(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
   20238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2023c:	d6829514 	ori	gp,gp,2644
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20244:	10a98a14 	ori	r2,r2,42536

    movhi r3, %hi(__bss_end)
   20248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2024c:	18e9df14 	ori	r3,r3,42876

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_data_end+0xfffe7bb4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	00237d00 	call	237d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	002396c0 	call	2396c <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_data_end+0xfffe7bc8>

0002026c <lcd_init>:
#define LCD_WR_COMMAND_REG 0
#define LCD_RD_STATUS_REG 1
#define LCD_WR_DATA_REG 2
#define LCD_RD_DATA_REG 3

void lcd_init(void) {
   2026c:	defffe04 	addi	sp,sp,-8
   20270:	dfc00115 	stw	ra,4(sp)
   20274:	df000015 	stw	fp,0(sp)
   20278:	d839883a 	mov	fp,sp
	usleep(15000); /* Wait for more than 15 ms before init */
   2027c:	010ea604 	movi	r4,15000
   20280:	0023ca40 	call	23ca4 <usleep>
	/* Set function code four times -- 8-bit, 2 line, 5x7 mode */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   20284:	00c00e04 	movi	r3,56
   20288:	00800134 	movhi	r2,4
   2028c:	10847404 	addi	r2,r2,4560
   20290:	10c00035 	stwio	r3,0(r2)
	usleep(4100); /* Wait for more than 4.1 ms */
   20294:	01040104 	movi	r4,4100
   20298:	0023ca40 	call	23ca4 <usleep>
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   2029c:	00c00e04 	movi	r3,56
   202a0:	00800134 	movhi	r2,4
   202a4:	10847404 	addi	r2,r2,4560
   202a8:	10c00035 	stwio	r3,0(r2)
	usleep(100); /* Wait for more than 100 us */
   202ac:	01001904 	movi	r4,100
   202b0:	0023ca40 	call	23ca4 <usleep>
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   202b4:	00c00e04 	movi	r3,56
   202b8:	00800134 	movhi	r2,4
   202bc:	10847404 	addi	r2,r2,4560
   202c0:	10c00035 	stwio	r3,0(r2)
	usleep(5000); /* Wait for more than 100 us */
   202c4:	0104e204 	movi	r4,5000
   202c8:	0023ca40 	call	23ca4 <usleep>
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   202cc:	00c00e04 	movi	r3,56
   202d0:	00800134 	movhi	r2,4
   202d4:	10847404 	addi	r2,r2,4560
   202d8:	10c00035 	stwio	r3,0(r2)
	usleep(100); /* Wait for more than 100 us */
   202dc:	01001904 	movi	r4,100
   202e0:	0023ca40 	call	23ca4 <usleep>

	/* Set Display to OFF*/
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x08);
   202e4:	00c00204 	movi	r3,8
   202e8:	00800134 	movhi	r2,4
   202ec:	10847404 	addi	r2,r2,4560
   202f0:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   202f4:	01001904 	movi	r4,100
   202f8:	0023ca40 	call	23ca4 <usleep>

	/* Set Display to ON */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x0C);
   202fc:	00c00304 	movi	r3,12
   20300:	00800134 	movhi	r2,4
   20304:	10847404 	addi	r2,r2,4560
   20308:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   2030c:	01001904 	movi	r4,100
   20310:	0023ca40 	call	23ca4 <usleep>

	/* Set Entry Mode -- Cursor increment, display doesn't shift */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x06);
   20314:	00c00184 	movi	r3,6
   20318:	00800134 	movhi	r2,4
   2031c:	10847404 	addi	r2,r2,4560
   20320:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   20324:	01001904 	movi	r4,100
   20328:	0023ca40 	call	23ca4 <usleep>

	/* Set the Cursor to the home position */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x02);
   2032c:	00c00084 	movi	r3,2
   20330:	00800134 	movhi	r2,4
   20334:	10847404 	addi	r2,r2,4560
   20338:	10c00035 	stwio	r3,0(r2)
	usleep(2000);
   2033c:	0101f404 	movi	r4,2000
   20340:	0023ca40 	call	23ca4 <usleep>

	/* Display clear */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x01);
   20344:	00c00044 	movi	r3,1
   20348:	00800134 	movhi	r2,4
   2034c:	10847404 	addi	r2,r2,4560
   20350:	10c00035 	stwio	r3,0(r2)
	usleep(2000);
   20354:	0101f404 	movi	r4,2000
   20358:	0023ca40 	call	23ca4 <usleep>
}
   2035c:	0001883a 	nop
   20360:	e037883a 	mov	sp,fp
   20364:	dfc00117 	ldw	ra,4(sp)
   20368:	df000017 	ldw	fp,0(sp)
   2036c:	dec00204 	addi	sp,sp,8
   20370:	f800283a 	ret

00020374 <test_lcd>:

alt_u32 test_lcd(void) {
   20374:	defff504 	addi	sp,sp,-44
   20378:	dfc00a15 	stw	ra,40(sp)
   2037c:	df000915 	stw	fp,36(sp)
   20380:	df000904 	addi	fp,sp,36
	int i;
	char message[17] = "Hello World...  ";
   20384:	009b1b34 	movhi	r2,27756
   20388:	10995204 	addi	r2,r2,25928
   2038c:	e0bff815 	stw	r2,-32(fp)
   20390:	009bd5f4 	movhi	r2,28503
   20394:	10881bc4 	addi	r2,r2,8303
   20398:	e0bff915 	stw	r2,-28(fp)
   2039c:	008b9934 	movhi	r2,11876
   203a0:	109b1c84 	addi	r2,r2,27762
   203a4:	e0bffa15 	stw	r2,-24(fp)
   203a8:	00880834 	movhi	r2,8224
   203ac:	108b8b84 	addi	r2,r2,11822
   203b0:	e0bffb15 	stw	r2,-20(fp)
   203b4:	e03ffc05 	stb	zero,-16(fp)
	char done[15] = "Done! ";
   203b8:	00801104 	movi	r2,68
   203bc:	e0bffc45 	stb	r2,-15(fp)
   203c0:	00801bc4 	movi	r2,111
   203c4:	e0bffc85 	stb	r2,-14(fp)
   203c8:	00801b84 	movi	r2,110
   203cc:	e0bffcc5 	stb	r2,-13(fp)
   203d0:	00801944 	movi	r2,101
   203d4:	e0bffd05 	stb	r2,-12(fp)
   203d8:	00800844 	movi	r2,33
   203dc:	e0bffd45 	stb	r2,-11(fp)
   203e0:	00800804 	movi	r2,32
   203e4:	e0bffd85 	stb	r2,-10(fp)
   203e8:	e03ffdc5 	stb	zero,-9(fp)
   203ec:	e03ffe05 	stb	zero,-8(fp)
   203f0:	e03ffe45 	stb	zero,-7(fp)
   203f4:	e03ffe85 	stb	zero,-6(fp)
   203f8:	e03ffec5 	stb	zero,-5(fp)
   203fc:	e03fff05 	stb	zero,-4(fp)
   20400:	e03fff45 	stb	zero,-3(fp)
   20404:	e03fff85 	stb	zero,-2(fp)
   20408:	e03fffc5 	stb	zero,-1(fp)

	/* Write a simple message on the first line. */
	for (i = 0; i < 17; i++) {
   2040c:	e03ff715 	stw	zero,-36(fp)
   20410:	00000f06 	br	20450 <test_lcd+0xdc>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, message[i]);
   20414:	e0fff804 	addi	r3,fp,-32
   20418:	e0bff717 	ldw	r2,-36(fp)
   2041c:	1885883a 	add	r2,r3,r2
   20420:	10800003 	ldbu	r2,0(r2)
   20424:	10c03fcc 	andi	r3,r2,255
   20428:	18c0201c 	xori	r3,r3,128
   2042c:	18ffe004 	addi	r3,r3,-128
   20430:	00800134 	movhi	r2,4
   20434:	10847604 	addi	r2,r2,4568
   20438:	10c00035 	stwio	r3,0(r2)
		usleep(100);
   2043c:	01001904 	movi	r4,100
   20440:	0023ca40 	call	23ca4 <usleep>
	int i;
	char message[17] = "Hello World...  ";
	char done[15] = "Done! ";

	/* Write a simple message on the first line. */
	for (i = 0; i < 17; i++) {
   20444:	e0bff717 	ldw	r2,-36(fp)
   20448:	10800044 	addi	r2,r2,1
   2044c:	e0bff715 	stw	r2,-36(fp)
   20450:	e0bff717 	ldw	r2,-36(fp)
   20454:	10800450 	cmplti	r2,r2,17
   20458:	103fee1e 	bne	r2,zero,20414 <__alt_data_end+0xfffe7d74>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, message[i]);
		usleep(100);
	}
	/* Count along the bottom row */
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0xC0);
   2045c:	00c03004 	movi	r3,192
   20460:	00800134 	movhi	r2,4
   20464:	10847404 	addi	r2,r2,4560
   20468:	10c00035 	stwio	r3,0(r2)
	usleep(1000);
   2046c:	0100fa04 	movi	r4,1000
   20470:	0023ca40 	call	23ca4 <usleep>

	/* Display Count */
	for (i = 0; i < 10; i++) {
   20474:	e03ff715 	stw	zero,-36(fp)
   20478:	00000e06 	br	204b4 <test_lcd+0x140>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, (char )(i + 0x30));
   2047c:	e0bff717 	ldw	r2,-36(fp)
   20480:	10800c04 	addi	r2,r2,48
   20484:	10c03fcc 	andi	r3,r2,255
   20488:	18c0201c 	xori	r3,r3,128
   2048c:	18ffe004 	addi	r3,r3,-128
   20490:	00800134 	movhi	r2,4
   20494:	10847604 	addi	r2,r2,4568
   20498:	10c00035 	stwio	r3,0(r2)
		usleep(100000); /* Wait 0.5 sec */
   2049c:	010000b4 	movhi	r4,2
   204a0:	2121a804 	addi	r4,r4,-31072
   204a4:	0023ca40 	call	23ca4 <usleep>
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0xC0);
	usleep(1000);

	/* Display Count */
	for (i = 0; i < 10; i++) {
   204a8:	e0bff717 	ldw	r2,-36(fp)
   204ac:	10800044 	addi	r2,r2,1
   204b0:	e0bff715 	stw	r2,-36(fp)
   204b4:	e0bff717 	ldw	r2,-36(fp)
   204b8:	10800290 	cmplti	r2,r2,10
   204bc:	103fef1e 	bne	r2,zero,2047c <__alt_data_end+0xfffe7ddc>
		usleep(100000); /* Wait 0.5 sec */
	}

	/* Write "Done!" message on first line. */
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x80);
   204c0:	00c02004 	movi	r3,128
   204c4:	00800134 	movhi	r2,4
   204c8:	10847404 	addi	r2,r2,4560
   204cc:	10c00035 	stwio	r3,0(r2)
	usleep(1000);
   204d0:	0100fa04 	movi	r4,1000
   204d4:	0023ca40 	call	23ca4 <usleep>

	/* Write data */
	for (i = 0; i < 14; i++) {
   204d8:	e03ff715 	stw	zero,-36(fp)
   204dc:	00000f06 	br	2051c <test_lcd+0x1a8>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, done[i]);
   204e0:	e0fffc44 	addi	r3,fp,-15
   204e4:	e0bff717 	ldw	r2,-36(fp)
   204e8:	1885883a 	add	r2,r3,r2
   204ec:	10800003 	ldbu	r2,0(r2)
   204f0:	10c03fcc 	andi	r3,r2,255
   204f4:	18c0201c 	xori	r3,r3,128
   204f8:	18ffe004 	addi	r3,r3,-128
   204fc:	00800134 	movhi	r2,4
   20500:	10847604 	addi	r2,r2,4568
   20504:	10c00035 	stwio	r3,0(r2)
		usleep(100);
   20508:	01001904 	movi	r4,100
   2050c:	0023ca40 	call	23ca4 <usleep>
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x80);
	usleep(1000);

	/* Write data */
	for (i = 0; i < 14; i++) {
   20510:	e0bff717 	ldw	r2,-36(fp)
   20514:	10800044 	addi	r2,r2,1
   20518:	e0bff715 	stw	r2,-36(fp)
   2051c:	e0bff717 	ldw	r2,-36(fp)
   20520:	10800390 	cmplti	r2,r2,14
   20524:	103fee1e 	bne	r2,zero,204e0 <__alt_data_end+0xfffe7e40>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, done[i]);
		usleep(100);
	}
	return (0);
   20528:	0005883a 	mov	r2,zero
}
   2052c:	e037883a 	mov	sp,fp
   20530:	dfc00117 	ldw	ra,4(sp)
   20534:	df000017 	ldw	fp,0(sp)
   20538:	dec00204 	addi	sp,sp,8
   2053c:	f800283a 	ret

00020540 <main>:

int main() {
   20540:	defffa04 	addi	sp,sp,-24
   20544:	dfc00515 	stw	ra,20(sp)
   20548:	df000415 	stw	fp,16(sp)
   2054c:	df000404 	addi	fp,sp,16
	lcd_init();
   20550:	002026c0 	call	2026c <lcd_init>
	test_lcd();
   20554:	00203740 	call	20374 <test_lcd>

	printf("Hello DE2-115!\n");
   20558:	010000b4 	movhi	r4,2
   2055c:	211b0c04 	addi	r4,r4,27696
   20560:	00208b40 	call	208b4 <puts>
	int count = 0;
   20564:	e03ffc15 	stw	zero,-16(fp)
	int count2 = 0;
   20568:	e03ffd15 	stw	zero,-12(fp)
	int count3 = 0;
   2056c:	e03ffe15 	stw	zero,-8(fp)

	int delay;
	while (1) {
		IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 7 << count);
   20570:	00c001c4 	movi	r3,7
   20574:	e0bffc17 	ldw	r2,-16(fp)
   20578:	1886983a 	sll	r3,r3,r2
   2057c:	00800134 	movhi	r2,4
   20580:	10847804 	addi	r2,r2,4576
   20584:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE, 0b111111111);
   20588:	00c07fc4 	movi	r3,511
   2058c:	00800134 	movhi	r2,4
   20590:	10843804 	addi	r2,r2,4320
   20594:	10c00035 	stwio	r3,0(r2)


		delay = 0;
   20598:	e03fff15 	stw	zero,-4(fp)
		while (delay < 100000) {
   2059c:	00000306 	br	205ac <main+0x6c>
			delay++;
   205a0:	e0bfff17 	ldw	r2,-4(fp)
   205a4:	10800044 	addi	r2,r2,1
   205a8:	e0bfff15 	stw	r2,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 7 << count);
		IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE, 0b111111111);


		delay = 0;
		while (delay < 100000) {
   205ac:	e0ffff17 	ldw	r3,-4(fp)
   205b0:	008000b4 	movhi	r2,2
   205b4:	10a1a7c4 	addi	r2,r2,-31073
   205b8:	10fff90e 	bge	r2,r3,205a0 <__alt_data_end+0xfffe7f00>
			delay++;
		}
		count = (count + 1) % 17;
   205bc:	e0bffc17 	ldw	r2,-16(fp)
   205c0:	10800044 	addi	r2,r2,1
   205c4:	01400444 	movi	r5,17
   205c8:	1009883a 	mov	r4,r2
   205cc:	00206c40 	call	206c4 <__modsi3>
   205d0:	e0bffc15 	stw	r2,-16(fp)

		count2 = (count2 + 1) % 10000;
   205d4:	e0bffd17 	ldw	r2,-12(fp)
   205d8:	10800044 	addi	r2,r2,1
   205dc:	0149c404 	movi	r5,10000
   205e0:	1009883a 	mov	r4,r2
   205e4:	00206c40 	call	206c4 <__modsi3>
   205e8:	e0bffd15 	stw	r2,-12(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_2_BASE, count2);
   205ec:	00800134 	movhi	r2,4
   205f0:	10847004 	addi	r2,r2,4544
   205f4:	e0fffd17 	ldw	r3,-12(fp)
   205f8:	10c00035 	stwio	r3,0(r2)

		count3 = (count3 + 1) % 100;
   205fc:	e0bffe17 	ldw	r2,-8(fp)
   20600:	10800044 	addi	r2,r2,1
   20604:	01401904 	movi	r5,100
   20608:	1009883a 	mov	r4,r2
   2060c:	00206c40 	call	206c4 <__modsi3>
   20610:	e0bffe15 	stw	r2,-8(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_0_BASE, count3);
   20614:	00800134 	movhi	r2,4
   20618:	10846804 	addi	r2,r2,4512
   2061c:	e0fffe17 	ldw	r3,-8(fp)
   20620:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(SEVSEG_1_BASE, 99 - count3);
   20624:	00c018c4 	movi	r3,99
   20628:	e0bffe17 	ldw	r2,-8(fp)
   2062c:	1887c83a 	sub	r3,r3,r2
   20630:	00800134 	movhi	r2,4
   20634:	10846c04 	addi	r2,r2,4528
   20638:	10c00035 	stwio	r3,0(r2)
	}
   2063c:	003fcc06 	br	20570 <__alt_data_end+0xfffe7ed0>

00020640 <__divsi3>:
   20640:	20001b16 	blt	r4,zero,206b0 <__divsi3+0x70>
   20644:	000f883a 	mov	r7,zero
   20648:	28001616 	blt	r5,zero,206a4 <__divsi3+0x64>
   2064c:	200d883a 	mov	r6,r4
   20650:	29001a2e 	bgeu	r5,r4,206bc <__divsi3+0x7c>
   20654:	00800804 	movi	r2,32
   20658:	00c00044 	movi	r3,1
   2065c:	00000106 	br	20664 <__divsi3+0x24>
   20660:	10000d26 	beq	r2,zero,20698 <__divsi3+0x58>
   20664:	294b883a 	add	r5,r5,r5
   20668:	10bfffc4 	addi	r2,r2,-1
   2066c:	18c7883a 	add	r3,r3,r3
   20670:	293ffb36 	bltu	r5,r4,20660 <__alt_data_end+0xfffe7fc0>
   20674:	0005883a 	mov	r2,zero
   20678:	18000726 	beq	r3,zero,20698 <__divsi3+0x58>
   2067c:	0005883a 	mov	r2,zero
   20680:	31400236 	bltu	r6,r5,2068c <__divsi3+0x4c>
   20684:	314dc83a 	sub	r6,r6,r5
   20688:	10c4b03a 	or	r2,r2,r3
   2068c:	1806d07a 	srli	r3,r3,1
   20690:	280ad07a 	srli	r5,r5,1
   20694:	183ffa1e 	bne	r3,zero,20680 <__alt_data_end+0xfffe7fe0>
   20698:	38000126 	beq	r7,zero,206a0 <__divsi3+0x60>
   2069c:	0085c83a 	sub	r2,zero,r2
   206a0:	f800283a 	ret
   206a4:	014bc83a 	sub	r5,zero,r5
   206a8:	39c0005c 	xori	r7,r7,1
   206ac:	003fe706 	br	2064c <__alt_data_end+0xfffe7fac>
   206b0:	0109c83a 	sub	r4,zero,r4
   206b4:	01c00044 	movi	r7,1
   206b8:	003fe306 	br	20648 <__alt_data_end+0xfffe7fa8>
   206bc:	00c00044 	movi	r3,1
   206c0:	003fee06 	br	2067c <__alt_data_end+0xfffe7fdc>

000206c4 <__modsi3>:
   206c4:	20001716 	blt	r4,zero,20724 <__modsi3+0x60>
   206c8:	000f883a 	mov	r7,zero
   206cc:	2005883a 	mov	r2,r4
   206d0:	28001216 	blt	r5,zero,2071c <__modsi3+0x58>
   206d4:	2900162e 	bgeu	r5,r4,20730 <__modsi3+0x6c>
   206d8:	01800804 	movi	r6,32
   206dc:	00c00044 	movi	r3,1
   206e0:	00000106 	br	206e8 <__modsi3+0x24>
   206e4:	30000a26 	beq	r6,zero,20710 <__modsi3+0x4c>
   206e8:	294b883a 	add	r5,r5,r5
   206ec:	31bfffc4 	addi	r6,r6,-1
   206f0:	18c7883a 	add	r3,r3,r3
   206f4:	293ffb36 	bltu	r5,r4,206e4 <__alt_data_end+0xfffe8044>
   206f8:	18000526 	beq	r3,zero,20710 <__modsi3+0x4c>
   206fc:	1806d07a 	srli	r3,r3,1
   20700:	11400136 	bltu	r2,r5,20708 <__modsi3+0x44>
   20704:	1145c83a 	sub	r2,r2,r5
   20708:	280ad07a 	srli	r5,r5,1
   2070c:	183ffb1e 	bne	r3,zero,206fc <__alt_data_end+0xfffe805c>
   20710:	38000126 	beq	r7,zero,20718 <__modsi3+0x54>
   20714:	0085c83a 	sub	r2,zero,r2
   20718:	f800283a 	ret
   2071c:	014bc83a 	sub	r5,zero,r5
   20720:	003fec06 	br	206d4 <__alt_data_end+0xfffe8034>
   20724:	0109c83a 	sub	r4,zero,r4
   20728:	01c00044 	movi	r7,1
   2072c:	003fe706 	br	206cc <__alt_data_end+0xfffe802c>
   20730:	00c00044 	movi	r3,1
   20734:	003ff106 	br	206fc <__alt_data_end+0xfffe805c>

00020738 <__udivsi3>:
   20738:	200d883a 	mov	r6,r4
   2073c:	2900152e 	bgeu	r5,r4,20794 <__udivsi3+0x5c>
   20740:	28001416 	blt	r5,zero,20794 <__udivsi3+0x5c>
   20744:	00800804 	movi	r2,32
   20748:	00c00044 	movi	r3,1
   2074c:	00000206 	br	20758 <__udivsi3+0x20>
   20750:	10000e26 	beq	r2,zero,2078c <__udivsi3+0x54>
   20754:	28000516 	blt	r5,zero,2076c <__udivsi3+0x34>
   20758:	294b883a 	add	r5,r5,r5
   2075c:	10bfffc4 	addi	r2,r2,-1
   20760:	18c7883a 	add	r3,r3,r3
   20764:	293ffa36 	bltu	r5,r4,20750 <__alt_data_end+0xfffe80b0>
   20768:	18000826 	beq	r3,zero,2078c <__udivsi3+0x54>
   2076c:	0005883a 	mov	r2,zero
   20770:	31400236 	bltu	r6,r5,2077c <__udivsi3+0x44>
   20774:	314dc83a 	sub	r6,r6,r5
   20778:	10c4b03a 	or	r2,r2,r3
   2077c:	1806d07a 	srli	r3,r3,1
   20780:	280ad07a 	srli	r5,r5,1
   20784:	183ffa1e 	bne	r3,zero,20770 <__alt_data_end+0xfffe80d0>
   20788:	f800283a 	ret
   2078c:	0005883a 	mov	r2,zero
   20790:	f800283a 	ret
   20794:	00c00044 	movi	r3,1
   20798:	003ff406 	br	2076c <__alt_data_end+0xfffe80cc>

0002079c <__umodsi3>:
   2079c:	2005883a 	mov	r2,r4
   207a0:	2900122e 	bgeu	r5,r4,207ec <__umodsi3+0x50>
   207a4:	28001116 	blt	r5,zero,207ec <__umodsi3+0x50>
   207a8:	01800804 	movi	r6,32
   207ac:	00c00044 	movi	r3,1
   207b0:	00000206 	br	207bc <__umodsi3+0x20>
   207b4:	30000c26 	beq	r6,zero,207e8 <__umodsi3+0x4c>
   207b8:	28000516 	blt	r5,zero,207d0 <__umodsi3+0x34>
   207bc:	294b883a 	add	r5,r5,r5
   207c0:	31bfffc4 	addi	r6,r6,-1
   207c4:	18c7883a 	add	r3,r3,r3
   207c8:	293ffa36 	bltu	r5,r4,207b4 <__alt_data_end+0xfffe8114>
   207cc:	18000626 	beq	r3,zero,207e8 <__umodsi3+0x4c>
   207d0:	1806d07a 	srli	r3,r3,1
   207d4:	11400136 	bltu	r2,r5,207dc <__umodsi3+0x40>
   207d8:	1145c83a 	sub	r2,r2,r5
   207dc:	280ad07a 	srli	r5,r5,1
   207e0:	183ffb1e 	bne	r3,zero,207d0 <__alt_data_end+0xfffe8130>
   207e4:	f800283a 	ret
   207e8:	f800283a 	ret
   207ec:	00c00044 	movi	r3,1
   207f0:	003ff706 	br	207d0 <__alt_data_end+0xfffe8130>

000207f4 <_puts_r>:
   207f4:	defff604 	addi	sp,sp,-40
   207f8:	dc000715 	stw	r16,28(sp)
   207fc:	2021883a 	mov	r16,r4
   20800:	2809883a 	mov	r4,r5
   20804:	dc400815 	stw	r17,32(sp)
   20808:	dfc00915 	stw	ra,36(sp)
   2080c:	2823883a 	mov	r17,r5
   20810:	00208c80 	call	208c8 <strlen>
   20814:	10c00044 	addi	r3,r2,1
   20818:	d8800115 	stw	r2,4(sp)
   2081c:	008000b4 	movhi	r2,2
   20820:	109b1004 	addi	r2,r2,27712
   20824:	d8800215 	stw	r2,8(sp)
   20828:	00800044 	movi	r2,1
   2082c:	d8800315 	stw	r2,12(sp)
   20830:	00800084 	movi	r2,2
   20834:	dc400015 	stw	r17,0(sp)
   20838:	d8c00615 	stw	r3,24(sp)
   2083c:	dec00415 	stw	sp,16(sp)
   20840:	d8800515 	stw	r2,20(sp)
   20844:	80000226 	beq	r16,zero,20850 <_puts_r+0x5c>
   20848:	80800e17 	ldw	r2,56(r16)
   2084c:	10001426 	beq	r2,zero,208a0 <_puts_r+0xac>
   20850:	81400217 	ldw	r5,8(r16)
   20854:	2880030b 	ldhu	r2,12(r5)
   20858:	10c8000c 	andi	r3,r2,8192
   2085c:	1800061e 	bne	r3,zero,20878 <_puts_r+0x84>
   20860:	29001917 	ldw	r4,100(r5)
   20864:	00f7ffc4 	movi	r3,-8193
   20868:	10880014 	ori	r2,r2,8192
   2086c:	20c6703a 	and	r3,r4,r3
   20870:	2880030d 	sth	r2,12(r5)
   20874:	28c01915 	stw	r3,100(r5)
   20878:	d9800404 	addi	r6,sp,16
   2087c:	8009883a 	mov	r4,r16
   20880:	0020d100 	call	20d10 <__sfvwrite_r>
   20884:	1000091e 	bne	r2,zero,208ac <_puts_r+0xb8>
   20888:	00800284 	movi	r2,10
   2088c:	dfc00917 	ldw	ra,36(sp)
   20890:	dc400817 	ldw	r17,32(sp)
   20894:	dc000717 	ldw	r16,28(sp)
   20898:	dec00a04 	addi	sp,sp,40
   2089c:	f800283a 	ret
   208a0:	8009883a 	mov	r4,r16
   208a4:	0020cc00 	call	20cc0 <__sinit>
   208a8:	003fe906 	br	20850 <__alt_data_end+0xfffe81b0>
   208ac:	00bfffc4 	movi	r2,-1
   208b0:	003ff606 	br	2088c <__alt_data_end+0xfffe81ec>

000208b4 <puts>:
   208b4:	008000f4 	movhi	r2,3
   208b8:	10a29604 	addi	r2,r2,-30120
   208bc:	200b883a 	mov	r5,r4
   208c0:	11000017 	ldw	r4,0(r2)
   208c4:	00207f41 	jmpi	207f4 <_puts_r>

000208c8 <strlen>:
   208c8:	208000cc 	andi	r2,r4,3
   208cc:	10002026 	beq	r2,zero,20950 <strlen+0x88>
   208d0:	20800007 	ldb	r2,0(r4)
   208d4:	10002026 	beq	r2,zero,20958 <strlen+0x90>
   208d8:	2005883a 	mov	r2,r4
   208dc:	00000206 	br	208e8 <strlen+0x20>
   208e0:	10c00007 	ldb	r3,0(r2)
   208e4:	18001826 	beq	r3,zero,20948 <strlen+0x80>
   208e8:	10800044 	addi	r2,r2,1
   208ec:	10c000cc 	andi	r3,r2,3
   208f0:	183ffb1e 	bne	r3,zero,208e0 <__alt_data_end+0xfffe8240>
   208f4:	10c00017 	ldw	r3,0(r2)
   208f8:	01ffbff4 	movhi	r7,65279
   208fc:	39ffbfc4 	addi	r7,r7,-257
   20900:	00ca303a 	nor	r5,zero,r3
   20904:	01a02074 	movhi	r6,32897
   20908:	19c7883a 	add	r3,r3,r7
   2090c:	31a02004 	addi	r6,r6,-32640
   20910:	1946703a 	and	r3,r3,r5
   20914:	1986703a 	and	r3,r3,r6
   20918:	1800091e 	bne	r3,zero,20940 <strlen+0x78>
   2091c:	10800104 	addi	r2,r2,4
   20920:	10c00017 	ldw	r3,0(r2)
   20924:	19cb883a 	add	r5,r3,r7
   20928:	00c6303a 	nor	r3,zero,r3
   2092c:	28c6703a 	and	r3,r5,r3
   20930:	1986703a 	and	r3,r3,r6
   20934:	183ff926 	beq	r3,zero,2091c <__alt_data_end+0xfffe827c>
   20938:	00000106 	br	20940 <strlen+0x78>
   2093c:	10800044 	addi	r2,r2,1
   20940:	10c00007 	ldb	r3,0(r2)
   20944:	183ffd1e 	bne	r3,zero,2093c <__alt_data_end+0xfffe829c>
   20948:	1105c83a 	sub	r2,r2,r4
   2094c:	f800283a 	ret
   20950:	2005883a 	mov	r2,r4
   20954:	003fe706 	br	208f4 <__alt_data_end+0xfffe8254>
   20958:	0005883a 	mov	r2,zero
   2095c:	f800283a 	ret

00020960 <__fp_unlock>:
   20960:	0005883a 	mov	r2,zero
   20964:	f800283a 	ret

00020968 <_cleanup_r>:
   20968:	014000b4 	movhi	r5,2
   2096c:	294a4604 	addi	r5,r5,10520
   20970:	002129c1 	jmpi	2129c <_fwalk_reent>

00020974 <__sinit.part.1>:
   20974:	defff704 	addi	sp,sp,-36
   20978:	00c000b4 	movhi	r3,2
   2097c:	dfc00815 	stw	ra,32(sp)
   20980:	ddc00715 	stw	r23,28(sp)
   20984:	dd800615 	stw	r22,24(sp)
   20988:	dd400515 	stw	r21,20(sp)
   2098c:	dd000415 	stw	r20,16(sp)
   20990:	dcc00315 	stw	r19,12(sp)
   20994:	dc800215 	stw	r18,8(sp)
   20998:	dc400115 	stw	r17,4(sp)
   2099c:	dc000015 	stw	r16,0(sp)
   209a0:	18c25a04 	addi	r3,r3,2408
   209a4:	24000117 	ldw	r16,4(r4)
   209a8:	20c00f15 	stw	r3,60(r4)
   209ac:	2080bb04 	addi	r2,r4,748
   209b0:	00c000c4 	movi	r3,3
   209b4:	20c0b915 	stw	r3,740(r4)
   209b8:	2080ba15 	stw	r2,744(r4)
   209bc:	2000b815 	stw	zero,736(r4)
   209c0:	05c00204 	movi	r23,8
   209c4:	00800104 	movi	r2,4
   209c8:	2025883a 	mov	r18,r4
   209cc:	b80d883a 	mov	r6,r23
   209d0:	81001704 	addi	r4,r16,92
   209d4:	000b883a 	mov	r5,zero
   209d8:	80000015 	stw	zero,0(r16)
   209dc:	80000115 	stw	zero,4(r16)
   209e0:	80000215 	stw	zero,8(r16)
   209e4:	8080030d 	sth	r2,12(r16)
   209e8:	80001915 	stw	zero,100(r16)
   209ec:	8000038d 	sth	zero,14(r16)
   209f0:	80000415 	stw	zero,16(r16)
   209f4:	80000515 	stw	zero,20(r16)
   209f8:	80000615 	stw	zero,24(r16)
   209fc:	0021ef40 	call	21ef4 <memset>
   20a00:	058000b4 	movhi	r22,2
   20a04:	94400217 	ldw	r17,8(r18)
   20a08:	054000b4 	movhi	r21,2
   20a0c:	050000b4 	movhi	r20,2
   20a10:	04c000b4 	movhi	r19,2
   20a14:	b5897504 	addi	r22,r22,9684
   20a18:	ad498c04 	addi	r21,r21,9776
   20a1c:	a509ab04 	addi	r20,r20,9900
   20a20:	9cc9c204 	addi	r19,r19,9992
   20a24:	85800815 	stw	r22,32(r16)
   20a28:	85400915 	stw	r21,36(r16)
   20a2c:	85000a15 	stw	r20,40(r16)
   20a30:	84c00b15 	stw	r19,44(r16)
   20a34:	84000715 	stw	r16,28(r16)
   20a38:	00800284 	movi	r2,10
   20a3c:	8880030d 	sth	r2,12(r17)
   20a40:	00800044 	movi	r2,1
   20a44:	b80d883a 	mov	r6,r23
   20a48:	89001704 	addi	r4,r17,92
   20a4c:	000b883a 	mov	r5,zero
   20a50:	88000015 	stw	zero,0(r17)
   20a54:	88000115 	stw	zero,4(r17)
   20a58:	88000215 	stw	zero,8(r17)
   20a5c:	88001915 	stw	zero,100(r17)
   20a60:	8880038d 	sth	r2,14(r17)
   20a64:	88000415 	stw	zero,16(r17)
   20a68:	88000515 	stw	zero,20(r17)
   20a6c:	88000615 	stw	zero,24(r17)
   20a70:	0021ef40 	call	21ef4 <memset>
   20a74:	94000317 	ldw	r16,12(r18)
   20a78:	00800484 	movi	r2,18
   20a7c:	8c400715 	stw	r17,28(r17)
   20a80:	8d800815 	stw	r22,32(r17)
   20a84:	8d400915 	stw	r21,36(r17)
   20a88:	8d000a15 	stw	r20,40(r17)
   20a8c:	8cc00b15 	stw	r19,44(r17)
   20a90:	8080030d 	sth	r2,12(r16)
   20a94:	00800084 	movi	r2,2
   20a98:	80000015 	stw	zero,0(r16)
   20a9c:	80000115 	stw	zero,4(r16)
   20aa0:	80000215 	stw	zero,8(r16)
   20aa4:	80001915 	stw	zero,100(r16)
   20aa8:	8080038d 	sth	r2,14(r16)
   20aac:	80000415 	stw	zero,16(r16)
   20ab0:	80000515 	stw	zero,20(r16)
   20ab4:	80000615 	stw	zero,24(r16)
   20ab8:	b80d883a 	mov	r6,r23
   20abc:	000b883a 	mov	r5,zero
   20ac0:	81001704 	addi	r4,r16,92
   20ac4:	0021ef40 	call	21ef4 <memset>
   20ac8:	00800044 	movi	r2,1
   20acc:	84000715 	stw	r16,28(r16)
   20ad0:	85800815 	stw	r22,32(r16)
   20ad4:	85400915 	stw	r21,36(r16)
   20ad8:	85000a15 	stw	r20,40(r16)
   20adc:	84c00b15 	stw	r19,44(r16)
   20ae0:	90800e15 	stw	r2,56(r18)
   20ae4:	dfc00817 	ldw	ra,32(sp)
   20ae8:	ddc00717 	ldw	r23,28(sp)
   20aec:	dd800617 	ldw	r22,24(sp)
   20af0:	dd400517 	ldw	r21,20(sp)
   20af4:	dd000417 	ldw	r20,16(sp)
   20af8:	dcc00317 	ldw	r19,12(sp)
   20afc:	dc800217 	ldw	r18,8(sp)
   20b00:	dc400117 	ldw	r17,4(sp)
   20b04:	dc000017 	ldw	r16,0(sp)
   20b08:	dec00904 	addi	sp,sp,36
   20b0c:	f800283a 	ret

00020b10 <__fp_lock>:
   20b10:	0005883a 	mov	r2,zero
   20b14:	f800283a 	ret

00020b18 <__sfmoreglue>:
   20b18:	defffc04 	addi	sp,sp,-16
   20b1c:	dc800215 	stw	r18,8(sp)
   20b20:	2825883a 	mov	r18,r5
   20b24:	dc000015 	stw	r16,0(sp)
   20b28:	01401a04 	movi	r5,104
   20b2c:	2021883a 	mov	r16,r4
   20b30:	913fffc4 	addi	r4,r18,-1
   20b34:	dfc00315 	stw	ra,12(sp)
   20b38:	dc400115 	stw	r17,4(sp)
   20b3c:	00234240 	call	23424 <__mulsi3>
   20b40:	8009883a 	mov	r4,r16
   20b44:	11401d04 	addi	r5,r2,116
   20b48:	1023883a 	mov	r17,r2
   20b4c:	00213600 	call	21360 <_malloc_r>
   20b50:	1021883a 	mov	r16,r2
   20b54:	10000726 	beq	r2,zero,20b74 <__sfmoreglue+0x5c>
   20b58:	11000304 	addi	r4,r2,12
   20b5c:	10000015 	stw	zero,0(r2)
   20b60:	14800115 	stw	r18,4(r2)
   20b64:	11000215 	stw	r4,8(r2)
   20b68:	89801a04 	addi	r6,r17,104
   20b6c:	000b883a 	mov	r5,zero
   20b70:	0021ef40 	call	21ef4 <memset>
   20b74:	8005883a 	mov	r2,r16
   20b78:	dfc00317 	ldw	ra,12(sp)
   20b7c:	dc800217 	ldw	r18,8(sp)
   20b80:	dc400117 	ldw	r17,4(sp)
   20b84:	dc000017 	ldw	r16,0(sp)
   20b88:	dec00404 	addi	sp,sp,16
   20b8c:	f800283a 	ret

00020b90 <__sfp>:
   20b90:	defffb04 	addi	sp,sp,-20
   20b94:	dc000015 	stw	r16,0(sp)
   20b98:	040000f4 	movhi	r16,3
   20b9c:	84229504 	addi	r16,r16,-30124
   20ba0:	dcc00315 	stw	r19,12(sp)
   20ba4:	2027883a 	mov	r19,r4
   20ba8:	81000017 	ldw	r4,0(r16)
   20bac:	dfc00415 	stw	ra,16(sp)
   20bb0:	dc800215 	stw	r18,8(sp)
   20bb4:	20800e17 	ldw	r2,56(r4)
   20bb8:	dc400115 	stw	r17,4(sp)
   20bbc:	1000021e 	bne	r2,zero,20bc8 <__sfp+0x38>
   20bc0:	00209740 	call	20974 <__sinit.part.1>
   20bc4:	81000017 	ldw	r4,0(r16)
   20bc8:	2480b804 	addi	r18,r4,736
   20bcc:	047fffc4 	movi	r17,-1
   20bd0:	91000117 	ldw	r4,4(r18)
   20bd4:	94000217 	ldw	r16,8(r18)
   20bd8:	213fffc4 	addi	r4,r4,-1
   20bdc:	20000a16 	blt	r4,zero,20c08 <__sfp+0x78>
   20be0:	8080030f 	ldh	r2,12(r16)
   20be4:	10000c26 	beq	r2,zero,20c18 <__sfp+0x88>
   20be8:	80c01d04 	addi	r3,r16,116
   20bec:	00000206 	br	20bf8 <__sfp+0x68>
   20bf0:	18bfe60f 	ldh	r2,-104(r3)
   20bf4:	10000826 	beq	r2,zero,20c18 <__sfp+0x88>
   20bf8:	213fffc4 	addi	r4,r4,-1
   20bfc:	1c3ffd04 	addi	r16,r3,-12
   20c00:	18c01a04 	addi	r3,r3,104
   20c04:	247ffa1e 	bne	r4,r17,20bf0 <__alt_data_end+0xfffe8550>
   20c08:	90800017 	ldw	r2,0(r18)
   20c0c:	10001d26 	beq	r2,zero,20c84 <__sfp+0xf4>
   20c10:	1025883a 	mov	r18,r2
   20c14:	003fee06 	br	20bd0 <__alt_data_end+0xfffe8530>
   20c18:	00bfffc4 	movi	r2,-1
   20c1c:	8080038d 	sth	r2,14(r16)
   20c20:	00800044 	movi	r2,1
   20c24:	8080030d 	sth	r2,12(r16)
   20c28:	80001915 	stw	zero,100(r16)
   20c2c:	80000015 	stw	zero,0(r16)
   20c30:	80000215 	stw	zero,8(r16)
   20c34:	80000115 	stw	zero,4(r16)
   20c38:	80000415 	stw	zero,16(r16)
   20c3c:	80000515 	stw	zero,20(r16)
   20c40:	80000615 	stw	zero,24(r16)
   20c44:	01800204 	movi	r6,8
   20c48:	000b883a 	mov	r5,zero
   20c4c:	81001704 	addi	r4,r16,92
   20c50:	0021ef40 	call	21ef4 <memset>
   20c54:	8005883a 	mov	r2,r16
   20c58:	80000c15 	stw	zero,48(r16)
   20c5c:	80000d15 	stw	zero,52(r16)
   20c60:	80001115 	stw	zero,68(r16)
   20c64:	80001215 	stw	zero,72(r16)
   20c68:	dfc00417 	ldw	ra,16(sp)
   20c6c:	dcc00317 	ldw	r19,12(sp)
   20c70:	dc800217 	ldw	r18,8(sp)
   20c74:	dc400117 	ldw	r17,4(sp)
   20c78:	dc000017 	ldw	r16,0(sp)
   20c7c:	dec00504 	addi	sp,sp,20
   20c80:	f800283a 	ret
   20c84:	01400104 	movi	r5,4
   20c88:	9809883a 	mov	r4,r19
   20c8c:	0020b180 	call	20b18 <__sfmoreglue>
   20c90:	90800015 	stw	r2,0(r18)
   20c94:	103fde1e 	bne	r2,zero,20c10 <__alt_data_end+0xfffe8570>
   20c98:	00800304 	movi	r2,12
   20c9c:	98800015 	stw	r2,0(r19)
   20ca0:	0005883a 	mov	r2,zero
   20ca4:	003ff006 	br	20c68 <__alt_data_end+0xfffe85c8>

00020ca8 <_cleanup>:
   20ca8:	008000f4 	movhi	r2,3
   20cac:	10a29504 	addi	r2,r2,-30124
   20cb0:	11000017 	ldw	r4,0(r2)
   20cb4:	014000b4 	movhi	r5,2
   20cb8:	294a4604 	addi	r5,r5,10520
   20cbc:	002129c1 	jmpi	2129c <_fwalk_reent>

00020cc0 <__sinit>:
   20cc0:	20800e17 	ldw	r2,56(r4)
   20cc4:	10000126 	beq	r2,zero,20ccc <__sinit+0xc>
   20cc8:	f800283a 	ret
   20ccc:	00209741 	jmpi	20974 <__sinit.part.1>

00020cd0 <__sfp_lock_acquire>:
   20cd0:	f800283a 	ret

00020cd4 <__sfp_lock_release>:
   20cd4:	f800283a 	ret

00020cd8 <__sinit_lock_acquire>:
   20cd8:	f800283a 	ret

00020cdc <__sinit_lock_release>:
   20cdc:	f800283a 	ret

00020ce0 <__fp_lock_all>:
   20ce0:	008000f4 	movhi	r2,3
   20ce4:	10a29604 	addi	r2,r2,-30120
   20ce8:	11000017 	ldw	r4,0(r2)
   20cec:	014000b4 	movhi	r5,2
   20cf0:	2942c404 	addi	r5,r5,2832
   20cf4:	00211d81 	jmpi	211d8 <_fwalk>

00020cf8 <__fp_unlock_all>:
   20cf8:	008000f4 	movhi	r2,3
   20cfc:	10a29604 	addi	r2,r2,-30120
   20d00:	11000017 	ldw	r4,0(r2)
   20d04:	014000b4 	movhi	r5,2
   20d08:	29425804 	addi	r5,r5,2400
   20d0c:	00211d81 	jmpi	211d8 <_fwalk>

00020d10 <__sfvwrite_r>:
   20d10:	30800217 	ldw	r2,8(r6)
   20d14:	10006726 	beq	r2,zero,20eb4 <__sfvwrite_r+0x1a4>
   20d18:	28c0030b 	ldhu	r3,12(r5)
   20d1c:	defff404 	addi	sp,sp,-48
   20d20:	dd400715 	stw	r21,28(sp)
   20d24:	dd000615 	stw	r20,24(sp)
   20d28:	dc000215 	stw	r16,8(sp)
   20d2c:	dfc00b15 	stw	ra,44(sp)
   20d30:	df000a15 	stw	fp,40(sp)
   20d34:	ddc00915 	stw	r23,36(sp)
   20d38:	dd800815 	stw	r22,32(sp)
   20d3c:	dcc00515 	stw	r19,20(sp)
   20d40:	dc800415 	stw	r18,16(sp)
   20d44:	dc400315 	stw	r17,12(sp)
   20d48:	1880020c 	andi	r2,r3,8
   20d4c:	2821883a 	mov	r16,r5
   20d50:	202b883a 	mov	r21,r4
   20d54:	3029883a 	mov	r20,r6
   20d58:	10002726 	beq	r2,zero,20df8 <__sfvwrite_r+0xe8>
   20d5c:	28800417 	ldw	r2,16(r5)
   20d60:	10002526 	beq	r2,zero,20df8 <__sfvwrite_r+0xe8>
   20d64:	1880008c 	andi	r2,r3,2
   20d68:	a4400017 	ldw	r17,0(r20)
   20d6c:	10002a26 	beq	r2,zero,20e18 <__sfvwrite_r+0x108>
   20d70:	05a00034 	movhi	r22,32768
   20d74:	0027883a 	mov	r19,zero
   20d78:	0025883a 	mov	r18,zero
   20d7c:	b5bf0004 	addi	r22,r22,-1024
   20d80:	980d883a 	mov	r6,r19
   20d84:	a809883a 	mov	r4,r21
   20d88:	90004626 	beq	r18,zero,20ea4 <__sfvwrite_r+0x194>
   20d8c:	900f883a 	mov	r7,r18
   20d90:	b480022e 	bgeu	r22,r18,20d9c <__sfvwrite_r+0x8c>
   20d94:	01e00034 	movhi	r7,32768
   20d98:	39ff0004 	addi	r7,r7,-1024
   20d9c:	80800917 	ldw	r2,36(r16)
   20da0:	81400717 	ldw	r5,28(r16)
   20da4:	103ee83a 	callr	r2
   20da8:	00805a0e 	bge	zero,r2,20f14 <__sfvwrite_r+0x204>
   20dac:	a0c00217 	ldw	r3,8(r20)
   20db0:	98a7883a 	add	r19,r19,r2
   20db4:	90a5c83a 	sub	r18,r18,r2
   20db8:	1885c83a 	sub	r2,r3,r2
   20dbc:	a0800215 	stw	r2,8(r20)
   20dc0:	103fef1e 	bne	r2,zero,20d80 <__alt_data_end+0xfffe86e0>
   20dc4:	0005883a 	mov	r2,zero
   20dc8:	dfc00b17 	ldw	ra,44(sp)
   20dcc:	df000a17 	ldw	fp,40(sp)
   20dd0:	ddc00917 	ldw	r23,36(sp)
   20dd4:	dd800817 	ldw	r22,32(sp)
   20dd8:	dd400717 	ldw	r21,28(sp)
   20ddc:	dd000617 	ldw	r20,24(sp)
   20de0:	dcc00517 	ldw	r19,20(sp)
   20de4:	dc800417 	ldw	r18,16(sp)
   20de8:	dc400317 	ldw	r17,12(sp)
   20dec:	dc000217 	ldw	r16,8(sp)
   20df0:	dec00c04 	addi	sp,sp,48
   20df4:	f800283a 	ret
   20df8:	800b883a 	mov	r5,r16
   20dfc:	a809883a 	mov	r4,r21
   20e00:	00227700 	call	22770 <__swsetup_r>
   20e04:	1000ee1e 	bne	r2,zero,211c0 <__sfvwrite_r+0x4b0>
   20e08:	80c0030b 	ldhu	r3,12(r16)
   20e0c:	a4400017 	ldw	r17,0(r20)
   20e10:	1880008c 	andi	r2,r3,2
   20e14:	103fd61e 	bne	r2,zero,20d70 <__alt_data_end+0xfffe86d0>
   20e18:	1880004c 	andi	r2,r3,1
   20e1c:	1000421e 	bne	r2,zero,20f28 <__sfvwrite_r+0x218>
   20e20:	0039883a 	mov	fp,zero
   20e24:	0025883a 	mov	r18,zero
   20e28:	90001a26 	beq	r18,zero,20e94 <__sfvwrite_r+0x184>
   20e2c:	1880800c 	andi	r2,r3,512
   20e30:	84c00217 	ldw	r19,8(r16)
   20e34:	10002126 	beq	r2,zero,20ebc <__sfvwrite_r+0x1ac>
   20e38:	982f883a 	mov	r23,r19
   20e3c:	94c09636 	bltu	r18,r19,21098 <__sfvwrite_r+0x388>
   20e40:	1881200c 	andi	r2,r3,1152
   20e44:	1000a11e 	bne	r2,zero,210cc <__sfvwrite_r+0x3bc>
   20e48:	81000017 	ldw	r4,0(r16)
   20e4c:	b80d883a 	mov	r6,r23
   20e50:	e00b883a 	mov	r5,fp
   20e54:	0021d980 	call	21d98 <memmove>
   20e58:	80c00217 	ldw	r3,8(r16)
   20e5c:	81000017 	ldw	r4,0(r16)
   20e60:	9005883a 	mov	r2,r18
   20e64:	1ce7c83a 	sub	r19,r3,r19
   20e68:	25cf883a 	add	r7,r4,r23
   20e6c:	84c00215 	stw	r19,8(r16)
   20e70:	81c00015 	stw	r7,0(r16)
   20e74:	a0c00217 	ldw	r3,8(r20)
   20e78:	e0b9883a 	add	fp,fp,r2
   20e7c:	90a5c83a 	sub	r18,r18,r2
   20e80:	18a7c83a 	sub	r19,r3,r2
   20e84:	a4c00215 	stw	r19,8(r20)
   20e88:	983fce26 	beq	r19,zero,20dc4 <__alt_data_end+0xfffe8724>
   20e8c:	80c0030b 	ldhu	r3,12(r16)
   20e90:	903fe61e 	bne	r18,zero,20e2c <__alt_data_end+0xfffe878c>
   20e94:	8f000017 	ldw	fp,0(r17)
   20e98:	8c800117 	ldw	r18,4(r17)
   20e9c:	8c400204 	addi	r17,r17,8
   20ea0:	003fe106 	br	20e28 <__alt_data_end+0xfffe8788>
   20ea4:	8cc00017 	ldw	r19,0(r17)
   20ea8:	8c800117 	ldw	r18,4(r17)
   20eac:	8c400204 	addi	r17,r17,8
   20eb0:	003fb306 	br	20d80 <__alt_data_end+0xfffe86e0>
   20eb4:	0005883a 	mov	r2,zero
   20eb8:	f800283a 	ret
   20ebc:	81000017 	ldw	r4,0(r16)
   20ec0:	80800417 	ldw	r2,16(r16)
   20ec4:	11005a36 	bltu	r2,r4,21030 <__sfvwrite_r+0x320>
   20ec8:	85c00517 	ldw	r23,20(r16)
   20ecc:	95c05836 	bltu	r18,r23,21030 <__sfvwrite_r+0x320>
   20ed0:	00a00034 	movhi	r2,32768
   20ed4:	10bfffc4 	addi	r2,r2,-1
   20ed8:	9009883a 	mov	r4,r18
   20edc:	1480012e 	bgeu	r2,r18,20ee4 <__sfvwrite_r+0x1d4>
   20ee0:	1009883a 	mov	r4,r2
   20ee4:	b80b883a 	mov	r5,r23
   20ee8:	00206400 	call	20640 <__divsi3>
   20eec:	b80b883a 	mov	r5,r23
   20ef0:	1009883a 	mov	r4,r2
   20ef4:	00234240 	call	23424 <__mulsi3>
   20ef8:	81400717 	ldw	r5,28(r16)
   20efc:	80c00917 	ldw	r3,36(r16)
   20f00:	100f883a 	mov	r7,r2
   20f04:	e00d883a 	mov	r6,fp
   20f08:	a809883a 	mov	r4,r21
   20f0c:	183ee83a 	callr	r3
   20f10:	00bfd816 	blt	zero,r2,20e74 <__alt_data_end+0xfffe87d4>
   20f14:	8080030b 	ldhu	r2,12(r16)
   20f18:	10801014 	ori	r2,r2,64
   20f1c:	8080030d 	sth	r2,12(r16)
   20f20:	00bfffc4 	movi	r2,-1
   20f24:	003fa806 	br	20dc8 <__alt_data_end+0xfffe8728>
   20f28:	0027883a 	mov	r19,zero
   20f2c:	0011883a 	mov	r8,zero
   20f30:	0039883a 	mov	fp,zero
   20f34:	0025883a 	mov	r18,zero
   20f38:	90001f26 	beq	r18,zero,20fb8 <__sfvwrite_r+0x2a8>
   20f3c:	40005a26 	beq	r8,zero,210a8 <__sfvwrite_r+0x398>
   20f40:	982d883a 	mov	r22,r19
   20f44:	94c0012e 	bgeu	r18,r19,20f4c <__sfvwrite_r+0x23c>
   20f48:	902d883a 	mov	r22,r18
   20f4c:	81000017 	ldw	r4,0(r16)
   20f50:	80800417 	ldw	r2,16(r16)
   20f54:	b02f883a 	mov	r23,r22
   20f58:	81c00517 	ldw	r7,20(r16)
   20f5c:	1100032e 	bgeu	r2,r4,20f6c <__sfvwrite_r+0x25c>
   20f60:	80c00217 	ldw	r3,8(r16)
   20f64:	38c7883a 	add	r3,r7,r3
   20f68:	1d801816 	blt	r3,r22,20fcc <__sfvwrite_r+0x2bc>
   20f6c:	b1c03e16 	blt	r22,r7,21068 <__sfvwrite_r+0x358>
   20f70:	80800917 	ldw	r2,36(r16)
   20f74:	81400717 	ldw	r5,28(r16)
   20f78:	e00d883a 	mov	r6,fp
   20f7c:	da000115 	stw	r8,4(sp)
   20f80:	a809883a 	mov	r4,r21
   20f84:	103ee83a 	callr	r2
   20f88:	102f883a 	mov	r23,r2
   20f8c:	da000117 	ldw	r8,4(sp)
   20f90:	00bfe00e 	bge	zero,r2,20f14 <__alt_data_end+0xfffe8874>
   20f94:	9de7c83a 	sub	r19,r19,r23
   20f98:	98001f26 	beq	r19,zero,21018 <__sfvwrite_r+0x308>
   20f9c:	a0800217 	ldw	r2,8(r20)
   20fa0:	e5f9883a 	add	fp,fp,r23
   20fa4:	95e5c83a 	sub	r18,r18,r23
   20fa8:	15efc83a 	sub	r23,r2,r23
   20fac:	a5c00215 	stw	r23,8(r20)
   20fb0:	b83f8426 	beq	r23,zero,20dc4 <__alt_data_end+0xfffe8724>
   20fb4:	903fe11e 	bne	r18,zero,20f3c <__alt_data_end+0xfffe889c>
   20fb8:	8f000017 	ldw	fp,0(r17)
   20fbc:	8c800117 	ldw	r18,4(r17)
   20fc0:	0011883a 	mov	r8,zero
   20fc4:	8c400204 	addi	r17,r17,8
   20fc8:	003fdb06 	br	20f38 <__alt_data_end+0xfffe8898>
   20fcc:	180d883a 	mov	r6,r3
   20fd0:	e00b883a 	mov	r5,fp
   20fd4:	da000115 	stw	r8,4(sp)
   20fd8:	d8c00015 	stw	r3,0(sp)
   20fdc:	0021d980 	call	21d98 <memmove>
   20fe0:	d8c00017 	ldw	r3,0(sp)
   20fe4:	80800017 	ldw	r2,0(r16)
   20fe8:	800b883a 	mov	r5,r16
   20fec:	a809883a 	mov	r4,r21
   20ff0:	10c5883a 	add	r2,r2,r3
   20ff4:	80800015 	stw	r2,0(r16)
   20ff8:	d8c00015 	stw	r3,0(sp)
   20ffc:	0022c380 	call	22c38 <_fflush_r>
   21000:	d8c00017 	ldw	r3,0(sp)
   21004:	da000117 	ldw	r8,4(sp)
   21008:	103fc21e 	bne	r2,zero,20f14 <__alt_data_end+0xfffe8874>
   2100c:	182f883a 	mov	r23,r3
   21010:	9de7c83a 	sub	r19,r19,r23
   21014:	983fe11e 	bne	r19,zero,20f9c <__alt_data_end+0xfffe88fc>
   21018:	800b883a 	mov	r5,r16
   2101c:	a809883a 	mov	r4,r21
   21020:	0022c380 	call	22c38 <_fflush_r>
   21024:	103fbb1e 	bne	r2,zero,20f14 <__alt_data_end+0xfffe8874>
   21028:	0011883a 	mov	r8,zero
   2102c:	003fdb06 	br	20f9c <__alt_data_end+0xfffe88fc>
   21030:	94c0012e 	bgeu	r18,r19,21038 <__sfvwrite_r+0x328>
   21034:	9027883a 	mov	r19,r18
   21038:	980d883a 	mov	r6,r19
   2103c:	e00b883a 	mov	r5,fp
   21040:	0021d980 	call	21d98 <memmove>
   21044:	80800217 	ldw	r2,8(r16)
   21048:	80c00017 	ldw	r3,0(r16)
   2104c:	14c5c83a 	sub	r2,r2,r19
   21050:	1cc7883a 	add	r3,r3,r19
   21054:	80800215 	stw	r2,8(r16)
   21058:	80c00015 	stw	r3,0(r16)
   2105c:	10004326 	beq	r2,zero,2116c <__sfvwrite_r+0x45c>
   21060:	9805883a 	mov	r2,r19
   21064:	003f8306 	br	20e74 <__alt_data_end+0xfffe87d4>
   21068:	b00d883a 	mov	r6,r22
   2106c:	e00b883a 	mov	r5,fp
   21070:	da000115 	stw	r8,4(sp)
   21074:	0021d980 	call	21d98 <memmove>
   21078:	80800217 	ldw	r2,8(r16)
   2107c:	80c00017 	ldw	r3,0(r16)
   21080:	da000117 	ldw	r8,4(sp)
   21084:	1585c83a 	sub	r2,r2,r22
   21088:	1dad883a 	add	r22,r3,r22
   2108c:	80800215 	stw	r2,8(r16)
   21090:	85800015 	stw	r22,0(r16)
   21094:	003fbf06 	br	20f94 <__alt_data_end+0xfffe88f4>
   21098:	81000017 	ldw	r4,0(r16)
   2109c:	9027883a 	mov	r19,r18
   210a0:	902f883a 	mov	r23,r18
   210a4:	003f6906 	br	20e4c <__alt_data_end+0xfffe87ac>
   210a8:	900d883a 	mov	r6,r18
   210ac:	01400284 	movi	r5,10
   210b0:	e009883a 	mov	r4,fp
   210b4:	0021b6c0 	call	21b6c <memchr>
   210b8:	10003e26 	beq	r2,zero,211b4 <__sfvwrite_r+0x4a4>
   210bc:	10800044 	addi	r2,r2,1
   210c0:	1727c83a 	sub	r19,r2,fp
   210c4:	02000044 	movi	r8,1
   210c8:	003f9d06 	br	20f40 <__alt_data_end+0xfffe88a0>
   210cc:	80800517 	ldw	r2,20(r16)
   210d0:	81400417 	ldw	r5,16(r16)
   210d4:	81c00017 	ldw	r7,0(r16)
   210d8:	10a7883a 	add	r19,r2,r2
   210dc:	9885883a 	add	r2,r19,r2
   210e0:	1026d7fa 	srli	r19,r2,31
   210e4:	396dc83a 	sub	r22,r7,r5
   210e8:	b1000044 	addi	r4,r22,1
   210ec:	9885883a 	add	r2,r19,r2
   210f0:	1027d07a 	srai	r19,r2,1
   210f4:	2485883a 	add	r2,r4,r18
   210f8:	980d883a 	mov	r6,r19
   210fc:	9880022e 	bgeu	r19,r2,21108 <__sfvwrite_r+0x3f8>
   21100:	1027883a 	mov	r19,r2
   21104:	100d883a 	mov	r6,r2
   21108:	18c1000c 	andi	r3,r3,1024
   2110c:	18001c26 	beq	r3,zero,21180 <__sfvwrite_r+0x470>
   21110:	300b883a 	mov	r5,r6
   21114:	a809883a 	mov	r4,r21
   21118:	00213600 	call	21360 <_malloc_r>
   2111c:	102f883a 	mov	r23,r2
   21120:	10002926 	beq	r2,zero,211c8 <__sfvwrite_r+0x4b8>
   21124:	81400417 	ldw	r5,16(r16)
   21128:	b00d883a 	mov	r6,r22
   2112c:	1009883a 	mov	r4,r2
   21130:	0021c500 	call	21c50 <memcpy>
   21134:	8080030b 	ldhu	r2,12(r16)
   21138:	00fedfc4 	movi	r3,-1153
   2113c:	10c4703a 	and	r2,r2,r3
   21140:	10802014 	ori	r2,r2,128
   21144:	8080030d 	sth	r2,12(r16)
   21148:	bd89883a 	add	r4,r23,r22
   2114c:	9d8fc83a 	sub	r7,r19,r22
   21150:	85c00415 	stw	r23,16(r16)
   21154:	84c00515 	stw	r19,20(r16)
   21158:	81000015 	stw	r4,0(r16)
   2115c:	9027883a 	mov	r19,r18
   21160:	81c00215 	stw	r7,8(r16)
   21164:	902f883a 	mov	r23,r18
   21168:	003f3806 	br	20e4c <__alt_data_end+0xfffe87ac>
   2116c:	800b883a 	mov	r5,r16
   21170:	a809883a 	mov	r4,r21
   21174:	0022c380 	call	22c38 <_fflush_r>
   21178:	103fb926 	beq	r2,zero,21060 <__alt_data_end+0xfffe89c0>
   2117c:	003f6506 	br	20f14 <__alt_data_end+0xfffe8874>
   21180:	a809883a 	mov	r4,r21
   21184:	002201c0 	call	2201c <_realloc_r>
   21188:	102f883a 	mov	r23,r2
   2118c:	103fee1e 	bne	r2,zero,21148 <__alt_data_end+0xfffe8aa8>
   21190:	81400417 	ldw	r5,16(r16)
   21194:	a809883a 	mov	r4,r21
   21198:	0022de80 	call	22de8 <_free_r>
   2119c:	8080030b 	ldhu	r2,12(r16)
   211a0:	00ffdfc4 	movi	r3,-129
   211a4:	1884703a 	and	r2,r3,r2
   211a8:	00c00304 	movi	r3,12
   211ac:	a8c00015 	stw	r3,0(r21)
   211b0:	003f5906 	br	20f18 <__alt_data_end+0xfffe8878>
   211b4:	94c00044 	addi	r19,r18,1
   211b8:	02000044 	movi	r8,1
   211bc:	003f6006 	br	20f40 <__alt_data_end+0xfffe88a0>
   211c0:	00bfffc4 	movi	r2,-1
   211c4:	003f0006 	br	20dc8 <__alt_data_end+0xfffe8728>
   211c8:	00800304 	movi	r2,12
   211cc:	a8800015 	stw	r2,0(r21)
   211d0:	8080030b 	ldhu	r2,12(r16)
   211d4:	003f5006 	br	20f18 <__alt_data_end+0xfffe8878>

000211d8 <_fwalk>:
   211d8:	defff704 	addi	sp,sp,-36
   211dc:	dd000415 	stw	r20,16(sp)
   211e0:	dfc00815 	stw	ra,32(sp)
   211e4:	ddc00715 	stw	r23,28(sp)
   211e8:	dd800615 	stw	r22,24(sp)
   211ec:	dd400515 	stw	r21,20(sp)
   211f0:	dcc00315 	stw	r19,12(sp)
   211f4:	dc800215 	stw	r18,8(sp)
   211f8:	dc400115 	stw	r17,4(sp)
   211fc:	dc000015 	stw	r16,0(sp)
   21200:	2500b804 	addi	r20,r4,736
   21204:	a0002326 	beq	r20,zero,21294 <_fwalk+0xbc>
   21208:	282b883a 	mov	r21,r5
   2120c:	002f883a 	mov	r23,zero
   21210:	05800044 	movi	r22,1
   21214:	04ffffc4 	movi	r19,-1
   21218:	a4400117 	ldw	r17,4(r20)
   2121c:	a4800217 	ldw	r18,8(r20)
   21220:	8c7fffc4 	addi	r17,r17,-1
   21224:	88000d16 	blt	r17,zero,2125c <_fwalk+0x84>
   21228:	94000304 	addi	r16,r18,12
   2122c:	94800384 	addi	r18,r18,14
   21230:	8080000b 	ldhu	r2,0(r16)
   21234:	8c7fffc4 	addi	r17,r17,-1
   21238:	813ffd04 	addi	r4,r16,-12
   2123c:	b080042e 	bgeu	r22,r2,21250 <_fwalk+0x78>
   21240:	9080000f 	ldh	r2,0(r18)
   21244:	14c00226 	beq	r2,r19,21250 <_fwalk+0x78>
   21248:	a83ee83a 	callr	r21
   2124c:	b8aeb03a 	or	r23,r23,r2
   21250:	84001a04 	addi	r16,r16,104
   21254:	94801a04 	addi	r18,r18,104
   21258:	8cfff51e 	bne	r17,r19,21230 <__alt_data_end+0xfffe8b90>
   2125c:	a5000017 	ldw	r20,0(r20)
   21260:	a03fed1e 	bne	r20,zero,21218 <__alt_data_end+0xfffe8b78>
   21264:	b805883a 	mov	r2,r23
   21268:	dfc00817 	ldw	ra,32(sp)
   2126c:	ddc00717 	ldw	r23,28(sp)
   21270:	dd800617 	ldw	r22,24(sp)
   21274:	dd400517 	ldw	r21,20(sp)
   21278:	dd000417 	ldw	r20,16(sp)
   2127c:	dcc00317 	ldw	r19,12(sp)
   21280:	dc800217 	ldw	r18,8(sp)
   21284:	dc400117 	ldw	r17,4(sp)
   21288:	dc000017 	ldw	r16,0(sp)
   2128c:	dec00904 	addi	sp,sp,36
   21290:	f800283a 	ret
   21294:	002f883a 	mov	r23,zero
   21298:	003ff206 	br	21264 <__alt_data_end+0xfffe8bc4>

0002129c <_fwalk_reent>:
   2129c:	defff704 	addi	sp,sp,-36
   212a0:	dd000415 	stw	r20,16(sp)
   212a4:	dfc00815 	stw	ra,32(sp)
   212a8:	ddc00715 	stw	r23,28(sp)
   212ac:	dd800615 	stw	r22,24(sp)
   212b0:	dd400515 	stw	r21,20(sp)
   212b4:	dcc00315 	stw	r19,12(sp)
   212b8:	dc800215 	stw	r18,8(sp)
   212bc:	dc400115 	stw	r17,4(sp)
   212c0:	dc000015 	stw	r16,0(sp)
   212c4:	2500b804 	addi	r20,r4,736
   212c8:	a0002326 	beq	r20,zero,21358 <_fwalk_reent+0xbc>
   212cc:	282b883a 	mov	r21,r5
   212d0:	2027883a 	mov	r19,r4
   212d4:	002f883a 	mov	r23,zero
   212d8:	05800044 	movi	r22,1
   212dc:	04bfffc4 	movi	r18,-1
   212e0:	a4400117 	ldw	r17,4(r20)
   212e4:	a4000217 	ldw	r16,8(r20)
   212e8:	8c7fffc4 	addi	r17,r17,-1
   212ec:	88000c16 	blt	r17,zero,21320 <_fwalk_reent+0x84>
   212f0:	84000304 	addi	r16,r16,12
   212f4:	8080000b 	ldhu	r2,0(r16)
   212f8:	8c7fffc4 	addi	r17,r17,-1
   212fc:	817ffd04 	addi	r5,r16,-12
   21300:	b080052e 	bgeu	r22,r2,21318 <_fwalk_reent+0x7c>
   21304:	8080008f 	ldh	r2,2(r16)
   21308:	9809883a 	mov	r4,r19
   2130c:	14800226 	beq	r2,r18,21318 <_fwalk_reent+0x7c>
   21310:	a83ee83a 	callr	r21
   21314:	b8aeb03a 	or	r23,r23,r2
   21318:	84001a04 	addi	r16,r16,104
   2131c:	8cbff51e 	bne	r17,r18,212f4 <__alt_data_end+0xfffe8c54>
   21320:	a5000017 	ldw	r20,0(r20)
   21324:	a03fee1e 	bne	r20,zero,212e0 <__alt_data_end+0xfffe8c40>
   21328:	b805883a 	mov	r2,r23
   2132c:	dfc00817 	ldw	ra,32(sp)
   21330:	ddc00717 	ldw	r23,28(sp)
   21334:	dd800617 	ldw	r22,24(sp)
   21338:	dd400517 	ldw	r21,20(sp)
   2133c:	dd000417 	ldw	r20,16(sp)
   21340:	dcc00317 	ldw	r19,12(sp)
   21344:	dc800217 	ldw	r18,8(sp)
   21348:	dc400117 	ldw	r17,4(sp)
   2134c:	dc000017 	ldw	r16,0(sp)
   21350:	dec00904 	addi	sp,sp,36
   21354:	f800283a 	ret
   21358:	002f883a 	mov	r23,zero
   2135c:	003ff206 	br	21328 <__alt_data_end+0xfffe8c88>

00021360 <_malloc_r>:
   21360:	defff504 	addi	sp,sp,-44
   21364:	dc800315 	stw	r18,12(sp)
   21368:	dfc00a15 	stw	ra,40(sp)
   2136c:	df000915 	stw	fp,36(sp)
   21370:	ddc00815 	stw	r23,32(sp)
   21374:	dd800715 	stw	r22,28(sp)
   21378:	dd400615 	stw	r21,24(sp)
   2137c:	dd000515 	stw	r20,20(sp)
   21380:	dcc00415 	stw	r19,16(sp)
   21384:	dc400215 	stw	r17,8(sp)
   21388:	dc000115 	stw	r16,4(sp)
   2138c:	288002c4 	addi	r2,r5,11
   21390:	00c00584 	movi	r3,22
   21394:	2025883a 	mov	r18,r4
   21398:	18807f2e 	bgeu	r3,r2,21598 <_malloc_r+0x238>
   2139c:	047ffe04 	movi	r17,-8
   213a0:	1462703a 	and	r17,r2,r17
   213a4:	8800a316 	blt	r17,zero,21634 <_malloc_r+0x2d4>
   213a8:	8940a236 	bltu	r17,r5,21634 <_malloc_r+0x2d4>
   213ac:	00239e80 	call	239e8 <__malloc_lock>
   213b0:	00807dc4 	movi	r2,503
   213b4:	1441e92e 	bgeu	r2,r17,21b5c <_malloc_r+0x7fc>
   213b8:	8804d27a 	srli	r2,r17,9
   213bc:	1000a126 	beq	r2,zero,21644 <_malloc_r+0x2e4>
   213c0:	00c00104 	movi	r3,4
   213c4:	18811e36 	bltu	r3,r2,21840 <_malloc_r+0x4e0>
   213c8:	8804d1ba 	srli	r2,r17,6
   213cc:	12000e44 	addi	r8,r2,57
   213d0:	11c00e04 	addi	r7,r2,56
   213d4:	4209883a 	add	r4,r8,r8
   213d8:	04c000b4 	movhi	r19,2
   213dc:	2109883a 	add	r4,r4,r4
   213e0:	9cdcc904 	addi	r19,r19,29476
   213e4:	2109883a 	add	r4,r4,r4
   213e8:	9909883a 	add	r4,r19,r4
   213ec:	24000117 	ldw	r16,4(r4)
   213f0:	213ffe04 	addi	r4,r4,-8
   213f4:	24009726 	beq	r4,r16,21654 <_malloc_r+0x2f4>
   213f8:	80800117 	ldw	r2,4(r16)
   213fc:	01bfff04 	movi	r6,-4
   21400:	014003c4 	movi	r5,15
   21404:	1184703a 	and	r2,r2,r6
   21408:	1447c83a 	sub	r3,r2,r17
   2140c:	28c00716 	blt	r5,r3,2142c <_malloc_r+0xcc>
   21410:	1800920e 	bge	r3,zero,2165c <_malloc_r+0x2fc>
   21414:	84000317 	ldw	r16,12(r16)
   21418:	24008e26 	beq	r4,r16,21654 <_malloc_r+0x2f4>
   2141c:	80800117 	ldw	r2,4(r16)
   21420:	1184703a 	and	r2,r2,r6
   21424:	1447c83a 	sub	r3,r2,r17
   21428:	28fff90e 	bge	r5,r3,21410 <__alt_data_end+0xfffe8d70>
   2142c:	3809883a 	mov	r4,r7
   21430:	018000b4 	movhi	r6,2
   21434:	9c000417 	ldw	r16,16(r19)
   21438:	319cc904 	addi	r6,r6,29476
   2143c:	32000204 	addi	r8,r6,8
   21440:	82013426 	beq	r16,r8,21914 <_malloc_r+0x5b4>
   21444:	80c00117 	ldw	r3,4(r16)
   21448:	00bfff04 	movi	r2,-4
   2144c:	188e703a 	and	r7,r3,r2
   21450:	3c45c83a 	sub	r2,r7,r17
   21454:	00c003c4 	movi	r3,15
   21458:	18811f16 	blt	r3,r2,218d8 <_malloc_r+0x578>
   2145c:	32000515 	stw	r8,20(r6)
   21460:	32000415 	stw	r8,16(r6)
   21464:	10007f0e 	bge	r2,zero,21664 <_malloc_r+0x304>
   21468:	00807fc4 	movi	r2,511
   2146c:	11c0fd36 	bltu	r2,r7,21864 <_malloc_r+0x504>
   21470:	3806d0fa 	srli	r3,r7,3
   21474:	01c00044 	movi	r7,1
   21478:	30800117 	ldw	r2,4(r6)
   2147c:	19400044 	addi	r5,r3,1
   21480:	294b883a 	add	r5,r5,r5
   21484:	1807d0ba 	srai	r3,r3,2
   21488:	294b883a 	add	r5,r5,r5
   2148c:	294b883a 	add	r5,r5,r5
   21490:	298b883a 	add	r5,r5,r6
   21494:	38c6983a 	sll	r3,r7,r3
   21498:	29c00017 	ldw	r7,0(r5)
   2149c:	2a7ffe04 	addi	r9,r5,-8
   214a0:	1886b03a 	or	r3,r3,r2
   214a4:	82400315 	stw	r9,12(r16)
   214a8:	81c00215 	stw	r7,8(r16)
   214ac:	30c00115 	stw	r3,4(r6)
   214b0:	2c000015 	stw	r16,0(r5)
   214b4:	3c000315 	stw	r16,12(r7)
   214b8:	2005d0ba 	srai	r2,r4,2
   214bc:	01400044 	movi	r5,1
   214c0:	288a983a 	sll	r5,r5,r2
   214c4:	19406f36 	bltu	r3,r5,21684 <_malloc_r+0x324>
   214c8:	28c4703a 	and	r2,r5,r3
   214cc:	10000a1e 	bne	r2,zero,214f8 <_malloc_r+0x198>
   214d0:	00bfff04 	movi	r2,-4
   214d4:	294b883a 	add	r5,r5,r5
   214d8:	2088703a 	and	r4,r4,r2
   214dc:	28c4703a 	and	r2,r5,r3
   214e0:	21000104 	addi	r4,r4,4
   214e4:	1000041e 	bne	r2,zero,214f8 <_malloc_r+0x198>
   214e8:	294b883a 	add	r5,r5,r5
   214ec:	28c4703a 	and	r2,r5,r3
   214f0:	21000104 	addi	r4,r4,4
   214f4:	103ffc26 	beq	r2,zero,214e8 <__alt_data_end+0xfffe8e48>
   214f8:	02bfff04 	movi	r10,-4
   214fc:	024003c4 	movi	r9,15
   21500:	21800044 	addi	r6,r4,1
   21504:	318d883a 	add	r6,r6,r6
   21508:	318d883a 	add	r6,r6,r6
   2150c:	318d883a 	add	r6,r6,r6
   21510:	998d883a 	add	r6,r19,r6
   21514:	333ffe04 	addi	r12,r6,-8
   21518:	2017883a 	mov	r11,r4
   2151c:	31800104 	addi	r6,r6,4
   21520:	34000017 	ldw	r16,0(r6)
   21524:	31fffd04 	addi	r7,r6,-12
   21528:	81c0041e 	bne	r16,r7,2153c <_malloc_r+0x1dc>
   2152c:	0000fb06 	br	2191c <_malloc_r+0x5bc>
   21530:	1801030e 	bge	r3,zero,21940 <_malloc_r+0x5e0>
   21534:	84000317 	ldw	r16,12(r16)
   21538:	81c0f826 	beq	r16,r7,2191c <_malloc_r+0x5bc>
   2153c:	80800117 	ldw	r2,4(r16)
   21540:	1284703a 	and	r2,r2,r10
   21544:	1447c83a 	sub	r3,r2,r17
   21548:	48fff90e 	bge	r9,r3,21530 <__alt_data_end+0xfffe8e90>
   2154c:	80800317 	ldw	r2,12(r16)
   21550:	81000217 	ldw	r4,8(r16)
   21554:	89400054 	ori	r5,r17,1
   21558:	81400115 	stw	r5,4(r16)
   2155c:	20800315 	stw	r2,12(r4)
   21560:	11000215 	stw	r4,8(r2)
   21564:	8463883a 	add	r17,r16,r17
   21568:	9c400515 	stw	r17,20(r19)
   2156c:	9c400415 	stw	r17,16(r19)
   21570:	18800054 	ori	r2,r3,1
   21574:	88800115 	stw	r2,4(r17)
   21578:	8a000315 	stw	r8,12(r17)
   2157c:	8a000215 	stw	r8,8(r17)
   21580:	88e3883a 	add	r17,r17,r3
   21584:	88c00015 	stw	r3,0(r17)
   21588:	9009883a 	mov	r4,r18
   2158c:	0023a0c0 	call	23a0c <__malloc_unlock>
   21590:	80800204 	addi	r2,r16,8
   21594:	00001b06 	br	21604 <_malloc_r+0x2a4>
   21598:	04400404 	movi	r17,16
   2159c:	89402536 	bltu	r17,r5,21634 <_malloc_r+0x2d4>
   215a0:	00239e80 	call	239e8 <__malloc_lock>
   215a4:	00800184 	movi	r2,6
   215a8:	01000084 	movi	r4,2
   215ac:	04c000b4 	movhi	r19,2
   215b0:	1085883a 	add	r2,r2,r2
   215b4:	9cdcc904 	addi	r19,r19,29476
   215b8:	1085883a 	add	r2,r2,r2
   215bc:	9885883a 	add	r2,r19,r2
   215c0:	14000117 	ldw	r16,4(r2)
   215c4:	10fffe04 	addi	r3,r2,-8
   215c8:	80c0d926 	beq	r16,r3,21930 <_malloc_r+0x5d0>
   215cc:	80c00117 	ldw	r3,4(r16)
   215d0:	81000317 	ldw	r4,12(r16)
   215d4:	00bfff04 	movi	r2,-4
   215d8:	1884703a 	and	r2,r3,r2
   215dc:	81400217 	ldw	r5,8(r16)
   215e0:	8085883a 	add	r2,r16,r2
   215e4:	10c00117 	ldw	r3,4(r2)
   215e8:	29000315 	stw	r4,12(r5)
   215ec:	21400215 	stw	r5,8(r4)
   215f0:	18c00054 	ori	r3,r3,1
   215f4:	10c00115 	stw	r3,4(r2)
   215f8:	9009883a 	mov	r4,r18
   215fc:	0023a0c0 	call	23a0c <__malloc_unlock>
   21600:	80800204 	addi	r2,r16,8
   21604:	dfc00a17 	ldw	ra,40(sp)
   21608:	df000917 	ldw	fp,36(sp)
   2160c:	ddc00817 	ldw	r23,32(sp)
   21610:	dd800717 	ldw	r22,28(sp)
   21614:	dd400617 	ldw	r21,24(sp)
   21618:	dd000517 	ldw	r20,20(sp)
   2161c:	dcc00417 	ldw	r19,16(sp)
   21620:	dc800317 	ldw	r18,12(sp)
   21624:	dc400217 	ldw	r17,8(sp)
   21628:	dc000117 	ldw	r16,4(sp)
   2162c:	dec00b04 	addi	sp,sp,44
   21630:	f800283a 	ret
   21634:	00800304 	movi	r2,12
   21638:	90800015 	stw	r2,0(r18)
   2163c:	0005883a 	mov	r2,zero
   21640:	003ff006 	br	21604 <__alt_data_end+0xfffe8f64>
   21644:	01002004 	movi	r4,128
   21648:	02001004 	movi	r8,64
   2164c:	01c00fc4 	movi	r7,63
   21650:	003f6106 	br	213d8 <__alt_data_end+0xfffe8d38>
   21654:	4009883a 	mov	r4,r8
   21658:	003f7506 	br	21430 <__alt_data_end+0xfffe8d90>
   2165c:	81000317 	ldw	r4,12(r16)
   21660:	003fde06 	br	215dc <__alt_data_end+0xfffe8f3c>
   21664:	81c5883a 	add	r2,r16,r7
   21668:	11400117 	ldw	r5,4(r2)
   2166c:	9009883a 	mov	r4,r18
   21670:	29400054 	ori	r5,r5,1
   21674:	11400115 	stw	r5,4(r2)
   21678:	0023a0c0 	call	23a0c <__malloc_unlock>
   2167c:	80800204 	addi	r2,r16,8
   21680:	003fe006 	br	21604 <__alt_data_end+0xfffe8f64>
   21684:	9c000217 	ldw	r16,8(r19)
   21688:	00bfff04 	movi	r2,-4
   2168c:	85800117 	ldw	r22,4(r16)
   21690:	b0ac703a 	and	r22,r22,r2
   21694:	b4400336 	bltu	r22,r17,216a4 <_malloc_r+0x344>
   21698:	b445c83a 	sub	r2,r22,r17
   2169c:	00c003c4 	movi	r3,15
   216a0:	18805d16 	blt	r3,r2,21818 <_malloc_r+0x4b8>
   216a4:	05c000f4 	movhi	r23,3
   216a8:	008000f4 	movhi	r2,3
   216ac:	10a98c04 	addi	r2,r2,-22992
   216b0:	bde29704 	addi	r23,r23,-30116
   216b4:	15400017 	ldw	r21,0(r2)
   216b8:	b8c00017 	ldw	r3,0(r23)
   216bc:	00bfffc4 	movi	r2,-1
   216c0:	858d883a 	add	r6,r16,r22
   216c4:	8d6b883a 	add	r21,r17,r21
   216c8:	1880ea26 	beq	r3,r2,21a74 <_malloc_r+0x714>
   216cc:	ad4403c4 	addi	r21,r21,4111
   216d0:	00bc0004 	movi	r2,-4096
   216d4:	a8aa703a 	and	r21,r21,r2
   216d8:	a80b883a 	mov	r5,r21
   216dc:	9009883a 	mov	r4,r18
   216e0:	d9800015 	stw	r6,0(sp)
   216e4:	00225800 	call	22580 <_sbrk_r>
   216e8:	1029883a 	mov	r20,r2
   216ec:	00bfffc4 	movi	r2,-1
   216f0:	d9800017 	ldw	r6,0(sp)
   216f4:	a080e826 	beq	r20,r2,21a98 <_malloc_r+0x738>
   216f8:	a180a636 	bltu	r20,r6,21994 <_malloc_r+0x634>
   216fc:	070000f4 	movhi	fp,3
   21700:	e7299504 	addi	fp,fp,-22956
   21704:	e0800017 	ldw	r2,0(fp)
   21708:	a887883a 	add	r3,r21,r2
   2170c:	e0c00015 	stw	r3,0(fp)
   21710:	3500e626 	beq	r6,r20,21aac <_malloc_r+0x74c>
   21714:	b9000017 	ldw	r4,0(r23)
   21718:	00bfffc4 	movi	r2,-1
   2171c:	2080ee26 	beq	r4,r2,21ad8 <_malloc_r+0x778>
   21720:	a185c83a 	sub	r2,r20,r6
   21724:	10c5883a 	add	r2,r2,r3
   21728:	e0800015 	stw	r2,0(fp)
   2172c:	a0c001cc 	andi	r3,r20,7
   21730:	1800bc26 	beq	r3,zero,21a24 <_malloc_r+0x6c4>
   21734:	a0e9c83a 	sub	r20,r20,r3
   21738:	00840204 	movi	r2,4104
   2173c:	a5000204 	addi	r20,r20,8
   21740:	10c7c83a 	sub	r3,r2,r3
   21744:	a545883a 	add	r2,r20,r21
   21748:	1083ffcc 	andi	r2,r2,4095
   2174c:	18abc83a 	sub	r21,r3,r2
   21750:	a80b883a 	mov	r5,r21
   21754:	9009883a 	mov	r4,r18
   21758:	00225800 	call	22580 <_sbrk_r>
   2175c:	00ffffc4 	movi	r3,-1
   21760:	10c0e126 	beq	r2,r3,21ae8 <_malloc_r+0x788>
   21764:	1505c83a 	sub	r2,r2,r20
   21768:	1545883a 	add	r2,r2,r21
   2176c:	10800054 	ori	r2,r2,1
   21770:	e0c00017 	ldw	r3,0(fp)
   21774:	9d000215 	stw	r20,8(r19)
   21778:	a0800115 	stw	r2,4(r20)
   2177c:	a8c7883a 	add	r3,r21,r3
   21780:	e0c00015 	stw	r3,0(fp)
   21784:	84c00e26 	beq	r16,r19,217c0 <_malloc_r+0x460>
   21788:	018003c4 	movi	r6,15
   2178c:	3580a72e 	bgeu	r6,r22,21a2c <_malloc_r+0x6cc>
   21790:	81400117 	ldw	r5,4(r16)
   21794:	013ffe04 	movi	r4,-8
   21798:	b0bffd04 	addi	r2,r22,-12
   2179c:	1104703a 	and	r2,r2,r4
   217a0:	2900004c 	andi	r4,r5,1
   217a4:	2088b03a 	or	r4,r4,r2
   217a8:	81000115 	stw	r4,4(r16)
   217ac:	01400144 	movi	r5,5
   217b0:	8089883a 	add	r4,r16,r2
   217b4:	21400115 	stw	r5,4(r4)
   217b8:	21400215 	stw	r5,8(r4)
   217bc:	3080cd36 	bltu	r6,r2,21af4 <_malloc_r+0x794>
   217c0:	008000f4 	movhi	r2,3
   217c4:	10a98b04 	addi	r2,r2,-22996
   217c8:	11000017 	ldw	r4,0(r2)
   217cc:	20c0012e 	bgeu	r4,r3,217d4 <_malloc_r+0x474>
   217d0:	10c00015 	stw	r3,0(r2)
   217d4:	008000f4 	movhi	r2,3
   217d8:	10a98a04 	addi	r2,r2,-23000
   217dc:	11000017 	ldw	r4,0(r2)
   217e0:	9c000217 	ldw	r16,8(r19)
   217e4:	20c0012e 	bgeu	r4,r3,217ec <_malloc_r+0x48c>
   217e8:	10c00015 	stw	r3,0(r2)
   217ec:	80c00117 	ldw	r3,4(r16)
   217f0:	00bfff04 	movi	r2,-4
   217f4:	1886703a 	and	r3,r3,r2
   217f8:	1c45c83a 	sub	r2,r3,r17
   217fc:	1c400236 	bltu	r3,r17,21808 <_malloc_r+0x4a8>
   21800:	00c003c4 	movi	r3,15
   21804:	18800416 	blt	r3,r2,21818 <_malloc_r+0x4b8>
   21808:	9009883a 	mov	r4,r18
   2180c:	0023a0c0 	call	23a0c <__malloc_unlock>
   21810:	0005883a 	mov	r2,zero
   21814:	003f7b06 	br	21604 <__alt_data_end+0xfffe8f64>
   21818:	88c00054 	ori	r3,r17,1
   2181c:	80c00115 	stw	r3,4(r16)
   21820:	8463883a 	add	r17,r16,r17
   21824:	10800054 	ori	r2,r2,1
   21828:	9c400215 	stw	r17,8(r19)
   2182c:	88800115 	stw	r2,4(r17)
   21830:	9009883a 	mov	r4,r18
   21834:	0023a0c0 	call	23a0c <__malloc_unlock>
   21838:	80800204 	addi	r2,r16,8
   2183c:	003f7106 	br	21604 <__alt_data_end+0xfffe8f64>
   21840:	00c00504 	movi	r3,20
   21844:	18804a2e 	bgeu	r3,r2,21970 <_malloc_r+0x610>
   21848:	00c01504 	movi	r3,84
   2184c:	18806e36 	bltu	r3,r2,21a08 <_malloc_r+0x6a8>
   21850:	8804d33a 	srli	r2,r17,12
   21854:	12001bc4 	addi	r8,r2,111
   21858:	11c01b84 	addi	r7,r2,110
   2185c:	4209883a 	add	r4,r8,r8
   21860:	003edd06 	br	213d8 <__alt_data_end+0xfffe8d38>
   21864:	3804d27a 	srli	r2,r7,9
   21868:	00c00104 	movi	r3,4
   2186c:	1880442e 	bgeu	r3,r2,21980 <_malloc_r+0x620>
   21870:	00c00504 	movi	r3,20
   21874:	18808136 	bltu	r3,r2,21a7c <_malloc_r+0x71c>
   21878:	11401704 	addi	r5,r2,92
   2187c:	10c016c4 	addi	r3,r2,91
   21880:	294b883a 	add	r5,r5,r5
   21884:	294b883a 	add	r5,r5,r5
   21888:	294b883a 	add	r5,r5,r5
   2188c:	994b883a 	add	r5,r19,r5
   21890:	28800017 	ldw	r2,0(r5)
   21894:	018000b4 	movhi	r6,2
   21898:	297ffe04 	addi	r5,r5,-8
   2189c:	319cc904 	addi	r6,r6,29476
   218a0:	28806526 	beq	r5,r2,21a38 <_malloc_r+0x6d8>
   218a4:	01bfff04 	movi	r6,-4
   218a8:	10c00117 	ldw	r3,4(r2)
   218ac:	1986703a 	and	r3,r3,r6
   218b0:	38c0022e 	bgeu	r7,r3,218bc <_malloc_r+0x55c>
   218b4:	10800217 	ldw	r2,8(r2)
   218b8:	28bffb1e 	bne	r5,r2,218a8 <__alt_data_end+0xfffe9208>
   218bc:	11400317 	ldw	r5,12(r2)
   218c0:	98c00117 	ldw	r3,4(r19)
   218c4:	81400315 	stw	r5,12(r16)
   218c8:	80800215 	stw	r2,8(r16)
   218cc:	2c000215 	stw	r16,8(r5)
   218d0:	14000315 	stw	r16,12(r2)
   218d4:	003ef806 	br	214b8 <__alt_data_end+0xfffe8e18>
   218d8:	88c00054 	ori	r3,r17,1
   218dc:	80c00115 	stw	r3,4(r16)
   218e0:	8463883a 	add	r17,r16,r17
   218e4:	34400515 	stw	r17,20(r6)
   218e8:	34400415 	stw	r17,16(r6)
   218ec:	10c00054 	ori	r3,r2,1
   218f0:	8a000315 	stw	r8,12(r17)
   218f4:	8a000215 	stw	r8,8(r17)
   218f8:	88c00115 	stw	r3,4(r17)
   218fc:	88a3883a 	add	r17,r17,r2
   21900:	88800015 	stw	r2,0(r17)
   21904:	9009883a 	mov	r4,r18
   21908:	0023a0c0 	call	23a0c <__malloc_unlock>
   2190c:	80800204 	addi	r2,r16,8
   21910:	003f3c06 	br	21604 <__alt_data_end+0xfffe8f64>
   21914:	30c00117 	ldw	r3,4(r6)
   21918:	003ee706 	br	214b8 <__alt_data_end+0xfffe8e18>
   2191c:	5ac00044 	addi	r11,r11,1
   21920:	588000cc 	andi	r2,r11,3
   21924:	31800204 	addi	r6,r6,8
   21928:	103efd1e 	bne	r2,zero,21520 <__alt_data_end+0xfffe8e80>
   2192c:	00002406 	br	219c0 <_malloc_r+0x660>
   21930:	14000317 	ldw	r16,12(r2)
   21934:	143f251e 	bne	r2,r16,215cc <__alt_data_end+0xfffe8f2c>
   21938:	21000084 	addi	r4,r4,2
   2193c:	003ebc06 	br	21430 <__alt_data_end+0xfffe8d90>
   21940:	8085883a 	add	r2,r16,r2
   21944:	10c00117 	ldw	r3,4(r2)
   21948:	81000317 	ldw	r4,12(r16)
   2194c:	81400217 	ldw	r5,8(r16)
   21950:	18c00054 	ori	r3,r3,1
   21954:	10c00115 	stw	r3,4(r2)
   21958:	29000315 	stw	r4,12(r5)
   2195c:	21400215 	stw	r5,8(r4)
   21960:	9009883a 	mov	r4,r18
   21964:	0023a0c0 	call	23a0c <__malloc_unlock>
   21968:	80800204 	addi	r2,r16,8
   2196c:	003f2506 	br	21604 <__alt_data_end+0xfffe8f64>
   21970:	12001704 	addi	r8,r2,92
   21974:	11c016c4 	addi	r7,r2,91
   21978:	4209883a 	add	r4,r8,r8
   2197c:	003e9606 	br	213d8 <__alt_data_end+0xfffe8d38>
   21980:	3804d1ba 	srli	r2,r7,6
   21984:	11400e44 	addi	r5,r2,57
   21988:	10c00e04 	addi	r3,r2,56
   2198c:	294b883a 	add	r5,r5,r5
   21990:	003fbc06 	br	21884 <__alt_data_end+0xfffe91e4>
   21994:	84ff5926 	beq	r16,r19,216fc <__alt_data_end+0xfffe905c>
   21998:	008000b4 	movhi	r2,2
   2199c:	109cc904 	addi	r2,r2,29476
   219a0:	14000217 	ldw	r16,8(r2)
   219a4:	00bfff04 	movi	r2,-4
   219a8:	80c00117 	ldw	r3,4(r16)
   219ac:	1886703a 	and	r3,r3,r2
   219b0:	003f9106 	br	217f8 <__alt_data_end+0xfffe9158>
   219b4:	60800217 	ldw	r2,8(r12)
   219b8:	213fffc4 	addi	r4,r4,-1
   219bc:	1300651e 	bne	r2,r12,21b54 <_malloc_r+0x7f4>
   219c0:	208000cc 	andi	r2,r4,3
   219c4:	633ffe04 	addi	r12,r12,-8
   219c8:	103ffa1e 	bne	r2,zero,219b4 <__alt_data_end+0xfffe9314>
   219cc:	98800117 	ldw	r2,4(r19)
   219d0:	0146303a 	nor	r3,zero,r5
   219d4:	1884703a 	and	r2,r3,r2
   219d8:	98800115 	stw	r2,4(r19)
   219dc:	294b883a 	add	r5,r5,r5
   219e0:	117f2836 	bltu	r2,r5,21684 <__alt_data_end+0xfffe8fe4>
   219e4:	283f2726 	beq	r5,zero,21684 <__alt_data_end+0xfffe8fe4>
   219e8:	2886703a 	and	r3,r5,r2
   219ec:	5809883a 	mov	r4,r11
   219f0:	183ec31e 	bne	r3,zero,21500 <__alt_data_end+0xfffe8e60>
   219f4:	294b883a 	add	r5,r5,r5
   219f8:	2886703a 	and	r3,r5,r2
   219fc:	21000104 	addi	r4,r4,4
   21a00:	183ffc26 	beq	r3,zero,219f4 <__alt_data_end+0xfffe9354>
   21a04:	003ebe06 	br	21500 <__alt_data_end+0xfffe8e60>
   21a08:	00c05504 	movi	r3,340
   21a0c:	18801236 	bltu	r3,r2,21a58 <_malloc_r+0x6f8>
   21a10:	8804d3fa 	srli	r2,r17,15
   21a14:	12001e04 	addi	r8,r2,120
   21a18:	11c01dc4 	addi	r7,r2,119
   21a1c:	4209883a 	add	r4,r8,r8
   21a20:	003e6d06 	br	213d8 <__alt_data_end+0xfffe8d38>
   21a24:	00c40004 	movi	r3,4096
   21a28:	003f4606 	br	21744 <__alt_data_end+0xfffe90a4>
   21a2c:	00800044 	movi	r2,1
   21a30:	a0800115 	stw	r2,4(r20)
   21a34:	003f7406 	br	21808 <__alt_data_end+0xfffe9168>
   21a38:	1805d0ba 	srai	r2,r3,2
   21a3c:	01c00044 	movi	r7,1
   21a40:	30c00117 	ldw	r3,4(r6)
   21a44:	388e983a 	sll	r7,r7,r2
   21a48:	2805883a 	mov	r2,r5
   21a4c:	38c6b03a 	or	r3,r7,r3
   21a50:	30c00115 	stw	r3,4(r6)
   21a54:	003f9b06 	br	218c4 <__alt_data_end+0xfffe9224>
   21a58:	00c15504 	movi	r3,1364
   21a5c:	18801a36 	bltu	r3,r2,21ac8 <_malloc_r+0x768>
   21a60:	8804d4ba 	srli	r2,r17,18
   21a64:	12001f44 	addi	r8,r2,125
   21a68:	11c01f04 	addi	r7,r2,124
   21a6c:	4209883a 	add	r4,r8,r8
   21a70:	003e5906 	br	213d8 <__alt_data_end+0xfffe8d38>
   21a74:	ad400404 	addi	r21,r21,16
   21a78:	003f1706 	br	216d8 <__alt_data_end+0xfffe9038>
   21a7c:	00c01504 	movi	r3,84
   21a80:	18802336 	bltu	r3,r2,21b10 <_malloc_r+0x7b0>
   21a84:	3804d33a 	srli	r2,r7,12
   21a88:	11401bc4 	addi	r5,r2,111
   21a8c:	10c01b84 	addi	r3,r2,110
   21a90:	294b883a 	add	r5,r5,r5
   21a94:	003f7b06 	br	21884 <__alt_data_end+0xfffe91e4>
   21a98:	9c000217 	ldw	r16,8(r19)
   21a9c:	00bfff04 	movi	r2,-4
   21aa0:	80c00117 	ldw	r3,4(r16)
   21aa4:	1886703a 	and	r3,r3,r2
   21aa8:	003f5306 	br	217f8 <__alt_data_end+0xfffe9158>
   21aac:	3083ffcc 	andi	r2,r6,4095
   21ab0:	103f181e 	bne	r2,zero,21714 <__alt_data_end+0xfffe9074>
   21ab4:	99000217 	ldw	r4,8(r19)
   21ab8:	b545883a 	add	r2,r22,r21
   21abc:	10800054 	ori	r2,r2,1
   21ac0:	20800115 	stw	r2,4(r4)
   21ac4:	003f3e06 	br	217c0 <__alt_data_end+0xfffe9120>
   21ac8:	01003f84 	movi	r4,254
   21acc:	02001fc4 	movi	r8,127
   21ad0:	01c01f84 	movi	r7,126
   21ad4:	003e4006 	br	213d8 <__alt_data_end+0xfffe8d38>
   21ad8:	008000f4 	movhi	r2,3
   21adc:	10a29704 	addi	r2,r2,-30116
   21ae0:	15000015 	stw	r20,0(r2)
   21ae4:	003f1106 	br	2172c <__alt_data_end+0xfffe908c>
   21ae8:	00800044 	movi	r2,1
   21aec:	002b883a 	mov	r21,zero
   21af0:	003f1f06 	br	21770 <__alt_data_end+0xfffe90d0>
   21af4:	81400204 	addi	r5,r16,8
   21af8:	9009883a 	mov	r4,r18
   21afc:	0022de80 	call	22de8 <_free_r>
   21b00:	008000f4 	movhi	r2,3
   21b04:	10a99504 	addi	r2,r2,-22956
   21b08:	10c00017 	ldw	r3,0(r2)
   21b0c:	003f2c06 	br	217c0 <__alt_data_end+0xfffe9120>
   21b10:	00c05504 	movi	r3,340
   21b14:	18800536 	bltu	r3,r2,21b2c <_malloc_r+0x7cc>
   21b18:	3804d3fa 	srli	r2,r7,15
   21b1c:	11401e04 	addi	r5,r2,120
   21b20:	10c01dc4 	addi	r3,r2,119
   21b24:	294b883a 	add	r5,r5,r5
   21b28:	003f5606 	br	21884 <__alt_data_end+0xfffe91e4>
   21b2c:	00c15504 	movi	r3,1364
   21b30:	18800536 	bltu	r3,r2,21b48 <_malloc_r+0x7e8>
   21b34:	3804d4ba 	srli	r2,r7,18
   21b38:	11401f44 	addi	r5,r2,125
   21b3c:	10c01f04 	addi	r3,r2,124
   21b40:	294b883a 	add	r5,r5,r5
   21b44:	003f4f06 	br	21884 <__alt_data_end+0xfffe91e4>
   21b48:	01403f84 	movi	r5,254
   21b4c:	00c01f84 	movi	r3,126
   21b50:	003f4c06 	br	21884 <__alt_data_end+0xfffe91e4>
   21b54:	98800117 	ldw	r2,4(r19)
   21b58:	003fa006 	br	219dc <__alt_data_end+0xfffe933c>
   21b5c:	8808d0fa 	srli	r4,r17,3
   21b60:	20800044 	addi	r2,r4,1
   21b64:	1085883a 	add	r2,r2,r2
   21b68:	003e9006 	br	215ac <__alt_data_end+0xfffe8f0c>

00021b6c <memchr>:
   21b6c:	208000cc 	andi	r2,r4,3
   21b70:	280f883a 	mov	r7,r5
   21b74:	10003426 	beq	r2,zero,21c48 <memchr+0xdc>
   21b78:	30bfffc4 	addi	r2,r6,-1
   21b7c:	30001a26 	beq	r6,zero,21be8 <memchr+0x7c>
   21b80:	20c00003 	ldbu	r3,0(r4)
   21b84:	29803fcc 	andi	r6,r5,255
   21b88:	30c0051e 	bne	r6,r3,21ba0 <memchr+0x34>
   21b8c:	00001806 	br	21bf0 <memchr+0x84>
   21b90:	10001526 	beq	r2,zero,21be8 <memchr+0x7c>
   21b94:	20c00003 	ldbu	r3,0(r4)
   21b98:	10bfffc4 	addi	r2,r2,-1
   21b9c:	30c01426 	beq	r6,r3,21bf0 <memchr+0x84>
   21ba0:	21000044 	addi	r4,r4,1
   21ba4:	20c000cc 	andi	r3,r4,3
   21ba8:	183ff91e 	bne	r3,zero,21b90 <__alt_data_end+0xfffe94f0>
   21bac:	020000c4 	movi	r8,3
   21bb0:	40801136 	bltu	r8,r2,21bf8 <memchr+0x8c>
   21bb4:	10000c26 	beq	r2,zero,21be8 <memchr+0x7c>
   21bb8:	20c00003 	ldbu	r3,0(r4)
   21bbc:	29403fcc 	andi	r5,r5,255
   21bc0:	28c00b26 	beq	r5,r3,21bf0 <memchr+0x84>
   21bc4:	20c00044 	addi	r3,r4,1
   21bc8:	39803fcc 	andi	r6,r7,255
   21bcc:	2089883a 	add	r4,r4,r2
   21bd0:	00000306 	br	21be0 <memchr+0x74>
   21bd4:	18c00044 	addi	r3,r3,1
   21bd8:	197fffc3 	ldbu	r5,-1(r3)
   21bdc:	31400526 	beq	r6,r5,21bf4 <memchr+0x88>
   21be0:	1805883a 	mov	r2,r3
   21be4:	20fffb1e 	bne	r4,r3,21bd4 <__alt_data_end+0xfffe9534>
   21be8:	0005883a 	mov	r2,zero
   21bec:	f800283a 	ret
   21bf0:	2005883a 	mov	r2,r4
   21bf4:	f800283a 	ret
   21bf8:	28c03fcc 	andi	r3,r5,255
   21bfc:	1812923a 	slli	r9,r3,8
   21c00:	02ffbff4 	movhi	r11,65279
   21c04:	02a02074 	movhi	r10,32897
   21c08:	48d2b03a 	or	r9,r9,r3
   21c0c:	4806943a 	slli	r3,r9,16
   21c10:	5affbfc4 	addi	r11,r11,-257
   21c14:	52a02004 	addi	r10,r10,-32640
   21c18:	48d2b03a 	or	r9,r9,r3
   21c1c:	20c00017 	ldw	r3,0(r4)
   21c20:	48c6f03a 	xor	r3,r9,r3
   21c24:	1acd883a 	add	r6,r3,r11
   21c28:	00c6303a 	nor	r3,zero,r3
   21c2c:	30c6703a 	and	r3,r6,r3
   21c30:	1a86703a 	and	r3,r3,r10
   21c34:	183fe01e 	bne	r3,zero,21bb8 <__alt_data_end+0xfffe9518>
   21c38:	10bfff04 	addi	r2,r2,-4
   21c3c:	21000104 	addi	r4,r4,4
   21c40:	40bff636 	bltu	r8,r2,21c1c <__alt_data_end+0xfffe957c>
   21c44:	003fdb06 	br	21bb4 <__alt_data_end+0xfffe9514>
   21c48:	3005883a 	mov	r2,r6
   21c4c:	003fd706 	br	21bac <__alt_data_end+0xfffe950c>

00021c50 <memcpy>:
   21c50:	defffd04 	addi	sp,sp,-12
   21c54:	dfc00215 	stw	ra,8(sp)
   21c58:	dc400115 	stw	r17,4(sp)
   21c5c:	dc000015 	stw	r16,0(sp)
   21c60:	00c003c4 	movi	r3,15
   21c64:	2005883a 	mov	r2,r4
   21c68:	1980452e 	bgeu	r3,r6,21d80 <memcpy+0x130>
   21c6c:	2906b03a 	or	r3,r5,r4
   21c70:	18c000cc 	andi	r3,r3,3
   21c74:	1800441e 	bne	r3,zero,21d88 <memcpy+0x138>
   21c78:	347ffc04 	addi	r17,r6,-16
   21c7c:	8822d13a 	srli	r17,r17,4
   21c80:	28c00104 	addi	r3,r5,4
   21c84:	23400104 	addi	r13,r4,4
   21c88:	8820913a 	slli	r16,r17,4
   21c8c:	2b000204 	addi	r12,r5,8
   21c90:	22c00204 	addi	r11,r4,8
   21c94:	84000504 	addi	r16,r16,20
   21c98:	2a800304 	addi	r10,r5,12
   21c9c:	22400304 	addi	r9,r4,12
   21ca0:	2c21883a 	add	r16,r5,r16
   21ca4:	2811883a 	mov	r8,r5
   21ca8:	200f883a 	mov	r7,r4
   21cac:	41000017 	ldw	r4,0(r8)
   21cb0:	1fc00017 	ldw	ra,0(r3)
   21cb4:	63c00017 	ldw	r15,0(r12)
   21cb8:	39000015 	stw	r4,0(r7)
   21cbc:	53800017 	ldw	r14,0(r10)
   21cc0:	6fc00015 	stw	ra,0(r13)
   21cc4:	5bc00015 	stw	r15,0(r11)
   21cc8:	4b800015 	stw	r14,0(r9)
   21ccc:	18c00404 	addi	r3,r3,16
   21cd0:	39c00404 	addi	r7,r7,16
   21cd4:	42000404 	addi	r8,r8,16
   21cd8:	6b400404 	addi	r13,r13,16
   21cdc:	63000404 	addi	r12,r12,16
   21ce0:	5ac00404 	addi	r11,r11,16
   21ce4:	52800404 	addi	r10,r10,16
   21ce8:	4a400404 	addi	r9,r9,16
   21cec:	1c3fef1e 	bne	r3,r16,21cac <__alt_data_end+0xfffe960c>
   21cf0:	89c00044 	addi	r7,r17,1
   21cf4:	380e913a 	slli	r7,r7,4
   21cf8:	310003cc 	andi	r4,r6,15
   21cfc:	02c000c4 	movi	r11,3
   21d00:	11c7883a 	add	r3,r2,r7
   21d04:	29cb883a 	add	r5,r5,r7
   21d08:	5900212e 	bgeu	r11,r4,21d90 <memcpy+0x140>
   21d0c:	1813883a 	mov	r9,r3
   21d10:	2811883a 	mov	r8,r5
   21d14:	200f883a 	mov	r7,r4
   21d18:	42800017 	ldw	r10,0(r8)
   21d1c:	4a400104 	addi	r9,r9,4
   21d20:	39ffff04 	addi	r7,r7,-4
   21d24:	4abfff15 	stw	r10,-4(r9)
   21d28:	42000104 	addi	r8,r8,4
   21d2c:	59fffa36 	bltu	r11,r7,21d18 <__alt_data_end+0xfffe9678>
   21d30:	213fff04 	addi	r4,r4,-4
   21d34:	2008d0ba 	srli	r4,r4,2
   21d38:	318000cc 	andi	r6,r6,3
   21d3c:	21000044 	addi	r4,r4,1
   21d40:	2109883a 	add	r4,r4,r4
   21d44:	2109883a 	add	r4,r4,r4
   21d48:	1907883a 	add	r3,r3,r4
   21d4c:	290b883a 	add	r5,r5,r4
   21d50:	30000626 	beq	r6,zero,21d6c <memcpy+0x11c>
   21d54:	198d883a 	add	r6,r3,r6
   21d58:	29c00003 	ldbu	r7,0(r5)
   21d5c:	18c00044 	addi	r3,r3,1
   21d60:	29400044 	addi	r5,r5,1
   21d64:	19ffffc5 	stb	r7,-1(r3)
   21d68:	19bffb1e 	bne	r3,r6,21d58 <__alt_data_end+0xfffe96b8>
   21d6c:	dfc00217 	ldw	ra,8(sp)
   21d70:	dc400117 	ldw	r17,4(sp)
   21d74:	dc000017 	ldw	r16,0(sp)
   21d78:	dec00304 	addi	sp,sp,12
   21d7c:	f800283a 	ret
   21d80:	2007883a 	mov	r3,r4
   21d84:	003ff206 	br	21d50 <__alt_data_end+0xfffe96b0>
   21d88:	2007883a 	mov	r3,r4
   21d8c:	003ff106 	br	21d54 <__alt_data_end+0xfffe96b4>
   21d90:	200d883a 	mov	r6,r4
   21d94:	003fee06 	br	21d50 <__alt_data_end+0xfffe96b0>

00021d98 <memmove>:
   21d98:	2005883a 	mov	r2,r4
   21d9c:	29000b2e 	bgeu	r5,r4,21dcc <memmove+0x34>
   21da0:	298f883a 	add	r7,r5,r6
   21da4:	21c0092e 	bgeu	r4,r7,21dcc <memmove+0x34>
   21da8:	2187883a 	add	r3,r4,r6
   21dac:	198bc83a 	sub	r5,r3,r6
   21db0:	30004826 	beq	r6,zero,21ed4 <memmove+0x13c>
   21db4:	39ffffc4 	addi	r7,r7,-1
   21db8:	39000003 	ldbu	r4,0(r7)
   21dbc:	18ffffc4 	addi	r3,r3,-1
   21dc0:	19000005 	stb	r4,0(r3)
   21dc4:	28fffb1e 	bne	r5,r3,21db4 <__alt_data_end+0xfffe9714>
   21dc8:	f800283a 	ret
   21dcc:	00c003c4 	movi	r3,15
   21dd0:	1980412e 	bgeu	r3,r6,21ed8 <memmove+0x140>
   21dd4:	2886b03a 	or	r3,r5,r2
   21dd8:	18c000cc 	andi	r3,r3,3
   21ddc:	1800401e 	bne	r3,zero,21ee0 <memmove+0x148>
   21de0:	33fffc04 	addi	r15,r6,-16
   21de4:	781ed13a 	srli	r15,r15,4
   21de8:	28c00104 	addi	r3,r5,4
   21dec:	13400104 	addi	r13,r2,4
   21df0:	781c913a 	slli	r14,r15,4
   21df4:	2b000204 	addi	r12,r5,8
   21df8:	12c00204 	addi	r11,r2,8
   21dfc:	73800504 	addi	r14,r14,20
   21e00:	2a800304 	addi	r10,r5,12
   21e04:	12400304 	addi	r9,r2,12
   21e08:	2b9d883a 	add	r14,r5,r14
   21e0c:	2811883a 	mov	r8,r5
   21e10:	100f883a 	mov	r7,r2
   21e14:	41000017 	ldw	r4,0(r8)
   21e18:	39c00404 	addi	r7,r7,16
   21e1c:	18c00404 	addi	r3,r3,16
   21e20:	393ffc15 	stw	r4,-16(r7)
   21e24:	193ffc17 	ldw	r4,-16(r3)
   21e28:	6b400404 	addi	r13,r13,16
   21e2c:	5ac00404 	addi	r11,r11,16
   21e30:	693ffc15 	stw	r4,-16(r13)
   21e34:	61000017 	ldw	r4,0(r12)
   21e38:	4a400404 	addi	r9,r9,16
   21e3c:	42000404 	addi	r8,r8,16
   21e40:	593ffc15 	stw	r4,-16(r11)
   21e44:	51000017 	ldw	r4,0(r10)
   21e48:	63000404 	addi	r12,r12,16
   21e4c:	52800404 	addi	r10,r10,16
   21e50:	493ffc15 	stw	r4,-16(r9)
   21e54:	1bbfef1e 	bne	r3,r14,21e14 <__alt_data_end+0xfffe9774>
   21e58:	79000044 	addi	r4,r15,1
   21e5c:	2008913a 	slli	r4,r4,4
   21e60:	328003cc 	andi	r10,r6,15
   21e64:	02c000c4 	movi	r11,3
   21e68:	1107883a 	add	r3,r2,r4
   21e6c:	290b883a 	add	r5,r5,r4
   21e70:	5a801e2e 	bgeu	r11,r10,21eec <memmove+0x154>
   21e74:	1813883a 	mov	r9,r3
   21e78:	2811883a 	mov	r8,r5
   21e7c:	500f883a 	mov	r7,r10
   21e80:	41000017 	ldw	r4,0(r8)
   21e84:	4a400104 	addi	r9,r9,4
   21e88:	39ffff04 	addi	r7,r7,-4
   21e8c:	493fff15 	stw	r4,-4(r9)
   21e90:	42000104 	addi	r8,r8,4
   21e94:	59fffa36 	bltu	r11,r7,21e80 <__alt_data_end+0xfffe97e0>
   21e98:	513fff04 	addi	r4,r10,-4
   21e9c:	2008d0ba 	srli	r4,r4,2
   21ea0:	318000cc 	andi	r6,r6,3
   21ea4:	21000044 	addi	r4,r4,1
   21ea8:	2109883a 	add	r4,r4,r4
   21eac:	2109883a 	add	r4,r4,r4
   21eb0:	1907883a 	add	r3,r3,r4
   21eb4:	290b883a 	add	r5,r5,r4
   21eb8:	30000b26 	beq	r6,zero,21ee8 <memmove+0x150>
   21ebc:	198d883a 	add	r6,r3,r6
   21ec0:	29c00003 	ldbu	r7,0(r5)
   21ec4:	18c00044 	addi	r3,r3,1
   21ec8:	29400044 	addi	r5,r5,1
   21ecc:	19ffffc5 	stb	r7,-1(r3)
   21ed0:	19bffb1e 	bne	r3,r6,21ec0 <__alt_data_end+0xfffe9820>
   21ed4:	f800283a 	ret
   21ed8:	1007883a 	mov	r3,r2
   21edc:	003ff606 	br	21eb8 <__alt_data_end+0xfffe9818>
   21ee0:	1007883a 	mov	r3,r2
   21ee4:	003ff506 	br	21ebc <__alt_data_end+0xfffe981c>
   21ee8:	f800283a 	ret
   21eec:	500d883a 	mov	r6,r10
   21ef0:	003ff106 	br	21eb8 <__alt_data_end+0xfffe9818>

00021ef4 <memset>:
   21ef4:	20c000cc 	andi	r3,r4,3
   21ef8:	2005883a 	mov	r2,r4
   21efc:	18004426 	beq	r3,zero,22010 <memset+0x11c>
   21f00:	31ffffc4 	addi	r7,r6,-1
   21f04:	30004026 	beq	r6,zero,22008 <memset+0x114>
   21f08:	2813883a 	mov	r9,r5
   21f0c:	200d883a 	mov	r6,r4
   21f10:	2007883a 	mov	r3,r4
   21f14:	00000406 	br	21f28 <memset+0x34>
   21f18:	3a3fffc4 	addi	r8,r7,-1
   21f1c:	31800044 	addi	r6,r6,1
   21f20:	38003926 	beq	r7,zero,22008 <memset+0x114>
   21f24:	400f883a 	mov	r7,r8
   21f28:	18c00044 	addi	r3,r3,1
   21f2c:	32400005 	stb	r9,0(r6)
   21f30:	1a0000cc 	andi	r8,r3,3
   21f34:	403ff81e 	bne	r8,zero,21f18 <__alt_data_end+0xfffe9878>
   21f38:	010000c4 	movi	r4,3
   21f3c:	21c02d2e 	bgeu	r4,r7,21ff4 <memset+0x100>
   21f40:	29003fcc 	andi	r4,r5,255
   21f44:	200c923a 	slli	r6,r4,8
   21f48:	3108b03a 	or	r4,r6,r4
   21f4c:	200c943a 	slli	r6,r4,16
   21f50:	218cb03a 	or	r6,r4,r6
   21f54:	010003c4 	movi	r4,15
   21f58:	21c0182e 	bgeu	r4,r7,21fbc <memset+0xc8>
   21f5c:	3b3ffc04 	addi	r12,r7,-16
   21f60:	6018d13a 	srli	r12,r12,4
   21f64:	1a000104 	addi	r8,r3,4
   21f68:	1ac00204 	addi	r11,r3,8
   21f6c:	6008913a 	slli	r4,r12,4
   21f70:	1a800304 	addi	r10,r3,12
   21f74:	1813883a 	mov	r9,r3
   21f78:	21000504 	addi	r4,r4,20
   21f7c:	1909883a 	add	r4,r3,r4
   21f80:	49800015 	stw	r6,0(r9)
   21f84:	41800015 	stw	r6,0(r8)
   21f88:	59800015 	stw	r6,0(r11)
   21f8c:	51800015 	stw	r6,0(r10)
   21f90:	42000404 	addi	r8,r8,16
   21f94:	4a400404 	addi	r9,r9,16
   21f98:	5ac00404 	addi	r11,r11,16
   21f9c:	52800404 	addi	r10,r10,16
   21fa0:	413ff71e 	bne	r8,r4,21f80 <__alt_data_end+0xfffe98e0>
   21fa4:	63000044 	addi	r12,r12,1
   21fa8:	6018913a 	slli	r12,r12,4
   21fac:	39c003cc 	andi	r7,r7,15
   21fb0:	010000c4 	movi	r4,3
   21fb4:	1b07883a 	add	r3,r3,r12
   21fb8:	21c00e2e 	bgeu	r4,r7,21ff4 <memset+0x100>
   21fbc:	1813883a 	mov	r9,r3
   21fc0:	3811883a 	mov	r8,r7
   21fc4:	010000c4 	movi	r4,3
   21fc8:	49800015 	stw	r6,0(r9)
   21fcc:	423fff04 	addi	r8,r8,-4
   21fd0:	4a400104 	addi	r9,r9,4
   21fd4:	223ffc36 	bltu	r4,r8,21fc8 <__alt_data_end+0xfffe9928>
   21fd8:	393fff04 	addi	r4,r7,-4
   21fdc:	2008d0ba 	srli	r4,r4,2
   21fe0:	39c000cc 	andi	r7,r7,3
   21fe4:	21000044 	addi	r4,r4,1
   21fe8:	2109883a 	add	r4,r4,r4
   21fec:	2109883a 	add	r4,r4,r4
   21ff0:	1907883a 	add	r3,r3,r4
   21ff4:	38000526 	beq	r7,zero,2200c <memset+0x118>
   21ff8:	19cf883a 	add	r7,r3,r7
   21ffc:	19400005 	stb	r5,0(r3)
   22000:	18c00044 	addi	r3,r3,1
   22004:	38fffd1e 	bne	r7,r3,21ffc <__alt_data_end+0xfffe995c>
   22008:	f800283a 	ret
   2200c:	f800283a 	ret
   22010:	2007883a 	mov	r3,r4
   22014:	300f883a 	mov	r7,r6
   22018:	003fc706 	br	21f38 <__alt_data_end+0xfffe9898>

0002201c <_realloc_r>:
   2201c:	defff604 	addi	sp,sp,-40
   22020:	dc800215 	stw	r18,8(sp)
   22024:	dfc00915 	stw	ra,36(sp)
   22028:	df000815 	stw	fp,32(sp)
   2202c:	ddc00715 	stw	r23,28(sp)
   22030:	dd800615 	stw	r22,24(sp)
   22034:	dd400515 	stw	r21,20(sp)
   22038:	dd000415 	stw	r20,16(sp)
   2203c:	dcc00315 	stw	r19,12(sp)
   22040:	dc400115 	stw	r17,4(sp)
   22044:	dc000015 	stw	r16,0(sp)
   22048:	3025883a 	mov	r18,r6
   2204c:	2800b726 	beq	r5,zero,2232c <_realloc_r+0x310>
   22050:	282b883a 	mov	r21,r5
   22054:	2029883a 	mov	r20,r4
   22058:	00239e80 	call	239e8 <__malloc_lock>
   2205c:	a8bfff17 	ldw	r2,-4(r21)
   22060:	043fff04 	movi	r16,-4
   22064:	90c002c4 	addi	r3,r18,11
   22068:	01000584 	movi	r4,22
   2206c:	acfffe04 	addi	r19,r21,-8
   22070:	1420703a 	and	r16,r2,r16
   22074:	20c0332e 	bgeu	r4,r3,22144 <_realloc_r+0x128>
   22078:	047ffe04 	movi	r17,-8
   2207c:	1c62703a 	and	r17,r3,r17
   22080:	8807883a 	mov	r3,r17
   22084:	88005816 	blt	r17,zero,221e8 <_realloc_r+0x1cc>
   22088:	8c805736 	bltu	r17,r18,221e8 <_realloc_r+0x1cc>
   2208c:	80c0300e 	bge	r16,r3,22150 <_realloc_r+0x134>
   22090:	070000b4 	movhi	fp,2
   22094:	e71cc904 	addi	fp,fp,29476
   22098:	e1c00217 	ldw	r7,8(fp)
   2209c:	9c09883a 	add	r4,r19,r16
   220a0:	22000117 	ldw	r8,4(r4)
   220a4:	21c06326 	beq	r4,r7,22234 <_realloc_r+0x218>
   220a8:	017fff84 	movi	r5,-2
   220ac:	414a703a 	and	r5,r8,r5
   220b0:	214b883a 	add	r5,r4,r5
   220b4:	29800117 	ldw	r6,4(r5)
   220b8:	3180004c 	andi	r6,r6,1
   220bc:	30003f26 	beq	r6,zero,221bc <_realloc_r+0x1a0>
   220c0:	1080004c 	andi	r2,r2,1
   220c4:	10008326 	beq	r2,zero,222d4 <_realloc_r+0x2b8>
   220c8:	900b883a 	mov	r5,r18
   220cc:	a009883a 	mov	r4,r20
   220d0:	00213600 	call	21360 <_malloc_r>
   220d4:	1025883a 	mov	r18,r2
   220d8:	10011e26 	beq	r2,zero,22554 <_realloc_r+0x538>
   220dc:	a93fff17 	ldw	r4,-4(r21)
   220e0:	10fffe04 	addi	r3,r2,-8
   220e4:	00bfff84 	movi	r2,-2
   220e8:	2084703a 	and	r2,r4,r2
   220ec:	9885883a 	add	r2,r19,r2
   220f0:	1880ee26 	beq	r3,r2,224ac <_realloc_r+0x490>
   220f4:	81bfff04 	addi	r6,r16,-4
   220f8:	00800904 	movi	r2,36
   220fc:	1180b836 	bltu	r2,r6,223e0 <_realloc_r+0x3c4>
   22100:	00c004c4 	movi	r3,19
   22104:	19809636 	bltu	r3,r6,22360 <_realloc_r+0x344>
   22108:	9005883a 	mov	r2,r18
   2210c:	a807883a 	mov	r3,r21
   22110:	19000017 	ldw	r4,0(r3)
   22114:	11000015 	stw	r4,0(r2)
   22118:	19000117 	ldw	r4,4(r3)
   2211c:	11000115 	stw	r4,4(r2)
   22120:	18c00217 	ldw	r3,8(r3)
   22124:	10c00215 	stw	r3,8(r2)
   22128:	a80b883a 	mov	r5,r21
   2212c:	a009883a 	mov	r4,r20
   22130:	0022de80 	call	22de8 <_free_r>
   22134:	a009883a 	mov	r4,r20
   22138:	0023a0c0 	call	23a0c <__malloc_unlock>
   2213c:	9005883a 	mov	r2,r18
   22140:	00001206 	br	2218c <_realloc_r+0x170>
   22144:	00c00404 	movi	r3,16
   22148:	1823883a 	mov	r17,r3
   2214c:	003fce06 	br	22088 <__alt_data_end+0xfffe99e8>
   22150:	a825883a 	mov	r18,r21
   22154:	8445c83a 	sub	r2,r16,r17
   22158:	00c003c4 	movi	r3,15
   2215c:	18802636 	bltu	r3,r2,221f8 <_realloc_r+0x1dc>
   22160:	99800117 	ldw	r6,4(r19)
   22164:	9c07883a 	add	r3,r19,r16
   22168:	3180004c 	andi	r6,r6,1
   2216c:	3420b03a 	or	r16,r6,r16
   22170:	9c000115 	stw	r16,4(r19)
   22174:	18800117 	ldw	r2,4(r3)
   22178:	10800054 	ori	r2,r2,1
   2217c:	18800115 	stw	r2,4(r3)
   22180:	a009883a 	mov	r4,r20
   22184:	0023a0c0 	call	23a0c <__malloc_unlock>
   22188:	9005883a 	mov	r2,r18
   2218c:	dfc00917 	ldw	ra,36(sp)
   22190:	df000817 	ldw	fp,32(sp)
   22194:	ddc00717 	ldw	r23,28(sp)
   22198:	dd800617 	ldw	r22,24(sp)
   2219c:	dd400517 	ldw	r21,20(sp)
   221a0:	dd000417 	ldw	r20,16(sp)
   221a4:	dcc00317 	ldw	r19,12(sp)
   221a8:	dc800217 	ldw	r18,8(sp)
   221ac:	dc400117 	ldw	r17,4(sp)
   221b0:	dc000017 	ldw	r16,0(sp)
   221b4:	dec00a04 	addi	sp,sp,40
   221b8:	f800283a 	ret
   221bc:	017fff04 	movi	r5,-4
   221c0:	414a703a 	and	r5,r8,r5
   221c4:	814d883a 	add	r6,r16,r5
   221c8:	30c01f16 	blt	r6,r3,22248 <_realloc_r+0x22c>
   221cc:	20800317 	ldw	r2,12(r4)
   221d0:	20c00217 	ldw	r3,8(r4)
   221d4:	a825883a 	mov	r18,r21
   221d8:	3021883a 	mov	r16,r6
   221dc:	18800315 	stw	r2,12(r3)
   221e0:	10c00215 	stw	r3,8(r2)
   221e4:	003fdb06 	br	22154 <__alt_data_end+0xfffe9ab4>
   221e8:	00800304 	movi	r2,12
   221ec:	a0800015 	stw	r2,0(r20)
   221f0:	0005883a 	mov	r2,zero
   221f4:	003fe506 	br	2218c <__alt_data_end+0xfffe9aec>
   221f8:	98c00117 	ldw	r3,4(r19)
   221fc:	9c4b883a 	add	r5,r19,r17
   22200:	11000054 	ori	r4,r2,1
   22204:	18c0004c 	andi	r3,r3,1
   22208:	1c62b03a 	or	r17,r3,r17
   2220c:	9c400115 	stw	r17,4(r19)
   22210:	29000115 	stw	r4,4(r5)
   22214:	2885883a 	add	r2,r5,r2
   22218:	10c00117 	ldw	r3,4(r2)
   2221c:	29400204 	addi	r5,r5,8
   22220:	a009883a 	mov	r4,r20
   22224:	18c00054 	ori	r3,r3,1
   22228:	10c00115 	stw	r3,4(r2)
   2222c:	0022de80 	call	22de8 <_free_r>
   22230:	003fd306 	br	22180 <__alt_data_end+0xfffe9ae0>
   22234:	017fff04 	movi	r5,-4
   22238:	414a703a 	and	r5,r8,r5
   2223c:	89800404 	addi	r6,r17,16
   22240:	8151883a 	add	r8,r16,r5
   22244:	4180590e 	bge	r8,r6,223ac <_realloc_r+0x390>
   22248:	1080004c 	andi	r2,r2,1
   2224c:	103f9e1e 	bne	r2,zero,220c8 <__alt_data_end+0xfffe9a28>
   22250:	adbffe17 	ldw	r22,-8(r21)
   22254:	00bfff04 	movi	r2,-4
   22258:	9dadc83a 	sub	r22,r19,r22
   2225c:	b1800117 	ldw	r6,4(r22)
   22260:	3084703a 	and	r2,r6,r2
   22264:	20002026 	beq	r4,zero,222e8 <_realloc_r+0x2cc>
   22268:	80af883a 	add	r23,r16,r2
   2226c:	b96f883a 	add	r23,r23,r5
   22270:	21c05f26 	beq	r4,r7,223f0 <_realloc_r+0x3d4>
   22274:	b8c01c16 	blt	r23,r3,222e8 <_realloc_r+0x2cc>
   22278:	20800317 	ldw	r2,12(r4)
   2227c:	20c00217 	ldw	r3,8(r4)
   22280:	81bfff04 	addi	r6,r16,-4
   22284:	01000904 	movi	r4,36
   22288:	18800315 	stw	r2,12(r3)
   2228c:	10c00215 	stw	r3,8(r2)
   22290:	b0c00217 	ldw	r3,8(r22)
   22294:	b0800317 	ldw	r2,12(r22)
   22298:	b4800204 	addi	r18,r22,8
   2229c:	18800315 	stw	r2,12(r3)
   222a0:	10c00215 	stw	r3,8(r2)
   222a4:	21801b36 	bltu	r4,r6,22314 <_realloc_r+0x2f8>
   222a8:	008004c4 	movi	r2,19
   222ac:	1180352e 	bgeu	r2,r6,22384 <_realloc_r+0x368>
   222b0:	a8800017 	ldw	r2,0(r21)
   222b4:	b0800215 	stw	r2,8(r22)
   222b8:	a8800117 	ldw	r2,4(r21)
   222bc:	b0800315 	stw	r2,12(r22)
   222c0:	008006c4 	movi	r2,27
   222c4:	11807f36 	bltu	r2,r6,224c4 <_realloc_r+0x4a8>
   222c8:	b0800404 	addi	r2,r22,16
   222cc:	ad400204 	addi	r21,r21,8
   222d0:	00002d06 	br	22388 <_realloc_r+0x36c>
   222d4:	adbffe17 	ldw	r22,-8(r21)
   222d8:	00bfff04 	movi	r2,-4
   222dc:	9dadc83a 	sub	r22,r19,r22
   222e0:	b1000117 	ldw	r4,4(r22)
   222e4:	2084703a 	and	r2,r4,r2
   222e8:	b03f7726 	beq	r22,zero,220c8 <__alt_data_end+0xfffe9a28>
   222ec:	80af883a 	add	r23,r16,r2
   222f0:	b8ff7516 	blt	r23,r3,220c8 <__alt_data_end+0xfffe9a28>
   222f4:	b0800317 	ldw	r2,12(r22)
   222f8:	b0c00217 	ldw	r3,8(r22)
   222fc:	81bfff04 	addi	r6,r16,-4
   22300:	01000904 	movi	r4,36
   22304:	18800315 	stw	r2,12(r3)
   22308:	10c00215 	stw	r3,8(r2)
   2230c:	b4800204 	addi	r18,r22,8
   22310:	21bfe52e 	bgeu	r4,r6,222a8 <__alt_data_end+0xfffe9c08>
   22314:	a80b883a 	mov	r5,r21
   22318:	9009883a 	mov	r4,r18
   2231c:	0021d980 	call	21d98 <memmove>
   22320:	b821883a 	mov	r16,r23
   22324:	b027883a 	mov	r19,r22
   22328:	003f8a06 	br	22154 <__alt_data_end+0xfffe9ab4>
   2232c:	300b883a 	mov	r5,r6
   22330:	dfc00917 	ldw	ra,36(sp)
   22334:	df000817 	ldw	fp,32(sp)
   22338:	ddc00717 	ldw	r23,28(sp)
   2233c:	dd800617 	ldw	r22,24(sp)
   22340:	dd400517 	ldw	r21,20(sp)
   22344:	dd000417 	ldw	r20,16(sp)
   22348:	dcc00317 	ldw	r19,12(sp)
   2234c:	dc800217 	ldw	r18,8(sp)
   22350:	dc400117 	ldw	r17,4(sp)
   22354:	dc000017 	ldw	r16,0(sp)
   22358:	dec00a04 	addi	sp,sp,40
   2235c:	00213601 	jmpi	21360 <_malloc_r>
   22360:	a8c00017 	ldw	r3,0(r21)
   22364:	90c00015 	stw	r3,0(r18)
   22368:	a8c00117 	ldw	r3,4(r21)
   2236c:	90c00115 	stw	r3,4(r18)
   22370:	00c006c4 	movi	r3,27
   22374:	19804536 	bltu	r3,r6,2248c <_realloc_r+0x470>
   22378:	90800204 	addi	r2,r18,8
   2237c:	a8c00204 	addi	r3,r21,8
   22380:	003f6306 	br	22110 <__alt_data_end+0xfffe9a70>
   22384:	9005883a 	mov	r2,r18
   22388:	a8c00017 	ldw	r3,0(r21)
   2238c:	b821883a 	mov	r16,r23
   22390:	b027883a 	mov	r19,r22
   22394:	10c00015 	stw	r3,0(r2)
   22398:	a8c00117 	ldw	r3,4(r21)
   2239c:	10c00115 	stw	r3,4(r2)
   223a0:	a8c00217 	ldw	r3,8(r21)
   223a4:	10c00215 	stw	r3,8(r2)
   223a8:	003f6a06 	br	22154 <__alt_data_end+0xfffe9ab4>
   223ac:	9c67883a 	add	r19,r19,r17
   223b0:	4445c83a 	sub	r2,r8,r17
   223b4:	e4c00215 	stw	r19,8(fp)
   223b8:	10800054 	ori	r2,r2,1
   223bc:	98800115 	stw	r2,4(r19)
   223c0:	a8bfff17 	ldw	r2,-4(r21)
   223c4:	a009883a 	mov	r4,r20
   223c8:	1080004c 	andi	r2,r2,1
   223cc:	1462b03a 	or	r17,r2,r17
   223d0:	ac7fff15 	stw	r17,-4(r21)
   223d4:	0023a0c0 	call	23a0c <__malloc_unlock>
   223d8:	a805883a 	mov	r2,r21
   223dc:	003f6b06 	br	2218c <__alt_data_end+0xfffe9aec>
   223e0:	a80b883a 	mov	r5,r21
   223e4:	9009883a 	mov	r4,r18
   223e8:	0021d980 	call	21d98 <memmove>
   223ec:	003f4e06 	br	22128 <__alt_data_end+0xfffe9a88>
   223f0:	89000404 	addi	r4,r17,16
   223f4:	b93fbc16 	blt	r23,r4,222e8 <__alt_data_end+0xfffe9c48>
   223f8:	b0800317 	ldw	r2,12(r22)
   223fc:	b0c00217 	ldw	r3,8(r22)
   22400:	81bfff04 	addi	r6,r16,-4
   22404:	01000904 	movi	r4,36
   22408:	18800315 	stw	r2,12(r3)
   2240c:	10c00215 	stw	r3,8(r2)
   22410:	b4800204 	addi	r18,r22,8
   22414:	21804336 	bltu	r4,r6,22524 <_realloc_r+0x508>
   22418:	008004c4 	movi	r2,19
   2241c:	11803f2e 	bgeu	r2,r6,2251c <_realloc_r+0x500>
   22420:	a8800017 	ldw	r2,0(r21)
   22424:	b0800215 	stw	r2,8(r22)
   22428:	a8800117 	ldw	r2,4(r21)
   2242c:	b0800315 	stw	r2,12(r22)
   22430:	008006c4 	movi	r2,27
   22434:	11803f36 	bltu	r2,r6,22534 <_realloc_r+0x518>
   22438:	b0800404 	addi	r2,r22,16
   2243c:	ad400204 	addi	r21,r21,8
   22440:	a8c00017 	ldw	r3,0(r21)
   22444:	10c00015 	stw	r3,0(r2)
   22448:	a8c00117 	ldw	r3,4(r21)
   2244c:	10c00115 	stw	r3,4(r2)
   22450:	a8c00217 	ldw	r3,8(r21)
   22454:	10c00215 	stw	r3,8(r2)
   22458:	b447883a 	add	r3,r22,r17
   2245c:	bc45c83a 	sub	r2,r23,r17
   22460:	e0c00215 	stw	r3,8(fp)
   22464:	10800054 	ori	r2,r2,1
   22468:	18800115 	stw	r2,4(r3)
   2246c:	b0800117 	ldw	r2,4(r22)
   22470:	a009883a 	mov	r4,r20
   22474:	1080004c 	andi	r2,r2,1
   22478:	1462b03a 	or	r17,r2,r17
   2247c:	b4400115 	stw	r17,4(r22)
   22480:	0023a0c0 	call	23a0c <__malloc_unlock>
   22484:	9005883a 	mov	r2,r18
   22488:	003f4006 	br	2218c <__alt_data_end+0xfffe9aec>
   2248c:	a8c00217 	ldw	r3,8(r21)
   22490:	90c00215 	stw	r3,8(r18)
   22494:	a8c00317 	ldw	r3,12(r21)
   22498:	90c00315 	stw	r3,12(r18)
   2249c:	30801126 	beq	r6,r2,224e4 <_realloc_r+0x4c8>
   224a0:	90800404 	addi	r2,r18,16
   224a4:	a8c00404 	addi	r3,r21,16
   224a8:	003f1906 	br	22110 <__alt_data_end+0xfffe9a70>
   224ac:	90ffff17 	ldw	r3,-4(r18)
   224b0:	00bfff04 	movi	r2,-4
   224b4:	a825883a 	mov	r18,r21
   224b8:	1884703a 	and	r2,r3,r2
   224bc:	80a1883a 	add	r16,r16,r2
   224c0:	003f2406 	br	22154 <__alt_data_end+0xfffe9ab4>
   224c4:	a8800217 	ldw	r2,8(r21)
   224c8:	b0800415 	stw	r2,16(r22)
   224cc:	a8800317 	ldw	r2,12(r21)
   224d0:	b0800515 	stw	r2,20(r22)
   224d4:	31000a26 	beq	r6,r4,22500 <_realloc_r+0x4e4>
   224d8:	b0800604 	addi	r2,r22,24
   224dc:	ad400404 	addi	r21,r21,16
   224e0:	003fa906 	br	22388 <__alt_data_end+0xfffe9ce8>
   224e4:	a9000417 	ldw	r4,16(r21)
   224e8:	90800604 	addi	r2,r18,24
   224ec:	a8c00604 	addi	r3,r21,24
   224f0:	91000415 	stw	r4,16(r18)
   224f4:	a9000517 	ldw	r4,20(r21)
   224f8:	91000515 	stw	r4,20(r18)
   224fc:	003f0406 	br	22110 <__alt_data_end+0xfffe9a70>
   22500:	a8c00417 	ldw	r3,16(r21)
   22504:	ad400604 	addi	r21,r21,24
   22508:	b0800804 	addi	r2,r22,32
   2250c:	b0c00615 	stw	r3,24(r22)
   22510:	a8ffff17 	ldw	r3,-4(r21)
   22514:	b0c00715 	stw	r3,28(r22)
   22518:	003f9b06 	br	22388 <__alt_data_end+0xfffe9ce8>
   2251c:	9005883a 	mov	r2,r18
   22520:	003fc706 	br	22440 <__alt_data_end+0xfffe9da0>
   22524:	a80b883a 	mov	r5,r21
   22528:	9009883a 	mov	r4,r18
   2252c:	0021d980 	call	21d98 <memmove>
   22530:	003fc906 	br	22458 <__alt_data_end+0xfffe9db8>
   22534:	a8800217 	ldw	r2,8(r21)
   22538:	b0800415 	stw	r2,16(r22)
   2253c:	a8800317 	ldw	r2,12(r21)
   22540:	b0800515 	stw	r2,20(r22)
   22544:	31000726 	beq	r6,r4,22564 <_realloc_r+0x548>
   22548:	b0800604 	addi	r2,r22,24
   2254c:	ad400404 	addi	r21,r21,16
   22550:	003fbb06 	br	22440 <__alt_data_end+0xfffe9da0>
   22554:	a009883a 	mov	r4,r20
   22558:	0023a0c0 	call	23a0c <__malloc_unlock>
   2255c:	0005883a 	mov	r2,zero
   22560:	003f0a06 	br	2218c <__alt_data_end+0xfffe9aec>
   22564:	a8c00417 	ldw	r3,16(r21)
   22568:	ad400604 	addi	r21,r21,24
   2256c:	b0800804 	addi	r2,r22,32
   22570:	b0c00615 	stw	r3,24(r22)
   22574:	a8ffff17 	ldw	r3,-4(r21)
   22578:	b0c00715 	stw	r3,28(r22)
   2257c:	003fb006 	br	22440 <__alt_data_end+0xfffe9da0>

00022580 <_sbrk_r>:
   22580:	defffd04 	addi	sp,sp,-12
   22584:	dc000015 	stw	r16,0(sp)
   22588:	040000f4 	movhi	r16,3
   2258c:	dc400115 	stw	r17,4(sp)
   22590:	84298d04 	addi	r16,r16,-22988
   22594:	2023883a 	mov	r17,r4
   22598:	2809883a 	mov	r4,r5
   2259c:	dfc00215 	stw	ra,8(sp)
   225a0:	80000015 	stw	zero,0(r16)
   225a4:	0023bf40 	call	23bf4 <sbrk>
   225a8:	00ffffc4 	movi	r3,-1
   225ac:	10c00526 	beq	r2,r3,225c4 <_sbrk_r+0x44>
   225b0:	dfc00217 	ldw	ra,8(sp)
   225b4:	dc400117 	ldw	r17,4(sp)
   225b8:	dc000017 	ldw	r16,0(sp)
   225bc:	dec00304 	addi	sp,sp,12
   225c0:	f800283a 	ret
   225c4:	80c00017 	ldw	r3,0(r16)
   225c8:	183ff926 	beq	r3,zero,225b0 <__alt_data_end+0xfffe9f10>
   225cc:	88c00015 	stw	r3,0(r17)
   225d0:	003ff706 	br	225b0 <__alt_data_end+0xfffe9f10>

000225d4 <__sread>:
   225d4:	defffe04 	addi	sp,sp,-8
   225d8:	dc000015 	stw	r16,0(sp)
   225dc:	2821883a 	mov	r16,r5
   225e0:	2940038f 	ldh	r5,14(r5)
   225e4:	dfc00115 	stw	ra,4(sp)
   225e8:	00233140 	call	23314 <_read_r>
   225ec:	10000716 	blt	r2,zero,2260c <__sread+0x38>
   225f0:	80c01417 	ldw	r3,80(r16)
   225f4:	1887883a 	add	r3,r3,r2
   225f8:	80c01415 	stw	r3,80(r16)
   225fc:	dfc00117 	ldw	ra,4(sp)
   22600:	dc000017 	ldw	r16,0(sp)
   22604:	dec00204 	addi	sp,sp,8
   22608:	f800283a 	ret
   2260c:	80c0030b 	ldhu	r3,12(r16)
   22610:	18fbffcc 	andi	r3,r3,61439
   22614:	80c0030d 	sth	r3,12(r16)
   22618:	dfc00117 	ldw	ra,4(sp)
   2261c:	dc000017 	ldw	r16,0(sp)
   22620:	dec00204 	addi	sp,sp,8
   22624:	f800283a 	ret

00022628 <__seofread>:
   22628:	0005883a 	mov	r2,zero
   2262c:	f800283a 	ret

00022630 <__swrite>:
   22630:	2880030b 	ldhu	r2,12(r5)
   22634:	defffb04 	addi	sp,sp,-20
   22638:	dcc00315 	stw	r19,12(sp)
   2263c:	dc800215 	stw	r18,8(sp)
   22640:	dc400115 	stw	r17,4(sp)
   22644:	dc000015 	stw	r16,0(sp)
   22648:	dfc00415 	stw	ra,16(sp)
   2264c:	10c0400c 	andi	r3,r2,256
   22650:	2821883a 	mov	r16,r5
   22654:	2023883a 	mov	r17,r4
   22658:	3025883a 	mov	r18,r6
   2265c:	3827883a 	mov	r19,r7
   22660:	18000526 	beq	r3,zero,22678 <__swrite+0x48>
   22664:	2940038f 	ldh	r5,14(r5)
   22668:	01c00084 	movi	r7,2
   2266c:	000d883a 	mov	r6,zero
   22670:	00230f80 	call	230f8 <_lseek_r>
   22674:	8080030b 	ldhu	r2,12(r16)
   22678:	8140038f 	ldh	r5,14(r16)
   2267c:	10bbffcc 	andi	r2,r2,61439
   22680:	980f883a 	mov	r7,r19
   22684:	900d883a 	mov	r6,r18
   22688:	8809883a 	mov	r4,r17
   2268c:	8080030d 	sth	r2,12(r16)
   22690:	dfc00417 	ldw	ra,16(sp)
   22694:	dcc00317 	ldw	r19,12(sp)
   22698:	dc800217 	ldw	r18,8(sp)
   2269c:	dc400117 	ldw	r17,4(sp)
   226a0:	dc000017 	ldw	r16,0(sp)
   226a4:	dec00504 	addi	sp,sp,20
   226a8:	00227101 	jmpi	22710 <_write_r>

000226ac <__sseek>:
   226ac:	defffe04 	addi	sp,sp,-8
   226b0:	dc000015 	stw	r16,0(sp)
   226b4:	2821883a 	mov	r16,r5
   226b8:	2940038f 	ldh	r5,14(r5)
   226bc:	dfc00115 	stw	ra,4(sp)
   226c0:	00230f80 	call	230f8 <_lseek_r>
   226c4:	00ffffc4 	movi	r3,-1
   226c8:	10c00826 	beq	r2,r3,226ec <__sseek+0x40>
   226cc:	80c0030b 	ldhu	r3,12(r16)
   226d0:	80801415 	stw	r2,80(r16)
   226d4:	18c40014 	ori	r3,r3,4096
   226d8:	80c0030d 	sth	r3,12(r16)
   226dc:	dfc00117 	ldw	ra,4(sp)
   226e0:	dc000017 	ldw	r16,0(sp)
   226e4:	dec00204 	addi	sp,sp,8
   226e8:	f800283a 	ret
   226ec:	80c0030b 	ldhu	r3,12(r16)
   226f0:	18fbffcc 	andi	r3,r3,61439
   226f4:	80c0030d 	sth	r3,12(r16)
   226f8:	dfc00117 	ldw	ra,4(sp)
   226fc:	dc000017 	ldw	r16,0(sp)
   22700:	dec00204 	addi	sp,sp,8
   22704:	f800283a 	ret

00022708 <__sclose>:
   22708:	2940038f 	ldh	r5,14(r5)
   2270c:	00228c41 	jmpi	228c4 <_close_r>

00022710 <_write_r>:
   22710:	defffd04 	addi	sp,sp,-12
   22714:	2805883a 	mov	r2,r5
   22718:	dc000015 	stw	r16,0(sp)
   2271c:	040000f4 	movhi	r16,3
   22720:	dc400115 	stw	r17,4(sp)
   22724:	300b883a 	mov	r5,r6
   22728:	84298d04 	addi	r16,r16,-22988
   2272c:	2023883a 	mov	r17,r4
   22730:	380d883a 	mov	r6,r7
   22734:	1009883a 	mov	r4,r2
   22738:	dfc00215 	stw	ra,8(sp)
   2273c:	80000015 	stw	zero,0(r16)
   22740:	0023d100 	call	23d10 <write>
   22744:	00ffffc4 	movi	r3,-1
   22748:	10c00526 	beq	r2,r3,22760 <_write_r+0x50>
   2274c:	dfc00217 	ldw	ra,8(sp)
   22750:	dc400117 	ldw	r17,4(sp)
   22754:	dc000017 	ldw	r16,0(sp)
   22758:	dec00304 	addi	sp,sp,12
   2275c:	f800283a 	ret
   22760:	80c00017 	ldw	r3,0(r16)
   22764:	183ff926 	beq	r3,zero,2274c <__alt_data_end+0xfffea0ac>
   22768:	88c00015 	stw	r3,0(r17)
   2276c:	003ff706 	br	2274c <__alt_data_end+0xfffea0ac>

00022770 <__swsetup_r>:
   22770:	008000f4 	movhi	r2,3
   22774:	defffd04 	addi	sp,sp,-12
   22778:	10a29604 	addi	r2,r2,-30120
   2277c:	dc400115 	stw	r17,4(sp)
   22780:	2023883a 	mov	r17,r4
   22784:	11000017 	ldw	r4,0(r2)
   22788:	dc000015 	stw	r16,0(sp)
   2278c:	dfc00215 	stw	ra,8(sp)
   22790:	2821883a 	mov	r16,r5
   22794:	20000226 	beq	r4,zero,227a0 <__swsetup_r+0x30>
   22798:	20800e17 	ldw	r2,56(r4)
   2279c:	10003126 	beq	r2,zero,22864 <__swsetup_r+0xf4>
   227a0:	8080030b 	ldhu	r2,12(r16)
   227a4:	10c0020c 	andi	r3,r2,8
   227a8:	1009883a 	mov	r4,r2
   227ac:	18000f26 	beq	r3,zero,227ec <__swsetup_r+0x7c>
   227b0:	80c00417 	ldw	r3,16(r16)
   227b4:	18001526 	beq	r3,zero,2280c <__swsetup_r+0x9c>
   227b8:	1100004c 	andi	r4,r2,1
   227bc:	20001c1e 	bne	r4,zero,22830 <__swsetup_r+0xc0>
   227c0:	1080008c 	andi	r2,r2,2
   227c4:	1000291e 	bne	r2,zero,2286c <__swsetup_r+0xfc>
   227c8:	80800517 	ldw	r2,20(r16)
   227cc:	80800215 	stw	r2,8(r16)
   227d0:	18001c26 	beq	r3,zero,22844 <__swsetup_r+0xd4>
   227d4:	0005883a 	mov	r2,zero
   227d8:	dfc00217 	ldw	ra,8(sp)
   227dc:	dc400117 	ldw	r17,4(sp)
   227e0:	dc000017 	ldw	r16,0(sp)
   227e4:	dec00304 	addi	sp,sp,12
   227e8:	f800283a 	ret
   227ec:	2080040c 	andi	r2,r4,16
   227f0:	10002e26 	beq	r2,zero,228ac <__swsetup_r+0x13c>
   227f4:	2080010c 	andi	r2,r4,4
   227f8:	10001e1e 	bne	r2,zero,22874 <__swsetup_r+0x104>
   227fc:	80c00417 	ldw	r3,16(r16)
   22800:	20800214 	ori	r2,r4,8
   22804:	8080030d 	sth	r2,12(r16)
   22808:	183feb1e 	bne	r3,zero,227b8 <__alt_data_end+0xfffea118>
   2280c:	1100a00c 	andi	r4,r2,640
   22810:	01408004 	movi	r5,512
   22814:	217fe826 	beq	r4,r5,227b8 <__alt_data_end+0xfffea118>
   22818:	800b883a 	mov	r5,r16
   2281c:	8809883a 	mov	r4,r17
   22820:	00231580 	call	23158 <__smakebuf_r>
   22824:	8080030b 	ldhu	r2,12(r16)
   22828:	80c00417 	ldw	r3,16(r16)
   2282c:	003fe206 	br	227b8 <__alt_data_end+0xfffea118>
   22830:	80800517 	ldw	r2,20(r16)
   22834:	80000215 	stw	zero,8(r16)
   22838:	0085c83a 	sub	r2,zero,r2
   2283c:	80800615 	stw	r2,24(r16)
   22840:	183fe41e 	bne	r3,zero,227d4 <__alt_data_end+0xfffea134>
   22844:	80c0030b 	ldhu	r3,12(r16)
   22848:	0005883a 	mov	r2,zero
   2284c:	1900200c 	andi	r4,r3,128
   22850:	203fe126 	beq	r4,zero,227d8 <__alt_data_end+0xfffea138>
   22854:	18c01014 	ori	r3,r3,64
   22858:	80c0030d 	sth	r3,12(r16)
   2285c:	00bfffc4 	movi	r2,-1
   22860:	003fdd06 	br	227d8 <__alt_data_end+0xfffea138>
   22864:	0020cc00 	call	20cc0 <__sinit>
   22868:	003fcd06 	br	227a0 <__alt_data_end+0xfffea100>
   2286c:	0005883a 	mov	r2,zero
   22870:	003fd606 	br	227cc <__alt_data_end+0xfffea12c>
   22874:	81400c17 	ldw	r5,48(r16)
   22878:	28000626 	beq	r5,zero,22894 <__swsetup_r+0x124>
   2287c:	80801004 	addi	r2,r16,64
   22880:	28800326 	beq	r5,r2,22890 <__swsetup_r+0x120>
   22884:	8809883a 	mov	r4,r17
   22888:	0022de80 	call	22de8 <_free_r>
   2288c:	8100030b 	ldhu	r4,12(r16)
   22890:	80000c15 	stw	zero,48(r16)
   22894:	80c00417 	ldw	r3,16(r16)
   22898:	00bff6c4 	movi	r2,-37
   2289c:	1108703a 	and	r4,r2,r4
   228a0:	80000115 	stw	zero,4(r16)
   228a4:	80c00015 	stw	r3,0(r16)
   228a8:	003fd506 	br	22800 <__alt_data_end+0xfffea160>
   228ac:	00800244 	movi	r2,9
   228b0:	88800015 	stw	r2,0(r17)
   228b4:	20801014 	ori	r2,r4,64
   228b8:	8080030d 	sth	r2,12(r16)
   228bc:	00bfffc4 	movi	r2,-1
   228c0:	003fc506 	br	227d8 <__alt_data_end+0xfffea138>

000228c4 <_close_r>:
   228c4:	defffd04 	addi	sp,sp,-12
   228c8:	dc000015 	stw	r16,0(sp)
   228cc:	040000f4 	movhi	r16,3
   228d0:	dc400115 	stw	r17,4(sp)
   228d4:	84298d04 	addi	r16,r16,-22988
   228d8:	2023883a 	mov	r17,r4
   228dc:	2809883a 	mov	r4,r5
   228e0:	dfc00215 	stw	ra,8(sp)
   228e4:	80000015 	stw	zero,0(r16)
   228e8:	00234880 	call	23488 <close>
   228ec:	00ffffc4 	movi	r3,-1
   228f0:	10c00526 	beq	r2,r3,22908 <_close_r+0x44>
   228f4:	dfc00217 	ldw	ra,8(sp)
   228f8:	dc400117 	ldw	r17,4(sp)
   228fc:	dc000017 	ldw	r16,0(sp)
   22900:	dec00304 	addi	sp,sp,12
   22904:	f800283a 	ret
   22908:	80c00017 	ldw	r3,0(r16)
   2290c:	183ff926 	beq	r3,zero,228f4 <__alt_data_end+0xfffea254>
   22910:	88c00015 	stw	r3,0(r17)
   22914:	003ff706 	br	228f4 <__alt_data_end+0xfffea254>

00022918 <_fclose_r>:
   22918:	28003926 	beq	r5,zero,22a00 <_fclose_r+0xe8>
   2291c:	defffc04 	addi	sp,sp,-16
   22920:	dc400115 	stw	r17,4(sp)
   22924:	dc000015 	stw	r16,0(sp)
   22928:	dfc00315 	stw	ra,12(sp)
   2292c:	dc800215 	stw	r18,8(sp)
   22930:	2023883a 	mov	r17,r4
   22934:	2821883a 	mov	r16,r5
   22938:	20000226 	beq	r4,zero,22944 <_fclose_r+0x2c>
   2293c:	20800e17 	ldw	r2,56(r4)
   22940:	10002726 	beq	r2,zero,229e0 <_fclose_r+0xc8>
   22944:	8080030f 	ldh	r2,12(r16)
   22948:	1000071e 	bne	r2,zero,22968 <_fclose_r+0x50>
   2294c:	0005883a 	mov	r2,zero
   22950:	dfc00317 	ldw	ra,12(sp)
   22954:	dc800217 	ldw	r18,8(sp)
   22958:	dc400117 	ldw	r17,4(sp)
   2295c:	dc000017 	ldw	r16,0(sp)
   22960:	dec00404 	addi	sp,sp,16
   22964:	f800283a 	ret
   22968:	800b883a 	mov	r5,r16
   2296c:	8809883a 	mov	r4,r17
   22970:	0022a1c0 	call	22a1c <__sflush_r>
   22974:	1025883a 	mov	r18,r2
   22978:	80800b17 	ldw	r2,44(r16)
   2297c:	10000426 	beq	r2,zero,22990 <_fclose_r+0x78>
   22980:	81400717 	ldw	r5,28(r16)
   22984:	8809883a 	mov	r4,r17
   22988:	103ee83a 	callr	r2
   2298c:	10001616 	blt	r2,zero,229e8 <_fclose_r+0xd0>
   22990:	8080030b 	ldhu	r2,12(r16)
   22994:	1080200c 	andi	r2,r2,128
   22998:	1000151e 	bne	r2,zero,229f0 <_fclose_r+0xd8>
   2299c:	81400c17 	ldw	r5,48(r16)
   229a0:	28000526 	beq	r5,zero,229b8 <_fclose_r+0xa0>
   229a4:	80801004 	addi	r2,r16,64
   229a8:	28800226 	beq	r5,r2,229b4 <_fclose_r+0x9c>
   229ac:	8809883a 	mov	r4,r17
   229b0:	0022de80 	call	22de8 <_free_r>
   229b4:	80000c15 	stw	zero,48(r16)
   229b8:	81401117 	ldw	r5,68(r16)
   229bc:	28000326 	beq	r5,zero,229cc <_fclose_r+0xb4>
   229c0:	8809883a 	mov	r4,r17
   229c4:	0022de80 	call	22de8 <_free_r>
   229c8:	80001115 	stw	zero,68(r16)
   229cc:	0020cd00 	call	20cd0 <__sfp_lock_acquire>
   229d0:	8000030d 	sth	zero,12(r16)
   229d4:	0020cd40 	call	20cd4 <__sfp_lock_release>
   229d8:	9005883a 	mov	r2,r18
   229dc:	003fdc06 	br	22950 <__alt_data_end+0xfffea2b0>
   229e0:	0020cc00 	call	20cc0 <__sinit>
   229e4:	003fd706 	br	22944 <__alt_data_end+0xfffea2a4>
   229e8:	04bfffc4 	movi	r18,-1
   229ec:	003fe806 	br	22990 <__alt_data_end+0xfffea2f0>
   229f0:	81400417 	ldw	r5,16(r16)
   229f4:	8809883a 	mov	r4,r17
   229f8:	0022de80 	call	22de8 <_free_r>
   229fc:	003fe706 	br	2299c <__alt_data_end+0xfffea2fc>
   22a00:	0005883a 	mov	r2,zero
   22a04:	f800283a 	ret

00022a08 <fclose>:
   22a08:	008000f4 	movhi	r2,3
   22a0c:	10a29604 	addi	r2,r2,-30120
   22a10:	200b883a 	mov	r5,r4
   22a14:	11000017 	ldw	r4,0(r2)
   22a18:	00229181 	jmpi	22918 <_fclose_r>

00022a1c <__sflush_r>:
   22a1c:	2880030b 	ldhu	r2,12(r5)
   22a20:	defffb04 	addi	sp,sp,-20
   22a24:	dcc00315 	stw	r19,12(sp)
   22a28:	dc400115 	stw	r17,4(sp)
   22a2c:	dfc00415 	stw	ra,16(sp)
   22a30:	dc800215 	stw	r18,8(sp)
   22a34:	dc000015 	stw	r16,0(sp)
   22a38:	10c0020c 	andi	r3,r2,8
   22a3c:	2823883a 	mov	r17,r5
   22a40:	2027883a 	mov	r19,r4
   22a44:	1800311e 	bne	r3,zero,22b0c <__sflush_r+0xf0>
   22a48:	28c00117 	ldw	r3,4(r5)
   22a4c:	10820014 	ori	r2,r2,2048
   22a50:	2880030d 	sth	r2,12(r5)
   22a54:	00c04b0e 	bge	zero,r3,22b84 <__sflush_r+0x168>
   22a58:	8a000a17 	ldw	r8,40(r17)
   22a5c:	40002326 	beq	r8,zero,22aec <__sflush_r+0xd0>
   22a60:	9c000017 	ldw	r16,0(r19)
   22a64:	10c4000c 	andi	r3,r2,4096
   22a68:	98000015 	stw	zero,0(r19)
   22a6c:	18004826 	beq	r3,zero,22b90 <__sflush_r+0x174>
   22a70:	89801417 	ldw	r6,80(r17)
   22a74:	10c0010c 	andi	r3,r2,4
   22a78:	18000626 	beq	r3,zero,22a94 <__sflush_r+0x78>
   22a7c:	88c00117 	ldw	r3,4(r17)
   22a80:	88800c17 	ldw	r2,48(r17)
   22a84:	30cdc83a 	sub	r6,r6,r3
   22a88:	10000226 	beq	r2,zero,22a94 <__sflush_r+0x78>
   22a8c:	88800f17 	ldw	r2,60(r17)
   22a90:	308dc83a 	sub	r6,r6,r2
   22a94:	89400717 	ldw	r5,28(r17)
   22a98:	000f883a 	mov	r7,zero
   22a9c:	9809883a 	mov	r4,r19
   22aa0:	403ee83a 	callr	r8
   22aa4:	00ffffc4 	movi	r3,-1
   22aa8:	10c04426 	beq	r2,r3,22bbc <__sflush_r+0x1a0>
   22aac:	88c0030b 	ldhu	r3,12(r17)
   22ab0:	89000417 	ldw	r4,16(r17)
   22ab4:	88000115 	stw	zero,4(r17)
   22ab8:	197dffcc 	andi	r5,r3,63487
   22abc:	8940030d 	sth	r5,12(r17)
   22ac0:	89000015 	stw	r4,0(r17)
   22ac4:	18c4000c 	andi	r3,r3,4096
   22ac8:	18002c1e 	bne	r3,zero,22b7c <__sflush_r+0x160>
   22acc:	89400c17 	ldw	r5,48(r17)
   22ad0:	9c000015 	stw	r16,0(r19)
   22ad4:	28000526 	beq	r5,zero,22aec <__sflush_r+0xd0>
   22ad8:	88801004 	addi	r2,r17,64
   22adc:	28800226 	beq	r5,r2,22ae8 <__sflush_r+0xcc>
   22ae0:	9809883a 	mov	r4,r19
   22ae4:	0022de80 	call	22de8 <_free_r>
   22ae8:	88000c15 	stw	zero,48(r17)
   22aec:	0005883a 	mov	r2,zero
   22af0:	dfc00417 	ldw	ra,16(sp)
   22af4:	dcc00317 	ldw	r19,12(sp)
   22af8:	dc800217 	ldw	r18,8(sp)
   22afc:	dc400117 	ldw	r17,4(sp)
   22b00:	dc000017 	ldw	r16,0(sp)
   22b04:	dec00504 	addi	sp,sp,20
   22b08:	f800283a 	ret
   22b0c:	2c800417 	ldw	r18,16(r5)
   22b10:	903ff626 	beq	r18,zero,22aec <__alt_data_end+0xfffea44c>
   22b14:	2c000017 	ldw	r16,0(r5)
   22b18:	108000cc 	andi	r2,r2,3
   22b1c:	2c800015 	stw	r18,0(r5)
   22b20:	84a1c83a 	sub	r16,r16,r18
   22b24:	1000131e 	bne	r2,zero,22b74 <__sflush_r+0x158>
   22b28:	28800517 	ldw	r2,20(r5)
   22b2c:	88800215 	stw	r2,8(r17)
   22b30:	04000316 	blt	zero,r16,22b40 <__sflush_r+0x124>
   22b34:	003fed06 	br	22aec <__alt_data_end+0xfffea44c>
   22b38:	90a5883a 	add	r18,r18,r2
   22b3c:	043feb0e 	bge	zero,r16,22aec <__alt_data_end+0xfffea44c>
   22b40:	88800917 	ldw	r2,36(r17)
   22b44:	89400717 	ldw	r5,28(r17)
   22b48:	800f883a 	mov	r7,r16
   22b4c:	900d883a 	mov	r6,r18
   22b50:	9809883a 	mov	r4,r19
   22b54:	103ee83a 	callr	r2
   22b58:	80a1c83a 	sub	r16,r16,r2
   22b5c:	00bff616 	blt	zero,r2,22b38 <__alt_data_end+0xfffea498>
   22b60:	88c0030b 	ldhu	r3,12(r17)
   22b64:	00bfffc4 	movi	r2,-1
   22b68:	18c01014 	ori	r3,r3,64
   22b6c:	88c0030d 	sth	r3,12(r17)
   22b70:	003fdf06 	br	22af0 <__alt_data_end+0xfffea450>
   22b74:	0005883a 	mov	r2,zero
   22b78:	003fec06 	br	22b2c <__alt_data_end+0xfffea48c>
   22b7c:	88801415 	stw	r2,80(r17)
   22b80:	003fd206 	br	22acc <__alt_data_end+0xfffea42c>
   22b84:	28c00f17 	ldw	r3,60(r5)
   22b88:	00ffb316 	blt	zero,r3,22a58 <__alt_data_end+0xfffea3b8>
   22b8c:	003fd706 	br	22aec <__alt_data_end+0xfffea44c>
   22b90:	89400717 	ldw	r5,28(r17)
   22b94:	000d883a 	mov	r6,zero
   22b98:	01c00044 	movi	r7,1
   22b9c:	9809883a 	mov	r4,r19
   22ba0:	403ee83a 	callr	r8
   22ba4:	100d883a 	mov	r6,r2
   22ba8:	00bfffc4 	movi	r2,-1
   22bac:	30801426 	beq	r6,r2,22c00 <__sflush_r+0x1e4>
   22bb0:	8880030b 	ldhu	r2,12(r17)
   22bb4:	8a000a17 	ldw	r8,40(r17)
   22bb8:	003fae06 	br	22a74 <__alt_data_end+0xfffea3d4>
   22bbc:	98c00017 	ldw	r3,0(r19)
   22bc0:	183fba26 	beq	r3,zero,22aac <__alt_data_end+0xfffea40c>
   22bc4:	01000744 	movi	r4,29
   22bc8:	19000626 	beq	r3,r4,22be4 <__sflush_r+0x1c8>
   22bcc:	01000584 	movi	r4,22
   22bd0:	19000426 	beq	r3,r4,22be4 <__sflush_r+0x1c8>
   22bd4:	88c0030b 	ldhu	r3,12(r17)
   22bd8:	18c01014 	ori	r3,r3,64
   22bdc:	88c0030d 	sth	r3,12(r17)
   22be0:	003fc306 	br	22af0 <__alt_data_end+0xfffea450>
   22be4:	8880030b 	ldhu	r2,12(r17)
   22be8:	88c00417 	ldw	r3,16(r17)
   22bec:	88000115 	stw	zero,4(r17)
   22bf0:	10bdffcc 	andi	r2,r2,63487
   22bf4:	8880030d 	sth	r2,12(r17)
   22bf8:	88c00015 	stw	r3,0(r17)
   22bfc:	003fb306 	br	22acc <__alt_data_end+0xfffea42c>
   22c00:	98800017 	ldw	r2,0(r19)
   22c04:	103fea26 	beq	r2,zero,22bb0 <__alt_data_end+0xfffea510>
   22c08:	00c00744 	movi	r3,29
   22c0c:	10c00226 	beq	r2,r3,22c18 <__sflush_r+0x1fc>
   22c10:	00c00584 	movi	r3,22
   22c14:	10c0031e 	bne	r2,r3,22c24 <__sflush_r+0x208>
   22c18:	9c000015 	stw	r16,0(r19)
   22c1c:	0005883a 	mov	r2,zero
   22c20:	003fb306 	br	22af0 <__alt_data_end+0xfffea450>
   22c24:	88c0030b 	ldhu	r3,12(r17)
   22c28:	3005883a 	mov	r2,r6
   22c2c:	18c01014 	ori	r3,r3,64
   22c30:	88c0030d 	sth	r3,12(r17)
   22c34:	003fae06 	br	22af0 <__alt_data_end+0xfffea450>

00022c38 <_fflush_r>:
   22c38:	defffd04 	addi	sp,sp,-12
   22c3c:	dc000115 	stw	r16,4(sp)
   22c40:	dfc00215 	stw	ra,8(sp)
   22c44:	2021883a 	mov	r16,r4
   22c48:	20000226 	beq	r4,zero,22c54 <_fflush_r+0x1c>
   22c4c:	20800e17 	ldw	r2,56(r4)
   22c50:	10000c26 	beq	r2,zero,22c84 <_fflush_r+0x4c>
   22c54:	2880030f 	ldh	r2,12(r5)
   22c58:	1000051e 	bne	r2,zero,22c70 <_fflush_r+0x38>
   22c5c:	0005883a 	mov	r2,zero
   22c60:	dfc00217 	ldw	ra,8(sp)
   22c64:	dc000117 	ldw	r16,4(sp)
   22c68:	dec00304 	addi	sp,sp,12
   22c6c:	f800283a 	ret
   22c70:	8009883a 	mov	r4,r16
   22c74:	dfc00217 	ldw	ra,8(sp)
   22c78:	dc000117 	ldw	r16,4(sp)
   22c7c:	dec00304 	addi	sp,sp,12
   22c80:	0022a1c1 	jmpi	22a1c <__sflush_r>
   22c84:	d9400015 	stw	r5,0(sp)
   22c88:	0020cc00 	call	20cc0 <__sinit>
   22c8c:	d9400017 	ldw	r5,0(sp)
   22c90:	003ff006 	br	22c54 <__alt_data_end+0xfffea5b4>

00022c94 <fflush>:
   22c94:	20000526 	beq	r4,zero,22cac <fflush+0x18>
   22c98:	008000f4 	movhi	r2,3
   22c9c:	10a29604 	addi	r2,r2,-30120
   22ca0:	200b883a 	mov	r5,r4
   22ca4:	11000017 	ldw	r4,0(r2)
   22ca8:	0022c381 	jmpi	22c38 <_fflush_r>
   22cac:	008000f4 	movhi	r2,3
   22cb0:	10a29504 	addi	r2,r2,-30124
   22cb4:	11000017 	ldw	r4,0(r2)
   22cb8:	014000b4 	movhi	r5,2
   22cbc:	294b0e04 	addi	r5,r5,11320
   22cc0:	002129c1 	jmpi	2129c <_fwalk_reent>

00022cc4 <_malloc_trim_r>:
   22cc4:	defffb04 	addi	sp,sp,-20
   22cc8:	dcc00315 	stw	r19,12(sp)
   22ccc:	04c000b4 	movhi	r19,2
   22cd0:	dc800215 	stw	r18,8(sp)
   22cd4:	dc400115 	stw	r17,4(sp)
   22cd8:	dc000015 	stw	r16,0(sp)
   22cdc:	dfc00415 	stw	ra,16(sp)
   22ce0:	2821883a 	mov	r16,r5
   22ce4:	9cdcc904 	addi	r19,r19,29476
   22ce8:	2025883a 	mov	r18,r4
   22cec:	00239e80 	call	239e8 <__malloc_lock>
   22cf0:	98800217 	ldw	r2,8(r19)
   22cf4:	14400117 	ldw	r17,4(r2)
   22cf8:	00bfff04 	movi	r2,-4
   22cfc:	88a2703a 	and	r17,r17,r2
   22d00:	8c21c83a 	sub	r16,r17,r16
   22d04:	8403fbc4 	addi	r16,r16,4079
   22d08:	8020d33a 	srli	r16,r16,12
   22d0c:	0083ffc4 	movi	r2,4095
   22d10:	843fffc4 	addi	r16,r16,-1
   22d14:	8020933a 	slli	r16,r16,12
   22d18:	1400060e 	bge	r2,r16,22d34 <_malloc_trim_r+0x70>
   22d1c:	000b883a 	mov	r5,zero
   22d20:	9009883a 	mov	r4,r18
   22d24:	00225800 	call	22580 <_sbrk_r>
   22d28:	98c00217 	ldw	r3,8(r19)
   22d2c:	1c47883a 	add	r3,r3,r17
   22d30:	10c00a26 	beq	r2,r3,22d5c <_malloc_trim_r+0x98>
   22d34:	9009883a 	mov	r4,r18
   22d38:	0023a0c0 	call	23a0c <__malloc_unlock>
   22d3c:	0005883a 	mov	r2,zero
   22d40:	dfc00417 	ldw	ra,16(sp)
   22d44:	dcc00317 	ldw	r19,12(sp)
   22d48:	dc800217 	ldw	r18,8(sp)
   22d4c:	dc400117 	ldw	r17,4(sp)
   22d50:	dc000017 	ldw	r16,0(sp)
   22d54:	dec00504 	addi	sp,sp,20
   22d58:	f800283a 	ret
   22d5c:	040bc83a 	sub	r5,zero,r16
   22d60:	9009883a 	mov	r4,r18
   22d64:	00225800 	call	22580 <_sbrk_r>
   22d68:	00ffffc4 	movi	r3,-1
   22d6c:	10c00d26 	beq	r2,r3,22da4 <_malloc_trim_r+0xe0>
   22d70:	00c000f4 	movhi	r3,3
   22d74:	18e99504 	addi	r3,r3,-22956
   22d78:	18800017 	ldw	r2,0(r3)
   22d7c:	99000217 	ldw	r4,8(r19)
   22d80:	8c23c83a 	sub	r17,r17,r16
   22d84:	8c400054 	ori	r17,r17,1
   22d88:	1421c83a 	sub	r16,r2,r16
   22d8c:	24400115 	stw	r17,4(r4)
   22d90:	9009883a 	mov	r4,r18
   22d94:	1c000015 	stw	r16,0(r3)
   22d98:	0023a0c0 	call	23a0c <__malloc_unlock>
   22d9c:	00800044 	movi	r2,1
   22da0:	003fe706 	br	22d40 <__alt_data_end+0xfffea6a0>
   22da4:	000b883a 	mov	r5,zero
   22da8:	9009883a 	mov	r4,r18
   22dac:	00225800 	call	22580 <_sbrk_r>
   22db0:	99000217 	ldw	r4,8(r19)
   22db4:	014003c4 	movi	r5,15
   22db8:	1107c83a 	sub	r3,r2,r4
   22dbc:	28ffdd0e 	bge	r5,r3,22d34 <__alt_data_end+0xfffea694>
   22dc0:	014000f4 	movhi	r5,3
   22dc4:	29629704 	addi	r5,r5,-30116
   22dc8:	29400017 	ldw	r5,0(r5)
   22dcc:	18c00054 	ori	r3,r3,1
   22dd0:	20c00115 	stw	r3,4(r4)
   22dd4:	00c000f4 	movhi	r3,3
   22dd8:	1145c83a 	sub	r2,r2,r5
   22ddc:	18e99504 	addi	r3,r3,-22956
   22de0:	18800015 	stw	r2,0(r3)
   22de4:	003fd306 	br	22d34 <__alt_data_end+0xfffea694>

00022de8 <_free_r>:
   22de8:	28004126 	beq	r5,zero,22ef0 <_free_r+0x108>
   22dec:	defffd04 	addi	sp,sp,-12
   22df0:	dc400115 	stw	r17,4(sp)
   22df4:	dc000015 	stw	r16,0(sp)
   22df8:	2023883a 	mov	r17,r4
   22dfc:	2821883a 	mov	r16,r5
   22e00:	dfc00215 	stw	ra,8(sp)
   22e04:	00239e80 	call	239e8 <__malloc_lock>
   22e08:	81ffff17 	ldw	r7,-4(r16)
   22e0c:	00bfff84 	movi	r2,-2
   22e10:	010000b4 	movhi	r4,2
   22e14:	81bffe04 	addi	r6,r16,-8
   22e18:	3884703a 	and	r2,r7,r2
   22e1c:	211cc904 	addi	r4,r4,29476
   22e20:	308b883a 	add	r5,r6,r2
   22e24:	2a400117 	ldw	r9,4(r5)
   22e28:	22000217 	ldw	r8,8(r4)
   22e2c:	00ffff04 	movi	r3,-4
   22e30:	48c6703a 	and	r3,r9,r3
   22e34:	2a005726 	beq	r5,r8,22f94 <_free_r+0x1ac>
   22e38:	28c00115 	stw	r3,4(r5)
   22e3c:	39c0004c 	andi	r7,r7,1
   22e40:	3800091e 	bne	r7,zero,22e68 <_free_r+0x80>
   22e44:	823ffe17 	ldw	r8,-8(r16)
   22e48:	22400204 	addi	r9,r4,8
   22e4c:	320dc83a 	sub	r6,r6,r8
   22e50:	31c00217 	ldw	r7,8(r6)
   22e54:	1205883a 	add	r2,r2,r8
   22e58:	3a406526 	beq	r7,r9,22ff0 <_free_r+0x208>
   22e5c:	32000317 	ldw	r8,12(r6)
   22e60:	3a000315 	stw	r8,12(r7)
   22e64:	41c00215 	stw	r7,8(r8)
   22e68:	28cf883a 	add	r7,r5,r3
   22e6c:	39c00117 	ldw	r7,4(r7)
   22e70:	39c0004c 	andi	r7,r7,1
   22e74:	38003a26 	beq	r7,zero,22f60 <_free_r+0x178>
   22e78:	10c00054 	ori	r3,r2,1
   22e7c:	30c00115 	stw	r3,4(r6)
   22e80:	3087883a 	add	r3,r6,r2
   22e84:	18800015 	stw	r2,0(r3)
   22e88:	00c07fc4 	movi	r3,511
   22e8c:	18801936 	bltu	r3,r2,22ef4 <_free_r+0x10c>
   22e90:	1004d0fa 	srli	r2,r2,3
   22e94:	01c00044 	movi	r7,1
   22e98:	21400117 	ldw	r5,4(r4)
   22e9c:	10c00044 	addi	r3,r2,1
   22ea0:	18c7883a 	add	r3,r3,r3
   22ea4:	1005d0ba 	srai	r2,r2,2
   22ea8:	18c7883a 	add	r3,r3,r3
   22eac:	18c7883a 	add	r3,r3,r3
   22eb0:	1907883a 	add	r3,r3,r4
   22eb4:	3884983a 	sll	r2,r7,r2
   22eb8:	19c00017 	ldw	r7,0(r3)
   22ebc:	1a3ffe04 	addi	r8,r3,-8
   22ec0:	1144b03a 	or	r2,r2,r5
   22ec4:	32000315 	stw	r8,12(r6)
   22ec8:	31c00215 	stw	r7,8(r6)
   22ecc:	20800115 	stw	r2,4(r4)
   22ed0:	19800015 	stw	r6,0(r3)
   22ed4:	39800315 	stw	r6,12(r7)
   22ed8:	8809883a 	mov	r4,r17
   22edc:	dfc00217 	ldw	ra,8(sp)
   22ee0:	dc400117 	ldw	r17,4(sp)
   22ee4:	dc000017 	ldw	r16,0(sp)
   22ee8:	dec00304 	addi	sp,sp,12
   22eec:	0023a0c1 	jmpi	23a0c <__malloc_unlock>
   22ef0:	f800283a 	ret
   22ef4:	100ad27a 	srli	r5,r2,9
   22ef8:	00c00104 	movi	r3,4
   22efc:	19404a36 	bltu	r3,r5,23028 <_free_r+0x240>
   22f00:	100ad1ba 	srli	r5,r2,6
   22f04:	28c00e44 	addi	r3,r5,57
   22f08:	18c7883a 	add	r3,r3,r3
   22f0c:	29400e04 	addi	r5,r5,56
   22f10:	18c7883a 	add	r3,r3,r3
   22f14:	18c7883a 	add	r3,r3,r3
   22f18:	1909883a 	add	r4,r3,r4
   22f1c:	20c00017 	ldw	r3,0(r4)
   22f20:	01c000b4 	movhi	r7,2
   22f24:	213ffe04 	addi	r4,r4,-8
   22f28:	39dcc904 	addi	r7,r7,29476
   22f2c:	20c04426 	beq	r4,r3,23040 <_free_r+0x258>
   22f30:	01ffff04 	movi	r7,-4
   22f34:	19400117 	ldw	r5,4(r3)
   22f38:	29ca703a 	and	r5,r5,r7
   22f3c:	1140022e 	bgeu	r2,r5,22f48 <_free_r+0x160>
   22f40:	18c00217 	ldw	r3,8(r3)
   22f44:	20fffb1e 	bne	r4,r3,22f34 <__alt_data_end+0xfffea894>
   22f48:	19000317 	ldw	r4,12(r3)
   22f4c:	31000315 	stw	r4,12(r6)
   22f50:	30c00215 	stw	r3,8(r6)
   22f54:	21800215 	stw	r6,8(r4)
   22f58:	19800315 	stw	r6,12(r3)
   22f5c:	003fde06 	br	22ed8 <__alt_data_end+0xfffea838>
   22f60:	29c00217 	ldw	r7,8(r5)
   22f64:	10c5883a 	add	r2,r2,r3
   22f68:	00c000b4 	movhi	r3,2
   22f6c:	18dccb04 	addi	r3,r3,29484
   22f70:	38c03b26 	beq	r7,r3,23060 <_free_r+0x278>
   22f74:	2a000317 	ldw	r8,12(r5)
   22f78:	11400054 	ori	r5,r2,1
   22f7c:	3087883a 	add	r3,r6,r2
   22f80:	3a000315 	stw	r8,12(r7)
   22f84:	41c00215 	stw	r7,8(r8)
   22f88:	31400115 	stw	r5,4(r6)
   22f8c:	18800015 	stw	r2,0(r3)
   22f90:	003fbd06 	br	22e88 <__alt_data_end+0xfffea7e8>
   22f94:	39c0004c 	andi	r7,r7,1
   22f98:	10c5883a 	add	r2,r2,r3
   22f9c:	3800071e 	bne	r7,zero,22fbc <_free_r+0x1d4>
   22fa0:	81fffe17 	ldw	r7,-8(r16)
   22fa4:	31cdc83a 	sub	r6,r6,r7
   22fa8:	30c00317 	ldw	r3,12(r6)
   22fac:	31400217 	ldw	r5,8(r6)
   22fb0:	11c5883a 	add	r2,r2,r7
   22fb4:	28c00315 	stw	r3,12(r5)
   22fb8:	19400215 	stw	r5,8(r3)
   22fbc:	10c00054 	ori	r3,r2,1
   22fc0:	30c00115 	stw	r3,4(r6)
   22fc4:	00c000f4 	movhi	r3,3
   22fc8:	18e29804 	addi	r3,r3,-30112
   22fcc:	18c00017 	ldw	r3,0(r3)
   22fd0:	21800215 	stw	r6,8(r4)
   22fd4:	10ffc036 	bltu	r2,r3,22ed8 <__alt_data_end+0xfffea838>
   22fd8:	008000f4 	movhi	r2,3
   22fdc:	10a98c04 	addi	r2,r2,-22992
   22fe0:	11400017 	ldw	r5,0(r2)
   22fe4:	8809883a 	mov	r4,r17
   22fe8:	0022cc40 	call	22cc4 <_malloc_trim_r>
   22fec:	003fba06 	br	22ed8 <__alt_data_end+0xfffea838>
   22ff0:	28c9883a 	add	r4,r5,r3
   22ff4:	21000117 	ldw	r4,4(r4)
   22ff8:	2100004c 	andi	r4,r4,1
   22ffc:	2000391e 	bne	r4,zero,230e4 <_free_r+0x2fc>
   23000:	29c00217 	ldw	r7,8(r5)
   23004:	29000317 	ldw	r4,12(r5)
   23008:	1885883a 	add	r2,r3,r2
   2300c:	10c00054 	ori	r3,r2,1
   23010:	39000315 	stw	r4,12(r7)
   23014:	21c00215 	stw	r7,8(r4)
   23018:	30c00115 	stw	r3,4(r6)
   2301c:	308d883a 	add	r6,r6,r2
   23020:	30800015 	stw	r2,0(r6)
   23024:	003fac06 	br	22ed8 <__alt_data_end+0xfffea838>
   23028:	00c00504 	movi	r3,20
   2302c:	19401536 	bltu	r3,r5,23084 <_free_r+0x29c>
   23030:	28c01704 	addi	r3,r5,92
   23034:	18c7883a 	add	r3,r3,r3
   23038:	294016c4 	addi	r5,r5,91
   2303c:	003fb406 	br	22f10 <__alt_data_end+0xfffea870>
   23040:	280bd0ba 	srai	r5,r5,2
   23044:	00c00044 	movi	r3,1
   23048:	38800117 	ldw	r2,4(r7)
   2304c:	194a983a 	sll	r5,r3,r5
   23050:	2007883a 	mov	r3,r4
   23054:	2884b03a 	or	r2,r5,r2
   23058:	38800115 	stw	r2,4(r7)
   2305c:	003fbb06 	br	22f4c <__alt_data_end+0xfffea8ac>
   23060:	21800515 	stw	r6,20(r4)
   23064:	21800415 	stw	r6,16(r4)
   23068:	10c00054 	ori	r3,r2,1
   2306c:	31c00315 	stw	r7,12(r6)
   23070:	31c00215 	stw	r7,8(r6)
   23074:	30c00115 	stw	r3,4(r6)
   23078:	308d883a 	add	r6,r6,r2
   2307c:	30800015 	stw	r2,0(r6)
   23080:	003f9506 	br	22ed8 <__alt_data_end+0xfffea838>
   23084:	00c01504 	movi	r3,84
   23088:	19400536 	bltu	r3,r5,230a0 <_free_r+0x2b8>
   2308c:	100ad33a 	srli	r5,r2,12
   23090:	28c01bc4 	addi	r3,r5,111
   23094:	18c7883a 	add	r3,r3,r3
   23098:	29401b84 	addi	r5,r5,110
   2309c:	003f9c06 	br	22f10 <__alt_data_end+0xfffea870>
   230a0:	00c05504 	movi	r3,340
   230a4:	19400536 	bltu	r3,r5,230bc <_free_r+0x2d4>
   230a8:	100ad3fa 	srli	r5,r2,15
   230ac:	28c01e04 	addi	r3,r5,120
   230b0:	18c7883a 	add	r3,r3,r3
   230b4:	29401dc4 	addi	r5,r5,119
   230b8:	003f9506 	br	22f10 <__alt_data_end+0xfffea870>
   230bc:	00c15504 	movi	r3,1364
   230c0:	19400536 	bltu	r3,r5,230d8 <_free_r+0x2f0>
   230c4:	100ad4ba 	srli	r5,r2,18
   230c8:	28c01f44 	addi	r3,r5,125
   230cc:	18c7883a 	add	r3,r3,r3
   230d0:	29401f04 	addi	r5,r5,124
   230d4:	003f8e06 	br	22f10 <__alt_data_end+0xfffea870>
   230d8:	00c03f84 	movi	r3,254
   230dc:	01401f84 	movi	r5,126
   230e0:	003f8b06 	br	22f10 <__alt_data_end+0xfffea870>
   230e4:	10c00054 	ori	r3,r2,1
   230e8:	30c00115 	stw	r3,4(r6)
   230ec:	308d883a 	add	r6,r6,r2
   230f0:	30800015 	stw	r2,0(r6)
   230f4:	003f7806 	br	22ed8 <__alt_data_end+0xfffea838>

000230f8 <_lseek_r>:
   230f8:	defffd04 	addi	sp,sp,-12
   230fc:	2805883a 	mov	r2,r5
   23100:	dc000015 	stw	r16,0(sp)
   23104:	040000f4 	movhi	r16,3
   23108:	dc400115 	stw	r17,4(sp)
   2310c:	300b883a 	mov	r5,r6
   23110:	84298d04 	addi	r16,r16,-22988
   23114:	2023883a 	mov	r17,r4
   23118:	380d883a 	mov	r6,r7
   2311c:	1009883a 	mov	r4,r2
   23120:	dfc00215 	stw	ra,8(sp)
   23124:	80000015 	stw	zero,0(r16)
   23128:	00238900 	call	23890 <lseek>
   2312c:	00ffffc4 	movi	r3,-1
   23130:	10c00526 	beq	r2,r3,23148 <_lseek_r+0x50>
   23134:	dfc00217 	ldw	ra,8(sp)
   23138:	dc400117 	ldw	r17,4(sp)
   2313c:	dc000017 	ldw	r16,0(sp)
   23140:	dec00304 	addi	sp,sp,12
   23144:	f800283a 	ret
   23148:	80c00017 	ldw	r3,0(r16)
   2314c:	183ff926 	beq	r3,zero,23134 <__alt_data_end+0xfffeaa94>
   23150:	88c00015 	stw	r3,0(r17)
   23154:	003ff706 	br	23134 <__alt_data_end+0xfffeaa94>

00023158 <__smakebuf_r>:
   23158:	2880030b 	ldhu	r2,12(r5)
   2315c:	10c0008c 	andi	r3,r2,2
   23160:	1800411e 	bne	r3,zero,23268 <__smakebuf_r+0x110>
   23164:	deffec04 	addi	sp,sp,-80
   23168:	dc000f15 	stw	r16,60(sp)
   2316c:	2821883a 	mov	r16,r5
   23170:	2940038f 	ldh	r5,14(r5)
   23174:	dc401015 	stw	r17,64(sp)
   23178:	dfc01315 	stw	ra,76(sp)
   2317c:	dcc01215 	stw	r19,72(sp)
   23180:	dc801115 	stw	r18,68(sp)
   23184:	2023883a 	mov	r17,r4
   23188:	28001c16 	blt	r5,zero,231fc <__smakebuf_r+0xa4>
   2318c:	d80d883a 	mov	r6,sp
   23190:	00233740 	call	23374 <_fstat_r>
   23194:	10001816 	blt	r2,zero,231f8 <__smakebuf_r+0xa0>
   23198:	d8800117 	ldw	r2,4(sp)
   2319c:	00e00014 	movui	r3,32768
   231a0:	10bc000c 	andi	r2,r2,61440
   231a4:	14c80020 	cmpeqi	r19,r2,8192
   231a8:	10c03726 	beq	r2,r3,23288 <__smakebuf_r+0x130>
   231ac:	80c0030b 	ldhu	r3,12(r16)
   231b0:	18c20014 	ori	r3,r3,2048
   231b4:	80c0030d 	sth	r3,12(r16)
   231b8:	00c80004 	movi	r3,8192
   231bc:	10c0521e 	bne	r2,r3,23308 <__smakebuf_r+0x1b0>
   231c0:	8140038f 	ldh	r5,14(r16)
   231c4:	8809883a 	mov	r4,r17
   231c8:	00233d00 	call	233d0 <_isatty_r>
   231cc:	10004c26 	beq	r2,zero,23300 <__smakebuf_r+0x1a8>
   231d0:	8080030b 	ldhu	r2,12(r16)
   231d4:	80c010c4 	addi	r3,r16,67
   231d8:	80c00015 	stw	r3,0(r16)
   231dc:	10800054 	ori	r2,r2,1
   231e0:	8080030d 	sth	r2,12(r16)
   231e4:	00800044 	movi	r2,1
   231e8:	80c00415 	stw	r3,16(r16)
   231ec:	80800515 	stw	r2,20(r16)
   231f0:	04810004 	movi	r18,1024
   231f4:	00000706 	br	23214 <__smakebuf_r+0xbc>
   231f8:	8080030b 	ldhu	r2,12(r16)
   231fc:	10c0200c 	andi	r3,r2,128
   23200:	18001f1e 	bne	r3,zero,23280 <__smakebuf_r+0x128>
   23204:	04810004 	movi	r18,1024
   23208:	10820014 	ori	r2,r2,2048
   2320c:	8080030d 	sth	r2,12(r16)
   23210:	0027883a 	mov	r19,zero
   23214:	900b883a 	mov	r5,r18
   23218:	8809883a 	mov	r4,r17
   2321c:	00213600 	call	21360 <_malloc_r>
   23220:	10002c26 	beq	r2,zero,232d4 <__smakebuf_r+0x17c>
   23224:	80c0030b 	ldhu	r3,12(r16)
   23228:	010000b4 	movhi	r4,2
   2322c:	21025a04 	addi	r4,r4,2408
   23230:	89000f15 	stw	r4,60(r17)
   23234:	18c02014 	ori	r3,r3,128
   23238:	80c0030d 	sth	r3,12(r16)
   2323c:	80800015 	stw	r2,0(r16)
   23240:	80800415 	stw	r2,16(r16)
   23244:	84800515 	stw	r18,20(r16)
   23248:	98001a1e 	bne	r19,zero,232b4 <__smakebuf_r+0x15c>
   2324c:	dfc01317 	ldw	ra,76(sp)
   23250:	dcc01217 	ldw	r19,72(sp)
   23254:	dc801117 	ldw	r18,68(sp)
   23258:	dc401017 	ldw	r17,64(sp)
   2325c:	dc000f17 	ldw	r16,60(sp)
   23260:	dec01404 	addi	sp,sp,80
   23264:	f800283a 	ret
   23268:	288010c4 	addi	r2,r5,67
   2326c:	28800015 	stw	r2,0(r5)
   23270:	28800415 	stw	r2,16(r5)
   23274:	00800044 	movi	r2,1
   23278:	28800515 	stw	r2,20(r5)
   2327c:	f800283a 	ret
   23280:	04801004 	movi	r18,64
   23284:	003fe006 	br	23208 <__alt_data_end+0xfffeab68>
   23288:	81000a17 	ldw	r4,40(r16)
   2328c:	00c000b4 	movhi	r3,2
   23290:	18c9ab04 	addi	r3,r3,9900
   23294:	20ffc51e 	bne	r4,r3,231ac <__alt_data_end+0xfffeab0c>
   23298:	8080030b 	ldhu	r2,12(r16)
   2329c:	04810004 	movi	r18,1024
   232a0:	84801315 	stw	r18,76(r16)
   232a4:	1484b03a 	or	r2,r2,r18
   232a8:	8080030d 	sth	r2,12(r16)
   232ac:	0027883a 	mov	r19,zero
   232b0:	003fd806 	br	23214 <__alt_data_end+0xfffeab74>
   232b4:	8140038f 	ldh	r5,14(r16)
   232b8:	8809883a 	mov	r4,r17
   232bc:	00233d00 	call	233d0 <_isatty_r>
   232c0:	103fe226 	beq	r2,zero,2324c <__alt_data_end+0xfffeabac>
   232c4:	8080030b 	ldhu	r2,12(r16)
   232c8:	10800054 	ori	r2,r2,1
   232cc:	8080030d 	sth	r2,12(r16)
   232d0:	003fde06 	br	2324c <__alt_data_end+0xfffeabac>
   232d4:	8080030b 	ldhu	r2,12(r16)
   232d8:	10c0800c 	andi	r3,r2,512
   232dc:	183fdb1e 	bne	r3,zero,2324c <__alt_data_end+0xfffeabac>
   232e0:	10800094 	ori	r2,r2,2
   232e4:	80c010c4 	addi	r3,r16,67
   232e8:	8080030d 	sth	r2,12(r16)
   232ec:	00800044 	movi	r2,1
   232f0:	80c00015 	stw	r3,0(r16)
   232f4:	80c00415 	stw	r3,16(r16)
   232f8:	80800515 	stw	r2,20(r16)
   232fc:	003fd306 	br	2324c <__alt_data_end+0xfffeabac>
   23300:	04810004 	movi	r18,1024
   23304:	003fc306 	br	23214 <__alt_data_end+0xfffeab74>
   23308:	0027883a 	mov	r19,zero
   2330c:	04810004 	movi	r18,1024
   23310:	003fc006 	br	23214 <__alt_data_end+0xfffeab74>

00023314 <_read_r>:
   23314:	defffd04 	addi	sp,sp,-12
   23318:	2805883a 	mov	r2,r5
   2331c:	dc000015 	stw	r16,0(sp)
   23320:	040000f4 	movhi	r16,3
   23324:	dc400115 	stw	r17,4(sp)
   23328:	300b883a 	mov	r5,r6
   2332c:	84298d04 	addi	r16,r16,-22988
   23330:	2023883a 	mov	r17,r4
   23334:	380d883a 	mov	r6,r7
   23338:	1009883a 	mov	r4,r2
   2333c:	dfc00215 	stw	ra,8(sp)
   23340:	80000015 	stw	zero,0(r16)
   23344:	0023a6c0 	call	23a6c <read>
   23348:	00ffffc4 	movi	r3,-1
   2334c:	10c00526 	beq	r2,r3,23364 <_read_r+0x50>
   23350:	dfc00217 	ldw	ra,8(sp)
   23354:	dc400117 	ldw	r17,4(sp)
   23358:	dc000017 	ldw	r16,0(sp)
   2335c:	dec00304 	addi	sp,sp,12
   23360:	f800283a 	ret
   23364:	80c00017 	ldw	r3,0(r16)
   23368:	183ff926 	beq	r3,zero,23350 <__alt_data_end+0xfffeacb0>
   2336c:	88c00015 	stw	r3,0(r17)
   23370:	003ff706 	br	23350 <__alt_data_end+0xfffeacb0>

00023374 <_fstat_r>:
   23374:	defffd04 	addi	sp,sp,-12
   23378:	2805883a 	mov	r2,r5
   2337c:	dc000015 	stw	r16,0(sp)
   23380:	040000f4 	movhi	r16,3
   23384:	dc400115 	stw	r17,4(sp)
   23388:	84298d04 	addi	r16,r16,-22988
   2338c:	2023883a 	mov	r17,r4
   23390:	300b883a 	mov	r5,r6
   23394:	1009883a 	mov	r4,r2
   23398:	dfc00215 	stw	ra,8(sp)
   2339c:	80000015 	stw	zero,0(r16)
   233a0:	00235c80 	call	235c8 <fstat>
   233a4:	00ffffc4 	movi	r3,-1
   233a8:	10c00526 	beq	r2,r3,233c0 <_fstat_r+0x4c>
   233ac:	dfc00217 	ldw	ra,8(sp)
   233b0:	dc400117 	ldw	r17,4(sp)
   233b4:	dc000017 	ldw	r16,0(sp)
   233b8:	dec00304 	addi	sp,sp,12
   233bc:	f800283a 	ret
   233c0:	80c00017 	ldw	r3,0(r16)
   233c4:	183ff926 	beq	r3,zero,233ac <__alt_data_end+0xfffead0c>
   233c8:	88c00015 	stw	r3,0(r17)
   233cc:	003ff706 	br	233ac <__alt_data_end+0xfffead0c>

000233d0 <_isatty_r>:
   233d0:	defffd04 	addi	sp,sp,-12
   233d4:	dc000015 	stw	r16,0(sp)
   233d8:	040000f4 	movhi	r16,3
   233dc:	dc400115 	stw	r17,4(sp)
   233e0:	84298d04 	addi	r16,r16,-22988
   233e4:	2023883a 	mov	r17,r4
   233e8:	2809883a 	mov	r4,r5
   233ec:	dfc00215 	stw	ra,8(sp)
   233f0:	80000015 	stw	zero,0(r16)
   233f4:	00236bc0 	call	236bc <isatty>
   233f8:	00ffffc4 	movi	r3,-1
   233fc:	10c00526 	beq	r2,r3,23414 <_isatty_r+0x44>
   23400:	dfc00217 	ldw	ra,8(sp)
   23404:	dc400117 	ldw	r17,4(sp)
   23408:	dc000017 	ldw	r16,0(sp)
   2340c:	dec00304 	addi	sp,sp,12
   23410:	f800283a 	ret
   23414:	80c00017 	ldw	r3,0(r16)
   23418:	183ff926 	beq	r3,zero,23400 <__alt_data_end+0xfffead60>
   2341c:	88c00015 	stw	r3,0(r17)
   23420:	003ff706 	br	23400 <__alt_data_end+0xfffead60>

00023424 <__mulsi3>:
   23424:	0005883a 	mov	r2,zero
   23428:	20000726 	beq	r4,zero,23448 <__mulsi3+0x24>
   2342c:	20c0004c 	andi	r3,r4,1
   23430:	2008d07a 	srli	r4,r4,1
   23434:	18000126 	beq	r3,zero,2343c <__mulsi3+0x18>
   23438:	1145883a 	add	r2,r2,r5
   2343c:	294b883a 	add	r5,r5,r5
   23440:	203ffa1e 	bne	r4,zero,2342c <__alt_data_end+0xfffead8c>
   23444:	f800283a 	ret
   23448:	f800283a 	ret

0002344c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2344c:	defffe04 	addi	sp,sp,-8
   23450:	dfc00115 	stw	ra,4(sp)
   23454:	df000015 	stw	fp,0(sp)
   23458:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2345c:	d0a00917 	ldw	r2,-32732(gp)
   23460:	10000326 	beq	r2,zero,23470 <alt_get_errno+0x24>
   23464:	d0a00917 	ldw	r2,-32732(gp)
   23468:	103ee83a 	callr	r2
   2346c:	00000106 	br	23474 <alt_get_errno+0x28>
   23470:	d0a6f804 	addi	r2,gp,-25632
}
   23474:	e037883a 	mov	sp,fp
   23478:	dfc00117 	ldw	ra,4(sp)
   2347c:	df000017 	ldw	fp,0(sp)
   23480:	dec00204 	addi	sp,sp,8
   23484:	f800283a 	ret

00023488 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   23488:	defffb04 	addi	sp,sp,-20
   2348c:	dfc00415 	stw	ra,16(sp)
   23490:	df000315 	stw	fp,12(sp)
   23494:	df000304 	addi	fp,sp,12
   23498:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2349c:	e0bfff17 	ldw	r2,-4(fp)
   234a0:	10000816 	blt	r2,zero,234c4 <close+0x3c>
   234a4:	01400304 	movi	r5,12
   234a8:	e13fff17 	ldw	r4,-4(fp)
   234ac:	00234240 	call	23424 <__mulsi3>
   234b0:	1007883a 	mov	r3,r2
   234b4:	008000b4 	movhi	r2,2
   234b8:	109dd504 	addi	r2,r2,30548
   234bc:	1885883a 	add	r2,r3,r2
   234c0:	00000106 	br	234c8 <close+0x40>
   234c4:	0005883a 	mov	r2,zero
   234c8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   234cc:	e0bffd17 	ldw	r2,-12(fp)
   234d0:	10001926 	beq	r2,zero,23538 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   234d4:	e0bffd17 	ldw	r2,-12(fp)
   234d8:	10800017 	ldw	r2,0(r2)
   234dc:	10800417 	ldw	r2,16(r2)
   234e0:	10000626 	beq	r2,zero,234fc <close+0x74>
   234e4:	e0bffd17 	ldw	r2,-12(fp)
   234e8:	10800017 	ldw	r2,0(r2)
   234ec:	10800417 	ldw	r2,16(r2)
   234f0:	e13ffd17 	ldw	r4,-12(fp)
   234f4:	103ee83a 	callr	r2
   234f8:	00000106 	br	23500 <close+0x78>
   234fc:	0005883a 	mov	r2,zero
   23500:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   23504:	e13fff17 	ldw	r4,-4(fp)
   23508:	0023b700 	call	23b70 <alt_release_fd>
    if (rval < 0)
   2350c:	e0bffe17 	ldw	r2,-8(fp)
   23510:	1000070e 	bge	r2,zero,23530 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   23514:	002344c0 	call	2344c <alt_get_errno>
   23518:	1007883a 	mov	r3,r2
   2351c:	e0bffe17 	ldw	r2,-8(fp)
   23520:	0085c83a 	sub	r2,zero,r2
   23524:	18800015 	stw	r2,0(r3)
      return -1;
   23528:	00bfffc4 	movi	r2,-1
   2352c:	00000706 	br	2354c <close+0xc4>
    }
    return 0;
   23530:	0005883a 	mov	r2,zero
   23534:	00000506 	br	2354c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23538:	002344c0 	call	2344c <alt_get_errno>
   2353c:	1007883a 	mov	r3,r2
   23540:	00801444 	movi	r2,81
   23544:	18800015 	stw	r2,0(r3)
    return -1;
   23548:	00bfffc4 	movi	r2,-1
  }
}
   2354c:	e037883a 	mov	sp,fp
   23550:	dfc00117 	ldw	ra,4(sp)
   23554:	df000017 	ldw	fp,0(sp)
   23558:	dec00204 	addi	sp,sp,8
   2355c:	f800283a 	ret

00023560 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23560:	defffc04 	addi	sp,sp,-16
   23564:	df000315 	stw	fp,12(sp)
   23568:	df000304 	addi	fp,sp,12
   2356c:	e13ffd15 	stw	r4,-12(fp)
   23570:	e17ffe15 	stw	r5,-8(fp)
   23574:	e1bfff15 	stw	r6,-4(fp)
  return len;
   23578:	e0bfff17 	ldw	r2,-4(fp)
}
   2357c:	e037883a 	mov	sp,fp
   23580:	df000017 	ldw	fp,0(sp)
   23584:	dec00104 	addi	sp,sp,4
   23588:	f800283a 	ret

0002358c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2358c:	defffe04 	addi	sp,sp,-8
   23590:	dfc00115 	stw	ra,4(sp)
   23594:	df000015 	stw	fp,0(sp)
   23598:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2359c:	d0a00917 	ldw	r2,-32732(gp)
   235a0:	10000326 	beq	r2,zero,235b0 <alt_get_errno+0x24>
   235a4:	d0a00917 	ldw	r2,-32732(gp)
   235a8:	103ee83a 	callr	r2
   235ac:	00000106 	br	235b4 <alt_get_errno+0x28>
   235b0:	d0a6f804 	addi	r2,gp,-25632
}
   235b4:	e037883a 	mov	sp,fp
   235b8:	dfc00117 	ldw	ra,4(sp)
   235bc:	df000017 	ldw	fp,0(sp)
   235c0:	dec00204 	addi	sp,sp,8
   235c4:	f800283a 	ret

000235c8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   235c8:	defffb04 	addi	sp,sp,-20
   235cc:	dfc00415 	stw	ra,16(sp)
   235d0:	df000315 	stw	fp,12(sp)
   235d4:	df000304 	addi	fp,sp,12
   235d8:	e13ffe15 	stw	r4,-8(fp)
   235dc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   235e0:	e0bffe17 	ldw	r2,-8(fp)
   235e4:	10000816 	blt	r2,zero,23608 <fstat+0x40>
   235e8:	01400304 	movi	r5,12
   235ec:	e13ffe17 	ldw	r4,-8(fp)
   235f0:	00234240 	call	23424 <__mulsi3>
   235f4:	1007883a 	mov	r3,r2
   235f8:	008000b4 	movhi	r2,2
   235fc:	109dd504 	addi	r2,r2,30548
   23600:	1885883a 	add	r2,r3,r2
   23604:	00000106 	br	2360c <fstat+0x44>
   23608:	0005883a 	mov	r2,zero
   2360c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   23610:	e0bffd17 	ldw	r2,-12(fp)
   23614:	10001026 	beq	r2,zero,23658 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   23618:	e0bffd17 	ldw	r2,-12(fp)
   2361c:	10800017 	ldw	r2,0(r2)
   23620:	10800817 	ldw	r2,32(r2)
   23624:	10000726 	beq	r2,zero,23644 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   23628:	e0bffd17 	ldw	r2,-12(fp)
   2362c:	10800017 	ldw	r2,0(r2)
   23630:	10800817 	ldw	r2,32(r2)
   23634:	e17fff17 	ldw	r5,-4(fp)
   23638:	e13ffd17 	ldw	r4,-12(fp)
   2363c:	103ee83a 	callr	r2
   23640:	00000a06 	br	2366c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   23644:	e0bfff17 	ldw	r2,-4(fp)
   23648:	00c80004 	movi	r3,8192
   2364c:	10c00115 	stw	r3,4(r2)
      return 0;
   23650:	0005883a 	mov	r2,zero
   23654:	00000506 	br	2366c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23658:	002358c0 	call	2358c <alt_get_errno>
   2365c:	1007883a 	mov	r3,r2
   23660:	00801444 	movi	r2,81
   23664:	18800015 	stw	r2,0(r3)
    return -1;
   23668:	00bfffc4 	movi	r2,-1
  }
}
   2366c:	e037883a 	mov	sp,fp
   23670:	dfc00117 	ldw	ra,4(sp)
   23674:	df000017 	ldw	fp,0(sp)
   23678:	dec00204 	addi	sp,sp,8
   2367c:	f800283a 	ret

00023680 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23680:	defffe04 	addi	sp,sp,-8
   23684:	dfc00115 	stw	ra,4(sp)
   23688:	df000015 	stw	fp,0(sp)
   2368c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23690:	d0a00917 	ldw	r2,-32732(gp)
   23694:	10000326 	beq	r2,zero,236a4 <alt_get_errno+0x24>
   23698:	d0a00917 	ldw	r2,-32732(gp)
   2369c:	103ee83a 	callr	r2
   236a0:	00000106 	br	236a8 <alt_get_errno+0x28>
   236a4:	d0a6f804 	addi	r2,gp,-25632
}
   236a8:	e037883a 	mov	sp,fp
   236ac:	dfc00117 	ldw	ra,4(sp)
   236b0:	df000017 	ldw	fp,0(sp)
   236b4:	dec00204 	addi	sp,sp,8
   236b8:	f800283a 	ret

000236bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   236bc:	deffed04 	addi	sp,sp,-76
   236c0:	dfc01215 	stw	ra,72(sp)
   236c4:	df001115 	stw	fp,68(sp)
   236c8:	df001104 	addi	fp,sp,68
   236cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   236d0:	e0bfff17 	ldw	r2,-4(fp)
   236d4:	10000816 	blt	r2,zero,236f8 <isatty+0x3c>
   236d8:	01400304 	movi	r5,12
   236dc:	e13fff17 	ldw	r4,-4(fp)
   236e0:	00234240 	call	23424 <__mulsi3>
   236e4:	1007883a 	mov	r3,r2
   236e8:	008000b4 	movhi	r2,2
   236ec:	109dd504 	addi	r2,r2,30548
   236f0:	1885883a 	add	r2,r3,r2
   236f4:	00000106 	br	236fc <isatty+0x40>
   236f8:	0005883a 	mov	r2,zero
   236fc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   23700:	e0bfef17 	ldw	r2,-68(fp)
   23704:	10000e26 	beq	r2,zero,23740 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23708:	e0bfef17 	ldw	r2,-68(fp)
   2370c:	10800017 	ldw	r2,0(r2)
   23710:	10800817 	ldw	r2,32(r2)
   23714:	1000021e 	bne	r2,zero,23720 <isatty+0x64>
    {
      return 1;
   23718:	00800044 	movi	r2,1
   2371c:	00000d06 	br	23754 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23720:	e0bff004 	addi	r2,fp,-64
   23724:	100b883a 	mov	r5,r2
   23728:	e13fff17 	ldw	r4,-4(fp)
   2372c:	00235c80 	call	235c8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23730:	e0bff117 	ldw	r2,-60(fp)
   23734:	10880020 	cmpeqi	r2,r2,8192
   23738:	10803fcc 	andi	r2,r2,255
   2373c:	00000506 	br	23754 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23740:	00236800 	call	23680 <alt_get_errno>
   23744:	1007883a 	mov	r3,r2
   23748:	00801444 	movi	r2,81
   2374c:	18800015 	stw	r2,0(r3)
    return 0;
   23750:	0005883a 	mov	r2,zero
  }
}
   23754:	e037883a 	mov	sp,fp
   23758:	dfc00117 	ldw	ra,4(sp)
   2375c:	df000017 	ldw	fp,0(sp)
   23760:	dec00204 	addi	sp,sp,8
   23764:	f800283a 	ret

00023768 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23768:	defffc04 	addi	sp,sp,-16
   2376c:	df000315 	stw	fp,12(sp)
   23770:	df000304 	addi	fp,sp,12
   23774:	e13ffd15 	stw	r4,-12(fp)
   23778:	e17ffe15 	stw	r5,-8(fp)
   2377c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   23780:	e0fffe17 	ldw	r3,-8(fp)
   23784:	e0bffd17 	ldw	r2,-12(fp)
   23788:	18800c26 	beq	r3,r2,237bc <alt_load_section+0x54>
  {
    while( to != end )
   2378c:	00000806 	br	237b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   23790:	e0bffe17 	ldw	r2,-8(fp)
   23794:	10c00104 	addi	r3,r2,4
   23798:	e0fffe15 	stw	r3,-8(fp)
   2379c:	e0fffd17 	ldw	r3,-12(fp)
   237a0:	19000104 	addi	r4,r3,4
   237a4:	e13ffd15 	stw	r4,-12(fp)
   237a8:	18c00017 	ldw	r3,0(r3)
   237ac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   237b0:	e0fffe17 	ldw	r3,-8(fp)
   237b4:	e0bfff17 	ldw	r2,-4(fp)
   237b8:	18bff51e 	bne	r3,r2,23790 <__alt_data_end+0xfffeb0f0>
    {
      *to++ = *from++;
    }
  }
}
   237bc:	0001883a 	nop
   237c0:	e037883a 	mov	sp,fp
   237c4:	df000017 	ldw	fp,0(sp)
   237c8:	dec00104 	addi	sp,sp,4
   237cc:	f800283a 	ret

000237d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   237d0:	defffe04 	addi	sp,sp,-8
   237d4:	dfc00115 	stw	ra,4(sp)
   237d8:	df000015 	stw	fp,0(sp)
   237dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   237e0:	018000f4 	movhi	r6,3
   237e4:	31a2a504 	addi	r6,r6,-30060
   237e8:	014000b4 	movhi	r5,2
   237ec:	295bc004 	addi	r5,r5,28416
   237f0:	010000f4 	movhi	r4,3
   237f4:	2122a504 	addi	r4,r4,-30060
   237f8:	00237680 	call	23768 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   237fc:	018000b4 	movhi	r6,2
   23800:	31808c04 	addi	r6,r6,560
   23804:	014000b4 	movhi	r5,2
   23808:	29400804 	addi	r5,r5,32
   2380c:	010000b4 	movhi	r4,2
   23810:	21000804 	addi	r4,r4,32
   23814:	00237680 	call	23768 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23818:	018000b4 	movhi	r6,2
   2381c:	319bc004 	addi	r6,r6,28416
   23820:	014000b4 	movhi	r5,2
   23824:	295b0c04 	addi	r5,r5,27696
   23828:	010000b4 	movhi	r4,2
   2382c:	211b0c04 	addi	r4,r4,27696
   23830:	00237680 	call	23768 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23834:	0025b780 	call	25b78 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23838:	0025d380 	call	25d38 <alt_icache_flush_all>
}
   2383c:	0001883a 	nop
   23840:	e037883a 	mov	sp,fp
   23844:	dfc00117 	ldw	ra,4(sp)
   23848:	df000017 	ldw	fp,0(sp)
   2384c:	dec00204 	addi	sp,sp,8
   23850:	f800283a 	ret

00023854 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23854:	defffe04 	addi	sp,sp,-8
   23858:	dfc00115 	stw	ra,4(sp)
   2385c:	df000015 	stw	fp,0(sp)
   23860:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23864:	d0a00917 	ldw	r2,-32732(gp)
   23868:	10000326 	beq	r2,zero,23878 <alt_get_errno+0x24>
   2386c:	d0a00917 	ldw	r2,-32732(gp)
   23870:	103ee83a 	callr	r2
   23874:	00000106 	br	2387c <alt_get_errno+0x28>
   23878:	d0a6f804 	addi	r2,gp,-25632
}
   2387c:	e037883a 	mov	sp,fp
   23880:	dfc00117 	ldw	ra,4(sp)
   23884:	df000017 	ldw	fp,0(sp)
   23888:	dec00204 	addi	sp,sp,8
   2388c:	f800283a 	ret

00023890 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   23890:	defff904 	addi	sp,sp,-28
   23894:	dfc00615 	stw	ra,24(sp)
   23898:	df000515 	stw	fp,20(sp)
   2389c:	df000504 	addi	fp,sp,20
   238a0:	e13ffd15 	stw	r4,-12(fp)
   238a4:	e17ffe15 	stw	r5,-8(fp)
   238a8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   238ac:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   238b0:	e0bffd17 	ldw	r2,-12(fp)
   238b4:	10000816 	blt	r2,zero,238d8 <lseek+0x48>
   238b8:	01400304 	movi	r5,12
   238bc:	e13ffd17 	ldw	r4,-12(fp)
   238c0:	00234240 	call	23424 <__mulsi3>
   238c4:	1007883a 	mov	r3,r2
   238c8:	008000b4 	movhi	r2,2
   238cc:	109dd504 	addi	r2,r2,30548
   238d0:	1885883a 	add	r2,r3,r2
   238d4:	00000106 	br	238dc <lseek+0x4c>
   238d8:	0005883a 	mov	r2,zero
   238dc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   238e0:	e0bffc17 	ldw	r2,-16(fp)
   238e4:	10001026 	beq	r2,zero,23928 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   238e8:	e0bffc17 	ldw	r2,-16(fp)
   238ec:	10800017 	ldw	r2,0(r2)
   238f0:	10800717 	ldw	r2,28(r2)
   238f4:	10000926 	beq	r2,zero,2391c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   238f8:	e0bffc17 	ldw	r2,-16(fp)
   238fc:	10800017 	ldw	r2,0(r2)
   23900:	10800717 	ldw	r2,28(r2)
   23904:	e1bfff17 	ldw	r6,-4(fp)
   23908:	e17ffe17 	ldw	r5,-8(fp)
   2390c:	e13ffc17 	ldw	r4,-16(fp)
   23910:	103ee83a 	callr	r2
   23914:	e0bffb15 	stw	r2,-20(fp)
   23918:	00000506 	br	23930 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2391c:	00bfde84 	movi	r2,-134
   23920:	e0bffb15 	stw	r2,-20(fp)
   23924:	00000206 	br	23930 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   23928:	00bfebc4 	movi	r2,-81
   2392c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   23930:	e0bffb17 	ldw	r2,-20(fp)
   23934:	1000070e 	bge	r2,zero,23954 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   23938:	00238540 	call	23854 <alt_get_errno>
   2393c:	1007883a 	mov	r3,r2
   23940:	e0bffb17 	ldw	r2,-20(fp)
   23944:	0085c83a 	sub	r2,zero,r2
   23948:	18800015 	stw	r2,0(r3)
    rc = -1;
   2394c:	00bfffc4 	movi	r2,-1
   23950:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   23954:	e0bffb17 	ldw	r2,-20(fp)
}
   23958:	e037883a 	mov	sp,fp
   2395c:	dfc00117 	ldw	ra,4(sp)
   23960:	df000017 	ldw	fp,0(sp)
   23964:	dec00204 	addi	sp,sp,8
   23968:	f800283a 	ret

0002396c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2396c:	defffd04 	addi	sp,sp,-12
   23970:	dfc00215 	stw	ra,8(sp)
   23974:	df000115 	stw	fp,4(sp)
   23978:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2397c:	0009883a 	mov	r4,zero
   23980:	0023e440 	call	23e44 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   23984:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   23988:	0023e7c0 	call	23e7c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2398c:	018000b4 	movhi	r6,2
   23990:	319b1504 	addi	r6,r6,27732
   23994:	014000b4 	movhi	r5,2
   23998:	295b1504 	addi	r5,r5,27732
   2399c:	010000b4 	movhi	r4,2
   239a0:	211b1504 	addi	r4,r4,27732
   239a4:	00260dc0 	call	260dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   239a8:	0025c780 	call	25c78 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   239ac:	010000b4 	movhi	r4,2
   239b0:	21173604 	addi	r4,r4,23768
   239b4:	002689c0 	call	2689c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   239b8:	d0a6f917 	ldw	r2,-25628(gp)
   239bc:	d0e6fa17 	ldw	r3,-25624(gp)
   239c0:	d126fb17 	ldw	r4,-25620(gp)
   239c4:	200d883a 	mov	r6,r4
   239c8:	180b883a 	mov	r5,r3
   239cc:	1009883a 	mov	r4,r2
   239d0:	00205400 	call	20540 <main>
   239d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   239d8:	01000044 	movi	r4,1
   239dc:	00234880 	call	23488 <close>
  exit (result);
   239e0:	e13fff17 	ldw	r4,-4(fp)
   239e4:	00268b00 	call	268b0 <exit>

000239e8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   239e8:	defffe04 	addi	sp,sp,-8
   239ec:	df000115 	stw	fp,4(sp)
   239f0:	df000104 	addi	fp,sp,4
   239f4:	e13fff15 	stw	r4,-4(fp)
}
   239f8:	0001883a 	nop
   239fc:	e037883a 	mov	sp,fp
   23a00:	df000017 	ldw	fp,0(sp)
   23a04:	dec00104 	addi	sp,sp,4
   23a08:	f800283a 	ret

00023a0c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23a0c:	defffe04 	addi	sp,sp,-8
   23a10:	df000115 	stw	fp,4(sp)
   23a14:	df000104 	addi	fp,sp,4
   23a18:	e13fff15 	stw	r4,-4(fp)
}
   23a1c:	0001883a 	nop
   23a20:	e037883a 	mov	sp,fp
   23a24:	df000017 	ldw	fp,0(sp)
   23a28:	dec00104 	addi	sp,sp,4
   23a2c:	f800283a 	ret

00023a30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23a30:	defffe04 	addi	sp,sp,-8
   23a34:	dfc00115 	stw	ra,4(sp)
   23a38:	df000015 	stw	fp,0(sp)
   23a3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23a40:	d0a00917 	ldw	r2,-32732(gp)
   23a44:	10000326 	beq	r2,zero,23a54 <alt_get_errno+0x24>
   23a48:	d0a00917 	ldw	r2,-32732(gp)
   23a4c:	103ee83a 	callr	r2
   23a50:	00000106 	br	23a58 <alt_get_errno+0x28>
   23a54:	d0a6f804 	addi	r2,gp,-25632
}
   23a58:	e037883a 	mov	sp,fp
   23a5c:	dfc00117 	ldw	ra,4(sp)
   23a60:	df000017 	ldw	fp,0(sp)
   23a64:	dec00204 	addi	sp,sp,8
   23a68:	f800283a 	ret

00023a6c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   23a6c:	defff904 	addi	sp,sp,-28
   23a70:	dfc00615 	stw	ra,24(sp)
   23a74:	df000515 	stw	fp,20(sp)
   23a78:	df000504 	addi	fp,sp,20
   23a7c:	e13ffd15 	stw	r4,-12(fp)
   23a80:	e17ffe15 	stw	r5,-8(fp)
   23a84:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23a88:	e0bffd17 	ldw	r2,-12(fp)
   23a8c:	10000816 	blt	r2,zero,23ab0 <read+0x44>
   23a90:	01400304 	movi	r5,12
   23a94:	e13ffd17 	ldw	r4,-12(fp)
   23a98:	00234240 	call	23424 <__mulsi3>
   23a9c:	1007883a 	mov	r3,r2
   23aa0:	008000b4 	movhi	r2,2
   23aa4:	109dd504 	addi	r2,r2,30548
   23aa8:	1885883a 	add	r2,r3,r2
   23aac:	00000106 	br	23ab4 <read+0x48>
   23ab0:	0005883a 	mov	r2,zero
   23ab4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23ab8:	e0bffb17 	ldw	r2,-20(fp)
   23abc:	10002226 	beq	r2,zero,23b48 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23ac0:	e0bffb17 	ldw	r2,-20(fp)
   23ac4:	10800217 	ldw	r2,8(r2)
   23ac8:	108000cc 	andi	r2,r2,3
   23acc:	10800060 	cmpeqi	r2,r2,1
   23ad0:	1000181e 	bne	r2,zero,23b34 <read+0xc8>
        (fd->dev->read))
   23ad4:	e0bffb17 	ldw	r2,-20(fp)
   23ad8:	10800017 	ldw	r2,0(r2)
   23adc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23ae0:	10001426 	beq	r2,zero,23b34 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23ae4:	e0bffb17 	ldw	r2,-20(fp)
   23ae8:	10800017 	ldw	r2,0(r2)
   23aec:	10800517 	ldw	r2,20(r2)
   23af0:	e0ffff17 	ldw	r3,-4(fp)
   23af4:	180d883a 	mov	r6,r3
   23af8:	e17ffe17 	ldw	r5,-8(fp)
   23afc:	e13ffb17 	ldw	r4,-20(fp)
   23b00:	103ee83a 	callr	r2
   23b04:	e0bffc15 	stw	r2,-16(fp)
   23b08:	e0bffc17 	ldw	r2,-16(fp)
   23b0c:	1000070e 	bge	r2,zero,23b2c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   23b10:	0023a300 	call	23a30 <alt_get_errno>
   23b14:	1007883a 	mov	r3,r2
   23b18:	e0bffc17 	ldw	r2,-16(fp)
   23b1c:	0085c83a 	sub	r2,zero,r2
   23b20:	18800015 	stw	r2,0(r3)
          return -1;
   23b24:	00bfffc4 	movi	r2,-1
   23b28:	00000c06 	br	23b5c <read+0xf0>
        }
        return rval;
   23b2c:	e0bffc17 	ldw	r2,-16(fp)
   23b30:	00000a06 	br	23b5c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23b34:	0023a300 	call	23a30 <alt_get_errno>
   23b38:	1007883a 	mov	r3,r2
   23b3c:	00800344 	movi	r2,13
   23b40:	18800015 	stw	r2,0(r3)
   23b44:	00000406 	br	23b58 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23b48:	0023a300 	call	23a30 <alt_get_errno>
   23b4c:	1007883a 	mov	r3,r2
   23b50:	00801444 	movi	r2,81
   23b54:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23b58:	00bfffc4 	movi	r2,-1
}
   23b5c:	e037883a 	mov	sp,fp
   23b60:	dfc00117 	ldw	ra,4(sp)
   23b64:	df000017 	ldw	fp,0(sp)
   23b68:	dec00204 	addi	sp,sp,8
   23b6c:	f800283a 	ret

00023b70 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23b70:	defffc04 	addi	sp,sp,-16
   23b74:	dfc00315 	stw	ra,12(sp)
   23b78:	df000215 	stw	fp,8(sp)
   23b7c:	dc000115 	stw	r16,4(sp)
   23b80:	df000204 	addi	fp,sp,8
   23b84:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   23b88:	e0bffe17 	ldw	r2,-8(fp)
   23b8c:	108000d0 	cmplti	r2,r2,3
   23b90:	1000111e 	bne	r2,zero,23bd8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   23b94:	040000b4 	movhi	r16,2
   23b98:	841dd504 	addi	r16,r16,30548
   23b9c:	e0bffe17 	ldw	r2,-8(fp)
   23ba0:	01400304 	movi	r5,12
   23ba4:	1009883a 	mov	r4,r2
   23ba8:	00234240 	call	23424 <__mulsi3>
   23bac:	8085883a 	add	r2,r16,r2
   23bb0:	10800204 	addi	r2,r2,8
   23bb4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   23bb8:	040000b4 	movhi	r16,2
   23bbc:	841dd504 	addi	r16,r16,30548
   23bc0:	e0bffe17 	ldw	r2,-8(fp)
   23bc4:	01400304 	movi	r5,12
   23bc8:	1009883a 	mov	r4,r2
   23bcc:	00234240 	call	23424 <__mulsi3>
   23bd0:	8085883a 	add	r2,r16,r2
   23bd4:	10000015 	stw	zero,0(r2)
  }
}
   23bd8:	0001883a 	nop
   23bdc:	e6ffff04 	addi	sp,fp,-4
   23be0:	dfc00217 	ldw	ra,8(sp)
   23be4:	df000117 	ldw	fp,4(sp)
   23be8:	dc000017 	ldw	r16,0(sp)
   23bec:	dec00304 	addi	sp,sp,12
   23bf0:	f800283a 	ret

00023bf4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23bf4:	defff904 	addi	sp,sp,-28
   23bf8:	df000615 	stw	fp,24(sp)
   23bfc:	df000604 	addi	fp,sp,24
   23c00:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23c04:	0005303a 	rdctl	r2,status
   23c08:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23c0c:	e0fffe17 	ldw	r3,-8(fp)
   23c10:	00bfff84 	movi	r2,-2
   23c14:	1884703a 	and	r2,r3,r2
   23c18:	1001703a 	wrctl	status,r2
  
  return context;
   23c1c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23c20:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23c24:	d0a00a17 	ldw	r2,-32728(gp)
   23c28:	10c000c4 	addi	r3,r2,3
   23c2c:	00bfff04 	movi	r2,-4
   23c30:	1884703a 	and	r2,r3,r2
   23c34:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23c38:	d0e00a17 	ldw	r3,-32728(gp)
   23c3c:	e0bfff17 	ldw	r2,-4(fp)
   23c40:	1887883a 	add	r3,r3,r2
   23c44:	00800134 	movhi	r2,4
   23c48:	10a1a804 	addi	r2,r2,-31072
   23c4c:	10c0062e 	bgeu	r2,r3,23c68 <sbrk+0x74>
   23c50:	e0bffb17 	ldw	r2,-20(fp)
   23c54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23c58:	e0bffa17 	ldw	r2,-24(fp)
   23c5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   23c60:	00bfffc4 	movi	r2,-1
   23c64:	00000b06 	br	23c94 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   23c68:	d0a00a17 	ldw	r2,-32728(gp)
   23c6c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   23c70:	d0e00a17 	ldw	r3,-32728(gp)
   23c74:	e0bfff17 	ldw	r2,-4(fp)
   23c78:	1885883a 	add	r2,r3,r2
   23c7c:	d0a00a15 	stw	r2,-32728(gp)
   23c80:	e0bffb17 	ldw	r2,-20(fp)
   23c84:	e0bffc15 	stw	r2,-16(fp)
   23c88:	e0bffc17 	ldw	r2,-16(fp)
   23c8c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23c90:	e0bffd17 	ldw	r2,-12(fp)
} 
   23c94:	e037883a 	mov	sp,fp
   23c98:	df000017 	ldw	fp,0(sp)
   23c9c:	dec00104 	addi	sp,sp,4
   23ca0:	f800283a 	ret

00023ca4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   23ca4:	defffd04 	addi	sp,sp,-12
   23ca8:	dfc00215 	stw	ra,8(sp)
   23cac:	df000115 	stw	fp,4(sp)
   23cb0:	df000104 	addi	fp,sp,4
   23cb4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   23cb8:	e13fff17 	ldw	r4,-4(fp)
   23cbc:	0025a200 	call	25a20 <alt_busy_sleep>
}
   23cc0:	e037883a 	mov	sp,fp
   23cc4:	dfc00117 	ldw	ra,4(sp)
   23cc8:	df000017 	ldw	fp,0(sp)
   23ccc:	dec00204 	addi	sp,sp,8
   23cd0:	f800283a 	ret

00023cd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23cd4:	defffe04 	addi	sp,sp,-8
   23cd8:	dfc00115 	stw	ra,4(sp)
   23cdc:	df000015 	stw	fp,0(sp)
   23ce0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23ce4:	d0a00917 	ldw	r2,-32732(gp)
   23ce8:	10000326 	beq	r2,zero,23cf8 <alt_get_errno+0x24>
   23cec:	d0a00917 	ldw	r2,-32732(gp)
   23cf0:	103ee83a 	callr	r2
   23cf4:	00000106 	br	23cfc <alt_get_errno+0x28>
   23cf8:	d0a6f804 	addi	r2,gp,-25632
}
   23cfc:	e037883a 	mov	sp,fp
   23d00:	dfc00117 	ldw	ra,4(sp)
   23d04:	df000017 	ldw	fp,0(sp)
   23d08:	dec00204 	addi	sp,sp,8
   23d0c:	f800283a 	ret

00023d10 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23d10:	defff904 	addi	sp,sp,-28
   23d14:	dfc00615 	stw	ra,24(sp)
   23d18:	df000515 	stw	fp,20(sp)
   23d1c:	df000504 	addi	fp,sp,20
   23d20:	e13ffd15 	stw	r4,-12(fp)
   23d24:	e17ffe15 	stw	r5,-8(fp)
   23d28:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23d2c:	e0bffd17 	ldw	r2,-12(fp)
   23d30:	10000816 	blt	r2,zero,23d54 <write+0x44>
   23d34:	01400304 	movi	r5,12
   23d38:	e13ffd17 	ldw	r4,-12(fp)
   23d3c:	00234240 	call	23424 <__mulsi3>
   23d40:	1007883a 	mov	r3,r2
   23d44:	008000b4 	movhi	r2,2
   23d48:	109dd504 	addi	r2,r2,30548
   23d4c:	1885883a 	add	r2,r3,r2
   23d50:	00000106 	br	23d58 <write+0x48>
   23d54:	0005883a 	mov	r2,zero
   23d58:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23d5c:	e0bffb17 	ldw	r2,-20(fp)
   23d60:	10002126 	beq	r2,zero,23de8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23d64:	e0bffb17 	ldw	r2,-20(fp)
   23d68:	10800217 	ldw	r2,8(r2)
   23d6c:	108000cc 	andi	r2,r2,3
   23d70:	10001826 	beq	r2,zero,23dd4 <write+0xc4>
   23d74:	e0bffb17 	ldw	r2,-20(fp)
   23d78:	10800017 	ldw	r2,0(r2)
   23d7c:	10800617 	ldw	r2,24(r2)
   23d80:	10001426 	beq	r2,zero,23dd4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23d84:	e0bffb17 	ldw	r2,-20(fp)
   23d88:	10800017 	ldw	r2,0(r2)
   23d8c:	10800617 	ldw	r2,24(r2)
   23d90:	e0ffff17 	ldw	r3,-4(fp)
   23d94:	180d883a 	mov	r6,r3
   23d98:	e17ffe17 	ldw	r5,-8(fp)
   23d9c:	e13ffb17 	ldw	r4,-20(fp)
   23da0:	103ee83a 	callr	r2
   23da4:	e0bffc15 	stw	r2,-16(fp)
   23da8:	e0bffc17 	ldw	r2,-16(fp)
   23dac:	1000070e 	bge	r2,zero,23dcc <write+0xbc>
      {
        ALT_ERRNO = -rval;
   23db0:	0023cd40 	call	23cd4 <alt_get_errno>
   23db4:	1007883a 	mov	r3,r2
   23db8:	e0bffc17 	ldw	r2,-16(fp)
   23dbc:	0085c83a 	sub	r2,zero,r2
   23dc0:	18800015 	stw	r2,0(r3)
        return -1;
   23dc4:	00bfffc4 	movi	r2,-1
   23dc8:	00000c06 	br	23dfc <write+0xec>
      }
      return rval;
   23dcc:	e0bffc17 	ldw	r2,-16(fp)
   23dd0:	00000a06 	br	23dfc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23dd4:	0023cd40 	call	23cd4 <alt_get_errno>
   23dd8:	1007883a 	mov	r3,r2
   23ddc:	00800344 	movi	r2,13
   23de0:	18800015 	stw	r2,0(r3)
   23de4:	00000406 	br	23df8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23de8:	0023cd40 	call	23cd4 <alt_get_errno>
   23dec:	1007883a 	mov	r3,r2
   23df0:	00801444 	movi	r2,81
   23df4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23df8:	00bfffc4 	movi	r2,-1
}
   23dfc:	e037883a 	mov	sp,fp
   23e00:	dfc00117 	ldw	ra,4(sp)
   23e04:	df000017 	ldw	fp,0(sp)
   23e08:	dec00204 	addi	sp,sp,8
   23e0c:	f800283a 	ret

00023e10 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23e10:	defffd04 	addi	sp,sp,-12
   23e14:	dfc00215 	stw	ra,8(sp)
   23e18:	df000115 	stw	fp,4(sp)
   23e1c:	df000104 	addi	fp,sp,4
   23e20:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23e24:	d1600604 	addi	r5,gp,-32744
   23e28:	e13fff17 	ldw	r4,-4(fp)
   23e2c:	0025bd40 	call	25bd4 <alt_dev_llist_insert>
}
   23e30:	e037883a 	mov	sp,fp
   23e34:	dfc00117 	ldw	ra,4(sp)
   23e38:	df000017 	ldw	fp,0(sp)
   23e3c:	dec00204 	addi	sp,sp,8
   23e40:	f800283a 	ret

00023e44 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23e44:	defffd04 	addi	sp,sp,-12
   23e48:	dfc00215 	stw	ra,8(sp)
   23e4c:	df000115 	stw	fp,4(sp)
   23e50:	df000104 	addi	fp,sp,4
   23e54:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   23e58:	00265800 	call	26580 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23e5c:	00800044 	movi	r2,1
   23e60:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23e64:	0001883a 	nop
   23e68:	e037883a 	mov	sp,fp
   23e6c:	dfc00117 	ldw	ra,4(sp)
   23e70:	df000017 	ldw	fp,0(sp)
   23e74:	dec00204 	addi	sp,sp,8
   23e78:	f800283a 	ret

00023e7c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23e7c:	defffe04 	addi	sp,sp,-8
   23e80:	dfc00115 	stw	ra,4(sp)
   23e84:	df000015 	stw	fp,0(sp)
   23e88:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   23e8c:	000d883a 	mov	r6,zero
   23e90:	000b883a 	mov	r5,zero
   23e94:	010000b4 	movhi	r4,2
   23e98:	211e3f04 	addi	r4,r4,30972
   23e9c:	00240440 	call	24044 <altera_avalon_jtag_uart_init>
   23ea0:	010000b4 	movhi	r4,2
   23ea4:	211e3504 	addi	r4,r4,30932
   23ea8:	0023e100 	call	23e10 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_0, lcd_0);
   23eac:	010000f4 	movhi	r4,3
   23eb0:	21225704 	addi	r4,r4,-30372
   23eb4:	00257600 	call	25760 <altera_avalon_lcd_16207_init>
   23eb8:	010000f4 	movhi	r4,3
   23ebc:	21224d04 	addi	r4,r4,-30412
   23ec0:	0023e100 	call	23e10 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   23ec4:	0001883a 	nop
}
   23ec8:	0001883a 	nop
   23ecc:	e037883a 	mov	sp,fp
   23ed0:	dfc00117 	ldw	ra,4(sp)
   23ed4:	df000017 	ldw	fp,0(sp)
   23ed8:	dec00204 	addi	sp,sp,8
   23edc:	f800283a 	ret

00023ee0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23ee0:	defffa04 	addi	sp,sp,-24
   23ee4:	dfc00515 	stw	ra,20(sp)
   23ee8:	df000415 	stw	fp,16(sp)
   23eec:	df000404 	addi	fp,sp,16
   23ef0:	e13ffd15 	stw	r4,-12(fp)
   23ef4:	e17ffe15 	stw	r5,-8(fp)
   23ef8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23efc:	e0bffd17 	ldw	r2,-12(fp)
   23f00:	10800017 	ldw	r2,0(r2)
   23f04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23f08:	e0bffc17 	ldw	r2,-16(fp)
   23f0c:	10c00a04 	addi	r3,r2,40
   23f10:	e0bffd17 	ldw	r2,-12(fp)
   23f14:	10800217 	ldw	r2,8(r2)
   23f18:	100f883a 	mov	r7,r2
   23f1c:	e1bfff17 	ldw	r6,-4(fp)
   23f20:	e17ffe17 	ldw	r5,-8(fp)
   23f24:	1809883a 	mov	r4,r3
   23f28:	00245080 	call	24508 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23f2c:	e037883a 	mov	sp,fp
   23f30:	dfc00117 	ldw	ra,4(sp)
   23f34:	df000017 	ldw	fp,0(sp)
   23f38:	dec00204 	addi	sp,sp,8
   23f3c:	f800283a 	ret

00023f40 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23f40:	defffa04 	addi	sp,sp,-24
   23f44:	dfc00515 	stw	ra,20(sp)
   23f48:	df000415 	stw	fp,16(sp)
   23f4c:	df000404 	addi	fp,sp,16
   23f50:	e13ffd15 	stw	r4,-12(fp)
   23f54:	e17ffe15 	stw	r5,-8(fp)
   23f58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23f5c:	e0bffd17 	ldw	r2,-12(fp)
   23f60:	10800017 	ldw	r2,0(r2)
   23f64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23f68:	e0bffc17 	ldw	r2,-16(fp)
   23f6c:	10c00a04 	addi	r3,r2,40
   23f70:	e0bffd17 	ldw	r2,-12(fp)
   23f74:	10800217 	ldw	r2,8(r2)
   23f78:	100f883a 	mov	r7,r2
   23f7c:	e1bfff17 	ldw	r6,-4(fp)
   23f80:	e17ffe17 	ldw	r5,-8(fp)
   23f84:	1809883a 	mov	r4,r3
   23f88:	00247240 	call	24724 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23f8c:	e037883a 	mov	sp,fp
   23f90:	dfc00117 	ldw	ra,4(sp)
   23f94:	df000017 	ldw	fp,0(sp)
   23f98:	dec00204 	addi	sp,sp,8
   23f9c:	f800283a 	ret

00023fa0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   23fa0:	defffc04 	addi	sp,sp,-16
   23fa4:	dfc00315 	stw	ra,12(sp)
   23fa8:	df000215 	stw	fp,8(sp)
   23fac:	df000204 	addi	fp,sp,8
   23fb0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23fb4:	e0bfff17 	ldw	r2,-4(fp)
   23fb8:	10800017 	ldw	r2,0(r2)
   23fbc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   23fc0:	e0bffe17 	ldw	r2,-8(fp)
   23fc4:	10c00a04 	addi	r3,r2,40
   23fc8:	e0bfff17 	ldw	r2,-4(fp)
   23fcc:	10800217 	ldw	r2,8(r2)
   23fd0:	100b883a 	mov	r5,r2
   23fd4:	1809883a 	mov	r4,r3
   23fd8:	00243b00 	call	243b0 <altera_avalon_jtag_uart_close>
}
   23fdc:	e037883a 	mov	sp,fp
   23fe0:	dfc00117 	ldw	ra,4(sp)
   23fe4:	df000017 	ldw	fp,0(sp)
   23fe8:	dec00204 	addi	sp,sp,8
   23fec:	f800283a 	ret

00023ff0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   23ff0:	defffa04 	addi	sp,sp,-24
   23ff4:	dfc00515 	stw	ra,20(sp)
   23ff8:	df000415 	stw	fp,16(sp)
   23ffc:	df000404 	addi	fp,sp,16
   24000:	e13ffd15 	stw	r4,-12(fp)
   24004:	e17ffe15 	stw	r5,-8(fp)
   24008:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2400c:	e0bffd17 	ldw	r2,-12(fp)
   24010:	10800017 	ldw	r2,0(r2)
   24014:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   24018:	e0bffc17 	ldw	r2,-16(fp)
   2401c:	10800a04 	addi	r2,r2,40
   24020:	e1bfff17 	ldw	r6,-4(fp)
   24024:	e17ffe17 	ldw	r5,-8(fp)
   24028:	1009883a 	mov	r4,r2
   2402c:	00244180 	call	24418 <altera_avalon_jtag_uart_ioctl>
}
   24030:	e037883a 	mov	sp,fp
   24034:	dfc00117 	ldw	ra,4(sp)
   24038:	df000017 	ldw	fp,0(sp)
   2403c:	dec00204 	addi	sp,sp,8
   24040:	f800283a 	ret

00024044 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   24044:	defffa04 	addi	sp,sp,-24
   24048:	dfc00515 	stw	ra,20(sp)
   2404c:	df000415 	stw	fp,16(sp)
   24050:	df000404 	addi	fp,sp,16
   24054:	e13ffd15 	stw	r4,-12(fp)
   24058:	e17ffe15 	stw	r5,-8(fp)
   2405c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24060:	e0bffd17 	ldw	r2,-12(fp)
   24064:	00c00044 	movi	r3,1
   24068:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2406c:	e0bffd17 	ldw	r2,-12(fp)
   24070:	10800017 	ldw	r2,0(r2)
   24074:	10800104 	addi	r2,r2,4
   24078:	1007883a 	mov	r3,r2
   2407c:	e0bffd17 	ldw	r2,-12(fp)
   24080:	10800817 	ldw	r2,32(r2)
   24084:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   24088:	e0bffe17 	ldw	r2,-8(fp)
   2408c:	e0ffff17 	ldw	r3,-4(fp)
   24090:	d8000015 	stw	zero,0(sp)
   24094:	e1fffd17 	ldw	r7,-12(fp)
   24098:	018000b4 	movhi	r6,2
   2409c:	31904104 	addi	r6,r6,16644
   240a0:	180b883a 	mov	r5,r3
   240a4:	1009883a 	mov	r4,r2
   240a8:	0025d580 	call	25d58 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   240ac:	e0bffd17 	ldw	r2,-12(fp)
   240b0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   240b4:	e0bffd17 	ldw	r2,-12(fp)
   240b8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   240bc:	d0e6fd17 	ldw	r3,-25612(gp)
   240c0:	e1fffd17 	ldw	r7,-12(fp)
   240c4:	018000b4 	movhi	r6,2
   240c8:	3190c404 	addi	r6,r6,17168
   240cc:	180b883a 	mov	r5,r3
   240d0:	1009883a 	mov	r4,r2
   240d4:	00258f40 	call	258f4 <alt_alarm_start>
   240d8:	1000040e 	bge	r2,zero,240ec <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   240dc:	e0fffd17 	ldw	r3,-12(fp)
   240e0:	00a00034 	movhi	r2,32768
   240e4:	10bfffc4 	addi	r2,r2,-1
   240e8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   240ec:	0001883a 	nop
   240f0:	e037883a 	mov	sp,fp
   240f4:	dfc00117 	ldw	ra,4(sp)
   240f8:	df000017 	ldw	fp,0(sp)
   240fc:	dec00204 	addi	sp,sp,8
   24100:	f800283a 	ret

00024104 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   24104:	defff804 	addi	sp,sp,-32
   24108:	df000715 	stw	fp,28(sp)
   2410c:	df000704 	addi	fp,sp,28
   24110:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   24114:	e0bfff17 	ldw	r2,-4(fp)
   24118:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2411c:	e0bffb17 	ldw	r2,-20(fp)
   24120:	10800017 	ldw	r2,0(r2)
   24124:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24128:	e0bffc17 	ldw	r2,-16(fp)
   2412c:	10800104 	addi	r2,r2,4
   24130:	10800037 	ldwio	r2,0(r2)
   24134:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   24138:	e0bffd17 	ldw	r2,-12(fp)
   2413c:	1080c00c 	andi	r2,r2,768
   24140:	10006d26 	beq	r2,zero,242f8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   24144:	e0bffd17 	ldw	r2,-12(fp)
   24148:	1080400c 	andi	r2,r2,256
   2414c:	10003526 	beq	r2,zero,24224 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   24150:	00800074 	movhi	r2,1
   24154:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24158:	e0bffb17 	ldw	r2,-20(fp)
   2415c:	10800a17 	ldw	r2,40(r2)
   24160:	10800044 	addi	r2,r2,1
   24164:	1081ffcc 	andi	r2,r2,2047
   24168:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2416c:	e0bffb17 	ldw	r2,-20(fp)
   24170:	10c00b17 	ldw	r3,44(r2)
   24174:	e0bffe17 	ldw	r2,-8(fp)
   24178:	18801526 	beq	r3,r2,241d0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2417c:	e0bffc17 	ldw	r2,-16(fp)
   24180:	10800037 	ldwio	r2,0(r2)
   24184:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   24188:	e0bff917 	ldw	r2,-28(fp)
   2418c:	10a0000c 	andi	r2,r2,32768
   24190:	10001126 	beq	r2,zero,241d8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   24194:	e0bffb17 	ldw	r2,-20(fp)
   24198:	10800a17 	ldw	r2,40(r2)
   2419c:	e0fff917 	ldw	r3,-28(fp)
   241a0:	1809883a 	mov	r4,r3
   241a4:	e0fffb17 	ldw	r3,-20(fp)
   241a8:	1885883a 	add	r2,r3,r2
   241ac:	10800e04 	addi	r2,r2,56
   241b0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   241b4:	e0bffb17 	ldw	r2,-20(fp)
   241b8:	10800a17 	ldw	r2,40(r2)
   241bc:	10800044 	addi	r2,r2,1
   241c0:	10c1ffcc 	andi	r3,r2,2047
   241c4:	e0bffb17 	ldw	r2,-20(fp)
   241c8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   241cc:	003fe206 	br	24158 <__alt_data_end+0xfffebab8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   241d0:	0001883a 	nop
   241d4:	00000106 	br	241dc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   241d8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   241dc:	e0bff917 	ldw	r2,-28(fp)
   241e0:	10bfffec 	andhi	r2,r2,65535
   241e4:	10000f26 	beq	r2,zero,24224 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   241e8:	e0bffb17 	ldw	r2,-20(fp)
   241ec:	10c00817 	ldw	r3,32(r2)
   241f0:	00bfff84 	movi	r2,-2
   241f4:	1886703a 	and	r3,r3,r2
   241f8:	e0bffb17 	ldw	r2,-20(fp)
   241fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   24200:	e0bffc17 	ldw	r2,-16(fp)
   24204:	10800104 	addi	r2,r2,4
   24208:	1007883a 	mov	r3,r2
   2420c:	e0bffb17 	ldw	r2,-20(fp)
   24210:	10800817 	ldw	r2,32(r2)
   24214:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24218:	e0bffc17 	ldw	r2,-16(fp)
   2421c:	10800104 	addi	r2,r2,4
   24220:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   24224:	e0bffd17 	ldw	r2,-12(fp)
   24228:	1080800c 	andi	r2,r2,512
   2422c:	103fbe26 	beq	r2,zero,24128 <__alt_data_end+0xfffeba88>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   24230:	e0bffd17 	ldw	r2,-12(fp)
   24234:	1004d43a 	srli	r2,r2,16
   24238:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2423c:	00001406 	br	24290 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   24240:	e0bffc17 	ldw	r2,-16(fp)
   24244:	e0fffb17 	ldw	r3,-20(fp)
   24248:	18c00d17 	ldw	r3,52(r3)
   2424c:	e13ffb17 	ldw	r4,-20(fp)
   24250:	20c7883a 	add	r3,r4,r3
   24254:	18c20e04 	addi	r3,r3,2104
   24258:	18c00003 	ldbu	r3,0(r3)
   2425c:	18c03fcc 	andi	r3,r3,255
   24260:	18c0201c 	xori	r3,r3,128
   24264:	18ffe004 	addi	r3,r3,-128
   24268:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2426c:	e0bffb17 	ldw	r2,-20(fp)
   24270:	10800d17 	ldw	r2,52(r2)
   24274:	10800044 	addi	r2,r2,1
   24278:	10c1ffcc 	andi	r3,r2,2047
   2427c:	e0bffb17 	ldw	r2,-20(fp)
   24280:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   24284:	e0bffa17 	ldw	r2,-24(fp)
   24288:	10bfffc4 	addi	r2,r2,-1
   2428c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   24290:	e0bffa17 	ldw	r2,-24(fp)
   24294:	10000526 	beq	r2,zero,242ac <altera_avalon_jtag_uart_irq+0x1a8>
   24298:	e0bffb17 	ldw	r2,-20(fp)
   2429c:	10c00d17 	ldw	r3,52(r2)
   242a0:	e0bffb17 	ldw	r2,-20(fp)
   242a4:	10800c17 	ldw	r2,48(r2)
   242a8:	18bfe51e 	bne	r3,r2,24240 <__alt_data_end+0xfffebba0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   242ac:	e0bffa17 	ldw	r2,-24(fp)
   242b0:	103f9d26 	beq	r2,zero,24128 <__alt_data_end+0xfffeba88>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   242b4:	e0bffb17 	ldw	r2,-20(fp)
   242b8:	10c00817 	ldw	r3,32(r2)
   242bc:	00bfff44 	movi	r2,-3
   242c0:	1886703a 	and	r3,r3,r2
   242c4:	e0bffb17 	ldw	r2,-20(fp)
   242c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   242cc:	e0bffb17 	ldw	r2,-20(fp)
   242d0:	10800017 	ldw	r2,0(r2)
   242d4:	10800104 	addi	r2,r2,4
   242d8:	1007883a 	mov	r3,r2
   242dc:	e0bffb17 	ldw	r2,-20(fp)
   242e0:	10800817 	ldw	r2,32(r2)
   242e4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   242e8:	e0bffc17 	ldw	r2,-16(fp)
   242ec:	10800104 	addi	r2,r2,4
   242f0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   242f4:	003f8c06 	br	24128 <__alt_data_end+0xfffeba88>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   242f8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   242fc:	0001883a 	nop
   24300:	e037883a 	mov	sp,fp
   24304:	df000017 	ldw	fp,0(sp)
   24308:	dec00104 	addi	sp,sp,4
   2430c:	f800283a 	ret

00024310 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   24310:	defff804 	addi	sp,sp,-32
   24314:	df000715 	stw	fp,28(sp)
   24318:	df000704 	addi	fp,sp,28
   2431c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   24320:	e0bffb17 	ldw	r2,-20(fp)
   24324:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   24328:	e0bff917 	ldw	r2,-28(fp)
   2432c:	10800017 	ldw	r2,0(r2)
   24330:	10800104 	addi	r2,r2,4
   24334:	10800037 	ldwio	r2,0(r2)
   24338:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2433c:	e0bffa17 	ldw	r2,-24(fp)
   24340:	1081000c 	andi	r2,r2,1024
   24344:	10000b26 	beq	r2,zero,24374 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   24348:	e0bff917 	ldw	r2,-28(fp)
   2434c:	10800017 	ldw	r2,0(r2)
   24350:	10800104 	addi	r2,r2,4
   24354:	1007883a 	mov	r3,r2
   24358:	e0bff917 	ldw	r2,-28(fp)
   2435c:	10800817 	ldw	r2,32(r2)
   24360:	10810014 	ori	r2,r2,1024
   24364:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   24368:	e0bff917 	ldw	r2,-28(fp)
   2436c:	10000915 	stw	zero,36(r2)
   24370:	00000a06 	br	2439c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   24374:	e0bff917 	ldw	r2,-28(fp)
   24378:	10c00917 	ldw	r3,36(r2)
   2437c:	00a00034 	movhi	r2,32768
   24380:	10bfff04 	addi	r2,r2,-4
   24384:	10c00536 	bltu	r2,r3,2439c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   24388:	e0bff917 	ldw	r2,-28(fp)
   2438c:	10800917 	ldw	r2,36(r2)
   24390:	10c00044 	addi	r3,r2,1
   24394:	e0bff917 	ldw	r2,-28(fp)
   24398:	10c00915 	stw	r3,36(r2)
   2439c:	d0a6fd17 	ldw	r2,-25612(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   243a0:	e037883a 	mov	sp,fp
   243a4:	df000017 	ldw	fp,0(sp)
   243a8:	dec00104 	addi	sp,sp,4
   243ac:	f800283a 	ret

000243b0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   243b0:	defffd04 	addi	sp,sp,-12
   243b4:	df000215 	stw	fp,8(sp)
   243b8:	df000204 	addi	fp,sp,8
   243bc:	e13ffe15 	stw	r4,-8(fp)
   243c0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   243c4:	00000506 	br	243dc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   243c8:	e0bfff17 	ldw	r2,-4(fp)
   243cc:	1090000c 	andi	r2,r2,16384
   243d0:	10000226 	beq	r2,zero,243dc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   243d4:	00bffd44 	movi	r2,-11
   243d8:	00000b06 	br	24408 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   243dc:	e0bffe17 	ldw	r2,-8(fp)
   243e0:	10c00d17 	ldw	r3,52(r2)
   243e4:	e0bffe17 	ldw	r2,-8(fp)
   243e8:	10800c17 	ldw	r2,48(r2)
   243ec:	18800526 	beq	r3,r2,24404 <altera_avalon_jtag_uart_close+0x54>
   243f0:	e0bffe17 	ldw	r2,-8(fp)
   243f4:	10c00917 	ldw	r3,36(r2)
   243f8:	e0bffe17 	ldw	r2,-8(fp)
   243fc:	10800117 	ldw	r2,4(r2)
   24400:	18bff136 	bltu	r3,r2,243c8 <__alt_data_end+0xfffebd28>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   24404:	0005883a 	mov	r2,zero
}
   24408:	e037883a 	mov	sp,fp
   2440c:	df000017 	ldw	fp,0(sp)
   24410:	dec00104 	addi	sp,sp,4
   24414:	f800283a 	ret

00024418 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   24418:	defffa04 	addi	sp,sp,-24
   2441c:	df000515 	stw	fp,20(sp)
   24420:	df000504 	addi	fp,sp,20
   24424:	e13ffd15 	stw	r4,-12(fp)
   24428:	e17ffe15 	stw	r5,-8(fp)
   2442c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   24430:	00bff9c4 	movi	r2,-25
   24434:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   24438:	e0bffe17 	ldw	r2,-8(fp)
   2443c:	10da8060 	cmpeqi	r3,r2,27137
   24440:	1800031e 	bne	r3,zero,24450 <altera_avalon_jtag_uart_ioctl+0x38>
   24444:	109a80a0 	cmpeqi	r2,r2,27138
   24448:	1000181e 	bne	r2,zero,244ac <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   2444c:	00002906 	br	244f4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   24450:	e0bffd17 	ldw	r2,-12(fp)
   24454:	10c00117 	ldw	r3,4(r2)
   24458:	00a00034 	movhi	r2,32768
   2445c:	10bfffc4 	addi	r2,r2,-1
   24460:	18802126 	beq	r3,r2,244e8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   24464:	e0bfff17 	ldw	r2,-4(fp)
   24468:	10800017 	ldw	r2,0(r2)
   2446c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   24470:	e0bffc17 	ldw	r2,-16(fp)
   24474:	10800090 	cmplti	r2,r2,2
   24478:	1000061e 	bne	r2,zero,24494 <altera_avalon_jtag_uart_ioctl+0x7c>
   2447c:	e0fffc17 	ldw	r3,-16(fp)
   24480:	00a00034 	movhi	r2,32768
   24484:	10bfffc4 	addi	r2,r2,-1
   24488:	18800226 	beq	r3,r2,24494 <altera_avalon_jtag_uart_ioctl+0x7c>
   2448c:	e0bffc17 	ldw	r2,-16(fp)
   24490:	00000206 	br	2449c <altera_avalon_jtag_uart_ioctl+0x84>
   24494:	00a00034 	movhi	r2,32768
   24498:	10bfff84 	addi	r2,r2,-2
   2449c:	e0fffd17 	ldw	r3,-12(fp)
   244a0:	18800115 	stw	r2,4(r3)
      rc = 0;
   244a4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   244a8:	00000f06 	br	244e8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   244ac:	e0bffd17 	ldw	r2,-12(fp)
   244b0:	10c00117 	ldw	r3,4(r2)
   244b4:	00a00034 	movhi	r2,32768
   244b8:	10bfffc4 	addi	r2,r2,-1
   244bc:	18800c26 	beq	r3,r2,244f0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   244c0:	e0bffd17 	ldw	r2,-12(fp)
   244c4:	10c00917 	ldw	r3,36(r2)
   244c8:	e0bffd17 	ldw	r2,-12(fp)
   244cc:	10800117 	ldw	r2,4(r2)
   244d0:	1885803a 	cmpltu	r2,r3,r2
   244d4:	10c03fcc 	andi	r3,r2,255
   244d8:	e0bfff17 	ldw	r2,-4(fp)
   244dc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   244e0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   244e4:	00000206 	br	244f0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   244e8:	0001883a 	nop
   244ec:	00000106 	br	244f4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   244f0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   244f4:	e0bffb17 	ldw	r2,-20(fp)
}
   244f8:	e037883a 	mov	sp,fp
   244fc:	df000017 	ldw	fp,0(sp)
   24500:	dec00104 	addi	sp,sp,4
   24504:	f800283a 	ret

00024508 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   24508:	defff304 	addi	sp,sp,-52
   2450c:	dfc00c15 	stw	ra,48(sp)
   24510:	df000b15 	stw	fp,44(sp)
   24514:	df000b04 	addi	fp,sp,44
   24518:	e13ffc15 	stw	r4,-16(fp)
   2451c:	e17ffd15 	stw	r5,-12(fp)
   24520:	e1bffe15 	stw	r6,-8(fp)
   24524:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   24528:	e0bffd17 	ldw	r2,-12(fp)
   2452c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   24530:	00004706 	br	24650 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   24534:	e0bffc17 	ldw	r2,-16(fp)
   24538:	10800a17 	ldw	r2,40(r2)
   2453c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   24540:	e0bffc17 	ldw	r2,-16(fp)
   24544:	10800b17 	ldw	r2,44(r2)
   24548:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2454c:	e0fff717 	ldw	r3,-36(fp)
   24550:	e0bff817 	ldw	r2,-32(fp)
   24554:	18800536 	bltu	r3,r2,2456c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   24558:	e0fff717 	ldw	r3,-36(fp)
   2455c:	e0bff817 	ldw	r2,-32(fp)
   24560:	1885c83a 	sub	r2,r3,r2
   24564:	e0bff615 	stw	r2,-40(fp)
   24568:	00000406 	br	2457c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2456c:	00c20004 	movi	r3,2048
   24570:	e0bff817 	ldw	r2,-32(fp)
   24574:	1885c83a 	sub	r2,r3,r2
   24578:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2457c:	e0bff617 	ldw	r2,-40(fp)
   24580:	10001e26 	beq	r2,zero,245fc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   24584:	e0fffe17 	ldw	r3,-8(fp)
   24588:	e0bff617 	ldw	r2,-40(fp)
   2458c:	1880022e 	bgeu	r3,r2,24598 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   24590:	e0bffe17 	ldw	r2,-8(fp)
   24594:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   24598:	e0bffc17 	ldw	r2,-16(fp)
   2459c:	10c00e04 	addi	r3,r2,56
   245a0:	e0bff817 	ldw	r2,-32(fp)
   245a4:	1885883a 	add	r2,r3,r2
   245a8:	e1bff617 	ldw	r6,-40(fp)
   245ac:	100b883a 	mov	r5,r2
   245b0:	e13ff517 	ldw	r4,-44(fp)
   245b4:	0021c500 	call	21c50 <memcpy>
      ptr   += n;
   245b8:	e0fff517 	ldw	r3,-44(fp)
   245bc:	e0bff617 	ldw	r2,-40(fp)
   245c0:	1885883a 	add	r2,r3,r2
   245c4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   245c8:	e0fffe17 	ldw	r3,-8(fp)
   245cc:	e0bff617 	ldw	r2,-40(fp)
   245d0:	1885c83a 	sub	r2,r3,r2
   245d4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   245d8:	e0fff817 	ldw	r3,-32(fp)
   245dc:	e0bff617 	ldw	r2,-40(fp)
   245e0:	1885883a 	add	r2,r3,r2
   245e4:	10c1ffcc 	andi	r3,r2,2047
   245e8:	e0bffc17 	ldw	r2,-16(fp)
   245ec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   245f0:	e0bffe17 	ldw	r2,-8(fp)
   245f4:	00bfcf16 	blt	zero,r2,24534 <__alt_data_end+0xfffebe94>
   245f8:	00000106 	br	24600 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   245fc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   24600:	e0fff517 	ldw	r3,-44(fp)
   24604:	e0bffd17 	ldw	r2,-12(fp)
   24608:	1880141e 	bne	r3,r2,2465c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2460c:	e0bfff17 	ldw	r2,-4(fp)
   24610:	1090000c 	andi	r2,r2,16384
   24614:	1000131e 	bne	r2,zero,24664 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   24618:	0001883a 	nop
   2461c:	e0bffc17 	ldw	r2,-16(fp)
   24620:	10c00a17 	ldw	r3,40(r2)
   24624:	e0bff717 	ldw	r2,-36(fp)
   24628:	1880051e 	bne	r3,r2,24640 <altera_avalon_jtag_uart_read+0x138>
   2462c:	e0bffc17 	ldw	r2,-16(fp)
   24630:	10c00917 	ldw	r3,36(r2)
   24634:	e0bffc17 	ldw	r2,-16(fp)
   24638:	10800117 	ldw	r2,4(r2)
   2463c:	18bff736 	bltu	r3,r2,2461c <__alt_data_end+0xfffebf7c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   24640:	e0bffc17 	ldw	r2,-16(fp)
   24644:	10c00a17 	ldw	r3,40(r2)
   24648:	e0bff717 	ldw	r2,-36(fp)
   2464c:	18800726 	beq	r3,r2,2466c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   24650:	e0bffe17 	ldw	r2,-8(fp)
   24654:	00bfb716 	blt	zero,r2,24534 <__alt_data_end+0xfffebe94>
   24658:	00000506 	br	24670 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2465c:	0001883a 	nop
   24660:	00000306 	br	24670 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   24664:	0001883a 	nop
   24668:	00000106 	br	24670 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2466c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   24670:	e0fff517 	ldw	r3,-44(fp)
   24674:	e0bffd17 	ldw	r2,-12(fp)
   24678:	18801826 	beq	r3,r2,246dc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2467c:	0005303a 	rdctl	r2,status
   24680:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24684:	e0fffb17 	ldw	r3,-20(fp)
   24688:	00bfff84 	movi	r2,-2
   2468c:	1884703a 	and	r2,r3,r2
   24690:	1001703a 	wrctl	status,r2
  
  return context;
   24694:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   24698:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2469c:	e0bffc17 	ldw	r2,-16(fp)
   246a0:	10800817 	ldw	r2,32(r2)
   246a4:	10c00054 	ori	r3,r2,1
   246a8:	e0bffc17 	ldw	r2,-16(fp)
   246ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   246b0:	e0bffc17 	ldw	r2,-16(fp)
   246b4:	10800017 	ldw	r2,0(r2)
   246b8:	10800104 	addi	r2,r2,4
   246bc:	1007883a 	mov	r3,r2
   246c0:	e0bffc17 	ldw	r2,-16(fp)
   246c4:	10800817 	ldw	r2,32(r2)
   246c8:	18800035 	stwio	r2,0(r3)
   246cc:	e0bffa17 	ldw	r2,-24(fp)
   246d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   246d4:	e0bff917 	ldw	r2,-28(fp)
   246d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   246dc:	e0fff517 	ldw	r3,-44(fp)
   246e0:	e0bffd17 	ldw	r2,-12(fp)
   246e4:	18800426 	beq	r3,r2,246f8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   246e8:	e0fff517 	ldw	r3,-44(fp)
   246ec:	e0bffd17 	ldw	r2,-12(fp)
   246f0:	1885c83a 	sub	r2,r3,r2
   246f4:	00000606 	br	24710 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   246f8:	e0bfff17 	ldw	r2,-4(fp)
   246fc:	1090000c 	andi	r2,r2,16384
   24700:	10000226 	beq	r2,zero,2470c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   24704:	00bffd44 	movi	r2,-11
   24708:	00000106 	br	24710 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   2470c:	00bffec4 	movi	r2,-5
}
   24710:	e037883a 	mov	sp,fp
   24714:	dfc00117 	ldw	ra,4(sp)
   24718:	df000017 	ldw	fp,0(sp)
   2471c:	dec00204 	addi	sp,sp,8
   24720:	f800283a 	ret

00024724 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   24724:	defff304 	addi	sp,sp,-52
   24728:	dfc00c15 	stw	ra,48(sp)
   2472c:	df000b15 	stw	fp,44(sp)
   24730:	df000b04 	addi	fp,sp,44
   24734:	e13ffc15 	stw	r4,-16(fp)
   24738:	e17ffd15 	stw	r5,-12(fp)
   2473c:	e1bffe15 	stw	r6,-8(fp)
   24740:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   24744:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   24748:	e0bffd17 	ldw	r2,-12(fp)
   2474c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24750:	00003706 	br	24830 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   24754:	e0bffc17 	ldw	r2,-16(fp)
   24758:	10800c17 	ldw	r2,48(r2)
   2475c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   24760:	e0bffc17 	ldw	r2,-16(fp)
   24764:	10800d17 	ldw	r2,52(r2)
   24768:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2476c:	e0fff917 	ldw	r3,-28(fp)
   24770:	e0bff517 	ldw	r2,-44(fp)
   24774:	1880062e 	bgeu	r3,r2,24790 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   24778:	e0fff517 	ldw	r3,-44(fp)
   2477c:	e0bff917 	ldw	r2,-28(fp)
   24780:	1885c83a 	sub	r2,r3,r2
   24784:	10bfffc4 	addi	r2,r2,-1
   24788:	e0bff615 	stw	r2,-40(fp)
   2478c:	00000b06 	br	247bc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   24790:	e0bff517 	ldw	r2,-44(fp)
   24794:	10000526 	beq	r2,zero,247ac <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   24798:	00c20004 	movi	r3,2048
   2479c:	e0bff917 	ldw	r2,-28(fp)
   247a0:	1885c83a 	sub	r2,r3,r2
   247a4:	e0bff615 	stw	r2,-40(fp)
   247a8:	00000406 	br	247bc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   247ac:	00c1ffc4 	movi	r3,2047
   247b0:	e0bff917 	ldw	r2,-28(fp)
   247b4:	1885c83a 	sub	r2,r3,r2
   247b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   247bc:	e0bff617 	ldw	r2,-40(fp)
   247c0:	10001e26 	beq	r2,zero,2483c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   247c4:	e0fffe17 	ldw	r3,-8(fp)
   247c8:	e0bff617 	ldw	r2,-40(fp)
   247cc:	1880022e 	bgeu	r3,r2,247d8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   247d0:	e0bffe17 	ldw	r2,-8(fp)
   247d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   247d8:	e0bffc17 	ldw	r2,-16(fp)
   247dc:	10c20e04 	addi	r3,r2,2104
   247e0:	e0bff917 	ldw	r2,-28(fp)
   247e4:	1885883a 	add	r2,r3,r2
   247e8:	e1bff617 	ldw	r6,-40(fp)
   247ec:	e17ffd17 	ldw	r5,-12(fp)
   247f0:	1009883a 	mov	r4,r2
   247f4:	0021c500 	call	21c50 <memcpy>
      ptr   += n;
   247f8:	e0fffd17 	ldw	r3,-12(fp)
   247fc:	e0bff617 	ldw	r2,-40(fp)
   24800:	1885883a 	add	r2,r3,r2
   24804:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   24808:	e0fffe17 	ldw	r3,-8(fp)
   2480c:	e0bff617 	ldw	r2,-40(fp)
   24810:	1885c83a 	sub	r2,r3,r2
   24814:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24818:	e0fff917 	ldw	r3,-28(fp)
   2481c:	e0bff617 	ldw	r2,-40(fp)
   24820:	1885883a 	add	r2,r3,r2
   24824:	10c1ffcc 	andi	r3,r2,2047
   24828:	e0bffc17 	ldw	r2,-16(fp)
   2482c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24830:	e0bffe17 	ldw	r2,-8(fp)
   24834:	00bfc716 	blt	zero,r2,24754 <__alt_data_end+0xfffec0b4>
   24838:	00000106 	br	24840 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2483c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24840:	0005303a 	rdctl	r2,status
   24844:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24848:	e0fffb17 	ldw	r3,-20(fp)
   2484c:	00bfff84 	movi	r2,-2
   24850:	1884703a 	and	r2,r3,r2
   24854:	1001703a 	wrctl	status,r2
  
  return context;
   24858:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2485c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24860:	e0bffc17 	ldw	r2,-16(fp)
   24864:	10800817 	ldw	r2,32(r2)
   24868:	10c00094 	ori	r3,r2,2
   2486c:	e0bffc17 	ldw	r2,-16(fp)
   24870:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24874:	e0bffc17 	ldw	r2,-16(fp)
   24878:	10800017 	ldw	r2,0(r2)
   2487c:	10800104 	addi	r2,r2,4
   24880:	1007883a 	mov	r3,r2
   24884:	e0bffc17 	ldw	r2,-16(fp)
   24888:	10800817 	ldw	r2,32(r2)
   2488c:	18800035 	stwio	r2,0(r3)
   24890:	e0bffa17 	ldw	r2,-24(fp)
   24894:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24898:	e0bff817 	ldw	r2,-32(fp)
   2489c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   248a0:	e0bffe17 	ldw	r2,-8(fp)
   248a4:	0080100e 	bge	zero,r2,248e8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   248a8:	e0bfff17 	ldw	r2,-4(fp)
   248ac:	1090000c 	andi	r2,r2,16384
   248b0:	1000101e 	bne	r2,zero,248f4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   248b4:	0001883a 	nop
   248b8:	e0bffc17 	ldw	r2,-16(fp)
   248bc:	10c00d17 	ldw	r3,52(r2)
   248c0:	e0bff517 	ldw	r2,-44(fp)
   248c4:	1880051e 	bne	r3,r2,248dc <altera_avalon_jtag_uart_write+0x1b8>
   248c8:	e0bffc17 	ldw	r2,-16(fp)
   248cc:	10c00917 	ldw	r3,36(r2)
   248d0:	e0bffc17 	ldw	r2,-16(fp)
   248d4:	10800117 	ldw	r2,4(r2)
   248d8:	18bff736 	bltu	r3,r2,248b8 <__alt_data_end+0xfffec218>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   248dc:	e0bffc17 	ldw	r2,-16(fp)
   248e0:	10800917 	ldw	r2,36(r2)
   248e4:	1000051e 	bne	r2,zero,248fc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   248e8:	e0bffe17 	ldw	r2,-8(fp)
   248ec:	00bfd016 	blt	zero,r2,24830 <__alt_data_end+0xfffec190>
   248f0:	00000306 	br	24900 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   248f4:	0001883a 	nop
   248f8:	00000106 	br	24900 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   248fc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   24900:	e0fffd17 	ldw	r3,-12(fp)
   24904:	e0bff717 	ldw	r2,-36(fp)
   24908:	18800426 	beq	r3,r2,2491c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2490c:	e0fffd17 	ldw	r3,-12(fp)
   24910:	e0bff717 	ldw	r2,-36(fp)
   24914:	1885c83a 	sub	r2,r3,r2
   24918:	00000606 	br	24934 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2491c:	e0bfff17 	ldw	r2,-4(fp)
   24920:	1090000c 	andi	r2,r2,16384
   24924:	10000226 	beq	r2,zero,24930 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   24928:	00bffd44 	movi	r2,-11
   2492c:	00000106 	br	24934 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   24930:	00bffec4 	movi	r2,-5
}
   24934:	e037883a 	mov	sp,fp
   24938:	dfc00117 	ldw	ra,4(sp)
   2493c:	df000017 	ldw	fp,0(sp)
   24940:	dec00204 	addi	sp,sp,8
   24944:	f800283a 	ret

00024948 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
   24948:	defffa04 	addi	sp,sp,-24
   2494c:	dfc00515 	stw	ra,20(sp)
   24950:	df000415 	stw	fp,16(sp)
   24954:	df000404 	addi	fp,sp,16
   24958:	e13ffe15 	stw	r4,-8(fp)
   2495c:	2805883a 	mov	r2,r5
   24960:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   24964:	e0bffe17 	ldw	r2,-8(fp)
   24968:	10800017 	ldw	r2,0(r2)
   2496c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   24970:	008003f4 	movhi	r2,15
   24974:	10909004 	addi	r2,r2,16960
   24978:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   2497c:	e0bffe17 	ldw	r2,-8(fp)
   24980:	10800803 	ldbu	r2,32(r2)
   24984:	10803fcc 	andi	r2,r2,255
   24988:	1080201c 	xori	r2,r2,128
   2498c:	10bfe004 	addi	r2,r2,-128
   24990:	1000151e 	bne	r2,zero,249e8 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   24994:	00000906 	br	249bc <lcd_write_command+0x74>
    if (--i == 0)
   24998:	e0bffc17 	ldw	r2,-16(fp)
   2499c:	10bfffc4 	addi	r2,r2,-1
   249a0:	e0bffc15 	stw	r2,-16(fp)
   249a4:	e0bffc17 	ldw	r2,-16(fp)
   249a8:	1000041e 	bne	r2,zero,249bc <lcd_write_command+0x74>
    {
      sp->broken = 1;
   249ac:	e0bffe17 	ldw	r2,-8(fp)
   249b0:	00c00044 	movi	r3,1
   249b4:	10c00805 	stb	r3,32(r2)
      return;
   249b8:	00000c06 	br	249ec <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   249bc:	e0bffd17 	ldw	r2,-12(fp)
   249c0:	10800104 	addi	r2,r2,4
   249c4:	10800037 	ldwio	r2,0(r2)
   249c8:	1080200c 	andi	r2,r2,128
   249cc:	103ff21e 	bne	r2,zero,24998 <__alt_data_end+0xfffec2f8>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   249d0:	01001904 	movi	r4,100
   249d4:	0023ca40 	call	23ca4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
   249d8:	e0bffd17 	ldw	r2,-12(fp)
   249dc:	e0ffff03 	ldbu	r3,-4(fp)
   249e0:	10c00035 	stwio	r3,0(r2)
   249e4:	00000106 	br	249ec <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   249e8:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
   249ec:	e037883a 	mov	sp,fp
   249f0:	dfc00117 	ldw	ra,4(sp)
   249f4:	df000017 	ldw	fp,0(sp)
   249f8:	dec00204 	addi	sp,sp,8
   249fc:	f800283a 	ret

00024a00 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
   24a00:	defffa04 	addi	sp,sp,-24
   24a04:	dfc00515 	stw	ra,20(sp)
   24a08:	df000415 	stw	fp,16(sp)
   24a0c:	df000404 	addi	fp,sp,16
   24a10:	e13ffe15 	stw	r4,-8(fp)
   24a14:	2805883a 	mov	r2,r5
   24a18:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   24a1c:	e0bffe17 	ldw	r2,-8(fp)
   24a20:	10800017 	ldw	r2,0(r2)
   24a24:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   24a28:	008003f4 	movhi	r2,15
   24a2c:	10909004 	addi	r2,r2,16960
   24a30:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   24a34:	e0bffe17 	ldw	r2,-8(fp)
   24a38:	10800803 	ldbu	r2,32(r2)
   24a3c:	10803fcc 	andi	r2,r2,255
   24a40:	1080201c 	xori	r2,r2,128
   24a44:	10bfe004 	addi	r2,r2,-128
   24a48:	10001d1e 	bne	r2,zero,24ac0 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   24a4c:	00000906 	br	24a74 <lcd_write_data+0x74>
    if (--i == 0)
   24a50:	e0bffc17 	ldw	r2,-16(fp)
   24a54:	10bfffc4 	addi	r2,r2,-1
   24a58:	e0bffc15 	stw	r2,-16(fp)
   24a5c:	e0bffc17 	ldw	r2,-16(fp)
   24a60:	1000041e 	bne	r2,zero,24a74 <lcd_write_data+0x74>
    {
      sp->broken = 1;
   24a64:	e0bffe17 	ldw	r2,-8(fp)
   24a68:	00c00044 	movi	r3,1
   24a6c:	10c00805 	stb	r3,32(r2)
      return;
   24a70:	00001406 	br	24ac4 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   24a74:	e0bffd17 	ldw	r2,-12(fp)
   24a78:	10800104 	addi	r2,r2,4
   24a7c:	10800037 	ldwio	r2,0(r2)
   24a80:	1080200c 	andi	r2,r2,128
   24a84:	103ff21e 	bne	r2,zero,24a50 <__alt_data_end+0xfffec3b0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   24a88:	01001904 	movi	r4,100
   24a8c:	0023ca40 	call	23ca4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
   24a90:	e0bffd17 	ldw	r2,-12(fp)
   24a94:	10800204 	addi	r2,r2,8
   24a98:	1007883a 	mov	r3,r2
   24a9c:	e0bfff03 	ldbu	r2,-4(fp)
   24aa0:	18800035 	stwio	r2,0(r3)

  sp->address++;
   24aa4:	e0bffe17 	ldw	r2,-8(fp)
   24aa8:	108008c3 	ldbu	r2,35(r2)
   24aac:	10800044 	addi	r2,r2,1
   24ab0:	1007883a 	mov	r3,r2
   24ab4:	e0bffe17 	ldw	r2,-8(fp)
   24ab8:	10c008c5 	stb	r3,35(r2)
   24abc:	00000106 	br	24ac4 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   24ac0:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
   24ac4:	e037883a 	mov	sp,fp
   24ac8:	dfc00117 	ldw	ra,4(sp)
   24acc:	df000017 	ldw	fp,0(sp)
   24ad0:	dec00204 	addi	sp,sp,8
   24ad4:	f800283a 	ret

00024ad8 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
   24ad8:	defffb04 	addi	sp,sp,-20
   24adc:	dfc00415 	stw	ra,16(sp)
   24ae0:	df000315 	stw	fp,12(sp)
   24ae4:	dc000215 	stw	r16,8(sp)
   24ae8:	df000304 	addi	fp,sp,12
   24aec:	e13ffe15 	stw	r4,-8(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
   24af0:	01400044 	movi	r5,1
   24af4:	e13ffe17 	ldw	r4,-8(fp)
   24af8:	00249480 	call	24948 <lcd_write_command>

  sp->x = 0;
   24afc:	e0bffe17 	ldw	r2,-8(fp)
   24b00:	10000845 	stb	zero,33(r2)
  sp->y = 0;
   24b04:	e0bffe17 	ldw	r2,-8(fp)
   24b08:	10000885 	stb	zero,34(r2)
  sp->address = 0;
   24b0c:	e0bffe17 	ldw	r2,-8(fp)
   24b10:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24b14:	e03ffd15 	stw	zero,-12(fp)
   24b18:	00001f06 	br	24b98 <lcd_clear_screen+0xc0>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
   24b1c:	014018c4 	movi	r5,99
   24b20:	e13ffd17 	ldw	r4,-12(fp)
   24b24:	00234240 	call	23424 <__mulsi3>
   24b28:	10801004 	addi	r2,r2,64
   24b2c:	e0fffe17 	ldw	r3,-8(fp)
   24b30:	1885883a 	add	r2,r3,r2
   24b34:	01801444 	movi	r6,81
   24b38:	01400804 	movi	r5,32
   24b3c:	1009883a 	mov	r4,r2
   24b40:	0021ef40 	call	21ef4 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
   24b44:	014018c4 	movi	r5,99
   24b48:	e13ffd17 	ldw	r4,-12(fp)
   24b4c:	00234240 	call	23424 <__mulsi3>
   24b50:	10800c04 	addi	r2,r2,48
   24b54:	e0fffe17 	ldw	r3,-8(fp)
   24b58:	1885883a 	add	r2,r3,r2
   24b5c:	01800404 	movi	r6,16
   24b60:	01400804 	movi	r5,32
   24b64:	1009883a 	mov	r4,r2
   24b68:	0021ef40 	call	21ef4 <memset>
    sp->line[y].width = 0;
   24b6c:	e43ffe17 	ldw	r16,-8(fp)
   24b70:	e0bffd17 	ldw	r2,-12(fp)
   24b74:	014018c4 	movi	r5,99
   24b78:	1009883a 	mov	r4,r2
   24b7c:	00234240 	call	23424 <__mulsi3>
   24b80:	8085883a 	add	r2,r16,r2
   24b84:	10802444 	addi	r2,r2,145
   24b88:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24b8c:	e0bffd17 	ldw	r2,-12(fp)
   24b90:	10800044 	addi	r2,r2,1
   24b94:	e0bffd15 	stw	r2,-12(fp)
   24b98:	e0bffd17 	ldw	r2,-12(fp)
   24b9c:	10800090 	cmplti	r2,r2,2
   24ba0:	103fde1e 	bne	r2,zero,24b1c <__alt_data_end+0xfffec47c>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
   24ba4:	0001883a 	nop
   24ba8:	e6ffff04 	addi	sp,fp,-4
   24bac:	dfc00217 	ldw	ra,8(sp)
   24bb0:	df000117 	ldw	fp,4(sp)
   24bb4:	dc000017 	ldw	r16,0(sp)
   24bb8:	dec00304 	addi	sp,sp,12
   24bbc:	f800283a 	ret

00024bc0 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
   24bc0:	defff504 	addi	sp,sp,-44
   24bc4:	dfc00a15 	stw	ra,40(sp)
   24bc8:	df000915 	stw	fp,36(sp)
   24bcc:	dc400815 	stw	r17,32(sp)
   24bd0:	dc000715 	stw	r16,28(sp)
   24bd4:	df000904 	addi	fp,sp,36
   24bd8:	e13ffd15 	stw	r4,-12(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
   24bdc:	e0bffd17 	ldw	r2,-12(fp)
   24be0:	10800943 	ldbu	r2,37(r2)
   24be4:	10803fcc 	andi	r2,r2,255
   24be8:	e0bffa15 	stw	r2,-24(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24bec:	e03ff715 	stw	zero,-36(fp)
   24bf0:	00007206 	br	24dbc <lcd_repaint_screen+0x1fc>
  {
    int width  = sp->line[y].width;
   24bf4:	e43ffd17 	ldw	r16,-12(fp)
   24bf8:	e0bff717 	ldw	r2,-36(fp)
   24bfc:	014018c4 	movi	r5,99
   24c00:	1009883a 	mov	r4,r2
   24c04:	00234240 	call	23424 <__mulsi3>
   24c08:	8085883a 	add	r2,r16,r2
   24c0c:	10802444 	addi	r2,r2,145
   24c10:	10800003 	ldbu	r2,0(r2)
   24c14:	10803fcc 	andi	r2,r2,255
   24c18:	1080201c 	xori	r2,r2,128
   24c1c:	10bfe004 	addi	r2,r2,-128
   24c20:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   24c24:	e43ffd17 	ldw	r16,-12(fp)
   24c28:	e0bff717 	ldw	r2,-36(fp)
   24c2c:	014018c4 	movi	r5,99
   24c30:	1009883a 	mov	r4,r2
   24c34:	00234240 	call	23424 <__mulsi3>
   24c38:	8085883a 	add	r2,r16,r2
   24c3c:	10802484 	addi	r2,r2,146
   24c40:	10800003 	ldbu	r2,0(r2)
   24c44:	10803fcc 	andi	r2,r2,255
   24c48:	e17ffa17 	ldw	r5,-24(fp)
   24c4c:	1009883a 	mov	r4,r2
   24c50:	00234240 	call	23424 <__mulsi3>
   24c54:	1005d23a 	srai	r2,r2,8
   24c58:	e0bff915 	stw	r2,-28(fp)
    if (offset >= width)
   24c5c:	e0fff917 	ldw	r3,-28(fp)
   24c60:	e0bffb17 	ldw	r2,-20(fp)
   24c64:	18800116 	blt	r3,r2,24c6c <lcd_repaint_screen+0xac>
      offset = 0;
   24c68:	e03ff915 	stw	zero,-28(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   24c6c:	e03ff815 	stw	zero,-32(fp)
   24c70:	00004c06 	br	24da4 <lcd_repaint_screen+0x1e4>
    {
      char c = sp->line[y].data[(x + offset) % width];
   24c74:	e0fff817 	ldw	r3,-32(fp)
   24c78:	e0bff917 	ldw	r2,-28(fp)
   24c7c:	1885883a 	add	r2,r3,r2
   24c80:	e17ffb17 	ldw	r5,-20(fp)
   24c84:	1009883a 	mov	r4,r2
   24c88:	00206c40 	call	206c4 <__modsi3>
   24c8c:	1023883a 	mov	r17,r2
   24c90:	e43ffd17 	ldw	r16,-12(fp)
   24c94:	e0bff717 	ldw	r2,-36(fp)
   24c98:	014018c4 	movi	r5,99
   24c9c:	1009883a 	mov	r4,r2
   24ca0:	00234240 	call	23424 <__mulsi3>
   24ca4:	8085883a 	add	r2,r16,r2
   24ca8:	1445883a 	add	r2,r2,r17
   24cac:	10801004 	addi	r2,r2,64
   24cb0:	10800003 	ldbu	r2,0(r2)
   24cb4:	e0bffc05 	stb	r2,-16(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   24cb8:	e43ffd17 	ldw	r16,-12(fp)
   24cbc:	e0bff717 	ldw	r2,-36(fp)
   24cc0:	014018c4 	movi	r5,99
   24cc4:	1009883a 	mov	r4,r2
   24cc8:	00234240 	call	23424 <__mulsi3>
   24ccc:	8087883a 	add	r3,r16,r2
   24cd0:	e0bff817 	ldw	r2,-32(fp)
   24cd4:	1885883a 	add	r2,r3,r2
   24cd8:	10800c04 	addi	r2,r2,48
   24cdc:	10800003 	ldbu	r2,0(r2)
   24ce0:	10c03fcc 	andi	r3,r2,255
   24ce4:	18c0201c 	xori	r3,r3,128
   24ce8:	18ffe004 	addi	r3,r3,-128
   24cec:	e0bffc07 	ldb	r2,-16(fp)
   24cf0:	18802926 	beq	r3,r2,24d98 <lcd_repaint_screen+0x1d8>
      {
        unsigned char address = x + colstart[y];
   24cf4:	e0fff717 	ldw	r3,-36(fp)
   24cf8:	d0a00b04 	addi	r2,gp,-32724
   24cfc:	1885883a 	add	r2,r3,r2
   24d00:	10800003 	ldbu	r2,0(r2)
   24d04:	1007883a 	mov	r3,r2
   24d08:	e0bff817 	ldw	r2,-32(fp)
   24d0c:	1885883a 	add	r2,r3,r2
   24d10:	e0bffc45 	stb	r2,-15(fp)

        if (address != sp->address)
   24d14:	e0fffc43 	ldbu	r3,-15(fp)
   24d18:	e0bffd17 	ldw	r2,-12(fp)
   24d1c:	108008c3 	ldbu	r2,35(r2)
   24d20:	10803fcc 	andi	r2,r2,255
   24d24:	1080201c 	xori	r2,r2,128
   24d28:	10bfe004 	addi	r2,r2,-128
   24d2c:	18800a26 	beq	r3,r2,24d58 <lcd_repaint_screen+0x198>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   24d30:	e0fffc43 	ldbu	r3,-15(fp)
   24d34:	00bfe004 	movi	r2,-128
   24d38:	1884b03a 	or	r2,r3,r2
   24d3c:	10803fcc 	andi	r2,r2,255
   24d40:	100b883a 	mov	r5,r2
   24d44:	e13ffd17 	ldw	r4,-12(fp)
   24d48:	00249480 	call	24948 <lcd_write_command>
          sp->address = address;
   24d4c:	e0fffc43 	ldbu	r3,-15(fp)
   24d50:	e0bffd17 	ldw	r2,-12(fp)
   24d54:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   24d58:	e0bffc03 	ldbu	r2,-16(fp)
   24d5c:	10803fcc 	andi	r2,r2,255
   24d60:	100b883a 	mov	r5,r2
   24d64:	e13ffd17 	ldw	r4,-12(fp)
   24d68:	0024a000 	call	24a00 <lcd_write_data>
        sp->line[y].visible[x] = c;
   24d6c:	e43ffd17 	ldw	r16,-12(fp)
   24d70:	e0bff717 	ldw	r2,-36(fp)
   24d74:	014018c4 	movi	r5,99
   24d78:	1009883a 	mov	r4,r2
   24d7c:	00234240 	call	23424 <__mulsi3>
   24d80:	8087883a 	add	r3,r16,r2
   24d84:	e0bff817 	ldw	r2,-32(fp)
   24d88:	1885883a 	add	r2,r3,r2
   24d8c:	10800c04 	addi	r2,r2,48
   24d90:	e0fffc03 	ldbu	r3,-16(fp)
   24d94:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   24d98:	e0bff817 	ldw	r2,-32(fp)
   24d9c:	10800044 	addi	r2,r2,1
   24da0:	e0bff815 	stw	r2,-32(fp)
   24da4:	e0bff817 	ldw	r2,-32(fp)
   24da8:	10800410 	cmplti	r2,r2,16
   24dac:	103fb11e 	bne	r2,zero,24c74 <__alt_data_end+0xfffec5d4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24db0:	e0bff717 	ldw	r2,-36(fp)
   24db4:	10800044 	addi	r2,r2,1
   24db8:	e0bff715 	stw	r2,-36(fp)
   24dbc:	e0bff717 	ldw	r2,-36(fp)
   24dc0:	10800090 	cmplti	r2,r2,2
   24dc4:	103f8b1e 	bne	r2,zero,24bf4 <__alt_data_end+0xfffec554>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   24dc8:	0001883a 	nop
   24dcc:	e6fffe04 	addi	sp,fp,-8
   24dd0:	dfc00317 	ldw	ra,12(sp)
   24dd4:	df000217 	ldw	fp,8(sp)
   24dd8:	dc400117 	ldw	r17,4(sp)
   24ddc:	dc000017 	ldw	r16,0(sp)
   24de0:	dec00404 	addi	sp,sp,16
   24de4:	f800283a 	ret

00024de8 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   24de8:	defffb04 	addi	sp,sp,-20
   24dec:	dfc00415 	stw	ra,16(sp)
   24df0:	df000315 	stw	fp,12(sp)
   24df4:	dc000215 	stw	r16,8(sp)
   24df8:	df000304 	addi	fp,sp,12
   24dfc:	e13ffe15 	stw	r4,-8(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24e00:	e03ffd15 	stw	zero,-12(fp)
   24e04:	00002206 	br	24e90 <lcd_scroll_up+0xa8>
  {
    if (y < ALT_LCD_HEIGHT-1)
   24e08:	e0bffd17 	ldw	r2,-12(fp)
   24e0c:	00801316 	blt	zero,r2,24e5c <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   24e10:	014018c4 	movi	r5,99
   24e14:	e13ffd17 	ldw	r4,-12(fp)
   24e18:	00234240 	call	23424 <__mulsi3>
   24e1c:	10801004 	addi	r2,r2,64
   24e20:	e0fffe17 	ldw	r3,-8(fp)
   24e24:	18a1883a 	add	r16,r3,r2
   24e28:	e0bffd17 	ldw	r2,-12(fp)
   24e2c:	10800044 	addi	r2,r2,1
   24e30:	014018c4 	movi	r5,99
   24e34:	1009883a 	mov	r4,r2
   24e38:	00234240 	call	23424 <__mulsi3>
   24e3c:	10801004 	addi	r2,r2,64
   24e40:	e0fffe17 	ldw	r3,-8(fp)
   24e44:	1885883a 	add	r2,r3,r2
   24e48:	01801404 	movi	r6,80
   24e4c:	100b883a 	mov	r5,r2
   24e50:	8009883a 	mov	r4,r16
   24e54:	0021c500 	call	21c50 <memcpy>
   24e58:	00000a06 	br	24e84 <lcd_scroll_up+0x9c>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   24e5c:	014018c4 	movi	r5,99
   24e60:	e13ffd17 	ldw	r4,-12(fp)
   24e64:	00234240 	call	23424 <__mulsi3>
   24e68:	10801004 	addi	r2,r2,64
   24e6c:	e0fffe17 	ldw	r3,-8(fp)
   24e70:	1885883a 	add	r2,r3,r2
   24e74:	01801404 	movi	r6,80
   24e78:	01400804 	movi	r5,32
   24e7c:	1009883a 	mov	r4,r2
   24e80:	0021ef40 	call	21ef4 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24e84:	e0bffd17 	ldw	r2,-12(fp)
   24e88:	10800044 	addi	r2,r2,1
   24e8c:	e0bffd15 	stw	r2,-12(fp)
   24e90:	e0bffd17 	ldw	r2,-12(fp)
   24e94:	10800090 	cmplti	r2,r2,2
   24e98:	103fdb1e 	bne	r2,zero,24e08 <__alt_data_end+0xfffec768>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   24e9c:	e0bffe17 	ldw	r2,-8(fp)
   24ea0:	10800883 	ldbu	r2,34(r2)
   24ea4:	10bfffc4 	addi	r2,r2,-1
   24ea8:	1007883a 	mov	r3,r2
   24eac:	e0bffe17 	ldw	r2,-8(fp)
   24eb0:	10c00885 	stb	r3,34(r2)
}
   24eb4:	0001883a 	nop
   24eb8:	e6ffff04 	addi	sp,fp,-4
   24ebc:	dfc00217 	ldw	ra,8(sp)
   24ec0:	df000117 	ldw	fp,4(sp)
   24ec4:	dc000017 	ldw	r16,0(sp)
   24ec8:	dec00304 	addi	sp,sp,12
   24ecc:	f800283a 	ret

00024ed0 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   24ed0:	defff904 	addi	sp,sp,-28
   24ed4:	dfc00615 	stw	ra,24(sp)
   24ed8:	df000515 	stw	fp,20(sp)
   24edc:	df000504 	addi	fp,sp,20
   24ee0:	e13ffe15 	stw	r4,-8(fp)
   24ee4:	2805883a 	mov	r2,r5
   24ee8:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
   24eec:	e03ffb15 	stw	zero,-20(fp)
   24ef0:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
   24ef4:	e0bffe17 	ldw	r2,-8(fp)
   24ef8:	10800a03 	ldbu	r2,40(r2)
   24efc:	10803fcc 	andi	r2,r2,255
   24f00:	1080201c 	xori	r2,r2,128
   24f04:	10bfe004 	addi	r2,r2,-128
   24f08:	108016d8 	cmpnei	r2,r2,91
   24f0c:	1000451e 	bne	r2,zero,25024 <lcd_handle_escape+0x154>
  {
    char * ptr = sp->escape+1;
   24f10:	e0bffe17 	ldw	r2,-8(fp)
   24f14:	10800a04 	addi	r2,r2,40
   24f18:	10800044 	addi	r2,r2,1
   24f1c:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
   24f20:	00000e06 	br	24f5c <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   24f24:	01400284 	movi	r5,10
   24f28:	e13ffb17 	ldw	r4,-20(fp)
   24f2c:	00234240 	call	23424 <__mulsi3>
   24f30:	1009883a 	mov	r4,r2
   24f34:	e0bffd17 	ldw	r2,-12(fp)
   24f38:	10c00044 	addi	r3,r2,1
   24f3c:	e0fffd15 	stw	r3,-12(fp)
   24f40:	10800003 	ldbu	r2,0(r2)
   24f44:	10803fcc 	andi	r2,r2,255
   24f48:	1080201c 	xori	r2,r2,128
   24f4c:	10bfe004 	addi	r2,r2,-128
   24f50:	10bff404 	addi	r2,r2,-48
   24f54:	2085883a 	add	r2,r4,r2
   24f58:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   24f5c:	d0e00f17 	ldw	r3,-32708(gp)
   24f60:	e0bffd17 	ldw	r2,-12(fp)
   24f64:	10800003 	ldbu	r2,0(r2)
   24f68:	10803fcc 	andi	r2,r2,255
   24f6c:	1080201c 	xori	r2,r2,128
   24f70:	10bfe004 	addi	r2,r2,-128
   24f74:	10800044 	addi	r2,r2,1
   24f78:	1885883a 	add	r2,r3,r2
   24f7c:	10800003 	ldbu	r2,0(r2)
   24f80:	10803fcc 	andi	r2,r2,255
   24f84:	1080010c 	andi	r2,r2,4
   24f88:	103fe61e 	bne	r2,zero,24f24 <__alt_data_end+0xfffec884>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   24f8c:	e0bffd17 	ldw	r2,-12(fp)
   24f90:	10800003 	ldbu	r2,0(r2)
   24f94:	10803fcc 	andi	r2,r2,255
   24f98:	1080201c 	xori	r2,r2,128
   24f9c:	10bfe004 	addi	r2,r2,-128
   24fa0:	10800ed8 	cmpnei	r2,r2,59
   24fa4:	1000211e 	bne	r2,zero,2502c <lcd_handle_escape+0x15c>
    {
      ptr++;
   24fa8:	e0bffd17 	ldw	r2,-12(fp)
   24fac:	10800044 	addi	r2,r2,1
   24fb0:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
   24fb4:	00000e06 	br	24ff0 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   24fb8:	01400284 	movi	r5,10
   24fbc:	e13ffc17 	ldw	r4,-16(fp)
   24fc0:	00234240 	call	23424 <__mulsi3>
   24fc4:	1009883a 	mov	r4,r2
   24fc8:	e0bffd17 	ldw	r2,-12(fp)
   24fcc:	10c00044 	addi	r3,r2,1
   24fd0:	e0fffd15 	stw	r3,-12(fp)
   24fd4:	10800003 	ldbu	r2,0(r2)
   24fd8:	10803fcc 	andi	r2,r2,255
   24fdc:	1080201c 	xori	r2,r2,128
   24fe0:	10bfe004 	addi	r2,r2,-128
   24fe4:	10bff404 	addi	r2,r2,-48
   24fe8:	2085883a 	add	r2,r4,r2
   24fec:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   24ff0:	d0e00f17 	ldw	r3,-32708(gp)
   24ff4:	e0bffd17 	ldw	r2,-12(fp)
   24ff8:	10800003 	ldbu	r2,0(r2)
   24ffc:	10803fcc 	andi	r2,r2,255
   25000:	1080201c 	xori	r2,r2,128
   25004:	10bfe004 	addi	r2,r2,-128
   25008:	10800044 	addi	r2,r2,1
   2500c:	1885883a 	add	r2,r3,r2
   25010:	10800003 	ldbu	r2,0(r2)
   25014:	10803fcc 	andi	r2,r2,255
   25018:	1080010c 	andi	r2,r2,4
   2501c:	103fe61e 	bne	r2,zero,24fb8 <__alt_data_end+0xfffec918>
   25020:	00000206 	br	2502c <lcd_handle_escape+0x15c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   25024:	00bfffc4 	movi	r2,-1
   25028:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
   2502c:	e0bfff07 	ldb	r2,-4(fp)
   25030:	10c012a0 	cmpeqi	r3,r2,74
   25034:	1800291e 	bne	r3,zero,250dc <lcd_handle_escape+0x20c>
   25038:	10c012c8 	cmpgei	r3,r2,75
   2503c:	1800031e 	bne	r3,zero,2504c <lcd_handle_escape+0x17c>
   25040:	10801220 	cmpeqi	r2,r2,72
   25044:	1000061e 	bne	r2,zero,25060 <lcd_handle_escape+0x190>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   25048:	00004c06 	br	2517c <lcd_handle_escape+0x2ac>
    }
  }
  else
    parm1 = -1;

  switch (c)
   2504c:	10c012e0 	cmpeqi	r3,r2,75
   25050:	1800281e 	bne	r3,zero,250f4 <lcd_handle_escape+0x224>
   25054:	108019a0 	cmpeqi	r2,r2,102
   25058:	1000011e 	bne	r2,zero,25060 <lcd_handle_escape+0x190>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   2505c:	00004706 	br	2517c <lcd_handle_escape+0x2ac>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   25060:	e0bffc17 	ldw	r2,-16(fp)
   25064:	0080050e 	bge	zero,r2,2507c <lcd_handle_escape+0x1ac>
      sp->x = parm2 - 1;
   25068:	e0bffc17 	ldw	r2,-16(fp)
   2506c:	10bfffc4 	addi	r2,r2,-1
   25070:	1007883a 	mov	r3,r2
   25074:	e0bffe17 	ldw	r2,-8(fp)
   25078:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   2507c:	e0bffb17 	ldw	r2,-20(fp)
   25080:	0080390e 	bge	zero,r2,25168 <lcd_handle_escape+0x298>
    {
      sp->y = parm1 - 1;
   25084:	e0bffb17 	ldw	r2,-20(fp)
   25088:	10bfffc4 	addi	r2,r2,-1
   2508c:	1007883a 	mov	r3,r2
   25090:	e0bffe17 	ldw	r2,-8(fp)
   25094:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   25098:	e0bffe17 	ldw	r2,-8(fp)
   2509c:	10800883 	ldbu	r2,34(r2)
   250a0:	10803fcc 	andi	r2,r2,255
   250a4:	10800170 	cmpltui	r2,r2,5
   250a8:	1000061e 	bne	r2,zero,250c4 <lcd_handle_escape+0x1f4>
        sp->y = ALT_LCD_HEIGHT * 2;
   250ac:	e0bffe17 	ldw	r2,-8(fp)
   250b0:	00c00104 	movi	r3,4
   250b4:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
   250b8:	00000206 	br	250c4 <lcd_handle_escape+0x1f4>
        lcd_scroll_up(sp);
   250bc:	e13ffe17 	ldw	r4,-8(fp)
   250c0:	0024de80 	call	24de8 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   250c4:	e0bffe17 	ldw	r2,-8(fp)
   250c8:	10800883 	ldbu	r2,34(r2)
   250cc:	10803fcc 	andi	r2,r2,255
   250d0:	108000e8 	cmpgeui	r2,r2,3
   250d4:	103ff91e 	bne	r2,zero,250bc <__alt_data_end+0xfffeca1c>
        lcd_scroll_up(sp);
    }
    break;
   250d8:	00002306 	br	25168 <lcd_handle_escape+0x298>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   250dc:	e0bffb17 	ldw	r2,-20(fp)
   250e0:	10800098 	cmpnei	r2,r2,2
   250e4:	1000221e 	bne	r2,zero,25170 <lcd_handle_escape+0x2a0>
      lcd_clear_screen(sp);
   250e8:	e13ffe17 	ldw	r4,-8(fp)
   250ec:	0024ad80 	call	24ad8 <lcd_clear_screen>
    break;
   250f0:	00001f06 	br	25170 <lcd_handle_escape+0x2a0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   250f4:	e0bffb17 	ldw	r2,-20(fp)
   250f8:	00801f16 	blt	zero,r2,25178 <lcd_handle_escape+0x2a8>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   250fc:	e0bffe17 	ldw	r2,-8(fp)
   25100:	10800843 	ldbu	r2,33(r2)
   25104:	10803fcc 	andi	r2,r2,255
   25108:	10801428 	cmpgeui	r2,r2,80
   2510c:	10001a1e 	bne	r2,zero,25178 <lcd_handle_escape+0x2a8>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   25110:	e0bffe17 	ldw	r2,-8(fp)
   25114:	10800883 	ldbu	r2,34(r2)
   25118:	10803fcc 	andi	r2,r2,255
   2511c:	014018c4 	movi	r5,99
   25120:	1009883a 	mov	r4,r2
   25124:	00234240 	call	23424 <__mulsi3>
   25128:	10801004 	addi	r2,r2,64
   2512c:	e0fffe17 	ldw	r3,-8(fp)
   25130:	1887883a 	add	r3,r3,r2
   25134:	e0bffe17 	ldw	r2,-8(fp)
   25138:	10800843 	ldbu	r2,33(r2)
   2513c:	10803fcc 	andi	r2,r2,255
   25140:	1889883a 	add	r4,r3,r2
   25144:	e0bffe17 	ldw	r2,-8(fp)
   25148:	10800843 	ldbu	r2,33(r2)
   2514c:	10803fcc 	andi	r2,r2,255
   25150:	00c01404 	movi	r3,80
   25154:	1885c83a 	sub	r2,r3,r2
   25158:	100d883a 	mov	r6,r2
   2515c:	01400804 	movi	r5,32
   25160:	0021ef40 	call	21ef4 <memset>
    }
    break;
   25164:	00000406 	br	25178 <lcd_handle_escape+0x2a8>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
   25168:	0001883a 	nop
   2516c:	00000306 	br	2517c <lcd_handle_escape+0x2ac>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
   25170:	0001883a 	nop
   25174:	00000106 	br	2517c <lcd_handle_escape+0x2ac>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
   25178:	0001883a 	nop
  }
}
   2517c:	0001883a 	nop
   25180:	e037883a 	mov	sp,fp
   25184:	dfc00117 	ldw	ra,4(sp)
   25188:	df000017 	ldw	fp,0(sp)
   2518c:	dec00204 	addi	sp,sp,8
   25190:	f800283a 	ret

00025194 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   25194:	defff104 	addi	sp,sp,-60
   25198:	dfc00e15 	stw	ra,56(sp)
   2519c:	df000d15 	stw	fp,52(sp)
   251a0:	dc400c15 	stw	r17,48(sp)
   251a4:	dc000b15 	stw	r16,44(sp)
   251a8:	df000d04 	addi	fp,sp,52
   251ac:	e13ffa15 	stw	r4,-24(fp)
   251b0:	e17ffb15 	stw	r5,-20(fp)
   251b4:	e1bffc15 	stw	r6,-16(fp)
   251b8:	e1fffd15 	stw	r7,-12(fp)
  const char* end = ptr + len;
   251bc:	e0bffc17 	ldw	r2,-16(fp)
   251c0:	e0fffb17 	ldw	r3,-20(fp)
   251c4:	1885883a 	add	r2,r3,r2
   251c8:	e0bff615 	stw	r2,-40(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   251cc:	e0bffa17 	ldw	r2,-24(fp)
   251d0:	00c00044 	movi	r3,1
   251d4:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
   251d8:	00009b06 	br	25448 <altera_avalon_lcd_16207_write+0x2b4>
  {
    char c = *ptr;
   251dc:	e0bffb17 	ldw	r2,-20(fp)
   251e0:	10800003 	ldbu	r2,0(r2)
   251e4:	e0bff705 	stb	r2,-36(fp)

    if (sp->esccount >= 0)
   251e8:	e0bffa17 	ldw	r2,-24(fp)
   251ec:	10800903 	ldbu	r2,36(r2)
   251f0:	10803fcc 	andi	r2,r2,255
   251f4:	1080201c 	xori	r2,r2,128
   251f8:	10bfe004 	addi	r2,r2,-128
   251fc:	10003716 	blt	r2,zero,252dc <altera_avalon_lcd_16207_write+0x148>
    {
      unsigned int esccount = sp->esccount;
   25200:	e0bffa17 	ldw	r2,-24(fp)
   25204:	10800903 	ldbu	r2,36(r2)
   25208:	10803fcc 	andi	r2,r2,255
   2520c:	1080201c 	xori	r2,r2,128
   25210:	10bfe004 	addi	r2,r2,-128
   25214:	e0bff815 	stw	r2,-32(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   25218:	e0bff817 	ldw	r2,-32(fp)
   2521c:	1000031e 	bne	r2,zero,2522c <altera_avalon_lcd_16207_write+0x98>
   25220:	e0bff707 	ldb	r2,-36(fp)
   25224:	108016d8 	cmpnei	r2,r2,91
   25228:	10000d1e 	bne	r2,zero,25260 <altera_avalon_lcd_16207_write+0xcc>
   2522c:	e0bff817 	ldw	r2,-32(fp)
   25230:	10001826 	beq	r2,zero,25294 <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
   25234:	d0e00f17 	ldw	r3,-32708(gp)
   25238:	e0bff707 	ldb	r2,-36(fp)
   2523c:	10800044 	addi	r2,r2,1
   25240:	1885883a 	add	r2,r3,r2
   25244:	10800003 	ldbu	r2,0(r2)
   25248:	10803fcc 	andi	r2,r2,255
   2524c:	1080010c 	andi	r2,r2,4
   25250:	1000101e 	bne	r2,zero,25294 <altera_avalon_lcd_16207_write+0x100>
   25254:	e0bff707 	ldb	r2,-36(fp)
   25258:	10800ee0 	cmpeqi	r2,r2,59
   2525c:	10000d1e 	bne	r2,zero,25294 <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
   25260:	e0fffa17 	ldw	r3,-24(fp)
   25264:	e0bff817 	ldw	r2,-32(fp)
   25268:	1885883a 	add	r2,r3,r2
   2526c:	10800a04 	addi	r2,r2,40
   25270:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   25274:	e0bff707 	ldb	r2,-36(fp)
   25278:	100b883a 	mov	r5,r2
   2527c:	e13ffa17 	ldw	r4,-24(fp)
   25280:	0024ed00 	call	24ed0 <lcd_handle_escape>

        sp->esccount = -1;
   25284:	e0bffa17 	ldw	r2,-24(fp)
   25288:	00ffffc4 	movi	r3,-1
   2528c:	10c00905 	stb	r3,36(r2)
   25290:	00006a06 	br	2543c <altera_avalon_lcd_16207_write+0x2a8>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   25294:	e0bffa17 	ldw	r2,-24(fp)
   25298:	10800903 	ldbu	r2,36(r2)
   2529c:	10803fcc 	andi	r2,r2,255
   252a0:	108001e8 	cmpgeui	r2,r2,7
   252a4:	1000651e 	bne	r2,zero,2543c <altera_avalon_lcd_16207_write+0x2a8>
      {
        sp->escape[esccount] = c;
   252a8:	e0fffa17 	ldw	r3,-24(fp)
   252ac:	e0bff817 	ldw	r2,-32(fp)
   252b0:	1885883a 	add	r2,r3,r2
   252b4:	10800a04 	addi	r2,r2,40
   252b8:	e0fff703 	ldbu	r3,-36(fp)
   252bc:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
   252c0:	e0bffa17 	ldw	r2,-24(fp)
   252c4:	10800903 	ldbu	r2,36(r2)
   252c8:	10800044 	addi	r2,r2,1
   252cc:	1007883a 	mov	r3,r2
   252d0:	e0bffa17 	ldw	r2,-24(fp)
   252d4:	10c00905 	stb	r3,36(r2)
   252d8:	00005806 	br	2543c <altera_avalon_lcd_16207_write+0x2a8>
      }
    }
    else if (c == 27) /* ESC */
   252dc:	e0bff707 	ldb	r2,-36(fp)
   252e0:	108006d8 	cmpnei	r2,r2,27
   252e4:	1000031e 	bne	r2,zero,252f4 <altera_avalon_lcd_16207_write+0x160>
    {
      sp->esccount = 0;
   252e8:	e0bffa17 	ldw	r2,-24(fp)
   252ec:	10000905 	stb	zero,36(r2)
   252f0:	00005206 	br	2543c <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\r')
   252f4:	e0bff707 	ldb	r2,-36(fp)
   252f8:	10800358 	cmpnei	r2,r2,13
   252fc:	1000031e 	bne	r2,zero,2530c <altera_avalon_lcd_16207_write+0x178>
    {
      sp->x = 0;
   25300:	e0bffa17 	ldw	r2,-24(fp)
   25304:	10000845 	stb	zero,33(r2)
   25308:	00004c06 	br	2543c <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\n')
   2530c:	e0bff707 	ldb	r2,-36(fp)
   25310:	10800298 	cmpnei	r2,r2,10
   25314:	1000101e 	bne	r2,zero,25358 <altera_avalon_lcd_16207_write+0x1c4>
    {
      sp->x = 0;
   25318:	e0bffa17 	ldw	r2,-24(fp)
   2531c:	10000845 	stb	zero,33(r2)
      sp->y++;
   25320:	e0bffa17 	ldw	r2,-24(fp)
   25324:	10800883 	ldbu	r2,34(r2)
   25328:	10800044 	addi	r2,r2,1
   2532c:	1007883a 	mov	r3,r2
   25330:	e0bffa17 	ldw	r2,-24(fp)
   25334:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   25338:	e0bffa17 	ldw	r2,-24(fp)
   2533c:	10800883 	ldbu	r2,34(r2)
   25340:	10803fcc 	andi	r2,r2,255
   25344:	108000f0 	cmpltui	r2,r2,3
   25348:	10003c1e 	bne	r2,zero,2543c <altera_avalon_lcd_16207_write+0x2a8>
        lcd_scroll_up(sp);
   2534c:	e13ffa17 	ldw	r4,-24(fp)
   25350:	0024de80 	call	24de8 <lcd_scroll_up>
   25354:	00003906 	br	2543c <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\b')
   25358:	e0bff707 	ldb	r2,-36(fp)
   2535c:	10800218 	cmpnei	r2,r2,8
   25360:	10000b1e 	bne	r2,zero,25390 <altera_avalon_lcd_16207_write+0x1fc>
    {
      if (sp->x > 0)
   25364:	e0bffa17 	ldw	r2,-24(fp)
   25368:	10800843 	ldbu	r2,33(r2)
   2536c:	10803fcc 	andi	r2,r2,255
   25370:	10003226 	beq	r2,zero,2543c <altera_avalon_lcd_16207_write+0x2a8>
        sp->x--;
   25374:	e0bffa17 	ldw	r2,-24(fp)
   25378:	10800843 	ldbu	r2,33(r2)
   2537c:	10bfffc4 	addi	r2,r2,-1
   25380:	1007883a 	mov	r3,r2
   25384:	e0bffa17 	ldw	r2,-24(fp)
   25388:	10c00845 	stb	r3,33(r2)
   2538c:	00002b06 	br	2543c <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (isprint(c))
   25390:	d0e00f17 	ldw	r3,-32708(gp)
   25394:	e0bff707 	ldb	r2,-36(fp)
   25398:	10800044 	addi	r2,r2,1
   2539c:	1885883a 	add	r2,r3,r2
   253a0:	10800003 	ldbu	r2,0(r2)
   253a4:	10803fcc 	andi	r2,r2,255
   253a8:	1080201c 	xori	r2,r2,128
   253ac:	10bfe004 	addi	r2,r2,-128
   253b0:	108025cc 	andi	r2,r2,151
   253b4:	10002126 	beq	r2,zero,2543c <altera_avalon_lcd_16207_write+0x2a8>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   253b8:	e0bffa17 	ldw	r2,-24(fp)
   253bc:	10800883 	ldbu	r2,34(r2)
   253c0:	10803fcc 	andi	r2,r2,255
   253c4:	108000b0 	cmpltui	r2,r2,2
   253c8:	1000021e 	bne	r2,zero,253d4 <altera_avalon_lcd_16207_write+0x240>
        lcd_scroll_up(sp);
   253cc:	e13ffa17 	ldw	r4,-24(fp)
   253d0:	0024de80 	call	24de8 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   253d4:	e0bffa17 	ldw	r2,-24(fp)
   253d8:	10800843 	ldbu	r2,33(r2)
   253dc:	10803fcc 	andi	r2,r2,255
   253e0:	10801428 	cmpgeui	r2,r2,80
   253e4:	10000f1e 	bne	r2,zero,25424 <altera_avalon_lcd_16207_write+0x290>
        sp->line[sp->y].data[sp->x] = c;
   253e8:	e0bffa17 	ldw	r2,-24(fp)
   253ec:	10800883 	ldbu	r2,34(r2)
   253f0:	10c03fcc 	andi	r3,r2,255
   253f4:	e0bffa17 	ldw	r2,-24(fp)
   253f8:	10800843 	ldbu	r2,33(r2)
   253fc:	14003fcc 	andi	r16,r2,255
   25400:	e47ffa17 	ldw	r17,-24(fp)
   25404:	014018c4 	movi	r5,99
   25408:	1809883a 	mov	r4,r3
   2540c:	00234240 	call	23424 <__mulsi3>
   25410:	8885883a 	add	r2,r17,r2
   25414:	1405883a 	add	r2,r2,r16
   25418:	10801004 	addi	r2,r2,64
   2541c:	e0fff703 	ldbu	r3,-36(fp)
   25420:	10c00005 	stb	r3,0(r2)

      sp->x++;
   25424:	e0bffa17 	ldw	r2,-24(fp)
   25428:	10800843 	ldbu	r2,33(r2)
   2542c:	10800044 	addi	r2,r2,1
   25430:	1007883a 	mov	r3,r2
   25434:	e0bffa17 	ldw	r2,-24(fp)
   25438:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   2543c:	e0bffb17 	ldw	r2,-20(fp)
   25440:	10800044 	addi	r2,r2,1
   25444:	e0bffb15 	stw	r2,-20(fp)
   25448:	e0fffb17 	ldw	r3,-20(fp)
   2544c:	e0bff617 	ldw	r2,-40(fp)
   25450:	18bf6236 	bltu	r3,r2,251dc <__alt_data_end+0xfffecb3c>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   25454:	00800404 	movi	r2,16
   25458:	e0bff415 	stw	r2,-48(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2545c:	e03ff315 	stw	zero,-52(fp)
   25460:	00003d06 	br	25558 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   25464:	00801404 	movi	r2,80
   25468:	e0bff515 	stw	r2,-44(fp)
   2546c:	00001306 	br	254bc <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
   25470:	e0bff517 	ldw	r2,-44(fp)
   25474:	143fffc4 	addi	r16,r2,-1
   25478:	e47ffa17 	ldw	r17,-24(fp)
   2547c:	e0bff317 	ldw	r2,-52(fp)
   25480:	014018c4 	movi	r5,99
   25484:	1009883a 	mov	r4,r2
   25488:	00234240 	call	23424 <__mulsi3>
   2548c:	8885883a 	add	r2,r17,r2
   25490:	1405883a 	add	r2,r2,r16
   25494:	10801004 	addi	r2,r2,64
   25498:	10800003 	ldbu	r2,0(r2)
   2549c:	10803fcc 	andi	r2,r2,255
   254a0:	1080201c 	xori	r2,r2,128
   254a4:	10bfe004 	addi	r2,r2,-128
   254a8:	10800820 	cmpeqi	r2,r2,32
   254ac:	10000626 	beq	r2,zero,254c8 <altera_avalon_lcd_16207_write+0x334>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   254b0:	e0bff517 	ldw	r2,-44(fp)
   254b4:	10bfffc4 	addi	r2,r2,-1
   254b8:	e0bff515 	stw	r2,-44(fp)
   254bc:	e0bff517 	ldw	r2,-44(fp)
   254c0:	00bfeb16 	blt	zero,r2,25470 <__alt_data_end+0xfffecdd0>
   254c4:	00000106 	br	254cc <altera_avalon_lcd_16207_write+0x338>
      if (sp->line[y].data[width-1] != ' ')
        break;
   254c8:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   254cc:	e0bff517 	ldw	r2,-44(fp)
   254d0:	10800448 	cmpgei	r2,r2,17
   254d4:	1000031e 	bne	r2,zero,254e4 <altera_avalon_lcd_16207_write+0x350>
      width = ALT_LCD_WIDTH;
   254d8:	00800404 	movi	r2,16
   254dc:	e0bff515 	stw	r2,-44(fp)
   254e0:	00000306 	br	254f0 <altera_avalon_lcd_16207_write+0x35c>
    else
      width++;
   254e4:	e0bff517 	ldw	r2,-44(fp)
   254e8:	10800044 	addi	r2,r2,1
   254ec:	e0bff515 	stw	r2,-44(fp)

    sp->line[y].width = width;
   254f0:	e0bff517 	ldw	r2,-44(fp)
   254f4:	1023883a 	mov	r17,r2
   254f8:	e43ffa17 	ldw	r16,-24(fp)
   254fc:	e0bff317 	ldw	r2,-52(fp)
   25500:	014018c4 	movi	r5,99
   25504:	1009883a 	mov	r4,r2
   25508:	00234240 	call	23424 <__mulsi3>
   2550c:	8085883a 	add	r2,r16,r2
   25510:	10802444 	addi	r2,r2,145
   25514:	14400005 	stb	r17,0(r2)
    if (widthmax < width)
   25518:	e0fff417 	ldw	r3,-48(fp)
   2551c:	e0bff517 	ldw	r2,-44(fp)
   25520:	1880020e 	bge	r3,r2,2552c <altera_avalon_lcd_16207_write+0x398>
      widthmax = width;
   25524:	e0bff517 	ldw	r2,-44(fp)
   25528:	e0bff415 	stw	r2,-48(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   2552c:	e43ffa17 	ldw	r16,-24(fp)
   25530:	e0bff317 	ldw	r2,-52(fp)
   25534:	014018c4 	movi	r5,99
   25538:	1009883a 	mov	r4,r2
   2553c:	00234240 	call	23424 <__mulsi3>
   25540:	8085883a 	add	r2,r16,r2
   25544:	10802484 	addi	r2,r2,146
   25548:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2554c:	e0bff317 	ldw	r2,-52(fp)
   25550:	10800044 	addi	r2,r2,1
   25554:	e0bff315 	stw	r2,-52(fp)
   25558:	e0bff317 	ldw	r2,-52(fp)
   2555c:	10800090 	cmplti	r2,r2,2
   25560:	103fc01e 	bne	r2,zero,25464 <__alt_data_end+0xfffecdc4>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   25564:	e0bff417 	ldw	r2,-48(fp)
   25568:	10800448 	cmpgei	r2,r2,17
   2556c:	1000031e 	bne	r2,zero,2557c <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
   25570:	e0bffa17 	ldw	r2,-24(fp)
   25574:	10000985 	stb	zero,38(r2)
   25578:	00003406 	br	2564c <altera_avalon_lcd_16207_write+0x4b8>
  else
  {
    widthmax *= 2;
   2557c:	e0bff417 	ldw	r2,-48(fp)
   25580:	1085883a 	add	r2,r2,r2
   25584:	e0bff415 	stw	r2,-48(fp)
    sp->scrollmax = widthmax;
   25588:	e0bff417 	ldw	r2,-48(fp)
   2558c:	1007883a 	mov	r3,r2
   25590:	e0bffa17 	ldw	r2,-24(fp)
   25594:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   25598:	e03ff315 	stw	zero,-52(fp)
   2559c:	00002806 	br	25640 <altera_avalon_lcd_16207_write+0x4ac>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   255a0:	e43ffa17 	ldw	r16,-24(fp)
   255a4:	e0bff317 	ldw	r2,-52(fp)
   255a8:	014018c4 	movi	r5,99
   255ac:	1009883a 	mov	r4,r2
   255b0:	00234240 	call	23424 <__mulsi3>
   255b4:	8085883a 	add	r2,r16,r2
   255b8:	10802444 	addi	r2,r2,145
   255bc:	10800003 	ldbu	r2,0(r2)
   255c0:	10803fcc 	andi	r2,r2,255
   255c4:	1080201c 	xori	r2,r2,128
   255c8:	10bfe004 	addi	r2,r2,-128
   255cc:	10800450 	cmplti	r2,r2,17
   255d0:	1000181e 	bne	r2,zero,25634 <altera_avalon_lcd_16207_write+0x4a0>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   255d4:	e43ffa17 	ldw	r16,-24(fp)
   255d8:	e0bff317 	ldw	r2,-52(fp)
   255dc:	014018c4 	movi	r5,99
   255e0:	1009883a 	mov	r4,r2
   255e4:	00234240 	call	23424 <__mulsi3>
   255e8:	8085883a 	add	r2,r16,r2
   255ec:	10802444 	addi	r2,r2,145
   255f0:	10800003 	ldbu	r2,0(r2)
   255f4:	10803fcc 	andi	r2,r2,255
   255f8:	1080201c 	xori	r2,r2,128
   255fc:	10bfe004 	addi	r2,r2,-128
   25600:	1004923a 	slli	r2,r2,8
   25604:	e17ff417 	ldw	r5,-48(fp)
   25608:	1009883a 	mov	r4,r2
   2560c:	00206400 	call	20640 <__divsi3>
   25610:	1023883a 	mov	r17,r2
   25614:	e43ffa17 	ldw	r16,-24(fp)
   25618:	e0bff317 	ldw	r2,-52(fp)
   2561c:	014018c4 	movi	r5,99
   25620:	1009883a 	mov	r4,r2
   25624:	00234240 	call	23424 <__mulsi3>
   25628:	8085883a 	add	r2,r16,r2
   2562c:	10802484 	addi	r2,r2,146
   25630:	14400005 	stb	r17,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   25634:	e0bff317 	ldw	r2,-52(fp)
   25638:	10800044 	addi	r2,r2,1
   2563c:	e0bff315 	stw	r2,-52(fp)
   25640:	e0bff317 	ldw	r2,-52(fp)
   25644:	10800090 	cmplti	r2,r2,2
   25648:	103fd51e 	bne	r2,zero,255a0 <__alt_data_end+0xfffecf00>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   2564c:	e0bffa17 	ldw	r2,-24(fp)
   25650:	10800943 	ldbu	r2,37(r2)
   25654:	10803fcc 	andi	r2,r2,255
   25658:	e0bff915 	stw	r2,-28(fp)

    lcd_repaint_screen(sp);
   2565c:	e13ffa17 	ldw	r4,-24(fp)
   25660:	0024bc00 	call	24bc0 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   25664:	e0bffa17 	ldw	r2,-24(fp)
   25668:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   2566c:	e0bffa17 	ldw	r2,-24(fp)
   25670:	10800943 	ldbu	r2,37(r2)
   25674:	10c03fcc 	andi	r3,r2,255
   25678:	e0bff917 	ldw	r2,-28(fp)
   2567c:	18800426 	beq	r3,r2,25690 <altera_avalon_lcd_16207_write+0x4fc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   25680:	e0bffa17 	ldw	r2,-24(fp)
   25684:	00c00044 	movi	r3,1
   25688:	10c009c5 	stb	r3,39(r2)
  }
   2568c:	003fef06 	br	2564c <__alt_data_end+0xfffecfac>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
   25690:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   25694:	e0bffc17 	ldw	r2,-16(fp)
}
   25698:	e6fffe04 	addi	sp,fp,-8
   2569c:	dfc00317 	ldw	ra,12(sp)
   256a0:	df000217 	ldw	fp,8(sp)
   256a4:	dc400117 	ldw	r17,4(sp)
   256a8:	dc000017 	ldw	r16,0(sp)
   256ac:	dec00404 	addi	sp,sp,16
   256b0:	f800283a 	ret

000256b4 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   256b4:	defffc04 	addi	sp,sp,-16
   256b8:	dfc00315 	stw	ra,12(sp)
   256bc:	df000215 	stw	fp,8(sp)
   256c0:	df000204 	addi	fp,sp,8
   256c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   256c8:	e0bfff17 	ldw	r2,-4(fp)
   256cc:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   256d0:	e0bffe17 	ldw	r2,-8(fp)
   256d4:	10800943 	ldbu	r2,37(r2)
   256d8:	10803fcc 	andi	r2,r2,255
   256dc:	10c00044 	addi	r3,r2,1
   256e0:	e0bffe17 	ldw	r2,-8(fp)
   256e4:	10800983 	ldbu	r2,38(r2)
   256e8:	10803fcc 	andi	r2,r2,255
   256ec:	18800316 	blt	r3,r2,256fc <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
   256f0:	e0bffe17 	ldw	r2,-8(fp)
   256f4:	10000945 	stb	zero,37(r2)
   256f8:	00000606 	br	25714 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
   256fc:	e0bffe17 	ldw	r2,-8(fp)
   25700:	10800943 	ldbu	r2,37(r2)
   25704:	10800044 	addi	r2,r2,1
   25708:	1007883a 	mov	r3,r2
   2570c:	e0bffe17 	ldw	r2,-8(fp)
   25710:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   25714:	e0bffe17 	ldw	r2,-8(fp)
   25718:	10800983 	ldbu	r2,38(r2)
   2571c:	10803fcc 	andi	r2,r2,255
   25720:	10000826 	beq	r2,zero,25744 <alt_lcd_16207_timeout+0x90>
   25724:	e0bffe17 	ldw	r2,-8(fp)
   25728:	108009c3 	ldbu	r2,39(r2)
   2572c:	10803fcc 	andi	r2,r2,255
   25730:	1080201c 	xori	r2,r2,128
   25734:	10bfe004 	addi	r2,r2,-128
   25738:	1000021e 	bne	r2,zero,25744 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
   2573c:	e13ffe17 	ldw	r4,-8(fp)
   25740:	0024bc00 	call	24bc0 <lcd_repaint_screen>

  return sp->period;
   25744:	e0bffe17 	ldw	r2,-8(fp)
   25748:	10800717 	ldw	r2,28(r2)
}
   2574c:	e037883a 	mov	sp,fp
   25750:	dfc00117 	ldw	ra,4(sp)
   25754:	df000017 	ldw	fp,0(sp)
   25758:	dec00204 	addi	sp,sp,8
   2575c:	f800283a 	ret

00025760 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   25760:	defffc04 	addi	sp,sp,-16
   25764:	dfc00315 	stw	ra,12(sp)
   25768:	df000215 	stw	fp,8(sp)
   2576c:	df000204 	addi	fp,sp,8
   25770:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   25774:	e0bfff17 	ldw	r2,-4(fp)
   25778:	10800017 	ldw	r2,0(r2)
   2577c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   25780:	e0bfff17 	ldw	r2,-4(fp)
   25784:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   25788:	010ea604 	movi	r4,15000
   2578c:	0023ca40 	call	23ca4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   25790:	e0bffe17 	ldw	r2,-8(fp)
   25794:	00c00c04 	movi	r3,48
   25798:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   2579c:	01040104 	movi	r4,4100
   257a0:	0023ca40 	call	23ca4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   257a4:	e0bffe17 	ldw	r2,-8(fp)
   257a8:	00c00c04 	movi	r3,48
   257ac:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   257b0:	0100fa04 	movi	r4,1000
   257b4:	0023ca40 	call	23ca4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   257b8:	e0bffe17 	ldw	r2,-8(fp)
   257bc:	00c00c04 	movi	r3,48
   257c0:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   257c4:	01400e04 	movi	r5,56
   257c8:	e13fff17 	ldw	r4,-4(fp)
   257cc:	00249480 	call	24948 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   257d0:	01400204 	movi	r5,8
   257d4:	e13fff17 	ldw	r4,-4(fp)
   257d8:	00249480 	call	24948 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   257dc:	e13fff17 	ldw	r4,-4(fp)
   257e0:	0024ad80 	call	24ad8 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   257e4:	01400184 	movi	r5,6
   257e8:	e13fff17 	ldw	r4,-4(fp)
   257ec:	00249480 	call	24948 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   257f0:	01400304 	movi	r5,12
   257f4:	e13fff17 	ldw	r4,-4(fp)
   257f8:	00249480 	call	24948 <lcd_write_command>

  sp->esccount = -1;
   257fc:	e0bfff17 	ldw	r2,-4(fp)
   25800:	00ffffc4 	movi	r3,-1
   25804:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
   25808:	e0bfff17 	ldw	r2,-4(fp)
   2580c:	10800a04 	addi	r2,r2,40
   25810:	01800204 	movi	r6,8
   25814:	000b883a 	mov	r5,zero
   25818:	1009883a 	mov	r4,r2
   2581c:	0021ef40 	call	21ef4 <memset>

  sp->scrollpos = 0;
   25820:	e0bfff17 	ldw	r2,-4(fp)
   25824:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   25828:	e0bfff17 	ldw	r2,-4(fp)
   2582c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   25830:	e0bfff17 	ldw	r2,-4(fp)
   25834:	100009c5 	stb	zero,39(r2)
   25838:	d0a6fd17 	ldw	r2,-25612(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   2583c:	01400284 	movi	r5,10
   25840:	1009883a 	mov	r4,r2
   25844:	00207380 	call	20738 <__udivsi3>
   25848:	1007883a 	mov	r3,r2
   2584c:	e0bfff17 	ldw	r2,-4(fp)
   25850:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   25854:	e0bfff17 	ldw	r2,-4(fp)
   25858:	10c00104 	addi	r3,r2,4
   2585c:	e0bfff17 	ldw	r2,-4(fp)
   25860:	10800717 	ldw	r2,28(r2)
   25864:	e1ffff17 	ldw	r7,-4(fp)
   25868:	018000b4 	movhi	r6,2
   2586c:	3195ad04 	addi	r6,r6,22196
   25870:	100b883a 	mov	r5,r2
   25874:	1809883a 	mov	r4,r3
   25878:	00258f40 	call	258f4 <alt_alarm_start>
}
   2587c:	0001883a 	nop
   25880:	e037883a 	mov	sp,fp
   25884:	dfc00117 	ldw	ra,4(sp)
   25888:	df000017 	ldw	fp,0(sp)
   2588c:	dec00204 	addi	sp,sp,8
   25890:	f800283a 	ret

00025894 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   25894:	defffa04 	addi	sp,sp,-24
   25898:	dfc00515 	stw	ra,20(sp)
   2589c:	df000415 	stw	fp,16(sp)
   258a0:	df000404 	addi	fp,sp,16
   258a4:	e13ffd15 	stw	r4,-12(fp)
   258a8:	e17ffe15 	stw	r5,-8(fp)
   258ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   258b0:	e0bffd17 	ldw	r2,-12(fp)
   258b4:	10800017 	ldw	r2,0(r2)
   258b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   258bc:	e0bffc17 	ldw	r2,-16(fp)
   258c0:	10c00a04 	addi	r3,r2,40
   258c4:	e0bffd17 	ldw	r2,-12(fp)
   258c8:	10800217 	ldw	r2,8(r2)
   258cc:	100f883a 	mov	r7,r2
   258d0:	e1bfff17 	ldw	r6,-4(fp)
   258d4:	e17ffe17 	ldw	r5,-8(fp)
   258d8:	1809883a 	mov	r4,r3
   258dc:	00251940 	call	25194 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   258e0:	e037883a 	mov	sp,fp
   258e4:	dfc00117 	ldw	ra,4(sp)
   258e8:	df000017 	ldw	fp,0(sp)
   258ec:	dec00204 	addi	sp,sp,8
   258f0:	f800283a 	ret

000258f4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   258f4:	defff504 	addi	sp,sp,-44
   258f8:	df000a15 	stw	fp,40(sp)
   258fc:	df000a04 	addi	fp,sp,40
   25900:	e13ffc15 	stw	r4,-16(fp)
   25904:	e17ffd15 	stw	r5,-12(fp)
   25908:	e1bffe15 	stw	r6,-8(fp)
   2590c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   25910:	e03ff615 	stw	zero,-40(fp)
   25914:	d0a6fd17 	ldw	r2,-25612(gp)
  
  if (alt_ticks_per_second ())
   25918:	10003c26 	beq	r2,zero,25a0c <alt_alarm_start+0x118>
  {
    if (alarm)
   2591c:	e0bffc17 	ldw	r2,-16(fp)
   25920:	10003826 	beq	r2,zero,25a04 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   25924:	e0bffc17 	ldw	r2,-16(fp)
   25928:	e0fffe17 	ldw	r3,-8(fp)
   2592c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   25930:	e0bffc17 	ldw	r2,-16(fp)
   25934:	e0ffff17 	ldw	r3,-4(fp)
   25938:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2593c:	0005303a 	rdctl	r2,status
   25940:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25944:	e0fff917 	ldw	r3,-28(fp)
   25948:	00bfff84 	movi	r2,-2
   2594c:	1884703a 	and	r2,r3,r2
   25950:	1001703a 	wrctl	status,r2
  
  return context;
   25954:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   25958:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2595c:	d0a6fe17 	ldw	r2,-25608(gp)
      
      current_nticks = alt_nticks();
   25960:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   25964:	e0fffd17 	ldw	r3,-12(fp)
   25968:	e0bff617 	ldw	r2,-40(fp)
   2596c:	1885883a 	add	r2,r3,r2
   25970:	10c00044 	addi	r3,r2,1
   25974:	e0bffc17 	ldw	r2,-16(fp)
   25978:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2597c:	e0bffc17 	ldw	r2,-16(fp)
   25980:	10c00217 	ldw	r3,8(r2)
   25984:	e0bff617 	ldw	r2,-40(fp)
   25988:	1880042e 	bgeu	r3,r2,2599c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   2598c:	e0bffc17 	ldw	r2,-16(fp)
   25990:	00c00044 	movi	r3,1
   25994:	10c00405 	stb	r3,16(r2)
   25998:	00000206 	br	259a4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   2599c:	e0bffc17 	ldw	r2,-16(fp)
   259a0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   259a4:	e0bffc17 	ldw	r2,-16(fp)
   259a8:	d0e00d04 	addi	r3,gp,-32716
   259ac:	e0fffa15 	stw	r3,-24(fp)
   259b0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   259b4:	e0bffb17 	ldw	r2,-20(fp)
   259b8:	e0fffa17 	ldw	r3,-24(fp)
   259bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   259c0:	e0bffa17 	ldw	r2,-24(fp)
   259c4:	10c00017 	ldw	r3,0(r2)
   259c8:	e0bffb17 	ldw	r2,-20(fp)
   259cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   259d0:	e0bffa17 	ldw	r2,-24(fp)
   259d4:	10800017 	ldw	r2,0(r2)
   259d8:	e0fffb17 	ldw	r3,-20(fp)
   259dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   259e0:	e0bffa17 	ldw	r2,-24(fp)
   259e4:	e0fffb17 	ldw	r3,-20(fp)
   259e8:	10c00015 	stw	r3,0(r2)
   259ec:	e0bff817 	ldw	r2,-32(fp)
   259f0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   259f4:	e0bff717 	ldw	r2,-36(fp)
   259f8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   259fc:	0005883a 	mov	r2,zero
   25a00:	00000306 	br	25a10 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   25a04:	00bffa84 	movi	r2,-22
   25a08:	00000106 	br	25a10 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   25a0c:	00bfde84 	movi	r2,-134
  }
}
   25a10:	e037883a 	mov	sp,fp
   25a14:	df000017 	ldw	fp,0(sp)
   25a18:	dec00104 	addi	sp,sp,4
   25a1c:	f800283a 	ret

00025a20 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   25a20:	defffa04 	addi	sp,sp,-24
   25a24:	dfc00515 	stw	ra,20(sp)
   25a28:	df000415 	stw	fp,16(sp)
   25a2c:	df000404 	addi	fp,sp,16
   25a30:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   25a34:	00800244 	movi	r2,9
   25a38:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   25a3c:	014003f4 	movhi	r5,15
   25a40:	29509004 	addi	r5,r5,16960
   25a44:	e13ffd17 	ldw	r4,-12(fp)
   25a48:	00234240 	call	23424 <__mulsi3>
   25a4c:	100b883a 	mov	r5,r2
   25a50:	0100bef4 	movhi	r4,763
   25a54:	213c2004 	addi	r4,r4,-3968
   25a58:	00207380 	call	20738 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   25a5c:	100b883a 	mov	r5,r2
   25a60:	01200034 	movhi	r4,32768
   25a64:	213fffc4 	addi	r4,r4,-1
   25a68:	00207380 	call	20738 <__udivsi3>
   25a6c:	100b883a 	mov	r5,r2
   25a70:	e13fff17 	ldw	r4,-4(fp)
   25a74:	00207380 	call	20738 <__udivsi3>
   25a78:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   25a7c:	e0bffe17 	ldw	r2,-8(fp)
   25a80:	10002a26 	beq	r2,zero,25b2c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   25a84:	e03ffc15 	stw	zero,-16(fp)
   25a88:	00001706 	br	25ae8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   25a8c:	00a00034 	movhi	r2,32768
   25a90:	10bfffc4 	addi	r2,r2,-1
   25a94:	10bfffc4 	addi	r2,r2,-1
   25a98:	103ffe1e 	bne	r2,zero,25a94 <__alt_data_end+0xfffed3f4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   25a9c:	014003f4 	movhi	r5,15
   25aa0:	29509004 	addi	r5,r5,16960
   25aa4:	e13ffd17 	ldw	r4,-12(fp)
   25aa8:	00234240 	call	23424 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   25aac:	100b883a 	mov	r5,r2
   25ab0:	0100bef4 	movhi	r4,763
   25ab4:	213c2004 	addi	r4,r4,-3968
   25ab8:	00207380 	call	20738 <__udivsi3>
   25abc:	100b883a 	mov	r5,r2
   25ac0:	01200034 	movhi	r4,32768
   25ac4:	213fffc4 	addi	r4,r4,-1
   25ac8:	00207380 	call	20738 <__udivsi3>
   25acc:	1007883a 	mov	r3,r2
   25ad0:	e0bfff17 	ldw	r2,-4(fp)
   25ad4:	10c5c83a 	sub	r2,r2,r3
   25ad8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   25adc:	e0bffc17 	ldw	r2,-16(fp)
   25ae0:	10800044 	addi	r2,r2,1
   25ae4:	e0bffc15 	stw	r2,-16(fp)
   25ae8:	e0fffc17 	ldw	r3,-16(fp)
   25aec:	e0bffe17 	ldw	r2,-8(fp)
   25af0:	18bfe616 	blt	r3,r2,25a8c <__alt_data_end+0xfffed3ec>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   25af4:	014003f4 	movhi	r5,15
   25af8:	29509004 	addi	r5,r5,16960
   25afc:	e13ffd17 	ldw	r4,-12(fp)
   25b00:	00234240 	call	23424 <__mulsi3>
   25b04:	100b883a 	mov	r5,r2
   25b08:	0100bef4 	movhi	r4,763
   25b0c:	213c2004 	addi	r4,r4,-3968
   25b10:	00207380 	call	20738 <__udivsi3>
   25b14:	e17fff17 	ldw	r5,-4(fp)
   25b18:	1009883a 	mov	r4,r2
   25b1c:	00234240 	call	23424 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   25b20:	10bfffc4 	addi	r2,r2,-1
   25b24:	103ffe1e 	bne	r2,zero,25b20 <__alt_data_end+0xfffed480>
   25b28:	00000d06 	br	25b60 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   25b2c:	014003f4 	movhi	r5,15
   25b30:	29509004 	addi	r5,r5,16960
   25b34:	e13ffd17 	ldw	r4,-12(fp)
   25b38:	00234240 	call	23424 <__mulsi3>
   25b3c:	100b883a 	mov	r5,r2
   25b40:	0100bef4 	movhi	r4,763
   25b44:	213c2004 	addi	r4,r4,-3968
   25b48:	00207380 	call	20738 <__udivsi3>
   25b4c:	e17fff17 	ldw	r5,-4(fp)
   25b50:	1009883a 	mov	r4,r2
   25b54:	00234240 	call	23424 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   25b58:	10bfffc4 	addi	r2,r2,-1
   25b5c:	00bffe16 	blt	zero,r2,25b58 <__alt_data_end+0xfffed4b8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   25b60:	0005883a 	mov	r2,zero
}
   25b64:	e037883a 	mov	sp,fp
   25b68:	dfc00117 	ldw	ra,4(sp)
   25b6c:	df000017 	ldw	fp,0(sp)
   25b70:	dec00204 	addi	sp,sp,8
   25b74:	f800283a 	ret

00025b78 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   25b78:	deffff04 	addi	sp,sp,-4
   25b7c:	df000015 	stw	fp,0(sp)
   25b80:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   25b84:	0001883a 	nop
   25b88:	e037883a 	mov	sp,fp
   25b8c:	df000017 	ldw	fp,0(sp)
   25b90:	dec00104 	addi	sp,sp,4
   25b94:	f800283a 	ret

00025b98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25b98:	defffe04 	addi	sp,sp,-8
   25b9c:	dfc00115 	stw	ra,4(sp)
   25ba0:	df000015 	stw	fp,0(sp)
   25ba4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25ba8:	d0a00917 	ldw	r2,-32732(gp)
   25bac:	10000326 	beq	r2,zero,25bbc <alt_get_errno+0x24>
   25bb0:	d0a00917 	ldw	r2,-32732(gp)
   25bb4:	103ee83a 	callr	r2
   25bb8:	00000106 	br	25bc0 <alt_get_errno+0x28>
   25bbc:	d0a6f804 	addi	r2,gp,-25632
}
   25bc0:	e037883a 	mov	sp,fp
   25bc4:	dfc00117 	ldw	ra,4(sp)
   25bc8:	df000017 	ldw	fp,0(sp)
   25bcc:	dec00204 	addi	sp,sp,8
   25bd0:	f800283a 	ret

00025bd4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   25bd4:	defffa04 	addi	sp,sp,-24
   25bd8:	dfc00515 	stw	ra,20(sp)
   25bdc:	df000415 	stw	fp,16(sp)
   25be0:	df000404 	addi	fp,sp,16
   25be4:	e13ffe15 	stw	r4,-8(fp)
   25be8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   25bec:	e0bffe17 	ldw	r2,-8(fp)
   25bf0:	10000326 	beq	r2,zero,25c00 <alt_dev_llist_insert+0x2c>
   25bf4:	e0bffe17 	ldw	r2,-8(fp)
   25bf8:	10800217 	ldw	r2,8(r2)
   25bfc:	1000061e 	bne	r2,zero,25c18 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   25c00:	0025b980 	call	25b98 <alt_get_errno>
   25c04:	1007883a 	mov	r3,r2
   25c08:	00800584 	movi	r2,22
   25c0c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   25c10:	00bffa84 	movi	r2,-22
   25c14:	00001306 	br	25c64 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   25c18:	e0bffe17 	ldw	r2,-8(fp)
   25c1c:	e0ffff17 	ldw	r3,-4(fp)
   25c20:	e0fffc15 	stw	r3,-16(fp)
   25c24:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   25c28:	e0bffd17 	ldw	r2,-12(fp)
   25c2c:	e0fffc17 	ldw	r3,-16(fp)
   25c30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   25c34:	e0bffc17 	ldw	r2,-16(fp)
   25c38:	10c00017 	ldw	r3,0(r2)
   25c3c:	e0bffd17 	ldw	r2,-12(fp)
   25c40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   25c44:	e0bffc17 	ldw	r2,-16(fp)
   25c48:	10800017 	ldw	r2,0(r2)
   25c4c:	e0fffd17 	ldw	r3,-12(fp)
   25c50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   25c54:	e0bffc17 	ldw	r2,-16(fp)
   25c58:	e0fffd17 	ldw	r3,-12(fp)
   25c5c:	10c00015 	stw	r3,0(r2)

  return 0;  
   25c60:	0005883a 	mov	r2,zero
}
   25c64:	e037883a 	mov	sp,fp
   25c68:	dfc00117 	ldw	ra,4(sp)
   25c6c:	df000017 	ldw	fp,0(sp)
   25c70:	dec00204 	addi	sp,sp,8
   25c74:	f800283a 	ret

00025c78 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   25c78:	defffd04 	addi	sp,sp,-12
   25c7c:	dfc00215 	stw	ra,8(sp)
   25c80:	df000115 	stw	fp,4(sp)
   25c84:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   25c88:	008000b4 	movhi	r2,2
   25c8c:	109b0b04 	addi	r2,r2,27692
   25c90:	e0bfff15 	stw	r2,-4(fp)
   25c94:	00000606 	br	25cb0 <_do_ctors+0x38>
        (*ctor) (); 
   25c98:	e0bfff17 	ldw	r2,-4(fp)
   25c9c:	10800017 	ldw	r2,0(r2)
   25ca0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   25ca4:	e0bfff17 	ldw	r2,-4(fp)
   25ca8:	10bfff04 	addi	r2,r2,-4
   25cac:	e0bfff15 	stw	r2,-4(fp)
   25cb0:	e0ffff17 	ldw	r3,-4(fp)
   25cb4:	008000b4 	movhi	r2,2
   25cb8:	109b0c04 	addi	r2,r2,27696
   25cbc:	18bff62e 	bgeu	r3,r2,25c98 <__alt_data_end+0xfffed5f8>
        (*ctor) (); 
}
   25cc0:	0001883a 	nop
   25cc4:	e037883a 	mov	sp,fp
   25cc8:	dfc00117 	ldw	ra,4(sp)
   25ccc:	df000017 	ldw	fp,0(sp)
   25cd0:	dec00204 	addi	sp,sp,8
   25cd4:	f800283a 	ret

00025cd8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   25cd8:	defffd04 	addi	sp,sp,-12
   25cdc:	dfc00215 	stw	ra,8(sp)
   25ce0:	df000115 	stw	fp,4(sp)
   25ce4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   25ce8:	008000b4 	movhi	r2,2
   25cec:	109b0b04 	addi	r2,r2,27692
   25cf0:	e0bfff15 	stw	r2,-4(fp)
   25cf4:	00000606 	br	25d10 <_do_dtors+0x38>
        (*dtor) (); 
   25cf8:	e0bfff17 	ldw	r2,-4(fp)
   25cfc:	10800017 	ldw	r2,0(r2)
   25d00:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   25d04:	e0bfff17 	ldw	r2,-4(fp)
   25d08:	10bfff04 	addi	r2,r2,-4
   25d0c:	e0bfff15 	stw	r2,-4(fp)
   25d10:	e0ffff17 	ldw	r3,-4(fp)
   25d14:	008000b4 	movhi	r2,2
   25d18:	109b0c04 	addi	r2,r2,27696
   25d1c:	18bff62e 	bgeu	r3,r2,25cf8 <__alt_data_end+0xfffed658>
        (*dtor) (); 
}
   25d20:	0001883a 	nop
   25d24:	e037883a 	mov	sp,fp
   25d28:	dfc00117 	ldw	ra,4(sp)
   25d2c:	df000017 	ldw	fp,0(sp)
   25d30:	dec00204 	addi	sp,sp,8
   25d34:	f800283a 	ret

00025d38 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   25d38:	deffff04 	addi	sp,sp,-4
   25d3c:	df000015 	stw	fp,0(sp)
   25d40:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   25d44:	0001883a 	nop
   25d48:	e037883a 	mov	sp,fp
   25d4c:	df000017 	ldw	fp,0(sp)
   25d50:	dec00104 	addi	sp,sp,4
   25d54:	f800283a 	ret

00025d58 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   25d58:	defff904 	addi	sp,sp,-28
   25d5c:	dfc00615 	stw	ra,24(sp)
   25d60:	df000515 	stw	fp,20(sp)
   25d64:	df000504 	addi	fp,sp,20
   25d68:	e13ffc15 	stw	r4,-16(fp)
   25d6c:	e17ffd15 	stw	r5,-12(fp)
   25d70:	e1bffe15 	stw	r6,-8(fp)
   25d74:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   25d78:	e0800217 	ldw	r2,8(fp)
   25d7c:	d8800015 	stw	r2,0(sp)
   25d80:	e1ffff17 	ldw	r7,-4(fp)
   25d84:	e1bffe17 	ldw	r6,-8(fp)
   25d88:	e17ffd17 	ldw	r5,-12(fp)
   25d8c:	e13ffc17 	ldw	r4,-16(fp)
   25d90:	0025f080 	call	25f08 <alt_iic_isr_register>
}  
   25d94:	e037883a 	mov	sp,fp
   25d98:	dfc00117 	ldw	ra,4(sp)
   25d9c:	df000017 	ldw	fp,0(sp)
   25da0:	dec00204 	addi	sp,sp,8
   25da4:	f800283a 	ret

00025da8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   25da8:	defff904 	addi	sp,sp,-28
   25dac:	df000615 	stw	fp,24(sp)
   25db0:	df000604 	addi	fp,sp,24
   25db4:	e13ffe15 	stw	r4,-8(fp)
   25db8:	e17fff15 	stw	r5,-4(fp)
   25dbc:	e0bfff17 	ldw	r2,-4(fp)
   25dc0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25dc4:	0005303a 	rdctl	r2,status
   25dc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25dcc:	e0fffb17 	ldw	r3,-20(fp)
   25dd0:	00bfff84 	movi	r2,-2
   25dd4:	1884703a 	and	r2,r3,r2
   25dd8:	1001703a 	wrctl	status,r2
  
  return context;
   25ddc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   25de0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   25de4:	00c00044 	movi	r3,1
   25de8:	e0bffa17 	ldw	r2,-24(fp)
   25dec:	1884983a 	sll	r2,r3,r2
   25df0:	1007883a 	mov	r3,r2
   25df4:	d0a6fc17 	ldw	r2,-25616(gp)
   25df8:	1884b03a 	or	r2,r3,r2
   25dfc:	d0a6fc15 	stw	r2,-25616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25e00:	d0a6fc17 	ldw	r2,-25616(gp)
   25e04:	100170fa 	wrctl	ienable,r2
   25e08:	e0bffc17 	ldw	r2,-16(fp)
   25e0c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25e10:	e0bffd17 	ldw	r2,-12(fp)
   25e14:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   25e18:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   25e1c:	0001883a 	nop
}
   25e20:	e037883a 	mov	sp,fp
   25e24:	df000017 	ldw	fp,0(sp)
   25e28:	dec00104 	addi	sp,sp,4
   25e2c:	f800283a 	ret

00025e30 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   25e30:	defff904 	addi	sp,sp,-28
   25e34:	df000615 	stw	fp,24(sp)
   25e38:	df000604 	addi	fp,sp,24
   25e3c:	e13ffe15 	stw	r4,-8(fp)
   25e40:	e17fff15 	stw	r5,-4(fp)
   25e44:	e0bfff17 	ldw	r2,-4(fp)
   25e48:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25e4c:	0005303a 	rdctl	r2,status
   25e50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25e54:	e0fffb17 	ldw	r3,-20(fp)
   25e58:	00bfff84 	movi	r2,-2
   25e5c:	1884703a 	and	r2,r3,r2
   25e60:	1001703a 	wrctl	status,r2
  
  return context;
   25e64:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   25e68:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   25e6c:	00c00044 	movi	r3,1
   25e70:	e0bffa17 	ldw	r2,-24(fp)
   25e74:	1884983a 	sll	r2,r3,r2
   25e78:	0084303a 	nor	r2,zero,r2
   25e7c:	1007883a 	mov	r3,r2
   25e80:	d0a6fc17 	ldw	r2,-25616(gp)
   25e84:	1884703a 	and	r2,r3,r2
   25e88:	d0a6fc15 	stw	r2,-25616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25e8c:	d0a6fc17 	ldw	r2,-25616(gp)
   25e90:	100170fa 	wrctl	ienable,r2
   25e94:	e0bffc17 	ldw	r2,-16(fp)
   25e98:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25e9c:	e0bffd17 	ldw	r2,-12(fp)
   25ea0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   25ea4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   25ea8:	0001883a 	nop
}
   25eac:	e037883a 	mov	sp,fp
   25eb0:	df000017 	ldw	fp,0(sp)
   25eb4:	dec00104 	addi	sp,sp,4
   25eb8:	f800283a 	ret

00025ebc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   25ebc:	defffc04 	addi	sp,sp,-16
   25ec0:	df000315 	stw	fp,12(sp)
   25ec4:	df000304 	addi	fp,sp,12
   25ec8:	e13ffe15 	stw	r4,-8(fp)
   25ecc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   25ed0:	000530fa 	rdctl	r2,ienable
   25ed4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   25ed8:	00c00044 	movi	r3,1
   25edc:	e0bfff17 	ldw	r2,-4(fp)
   25ee0:	1884983a 	sll	r2,r3,r2
   25ee4:	1007883a 	mov	r3,r2
   25ee8:	e0bffd17 	ldw	r2,-12(fp)
   25eec:	1884703a 	and	r2,r3,r2
   25ef0:	1004c03a 	cmpne	r2,r2,zero
   25ef4:	10803fcc 	andi	r2,r2,255
}
   25ef8:	e037883a 	mov	sp,fp
   25efc:	df000017 	ldw	fp,0(sp)
   25f00:	dec00104 	addi	sp,sp,4
   25f04:	f800283a 	ret

00025f08 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   25f08:	defff504 	addi	sp,sp,-44
   25f0c:	dfc00a15 	stw	ra,40(sp)
   25f10:	df000915 	stw	fp,36(sp)
   25f14:	df000904 	addi	fp,sp,36
   25f18:	e13ffc15 	stw	r4,-16(fp)
   25f1c:	e17ffd15 	stw	r5,-12(fp)
   25f20:	e1bffe15 	stw	r6,-8(fp)
   25f24:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   25f28:	00bffa84 	movi	r2,-22
   25f2c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   25f30:	e0bffd17 	ldw	r2,-12(fp)
   25f34:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   25f38:	e0bff817 	ldw	r2,-32(fp)
   25f3c:	10800808 	cmpgei	r2,r2,32
   25f40:	1000271e 	bne	r2,zero,25fe0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25f44:	0005303a 	rdctl	r2,status
   25f48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25f4c:	e0fffb17 	ldw	r3,-20(fp)
   25f50:	00bfff84 	movi	r2,-2
   25f54:	1884703a 	and	r2,r3,r2
   25f58:	1001703a 	wrctl	status,r2
  
  return context;
   25f5c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   25f60:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   25f64:	008000f4 	movhi	r2,3
   25f68:	10a99f04 	addi	r2,r2,-22916
   25f6c:	e0fff817 	ldw	r3,-32(fp)
   25f70:	180690fa 	slli	r3,r3,3
   25f74:	10c5883a 	add	r2,r2,r3
   25f78:	e0fffe17 	ldw	r3,-8(fp)
   25f7c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   25f80:	008000f4 	movhi	r2,3
   25f84:	10a99f04 	addi	r2,r2,-22916
   25f88:	e0fff817 	ldw	r3,-32(fp)
   25f8c:	180690fa 	slli	r3,r3,3
   25f90:	10c5883a 	add	r2,r2,r3
   25f94:	10800104 	addi	r2,r2,4
   25f98:	e0ffff17 	ldw	r3,-4(fp)
   25f9c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   25fa0:	e0bffe17 	ldw	r2,-8(fp)
   25fa4:	10000526 	beq	r2,zero,25fbc <alt_iic_isr_register+0xb4>
   25fa8:	e0bff817 	ldw	r2,-32(fp)
   25fac:	100b883a 	mov	r5,r2
   25fb0:	e13ffc17 	ldw	r4,-16(fp)
   25fb4:	0025da80 	call	25da8 <alt_ic_irq_enable>
   25fb8:	00000406 	br	25fcc <alt_iic_isr_register+0xc4>
   25fbc:	e0bff817 	ldw	r2,-32(fp)
   25fc0:	100b883a 	mov	r5,r2
   25fc4:	e13ffc17 	ldw	r4,-16(fp)
   25fc8:	0025e300 	call	25e30 <alt_ic_irq_disable>
   25fcc:	e0bff715 	stw	r2,-36(fp)
   25fd0:	e0bffa17 	ldw	r2,-24(fp)
   25fd4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25fd8:	e0bff917 	ldw	r2,-28(fp)
   25fdc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   25fe0:	e0bff717 	ldw	r2,-36(fp)
}
   25fe4:	e037883a 	mov	sp,fp
   25fe8:	dfc00117 	ldw	ra,4(sp)
   25fec:	df000017 	ldw	fp,0(sp)
   25ff0:	dec00204 	addi	sp,sp,8
   25ff4:	f800283a 	ret

00025ff8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   25ff8:	defff804 	addi	sp,sp,-32
   25ffc:	dfc00715 	stw	ra,28(sp)
   26000:	df000615 	stw	fp,24(sp)
   26004:	dc000515 	stw	r16,20(sp)
   26008:	df000604 	addi	fp,sp,24
   2600c:	e13ffb15 	stw	r4,-20(fp)
   26010:	e17ffc15 	stw	r5,-16(fp)
   26014:	e1bffd15 	stw	r6,-12(fp)
   26018:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   2601c:	e1bffe17 	ldw	r6,-8(fp)
   26020:	e17ffd17 	ldw	r5,-12(fp)
   26024:	e13ffc17 	ldw	r4,-16(fp)
   26028:	00262800 	call	26280 <open>
   2602c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   26030:	e0bffa17 	ldw	r2,-24(fp)
   26034:	10002216 	blt	r2,zero,260c0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   26038:	040000b4 	movhi	r16,2
   2603c:	841dd504 	addi	r16,r16,30548
   26040:	e0bffa17 	ldw	r2,-24(fp)
   26044:	01400304 	movi	r5,12
   26048:	1009883a 	mov	r4,r2
   2604c:	00234240 	call	23424 <__mulsi3>
   26050:	8085883a 	add	r2,r16,r2
   26054:	10c00017 	ldw	r3,0(r2)
   26058:	e0bffb17 	ldw	r2,-20(fp)
   2605c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   26060:	040000b4 	movhi	r16,2
   26064:	841dd504 	addi	r16,r16,30548
   26068:	e0bffa17 	ldw	r2,-24(fp)
   2606c:	01400304 	movi	r5,12
   26070:	1009883a 	mov	r4,r2
   26074:	00234240 	call	23424 <__mulsi3>
   26078:	8085883a 	add	r2,r16,r2
   2607c:	10800104 	addi	r2,r2,4
   26080:	10c00017 	ldw	r3,0(r2)
   26084:	e0bffb17 	ldw	r2,-20(fp)
   26088:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2608c:	040000b4 	movhi	r16,2
   26090:	841dd504 	addi	r16,r16,30548
   26094:	e0bffa17 	ldw	r2,-24(fp)
   26098:	01400304 	movi	r5,12
   2609c:	1009883a 	mov	r4,r2
   260a0:	00234240 	call	23424 <__mulsi3>
   260a4:	8085883a 	add	r2,r16,r2
   260a8:	10800204 	addi	r2,r2,8
   260ac:	10c00017 	ldw	r3,0(r2)
   260b0:	e0bffb17 	ldw	r2,-20(fp)
   260b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   260b8:	e13ffa17 	ldw	r4,-24(fp)
   260bc:	0023b700 	call	23b70 <alt_release_fd>
  }
} 
   260c0:	0001883a 	nop
   260c4:	e6ffff04 	addi	sp,fp,-4
   260c8:	dfc00217 	ldw	ra,8(sp)
   260cc:	df000117 	ldw	fp,4(sp)
   260d0:	dc000017 	ldw	r16,0(sp)
   260d4:	dec00304 	addi	sp,sp,12
   260d8:	f800283a 	ret

000260dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   260dc:	defffb04 	addi	sp,sp,-20
   260e0:	dfc00415 	stw	ra,16(sp)
   260e4:	df000315 	stw	fp,12(sp)
   260e8:	df000304 	addi	fp,sp,12
   260ec:	e13ffd15 	stw	r4,-12(fp)
   260f0:	e17ffe15 	stw	r5,-8(fp)
   260f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   260f8:	01c07fc4 	movi	r7,511
   260fc:	01800044 	movi	r6,1
   26100:	e17ffd17 	ldw	r5,-12(fp)
   26104:	010000b4 	movhi	r4,2
   26108:	211dd804 	addi	r4,r4,30560
   2610c:	0025ff80 	call	25ff8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   26110:	01c07fc4 	movi	r7,511
   26114:	000d883a 	mov	r6,zero
   26118:	e17ffe17 	ldw	r5,-8(fp)
   2611c:	010000b4 	movhi	r4,2
   26120:	211dd504 	addi	r4,r4,30548
   26124:	0025ff80 	call	25ff8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   26128:	01c07fc4 	movi	r7,511
   2612c:	01800044 	movi	r6,1
   26130:	e17fff17 	ldw	r5,-4(fp)
   26134:	010000b4 	movhi	r4,2
   26138:	211ddb04 	addi	r4,r4,30572
   2613c:	0025ff80 	call	25ff8 <alt_open_fd>
}  
   26140:	0001883a 	nop
   26144:	e037883a 	mov	sp,fp
   26148:	dfc00117 	ldw	ra,4(sp)
   2614c:	df000017 	ldw	fp,0(sp)
   26150:	dec00204 	addi	sp,sp,8
   26154:	f800283a 	ret

00026158 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26158:	defffe04 	addi	sp,sp,-8
   2615c:	dfc00115 	stw	ra,4(sp)
   26160:	df000015 	stw	fp,0(sp)
   26164:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26168:	d0a00917 	ldw	r2,-32732(gp)
   2616c:	10000326 	beq	r2,zero,2617c <alt_get_errno+0x24>
   26170:	d0a00917 	ldw	r2,-32732(gp)
   26174:	103ee83a 	callr	r2
   26178:	00000106 	br	26180 <alt_get_errno+0x28>
   2617c:	d0a6f804 	addi	r2,gp,-25632
}
   26180:	e037883a 	mov	sp,fp
   26184:	dfc00117 	ldw	ra,4(sp)
   26188:	df000017 	ldw	fp,0(sp)
   2618c:	dec00204 	addi	sp,sp,8
   26190:	f800283a 	ret

00026194 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   26194:	defffb04 	addi	sp,sp,-20
   26198:	dfc00415 	stw	ra,16(sp)
   2619c:	df000315 	stw	fp,12(sp)
   261a0:	dc000215 	stw	r16,8(sp)
   261a4:	df000304 	addi	fp,sp,12
   261a8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   261ac:	e0bffe17 	ldw	r2,-8(fp)
   261b0:	10800217 	ldw	r2,8(r2)
   261b4:	10d00034 	orhi	r3,r2,16384
   261b8:	e0bffe17 	ldw	r2,-8(fp)
   261bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   261c0:	e03ffd15 	stw	zero,-12(fp)
   261c4:	00002306 	br	26254 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   261c8:	040000b4 	movhi	r16,2
   261cc:	841dd504 	addi	r16,r16,30548
   261d0:	e0bffd17 	ldw	r2,-12(fp)
   261d4:	01400304 	movi	r5,12
   261d8:	1009883a 	mov	r4,r2
   261dc:	00234240 	call	23424 <__mulsi3>
   261e0:	8085883a 	add	r2,r16,r2
   261e4:	10c00017 	ldw	r3,0(r2)
   261e8:	e0bffe17 	ldw	r2,-8(fp)
   261ec:	10800017 	ldw	r2,0(r2)
   261f0:	1880151e 	bne	r3,r2,26248 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   261f4:	040000b4 	movhi	r16,2
   261f8:	841dd504 	addi	r16,r16,30548
   261fc:	e0bffd17 	ldw	r2,-12(fp)
   26200:	01400304 	movi	r5,12
   26204:	1009883a 	mov	r4,r2
   26208:	00234240 	call	23424 <__mulsi3>
   2620c:	8085883a 	add	r2,r16,r2
   26210:	10800204 	addi	r2,r2,8
   26214:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   26218:	10000b0e 	bge	r2,zero,26248 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2621c:	01400304 	movi	r5,12
   26220:	e13ffd17 	ldw	r4,-12(fp)
   26224:	00234240 	call	23424 <__mulsi3>
   26228:	1007883a 	mov	r3,r2
   2622c:	008000b4 	movhi	r2,2
   26230:	109dd504 	addi	r2,r2,30548
   26234:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   26238:	e0bffe17 	ldw	r2,-8(fp)
   2623c:	18800226 	beq	r3,r2,26248 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   26240:	00bffcc4 	movi	r2,-13
   26244:	00000806 	br	26268 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   26248:	e0bffd17 	ldw	r2,-12(fp)
   2624c:	10800044 	addi	r2,r2,1
   26250:	e0bffd15 	stw	r2,-12(fp)
   26254:	d0a00817 	ldw	r2,-32736(gp)
   26258:	1007883a 	mov	r3,r2
   2625c:	e0bffd17 	ldw	r2,-12(fp)
   26260:	18bfd92e 	bgeu	r3,r2,261c8 <__alt_data_end+0xfffedb28>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   26264:	0005883a 	mov	r2,zero
}
   26268:	e6ffff04 	addi	sp,fp,-4
   2626c:	dfc00217 	ldw	ra,8(sp)
   26270:	df000117 	ldw	fp,4(sp)
   26274:	dc000017 	ldw	r16,0(sp)
   26278:	dec00304 	addi	sp,sp,12
   2627c:	f800283a 	ret

00026280 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   26280:	defff604 	addi	sp,sp,-40
   26284:	dfc00915 	stw	ra,36(sp)
   26288:	df000815 	stw	fp,32(sp)
   2628c:	df000804 	addi	fp,sp,32
   26290:	e13ffd15 	stw	r4,-12(fp)
   26294:	e17ffe15 	stw	r5,-8(fp)
   26298:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2629c:	00bfffc4 	movi	r2,-1
   262a0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   262a4:	00bffb44 	movi	r2,-19
   262a8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   262ac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   262b0:	d1600604 	addi	r5,gp,-32744
   262b4:	e13ffd17 	ldw	r4,-12(fp)
   262b8:	00265a40 	call	265a4 <alt_find_dev>
   262bc:	e0bff815 	stw	r2,-32(fp)
   262c0:	e0bff817 	ldw	r2,-32(fp)
   262c4:	1000051e 	bne	r2,zero,262dc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   262c8:	e13ffd17 	ldw	r4,-12(fp)
   262cc:	00266340 	call	26634 <alt_find_file>
   262d0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   262d4:	00800044 	movi	r2,1
   262d8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   262dc:	e0bff817 	ldw	r2,-32(fp)
   262e0:	10002b26 	beq	r2,zero,26390 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   262e4:	e13ff817 	ldw	r4,-32(fp)
   262e8:	002673c0 	call	2673c <alt_get_fd>
   262ec:	e0bff915 	stw	r2,-28(fp)
   262f0:	e0bff917 	ldw	r2,-28(fp)
   262f4:	1000030e 	bge	r2,zero,26304 <open+0x84>
    {
      status = index;
   262f8:	e0bff917 	ldw	r2,-28(fp)
   262fc:	e0bffa15 	stw	r2,-24(fp)
   26300:	00002506 	br	26398 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   26304:	01400304 	movi	r5,12
   26308:	e13ff917 	ldw	r4,-28(fp)
   2630c:	00234240 	call	23424 <__mulsi3>
   26310:	1007883a 	mov	r3,r2
   26314:	008000b4 	movhi	r2,2
   26318:	109dd504 	addi	r2,r2,30548
   2631c:	1885883a 	add	r2,r3,r2
   26320:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   26324:	e0fffe17 	ldw	r3,-8(fp)
   26328:	00900034 	movhi	r2,16384
   2632c:	10bfffc4 	addi	r2,r2,-1
   26330:	1886703a 	and	r3,r3,r2
   26334:	e0bffc17 	ldw	r2,-16(fp)
   26338:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2633c:	e0bffb17 	ldw	r2,-20(fp)
   26340:	1000051e 	bne	r2,zero,26358 <open+0xd8>
   26344:	e13ffc17 	ldw	r4,-16(fp)
   26348:	00261940 	call	26194 <alt_file_locked>
   2634c:	e0bffa15 	stw	r2,-24(fp)
   26350:	e0bffa17 	ldw	r2,-24(fp)
   26354:	10001016 	blt	r2,zero,26398 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   26358:	e0bff817 	ldw	r2,-32(fp)
   2635c:	10800317 	ldw	r2,12(r2)
   26360:	10000826 	beq	r2,zero,26384 <open+0x104>
   26364:	e0bff817 	ldw	r2,-32(fp)
   26368:	10800317 	ldw	r2,12(r2)
   2636c:	e1ffff17 	ldw	r7,-4(fp)
   26370:	e1bffe17 	ldw	r6,-8(fp)
   26374:	e17ffd17 	ldw	r5,-12(fp)
   26378:	e13ffc17 	ldw	r4,-16(fp)
   2637c:	103ee83a 	callr	r2
   26380:	00000106 	br	26388 <open+0x108>
   26384:	0005883a 	mov	r2,zero
   26388:	e0bffa15 	stw	r2,-24(fp)
   2638c:	00000206 	br	26398 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   26390:	00bffb44 	movi	r2,-19
   26394:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   26398:	e0bffa17 	ldw	r2,-24(fp)
   2639c:	1000090e 	bge	r2,zero,263c4 <open+0x144>
  {
    alt_release_fd (index);  
   263a0:	e13ff917 	ldw	r4,-28(fp)
   263a4:	0023b700 	call	23b70 <alt_release_fd>
    ALT_ERRNO = -status;
   263a8:	00261580 	call	26158 <alt_get_errno>
   263ac:	1007883a 	mov	r3,r2
   263b0:	e0bffa17 	ldw	r2,-24(fp)
   263b4:	0085c83a 	sub	r2,zero,r2
   263b8:	18800015 	stw	r2,0(r3)
    return -1;
   263bc:	00bfffc4 	movi	r2,-1
   263c0:	00000106 	br	263c8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   263c4:	e0bff917 	ldw	r2,-28(fp)
}
   263c8:	e037883a 	mov	sp,fp
   263cc:	dfc00117 	ldw	ra,4(sp)
   263d0:	df000017 	ldw	fp,0(sp)
   263d4:	dec00204 	addi	sp,sp,8
   263d8:	f800283a 	ret

000263dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   263dc:	defffa04 	addi	sp,sp,-24
   263e0:	df000515 	stw	fp,20(sp)
   263e4:	df000504 	addi	fp,sp,20
   263e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   263ec:	0005303a 	rdctl	r2,status
   263f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   263f4:	e0fffc17 	ldw	r3,-16(fp)
   263f8:	00bfff84 	movi	r2,-2
   263fc:	1884703a 	and	r2,r3,r2
   26400:	1001703a 	wrctl	status,r2
  
  return context;
   26404:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   26408:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2640c:	e0bfff17 	ldw	r2,-4(fp)
   26410:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   26414:	e0bffd17 	ldw	r2,-12(fp)
   26418:	10800017 	ldw	r2,0(r2)
   2641c:	e0fffd17 	ldw	r3,-12(fp)
   26420:	18c00117 	ldw	r3,4(r3)
   26424:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   26428:	e0bffd17 	ldw	r2,-12(fp)
   2642c:	10800117 	ldw	r2,4(r2)
   26430:	e0fffd17 	ldw	r3,-12(fp)
   26434:	18c00017 	ldw	r3,0(r3)
   26438:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2643c:	e0bffd17 	ldw	r2,-12(fp)
   26440:	e0fffd17 	ldw	r3,-12(fp)
   26444:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   26448:	e0bffd17 	ldw	r2,-12(fp)
   2644c:	e0fffd17 	ldw	r3,-12(fp)
   26450:	10c00015 	stw	r3,0(r2)
   26454:	e0bffb17 	ldw	r2,-20(fp)
   26458:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2645c:	e0bffe17 	ldw	r2,-8(fp)
   26460:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   26464:	0001883a 	nop
   26468:	e037883a 	mov	sp,fp
   2646c:	df000017 	ldw	fp,0(sp)
   26470:	dec00104 	addi	sp,sp,4
   26474:	f800283a 	ret

00026478 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   26478:	defffb04 	addi	sp,sp,-20
   2647c:	dfc00415 	stw	ra,16(sp)
   26480:	df000315 	stw	fp,12(sp)
   26484:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   26488:	d0a00d17 	ldw	r2,-32716(gp)
   2648c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   26490:	d0a6fe17 	ldw	r2,-25608(gp)
   26494:	10800044 	addi	r2,r2,1
   26498:	d0a6fe15 	stw	r2,-25608(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2649c:	00002e06 	br	26558 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   264a0:	e0bffd17 	ldw	r2,-12(fp)
   264a4:	10800017 	ldw	r2,0(r2)
   264a8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   264ac:	e0bffd17 	ldw	r2,-12(fp)
   264b0:	10800403 	ldbu	r2,16(r2)
   264b4:	10803fcc 	andi	r2,r2,255
   264b8:	10000426 	beq	r2,zero,264cc <alt_tick+0x54>
   264bc:	d0a6fe17 	ldw	r2,-25608(gp)
   264c0:	1000021e 	bne	r2,zero,264cc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   264c4:	e0bffd17 	ldw	r2,-12(fp)
   264c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   264cc:	e0bffd17 	ldw	r2,-12(fp)
   264d0:	10800217 	ldw	r2,8(r2)
   264d4:	d0e6fe17 	ldw	r3,-25608(gp)
   264d8:	18801d36 	bltu	r3,r2,26550 <alt_tick+0xd8>
   264dc:	e0bffd17 	ldw	r2,-12(fp)
   264e0:	10800403 	ldbu	r2,16(r2)
   264e4:	10803fcc 	andi	r2,r2,255
   264e8:	1000191e 	bne	r2,zero,26550 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   264ec:	e0bffd17 	ldw	r2,-12(fp)
   264f0:	10800317 	ldw	r2,12(r2)
   264f4:	e0fffd17 	ldw	r3,-12(fp)
   264f8:	18c00517 	ldw	r3,20(r3)
   264fc:	1809883a 	mov	r4,r3
   26500:	103ee83a 	callr	r2
   26504:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   26508:	e0bfff17 	ldw	r2,-4(fp)
   2650c:	1000031e 	bne	r2,zero,2651c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   26510:	e13ffd17 	ldw	r4,-12(fp)
   26514:	00263dc0 	call	263dc <alt_alarm_stop>
   26518:	00000d06 	br	26550 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2651c:	e0bffd17 	ldw	r2,-12(fp)
   26520:	10c00217 	ldw	r3,8(r2)
   26524:	e0bfff17 	ldw	r2,-4(fp)
   26528:	1887883a 	add	r3,r3,r2
   2652c:	e0bffd17 	ldw	r2,-12(fp)
   26530:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   26534:	e0bffd17 	ldw	r2,-12(fp)
   26538:	10c00217 	ldw	r3,8(r2)
   2653c:	d0a6fe17 	ldw	r2,-25608(gp)
   26540:	1880032e 	bgeu	r3,r2,26550 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   26544:	e0bffd17 	ldw	r2,-12(fp)
   26548:	00c00044 	movi	r3,1
   2654c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   26550:	e0bffe17 	ldw	r2,-8(fp)
   26554:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   26558:	e0fffd17 	ldw	r3,-12(fp)
   2655c:	d0a00d04 	addi	r2,gp,-32716
   26560:	18bfcf1e 	bne	r3,r2,264a0 <__alt_data_end+0xfffede00>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   26564:	0001883a 	nop
}
   26568:	0001883a 	nop
   2656c:	e037883a 	mov	sp,fp
   26570:	dfc00117 	ldw	ra,4(sp)
   26574:	df000017 	ldw	fp,0(sp)
   26578:	dec00204 	addi	sp,sp,8
   2657c:	f800283a 	ret

00026580 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   26580:	deffff04 	addi	sp,sp,-4
   26584:	df000015 	stw	fp,0(sp)
   26588:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2658c:	000170fa 	wrctl	ienable,zero
}
   26590:	0001883a 	nop
   26594:	e037883a 	mov	sp,fp
   26598:	df000017 	ldw	fp,0(sp)
   2659c:	dec00104 	addi	sp,sp,4
   265a0:	f800283a 	ret

000265a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   265a4:	defffa04 	addi	sp,sp,-24
   265a8:	dfc00515 	stw	ra,20(sp)
   265ac:	df000415 	stw	fp,16(sp)
   265b0:	df000404 	addi	fp,sp,16
   265b4:	e13ffe15 	stw	r4,-8(fp)
   265b8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   265bc:	e0bfff17 	ldw	r2,-4(fp)
   265c0:	10800017 	ldw	r2,0(r2)
   265c4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   265c8:	e13ffe17 	ldw	r4,-8(fp)
   265cc:	00208c80 	call	208c8 <strlen>
   265d0:	10800044 	addi	r2,r2,1
   265d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   265d8:	00000d06 	br	26610 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   265dc:	e0bffc17 	ldw	r2,-16(fp)
   265e0:	10800217 	ldw	r2,8(r2)
   265e4:	e0fffd17 	ldw	r3,-12(fp)
   265e8:	180d883a 	mov	r6,r3
   265ec:	e17ffe17 	ldw	r5,-8(fp)
   265f0:	1009883a 	mov	r4,r2
   265f4:	00268e80 	call	268e8 <memcmp>
   265f8:	1000021e 	bne	r2,zero,26604 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   265fc:	e0bffc17 	ldw	r2,-16(fp)
   26600:	00000706 	br	26620 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   26604:	e0bffc17 	ldw	r2,-16(fp)
   26608:	10800017 	ldw	r2,0(r2)
   2660c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   26610:	e0fffc17 	ldw	r3,-16(fp)
   26614:	e0bfff17 	ldw	r2,-4(fp)
   26618:	18bff01e 	bne	r3,r2,265dc <__alt_data_end+0xfffedf3c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2661c:	0005883a 	mov	r2,zero
}
   26620:	e037883a 	mov	sp,fp
   26624:	dfc00117 	ldw	ra,4(sp)
   26628:	df000017 	ldw	fp,0(sp)
   2662c:	dec00204 	addi	sp,sp,8
   26630:	f800283a 	ret

00026634 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   26634:	defffb04 	addi	sp,sp,-20
   26638:	dfc00415 	stw	ra,16(sp)
   2663c:	df000315 	stw	fp,12(sp)
   26640:	df000304 	addi	fp,sp,12
   26644:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   26648:	d0a00417 	ldw	r2,-32752(gp)
   2664c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   26650:	00003106 	br	26718 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   26654:	e0bffd17 	ldw	r2,-12(fp)
   26658:	10800217 	ldw	r2,8(r2)
   2665c:	1009883a 	mov	r4,r2
   26660:	00208c80 	call	208c8 <strlen>
   26664:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   26668:	e0bffd17 	ldw	r2,-12(fp)
   2666c:	10c00217 	ldw	r3,8(r2)
   26670:	e0bffe17 	ldw	r2,-8(fp)
   26674:	10bfffc4 	addi	r2,r2,-1
   26678:	1885883a 	add	r2,r3,r2
   2667c:	10800003 	ldbu	r2,0(r2)
   26680:	10803fcc 	andi	r2,r2,255
   26684:	1080201c 	xori	r2,r2,128
   26688:	10bfe004 	addi	r2,r2,-128
   2668c:	10800bd8 	cmpnei	r2,r2,47
   26690:	1000031e 	bne	r2,zero,266a0 <alt_find_file+0x6c>
    {
      len -= 1;
   26694:	e0bffe17 	ldw	r2,-8(fp)
   26698:	10bfffc4 	addi	r2,r2,-1
   2669c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   266a0:	e0bffe17 	ldw	r2,-8(fp)
   266a4:	e0ffff17 	ldw	r3,-4(fp)
   266a8:	1885883a 	add	r2,r3,r2
   266ac:	10800003 	ldbu	r2,0(r2)
   266b0:	10803fcc 	andi	r2,r2,255
   266b4:	1080201c 	xori	r2,r2,128
   266b8:	10bfe004 	addi	r2,r2,-128
   266bc:	10800be0 	cmpeqi	r2,r2,47
   266c0:	1000081e 	bne	r2,zero,266e4 <alt_find_file+0xb0>
   266c4:	e0bffe17 	ldw	r2,-8(fp)
   266c8:	e0ffff17 	ldw	r3,-4(fp)
   266cc:	1885883a 	add	r2,r3,r2
   266d0:	10800003 	ldbu	r2,0(r2)
   266d4:	10803fcc 	andi	r2,r2,255
   266d8:	1080201c 	xori	r2,r2,128
   266dc:	10bfe004 	addi	r2,r2,-128
   266e0:	10000a1e 	bne	r2,zero,2670c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   266e4:	e0bffd17 	ldw	r2,-12(fp)
   266e8:	10800217 	ldw	r2,8(r2)
   266ec:	e0fffe17 	ldw	r3,-8(fp)
   266f0:	180d883a 	mov	r6,r3
   266f4:	e17fff17 	ldw	r5,-4(fp)
   266f8:	1009883a 	mov	r4,r2
   266fc:	00268e80 	call	268e8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   26700:	1000021e 	bne	r2,zero,2670c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   26704:	e0bffd17 	ldw	r2,-12(fp)
   26708:	00000706 	br	26728 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   2670c:	e0bffd17 	ldw	r2,-12(fp)
   26710:	10800017 	ldw	r2,0(r2)
   26714:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   26718:	e0fffd17 	ldw	r3,-12(fp)
   2671c:	d0a00404 	addi	r2,gp,-32752
   26720:	18bfcc1e 	bne	r3,r2,26654 <__alt_data_end+0xfffedfb4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   26724:	0005883a 	mov	r2,zero
}
   26728:	e037883a 	mov	sp,fp
   2672c:	dfc00117 	ldw	ra,4(sp)
   26730:	df000017 	ldw	fp,0(sp)
   26734:	dec00204 	addi	sp,sp,8
   26738:	f800283a 	ret

0002673c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2673c:	defffa04 	addi	sp,sp,-24
   26740:	dfc00515 	stw	ra,20(sp)
   26744:	df000415 	stw	fp,16(sp)
   26748:	dc000315 	stw	r16,12(sp)
   2674c:	df000404 	addi	fp,sp,16
   26750:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   26754:	00bffa04 	movi	r2,-24
   26758:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2675c:	e03ffc15 	stw	zero,-16(fp)
   26760:	00001d06 	br	267d8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   26764:	040000b4 	movhi	r16,2
   26768:	841dd504 	addi	r16,r16,30548
   2676c:	e0bffc17 	ldw	r2,-16(fp)
   26770:	01400304 	movi	r5,12
   26774:	1009883a 	mov	r4,r2
   26778:	00234240 	call	23424 <__mulsi3>
   2677c:	8085883a 	add	r2,r16,r2
   26780:	10800017 	ldw	r2,0(r2)
   26784:	1000111e 	bne	r2,zero,267cc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   26788:	040000b4 	movhi	r16,2
   2678c:	841dd504 	addi	r16,r16,30548
   26790:	e0bffc17 	ldw	r2,-16(fp)
   26794:	01400304 	movi	r5,12
   26798:	1009883a 	mov	r4,r2
   2679c:	00234240 	call	23424 <__mulsi3>
   267a0:	8085883a 	add	r2,r16,r2
   267a4:	e0fffe17 	ldw	r3,-8(fp)
   267a8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   267ac:	d0e00817 	ldw	r3,-32736(gp)
   267b0:	e0bffc17 	ldw	r2,-16(fp)
   267b4:	1880020e 	bge	r3,r2,267c0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   267b8:	e0bffc17 	ldw	r2,-16(fp)
   267bc:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   267c0:	e0bffc17 	ldw	r2,-16(fp)
   267c4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   267c8:	00000606 	br	267e4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   267cc:	e0bffc17 	ldw	r2,-16(fp)
   267d0:	10800044 	addi	r2,r2,1
   267d4:	e0bffc15 	stw	r2,-16(fp)
   267d8:	e0bffc17 	ldw	r2,-16(fp)
   267dc:	10800810 	cmplti	r2,r2,32
   267e0:	103fe01e 	bne	r2,zero,26764 <__alt_data_end+0xfffee0c4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   267e4:	e0bffd17 	ldw	r2,-12(fp)
}
   267e8:	e6ffff04 	addi	sp,fp,-4
   267ec:	dfc00217 	ldw	ra,8(sp)
   267f0:	df000117 	ldw	fp,4(sp)
   267f4:	dc000017 	ldw	r16,0(sp)
   267f8:	dec00304 	addi	sp,sp,12
   267fc:	f800283a 	ret

00026800 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   26800:	defffe04 	addi	sp,sp,-8
   26804:	df000115 	stw	fp,4(sp)
   26808:	df000104 	addi	fp,sp,4
   2680c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   26810:	e0bfff17 	ldw	r2,-4(fp)
   26814:	10bffe84 	addi	r2,r2,-6
   26818:	10c00428 	cmpgeui	r3,r2,16
   2681c:	18001a1e 	bne	r3,zero,26888 <alt_exception_cause_generated_bad_addr+0x88>
   26820:	100690ba 	slli	r3,r2,2
   26824:	008000b4 	movhi	r2,2
   26828:	109a0e04 	addi	r2,r2,26680
   2682c:	1885883a 	add	r2,r3,r2
   26830:	10800017 	ldw	r2,0(r2)
   26834:	1000683a 	jmp	r2
   26838:	00026878 	rdprs	zero,zero,2465
   2683c:	00026878 	rdprs	zero,zero,2465
   26840:	00026888 	cmpgei	zero,zero,2466
   26844:	00026888 	cmpgei	zero,zero,2466
   26848:	00026888 	cmpgei	zero,zero,2466
   2684c:	00026878 	rdprs	zero,zero,2465
   26850:	00026880 	call	2688 <__alt_mem_onchip_memory2-0x1d978>
   26854:	00026888 	cmpgei	zero,zero,2466
   26858:	00026878 	rdprs	zero,zero,2465
   2685c:	00026878 	rdprs	zero,zero,2465
   26860:	00026888 	cmpgei	zero,zero,2466
   26864:	00026878 	rdprs	zero,zero,2465
   26868:	00026880 	call	2688 <__alt_mem_onchip_memory2-0x1d978>
   2686c:	00026888 	cmpgei	zero,zero,2466
   26870:	00026888 	cmpgei	zero,zero,2466
   26874:	00026878 	rdprs	zero,zero,2465
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   26878:	00800044 	movi	r2,1
   2687c:	00000306 	br	2688c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   26880:	0005883a 	mov	r2,zero
   26884:	00000106 	br	2688c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   26888:	0005883a 	mov	r2,zero
  }
}
   2688c:	e037883a 	mov	sp,fp
   26890:	df000017 	ldw	fp,0(sp)
   26894:	dec00104 	addi	sp,sp,4
   26898:	f800283a 	ret

0002689c <atexit>:
   2689c:	200b883a 	mov	r5,r4
   268a0:	000f883a 	mov	r7,zero
   268a4:	000d883a 	mov	r6,zero
   268a8:	0009883a 	mov	r4,zero
   268ac:	00269641 	jmpi	26964 <__register_exitproc>

000268b0 <exit>:
   268b0:	defffe04 	addi	sp,sp,-8
   268b4:	000b883a 	mov	r5,zero
   268b8:	dc000015 	stw	r16,0(sp)
   268bc:	dfc00115 	stw	ra,4(sp)
   268c0:	2021883a 	mov	r16,r4
   268c4:	0026a7c0 	call	26a7c <__call_exitprocs>
   268c8:	008000f4 	movhi	r2,3
   268cc:	10a29504 	addi	r2,r2,-30124
   268d0:	11000017 	ldw	r4,0(r2)
   268d4:	20800f17 	ldw	r2,60(r4)
   268d8:	10000126 	beq	r2,zero,268e0 <exit+0x30>
   268dc:	103ee83a 	callr	r2
   268e0:	8009883a 	mov	r4,r16
   268e4:	0026bfc0 	call	26bfc <_exit>

000268e8 <memcmp>:
   268e8:	01c000c4 	movi	r7,3
   268ec:	3980192e 	bgeu	r7,r6,26954 <memcmp+0x6c>
   268f0:	2144b03a 	or	r2,r4,r5
   268f4:	11c4703a 	and	r2,r2,r7
   268f8:	10000f26 	beq	r2,zero,26938 <memcmp+0x50>
   268fc:	20800003 	ldbu	r2,0(r4)
   26900:	28c00003 	ldbu	r3,0(r5)
   26904:	10c0151e 	bne	r2,r3,2695c <memcmp+0x74>
   26908:	31bfff84 	addi	r6,r6,-2
   2690c:	01ffffc4 	movi	r7,-1
   26910:	00000406 	br	26924 <memcmp+0x3c>
   26914:	20800003 	ldbu	r2,0(r4)
   26918:	28c00003 	ldbu	r3,0(r5)
   2691c:	31bfffc4 	addi	r6,r6,-1
   26920:	10c00e1e 	bne	r2,r3,2695c <memcmp+0x74>
   26924:	21000044 	addi	r4,r4,1
   26928:	29400044 	addi	r5,r5,1
   2692c:	31fff91e 	bne	r6,r7,26914 <__alt_data_end+0xfffee274>
   26930:	0005883a 	mov	r2,zero
   26934:	f800283a 	ret
   26938:	20c00017 	ldw	r3,0(r4)
   2693c:	28800017 	ldw	r2,0(r5)
   26940:	18bfee1e 	bne	r3,r2,268fc <__alt_data_end+0xfffee25c>
   26944:	31bfff04 	addi	r6,r6,-4
   26948:	21000104 	addi	r4,r4,4
   2694c:	29400104 	addi	r5,r5,4
   26950:	39bff936 	bltu	r7,r6,26938 <__alt_data_end+0xfffee298>
   26954:	303fe91e 	bne	r6,zero,268fc <__alt_data_end+0xfffee25c>
   26958:	003ff506 	br	26930 <__alt_data_end+0xfffee290>
   2695c:	10c5c83a 	sub	r2,r2,r3
   26960:	f800283a 	ret

00026964 <__register_exitproc>:
   26964:	defffa04 	addi	sp,sp,-24
   26968:	dc000315 	stw	r16,12(sp)
   2696c:	040000f4 	movhi	r16,3
   26970:	84229504 	addi	r16,r16,-30124
   26974:	80c00017 	ldw	r3,0(r16)
   26978:	dc400415 	stw	r17,16(sp)
   2697c:	dfc00515 	stw	ra,20(sp)
   26980:	18805217 	ldw	r2,328(r3)
   26984:	2023883a 	mov	r17,r4
   26988:	10003726 	beq	r2,zero,26a68 <__register_exitproc+0x104>
   2698c:	10c00117 	ldw	r3,4(r2)
   26990:	010007c4 	movi	r4,31
   26994:	20c00e16 	blt	r4,r3,269d0 <__register_exitproc+0x6c>
   26998:	1a000044 	addi	r8,r3,1
   2699c:	8800221e 	bne	r17,zero,26a28 <__register_exitproc+0xc4>
   269a0:	18c00084 	addi	r3,r3,2
   269a4:	18c7883a 	add	r3,r3,r3
   269a8:	18c7883a 	add	r3,r3,r3
   269ac:	12000115 	stw	r8,4(r2)
   269b0:	10c7883a 	add	r3,r2,r3
   269b4:	19400015 	stw	r5,0(r3)
   269b8:	0005883a 	mov	r2,zero
   269bc:	dfc00517 	ldw	ra,20(sp)
   269c0:	dc400417 	ldw	r17,16(sp)
   269c4:	dc000317 	ldw	r16,12(sp)
   269c8:	dec00604 	addi	sp,sp,24
   269cc:	f800283a 	ret
   269d0:	00800034 	movhi	r2,0
   269d4:	10800004 	addi	r2,r2,0
   269d8:	10002626 	beq	r2,zero,26a74 <__register_exitproc+0x110>
   269dc:	01006404 	movi	r4,400
   269e0:	d9400015 	stw	r5,0(sp)
   269e4:	d9800115 	stw	r6,4(sp)
   269e8:	d9c00215 	stw	r7,8(sp)
   269ec:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   269f0:	d9400017 	ldw	r5,0(sp)
   269f4:	d9800117 	ldw	r6,4(sp)
   269f8:	d9c00217 	ldw	r7,8(sp)
   269fc:	10001d26 	beq	r2,zero,26a74 <__register_exitproc+0x110>
   26a00:	81000017 	ldw	r4,0(r16)
   26a04:	10000115 	stw	zero,4(r2)
   26a08:	02000044 	movi	r8,1
   26a0c:	22405217 	ldw	r9,328(r4)
   26a10:	0007883a 	mov	r3,zero
   26a14:	12400015 	stw	r9,0(r2)
   26a18:	20805215 	stw	r2,328(r4)
   26a1c:	10006215 	stw	zero,392(r2)
   26a20:	10006315 	stw	zero,396(r2)
   26a24:	883fde26 	beq	r17,zero,269a0 <__alt_data_end+0xfffee300>
   26a28:	18c9883a 	add	r4,r3,r3
   26a2c:	2109883a 	add	r4,r4,r4
   26a30:	1109883a 	add	r4,r2,r4
   26a34:	21802215 	stw	r6,136(r4)
   26a38:	01800044 	movi	r6,1
   26a3c:	12406217 	ldw	r9,392(r2)
   26a40:	30cc983a 	sll	r6,r6,r3
   26a44:	4992b03a 	or	r9,r9,r6
   26a48:	12406215 	stw	r9,392(r2)
   26a4c:	21c04215 	stw	r7,264(r4)
   26a50:	01000084 	movi	r4,2
   26a54:	893fd21e 	bne	r17,r4,269a0 <__alt_data_end+0xfffee300>
   26a58:	11006317 	ldw	r4,396(r2)
   26a5c:	218cb03a 	or	r6,r4,r6
   26a60:	11806315 	stw	r6,396(r2)
   26a64:	003fce06 	br	269a0 <__alt_data_end+0xfffee300>
   26a68:	18805304 	addi	r2,r3,332
   26a6c:	18805215 	stw	r2,328(r3)
   26a70:	003fc606 	br	2698c <__alt_data_end+0xfffee2ec>
   26a74:	00bfffc4 	movi	r2,-1
   26a78:	003fd006 	br	269bc <__alt_data_end+0xfffee31c>

00026a7c <__call_exitprocs>:
   26a7c:	defff504 	addi	sp,sp,-44
   26a80:	df000915 	stw	fp,36(sp)
   26a84:	dd400615 	stw	r21,24(sp)
   26a88:	dc800315 	stw	r18,12(sp)
   26a8c:	dfc00a15 	stw	ra,40(sp)
   26a90:	ddc00815 	stw	r23,32(sp)
   26a94:	dd800715 	stw	r22,28(sp)
   26a98:	dd000515 	stw	r20,20(sp)
   26a9c:	dcc00415 	stw	r19,16(sp)
   26aa0:	dc400215 	stw	r17,8(sp)
   26aa4:	dc000115 	stw	r16,4(sp)
   26aa8:	d9000015 	stw	r4,0(sp)
   26aac:	2839883a 	mov	fp,r5
   26ab0:	04800044 	movi	r18,1
   26ab4:	057fffc4 	movi	r21,-1
   26ab8:	008000f4 	movhi	r2,3
   26abc:	10a29504 	addi	r2,r2,-30124
   26ac0:	12000017 	ldw	r8,0(r2)
   26ac4:	45005217 	ldw	r20,328(r8)
   26ac8:	44c05204 	addi	r19,r8,328
   26acc:	a0001c26 	beq	r20,zero,26b40 <__call_exitprocs+0xc4>
   26ad0:	a0800117 	ldw	r2,4(r20)
   26ad4:	15ffffc4 	addi	r23,r2,-1
   26ad8:	b8000d16 	blt	r23,zero,26b10 <__call_exitprocs+0x94>
   26adc:	14000044 	addi	r16,r2,1
   26ae0:	8421883a 	add	r16,r16,r16
   26ae4:	8421883a 	add	r16,r16,r16
   26ae8:	84402004 	addi	r17,r16,128
   26aec:	a463883a 	add	r17,r20,r17
   26af0:	a421883a 	add	r16,r20,r16
   26af4:	e0001e26 	beq	fp,zero,26b70 <__call_exitprocs+0xf4>
   26af8:	80804017 	ldw	r2,256(r16)
   26afc:	e0801c26 	beq	fp,r2,26b70 <__call_exitprocs+0xf4>
   26b00:	bdffffc4 	addi	r23,r23,-1
   26b04:	843fff04 	addi	r16,r16,-4
   26b08:	8c7fff04 	addi	r17,r17,-4
   26b0c:	bd7ff91e 	bne	r23,r21,26af4 <__alt_data_end+0xfffee454>
   26b10:	00800034 	movhi	r2,0
   26b14:	10800004 	addi	r2,r2,0
   26b18:	10000926 	beq	r2,zero,26b40 <__call_exitprocs+0xc4>
   26b1c:	a0800117 	ldw	r2,4(r20)
   26b20:	1000301e 	bne	r2,zero,26be4 <__call_exitprocs+0x168>
   26b24:	a0800017 	ldw	r2,0(r20)
   26b28:	10003226 	beq	r2,zero,26bf4 <__call_exitprocs+0x178>
   26b2c:	a009883a 	mov	r4,r20
   26b30:	98800015 	stw	r2,0(r19)
   26b34:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   26b38:	9d000017 	ldw	r20,0(r19)
   26b3c:	a03fe41e 	bne	r20,zero,26ad0 <__alt_data_end+0xfffee430>
   26b40:	dfc00a17 	ldw	ra,40(sp)
   26b44:	df000917 	ldw	fp,36(sp)
   26b48:	ddc00817 	ldw	r23,32(sp)
   26b4c:	dd800717 	ldw	r22,28(sp)
   26b50:	dd400617 	ldw	r21,24(sp)
   26b54:	dd000517 	ldw	r20,20(sp)
   26b58:	dcc00417 	ldw	r19,16(sp)
   26b5c:	dc800317 	ldw	r18,12(sp)
   26b60:	dc400217 	ldw	r17,8(sp)
   26b64:	dc000117 	ldw	r16,4(sp)
   26b68:	dec00b04 	addi	sp,sp,44
   26b6c:	f800283a 	ret
   26b70:	a0800117 	ldw	r2,4(r20)
   26b74:	80c00017 	ldw	r3,0(r16)
   26b78:	10bfffc4 	addi	r2,r2,-1
   26b7c:	15c01426 	beq	r2,r23,26bd0 <__call_exitprocs+0x154>
   26b80:	80000015 	stw	zero,0(r16)
   26b84:	183fde26 	beq	r3,zero,26b00 <__alt_data_end+0xfffee460>
   26b88:	95c8983a 	sll	r4,r18,r23
   26b8c:	a0806217 	ldw	r2,392(r20)
   26b90:	a5800117 	ldw	r22,4(r20)
   26b94:	2084703a 	and	r2,r4,r2
   26b98:	10000b26 	beq	r2,zero,26bc8 <__call_exitprocs+0x14c>
   26b9c:	a0806317 	ldw	r2,396(r20)
   26ba0:	2088703a 	and	r4,r4,r2
   26ba4:	20000c1e 	bne	r4,zero,26bd8 <__call_exitprocs+0x15c>
   26ba8:	89400017 	ldw	r5,0(r17)
   26bac:	d9000017 	ldw	r4,0(sp)
   26bb0:	183ee83a 	callr	r3
   26bb4:	a0800117 	ldw	r2,4(r20)
   26bb8:	15bfbf1e 	bne	r2,r22,26ab8 <__alt_data_end+0xfffee418>
   26bbc:	98800017 	ldw	r2,0(r19)
   26bc0:	153fcf26 	beq	r2,r20,26b00 <__alt_data_end+0xfffee460>
   26bc4:	003fbc06 	br	26ab8 <__alt_data_end+0xfffee418>
   26bc8:	183ee83a 	callr	r3
   26bcc:	003ff906 	br	26bb4 <__alt_data_end+0xfffee514>
   26bd0:	a5c00115 	stw	r23,4(r20)
   26bd4:	003feb06 	br	26b84 <__alt_data_end+0xfffee4e4>
   26bd8:	89000017 	ldw	r4,0(r17)
   26bdc:	183ee83a 	callr	r3
   26be0:	003ff406 	br	26bb4 <__alt_data_end+0xfffee514>
   26be4:	a0800017 	ldw	r2,0(r20)
   26be8:	a027883a 	mov	r19,r20
   26bec:	1029883a 	mov	r20,r2
   26bf0:	003fb606 	br	26acc <__alt_data_end+0xfffee42c>
   26bf4:	0005883a 	mov	r2,zero
   26bf8:	003ffb06 	br	26be8 <__alt_data_end+0xfffee548>

00026bfc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   26bfc:	defffd04 	addi	sp,sp,-12
   26c00:	df000215 	stw	fp,8(sp)
   26c04:	df000204 	addi	fp,sp,8
   26c08:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   26c0c:	0001883a 	nop
   26c10:	e0bfff17 	ldw	r2,-4(fp)
   26c14:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   26c18:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   26c1c:	10000226 	beq	r2,zero,26c28 <_exit+0x2c>
    ALT_SIM_FAIL();
   26c20:	002af070 	cmpltui	zero,zero,43969
   26c24:	00000106 	br	26c2c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   26c28:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   26c2c:	003fff06 	br	26c2c <__alt_data_end+0xfffee58c>
