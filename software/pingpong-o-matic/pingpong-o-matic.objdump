
pingpong-o-matic.elf:     file format elf32-littlenios2
pingpong-o-matic.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00006e68 memsz 0x00006e68 flags r-x
    LOAD off    0x00007e88 vaddr 0x00026e88 paddr 0x00028a1c align 2**12
         filesz 0x00001b94 memsz 0x00001b94 flags rw-
    LOAD off    0x0000a5b0 vaddr 0x0002a5b0 paddr 0x0002a5b0 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000697c  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002dc  00026bac  00026bac  00007bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b94  00026e88  00028a1c  00007e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0002a5b0  0002a5b0  0000a5b0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  0002a704  0002a704  00009a1c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009a1c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000aa8  00000000  00000000  00009a40  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001726d  00000000  00000000  0000a4e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000063c3  00000000  00000000  00021755  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006fc2  00000000  00000000  00027b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000017c4  00000000  00000000  0002eadc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002be1  00000000  00000000  000302a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  00032e81  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0003795c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000698  00000000  00000000  000379a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003a846  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0003a849  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003a853  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003a854  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003a855  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003a859  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003a85d  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003a861  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003a86a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003a873  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  0003a87c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000031  00000000  00000000  0003a888  2**0
                  CONTENTS, READONLY
 29 .jdi          00004381  00000000  00000000  0003a8b9  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00071276  00000000  00000000  0003ec3a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00026bac l    d  .rodata	00000000 .rodata
00026e88 l    d  .rwdata	00000000 .rwdata
0002a5b0 l    d  .bss	00000000 .bss
0002a704 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pingpong-o-matic_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00020728 l     F .text	00000008 __fp_unlock
0002073c l     F .text	0000019c __sinit.part.1
000208d8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00026e88 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
000233c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000234dc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00023508 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000235fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000236e4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000237d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000239ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00028a04 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00023c50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023d8c l     F .text	00000034 alt_dev_reg
0002785c l     O .rwdata	00001060 jtag_uart
000288bc l     O .rwdata	00000120 lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00024080 l     F .text	0000020c altera_avalon_jtag_uart_irq
0002428c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00028a08 l     O .rwdata	00000004 colstart
000248c4 l     F .text	000000b8 lcd_write_command
0002497c l     F .text	000000d8 lcd_write_data
00024a54 l     F .text	000000e8 lcd_clear_screen
00024b3c l     F .text	00000228 lcd_repaint_screen
00024d64 l     F .text	000000e8 lcd_scroll_up
00024e4c l     F .text	000002c4 lcd_handle_escape
00025630 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00025b14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00025f74 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000260d4 l     F .text	0000003c alt_get_errno
00026110 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00026d08 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0002a5d8 g     O .bss	00000004 alt_instruction_exception_handler
00023198 g     F .text	00000054 _isatty_r
000238e8 g     F .text	0000007c alt_main
000205bc g     F .text	000000c0 _puts_r
0002a604 g     O .bss	00000100 alt_irq
00022ec0 g     F .text	00000060 _lseek_r
00028a1c g       *ABS*	00000000 __flash_rwdata_start
0002a704 g       *ABS*	00000000 __alt_heap_start
00022474 g     F .text	0000005c __sseek
00020a88 g     F .text	00000010 __sinit
000208e0 g     F .text	00000078 __sfmoreglue
00023988 g     F .text	00000024 __malloc_unlock
00021b60 g     F .text	0000015c memmove
00020a70 g     F .text	00000018 _cleanup
000264fc g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
0002313c g     F .text	0000005c _fstat_r
0002a5bc g     O .bss	00000004 errno
000223f0 g     F .text	00000008 __seofread
0002a5c4 g     O .bss	00000004 alt_argv
000309dc g       *ABS*	00000000 _gp
00023c20 g     F .text	00000030 usleep
000276dc g     O .rwdata	00000180 alt_fd_list
00026520 g     F .text	00000090 alt_find_dev
00021a18 g     F .text	00000148 memcpy
00020730 g     F .text	0000000c _cleanup_r
00026058 g     F .text	0000007c alt_io_redirect
00026bac g       *ABS*	00000000 __DTOR_END__
0002067c g     F .text	00000014 puts
0002677c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00024484 g     F .text	0000021c altera_avalon_jtag_uart_read
000232e4 g     F .text	00000064 .hidden __udivsi3
00023638 g     F .text	000000ac isatty
0002a5b8 g     O .bss	00000004 __malloc_top_pad
00020ad8 g     F .text	000004c8 __sfvwrite_r
00022348 g     F .text	00000054 _sbrk_r
000230dc g     F .text	00000060 _read_r
000289fc g     O .rwdata	00000004 alt_max_fd
000226e0 g     F .text	000000f0 _fclose_r
00022a5c g     F .text	00000030 fflush
0002a5b4 g     O .bss	00000004 __malloc_max_sbrked_mem
0002380c g     F .text	000000dc lseek
000289dc g     O .rwdata	00000004 _global_impure_ptr
00021de4 g     F .text	00000564 _realloc_r
0002a704 g       *ABS*	00000000 __bss_end
00025e84 g     F .text	000000f0 alt_iic_isr_register
000263f4 g     F .text	00000108 alt_tick
00020aa8 g     F .text	00000018 __fp_lock_all
00025e38 g     F .text	0000004c alt_ic_irq_enabled
00026358 g     F .text	0000009c alt_alarm_stop
0002a5cc g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
000276b4 g     O .rwdata	00000028 alt_dev_null
00025af4 g     F .text	00000020 alt_dcache_flush_all
00028a1c g       *ABS*	00000000 __ram_rwdata_end
000289f4 g     O .rwdata	00000008 alt_dev_list
00023c8c g     F .text	00000100 write
00026e88 g       *ABS*	00000000 __ram_rodata_end
00023544 g     F .text	000000b8 fstat
00023348 g     F .text	00000058 .hidden __umodsi3
0002a704 g       *ABS*	00000000 end
00025110 g     F .text	00000520 altera_avalon_lcd_16207_write
00023fc0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00026bac g       *ABS*	00000000 __CTOR_LIST__
000386a0 g       *ABS*	00000000 __alt_stack_pointer
000246a0 g     F .text	00000224 altera_avalon_jtag_uart_write
00020a98 g     F .text	00000004 __sfp_lock_acquire
00021934 g     F .text	000000e4 memchr
00022bb0 g     F .text	00000310 _free_r
000269f8 g     F .text	00000180 __call_exitprocs
000289e4 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
0002a5d0 g     O .bss	00000004 _alt_tick_rate
0002a5d4 g     O .bss	00000004 _alt_nticks
000239e8 g     F .text	00000104 read
00023df8 g     F .text	00000064 alt_sys_init
000268e0 g     F .text	00000118 __register_exitproc
0002432c g     F .text	00000068 altera_avalon_jtag_uart_close
000233a0 g     F .text	00000028 .hidden __mulsi3
00026e88 g       *ABS*	00000000 __ram_rwdata_start
00026bac g       *ABS*	00000000 __ram_rodata_start
0002a5dc g     O .bss	00000028 __malloc_current_mallinfo
00023e5c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000266b8 g     F .text	000000c4 alt_get_fd
0002599c g     F .text	00000158 alt_busy_sleep
0002268c g     F .text	00000054 _close_r
00026864 g     F .text	0000007c memcmp
00023f1c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002a704 g       *ABS*	00000000 __alt_stack_base
00023f6c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022538 g     F .text	00000154 __swsetup_r
00020958 g     F .text	00000118 __sfp
000272ac g     O .rwdata	00000408 __malloc_av_
00020aa4 g     F .text	00000004 __sinit_lock_release
0002239c g     F .text	00000054 __sread
000265b0 g     F .text	00000108 alt_find_file
00025b50 g     F .text	000000a4 alt_dev_llist_insert
00023964 g     F .text	00000024 __malloc_lock
00023b70 g     F .text	000000b0 sbrk
00022a00 g     F .text	0000005c _fflush_r
0002a5b0 g       *ABS*	00000000 __bss_start
00021cbc g     F .text	00000128 memset
0002026c g     F .text	00000108 lcd_init
00020540 g     F .text	0000007c main
0002a5c8 g     O .bss	00000004 alt_envp
0002a5b0 g     O .bss	00000004 __malloc_max_total_mem
00023ebc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000256dc g     F .text	00000134 altera_avalon_lcd_16207_init
000224d0 g     F .text	00000008 __sclose
000386a0 g       *ABS*	00000000 __alt_heap_limit
000227d0 g     F .text	00000014 fclose
00021128 g     F .text	0000080c _malloc_r
00028a00 g     O .rwdata	00000004 alt_errno
00020fa0 g     F .text	000000c4 _fwalk
000231ec g     F .text	00000084 .hidden __divsi3
00022a8c g     F .text	00000124 _malloc_trim_r
00026bac g       *ABS*	00000000 __CTOR_END__
00026bac g       *ABS*	00000000 __flash_rodata_start
00020374 g     F .text	000001cc test_lcd
00026bac g       *ABS*	00000000 __DTOR_LIST__
00023dc0 g     F .text	00000038 alt_irq_init
00023aec g     F .text	00000084 alt_release_fd
00026818 g     F .text	00000014 atexit
000224d8 g     F .text	00000060 _write_r
000289e0 g     O .rwdata	00000004 _impure_ptr
0002a5c0 g     O .bss	00000004 alt_argc
000227e4 g     F .text	0000021c __sflush_r
00025c54 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00020ac0 g     F .text	00000018 __fp_unlock_all
00025810 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
000289ec g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00025cd4 g     F .text	00000050 alt_ic_isr_register
00028a1c g       *ABS*	00000000 _edata
0002a704 g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
00024394 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00025dac g     F .text	0000008c alt_ic_irq_disable
000223f8 g     F .text	0000007c __swrite
000289e8 g     O .rwdata	00000004 __malloc_trim_threshold
0002682c g     F .text	00000038 exit
00021064 g     F .text	000000c4 _fwalk_reent
00023270 g     F .text	00000074 .hidden __modsi3
00028a18 g     O .rwdata	00000004 __ctype_ptr__
000386a0 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020a9c g     F .text	00000004 __sfp_lock_release
00026c07 g     O .rodata	00000101 _ctype_
00026b78 g     F .text	00000034 _exit
00025870 g     F .text	0000012c alt_alarm_start
00022f20 g     F .text	000001bc __smakebuf_r
00020690 g     F .text	00000098 strlen
000261fc g     F .text	0000015c open
00025cb4 g     F .text	00000020 alt_icache_flush_all
00028a0c g     O .rwdata	00000004 alt_priority_mask
00025d24 g     F .text	00000088 alt_ic_irq_enable
00028a10 g     O .rwdata	00000008 alt_alarm_list
00025bf4 g     F .text	00000060 _do_ctors
00023404 g     F .text	000000d8 close
0002374c g     F .text	00000084 alt_load
00020aa0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10a98104 	addi	r2,r2,-23036
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10a98104 	addi	r2,r2,-23036
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe7a8c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe7a80>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a6ff17 	ldw	r2,-25604(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a6ff17 	ldw	r2,-25604(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
   20238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2023c:	d6827714 	ori	gp,gp,2524
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20244:	10a96c14 	ori	r2,r2,42416

    movhi r3, %hi(__bss_end)
   20248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2024c:	18e9c114 	ori	r3,r3,42756

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_data_end+0xfffe7bb4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	002374c0 	call	2374c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	00238e80 	call	238e8 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_data_end+0xfffe7bc8>

0002026c <lcd_init>:
#define LCD_WR_COMMAND_REG 0
#define LCD_RD_STATUS_REG 1
#define LCD_WR_DATA_REG 2
#define LCD_RD_DATA_REG 3

void lcd_init(void) {
   2026c:	defffe04 	addi	sp,sp,-8
   20270:	dfc00115 	stw	ra,4(sp)
   20274:	df000015 	stw	fp,0(sp)
   20278:	d839883a 	mov	fp,sp
	usleep(15000); /* Wait for more than 15 ms before init */
   2027c:	010ea604 	movi	r4,15000
   20280:	0023c200 	call	23c20 <usleep>
	/* Set function code four times -- 8-bit, 2 line, 5x7 mode */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   20284:	00c00e04 	movi	r3,56
   20288:	00800134 	movhi	r2,4
   2028c:	10847404 	addi	r2,r2,4560
   20290:	10c00035 	stwio	r3,0(r2)
	usleep(4100); /* Wait for more than 4.1 ms */
   20294:	01040104 	movi	r4,4100
   20298:	0023c200 	call	23c20 <usleep>
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   2029c:	00c00e04 	movi	r3,56
   202a0:	00800134 	movhi	r2,4
   202a4:	10847404 	addi	r2,r2,4560
   202a8:	10c00035 	stwio	r3,0(r2)
	usleep(100); /* Wait for more than 100 us */
   202ac:	01001904 	movi	r4,100
   202b0:	0023c200 	call	23c20 <usleep>
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   202b4:	00c00e04 	movi	r3,56
   202b8:	00800134 	movhi	r2,4
   202bc:	10847404 	addi	r2,r2,4560
   202c0:	10c00035 	stwio	r3,0(r2)
	usleep(5000); /* Wait for more than 100 us */
   202c4:	0104e204 	movi	r4,5000
   202c8:	0023c200 	call	23c20 <usleep>
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   202cc:	00c00e04 	movi	r3,56
   202d0:	00800134 	movhi	r2,4
   202d4:	10847404 	addi	r2,r2,4560
   202d8:	10c00035 	stwio	r3,0(r2)
	usleep(100); /* Wait for more than 100 us */
   202dc:	01001904 	movi	r4,100
   202e0:	0023c200 	call	23c20 <usleep>

	/* Set Display to OFF*/
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x08);
   202e4:	00c00204 	movi	r3,8
   202e8:	00800134 	movhi	r2,4
   202ec:	10847404 	addi	r2,r2,4560
   202f0:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   202f4:	01001904 	movi	r4,100
   202f8:	0023c200 	call	23c20 <usleep>

	/* Set Display to ON */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x0C);
   202fc:	00c00304 	movi	r3,12
   20300:	00800134 	movhi	r2,4
   20304:	10847404 	addi	r2,r2,4560
   20308:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   2030c:	01001904 	movi	r4,100
   20310:	0023c200 	call	23c20 <usleep>

	/* Set Entry Mode -- Cursor increment, display doesn't shift */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x06);
   20314:	00c00184 	movi	r3,6
   20318:	00800134 	movhi	r2,4
   2031c:	10847404 	addi	r2,r2,4560
   20320:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   20324:	01001904 	movi	r4,100
   20328:	0023c200 	call	23c20 <usleep>

	/* Set the Cursor to the home position */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x02);
   2032c:	00c00084 	movi	r3,2
   20330:	00800134 	movhi	r2,4
   20334:	10847404 	addi	r2,r2,4560
   20338:	10c00035 	stwio	r3,0(r2)
	usleep(2000);
   2033c:	0101f404 	movi	r4,2000
   20340:	0023c200 	call	23c20 <usleep>

	/* Display clear */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x01);
   20344:	00c00044 	movi	r3,1
   20348:	00800134 	movhi	r2,4
   2034c:	10847404 	addi	r2,r2,4560
   20350:	10c00035 	stwio	r3,0(r2)
	usleep(2000);
   20354:	0101f404 	movi	r4,2000
   20358:	0023c200 	call	23c20 <usleep>
}
   2035c:	0001883a 	nop
   20360:	e037883a 	mov	sp,fp
   20364:	dfc00117 	ldw	ra,4(sp)
   20368:	df000017 	ldw	fp,0(sp)
   2036c:	dec00204 	addi	sp,sp,8
   20370:	f800283a 	ret

00020374 <test_lcd>:

alt_u32 test_lcd(void) {
   20374:	defff504 	addi	sp,sp,-44
   20378:	dfc00a15 	stw	ra,40(sp)
   2037c:	df000915 	stw	fp,36(sp)
   20380:	df000904 	addi	fp,sp,36
	int i;
	char message[17] = "Hello World...  ";
   20384:	009b1b34 	movhi	r2,27756
   20388:	10995204 	addi	r2,r2,25928
   2038c:	e0bff815 	stw	r2,-32(fp)
   20390:	009bd5f4 	movhi	r2,28503
   20394:	10881bc4 	addi	r2,r2,8303
   20398:	e0bff915 	stw	r2,-28(fp)
   2039c:	008b9934 	movhi	r2,11876
   203a0:	109b1c84 	addi	r2,r2,27762
   203a4:	e0bffa15 	stw	r2,-24(fp)
   203a8:	00880834 	movhi	r2,8224
   203ac:	108b8b84 	addi	r2,r2,11822
   203b0:	e0bffb15 	stw	r2,-20(fp)
   203b4:	e03ffc05 	stb	zero,-16(fp)
	char done[15] = "Done! ";
   203b8:	00801104 	movi	r2,68
   203bc:	e0bffc45 	stb	r2,-15(fp)
   203c0:	00801bc4 	movi	r2,111
   203c4:	e0bffc85 	stb	r2,-14(fp)
   203c8:	00801b84 	movi	r2,110
   203cc:	e0bffcc5 	stb	r2,-13(fp)
   203d0:	00801944 	movi	r2,101
   203d4:	e0bffd05 	stb	r2,-12(fp)
   203d8:	00800844 	movi	r2,33
   203dc:	e0bffd45 	stb	r2,-11(fp)
   203e0:	00800804 	movi	r2,32
   203e4:	e0bffd85 	stb	r2,-10(fp)
   203e8:	e03ffdc5 	stb	zero,-9(fp)
   203ec:	e03ffe05 	stb	zero,-8(fp)
   203f0:	e03ffe45 	stb	zero,-7(fp)
   203f4:	e03ffe85 	stb	zero,-6(fp)
   203f8:	e03ffec5 	stb	zero,-5(fp)
   203fc:	e03fff05 	stb	zero,-4(fp)
   20400:	e03fff45 	stb	zero,-3(fp)
   20404:	e03fff85 	stb	zero,-2(fp)
   20408:	e03fffc5 	stb	zero,-1(fp)

	/* Write a simple message on the first line. */
	for (i = 0; i < 17; i++) {
   2040c:	e03ff715 	stw	zero,-36(fp)
   20410:	00000f06 	br	20450 <test_lcd+0xdc>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, message[i]);
   20414:	e0fff804 	addi	r3,fp,-32
   20418:	e0bff717 	ldw	r2,-36(fp)
   2041c:	1885883a 	add	r2,r3,r2
   20420:	10800003 	ldbu	r2,0(r2)
   20424:	10c03fcc 	andi	r3,r2,255
   20428:	18c0201c 	xori	r3,r3,128
   2042c:	18ffe004 	addi	r3,r3,-128
   20430:	00800134 	movhi	r2,4
   20434:	10847604 	addi	r2,r2,4568
   20438:	10c00035 	stwio	r3,0(r2)
		usleep(100);
   2043c:	01001904 	movi	r4,100
   20440:	0023c200 	call	23c20 <usleep>
	int i;
	char message[17] = "Hello World...  ";
	char done[15] = "Done! ";

	/* Write a simple message on the first line. */
	for (i = 0; i < 17; i++) {
   20444:	e0bff717 	ldw	r2,-36(fp)
   20448:	10800044 	addi	r2,r2,1
   2044c:	e0bff715 	stw	r2,-36(fp)
   20450:	e0bff717 	ldw	r2,-36(fp)
   20454:	10800450 	cmplti	r2,r2,17
   20458:	103fee1e 	bne	r2,zero,20414 <__alt_data_end+0xfffe7d74>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, message[i]);
		usleep(100);
	}
	/* Count along the bottom row */
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0xC0);
   2045c:	00c03004 	movi	r3,192
   20460:	00800134 	movhi	r2,4
   20464:	10847404 	addi	r2,r2,4560
   20468:	10c00035 	stwio	r3,0(r2)
	usleep(1000);
   2046c:	0100fa04 	movi	r4,1000
   20470:	0023c200 	call	23c20 <usleep>

	/* Display Count */
	for (i = 0; i < 10; i++) {
   20474:	e03ff715 	stw	zero,-36(fp)
   20478:	00000e06 	br	204b4 <test_lcd+0x140>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, (char )(i + 0x30));
   2047c:	e0bff717 	ldw	r2,-36(fp)
   20480:	10800c04 	addi	r2,r2,48
   20484:	10c03fcc 	andi	r3,r2,255
   20488:	18c0201c 	xori	r3,r3,128
   2048c:	18ffe004 	addi	r3,r3,-128
   20490:	00800134 	movhi	r2,4
   20494:	10847604 	addi	r2,r2,4568
   20498:	10c00035 	stwio	r3,0(r2)
		usleep(100000); /* Wait 0.5 sec */
   2049c:	010000b4 	movhi	r4,2
   204a0:	2121a804 	addi	r4,r4,-31072
   204a4:	0023c200 	call	23c20 <usleep>
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0xC0);
	usleep(1000);

	/* Display Count */
	for (i = 0; i < 10; i++) {
   204a8:	e0bff717 	ldw	r2,-36(fp)
   204ac:	10800044 	addi	r2,r2,1
   204b0:	e0bff715 	stw	r2,-36(fp)
   204b4:	e0bff717 	ldw	r2,-36(fp)
   204b8:	10800290 	cmplti	r2,r2,10
   204bc:	103fef1e 	bne	r2,zero,2047c <__alt_data_end+0xfffe7ddc>
		usleep(100000); /* Wait 0.5 sec */
	}

	/* Write "Done!" message on first line. */
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x80);
   204c0:	00c02004 	movi	r3,128
   204c4:	00800134 	movhi	r2,4
   204c8:	10847404 	addi	r2,r2,4560
   204cc:	10c00035 	stwio	r3,0(r2)
	usleep(1000);
   204d0:	0100fa04 	movi	r4,1000
   204d4:	0023c200 	call	23c20 <usleep>

	/* Write data */
	for (i = 0; i < 14; i++) {
   204d8:	e03ff715 	stw	zero,-36(fp)
   204dc:	00000f06 	br	2051c <test_lcd+0x1a8>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, done[i]);
   204e0:	e0fffc44 	addi	r3,fp,-15
   204e4:	e0bff717 	ldw	r2,-36(fp)
   204e8:	1885883a 	add	r2,r3,r2
   204ec:	10800003 	ldbu	r2,0(r2)
   204f0:	10c03fcc 	andi	r3,r2,255
   204f4:	18c0201c 	xori	r3,r3,128
   204f8:	18ffe004 	addi	r3,r3,-128
   204fc:	00800134 	movhi	r2,4
   20500:	10847604 	addi	r2,r2,4568
   20504:	10c00035 	stwio	r3,0(r2)
		usleep(100);
   20508:	01001904 	movi	r4,100
   2050c:	0023c200 	call	23c20 <usleep>
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x80);
	usleep(1000);

	/* Write data */
	for (i = 0; i < 14; i++) {
   20510:	e0bff717 	ldw	r2,-36(fp)
   20514:	10800044 	addi	r2,r2,1
   20518:	e0bff715 	stw	r2,-36(fp)
   2051c:	e0bff717 	ldw	r2,-36(fp)
   20520:	10800390 	cmplti	r2,r2,14
   20524:	103fee1e 	bne	r2,zero,204e0 <__alt_data_end+0xfffe7e40>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, done[i]);
		usleep(100);
	}
	return (0);
   20528:	0005883a 	mov	r2,zero
}
   2052c:	e037883a 	mov	sp,fp
   20530:	dfc00117 	ldw	ra,4(sp)
   20534:	df000017 	ldw	fp,0(sp)
   20538:	dec00204 	addi	sp,sp,8
   2053c:	f800283a 	ret

00020540 <main>:
	IOWR_ALTERA_AVALON_PIO_DATA(FRAMEBUFFER_DATA_BASE, c);
	IOWR_ALTERA_AVALON_PIO_DATA(FRAMEBUFFER_CLK_BASE, 1);
}
*/

int main() {
   20540:	defffd04 	addi	sp,sp,-12
   20544:	dfc00215 	stw	ra,8(sp)
   20548:	df000115 	stw	fp,4(sp)
   2054c:	df000104 	addi	fp,sp,4
	lcd_init();
   20550:	002026c0 	call	2026c <lcd_init>
	test_lcd();
   20554:	00203740 	call	20374 <test_lcd>

	printf("Starting camera capture...\n");
   20558:	010000b4 	movhi	r4,2
   2055c:	211aeb04 	addi	r4,r4,27564
   20560:	002067c0 	call	2067c <puts>
	}
	*/

//	int delay;
	while (1) {
		for(int i = 0; i < 100; i++)
   20564:	e03fff15 	stw	zero,-4(fp)
   20568:	00001006 	br	205ac <main+0x6c>
		{
			IOWR_ALTERA_AVALON_PIO_DATA(SCORE_A_BASE, i);
   2056c:	00800134 	movhi	r2,4
   20570:	10847c04 	addi	r2,r2,4592
   20574:	e0ffff17 	ldw	r3,-4(fp)
   20578:	10c00035 	stwio	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(SCORE_B_BASE, 99 - i);
   2057c:	00c018c4 	movi	r3,99
   20580:	e0bfff17 	ldw	r2,-4(fp)
   20584:	1887c83a 	sub	r3,r3,r2
   20588:	00800134 	movhi	r2,4
   2058c:	10848004 	addi	r2,r2,4608
   20590:	10c00035 	stwio	r3,0(r2)
			usleep(100000);
   20594:	010000b4 	movhi	r4,2
   20598:	2121a804 	addi	r4,r4,-31072
   2059c:	0023c200 	call	23c20 <usleep>
	}
	*/

//	int delay;
	while (1) {
		for(int i = 0; i < 100; i++)
   205a0:	e0bfff17 	ldw	r2,-4(fp)
   205a4:	10800044 	addi	r2,r2,1
   205a8:	e0bfff15 	stw	r2,-4(fp)
   205ac:	e0bfff17 	ldw	r2,-4(fp)
   205b0:	10801910 	cmplti	r2,r2,100
   205b4:	103fed1e 	bne	r2,zero,2056c <__alt_data_end+0xfffe7ecc>
				setcolor(x, y, 0);
			}
		}
		*/
		//usleep(100000);
	}
   205b8:	003fea06 	br	20564 <__alt_data_end+0xfffe7ec4>

000205bc <_puts_r>:
   205bc:	defff604 	addi	sp,sp,-40
   205c0:	dc000715 	stw	r16,28(sp)
   205c4:	2021883a 	mov	r16,r4
   205c8:	2809883a 	mov	r4,r5
   205cc:	dc400815 	stw	r17,32(sp)
   205d0:	dfc00915 	stw	ra,36(sp)
   205d4:	2823883a 	mov	r17,r5
   205d8:	00206900 	call	20690 <strlen>
   205dc:	10c00044 	addi	r3,r2,1
   205e0:	d8800115 	stw	r2,4(sp)
   205e4:	008000b4 	movhi	r2,2
   205e8:	109af204 	addi	r2,r2,27592
   205ec:	d8800215 	stw	r2,8(sp)
   205f0:	00800044 	movi	r2,1
   205f4:	d8800315 	stw	r2,12(sp)
   205f8:	00800084 	movi	r2,2
   205fc:	dc400015 	stw	r17,0(sp)
   20600:	d8c00615 	stw	r3,24(sp)
   20604:	dec00415 	stw	sp,16(sp)
   20608:	d8800515 	stw	r2,20(sp)
   2060c:	80000226 	beq	r16,zero,20618 <_puts_r+0x5c>
   20610:	80800e17 	ldw	r2,56(r16)
   20614:	10001426 	beq	r2,zero,20668 <_puts_r+0xac>
   20618:	81400217 	ldw	r5,8(r16)
   2061c:	2880030b 	ldhu	r2,12(r5)
   20620:	10c8000c 	andi	r3,r2,8192
   20624:	1800061e 	bne	r3,zero,20640 <_puts_r+0x84>
   20628:	29001917 	ldw	r4,100(r5)
   2062c:	00f7ffc4 	movi	r3,-8193
   20630:	10880014 	ori	r2,r2,8192
   20634:	20c6703a 	and	r3,r4,r3
   20638:	2880030d 	sth	r2,12(r5)
   2063c:	28c01915 	stw	r3,100(r5)
   20640:	d9800404 	addi	r6,sp,16
   20644:	8009883a 	mov	r4,r16
   20648:	0020ad80 	call	20ad8 <__sfvwrite_r>
   2064c:	1000091e 	bne	r2,zero,20674 <_puts_r+0xb8>
   20650:	00800284 	movi	r2,10
   20654:	dfc00917 	ldw	ra,36(sp)
   20658:	dc400817 	ldw	r17,32(sp)
   2065c:	dc000717 	ldw	r16,28(sp)
   20660:	dec00a04 	addi	sp,sp,40
   20664:	f800283a 	ret
   20668:	8009883a 	mov	r4,r16
   2066c:	0020a880 	call	20a88 <__sinit>
   20670:	003fe906 	br	20618 <__alt_data_end+0xfffe7f78>
   20674:	00bfffc4 	movi	r2,-1
   20678:	003ff606 	br	20654 <__alt_data_end+0xfffe7fb4>

0002067c <puts>:
   2067c:	008000f4 	movhi	r2,3
   20680:	10a27804 	addi	r2,r2,-30240
   20684:	200b883a 	mov	r5,r4
   20688:	11000017 	ldw	r4,0(r2)
   2068c:	00205bc1 	jmpi	205bc <_puts_r>

00020690 <strlen>:
   20690:	208000cc 	andi	r2,r4,3
   20694:	10002026 	beq	r2,zero,20718 <strlen+0x88>
   20698:	20800007 	ldb	r2,0(r4)
   2069c:	10002026 	beq	r2,zero,20720 <strlen+0x90>
   206a0:	2005883a 	mov	r2,r4
   206a4:	00000206 	br	206b0 <strlen+0x20>
   206a8:	10c00007 	ldb	r3,0(r2)
   206ac:	18001826 	beq	r3,zero,20710 <strlen+0x80>
   206b0:	10800044 	addi	r2,r2,1
   206b4:	10c000cc 	andi	r3,r2,3
   206b8:	183ffb1e 	bne	r3,zero,206a8 <__alt_data_end+0xfffe8008>
   206bc:	10c00017 	ldw	r3,0(r2)
   206c0:	01ffbff4 	movhi	r7,65279
   206c4:	39ffbfc4 	addi	r7,r7,-257
   206c8:	00ca303a 	nor	r5,zero,r3
   206cc:	01a02074 	movhi	r6,32897
   206d0:	19c7883a 	add	r3,r3,r7
   206d4:	31a02004 	addi	r6,r6,-32640
   206d8:	1946703a 	and	r3,r3,r5
   206dc:	1986703a 	and	r3,r3,r6
   206e0:	1800091e 	bne	r3,zero,20708 <strlen+0x78>
   206e4:	10800104 	addi	r2,r2,4
   206e8:	10c00017 	ldw	r3,0(r2)
   206ec:	19cb883a 	add	r5,r3,r7
   206f0:	00c6303a 	nor	r3,zero,r3
   206f4:	28c6703a 	and	r3,r5,r3
   206f8:	1986703a 	and	r3,r3,r6
   206fc:	183ff926 	beq	r3,zero,206e4 <__alt_data_end+0xfffe8044>
   20700:	00000106 	br	20708 <strlen+0x78>
   20704:	10800044 	addi	r2,r2,1
   20708:	10c00007 	ldb	r3,0(r2)
   2070c:	183ffd1e 	bne	r3,zero,20704 <__alt_data_end+0xfffe8064>
   20710:	1105c83a 	sub	r2,r2,r4
   20714:	f800283a 	ret
   20718:	2005883a 	mov	r2,r4
   2071c:	003fe706 	br	206bc <__alt_data_end+0xfffe801c>
   20720:	0005883a 	mov	r2,zero
   20724:	f800283a 	ret

00020728 <__fp_unlock>:
   20728:	0005883a 	mov	r2,zero
   2072c:	f800283a 	ret

00020730 <_cleanup_r>:
   20730:	014000b4 	movhi	r5,2
   20734:	2949b804 	addi	r5,r5,9952
   20738:	00210641 	jmpi	21064 <_fwalk_reent>

0002073c <__sinit.part.1>:
   2073c:	defff704 	addi	sp,sp,-36
   20740:	00c000b4 	movhi	r3,2
   20744:	dfc00815 	stw	ra,32(sp)
   20748:	ddc00715 	stw	r23,28(sp)
   2074c:	dd800615 	stw	r22,24(sp)
   20750:	dd400515 	stw	r21,20(sp)
   20754:	dd000415 	stw	r20,16(sp)
   20758:	dcc00315 	stw	r19,12(sp)
   2075c:	dc800215 	stw	r18,8(sp)
   20760:	dc400115 	stw	r17,4(sp)
   20764:	dc000015 	stw	r16,0(sp)
   20768:	18c1cc04 	addi	r3,r3,1840
   2076c:	24000117 	ldw	r16,4(r4)
   20770:	20c00f15 	stw	r3,60(r4)
   20774:	2080bb04 	addi	r2,r4,748
   20778:	00c000c4 	movi	r3,3
   2077c:	20c0b915 	stw	r3,740(r4)
   20780:	2080ba15 	stw	r2,744(r4)
   20784:	2000b815 	stw	zero,736(r4)
   20788:	05c00204 	movi	r23,8
   2078c:	00800104 	movi	r2,4
   20790:	2025883a 	mov	r18,r4
   20794:	b80d883a 	mov	r6,r23
   20798:	81001704 	addi	r4,r16,92
   2079c:	000b883a 	mov	r5,zero
   207a0:	80000015 	stw	zero,0(r16)
   207a4:	80000115 	stw	zero,4(r16)
   207a8:	80000215 	stw	zero,8(r16)
   207ac:	8080030d 	sth	r2,12(r16)
   207b0:	80001915 	stw	zero,100(r16)
   207b4:	8000038d 	sth	zero,14(r16)
   207b8:	80000415 	stw	zero,16(r16)
   207bc:	80000515 	stw	zero,20(r16)
   207c0:	80000615 	stw	zero,24(r16)
   207c4:	0021cbc0 	call	21cbc <memset>
   207c8:	058000b4 	movhi	r22,2
   207cc:	94400217 	ldw	r17,8(r18)
   207d0:	054000b4 	movhi	r21,2
   207d4:	050000b4 	movhi	r20,2
   207d8:	04c000b4 	movhi	r19,2
   207dc:	b588e704 	addi	r22,r22,9116
   207e0:	ad48fe04 	addi	r21,r21,9208
   207e4:	a5091d04 	addi	r20,r20,9332
   207e8:	9cc93404 	addi	r19,r19,9424
   207ec:	85800815 	stw	r22,32(r16)
   207f0:	85400915 	stw	r21,36(r16)
   207f4:	85000a15 	stw	r20,40(r16)
   207f8:	84c00b15 	stw	r19,44(r16)
   207fc:	84000715 	stw	r16,28(r16)
   20800:	00800284 	movi	r2,10
   20804:	8880030d 	sth	r2,12(r17)
   20808:	00800044 	movi	r2,1
   2080c:	b80d883a 	mov	r6,r23
   20810:	89001704 	addi	r4,r17,92
   20814:	000b883a 	mov	r5,zero
   20818:	88000015 	stw	zero,0(r17)
   2081c:	88000115 	stw	zero,4(r17)
   20820:	88000215 	stw	zero,8(r17)
   20824:	88001915 	stw	zero,100(r17)
   20828:	8880038d 	sth	r2,14(r17)
   2082c:	88000415 	stw	zero,16(r17)
   20830:	88000515 	stw	zero,20(r17)
   20834:	88000615 	stw	zero,24(r17)
   20838:	0021cbc0 	call	21cbc <memset>
   2083c:	94000317 	ldw	r16,12(r18)
   20840:	00800484 	movi	r2,18
   20844:	8c400715 	stw	r17,28(r17)
   20848:	8d800815 	stw	r22,32(r17)
   2084c:	8d400915 	stw	r21,36(r17)
   20850:	8d000a15 	stw	r20,40(r17)
   20854:	8cc00b15 	stw	r19,44(r17)
   20858:	8080030d 	sth	r2,12(r16)
   2085c:	00800084 	movi	r2,2
   20860:	80000015 	stw	zero,0(r16)
   20864:	80000115 	stw	zero,4(r16)
   20868:	80000215 	stw	zero,8(r16)
   2086c:	80001915 	stw	zero,100(r16)
   20870:	8080038d 	sth	r2,14(r16)
   20874:	80000415 	stw	zero,16(r16)
   20878:	80000515 	stw	zero,20(r16)
   2087c:	80000615 	stw	zero,24(r16)
   20880:	b80d883a 	mov	r6,r23
   20884:	000b883a 	mov	r5,zero
   20888:	81001704 	addi	r4,r16,92
   2088c:	0021cbc0 	call	21cbc <memset>
   20890:	00800044 	movi	r2,1
   20894:	84000715 	stw	r16,28(r16)
   20898:	85800815 	stw	r22,32(r16)
   2089c:	85400915 	stw	r21,36(r16)
   208a0:	85000a15 	stw	r20,40(r16)
   208a4:	84c00b15 	stw	r19,44(r16)
   208a8:	90800e15 	stw	r2,56(r18)
   208ac:	dfc00817 	ldw	ra,32(sp)
   208b0:	ddc00717 	ldw	r23,28(sp)
   208b4:	dd800617 	ldw	r22,24(sp)
   208b8:	dd400517 	ldw	r21,20(sp)
   208bc:	dd000417 	ldw	r20,16(sp)
   208c0:	dcc00317 	ldw	r19,12(sp)
   208c4:	dc800217 	ldw	r18,8(sp)
   208c8:	dc400117 	ldw	r17,4(sp)
   208cc:	dc000017 	ldw	r16,0(sp)
   208d0:	dec00904 	addi	sp,sp,36
   208d4:	f800283a 	ret

000208d8 <__fp_lock>:
   208d8:	0005883a 	mov	r2,zero
   208dc:	f800283a 	ret

000208e0 <__sfmoreglue>:
   208e0:	defffc04 	addi	sp,sp,-16
   208e4:	dc800215 	stw	r18,8(sp)
   208e8:	2825883a 	mov	r18,r5
   208ec:	dc000015 	stw	r16,0(sp)
   208f0:	01401a04 	movi	r5,104
   208f4:	2021883a 	mov	r16,r4
   208f8:	913fffc4 	addi	r4,r18,-1
   208fc:	dfc00315 	stw	ra,12(sp)
   20900:	dc400115 	stw	r17,4(sp)
   20904:	00233a00 	call	233a0 <__mulsi3>
   20908:	8009883a 	mov	r4,r16
   2090c:	11401d04 	addi	r5,r2,116
   20910:	1023883a 	mov	r17,r2
   20914:	00211280 	call	21128 <_malloc_r>
   20918:	1021883a 	mov	r16,r2
   2091c:	10000726 	beq	r2,zero,2093c <__sfmoreglue+0x5c>
   20920:	11000304 	addi	r4,r2,12
   20924:	10000015 	stw	zero,0(r2)
   20928:	14800115 	stw	r18,4(r2)
   2092c:	11000215 	stw	r4,8(r2)
   20930:	89801a04 	addi	r6,r17,104
   20934:	000b883a 	mov	r5,zero
   20938:	0021cbc0 	call	21cbc <memset>
   2093c:	8005883a 	mov	r2,r16
   20940:	dfc00317 	ldw	ra,12(sp)
   20944:	dc800217 	ldw	r18,8(sp)
   20948:	dc400117 	ldw	r17,4(sp)
   2094c:	dc000017 	ldw	r16,0(sp)
   20950:	dec00404 	addi	sp,sp,16
   20954:	f800283a 	ret

00020958 <__sfp>:
   20958:	defffb04 	addi	sp,sp,-20
   2095c:	dc000015 	stw	r16,0(sp)
   20960:	040000f4 	movhi	r16,3
   20964:	84227704 	addi	r16,r16,-30244
   20968:	dcc00315 	stw	r19,12(sp)
   2096c:	2027883a 	mov	r19,r4
   20970:	81000017 	ldw	r4,0(r16)
   20974:	dfc00415 	stw	ra,16(sp)
   20978:	dc800215 	stw	r18,8(sp)
   2097c:	20800e17 	ldw	r2,56(r4)
   20980:	dc400115 	stw	r17,4(sp)
   20984:	1000021e 	bne	r2,zero,20990 <__sfp+0x38>
   20988:	002073c0 	call	2073c <__sinit.part.1>
   2098c:	81000017 	ldw	r4,0(r16)
   20990:	2480b804 	addi	r18,r4,736
   20994:	047fffc4 	movi	r17,-1
   20998:	91000117 	ldw	r4,4(r18)
   2099c:	94000217 	ldw	r16,8(r18)
   209a0:	213fffc4 	addi	r4,r4,-1
   209a4:	20000a16 	blt	r4,zero,209d0 <__sfp+0x78>
   209a8:	8080030f 	ldh	r2,12(r16)
   209ac:	10000c26 	beq	r2,zero,209e0 <__sfp+0x88>
   209b0:	80c01d04 	addi	r3,r16,116
   209b4:	00000206 	br	209c0 <__sfp+0x68>
   209b8:	18bfe60f 	ldh	r2,-104(r3)
   209bc:	10000826 	beq	r2,zero,209e0 <__sfp+0x88>
   209c0:	213fffc4 	addi	r4,r4,-1
   209c4:	1c3ffd04 	addi	r16,r3,-12
   209c8:	18c01a04 	addi	r3,r3,104
   209cc:	247ffa1e 	bne	r4,r17,209b8 <__alt_data_end+0xfffe8318>
   209d0:	90800017 	ldw	r2,0(r18)
   209d4:	10001d26 	beq	r2,zero,20a4c <__sfp+0xf4>
   209d8:	1025883a 	mov	r18,r2
   209dc:	003fee06 	br	20998 <__alt_data_end+0xfffe82f8>
   209e0:	00bfffc4 	movi	r2,-1
   209e4:	8080038d 	sth	r2,14(r16)
   209e8:	00800044 	movi	r2,1
   209ec:	8080030d 	sth	r2,12(r16)
   209f0:	80001915 	stw	zero,100(r16)
   209f4:	80000015 	stw	zero,0(r16)
   209f8:	80000215 	stw	zero,8(r16)
   209fc:	80000115 	stw	zero,4(r16)
   20a00:	80000415 	stw	zero,16(r16)
   20a04:	80000515 	stw	zero,20(r16)
   20a08:	80000615 	stw	zero,24(r16)
   20a0c:	01800204 	movi	r6,8
   20a10:	000b883a 	mov	r5,zero
   20a14:	81001704 	addi	r4,r16,92
   20a18:	0021cbc0 	call	21cbc <memset>
   20a1c:	8005883a 	mov	r2,r16
   20a20:	80000c15 	stw	zero,48(r16)
   20a24:	80000d15 	stw	zero,52(r16)
   20a28:	80001115 	stw	zero,68(r16)
   20a2c:	80001215 	stw	zero,72(r16)
   20a30:	dfc00417 	ldw	ra,16(sp)
   20a34:	dcc00317 	ldw	r19,12(sp)
   20a38:	dc800217 	ldw	r18,8(sp)
   20a3c:	dc400117 	ldw	r17,4(sp)
   20a40:	dc000017 	ldw	r16,0(sp)
   20a44:	dec00504 	addi	sp,sp,20
   20a48:	f800283a 	ret
   20a4c:	01400104 	movi	r5,4
   20a50:	9809883a 	mov	r4,r19
   20a54:	00208e00 	call	208e0 <__sfmoreglue>
   20a58:	90800015 	stw	r2,0(r18)
   20a5c:	103fde1e 	bne	r2,zero,209d8 <__alt_data_end+0xfffe8338>
   20a60:	00800304 	movi	r2,12
   20a64:	98800015 	stw	r2,0(r19)
   20a68:	0005883a 	mov	r2,zero
   20a6c:	003ff006 	br	20a30 <__alt_data_end+0xfffe8390>

00020a70 <_cleanup>:
   20a70:	008000f4 	movhi	r2,3
   20a74:	10a27704 	addi	r2,r2,-30244
   20a78:	11000017 	ldw	r4,0(r2)
   20a7c:	014000b4 	movhi	r5,2
   20a80:	2949b804 	addi	r5,r5,9952
   20a84:	00210641 	jmpi	21064 <_fwalk_reent>

00020a88 <__sinit>:
   20a88:	20800e17 	ldw	r2,56(r4)
   20a8c:	10000126 	beq	r2,zero,20a94 <__sinit+0xc>
   20a90:	f800283a 	ret
   20a94:	002073c1 	jmpi	2073c <__sinit.part.1>

00020a98 <__sfp_lock_acquire>:
   20a98:	f800283a 	ret

00020a9c <__sfp_lock_release>:
   20a9c:	f800283a 	ret

00020aa0 <__sinit_lock_acquire>:
   20aa0:	f800283a 	ret

00020aa4 <__sinit_lock_release>:
   20aa4:	f800283a 	ret

00020aa8 <__fp_lock_all>:
   20aa8:	008000f4 	movhi	r2,3
   20aac:	10a27804 	addi	r2,r2,-30240
   20ab0:	11000017 	ldw	r4,0(r2)
   20ab4:	014000b4 	movhi	r5,2
   20ab8:	29423604 	addi	r5,r5,2264
   20abc:	0020fa01 	jmpi	20fa0 <_fwalk>

00020ac0 <__fp_unlock_all>:
   20ac0:	008000f4 	movhi	r2,3
   20ac4:	10a27804 	addi	r2,r2,-30240
   20ac8:	11000017 	ldw	r4,0(r2)
   20acc:	014000b4 	movhi	r5,2
   20ad0:	2941ca04 	addi	r5,r5,1832
   20ad4:	0020fa01 	jmpi	20fa0 <_fwalk>

00020ad8 <__sfvwrite_r>:
   20ad8:	30800217 	ldw	r2,8(r6)
   20adc:	10006726 	beq	r2,zero,20c7c <__sfvwrite_r+0x1a4>
   20ae0:	28c0030b 	ldhu	r3,12(r5)
   20ae4:	defff404 	addi	sp,sp,-48
   20ae8:	dd400715 	stw	r21,28(sp)
   20aec:	dd000615 	stw	r20,24(sp)
   20af0:	dc000215 	stw	r16,8(sp)
   20af4:	dfc00b15 	stw	ra,44(sp)
   20af8:	df000a15 	stw	fp,40(sp)
   20afc:	ddc00915 	stw	r23,36(sp)
   20b00:	dd800815 	stw	r22,32(sp)
   20b04:	dcc00515 	stw	r19,20(sp)
   20b08:	dc800415 	stw	r18,16(sp)
   20b0c:	dc400315 	stw	r17,12(sp)
   20b10:	1880020c 	andi	r2,r3,8
   20b14:	2821883a 	mov	r16,r5
   20b18:	202b883a 	mov	r21,r4
   20b1c:	3029883a 	mov	r20,r6
   20b20:	10002726 	beq	r2,zero,20bc0 <__sfvwrite_r+0xe8>
   20b24:	28800417 	ldw	r2,16(r5)
   20b28:	10002526 	beq	r2,zero,20bc0 <__sfvwrite_r+0xe8>
   20b2c:	1880008c 	andi	r2,r3,2
   20b30:	a4400017 	ldw	r17,0(r20)
   20b34:	10002a26 	beq	r2,zero,20be0 <__sfvwrite_r+0x108>
   20b38:	05a00034 	movhi	r22,32768
   20b3c:	0027883a 	mov	r19,zero
   20b40:	0025883a 	mov	r18,zero
   20b44:	b5bf0004 	addi	r22,r22,-1024
   20b48:	980d883a 	mov	r6,r19
   20b4c:	a809883a 	mov	r4,r21
   20b50:	90004626 	beq	r18,zero,20c6c <__sfvwrite_r+0x194>
   20b54:	900f883a 	mov	r7,r18
   20b58:	b480022e 	bgeu	r22,r18,20b64 <__sfvwrite_r+0x8c>
   20b5c:	01e00034 	movhi	r7,32768
   20b60:	39ff0004 	addi	r7,r7,-1024
   20b64:	80800917 	ldw	r2,36(r16)
   20b68:	81400717 	ldw	r5,28(r16)
   20b6c:	103ee83a 	callr	r2
   20b70:	00805a0e 	bge	zero,r2,20cdc <__sfvwrite_r+0x204>
   20b74:	a0c00217 	ldw	r3,8(r20)
   20b78:	98a7883a 	add	r19,r19,r2
   20b7c:	90a5c83a 	sub	r18,r18,r2
   20b80:	1885c83a 	sub	r2,r3,r2
   20b84:	a0800215 	stw	r2,8(r20)
   20b88:	103fef1e 	bne	r2,zero,20b48 <__alt_data_end+0xfffe84a8>
   20b8c:	0005883a 	mov	r2,zero
   20b90:	dfc00b17 	ldw	ra,44(sp)
   20b94:	df000a17 	ldw	fp,40(sp)
   20b98:	ddc00917 	ldw	r23,36(sp)
   20b9c:	dd800817 	ldw	r22,32(sp)
   20ba0:	dd400717 	ldw	r21,28(sp)
   20ba4:	dd000617 	ldw	r20,24(sp)
   20ba8:	dcc00517 	ldw	r19,20(sp)
   20bac:	dc800417 	ldw	r18,16(sp)
   20bb0:	dc400317 	ldw	r17,12(sp)
   20bb4:	dc000217 	ldw	r16,8(sp)
   20bb8:	dec00c04 	addi	sp,sp,48
   20bbc:	f800283a 	ret
   20bc0:	800b883a 	mov	r5,r16
   20bc4:	a809883a 	mov	r4,r21
   20bc8:	00225380 	call	22538 <__swsetup_r>
   20bcc:	1000ee1e 	bne	r2,zero,20f88 <__sfvwrite_r+0x4b0>
   20bd0:	80c0030b 	ldhu	r3,12(r16)
   20bd4:	a4400017 	ldw	r17,0(r20)
   20bd8:	1880008c 	andi	r2,r3,2
   20bdc:	103fd61e 	bne	r2,zero,20b38 <__alt_data_end+0xfffe8498>
   20be0:	1880004c 	andi	r2,r3,1
   20be4:	1000421e 	bne	r2,zero,20cf0 <__sfvwrite_r+0x218>
   20be8:	0039883a 	mov	fp,zero
   20bec:	0025883a 	mov	r18,zero
   20bf0:	90001a26 	beq	r18,zero,20c5c <__sfvwrite_r+0x184>
   20bf4:	1880800c 	andi	r2,r3,512
   20bf8:	84c00217 	ldw	r19,8(r16)
   20bfc:	10002126 	beq	r2,zero,20c84 <__sfvwrite_r+0x1ac>
   20c00:	982f883a 	mov	r23,r19
   20c04:	94c09636 	bltu	r18,r19,20e60 <__sfvwrite_r+0x388>
   20c08:	1881200c 	andi	r2,r3,1152
   20c0c:	1000a11e 	bne	r2,zero,20e94 <__sfvwrite_r+0x3bc>
   20c10:	81000017 	ldw	r4,0(r16)
   20c14:	b80d883a 	mov	r6,r23
   20c18:	e00b883a 	mov	r5,fp
   20c1c:	0021b600 	call	21b60 <memmove>
   20c20:	80c00217 	ldw	r3,8(r16)
   20c24:	81000017 	ldw	r4,0(r16)
   20c28:	9005883a 	mov	r2,r18
   20c2c:	1ce7c83a 	sub	r19,r3,r19
   20c30:	25cf883a 	add	r7,r4,r23
   20c34:	84c00215 	stw	r19,8(r16)
   20c38:	81c00015 	stw	r7,0(r16)
   20c3c:	a0c00217 	ldw	r3,8(r20)
   20c40:	e0b9883a 	add	fp,fp,r2
   20c44:	90a5c83a 	sub	r18,r18,r2
   20c48:	18a7c83a 	sub	r19,r3,r2
   20c4c:	a4c00215 	stw	r19,8(r20)
   20c50:	983fce26 	beq	r19,zero,20b8c <__alt_data_end+0xfffe84ec>
   20c54:	80c0030b 	ldhu	r3,12(r16)
   20c58:	903fe61e 	bne	r18,zero,20bf4 <__alt_data_end+0xfffe8554>
   20c5c:	8f000017 	ldw	fp,0(r17)
   20c60:	8c800117 	ldw	r18,4(r17)
   20c64:	8c400204 	addi	r17,r17,8
   20c68:	003fe106 	br	20bf0 <__alt_data_end+0xfffe8550>
   20c6c:	8cc00017 	ldw	r19,0(r17)
   20c70:	8c800117 	ldw	r18,4(r17)
   20c74:	8c400204 	addi	r17,r17,8
   20c78:	003fb306 	br	20b48 <__alt_data_end+0xfffe84a8>
   20c7c:	0005883a 	mov	r2,zero
   20c80:	f800283a 	ret
   20c84:	81000017 	ldw	r4,0(r16)
   20c88:	80800417 	ldw	r2,16(r16)
   20c8c:	11005a36 	bltu	r2,r4,20df8 <__sfvwrite_r+0x320>
   20c90:	85c00517 	ldw	r23,20(r16)
   20c94:	95c05836 	bltu	r18,r23,20df8 <__sfvwrite_r+0x320>
   20c98:	00a00034 	movhi	r2,32768
   20c9c:	10bfffc4 	addi	r2,r2,-1
   20ca0:	9009883a 	mov	r4,r18
   20ca4:	1480012e 	bgeu	r2,r18,20cac <__sfvwrite_r+0x1d4>
   20ca8:	1009883a 	mov	r4,r2
   20cac:	b80b883a 	mov	r5,r23
   20cb0:	00231ec0 	call	231ec <__divsi3>
   20cb4:	b80b883a 	mov	r5,r23
   20cb8:	1009883a 	mov	r4,r2
   20cbc:	00233a00 	call	233a0 <__mulsi3>
   20cc0:	81400717 	ldw	r5,28(r16)
   20cc4:	80c00917 	ldw	r3,36(r16)
   20cc8:	100f883a 	mov	r7,r2
   20ccc:	e00d883a 	mov	r6,fp
   20cd0:	a809883a 	mov	r4,r21
   20cd4:	183ee83a 	callr	r3
   20cd8:	00bfd816 	blt	zero,r2,20c3c <__alt_data_end+0xfffe859c>
   20cdc:	8080030b 	ldhu	r2,12(r16)
   20ce0:	10801014 	ori	r2,r2,64
   20ce4:	8080030d 	sth	r2,12(r16)
   20ce8:	00bfffc4 	movi	r2,-1
   20cec:	003fa806 	br	20b90 <__alt_data_end+0xfffe84f0>
   20cf0:	0027883a 	mov	r19,zero
   20cf4:	0011883a 	mov	r8,zero
   20cf8:	0039883a 	mov	fp,zero
   20cfc:	0025883a 	mov	r18,zero
   20d00:	90001f26 	beq	r18,zero,20d80 <__sfvwrite_r+0x2a8>
   20d04:	40005a26 	beq	r8,zero,20e70 <__sfvwrite_r+0x398>
   20d08:	982d883a 	mov	r22,r19
   20d0c:	94c0012e 	bgeu	r18,r19,20d14 <__sfvwrite_r+0x23c>
   20d10:	902d883a 	mov	r22,r18
   20d14:	81000017 	ldw	r4,0(r16)
   20d18:	80800417 	ldw	r2,16(r16)
   20d1c:	b02f883a 	mov	r23,r22
   20d20:	81c00517 	ldw	r7,20(r16)
   20d24:	1100032e 	bgeu	r2,r4,20d34 <__sfvwrite_r+0x25c>
   20d28:	80c00217 	ldw	r3,8(r16)
   20d2c:	38c7883a 	add	r3,r7,r3
   20d30:	1d801816 	blt	r3,r22,20d94 <__sfvwrite_r+0x2bc>
   20d34:	b1c03e16 	blt	r22,r7,20e30 <__sfvwrite_r+0x358>
   20d38:	80800917 	ldw	r2,36(r16)
   20d3c:	81400717 	ldw	r5,28(r16)
   20d40:	e00d883a 	mov	r6,fp
   20d44:	da000115 	stw	r8,4(sp)
   20d48:	a809883a 	mov	r4,r21
   20d4c:	103ee83a 	callr	r2
   20d50:	102f883a 	mov	r23,r2
   20d54:	da000117 	ldw	r8,4(sp)
   20d58:	00bfe00e 	bge	zero,r2,20cdc <__alt_data_end+0xfffe863c>
   20d5c:	9de7c83a 	sub	r19,r19,r23
   20d60:	98001f26 	beq	r19,zero,20de0 <__sfvwrite_r+0x308>
   20d64:	a0800217 	ldw	r2,8(r20)
   20d68:	e5f9883a 	add	fp,fp,r23
   20d6c:	95e5c83a 	sub	r18,r18,r23
   20d70:	15efc83a 	sub	r23,r2,r23
   20d74:	a5c00215 	stw	r23,8(r20)
   20d78:	b83f8426 	beq	r23,zero,20b8c <__alt_data_end+0xfffe84ec>
   20d7c:	903fe11e 	bne	r18,zero,20d04 <__alt_data_end+0xfffe8664>
   20d80:	8f000017 	ldw	fp,0(r17)
   20d84:	8c800117 	ldw	r18,4(r17)
   20d88:	0011883a 	mov	r8,zero
   20d8c:	8c400204 	addi	r17,r17,8
   20d90:	003fdb06 	br	20d00 <__alt_data_end+0xfffe8660>
   20d94:	180d883a 	mov	r6,r3
   20d98:	e00b883a 	mov	r5,fp
   20d9c:	da000115 	stw	r8,4(sp)
   20da0:	d8c00015 	stw	r3,0(sp)
   20da4:	0021b600 	call	21b60 <memmove>
   20da8:	d8c00017 	ldw	r3,0(sp)
   20dac:	80800017 	ldw	r2,0(r16)
   20db0:	800b883a 	mov	r5,r16
   20db4:	a809883a 	mov	r4,r21
   20db8:	10c5883a 	add	r2,r2,r3
   20dbc:	80800015 	stw	r2,0(r16)
   20dc0:	d8c00015 	stw	r3,0(sp)
   20dc4:	0022a000 	call	22a00 <_fflush_r>
   20dc8:	d8c00017 	ldw	r3,0(sp)
   20dcc:	da000117 	ldw	r8,4(sp)
   20dd0:	103fc21e 	bne	r2,zero,20cdc <__alt_data_end+0xfffe863c>
   20dd4:	182f883a 	mov	r23,r3
   20dd8:	9de7c83a 	sub	r19,r19,r23
   20ddc:	983fe11e 	bne	r19,zero,20d64 <__alt_data_end+0xfffe86c4>
   20de0:	800b883a 	mov	r5,r16
   20de4:	a809883a 	mov	r4,r21
   20de8:	0022a000 	call	22a00 <_fflush_r>
   20dec:	103fbb1e 	bne	r2,zero,20cdc <__alt_data_end+0xfffe863c>
   20df0:	0011883a 	mov	r8,zero
   20df4:	003fdb06 	br	20d64 <__alt_data_end+0xfffe86c4>
   20df8:	94c0012e 	bgeu	r18,r19,20e00 <__sfvwrite_r+0x328>
   20dfc:	9027883a 	mov	r19,r18
   20e00:	980d883a 	mov	r6,r19
   20e04:	e00b883a 	mov	r5,fp
   20e08:	0021b600 	call	21b60 <memmove>
   20e0c:	80800217 	ldw	r2,8(r16)
   20e10:	80c00017 	ldw	r3,0(r16)
   20e14:	14c5c83a 	sub	r2,r2,r19
   20e18:	1cc7883a 	add	r3,r3,r19
   20e1c:	80800215 	stw	r2,8(r16)
   20e20:	80c00015 	stw	r3,0(r16)
   20e24:	10004326 	beq	r2,zero,20f34 <__sfvwrite_r+0x45c>
   20e28:	9805883a 	mov	r2,r19
   20e2c:	003f8306 	br	20c3c <__alt_data_end+0xfffe859c>
   20e30:	b00d883a 	mov	r6,r22
   20e34:	e00b883a 	mov	r5,fp
   20e38:	da000115 	stw	r8,4(sp)
   20e3c:	0021b600 	call	21b60 <memmove>
   20e40:	80800217 	ldw	r2,8(r16)
   20e44:	80c00017 	ldw	r3,0(r16)
   20e48:	da000117 	ldw	r8,4(sp)
   20e4c:	1585c83a 	sub	r2,r2,r22
   20e50:	1dad883a 	add	r22,r3,r22
   20e54:	80800215 	stw	r2,8(r16)
   20e58:	85800015 	stw	r22,0(r16)
   20e5c:	003fbf06 	br	20d5c <__alt_data_end+0xfffe86bc>
   20e60:	81000017 	ldw	r4,0(r16)
   20e64:	9027883a 	mov	r19,r18
   20e68:	902f883a 	mov	r23,r18
   20e6c:	003f6906 	br	20c14 <__alt_data_end+0xfffe8574>
   20e70:	900d883a 	mov	r6,r18
   20e74:	01400284 	movi	r5,10
   20e78:	e009883a 	mov	r4,fp
   20e7c:	00219340 	call	21934 <memchr>
   20e80:	10003e26 	beq	r2,zero,20f7c <__sfvwrite_r+0x4a4>
   20e84:	10800044 	addi	r2,r2,1
   20e88:	1727c83a 	sub	r19,r2,fp
   20e8c:	02000044 	movi	r8,1
   20e90:	003f9d06 	br	20d08 <__alt_data_end+0xfffe8668>
   20e94:	80800517 	ldw	r2,20(r16)
   20e98:	81400417 	ldw	r5,16(r16)
   20e9c:	81c00017 	ldw	r7,0(r16)
   20ea0:	10a7883a 	add	r19,r2,r2
   20ea4:	9885883a 	add	r2,r19,r2
   20ea8:	1026d7fa 	srli	r19,r2,31
   20eac:	396dc83a 	sub	r22,r7,r5
   20eb0:	b1000044 	addi	r4,r22,1
   20eb4:	9885883a 	add	r2,r19,r2
   20eb8:	1027d07a 	srai	r19,r2,1
   20ebc:	2485883a 	add	r2,r4,r18
   20ec0:	980d883a 	mov	r6,r19
   20ec4:	9880022e 	bgeu	r19,r2,20ed0 <__sfvwrite_r+0x3f8>
   20ec8:	1027883a 	mov	r19,r2
   20ecc:	100d883a 	mov	r6,r2
   20ed0:	18c1000c 	andi	r3,r3,1024
   20ed4:	18001c26 	beq	r3,zero,20f48 <__sfvwrite_r+0x470>
   20ed8:	300b883a 	mov	r5,r6
   20edc:	a809883a 	mov	r4,r21
   20ee0:	00211280 	call	21128 <_malloc_r>
   20ee4:	102f883a 	mov	r23,r2
   20ee8:	10002926 	beq	r2,zero,20f90 <__sfvwrite_r+0x4b8>
   20eec:	81400417 	ldw	r5,16(r16)
   20ef0:	b00d883a 	mov	r6,r22
   20ef4:	1009883a 	mov	r4,r2
   20ef8:	0021a180 	call	21a18 <memcpy>
   20efc:	8080030b 	ldhu	r2,12(r16)
   20f00:	00fedfc4 	movi	r3,-1153
   20f04:	10c4703a 	and	r2,r2,r3
   20f08:	10802014 	ori	r2,r2,128
   20f0c:	8080030d 	sth	r2,12(r16)
   20f10:	bd89883a 	add	r4,r23,r22
   20f14:	9d8fc83a 	sub	r7,r19,r22
   20f18:	85c00415 	stw	r23,16(r16)
   20f1c:	84c00515 	stw	r19,20(r16)
   20f20:	81000015 	stw	r4,0(r16)
   20f24:	9027883a 	mov	r19,r18
   20f28:	81c00215 	stw	r7,8(r16)
   20f2c:	902f883a 	mov	r23,r18
   20f30:	003f3806 	br	20c14 <__alt_data_end+0xfffe8574>
   20f34:	800b883a 	mov	r5,r16
   20f38:	a809883a 	mov	r4,r21
   20f3c:	0022a000 	call	22a00 <_fflush_r>
   20f40:	103fb926 	beq	r2,zero,20e28 <__alt_data_end+0xfffe8788>
   20f44:	003f6506 	br	20cdc <__alt_data_end+0xfffe863c>
   20f48:	a809883a 	mov	r4,r21
   20f4c:	0021de40 	call	21de4 <_realloc_r>
   20f50:	102f883a 	mov	r23,r2
   20f54:	103fee1e 	bne	r2,zero,20f10 <__alt_data_end+0xfffe8870>
   20f58:	81400417 	ldw	r5,16(r16)
   20f5c:	a809883a 	mov	r4,r21
   20f60:	0022bb00 	call	22bb0 <_free_r>
   20f64:	8080030b 	ldhu	r2,12(r16)
   20f68:	00ffdfc4 	movi	r3,-129
   20f6c:	1884703a 	and	r2,r3,r2
   20f70:	00c00304 	movi	r3,12
   20f74:	a8c00015 	stw	r3,0(r21)
   20f78:	003f5906 	br	20ce0 <__alt_data_end+0xfffe8640>
   20f7c:	94c00044 	addi	r19,r18,1
   20f80:	02000044 	movi	r8,1
   20f84:	003f6006 	br	20d08 <__alt_data_end+0xfffe8668>
   20f88:	00bfffc4 	movi	r2,-1
   20f8c:	003f0006 	br	20b90 <__alt_data_end+0xfffe84f0>
   20f90:	00800304 	movi	r2,12
   20f94:	a8800015 	stw	r2,0(r21)
   20f98:	8080030b 	ldhu	r2,12(r16)
   20f9c:	003f5006 	br	20ce0 <__alt_data_end+0xfffe8640>

00020fa0 <_fwalk>:
   20fa0:	defff704 	addi	sp,sp,-36
   20fa4:	dd000415 	stw	r20,16(sp)
   20fa8:	dfc00815 	stw	ra,32(sp)
   20fac:	ddc00715 	stw	r23,28(sp)
   20fb0:	dd800615 	stw	r22,24(sp)
   20fb4:	dd400515 	stw	r21,20(sp)
   20fb8:	dcc00315 	stw	r19,12(sp)
   20fbc:	dc800215 	stw	r18,8(sp)
   20fc0:	dc400115 	stw	r17,4(sp)
   20fc4:	dc000015 	stw	r16,0(sp)
   20fc8:	2500b804 	addi	r20,r4,736
   20fcc:	a0002326 	beq	r20,zero,2105c <_fwalk+0xbc>
   20fd0:	282b883a 	mov	r21,r5
   20fd4:	002f883a 	mov	r23,zero
   20fd8:	05800044 	movi	r22,1
   20fdc:	04ffffc4 	movi	r19,-1
   20fe0:	a4400117 	ldw	r17,4(r20)
   20fe4:	a4800217 	ldw	r18,8(r20)
   20fe8:	8c7fffc4 	addi	r17,r17,-1
   20fec:	88000d16 	blt	r17,zero,21024 <_fwalk+0x84>
   20ff0:	94000304 	addi	r16,r18,12
   20ff4:	94800384 	addi	r18,r18,14
   20ff8:	8080000b 	ldhu	r2,0(r16)
   20ffc:	8c7fffc4 	addi	r17,r17,-1
   21000:	813ffd04 	addi	r4,r16,-12
   21004:	b080042e 	bgeu	r22,r2,21018 <_fwalk+0x78>
   21008:	9080000f 	ldh	r2,0(r18)
   2100c:	14c00226 	beq	r2,r19,21018 <_fwalk+0x78>
   21010:	a83ee83a 	callr	r21
   21014:	b8aeb03a 	or	r23,r23,r2
   21018:	84001a04 	addi	r16,r16,104
   2101c:	94801a04 	addi	r18,r18,104
   21020:	8cfff51e 	bne	r17,r19,20ff8 <__alt_data_end+0xfffe8958>
   21024:	a5000017 	ldw	r20,0(r20)
   21028:	a03fed1e 	bne	r20,zero,20fe0 <__alt_data_end+0xfffe8940>
   2102c:	b805883a 	mov	r2,r23
   21030:	dfc00817 	ldw	ra,32(sp)
   21034:	ddc00717 	ldw	r23,28(sp)
   21038:	dd800617 	ldw	r22,24(sp)
   2103c:	dd400517 	ldw	r21,20(sp)
   21040:	dd000417 	ldw	r20,16(sp)
   21044:	dcc00317 	ldw	r19,12(sp)
   21048:	dc800217 	ldw	r18,8(sp)
   2104c:	dc400117 	ldw	r17,4(sp)
   21050:	dc000017 	ldw	r16,0(sp)
   21054:	dec00904 	addi	sp,sp,36
   21058:	f800283a 	ret
   2105c:	002f883a 	mov	r23,zero
   21060:	003ff206 	br	2102c <__alt_data_end+0xfffe898c>

00021064 <_fwalk_reent>:
   21064:	defff704 	addi	sp,sp,-36
   21068:	dd000415 	stw	r20,16(sp)
   2106c:	dfc00815 	stw	ra,32(sp)
   21070:	ddc00715 	stw	r23,28(sp)
   21074:	dd800615 	stw	r22,24(sp)
   21078:	dd400515 	stw	r21,20(sp)
   2107c:	dcc00315 	stw	r19,12(sp)
   21080:	dc800215 	stw	r18,8(sp)
   21084:	dc400115 	stw	r17,4(sp)
   21088:	dc000015 	stw	r16,0(sp)
   2108c:	2500b804 	addi	r20,r4,736
   21090:	a0002326 	beq	r20,zero,21120 <_fwalk_reent+0xbc>
   21094:	282b883a 	mov	r21,r5
   21098:	2027883a 	mov	r19,r4
   2109c:	002f883a 	mov	r23,zero
   210a0:	05800044 	movi	r22,1
   210a4:	04bfffc4 	movi	r18,-1
   210a8:	a4400117 	ldw	r17,4(r20)
   210ac:	a4000217 	ldw	r16,8(r20)
   210b0:	8c7fffc4 	addi	r17,r17,-1
   210b4:	88000c16 	blt	r17,zero,210e8 <_fwalk_reent+0x84>
   210b8:	84000304 	addi	r16,r16,12
   210bc:	8080000b 	ldhu	r2,0(r16)
   210c0:	8c7fffc4 	addi	r17,r17,-1
   210c4:	817ffd04 	addi	r5,r16,-12
   210c8:	b080052e 	bgeu	r22,r2,210e0 <_fwalk_reent+0x7c>
   210cc:	8080008f 	ldh	r2,2(r16)
   210d0:	9809883a 	mov	r4,r19
   210d4:	14800226 	beq	r2,r18,210e0 <_fwalk_reent+0x7c>
   210d8:	a83ee83a 	callr	r21
   210dc:	b8aeb03a 	or	r23,r23,r2
   210e0:	84001a04 	addi	r16,r16,104
   210e4:	8cbff51e 	bne	r17,r18,210bc <__alt_data_end+0xfffe8a1c>
   210e8:	a5000017 	ldw	r20,0(r20)
   210ec:	a03fee1e 	bne	r20,zero,210a8 <__alt_data_end+0xfffe8a08>
   210f0:	b805883a 	mov	r2,r23
   210f4:	dfc00817 	ldw	ra,32(sp)
   210f8:	ddc00717 	ldw	r23,28(sp)
   210fc:	dd800617 	ldw	r22,24(sp)
   21100:	dd400517 	ldw	r21,20(sp)
   21104:	dd000417 	ldw	r20,16(sp)
   21108:	dcc00317 	ldw	r19,12(sp)
   2110c:	dc800217 	ldw	r18,8(sp)
   21110:	dc400117 	ldw	r17,4(sp)
   21114:	dc000017 	ldw	r16,0(sp)
   21118:	dec00904 	addi	sp,sp,36
   2111c:	f800283a 	ret
   21120:	002f883a 	mov	r23,zero
   21124:	003ff206 	br	210f0 <__alt_data_end+0xfffe8a50>

00021128 <_malloc_r>:
   21128:	defff504 	addi	sp,sp,-44
   2112c:	dc800315 	stw	r18,12(sp)
   21130:	dfc00a15 	stw	ra,40(sp)
   21134:	df000915 	stw	fp,36(sp)
   21138:	ddc00815 	stw	r23,32(sp)
   2113c:	dd800715 	stw	r22,28(sp)
   21140:	dd400615 	stw	r21,24(sp)
   21144:	dd000515 	stw	r20,20(sp)
   21148:	dcc00415 	stw	r19,16(sp)
   2114c:	dc400215 	stw	r17,8(sp)
   21150:	dc000115 	stw	r16,4(sp)
   21154:	288002c4 	addi	r2,r5,11
   21158:	00c00584 	movi	r3,22
   2115c:	2025883a 	mov	r18,r4
   21160:	18807f2e 	bgeu	r3,r2,21360 <_malloc_r+0x238>
   21164:	047ffe04 	movi	r17,-8
   21168:	1462703a 	and	r17,r2,r17
   2116c:	8800a316 	blt	r17,zero,213fc <_malloc_r+0x2d4>
   21170:	8940a236 	bltu	r17,r5,213fc <_malloc_r+0x2d4>
   21174:	00239640 	call	23964 <__malloc_lock>
   21178:	00807dc4 	movi	r2,503
   2117c:	1441e92e 	bgeu	r2,r17,21924 <_malloc_r+0x7fc>
   21180:	8804d27a 	srli	r2,r17,9
   21184:	1000a126 	beq	r2,zero,2140c <_malloc_r+0x2e4>
   21188:	00c00104 	movi	r3,4
   2118c:	18811e36 	bltu	r3,r2,21608 <_malloc_r+0x4e0>
   21190:	8804d1ba 	srli	r2,r17,6
   21194:	12000e44 	addi	r8,r2,57
   21198:	11c00e04 	addi	r7,r2,56
   2119c:	4209883a 	add	r4,r8,r8
   211a0:	04c000b4 	movhi	r19,2
   211a4:	2109883a 	add	r4,r4,r4
   211a8:	9cdcab04 	addi	r19,r19,29356
   211ac:	2109883a 	add	r4,r4,r4
   211b0:	9909883a 	add	r4,r19,r4
   211b4:	24000117 	ldw	r16,4(r4)
   211b8:	213ffe04 	addi	r4,r4,-8
   211bc:	24009726 	beq	r4,r16,2141c <_malloc_r+0x2f4>
   211c0:	80800117 	ldw	r2,4(r16)
   211c4:	01bfff04 	movi	r6,-4
   211c8:	014003c4 	movi	r5,15
   211cc:	1184703a 	and	r2,r2,r6
   211d0:	1447c83a 	sub	r3,r2,r17
   211d4:	28c00716 	blt	r5,r3,211f4 <_malloc_r+0xcc>
   211d8:	1800920e 	bge	r3,zero,21424 <_malloc_r+0x2fc>
   211dc:	84000317 	ldw	r16,12(r16)
   211e0:	24008e26 	beq	r4,r16,2141c <_malloc_r+0x2f4>
   211e4:	80800117 	ldw	r2,4(r16)
   211e8:	1184703a 	and	r2,r2,r6
   211ec:	1447c83a 	sub	r3,r2,r17
   211f0:	28fff90e 	bge	r5,r3,211d8 <__alt_data_end+0xfffe8b38>
   211f4:	3809883a 	mov	r4,r7
   211f8:	018000b4 	movhi	r6,2
   211fc:	9c000417 	ldw	r16,16(r19)
   21200:	319cab04 	addi	r6,r6,29356
   21204:	32000204 	addi	r8,r6,8
   21208:	82013426 	beq	r16,r8,216dc <_malloc_r+0x5b4>
   2120c:	80c00117 	ldw	r3,4(r16)
   21210:	00bfff04 	movi	r2,-4
   21214:	188e703a 	and	r7,r3,r2
   21218:	3c45c83a 	sub	r2,r7,r17
   2121c:	00c003c4 	movi	r3,15
   21220:	18811f16 	blt	r3,r2,216a0 <_malloc_r+0x578>
   21224:	32000515 	stw	r8,20(r6)
   21228:	32000415 	stw	r8,16(r6)
   2122c:	10007f0e 	bge	r2,zero,2142c <_malloc_r+0x304>
   21230:	00807fc4 	movi	r2,511
   21234:	11c0fd36 	bltu	r2,r7,2162c <_malloc_r+0x504>
   21238:	3806d0fa 	srli	r3,r7,3
   2123c:	01c00044 	movi	r7,1
   21240:	30800117 	ldw	r2,4(r6)
   21244:	19400044 	addi	r5,r3,1
   21248:	294b883a 	add	r5,r5,r5
   2124c:	1807d0ba 	srai	r3,r3,2
   21250:	294b883a 	add	r5,r5,r5
   21254:	294b883a 	add	r5,r5,r5
   21258:	298b883a 	add	r5,r5,r6
   2125c:	38c6983a 	sll	r3,r7,r3
   21260:	29c00017 	ldw	r7,0(r5)
   21264:	2a7ffe04 	addi	r9,r5,-8
   21268:	1886b03a 	or	r3,r3,r2
   2126c:	82400315 	stw	r9,12(r16)
   21270:	81c00215 	stw	r7,8(r16)
   21274:	30c00115 	stw	r3,4(r6)
   21278:	2c000015 	stw	r16,0(r5)
   2127c:	3c000315 	stw	r16,12(r7)
   21280:	2005d0ba 	srai	r2,r4,2
   21284:	01400044 	movi	r5,1
   21288:	288a983a 	sll	r5,r5,r2
   2128c:	19406f36 	bltu	r3,r5,2144c <_malloc_r+0x324>
   21290:	28c4703a 	and	r2,r5,r3
   21294:	10000a1e 	bne	r2,zero,212c0 <_malloc_r+0x198>
   21298:	00bfff04 	movi	r2,-4
   2129c:	294b883a 	add	r5,r5,r5
   212a0:	2088703a 	and	r4,r4,r2
   212a4:	28c4703a 	and	r2,r5,r3
   212a8:	21000104 	addi	r4,r4,4
   212ac:	1000041e 	bne	r2,zero,212c0 <_malloc_r+0x198>
   212b0:	294b883a 	add	r5,r5,r5
   212b4:	28c4703a 	and	r2,r5,r3
   212b8:	21000104 	addi	r4,r4,4
   212bc:	103ffc26 	beq	r2,zero,212b0 <__alt_data_end+0xfffe8c10>
   212c0:	02bfff04 	movi	r10,-4
   212c4:	024003c4 	movi	r9,15
   212c8:	21800044 	addi	r6,r4,1
   212cc:	318d883a 	add	r6,r6,r6
   212d0:	318d883a 	add	r6,r6,r6
   212d4:	318d883a 	add	r6,r6,r6
   212d8:	998d883a 	add	r6,r19,r6
   212dc:	333ffe04 	addi	r12,r6,-8
   212e0:	2017883a 	mov	r11,r4
   212e4:	31800104 	addi	r6,r6,4
   212e8:	34000017 	ldw	r16,0(r6)
   212ec:	31fffd04 	addi	r7,r6,-12
   212f0:	81c0041e 	bne	r16,r7,21304 <_malloc_r+0x1dc>
   212f4:	0000fb06 	br	216e4 <_malloc_r+0x5bc>
   212f8:	1801030e 	bge	r3,zero,21708 <_malloc_r+0x5e0>
   212fc:	84000317 	ldw	r16,12(r16)
   21300:	81c0f826 	beq	r16,r7,216e4 <_malloc_r+0x5bc>
   21304:	80800117 	ldw	r2,4(r16)
   21308:	1284703a 	and	r2,r2,r10
   2130c:	1447c83a 	sub	r3,r2,r17
   21310:	48fff90e 	bge	r9,r3,212f8 <__alt_data_end+0xfffe8c58>
   21314:	80800317 	ldw	r2,12(r16)
   21318:	81000217 	ldw	r4,8(r16)
   2131c:	89400054 	ori	r5,r17,1
   21320:	81400115 	stw	r5,4(r16)
   21324:	20800315 	stw	r2,12(r4)
   21328:	11000215 	stw	r4,8(r2)
   2132c:	8463883a 	add	r17,r16,r17
   21330:	9c400515 	stw	r17,20(r19)
   21334:	9c400415 	stw	r17,16(r19)
   21338:	18800054 	ori	r2,r3,1
   2133c:	88800115 	stw	r2,4(r17)
   21340:	8a000315 	stw	r8,12(r17)
   21344:	8a000215 	stw	r8,8(r17)
   21348:	88e3883a 	add	r17,r17,r3
   2134c:	88c00015 	stw	r3,0(r17)
   21350:	9009883a 	mov	r4,r18
   21354:	00239880 	call	23988 <__malloc_unlock>
   21358:	80800204 	addi	r2,r16,8
   2135c:	00001b06 	br	213cc <_malloc_r+0x2a4>
   21360:	04400404 	movi	r17,16
   21364:	89402536 	bltu	r17,r5,213fc <_malloc_r+0x2d4>
   21368:	00239640 	call	23964 <__malloc_lock>
   2136c:	00800184 	movi	r2,6
   21370:	01000084 	movi	r4,2
   21374:	04c000b4 	movhi	r19,2
   21378:	1085883a 	add	r2,r2,r2
   2137c:	9cdcab04 	addi	r19,r19,29356
   21380:	1085883a 	add	r2,r2,r2
   21384:	9885883a 	add	r2,r19,r2
   21388:	14000117 	ldw	r16,4(r2)
   2138c:	10fffe04 	addi	r3,r2,-8
   21390:	80c0d926 	beq	r16,r3,216f8 <_malloc_r+0x5d0>
   21394:	80c00117 	ldw	r3,4(r16)
   21398:	81000317 	ldw	r4,12(r16)
   2139c:	00bfff04 	movi	r2,-4
   213a0:	1884703a 	and	r2,r3,r2
   213a4:	81400217 	ldw	r5,8(r16)
   213a8:	8085883a 	add	r2,r16,r2
   213ac:	10c00117 	ldw	r3,4(r2)
   213b0:	29000315 	stw	r4,12(r5)
   213b4:	21400215 	stw	r5,8(r4)
   213b8:	18c00054 	ori	r3,r3,1
   213bc:	10c00115 	stw	r3,4(r2)
   213c0:	9009883a 	mov	r4,r18
   213c4:	00239880 	call	23988 <__malloc_unlock>
   213c8:	80800204 	addi	r2,r16,8
   213cc:	dfc00a17 	ldw	ra,40(sp)
   213d0:	df000917 	ldw	fp,36(sp)
   213d4:	ddc00817 	ldw	r23,32(sp)
   213d8:	dd800717 	ldw	r22,28(sp)
   213dc:	dd400617 	ldw	r21,24(sp)
   213e0:	dd000517 	ldw	r20,20(sp)
   213e4:	dcc00417 	ldw	r19,16(sp)
   213e8:	dc800317 	ldw	r18,12(sp)
   213ec:	dc400217 	ldw	r17,8(sp)
   213f0:	dc000117 	ldw	r16,4(sp)
   213f4:	dec00b04 	addi	sp,sp,44
   213f8:	f800283a 	ret
   213fc:	00800304 	movi	r2,12
   21400:	90800015 	stw	r2,0(r18)
   21404:	0005883a 	mov	r2,zero
   21408:	003ff006 	br	213cc <__alt_data_end+0xfffe8d2c>
   2140c:	01002004 	movi	r4,128
   21410:	02001004 	movi	r8,64
   21414:	01c00fc4 	movi	r7,63
   21418:	003f6106 	br	211a0 <__alt_data_end+0xfffe8b00>
   2141c:	4009883a 	mov	r4,r8
   21420:	003f7506 	br	211f8 <__alt_data_end+0xfffe8b58>
   21424:	81000317 	ldw	r4,12(r16)
   21428:	003fde06 	br	213a4 <__alt_data_end+0xfffe8d04>
   2142c:	81c5883a 	add	r2,r16,r7
   21430:	11400117 	ldw	r5,4(r2)
   21434:	9009883a 	mov	r4,r18
   21438:	29400054 	ori	r5,r5,1
   2143c:	11400115 	stw	r5,4(r2)
   21440:	00239880 	call	23988 <__malloc_unlock>
   21444:	80800204 	addi	r2,r16,8
   21448:	003fe006 	br	213cc <__alt_data_end+0xfffe8d2c>
   2144c:	9c000217 	ldw	r16,8(r19)
   21450:	00bfff04 	movi	r2,-4
   21454:	85800117 	ldw	r22,4(r16)
   21458:	b0ac703a 	and	r22,r22,r2
   2145c:	b4400336 	bltu	r22,r17,2146c <_malloc_r+0x344>
   21460:	b445c83a 	sub	r2,r22,r17
   21464:	00c003c4 	movi	r3,15
   21468:	18805d16 	blt	r3,r2,215e0 <_malloc_r+0x4b8>
   2146c:	05c000f4 	movhi	r23,3
   21470:	008000f4 	movhi	r2,3
   21474:	10a96e04 	addi	r2,r2,-23112
   21478:	bde27904 	addi	r23,r23,-30236
   2147c:	15400017 	ldw	r21,0(r2)
   21480:	b8c00017 	ldw	r3,0(r23)
   21484:	00bfffc4 	movi	r2,-1
   21488:	858d883a 	add	r6,r16,r22
   2148c:	8d6b883a 	add	r21,r17,r21
   21490:	1880ea26 	beq	r3,r2,2183c <_malloc_r+0x714>
   21494:	ad4403c4 	addi	r21,r21,4111
   21498:	00bc0004 	movi	r2,-4096
   2149c:	a8aa703a 	and	r21,r21,r2
   214a0:	a80b883a 	mov	r5,r21
   214a4:	9009883a 	mov	r4,r18
   214a8:	d9800015 	stw	r6,0(sp)
   214ac:	00223480 	call	22348 <_sbrk_r>
   214b0:	1029883a 	mov	r20,r2
   214b4:	00bfffc4 	movi	r2,-1
   214b8:	d9800017 	ldw	r6,0(sp)
   214bc:	a080e826 	beq	r20,r2,21860 <_malloc_r+0x738>
   214c0:	a180a636 	bltu	r20,r6,2175c <_malloc_r+0x634>
   214c4:	070000f4 	movhi	fp,3
   214c8:	e7297704 	addi	fp,fp,-23076
   214cc:	e0800017 	ldw	r2,0(fp)
   214d0:	a887883a 	add	r3,r21,r2
   214d4:	e0c00015 	stw	r3,0(fp)
   214d8:	3500e626 	beq	r6,r20,21874 <_malloc_r+0x74c>
   214dc:	b9000017 	ldw	r4,0(r23)
   214e0:	00bfffc4 	movi	r2,-1
   214e4:	2080ee26 	beq	r4,r2,218a0 <_malloc_r+0x778>
   214e8:	a185c83a 	sub	r2,r20,r6
   214ec:	10c5883a 	add	r2,r2,r3
   214f0:	e0800015 	stw	r2,0(fp)
   214f4:	a0c001cc 	andi	r3,r20,7
   214f8:	1800bc26 	beq	r3,zero,217ec <_malloc_r+0x6c4>
   214fc:	a0e9c83a 	sub	r20,r20,r3
   21500:	00840204 	movi	r2,4104
   21504:	a5000204 	addi	r20,r20,8
   21508:	10c7c83a 	sub	r3,r2,r3
   2150c:	a545883a 	add	r2,r20,r21
   21510:	1083ffcc 	andi	r2,r2,4095
   21514:	18abc83a 	sub	r21,r3,r2
   21518:	a80b883a 	mov	r5,r21
   2151c:	9009883a 	mov	r4,r18
   21520:	00223480 	call	22348 <_sbrk_r>
   21524:	00ffffc4 	movi	r3,-1
   21528:	10c0e126 	beq	r2,r3,218b0 <_malloc_r+0x788>
   2152c:	1505c83a 	sub	r2,r2,r20
   21530:	1545883a 	add	r2,r2,r21
   21534:	10800054 	ori	r2,r2,1
   21538:	e0c00017 	ldw	r3,0(fp)
   2153c:	9d000215 	stw	r20,8(r19)
   21540:	a0800115 	stw	r2,4(r20)
   21544:	a8c7883a 	add	r3,r21,r3
   21548:	e0c00015 	stw	r3,0(fp)
   2154c:	84c00e26 	beq	r16,r19,21588 <_malloc_r+0x460>
   21550:	018003c4 	movi	r6,15
   21554:	3580a72e 	bgeu	r6,r22,217f4 <_malloc_r+0x6cc>
   21558:	81400117 	ldw	r5,4(r16)
   2155c:	013ffe04 	movi	r4,-8
   21560:	b0bffd04 	addi	r2,r22,-12
   21564:	1104703a 	and	r2,r2,r4
   21568:	2900004c 	andi	r4,r5,1
   2156c:	2088b03a 	or	r4,r4,r2
   21570:	81000115 	stw	r4,4(r16)
   21574:	01400144 	movi	r5,5
   21578:	8089883a 	add	r4,r16,r2
   2157c:	21400115 	stw	r5,4(r4)
   21580:	21400215 	stw	r5,8(r4)
   21584:	3080cd36 	bltu	r6,r2,218bc <_malloc_r+0x794>
   21588:	008000f4 	movhi	r2,3
   2158c:	10a96d04 	addi	r2,r2,-23116
   21590:	11000017 	ldw	r4,0(r2)
   21594:	20c0012e 	bgeu	r4,r3,2159c <_malloc_r+0x474>
   21598:	10c00015 	stw	r3,0(r2)
   2159c:	008000f4 	movhi	r2,3
   215a0:	10a96c04 	addi	r2,r2,-23120
   215a4:	11000017 	ldw	r4,0(r2)
   215a8:	9c000217 	ldw	r16,8(r19)
   215ac:	20c0012e 	bgeu	r4,r3,215b4 <_malloc_r+0x48c>
   215b0:	10c00015 	stw	r3,0(r2)
   215b4:	80c00117 	ldw	r3,4(r16)
   215b8:	00bfff04 	movi	r2,-4
   215bc:	1886703a 	and	r3,r3,r2
   215c0:	1c45c83a 	sub	r2,r3,r17
   215c4:	1c400236 	bltu	r3,r17,215d0 <_malloc_r+0x4a8>
   215c8:	00c003c4 	movi	r3,15
   215cc:	18800416 	blt	r3,r2,215e0 <_malloc_r+0x4b8>
   215d0:	9009883a 	mov	r4,r18
   215d4:	00239880 	call	23988 <__malloc_unlock>
   215d8:	0005883a 	mov	r2,zero
   215dc:	003f7b06 	br	213cc <__alt_data_end+0xfffe8d2c>
   215e0:	88c00054 	ori	r3,r17,1
   215e4:	80c00115 	stw	r3,4(r16)
   215e8:	8463883a 	add	r17,r16,r17
   215ec:	10800054 	ori	r2,r2,1
   215f0:	9c400215 	stw	r17,8(r19)
   215f4:	88800115 	stw	r2,4(r17)
   215f8:	9009883a 	mov	r4,r18
   215fc:	00239880 	call	23988 <__malloc_unlock>
   21600:	80800204 	addi	r2,r16,8
   21604:	003f7106 	br	213cc <__alt_data_end+0xfffe8d2c>
   21608:	00c00504 	movi	r3,20
   2160c:	18804a2e 	bgeu	r3,r2,21738 <_malloc_r+0x610>
   21610:	00c01504 	movi	r3,84
   21614:	18806e36 	bltu	r3,r2,217d0 <_malloc_r+0x6a8>
   21618:	8804d33a 	srli	r2,r17,12
   2161c:	12001bc4 	addi	r8,r2,111
   21620:	11c01b84 	addi	r7,r2,110
   21624:	4209883a 	add	r4,r8,r8
   21628:	003edd06 	br	211a0 <__alt_data_end+0xfffe8b00>
   2162c:	3804d27a 	srli	r2,r7,9
   21630:	00c00104 	movi	r3,4
   21634:	1880442e 	bgeu	r3,r2,21748 <_malloc_r+0x620>
   21638:	00c00504 	movi	r3,20
   2163c:	18808136 	bltu	r3,r2,21844 <_malloc_r+0x71c>
   21640:	11401704 	addi	r5,r2,92
   21644:	10c016c4 	addi	r3,r2,91
   21648:	294b883a 	add	r5,r5,r5
   2164c:	294b883a 	add	r5,r5,r5
   21650:	294b883a 	add	r5,r5,r5
   21654:	994b883a 	add	r5,r19,r5
   21658:	28800017 	ldw	r2,0(r5)
   2165c:	018000b4 	movhi	r6,2
   21660:	297ffe04 	addi	r5,r5,-8
   21664:	319cab04 	addi	r6,r6,29356
   21668:	28806526 	beq	r5,r2,21800 <_malloc_r+0x6d8>
   2166c:	01bfff04 	movi	r6,-4
   21670:	10c00117 	ldw	r3,4(r2)
   21674:	1986703a 	and	r3,r3,r6
   21678:	38c0022e 	bgeu	r7,r3,21684 <_malloc_r+0x55c>
   2167c:	10800217 	ldw	r2,8(r2)
   21680:	28bffb1e 	bne	r5,r2,21670 <__alt_data_end+0xfffe8fd0>
   21684:	11400317 	ldw	r5,12(r2)
   21688:	98c00117 	ldw	r3,4(r19)
   2168c:	81400315 	stw	r5,12(r16)
   21690:	80800215 	stw	r2,8(r16)
   21694:	2c000215 	stw	r16,8(r5)
   21698:	14000315 	stw	r16,12(r2)
   2169c:	003ef806 	br	21280 <__alt_data_end+0xfffe8be0>
   216a0:	88c00054 	ori	r3,r17,1
   216a4:	80c00115 	stw	r3,4(r16)
   216a8:	8463883a 	add	r17,r16,r17
   216ac:	34400515 	stw	r17,20(r6)
   216b0:	34400415 	stw	r17,16(r6)
   216b4:	10c00054 	ori	r3,r2,1
   216b8:	8a000315 	stw	r8,12(r17)
   216bc:	8a000215 	stw	r8,8(r17)
   216c0:	88c00115 	stw	r3,4(r17)
   216c4:	88a3883a 	add	r17,r17,r2
   216c8:	88800015 	stw	r2,0(r17)
   216cc:	9009883a 	mov	r4,r18
   216d0:	00239880 	call	23988 <__malloc_unlock>
   216d4:	80800204 	addi	r2,r16,8
   216d8:	003f3c06 	br	213cc <__alt_data_end+0xfffe8d2c>
   216dc:	30c00117 	ldw	r3,4(r6)
   216e0:	003ee706 	br	21280 <__alt_data_end+0xfffe8be0>
   216e4:	5ac00044 	addi	r11,r11,1
   216e8:	588000cc 	andi	r2,r11,3
   216ec:	31800204 	addi	r6,r6,8
   216f0:	103efd1e 	bne	r2,zero,212e8 <__alt_data_end+0xfffe8c48>
   216f4:	00002406 	br	21788 <_malloc_r+0x660>
   216f8:	14000317 	ldw	r16,12(r2)
   216fc:	143f251e 	bne	r2,r16,21394 <__alt_data_end+0xfffe8cf4>
   21700:	21000084 	addi	r4,r4,2
   21704:	003ebc06 	br	211f8 <__alt_data_end+0xfffe8b58>
   21708:	8085883a 	add	r2,r16,r2
   2170c:	10c00117 	ldw	r3,4(r2)
   21710:	81000317 	ldw	r4,12(r16)
   21714:	81400217 	ldw	r5,8(r16)
   21718:	18c00054 	ori	r3,r3,1
   2171c:	10c00115 	stw	r3,4(r2)
   21720:	29000315 	stw	r4,12(r5)
   21724:	21400215 	stw	r5,8(r4)
   21728:	9009883a 	mov	r4,r18
   2172c:	00239880 	call	23988 <__malloc_unlock>
   21730:	80800204 	addi	r2,r16,8
   21734:	003f2506 	br	213cc <__alt_data_end+0xfffe8d2c>
   21738:	12001704 	addi	r8,r2,92
   2173c:	11c016c4 	addi	r7,r2,91
   21740:	4209883a 	add	r4,r8,r8
   21744:	003e9606 	br	211a0 <__alt_data_end+0xfffe8b00>
   21748:	3804d1ba 	srli	r2,r7,6
   2174c:	11400e44 	addi	r5,r2,57
   21750:	10c00e04 	addi	r3,r2,56
   21754:	294b883a 	add	r5,r5,r5
   21758:	003fbc06 	br	2164c <__alt_data_end+0xfffe8fac>
   2175c:	84ff5926 	beq	r16,r19,214c4 <__alt_data_end+0xfffe8e24>
   21760:	008000b4 	movhi	r2,2
   21764:	109cab04 	addi	r2,r2,29356
   21768:	14000217 	ldw	r16,8(r2)
   2176c:	00bfff04 	movi	r2,-4
   21770:	80c00117 	ldw	r3,4(r16)
   21774:	1886703a 	and	r3,r3,r2
   21778:	003f9106 	br	215c0 <__alt_data_end+0xfffe8f20>
   2177c:	60800217 	ldw	r2,8(r12)
   21780:	213fffc4 	addi	r4,r4,-1
   21784:	1300651e 	bne	r2,r12,2191c <_malloc_r+0x7f4>
   21788:	208000cc 	andi	r2,r4,3
   2178c:	633ffe04 	addi	r12,r12,-8
   21790:	103ffa1e 	bne	r2,zero,2177c <__alt_data_end+0xfffe90dc>
   21794:	98800117 	ldw	r2,4(r19)
   21798:	0146303a 	nor	r3,zero,r5
   2179c:	1884703a 	and	r2,r3,r2
   217a0:	98800115 	stw	r2,4(r19)
   217a4:	294b883a 	add	r5,r5,r5
   217a8:	117f2836 	bltu	r2,r5,2144c <__alt_data_end+0xfffe8dac>
   217ac:	283f2726 	beq	r5,zero,2144c <__alt_data_end+0xfffe8dac>
   217b0:	2886703a 	and	r3,r5,r2
   217b4:	5809883a 	mov	r4,r11
   217b8:	183ec31e 	bne	r3,zero,212c8 <__alt_data_end+0xfffe8c28>
   217bc:	294b883a 	add	r5,r5,r5
   217c0:	2886703a 	and	r3,r5,r2
   217c4:	21000104 	addi	r4,r4,4
   217c8:	183ffc26 	beq	r3,zero,217bc <__alt_data_end+0xfffe911c>
   217cc:	003ebe06 	br	212c8 <__alt_data_end+0xfffe8c28>
   217d0:	00c05504 	movi	r3,340
   217d4:	18801236 	bltu	r3,r2,21820 <_malloc_r+0x6f8>
   217d8:	8804d3fa 	srli	r2,r17,15
   217dc:	12001e04 	addi	r8,r2,120
   217e0:	11c01dc4 	addi	r7,r2,119
   217e4:	4209883a 	add	r4,r8,r8
   217e8:	003e6d06 	br	211a0 <__alt_data_end+0xfffe8b00>
   217ec:	00c40004 	movi	r3,4096
   217f0:	003f4606 	br	2150c <__alt_data_end+0xfffe8e6c>
   217f4:	00800044 	movi	r2,1
   217f8:	a0800115 	stw	r2,4(r20)
   217fc:	003f7406 	br	215d0 <__alt_data_end+0xfffe8f30>
   21800:	1805d0ba 	srai	r2,r3,2
   21804:	01c00044 	movi	r7,1
   21808:	30c00117 	ldw	r3,4(r6)
   2180c:	388e983a 	sll	r7,r7,r2
   21810:	2805883a 	mov	r2,r5
   21814:	38c6b03a 	or	r3,r7,r3
   21818:	30c00115 	stw	r3,4(r6)
   2181c:	003f9b06 	br	2168c <__alt_data_end+0xfffe8fec>
   21820:	00c15504 	movi	r3,1364
   21824:	18801a36 	bltu	r3,r2,21890 <_malloc_r+0x768>
   21828:	8804d4ba 	srli	r2,r17,18
   2182c:	12001f44 	addi	r8,r2,125
   21830:	11c01f04 	addi	r7,r2,124
   21834:	4209883a 	add	r4,r8,r8
   21838:	003e5906 	br	211a0 <__alt_data_end+0xfffe8b00>
   2183c:	ad400404 	addi	r21,r21,16
   21840:	003f1706 	br	214a0 <__alt_data_end+0xfffe8e00>
   21844:	00c01504 	movi	r3,84
   21848:	18802336 	bltu	r3,r2,218d8 <_malloc_r+0x7b0>
   2184c:	3804d33a 	srli	r2,r7,12
   21850:	11401bc4 	addi	r5,r2,111
   21854:	10c01b84 	addi	r3,r2,110
   21858:	294b883a 	add	r5,r5,r5
   2185c:	003f7b06 	br	2164c <__alt_data_end+0xfffe8fac>
   21860:	9c000217 	ldw	r16,8(r19)
   21864:	00bfff04 	movi	r2,-4
   21868:	80c00117 	ldw	r3,4(r16)
   2186c:	1886703a 	and	r3,r3,r2
   21870:	003f5306 	br	215c0 <__alt_data_end+0xfffe8f20>
   21874:	3083ffcc 	andi	r2,r6,4095
   21878:	103f181e 	bne	r2,zero,214dc <__alt_data_end+0xfffe8e3c>
   2187c:	99000217 	ldw	r4,8(r19)
   21880:	b545883a 	add	r2,r22,r21
   21884:	10800054 	ori	r2,r2,1
   21888:	20800115 	stw	r2,4(r4)
   2188c:	003f3e06 	br	21588 <__alt_data_end+0xfffe8ee8>
   21890:	01003f84 	movi	r4,254
   21894:	02001fc4 	movi	r8,127
   21898:	01c01f84 	movi	r7,126
   2189c:	003e4006 	br	211a0 <__alt_data_end+0xfffe8b00>
   218a0:	008000f4 	movhi	r2,3
   218a4:	10a27904 	addi	r2,r2,-30236
   218a8:	15000015 	stw	r20,0(r2)
   218ac:	003f1106 	br	214f4 <__alt_data_end+0xfffe8e54>
   218b0:	00800044 	movi	r2,1
   218b4:	002b883a 	mov	r21,zero
   218b8:	003f1f06 	br	21538 <__alt_data_end+0xfffe8e98>
   218bc:	81400204 	addi	r5,r16,8
   218c0:	9009883a 	mov	r4,r18
   218c4:	0022bb00 	call	22bb0 <_free_r>
   218c8:	008000f4 	movhi	r2,3
   218cc:	10a97704 	addi	r2,r2,-23076
   218d0:	10c00017 	ldw	r3,0(r2)
   218d4:	003f2c06 	br	21588 <__alt_data_end+0xfffe8ee8>
   218d8:	00c05504 	movi	r3,340
   218dc:	18800536 	bltu	r3,r2,218f4 <_malloc_r+0x7cc>
   218e0:	3804d3fa 	srli	r2,r7,15
   218e4:	11401e04 	addi	r5,r2,120
   218e8:	10c01dc4 	addi	r3,r2,119
   218ec:	294b883a 	add	r5,r5,r5
   218f0:	003f5606 	br	2164c <__alt_data_end+0xfffe8fac>
   218f4:	00c15504 	movi	r3,1364
   218f8:	18800536 	bltu	r3,r2,21910 <_malloc_r+0x7e8>
   218fc:	3804d4ba 	srli	r2,r7,18
   21900:	11401f44 	addi	r5,r2,125
   21904:	10c01f04 	addi	r3,r2,124
   21908:	294b883a 	add	r5,r5,r5
   2190c:	003f4f06 	br	2164c <__alt_data_end+0xfffe8fac>
   21910:	01403f84 	movi	r5,254
   21914:	00c01f84 	movi	r3,126
   21918:	003f4c06 	br	2164c <__alt_data_end+0xfffe8fac>
   2191c:	98800117 	ldw	r2,4(r19)
   21920:	003fa006 	br	217a4 <__alt_data_end+0xfffe9104>
   21924:	8808d0fa 	srli	r4,r17,3
   21928:	20800044 	addi	r2,r4,1
   2192c:	1085883a 	add	r2,r2,r2
   21930:	003e9006 	br	21374 <__alt_data_end+0xfffe8cd4>

00021934 <memchr>:
   21934:	208000cc 	andi	r2,r4,3
   21938:	280f883a 	mov	r7,r5
   2193c:	10003426 	beq	r2,zero,21a10 <memchr+0xdc>
   21940:	30bfffc4 	addi	r2,r6,-1
   21944:	30001a26 	beq	r6,zero,219b0 <memchr+0x7c>
   21948:	20c00003 	ldbu	r3,0(r4)
   2194c:	29803fcc 	andi	r6,r5,255
   21950:	30c0051e 	bne	r6,r3,21968 <memchr+0x34>
   21954:	00001806 	br	219b8 <memchr+0x84>
   21958:	10001526 	beq	r2,zero,219b0 <memchr+0x7c>
   2195c:	20c00003 	ldbu	r3,0(r4)
   21960:	10bfffc4 	addi	r2,r2,-1
   21964:	30c01426 	beq	r6,r3,219b8 <memchr+0x84>
   21968:	21000044 	addi	r4,r4,1
   2196c:	20c000cc 	andi	r3,r4,3
   21970:	183ff91e 	bne	r3,zero,21958 <__alt_data_end+0xfffe92b8>
   21974:	020000c4 	movi	r8,3
   21978:	40801136 	bltu	r8,r2,219c0 <memchr+0x8c>
   2197c:	10000c26 	beq	r2,zero,219b0 <memchr+0x7c>
   21980:	20c00003 	ldbu	r3,0(r4)
   21984:	29403fcc 	andi	r5,r5,255
   21988:	28c00b26 	beq	r5,r3,219b8 <memchr+0x84>
   2198c:	20c00044 	addi	r3,r4,1
   21990:	39803fcc 	andi	r6,r7,255
   21994:	2089883a 	add	r4,r4,r2
   21998:	00000306 	br	219a8 <memchr+0x74>
   2199c:	18c00044 	addi	r3,r3,1
   219a0:	197fffc3 	ldbu	r5,-1(r3)
   219a4:	31400526 	beq	r6,r5,219bc <memchr+0x88>
   219a8:	1805883a 	mov	r2,r3
   219ac:	20fffb1e 	bne	r4,r3,2199c <__alt_data_end+0xfffe92fc>
   219b0:	0005883a 	mov	r2,zero
   219b4:	f800283a 	ret
   219b8:	2005883a 	mov	r2,r4
   219bc:	f800283a 	ret
   219c0:	28c03fcc 	andi	r3,r5,255
   219c4:	1812923a 	slli	r9,r3,8
   219c8:	02ffbff4 	movhi	r11,65279
   219cc:	02a02074 	movhi	r10,32897
   219d0:	48d2b03a 	or	r9,r9,r3
   219d4:	4806943a 	slli	r3,r9,16
   219d8:	5affbfc4 	addi	r11,r11,-257
   219dc:	52a02004 	addi	r10,r10,-32640
   219e0:	48d2b03a 	or	r9,r9,r3
   219e4:	20c00017 	ldw	r3,0(r4)
   219e8:	48c6f03a 	xor	r3,r9,r3
   219ec:	1acd883a 	add	r6,r3,r11
   219f0:	00c6303a 	nor	r3,zero,r3
   219f4:	30c6703a 	and	r3,r6,r3
   219f8:	1a86703a 	and	r3,r3,r10
   219fc:	183fe01e 	bne	r3,zero,21980 <__alt_data_end+0xfffe92e0>
   21a00:	10bfff04 	addi	r2,r2,-4
   21a04:	21000104 	addi	r4,r4,4
   21a08:	40bff636 	bltu	r8,r2,219e4 <__alt_data_end+0xfffe9344>
   21a0c:	003fdb06 	br	2197c <__alt_data_end+0xfffe92dc>
   21a10:	3005883a 	mov	r2,r6
   21a14:	003fd706 	br	21974 <__alt_data_end+0xfffe92d4>

00021a18 <memcpy>:
   21a18:	defffd04 	addi	sp,sp,-12
   21a1c:	dfc00215 	stw	ra,8(sp)
   21a20:	dc400115 	stw	r17,4(sp)
   21a24:	dc000015 	stw	r16,0(sp)
   21a28:	00c003c4 	movi	r3,15
   21a2c:	2005883a 	mov	r2,r4
   21a30:	1980452e 	bgeu	r3,r6,21b48 <memcpy+0x130>
   21a34:	2906b03a 	or	r3,r5,r4
   21a38:	18c000cc 	andi	r3,r3,3
   21a3c:	1800441e 	bne	r3,zero,21b50 <memcpy+0x138>
   21a40:	347ffc04 	addi	r17,r6,-16
   21a44:	8822d13a 	srli	r17,r17,4
   21a48:	28c00104 	addi	r3,r5,4
   21a4c:	23400104 	addi	r13,r4,4
   21a50:	8820913a 	slli	r16,r17,4
   21a54:	2b000204 	addi	r12,r5,8
   21a58:	22c00204 	addi	r11,r4,8
   21a5c:	84000504 	addi	r16,r16,20
   21a60:	2a800304 	addi	r10,r5,12
   21a64:	22400304 	addi	r9,r4,12
   21a68:	2c21883a 	add	r16,r5,r16
   21a6c:	2811883a 	mov	r8,r5
   21a70:	200f883a 	mov	r7,r4
   21a74:	41000017 	ldw	r4,0(r8)
   21a78:	1fc00017 	ldw	ra,0(r3)
   21a7c:	63c00017 	ldw	r15,0(r12)
   21a80:	39000015 	stw	r4,0(r7)
   21a84:	53800017 	ldw	r14,0(r10)
   21a88:	6fc00015 	stw	ra,0(r13)
   21a8c:	5bc00015 	stw	r15,0(r11)
   21a90:	4b800015 	stw	r14,0(r9)
   21a94:	18c00404 	addi	r3,r3,16
   21a98:	39c00404 	addi	r7,r7,16
   21a9c:	42000404 	addi	r8,r8,16
   21aa0:	6b400404 	addi	r13,r13,16
   21aa4:	63000404 	addi	r12,r12,16
   21aa8:	5ac00404 	addi	r11,r11,16
   21aac:	52800404 	addi	r10,r10,16
   21ab0:	4a400404 	addi	r9,r9,16
   21ab4:	1c3fef1e 	bne	r3,r16,21a74 <__alt_data_end+0xfffe93d4>
   21ab8:	89c00044 	addi	r7,r17,1
   21abc:	380e913a 	slli	r7,r7,4
   21ac0:	310003cc 	andi	r4,r6,15
   21ac4:	02c000c4 	movi	r11,3
   21ac8:	11c7883a 	add	r3,r2,r7
   21acc:	29cb883a 	add	r5,r5,r7
   21ad0:	5900212e 	bgeu	r11,r4,21b58 <memcpy+0x140>
   21ad4:	1813883a 	mov	r9,r3
   21ad8:	2811883a 	mov	r8,r5
   21adc:	200f883a 	mov	r7,r4
   21ae0:	42800017 	ldw	r10,0(r8)
   21ae4:	4a400104 	addi	r9,r9,4
   21ae8:	39ffff04 	addi	r7,r7,-4
   21aec:	4abfff15 	stw	r10,-4(r9)
   21af0:	42000104 	addi	r8,r8,4
   21af4:	59fffa36 	bltu	r11,r7,21ae0 <__alt_data_end+0xfffe9440>
   21af8:	213fff04 	addi	r4,r4,-4
   21afc:	2008d0ba 	srli	r4,r4,2
   21b00:	318000cc 	andi	r6,r6,3
   21b04:	21000044 	addi	r4,r4,1
   21b08:	2109883a 	add	r4,r4,r4
   21b0c:	2109883a 	add	r4,r4,r4
   21b10:	1907883a 	add	r3,r3,r4
   21b14:	290b883a 	add	r5,r5,r4
   21b18:	30000626 	beq	r6,zero,21b34 <memcpy+0x11c>
   21b1c:	198d883a 	add	r6,r3,r6
   21b20:	29c00003 	ldbu	r7,0(r5)
   21b24:	18c00044 	addi	r3,r3,1
   21b28:	29400044 	addi	r5,r5,1
   21b2c:	19ffffc5 	stb	r7,-1(r3)
   21b30:	19bffb1e 	bne	r3,r6,21b20 <__alt_data_end+0xfffe9480>
   21b34:	dfc00217 	ldw	ra,8(sp)
   21b38:	dc400117 	ldw	r17,4(sp)
   21b3c:	dc000017 	ldw	r16,0(sp)
   21b40:	dec00304 	addi	sp,sp,12
   21b44:	f800283a 	ret
   21b48:	2007883a 	mov	r3,r4
   21b4c:	003ff206 	br	21b18 <__alt_data_end+0xfffe9478>
   21b50:	2007883a 	mov	r3,r4
   21b54:	003ff106 	br	21b1c <__alt_data_end+0xfffe947c>
   21b58:	200d883a 	mov	r6,r4
   21b5c:	003fee06 	br	21b18 <__alt_data_end+0xfffe9478>

00021b60 <memmove>:
   21b60:	2005883a 	mov	r2,r4
   21b64:	29000b2e 	bgeu	r5,r4,21b94 <memmove+0x34>
   21b68:	298f883a 	add	r7,r5,r6
   21b6c:	21c0092e 	bgeu	r4,r7,21b94 <memmove+0x34>
   21b70:	2187883a 	add	r3,r4,r6
   21b74:	198bc83a 	sub	r5,r3,r6
   21b78:	30004826 	beq	r6,zero,21c9c <memmove+0x13c>
   21b7c:	39ffffc4 	addi	r7,r7,-1
   21b80:	39000003 	ldbu	r4,0(r7)
   21b84:	18ffffc4 	addi	r3,r3,-1
   21b88:	19000005 	stb	r4,0(r3)
   21b8c:	28fffb1e 	bne	r5,r3,21b7c <__alt_data_end+0xfffe94dc>
   21b90:	f800283a 	ret
   21b94:	00c003c4 	movi	r3,15
   21b98:	1980412e 	bgeu	r3,r6,21ca0 <memmove+0x140>
   21b9c:	2886b03a 	or	r3,r5,r2
   21ba0:	18c000cc 	andi	r3,r3,3
   21ba4:	1800401e 	bne	r3,zero,21ca8 <memmove+0x148>
   21ba8:	33fffc04 	addi	r15,r6,-16
   21bac:	781ed13a 	srli	r15,r15,4
   21bb0:	28c00104 	addi	r3,r5,4
   21bb4:	13400104 	addi	r13,r2,4
   21bb8:	781c913a 	slli	r14,r15,4
   21bbc:	2b000204 	addi	r12,r5,8
   21bc0:	12c00204 	addi	r11,r2,8
   21bc4:	73800504 	addi	r14,r14,20
   21bc8:	2a800304 	addi	r10,r5,12
   21bcc:	12400304 	addi	r9,r2,12
   21bd0:	2b9d883a 	add	r14,r5,r14
   21bd4:	2811883a 	mov	r8,r5
   21bd8:	100f883a 	mov	r7,r2
   21bdc:	41000017 	ldw	r4,0(r8)
   21be0:	39c00404 	addi	r7,r7,16
   21be4:	18c00404 	addi	r3,r3,16
   21be8:	393ffc15 	stw	r4,-16(r7)
   21bec:	193ffc17 	ldw	r4,-16(r3)
   21bf0:	6b400404 	addi	r13,r13,16
   21bf4:	5ac00404 	addi	r11,r11,16
   21bf8:	693ffc15 	stw	r4,-16(r13)
   21bfc:	61000017 	ldw	r4,0(r12)
   21c00:	4a400404 	addi	r9,r9,16
   21c04:	42000404 	addi	r8,r8,16
   21c08:	593ffc15 	stw	r4,-16(r11)
   21c0c:	51000017 	ldw	r4,0(r10)
   21c10:	63000404 	addi	r12,r12,16
   21c14:	52800404 	addi	r10,r10,16
   21c18:	493ffc15 	stw	r4,-16(r9)
   21c1c:	1bbfef1e 	bne	r3,r14,21bdc <__alt_data_end+0xfffe953c>
   21c20:	79000044 	addi	r4,r15,1
   21c24:	2008913a 	slli	r4,r4,4
   21c28:	328003cc 	andi	r10,r6,15
   21c2c:	02c000c4 	movi	r11,3
   21c30:	1107883a 	add	r3,r2,r4
   21c34:	290b883a 	add	r5,r5,r4
   21c38:	5a801e2e 	bgeu	r11,r10,21cb4 <memmove+0x154>
   21c3c:	1813883a 	mov	r9,r3
   21c40:	2811883a 	mov	r8,r5
   21c44:	500f883a 	mov	r7,r10
   21c48:	41000017 	ldw	r4,0(r8)
   21c4c:	4a400104 	addi	r9,r9,4
   21c50:	39ffff04 	addi	r7,r7,-4
   21c54:	493fff15 	stw	r4,-4(r9)
   21c58:	42000104 	addi	r8,r8,4
   21c5c:	59fffa36 	bltu	r11,r7,21c48 <__alt_data_end+0xfffe95a8>
   21c60:	513fff04 	addi	r4,r10,-4
   21c64:	2008d0ba 	srli	r4,r4,2
   21c68:	318000cc 	andi	r6,r6,3
   21c6c:	21000044 	addi	r4,r4,1
   21c70:	2109883a 	add	r4,r4,r4
   21c74:	2109883a 	add	r4,r4,r4
   21c78:	1907883a 	add	r3,r3,r4
   21c7c:	290b883a 	add	r5,r5,r4
   21c80:	30000b26 	beq	r6,zero,21cb0 <memmove+0x150>
   21c84:	198d883a 	add	r6,r3,r6
   21c88:	29c00003 	ldbu	r7,0(r5)
   21c8c:	18c00044 	addi	r3,r3,1
   21c90:	29400044 	addi	r5,r5,1
   21c94:	19ffffc5 	stb	r7,-1(r3)
   21c98:	19bffb1e 	bne	r3,r6,21c88 <__alt_data_end+0xfffe95e8>
   21c9c:	f800283a 	ret
   21ca0:	1007883a 	mov	r3,r2
   21ca4:	003ff606 	br	21c80 <__alt_data_end+0xfffe95e0>
   21ca8:	1007883a 	mov	r3,r2
   21cac:	003ff506 	br	21c84 <__alt_data_end+0xfffe95e4>
   21cb0:	f800283a 	ret
   21cb4:	500d883a 	mov	r6,r10
   21cb8:	003ff106 	br	21c80 <__alt_data_end+0xfffe95e0>

00021cbc <memset>:
   21cbc:	20c000cc 	andi	r3,r4,3
   21cc0:	2005883a 	mov	r2,r4
   21cc4:	18004426 	beq	r3,zero,21dd8 <memset+0x11c>
   21cc8:	31ffffc4 	addi	r7,r6,-1
   21ccc:	30004026 	beq	r6,zero,21dd0 <memset+0x114>
   21cd0:	2813883a 	mov	r9,r5
   21cd4:	200d883a 	mov	r6,r4
   21cd8:	2007883a 	mov	r3,r4
   21cdc:	00000406 	br	21cf0 <memset+0x34>
   21ce0:	3a3fffc4 	addi	r8,r7,-1
   21ce4:	31800044 	addi	r6,r6,1
   21ce8:	38003926 	beq	r7,zero,21dd0 <memset+0x114>
   21cec:	400f883a 	mov	r7,r8
   21cf0:	18c00044 	addi	r3,r3,1
   21cf4:	32400005 	stb	r9,0(r6)
   21cf8:	1a0000cc 	andi	r8,r3,3
   21cfc:	403ff81e 	bne	r8,zero,21ce0 <__alt_data_end+0xfffe9640>
   21d00:	010000c4 	movi	r4,3
   21d04:	21c02d2e 	bgeu	r4,r7,21dbc <memset+0x100>
   21d08:	29003fcc 	andi	r4,r5,255
   21d0c:	200c923a 	slli	r6,r4,8
   21d10:	3108b03a 	or	r4,r6,r4
   21d14:	200c943a 	slli	r6,r4,16
   21d18:	218cb03a 	or	r6,r4,r6
   21d1c:	010003c4 	movi	r4,15
   21d20:	21c0182e 	bgeu	r4,r7,21d84 <memset+0xc8>
   21d24:	3b3ffc04 	addi	r12,r7,-16
   21d28:	6018d13a 	srli	r12,r12,4
   21d2c:	1a000104 	addi	r8,r3,4
   21d30:	1ac00204 	addi	r11,r3,8
   21d34:	6008913a 	slli	r4,r12,4
   21d38:	1a800304 	addi	r10,r3,12
   21d3c:	1813883a 	mov	r9,r3
   21d40:	21000504 	addi	r4,r4,20
   21d44:	1909883a 	add	r4,r3,r4
   21d48:	49800015 	stw	r6,0(r9)
   21d4c:	41800015 	stw	r6,0(r8)
   21d50:	59800015 	stw	r6,0(r11)
   21d54:	51800015 	stw	r6,0(r10)
   21d58:	42000404 	addi	r8,r8,16
   21d5c:	4a400404 	addi	r9,r9,16
   21d60:	5ac00404 	addi	r11,r11,16
   21d64:	52800404 	addi	r10,r10,16
   21d68:	413ff71e 	bne	r8,r4,21d48 <__alt_data_end+0xfffe96a8>
   21d6c:	63000044 	addi	r12,r12,1
   21d70:	6018913a 	slli	r12,r12,4
   21d74:	39c003cc 	andi	r7,r7,15
   21d78:	010000c4 	movi	r4,3
   21d7c:	1b07883a 	add	r3,r3,r12
   21d80:	21c00e2e 	bgeu	r4,r7,21dbc <memset+0x100>
   21d84:	1813883a 	mov	r9,r3
   21d88:	3811883a 	mov	r8,r7
   21d8c:	010000c4 	movi	r4,3
   21d90:	49800015 	stw	r6,0(r9)
   21d94:	423fff04 	addi	r8,r8,-4
   21d98:	4a400104 	addi	r9,r9,4
   21d9c:	223ffc36 	bltu	r4,r8,21d90 <__alt_data_end+0xfffe96f0>
   21da0:	393fff04 	addi	r4,r7,-4
   21da4:	2008d0ba 	srli	r4,r4,2
   21da8:	39c000cc 	andi	r7,r7,3
   21dac:	21000044 	addi	r4,r4,1
   21db0:	2109883a 	add	r4,r4,r4
   21db4:	2109883a 	add	r4,r4,r4
   21db8:	1907883a 	add	r3,r3,r4
   21dbc:	38000526 	beq	r7,zero,21dd4 <memset+0x118>
   21dc0:	19cf883a 	add	r7,r3,r7
   21dc4:	19400005 	stb	r5,0(r3)
   21dc8:	18c00044 	addi	r3,r3,1
   21dcc:	38fffd1e 	bne	r7,r3,21dc4 <__alt_data_end+0xfffe9724>
   21dd0:	f800283a 	ret
   21dd4:	f800283a 	ret
   21dd8:	2007883a 	mov	r3,r4
   21ddc:	300f883a 	mov	r7,r6
   21de0:	003fc706 	br	21d00 <__alt_data_end+0xfffe9660>

00021de4 <_realloc_r>:
   21de4:	defff604 	addi	sp,sp,-40
   21de8:	dc800215 	stw	r18,8(sp)
   21dec:	dfc00915 	stw	ra,36(sp)
   21df0:	df000815 	stw	fp,32(sp)
   21df4:	ddc00715 	stw	r23,28(sp)
   21df8:	dd800615 	stw	r22,24(sp)
   21dfc:	dd400515 	stw	r21,20(sp)
   21e00:	dd000415 	stw	r20,16(sp)
   21e04:	dcc00315 	stw	r19,12(sp)
   21e08:	dc400115 	stw	r17,4(sp)
   21e0c:	dc000015 	stw	r16,0(sp)
   21e10:	3025883a 	mov	r18,r6
   21e14:	2800b726 	beq	r5,zero,220f4 <_realloc_r+0x310>
   21e18:	282b883a 	mov	r21,r5
   21e1c:	2029883a 	mov	r20,r4
   21e20:	00239640 	call	23964 <__malloc_lock>
   21e24:	a8bfff17 	ldw	r2,-4(r21)
   21e28:	043fff04 	movi	r16,-4
   21e2c:	90c002c4 	addi	r3,r18,11
   21e30:	01000584 	movi	r4,22
   21e34:	acfffe04 	addi	r19,r21,-8
   21e38:	1420703a 	and	r16,r2,r16
   21e3c:	20c0332e 	bgeu	r4,r3,21f0c <_realloc_r+0x128>
   21e40:	047ffe04 	movi	r17,-8
   21e44:	1c62703a 	and	r17,r3,r17
   21e48:	8807883a 	mov	r3,r17
   21e4c:	88005816 	blt	r17,zero,21fb0 <_realloc_r+0x1cc>
   21e50:	8c805736 	bltu	r17,r18,21fb0 <_realloc_r+0x1cc>
   21e54:	80c0300e 	bge	r16,r3,21f18 <_realloc_r+0x134>
   21e58:	070000b4 	movhi	fp,2
   21e5c:	e71cab04 	addi	fp,fp,29356
   21e60:	e1c00217 	ldw	r7,8(fp)
   21e64:	9c09883a 	add	r4,r19,r16
   21e68:	22000117 	ldw	r8,4(r4)
   21e6c:	21c06326 	beq	r4,r7,21ffc <_realloc_r+0x218>
   21e70:	017fff84 	movi	r5,-2
   21e74:	414a703a 	and	r5,r8,r5
   21e78:	214b883a 	add	r5,r4,r5
   21e7c:	29800117 	ldw	r6,4(r5)
   21e80:	3180004c 	andi	r6,r6,1
   21e84:	30003f26 	beq	r6,zero,21f84 <_realloc_r+0x1a0>
   21e88:	1080004c 	andi	r2,r2,1
   21e8c:	10008326 	beq	r2,zero,2209c <_realloc_r+0x2b8>
   21e90:	900b883a 	mov	r5,r18
   21e94:	a009883a 	mov	r4,r20
   21e98:	00211280 	call	21128 <_malloc_r>
   21e9c:	1025883a 	mov	r18,r2
   21ea0:	10011e26 	beq	r2,zero,2231c <_realloc_r+0x538>
   21ea4:	a93fff17 	ldw	r4,-4(r21)
   21ea8:	10fffe04 	addi	r3,r2,-8
   21eac:	00bfff84 	movi	r2,-2
   21eb0:	2084703a 	and	r2,r4,r2
   21eb4:	9885883a 	add	r2,r19,r2
   21eb8:	1880ee26 	beq	r3,r2,22274 <_realloc_r+0x490>
   21ebc:	81bfff04 	addi	r6,r16,-4
   21ec0:	00800904 	movi	r2,36
   21ec4:	1180b836 	bltu	r2,r6,221a8 <_realloc_r+0x3c4>
   21ec8:	00c004c4 	movi	r3,19
   21ecc:	19809636 	bltu	r3,r6,22128 <_realloc_r+0x344>
   21ed0:	9005883a 	mov	r2,r18
   21ed4:	a807883a 	mov	r3,r21
   21ed8:	19000017 	ldw	r4,0(r3)
   21edc:	11000015 	stw	r4,0(r2)
   21ee0:	19000117 	ldw	r4,4(r3)
   21ee4:	11000115 	stw	r4,4(r2)
   21ee8:	18c00217 	ldw	r3,8(r3)
   21eec:	10c00215 	stw	r3,8(r2)
   21ef0:	a80b883a 	mov	r5,r21
   21ef4:	a009883a 	mov	r4,r20
   21ef8:	0022bb00 	call	22bb0 <_free_r>
   21efc:	a009883a 	mov	r4,r20
   21f00:	00239880 	call	23988 <__malloc_unlock>
   21f04:	9005883a 	mov	r2,r18
   21f08:	00001206 	br	21f54 <_realloc_r+0x170>
   21f0c:	00c00404 	movi	r3,16
   21f10:	1823883a 	mov	r17,r3
   21f14:	003fce06 	br	21e50 <__alt_data_end+0xfffe97b0>
   21f18:	a825883a 	mov	r18,r21
   21f1c:	8445c83a 	sub	r2,r16,r17
   21f20:	00c003c4 	movi	r3,15
   21f24:	18802636 	bltu	r3,r2,21fc0 <_realloc_r+0x1dc>
   21f28:	99800117 	ldw	r6,4(r19)
   21f2c:	9c07883a 	add	r3,r19,r16
   21f30:	3180004c 	andi	r6,r6,1
   21f34:	3420b03a 	or	r16,r6,r16
   21f38:	9c000115 	stw	r16,4(r19)
   21f3c:	18800117 	ldw	r2,4(r3)
   21f40:	10800054 	ori	r2,r2,1
   21f44:	18800115 	stw	r2,4(r3)
   21f48:	a009883a 	mov	r4,r20
   21f4c:	00239880 	call	23988 <__malloc_unlock>
   21f50:	9005883a 	mov	r2,r18
   21f54:	dfc00917 	ldw	ra,36(sp)
   21f58:	df000817 	ldw	fp,32(sp)
   21f5c:	ddc00717 	ldw	r23,28(sp)
   21f60:	dd800617 	ldw	r22,24(sp)
   21f64:	dd400517 	ldw	r21,20(sp)
   21f68:	dd000417 	ldw	r20,16(sp)
   21f6c:	dcc00317 	ldw	r19,12(sp)
   21f70:	dc800217 	ldw	r18,8(sp)
   21f74:	dc400117 	ldw	r17,4(sp)
   21f78:	dc000017 	ldw	r16,0(sp)
   21f7c:	dec00a04 	addi	sp,sp,40
   21f80:	f800283a 	ret
   21f84:	017fff04 	movi	r5,-4
   21f88:	414a703a 	and	r5,r8,r5
   21f8c:	814d883a 	add	r6,r16,r5
   21f90:	30c01f16 	blt	r6,r3,22010 <_realloc_r+0x22c>
   21f94:	20800317 	ldw	r2,12(r4)
   21f98:	20c00217 	ldw	r3,8(r4)
   21f9c:	a825883a 	mov	r18,r21
   21fa0:	3021883a 	mov	r16,r6
   21fa4:	18800315 	stw	r2,12(r3)
   21fa8:	10c00215 	stw	r3,8(r2)
   21fac:	003fdb06 	br	21f1c <__alt_data_end+0xfffe987c>
   21fb0:	00800304 	movi	r2,12
   21fb4:	a0800015 	stw	r2,0(r20)
   21fb8:	0005883a 	mov	r2,zero
   21fbc:	003fe506 	br	21f54 <__alt_data_end+0xfffe98b4>
   21fc0:	98c00117 	ldw	r3,4(r19)
   21fc4:	9c4b883a 	add	r5,r19,r17
   21fc8:	11000054 	ori	r4,r2,1
   21fcc:	18c0004c 	andi	r3,r3,1
   21fd0:	1c62b03a 	or	r17,r3,r17
   21fd4:	9c400115 	stw	r17,4(r19)
   21fd8:	29000115 	stw	r4,4(r5)
   21fdc:	2885883a 	add	r2,r5,r2
   21fe0:	10c00117 	ldw	r3,4(r2)
   21fe4:	29400204 	addi	r5,r5,8
   21fe8:	a009883a 	mov	r4,r20
   21fec:	18c00054 	ori	r3,r3,1
   21ff0:	10c00115 	stw	r3,4(r2)
   21ff4:	0022bb00 	call	22bb0 <_free_r>
   21ff8:	003fd306 	br	21f48 <__alt_data_end+0xfffe98a8>
   21ffc:	017fff04 	movi	r5,-4
   22000:	414a703a 	and	r5,r8,r5
   22004:	89800404 	addi	r6,r17,16
   22008:	8151883a 	add	r8,r16,r5
   2200c:	4180590e 	bge	r8,r6,22174 <_realloc_r+0x390>
   22010:	1080004c 	andi	r2,r2,1
   22014:	103f9e1e 	bne	r2,zero,21e90 <__alt_data_end+0xfffe97f0>
   22018:	adbffe17 	ldw	r22,-8(r21)
   2201c:	00bfff04 	movi	r2,-4
   22020:	9dadc83a 	sub	r22,r19,r22
   22024:	b1800117 	ldw	r6,4(r22)
   22028:	3084703a 	and	r2,r6,r2
   2202c:	20002026 	beq	r4,zero,220b0 <_realloc_r+0x2cc>
   22030:	80af883a 	add	r23,r16,r2
   22034:	b96f883a 	add	r23,r23,r5
   22038:	21c05f26 	beq	r4,r7,221b8 <_realloc_r+0x3d4>
   2203c:	b8c01c16 	blt	r23,r3,220b0 <_realloc_r+0x2cc>
   22040:	20800317 	ldw	r2,12(r4)
   22044:	20c00217 	ldw	r3,8(r4)
   22048:	81bfff04 	addi	r6,r16,-4
   2204c:	01000904 	movi	r4,36
   22050:	18800315 	stw	r2,12(r3)
   22054:	10c00215 	stw	r3,8(r2)
   22058:	b0c00217 	ldw	r3,8(r22)
   2205c:	b0800317 	ldw	r2,12(r22)
   22060:	b4800204 	addi	r18,r22,8
   22064:	18800315 	stw	r2,12(r3)
   22068:	10c00215 	stw	r3,8(r2)
   2206c:	21801b36 	bltu	r4,r6,220dc <_realloc_r+0x2f8>
   22070:	008004c4 	movi	r2,19
   22074:	1180352e 	bgeu	r2,r6,2214c <_realloc_r+0x368>
   22078:	a8800017 	ldw	r2,0(r21)
   2207c:	b0800215 	stw	r2,8(r22)
   22080:	a8800117 	ldw	r2,4(r21)
   22084:	b0800315 	stw	r2,12(r22)
   22088:	008006c4 	movi	r2,27
   2208c:	11807f36 	bltu	r2,r6,2228c <_realloc_r+0x4a8>
   22090:	b0800404 	addi	r2,r22,16
   22094:	ad400204 	addi	r21,r21,8
   22098:	00002d06 	br	22150 <_realloc_r+0x36c>
   2209c:	adbffe17 	ldw	r22,-8(r21)
   220a0:	00bfff04 	movi	r2,-4
   220a4:	9dadc83a 	sub	r22,r19,r22
   220a8:	b1000117 	ldw	r4,4(r22)
   220ac:	2084703a 	and	r2,r4,r2
   220b0:	b03f7726 	beq	r22,zero,21e90 <__alt_data_end+0xfffe97f0>
   220b4:	80af883a 	add	r23,r16,r2
   220b8:	b8ff7516 	blt	r23,r3,21e90 <__alt_data_end+0xfffe97f0>
   220bc:	b0800317 	ldw	r2,12(r22)
   220c0:	b0c00217 	ldw	r3,8(r22)
   220c4:	81bfff04 	addi	r6,r16,-4
   220c8:	01000904 	movi	r4,36
   220cc:	18800315 	stw	r2,12(r3)
   220d0:	10c00215 	stw	r3,8(r2)
   220d4:	b4800204 	addi	r18,r22,8
   220d8:	21bfe52e 	bgeu	r4,r6,22070 <__alt_data_end+0xfffe99d0>
   220dc:	a80b883a 	mov	r5,r21
   220e0:	9009883a 	mov	r4,r18
   220e4:	0021b600 	call	21b60 <memmove>
   220e8:	b821883a 	mov	r16,r23
   220ec:	b027883a 	mov	r19,r22
   220f0:	003f8a06 	br	21f1c <__alt_data_end+0xfffe987c>
   220f4:	300b883a 	mov	r5,r6
   220f8:	dfc00917 	ldw	ra,36(sp)
   220fc:	df000817 	ldw	fp,32(sp)
   22100:	ddc00717 	ldw	r23,28(sp)
   22104:	dd800617 	ldw	r22,24(sp)
   22108:	dd400517 	ldw	r21,20(sp)
   2210c:	dd000417 	ldw	r20,16(sp)
   22110:	dcc00317 	ldw	r19,12(sp)
   22114:	dc800217 	ldw	r18,8(sp)
   22118:	dc400117 	ldw	r17,4(sp)
   2211c:	dc000017 	ldw	r16,0(sp)
   22120:	dec00a04 	addi	sp,sp,40
   22124:	00211281 	jmpi	21128 <_malloc_r>
   22128:	a8c00017 	ldw	r3,0(r21)
   2212c:	90c00015 	stw	r3,0(r18)
   22130:	a8c00117 	ldw	r3,4(r21)
   22134:	90c00115 	stw	r3,4(r18)
   22138:	00c006c4 	movi	r3,27
   2213c:	19804536 	bltu	r3,r6,22254 <_realloc_r+0x470>
   22140:	90800204 	addi	r2,r18,8
   22144:	a8c00204 	addi	r3,r21,8
   22148:	003f6306 	br	21ed8 <__alt_data_end+0xfffe9838>
   2214c:	9005883a 	mov	r2,r18
   22150:	a8c00017 	ldw	r3,0(r21)
   22154:	b821883a 	mov	r16,r23
   22158:	b027883a 	mov	r19,r22
   2215c:	10c00015 	stw	r3,0(r2)
   22160:	a8c00117 	ldw	r3,4(r21)
   22164:	10c00115 	stw	r3,4(r2)
   22168:	a8c00217 	ldw	r3,8(r21)
   2216c:	10c00215 	stw	r3,8(r2)
   22170:	003f6a06 	br	21f1c <__alt_data_end+0xfffe987c>
   22174:	9c67883a 	add	r19,r19,r17
   22178:	4445c83a 	sub	r2,r8,r17
   2217c:	e4c00215 	stw	r19,8(fp)
   22180:	10800054 	ori	r2,r2,1
   22184:	98800115 	stw	r2,4(r19)
   22188:	a8bfff17 	ldw	r2,-4(r21)
   2218c:	a009883a 	mov	r4,r20
   22190:	1080004c 	andi	r2,r2,1
   22194:	1462b03a 	or	r17,r2,r17
   22198:	ac7fff15 	stw	r17,-4(r21)
   2219c:	00239880 	call	23988 <__malloc_unlock>
   221a0:	a805883a 	mov	r2,r21
   221a4:	003f6b06 	br	21f54 <__alt_data_end+0xfffe98b4>
   221a8:	a80b883a 	mov	r5,r21
   221ac:	9009883a 	mov	r4,r18
   221b0:	0021b600 	call	21b60 <memmove>
   221b4:	003f4e06 	br	21ef0 <__alt_data_end+0xfffe9850>
   221b8:	89000404 	addi	r4,r17,16
   221bc:	b93fbc16 	blt	r23,r4,220b0 <__alt_data_end+0xfffe9a10>
   221c0:	b0800317 	ldw	r2,12(r22)
   221c4:	b0c00217 	ldw	r3,8(r22)
   221c8:	81bfff04 	addi	r6,r16,-4
   221cc:	01000904 	movi	r4,36
   221d0:	18800315 	stw	r2,12(r3)
   221d4:	10c00215 	stw	r3,8(r2)
   221d8:	b4800204 	addi	r18,r22,8
   221dc:	21804336 	bltu	r4,r6,222ec <_realloc_r+0x508>
   221e0:	008004c4 	movi	r2,19
   221e4:	11803f2e 	bgeu	r2,r6,222e4 <_realloc_r+0x500>
   221e8:	a8800017 	ldw	r2,0(r21)
   221ec:	b0800215 	stw	r2,8(r22)
   221f0:	a8800117 	ldw	r2,4(r21)
   221f4:	b0800315 	stw	r2,12(r22)
   221f8:	008006c4 	movi	r2,27
   221fc:	11803f36 	bltu	r2,r6,222fc <_realloc_r+0x518>
   22200:	b0800404 	addi	r2,r22,16
   22204:	ad400204 	addi	r21,r21,8
   22208:	a8c00017 	ldw	r3,0(r21)
   2220c:	10c00015 	stw	r3,0(r2)
   22210:	a8c00117 	ldw	r3,4(r21)
   22214:	10c00115 	stw	r3,4(r2)
   22218:	a8c00217 	ldw	r3,8(r21)
   2221c:	10c00215 	stw	r3,8(r2)
   22220:	b447883a 	add	r3,r22,r17
   22224:	bc45c83a 	sub	r2,r23,r17
   22228:	e0c00215 	stw	r3,8(fp)
   2222c:	10800054 	ori	r2,r2,1
   22230:	18800115 	stw	r2,4(r3)
   22234:	b0800117 	ldw	r2,4(r22)
   22238:	a009883a 	mov	r4,r20
   2223c:	1080004c 	andi	r2,r2,1
   22240:	1462b03a 	or	r17,r2,r17
   22244:	b4400115 	stw	r17,4(r22)
   22248:	00239880 	call	23988 <__malloc_unlock>
   2224c:	9005883a 	mov	r2,r18
   22250:	003f4006 	br	21f54 <__alt_data_end+0xfffe98b4>
   22254:	a8c00217 	ldw	r3,8(r21)
   22258:	90c00215 	stw	r3,8(r18)
   2225c:	a8c00317 	ldw	r3,12(r21)
   22260:	90c00315 	stw	r3,12(r18)
   22264:	30801126 	beq	r6,r2,222ac <_realloc_r+0x4c8>
   22268:	90800404 	addi	r2,r18,16
   2226c:	a8c00404 	addi	r3,r21,16
   22270:	003f1906 	br	21ed8 <__alt_data_end+0xfffe9838>
   22274:	90ffff17 	ldw	r3,-4(r18)
   22278:	00bfff04 	movi	r2,-4
   2227c:	a825883a 	mov	r18,r21
   22280:	1884703a 	and	r2,r3,r2
   22284:	80a1883a 	add	r16,r16,r2
   22288:	003f2406 	br	21f1c <__alt_data_end+0xfffe987c>
   2228c:	a8800217 	ldw	r2,8(r21)
   22290:	b0800415 	stw	r2,16(r22)
   22294:	a8800317 	ldw	r2,12(r21)
   22298:	b0800515 	stw	r2,20(r22)
   2229c:	31000a26 	beq	r6,r4,222c8 <_realloc_r+0x4e4>
   222a0:	b0800604 	addi	r2,r22,24
   222a4:	ad400404 	addi	r21,r21,16
   222a8:	003fa906 	br	22150 <__alt_data_end+0xfffe9ab0>
   222ac:	a9000417 	ldw	r4,16(r21)
   222b0:	90800604 	addi	r2,r18,24
   222b4:	a8c00604 	addi	r3,r21,24
   222b8:	91000415 	stw	r4,16(r18)
   222bc:	a9000517 	ldw	r4,20(r21)
   222c0:	91000515 	stw	r4,20(r18)
   222c4:	003f0406 	br	21ed8 <__alt_data_end+0xfffe9838>
   222c8:	a8c00417 	ldw	r3,16(r21)
   222cc:	ad400604 	addi	r21,r21,24
   222d0:	b0800804 	addi	r2,r22,32
   222d4:	b0c00615 	stw	r3,24(r22)
   222d8:	a8ffff17 	ldw	r3,-4(r21)
   222dc:	b0c00715 	stw	r3,28(r22)
   222e0:	003f9b06 	br	22150 <__alt_data_end+0xfffe9ab0>
   222e4:	9005883a 	mov	r2,r18
   222e8:	003fc706 	br	22208 <__alt_data_end+0xfffe9b68>
   222ec:	a80b883a 	mov	r5,r21
   222f0:	9009883a 	mov	r4,r18
   222f4:	0021b600 	call	21b60 <memmove>
   222f8:	003fc906 	br	22220 <__alt_data_end+0xfffe9b80>
   222fc:	a8800217 	ldw	r2,8(r21)
   22300:	b0800415 	stw	r2,16(r22)
   22304:	a8800317 	ldw	r2,12(r21)
   22308:	b0800515 	stw	r2,20(r22)
   2230c:	31000726 	beq	r6,r4,2232c <_realloc_r+0x548>
   22310:	b0800604 	addi	r2,r22,24
   22314:	ad400404 	addi	r21,r21,16
   22318:	003fbb06 	br	22208 <__alt_data_end+0xfffe9b68>
   2231c:	a009883a 	mov	r4,r20
   22320:	00239880 	call	23988 <__malloc_unlock>
   22324:	0005883a 	mov	r2,zero
   22328:	003f0a06 	br	21f54 <__alt_data_end+0xfffe98b4>
   2232c:	a8c00417 	ldw	r3,16(r21)
   22330:	ad400604 	addi	r21,r21,24
   22334:	b0800804 	addi	r2,r22,32
   22338:	b0c00615 	stw	r3,24(r22)
   2233c:	a8ffff17 	ldw	r3,-4(r21)
   22340:	b0c00715 	stw	r3,28(r22)
   22344:	003fb006 	br	22208 <__alt_data_end+0xfffe9b68>

00022348 <_sbrk_r>:
   22348:	defffd04 	addi	sp,sp,-12
   2234c:	dc000015 	stw	r16,0(sp)
   22350:	040000f4 	movhi	r16,3
   22354:	dc400115 	stw	r17,4(sp)
   22358:	84296f04 	addi	r16,r16,-23108
   2235c:	2023883a 	mov	r17,r4
   22360:	2809883a 	mov	r4,r5
   22364:	dfc00215 	stw	ra,8(sp)
   22368:	80000015 	stw	zero,0(r16)
   2236c:	0023b700 	call	23b70 <sbrk>
   22370:	00ffffc4 	movi	r3,-1
   22374:	10c00526 	beq	r2,r3,2238c <_sbrk_r+0x44>
   22378:	dfc00217 	ldw	ra,8(sp)
   2237c:	dc400117 	ldw	r17,4(sp)
   22380:	dc000017 	ldw	r16,0(sp)
   22384:	dec00304 	addi	sp,sp,12
   22388:	f800283a 	ret
   2238c:	80c00017 	ldw	r3,0(r16)
   22390:	183ff926 	beq	r3,zero,22378 <__alt_data_end+0xfffe9cd8>
   22394:	88c00015 	stw	r3,0(r17)
   22398:	003ff706 	br	22378 <__alt_data_end+0xfffe9cd8>

0002239c <__sread>:
   2239c:	defffe04 	addi	sp,sp,-8
   223a0:	dc000015 	stw	r16,0(sp)
   223a4:	2821883a 	mov	r16,r5
   223a8:	2940038f 	ldh	r5,14(r5)
   223ac:	dfc00115 	stw	ra,4(sp)
   223b0:	00230dc0 	call	230dc <_read_r>
   223b4:	10000716 	blt	r2,zero,223d4 <__sread+0x38>
   223b8:	80c01417 	ldw	r3,80(r16)
   223bc:	1887883a 	add	r3,r3,r2
   223c0:	80c01415 	stw	r3,80(r16)
   223c4:	dfc00117 	ldw	ra,4(sp)
   223c8:	dc000017 	ldw	r16,0(sp)
   223cc:	dec00204 	addi	sp,sp,8
   223d0:	f800283a 	ret
   223d4:	80c0030b 	ldhu	r3,12(r16)
   223d8:	18fbffcc 	andi	r3,r3,61439
   223dc:	80c0030d 	sth	r3,12(r16)
   223e0:	dfc00117 	ldw	ra,4(sp)
   223e4:	dc000017 	ldw	r16,0(sp)
   223e8:	dec00204 	addi	sp,sp,8
   223ec:	f800283a 	ret

000223f0 <__seofread>:
   223f0:	0005883a 	mov	r2,zero
   223f4:	f800283a 	ret

000223f8 <__swrite>:
   223f8:	2880030b 	ldhu	r2,12(r5)
   223fc:	defffb04 	addi	sp,sp,-20
   22400:	dcc00315 	stw	r19,12(sp)
   22404:	dc800215 	stw	r18,8(sp)
   22408:	dc400115 	stw	r17,4(sp)
   2240c:	dc000015 	stw	r16,0(sp)
   22410:	dfc00415 	stw	ra,16(sp)
   22414:	10c0400c 	andi	r3,r2,256
   22418:	2821883a 	mov	r16,r5
   2241c:	2023883a 	mov	r17,r4
   22420:	3025883a 	mov	r18,r6
   22424:	3827883a 	mov	r19,r7
   22428:	18000526 	beq	r3,zero,22440 <__swrite+0x48>
   2242c:	2940038f 	ldh	r5,14(r5)
   22430:	01c00084 	movi	r7,2
   22434:	000d883a 	mov	r6,zero
   22438:	0022ec00 	call	22ec0 <_lseek_r>
   2243c:	8080030b 	ldhu	r2,12(r16)
   22440:	8140038f 	ldh	r5,14(r16)
   22444:	10bbffcc 	andi	r2,r2,61439
   22448:	980f883a 	mov	r7,r19
   2244c:	900d883a 	mov	r6,r18
   22450:	8809883a 	mov	r4,r17
   22454:	8080030d 	sth	r2,12(r16)
   22458:	dfc00417 	ldw	ra,16(sp)
   2245c:	dcc00317 	ldw	r19,12(sp)
   22460:	dc800217 	ldw	r18,8(sp)
   22464:	dc400117 	ldw	r17,4(sp)
   22468:	dc000017 	ldw	r16,0(sp)
   2246c:	dec00504 	addi	sp,sp,20
   22470:	00224d81 	jmpi	224d8 <_write_r>

00022474 <__sseek>:
   22474:	defffe04 	addi	sp,sp,-8
   22478:	dc000015 	stw	r16,0(sp)
   2247c:	2821883a 	mov	r16,r5
   22480:	2940038f 	ldh	r5,14(r5)
   22484:	dfc00115 	stw	ra,4(sp)
   22488:	0022ec00 	call	22ec0 <_lseek_r>
   2248c:	00ffffc4 	movi	r3,-1
   22490:	10c00826 	beq	r2,r3,224b4 <__sseek+0x40>
   22494:	80c0030b 	ldhu	r3,12(r16)
   22498:	80801415 	stw	r2,80(r16)
   2249c:	18c40014 	ori	r3,r3,4096
   224a0:	80c0030d 	sth	r3,12(r16)
   224a4:	dfc00117 	ldw	ra,4(sp)
   224a8:	dc000017 	ldw	r16,0(sp)
   224ac:	dec00204 	addi	sp,sp,8
   224b0:	f800283a 	ret
   224b4:	80c0030b 	ldhu	r3,12(r16)
   224b8:	18fbffcc 	andi	r3,r3,61439
   224bc:	80c0030d 	sth	r3,12(r16)
   224c0:	dfc00117 	ldw	ra,4(sp)
   224c4:	dc000017 	ldw	r16,0(sp)
   224c8:	dec00204 	addi	sp,sp,8
   224cc:	f800283a 	ret

000224d0 <__sclose>:
   224d0:	2940038f 	ldh	r5,14(r5)
   224d4:	002268c1 	jmpi	2268c <_close_r>

000224d8 <_write_r>:
   224d8:	defffd04 	addi	sp,sp,-12
   224dc:	2805883a 	mov	r2,r5
   224e0:	dc000015 	stw	r16,0(sp)
   224e4:	040000f4 	movhi	r16,3
   224e8:	dc400115 	stw	r17,4(sp)
   224ec:	300b883a 	mov	r5,r6
   224f0:	84296f04 	addi	r16,r16,-23108
   224f4:	2023883a 	mov	r17,r4
   224f8:	380d883a 	mov	r6,r7
   224fc:	1009883a 	mov	r4,r2
   22500:	dfc00215 	stw	ra,8(sp)
   22504:	80000015 	stw	zero,0(r16)
   22508:	0023c8c0 	call	23c8c <write>
   2250c:	00ffffc4 	movi	r3,-1
   22510:	10c00526 	beq	r2,r3,22528 <_write_r+0x50>
   22514:	dfc00217 	ldw	ra,8(sp)
   22518:	dc400117 	ldw	r17,4(sp)
   2251c:	dc000017 	ldw	r16,0(sp)
   22520:	dec00304 	addi	sp,sp,12
   22524:	f800283a 	ret
   22528:	80c00017 	ldw	r3,0(r16)
   2252c:	183ff926 	beq	r3,zero,22514 <__alt_data_end+0xfffe9e74>
   22530:	88c00015 	stw	r3,0(r17)
   22534:	003ff706 	br	22514 <__alt_data_end+0xfffe9e74>

00022538 <__swsetup_r>:
   22538:	008000f4 	movhi	r2,3
   2253c:	defffd04 	addi	sp,sp,-12
   22540:	10a27804 	addi	r2,r2,-30240
   22544:	dc400115 	stw	r17,4(sp)
   22548:	2023883a 	mov	r17,r4
   2254c:	11000017 	ldw	r4,0(r2)
   22550:	dc000015 	stw	r16,0(sp)
   22554:	dfc00215 	stw	ra,8(sp)
   22558:	2821883a 	mov	r16,r5
   2255c:	20000226 	beq	r4,zero,22568 <__swsetup_r+0x30>
   22560:	20800e17 	ldw	r2,56(r4)
   22564:	10003126 	beq	r2,zero,2262c <__swsetup_r+0xf4>
   22568:	8080030b 	ldhu	r2,12(r16)
   2256c:	10c0020c 	andi	r3,r2,8
   22570:	1009883a 	mov	r4,r2
   22574:	18000f26 	beq	r3,zero,225b4 <__swsetup_r+0x7c>
   22578:	80c00417 	ldw	r3,16(r16)
   2257c:	18001526 	beq	r3,zero,225d4 <__swsetup_r+0x9c>
   22580:	1100004c 	andi	r4,r2,1
   22584:	20001c1e 	bne	r4,zero,225f8 <__swsetup_r+0xc0>
   22588:	1080008c 	andi	r2,r2,2
   2258c:	1000291e 	bne	r2,zero,22634 <__swsetup_r+0xfc>
   22590:	80800517 	ldw	r2,20(r16)
   22594:	80800215 	stw	r2,8(r16)
   22598:	18001c26 	beq	r3,zero,2260c <__swsetup_r+0xd4>
   2259c:	0005883a 	mov	r2,zero
   225a0:	dfc00217 	ldw	ra,8(sp)
   225a4:	dc400117 	ldw	r17,4(sp)
   225a8:	dc000017 	ldw	r16,0(sp)
   225ac:	dec00304 	addi	sp,sp,12
   225b0:	f800283a 	ret
   225b4:	2080040c 	andi	r2,r4,16
   225b8:	10002e26 	beq	r2,zero,22674 <__swsetup_r+0x13c>
   225bc:	2080010c 	andi	r2,r4,4
   225c0:	10001e1e 	bne	r2,zero,2263c <__swsetup_r+0x104>
   225c4:	80c00417 	ldw	r3,16(r16)
   225c8:	20800214 	ori	r2,r4,8
   225cc:	8080030d 	sth	r2,12(r16)
   225d0:	183feb1e 	bne	r3,zero,22580 <__alt_data_end+0xfffe9ee0>
   225d4:	1100a00c 	andi	r4,r2,640
   225d8:	01408004 	movi	r5,512
   225dc:	217fe826 	beq	r4,r5,22580 <__alt_data_end+0xfffe9ee0>
   225e0:	800b883a 	mov	r5,r16
   225e4:	8809883a 	mov	r4,r17
   225e8:	0022f200 	call	22f20 <__smakebuf_r>
   225ec:	8080030b 	ldhu	r2,12(r16)
   225f0:	80c00417 	ldw	r3,16(r16)
   225f4:	003fe206 	br	22580 <__alt_data_end+0xfffe9ee0>
   225f8:	80800517 	ldw	r2,20(r16)
   225fc:	80000215 	stw	zero,8(r16)
   22600:	0085c83a 	sub	r2,zero,r2
   22604:	80800615 	stw	r2,24(r16)
   22608:	183fe41e 	bne	r3,zero,2259c <__alt_data_end+0xfffe9efc>
   2260c:	80c0030b 	ldhu	r3,12(r16)
   22610:	0005883a 	mov	r2,zero
   22614:	1900200c 	andi	r4,r3,128
   22618:	203fe126 	beq	r4,zero,225a0 <__alt_data_end+0xfffe9f00>
   2261c:	18c01014 	ori	r3,r3,64
   22620:	80c0030d 	sth	r3,12(r16)
   22624:	00bfffc4 	movi	r2,-1
   22628:	003fdd06 	br	225a0 <__alt_data_end+0xfffe9f00>
   2262c:	0020a880 	call	20a88 <__sinit>
   22630:	003fcd06 	br	22568 <__alt_data_end+0xfffe9ec8>
   22634:	0005883a 	mov	r2,zero
   22638:	003fd606 	br	22594 <__alt_data_end+0xfffe9ef4>
   2263c:	81400c17 	ldw	r5,48(r16)
   22640:	28000626 	beq	r5,zero,2265c <__swsetup_r+0x124>
   22644:	80801004 	addi	r2,r16,64
   22648:	28800326 	beq	r5,r2,22658 <__swsetup_r+0x120>
   2264c:	8809883a 	mov	r4,r17
   22650:	0022bb00 	call	22bb0 <_free_r>
   22654:	8100030b 	ldhu	r4,12(r16)
   22658:	80000c15 	stw	zero,48(r16)
   2265c:	80c00417 	ldw	r3,16(r16)
   22660:	00bff6c4 	movi	r2,-37
   22664:	1108703a 	and	r4,r2,r4
   22668:	80000115 	stw	zero,4(r16)
   2266c:	80c00015 	stw	r3,0(r16)
   22670:	003fd506 	br	225c8 <__alt_data_end+0xfffe9f28>
   22674:	00800244 	movi	r2,9
   22678:	88800015 	stw	r2,0(r17)
   2267c:	20801014 	ori	r2,r4,64
   22680:	8080030d 	sth	r2,12(r16)
   22684:	00bfffc4 	movi	r2,-1
   22688:	003fc506 	br	225a0 <__alt_data_end+0xfffe9f00>

0002268c <_close_r>:
   2268c:	defffd04 	addi	sp,sp,-12
   22690:	dc000015 	stw	r16,0(sp)
   22694:	040000f4 	movhi	r16,3
   22698:	dc400115 	stw	r17,4(sp)
   2269c:	84296f04 	addi	r16,r16,-23108
   226a0:	2023883a 	mov	r17,r4
   226a4:	2809883a 	mov	r4,r5
   226a8:	dfc00215 	stw	ra,8(sp)
   226ac:	80000015 	stw	zero,0(r16)
   226b0:	00234040 	call	23404 <close>
   226b4:	00ffffc4 	movi	r3,-1
   226b8:	10c00526 	beq	r2,r3,226d0 <_close_r+0x44>
   226bc:	dfc00217 	ldw	ra,8(sp)
   226c0:	dc400117 	ldw	r17,4(sp)
   226c4:	dc000017 	ldw	r16,0(sp)
   226c8:	dec00304 	addi	sp,sp,12
   226cc:	f800283a 	ret
   226d0:	80c00017 	ldw	r3,0(r16)
   226d4:	183ff926 	beq	r3,zero,226bc <__alt_data_end+0xfffea01c>
   226d8:	88c00015 	stw	r3,0(r17)
   226dc:	003ff706 	br	226bc <__alt_data_end+0xfffea01c>

000226e0 <_fclose_r>:
   226e0:	28003926 	beq	r5,zero,227c8 <_fclose_r+0xe8>
   226e4:	defffc04 	addi	sp,sp,-16
   226e8:	dc400115 	stw	r17,4(sp)
   226ec:	dc000015 	stw	r16,0(sp)
   226f0:	dfc00315 	stw	ra,12(sp)
   226f4:	dc800215 	stw	r18,8(sp)
   226f8:	2023883a 	mov	r17,r4
   226fc:	2821883a 	mov	r16,r5
   22700:	20000226 	beq	r4,zero,2270c <_fclose_r+0x2c>
   22704:	20800e17 	ldw	r2,56(r4)
   22708:	10002726 	beq	r2,zero,227a8 <_fclose_r+0xc8>
   2270c:	8080030f 	ldh	r2,12(r16)
   22710:	1000071e 	bne	r2,zero,22730 <_fclose_r+0x50>
   22714:	0005883a 	mov	r2,zero
   22718:	dfc00317 	ldw	ra,12(sp)
   2271c:	dc800217 	ldw	r18,8(sp)
   22720:	dc400117 	ldw	r17,4(sp)
   22724:	dc000017 	ldw	r16,0(sp)
   22728:	dec00404 	addi	sp,sp,16
   2272c:	f800283a 	ret
   22730:	800b883a 	mov	r5,r16
   22734:	8809883a 	mov	r4,r17
   22738:	00227e40 	call	227e4 <__sflush_r>
   2273c:	1025883a 	mov	r18,r2
   22740:	80800b17 	ldw	r2,44(r16)
   22744:	10000426 	beq	r2,zero,22758 <_fclose_r+0x78>
   22748:	81400717 	ldw	r5,28(r16)
   2274c:	8809883a 	mov	r4,r17
   22750:	103ee83a 	callr	r2
   22754:	10001616 	blt	r2,zero,227b0 <_fclose_r+0xd0>
   22758:	8080030b 	ldhu	r2,12(r16)
   2275c:	1080200c 	andi	r2,r2,128
   22760:	1000151e 	bne	r2,zero,227b8 <_fclose_r+0xd8>
   22764:	81400c17 	ldw	r5,48(r16)
   22768:	28000526 	beq	r5,zero,22780 <_fclose_r+0xa0>
   2276c:	80801004 	addi	r2,r16,64
   22770:	28800226 	beq	r5,r2,2277c <_fclose_r+0x9c>
   22774:	8809883a 	mov	r4,r17
   22778:	0022bb00 	call	22bb0 <_free_r>
   2277c:	80000c15 	stw	zero,48(r16)
   22780:	81401117 	ldw	r5,68(r16)
   22784:	28000326 	beq	r5,zero,22794 <_fclose_r+0xb4>
   22788:	8809883a 	mov	r4,r17
   2278c:	0022bb00 	call	22bb0 <_free_r>
   22790:	80001115 	stw	zero,68(r16)
   22794:	0020a980 	call	20a98 <__sfp_lock_acquire>
   22798:	8000030d 	sth	zero,12(r16)
   2279c:	0020a9c0 	call	20a9c <__sfp_lock_release>
   227a0:	9005883a 	mov	r2,r18
   227a4:	003fdc06 	br	22718 <__alt_data_end+0xfffea078>
   227a8:	0020a880 	call	20a88 <__sinit>
   227ac:	003fd706 	br	2270c <__alt_data_end+0xfffea06c>
   227b0:	04bfffc4 	movi	r18,-1
   227b4:	003fe806 	br	22758 <__alt_data_end+0xfffea0b8>
   227b8:	81400417 	ldw	r5,16(r16)
   227bc:	8809883a 	mov	r4,r17
   227c0:	0022bb00 	call	22bb0 <_free_r>
   227c4:	003fe706 	br	22764 <__alt_data_end+0xfffea0c4>
   227c8:	0005883a 	mov	r2,zero
   227cc:	f800283a 	ret

000227d0 <fclose>:
   227d0:	008000f4 	movhi	r2,3
   227d4:	10a27804 	addi	r2,r2,-30240
   227d8:	200b883a 	mov	r5,r4
   227dc:	11000017 	ldw	r4,0(r2)
   227e0:	00226e01 	jmpi	226e0 <_fclose_r>

000227e4 <__sflush_r>:
   227e4:	2880030b 	ldhu	r2,12(r5)
   227e8:	defffb04 	addi	sp,sp,-20
   227ec:	dcc00315 	stw	r19,12(sp)
   227f0:	dc400115 	stw	r17,4(sp)
   227f4:	dfc00415 	stw	ra,16(sp)
   227f8:	dc800215 	stw	r18,8(sp)
   227fc:	dc000015 	stw	r16,0(sp)
   22800:	10c0020c 	andi	r3,r2,8
   22804:	2823883a 	mov	r17,r5
   22808:	2027883a 	mov	r19,r4
   2280c:	1800311e 	bne	r3,zero,228d4 <__sflush_r+0xf0>
   22810:	28c00117 	ldw	r3,4(r5)
   22814:	10820014 	ori	r2,r2,2048
   22818:	2880030d 	sth	r2,12(r5)
   2281c:	00c04b0e 	bge	zero,r3,2294c <__sflush_r+0x168>
   22820:	8a000a17 	ldw	r8,40(r17)
   22824:	40002326 	beq	r8,zero,228b4 <__sflush_r+0xd0>
   22828:	9c000017 	ldw	r16,0(r19)
   2282c:	10c4000c 	andi	r3,r2,4096
   22830:	98000015 	stw	zero,0(r19)
   22834:	18004826 	beq	r3,zero,22958 <__sflush_r+0x174>
   22838:	89801417 	ldw	r6,80(r17)
   2283c:	10c0010c 	andi	r3,r2,4
   22840:	18000626 	beq	r3,zero,2285c <__sflush_r+0x78>
   22844:	88c00117 	ldw	r3,4(r17)
   22848:	88800c17 	ldw	r2,48(r17)
   2284c:	30cdc83a 	sub	r6,r6,r3
   22850:	10000226 	beq	r2,zero,2285c <__sflush_r+0x78>
   22854:	88800f17 	ldw	r2,60(r17)
   22858:	308dc83a 	sub	r6,r6,r2
   2285c:	89400717 	ldw	r5,28(r17)
   22860:	000f883a 	mov	r7,zero
   22864:	9809883a 	mov	r4,r19
   22868:	403ee83a 	callr	r8
   2286c:	00ffffc4 	movi	r3,-1
   22870:	10c04426 	beq	r2,r3,22984 <__sflush_r+0x1a0>
   22874:	88c0030b 	ldhu	r3,12(r17)
   22878:	89000417 	ldw	r4,16(r17)
   2287c:	88000115 	stw	zero,4(r17)
   22880:	197dffcc 	andi	r5,r3,63487
   22884:	8940030d 	sth	r5,12(r17)
   22888:	89000015 	stw	r4,0(r17)
   2288c:	18c4000c 	andi	r3,r3,4096
   22890:	18002c1e 	bne	r3,zero,22944 <__sflush_r+0x160>
   22894:	89400c17 	ldw	r5,48(r17)
   22898:	9c000015 	stw	r16,0(r19)
   2289c:	28000526 	beq	r5,zero,228b4 <__sflush_r+0xd0>
   228a0:	88801004 	addi	r2,r17,64
   228a4:	28800226 	beq	r5,r2,228b0 <__sflush_r+0xcc>
   228a8:	9809883a 	mov	r4,r19
   228ac:	0022bb00 	call	22bb0 <_free_r>
   228b0:	88000c15 	stw	zero,48(r17)
   228b4:	0005883a 	mov	r2,zero
   228b8:	dfc00417 	ldw	ra,16(sp)
   228bc:	dcc00317 	ldw	r19,12(sp)
   228c0:	dc800217 	ldw	r18,8(sp)
   228c4:	dc400117 	ldw	r17,4(sp)
   228c8:	dc000017 	ldw	r16,0(sp)
   228cc:	dec00504 	addi	sp,sp,20
   228d0:	f800283a 	ret
   228d4:	2c800417 	ldw	r18,16(r5)
   228d8:	903ff626 	beq	r18,zero,228b4 <__alt_data_end+0xfffea214>
   228dc:	2c000017 	ldw	r16,0(r5)
   228e0:	108000cc 	andi	r2,r2,3
   228e4:	2c800015 	stw	r18,0(r5)
   228e8:	84a1c83a 	sub	r16,r16,r18
   228ec:	1000131e 	bne	r2,zero,2293c <__sflush_r+0x158>
   228f0:	28800517 	ldw	r2,20(r5)
   228f4:	88800215 	stw	r2,8(r17)
   228f8:	04000316 	blt	zero,r16,22908 <__sflush_r+0x124>
   228fc:	003fed06 	br	228b4 <__alt_data_end+0xfffea214>
   22900:	90a5883a 	add	r18,r18,r2
   22904:	043feb0e 	bge	zero,r16,228b4 <__alt_data_end+0xfffea214>
   22908:	88800917 	ldw	r2,36(r17)
   2290c:	89400717 	ldw	r5,28(r17)
   22910:	800f883a 	mov	r7,r16
   22914:	900d883a 	mov	r6,r18
   22918:	9809883a 	mov	r4,r19
   2291c:	103ee83a 	callr	r2
   22920:	80a1c83a 	sub	r16,r16,r2
   22924:	00bff616 	blt	zero,r2,22900 <__alt_data_end+0xfffea260>
   22928:	88c0030b 	ldhu	r3,12(r17)
   2292c:	00bfffc4 	movi	r2,-1
   22930:	18c01014 	ori	r3,r3,64
   22934:	88c0030d 	sth	r3,12(r17)
   22938:	003fdf06 	br	228b8 <__alt_data_end+0xfffea218>
   2293c:	0005883a 	mov	r2,zero
   22940:	003fec06 	br	228f4 <__alt_data_end+0xfffea254>
   22944:	88801415 	stw	r2,80(r17)
   22948:	003fd206 	br	22894 <__alt_data_end+0xfffea1f4>
   2294c:	28c00f17 	ldw	r3,60(r5)
   22950:	00ffb316 	blt	zero,r3,22820 <__alt_data_end+0xfffea180>
   22954:	003fd706 	br	228b4 <__alt_data_end+0xfffea214>
   22958:	89400717 	ldw	r5,28(r17)
   2295c:	000d883a 	mov	r6,zero
   22960:	01c00044 	movi	r7,1
   22964:	9809883a 	mov	r4,r19
   22968:	403ee83a 	callr	r8
   2296c:	100d883a 	mov	r6,r2
   22970:	00bfffc4 	movi	r2,-1
   22974:	30801426 	beq	r6,r2,229c8 <__sflush_r+0x1e4>
   22978:	8880030b 	ldhu	r2,12(r17)
   2297c:	8a000a17 	ldw	r8,40(r17)
   22980:	003fae06 	br	2283c <__alt_data_end+0xfffea19c>
   22984:	98c00017 	ldw	r3,0(r19)
   22988:	183fba26 	beq	r3,zero,22874 <__alt_data_end+0xfffea1d4>
   2298c:	01000744 	movi	r4,29
   22990:	19000626 	beq	r3,r4,229ac <__sflush_r+0x1c8>
   22994:	01000584 	movi	r4,22
   22998:	19000426 	beq	r3,r4,229ac <__sflush_r+0x1c8>
   2299c:	88c0030b 	ldhu	r3,12(r17)
   229a0:	18c01014 	ori	r3,r3,64
   229a4:	88c0030d 	sth	r3,12(r17)
   229a8:	003fc306 	br	228b8 <__alt_data_end+0xfffea218>
   229ac:	8880030b 	ldhu	r2,12(r17)
   229b0:	88c00417 	ldw	r3,16(r17)
   229b4:	88000115 	stw	zero,4(r17)
   229b8:	10bdffcc 	andi	r2,r2,63487
   229bc:	8880030d 	sth	r2,12(r17)
   229c0:	88c00015 	stw	r3,0(r17)
   229c4:	003fb306 	br	22894 <__alt_data_end+0xfffea1f4>
   229c8:	98800017 	ldw	r2,0(r19)
   229cc:	103fea26 	beq	r2,zero,22978 <__alt_data_end+0xfffea2d8>
   229d0:	00c00744 	movi	r3,29
   229d4:	10c00226 	beq	r2,r3,229e0 <__sflush_r+0x1fc>
   229d8:	00c00584 	movi	r3,22
   229dc:	10c0031e 	bne	r2,r3,229ec <__sflush_r+0x208>
   229e0:	9c000015 	stw	r16,0(r19)
   229e4:	0005883a 	mov	r2,zero
   229e8:	003fb306 	br	228b8 <__alt_data_end+0xfffea218>
   229ec:	88c0030b 	ldhu	r3,12(r17)
   229f0:	3005883a 	mov	r2,r6
   229f4:	18c01014 	ori	r3,r3,64
   229f8:	88c0030d 	sth	r3,12(r17)
   229fc:	003fae06 	br	228b8 <__alt_data_end+0xfffea218>

00022a00 <_fflush_r>:
   22a00:	defffd04 	addi	sp,sp,-12
   22a04:	dc000115 	stw	r16,4(sp)
   22a08:	dfc00215 	stw	ra,8(sp)
   22a0c:	2021883a 	mov	r16,r4
   22a10:	20000226 	beq	r4,zero,22a1c <_fflush_r+0x1c>
   22a14:	20800e17 	ldw	r2,56(r4)
   22a18:	10000c26 	beq	r2,zero,22a4c <_fflush_r+0x4c>
   22a1c:	2880030f 	ldh	r2,12(r5)
   22a20:	1000051e 	bne	r2,zero,22a38 <_fflush_r+0x38>
   22a24:	0005883a 	mov	r2,zero
   22a28:	dfc00217 	ldw	ra,8(sp)
   22a2c:	dc000117 	ldw	r16,4(sp)
   22a30:	dec00304 	addi	sp,sp,12
   22a34:	f800283a 	ret
   22a38:	8009883a 	mov	r4,r16
   22a3c:	dfc00217 	ldw	ra,8(sp)
   22a40:	dc000117 	ldw	r16,4(sp)
   22a44:	dec00304 	addi	sp,sp,12
   22a48:	00227e41 	jmpi	227e4 <__sflush_r>
   22a4c:	d9400015 	stw	r5,0(sp)
   22a50:	0020a880 	call	20a88 <__sinit>
   22a54:	d9400017 	ldw	r5,0(sp)
   22a58:	003ff006 	br	22a1c <__alt_data_end+0xfffea37c>

00022a5c <fflush>:
   22a5c:	20000526 	beq	r4,zero,22a74 <fflush+0x18>
   22a60:	008000f4 	movhi	r2,3
   22a64:	10a27804 	addi	r2,r2,-30240
   22a68:	200b883a 	mov	r5,r4
   22a6c:	11000017 	ldw	r4,0(r2)
   22a70:	0022a001 	jmpi	22a00 <_fflush_r>
   22a74:	008000f4 	movhi	r2,3
   22a78:	10a27704 	addi	r2,r2,-30244
   22a7c:	11000017 	ldw	r4,0(r2)
   22a80:	014000b4 	movhi	r5,2
   22a84:	294a8004 	addi	r5,r5,10752
   22a88:	00210641 	jmpi	21064 <_fwalk_reent>

00022a8c <_malloc_trim_r>:
   22a8c:	defffb04 	addi	sp,sp,-20
   22a90:	dcc00315 	stw	r19,12(sp)
   22a94:	04c000b4 	movhi	r19,2
   22a98:	dc800215 	stw	r18,8(sp)
   22a9c:	dc400115 	stw	r17,4(sp)
   22aa0:	dc000015 	stw	r16,0(sp)
   22aa4:	dfc00415 	stw	ra,16(sp)
   22aa8:	2821883a 	mov	r16,r5
   22aac:	9cdcab04 	addi	r19,r19,29356
   22ab0:	2025883a 	mov	r18,r4
   22ab4:	00239640 	call	23964 <__malloc_lock>
   22ab8:	98800217 	ldw	r2,8(r19)
   22abc:	14400117 	ldw	r17,4(r2)
   22ac0:	00bfff04 	movi	r2,-4
   22ac4:	88a2703a 	and	r17,r17,r2
   22ac8:	8c21c83a 	sub	r16,r17,r16
   22acc:	8403fbc4 	addi	r16,r16,4079
   22ad0:	8020d33a 	srli	r16,r16,12
   22ad4:	0083ffc4 	movi	r2,4095
   22ad8:	843fffc4 	addi	r16,r16,-1
   22adc:	8020933a 	slli	r16,r16,12
   22ae0:	1400060e 	bge	r2,r16,22afc <_malloc_trim_r+0x70>
   22ae4:	000b883a 	mov	r5,zero
   22ae8:	9009883a 	mov	r4,r18
   22aec:	00223480 	call	22348 <_sbrk_r>
   22af0:	98c00217 	ldw	r3,8(r19)
   22af4:	1c47883a 	add	r3,r3,r17
   22af8:	10c00a26 	beq	r2,r3,22b24 <_malloc_trim_r+0x98>
   22afc:	9009883a 	mov	r4,r18
   22b00:	00239880 	call	23988 <__malloc_unlock>
   22b04:	0005883a 	mov	r2,zero
   22b08:	dfc00417 	ldw	ra,16(sp)
   22b0c:	dcc00317 	ldw	r19,12(sp)
   22b10:	dc800217 	ldw	r18,8(sp)
   22b14:	dc400117 	ldw	r17,4(sp)
   22b18:	dc000017 	ldw	r16,0(sp)
   22b1c:	dec00504 	addi	sp,sp,20
   22b20:	f800283a 	ret
   22b24:	040bc83a 	sub	r5,zero,r16
   22b28:	9009883a 	mov	r4,r18
   22b2c:	00223480 	call	22348 <_sbrk_r>
   22b30:	00ffffc4 	movi	r3,-1
   22b34:	10c00d26 	beq	r2,r3,22b6c <_malloc_trim_r+0xe0>
   22b38:	00c000f4 	movhi	r3,3
   22b3c:	18e97704 	addi	r3,r3,-23076
   22b40:	18800017 	ldw	r2,0(r3)
   22b44:	99000217 	ldw	r4,8(r19)
   22b48:	8c23c83a 	sub	r17,r17,r16
   22b4c:	8c400054 	ori	r17,r17,1
   22b50:	1421c83a 	sub	r16,r2,r16
   22b54:	24400115 	stw	r17,4(r4)
   22b58:	9009883a 	mov	r4,r18
   22b5c:	1c000015 	stw	r16,0(r3)
   22b60:	00239880 	call	23988 <__malloc_unlock>
   22b64:	00800044 	movi	r2,1
   22b68:	003fe706 	br	22b08 <__alt_data_end+0xfffea468>
   22b6c:	000b883a 	mov	r5,zero
   22b70:	9009883a 	mov	r4,r18
   22b74:	00223480 	call	22348 <_sbrk_r>
   22b78:	99000217 	ldw	r4,8(r19)
   22b7c:	014003c4 	movi	r5,15
   22b80:	1107c83a 	sub	r3,r2,r4
   22b84:	28ffdd0e 	bge	r5,r3,22afc <__alt_data_end+0xfffea45c>
   22b88:	014000f4 	movhi	r5,3
   22b8c:	29627904 	addi	r5,r5,-30236
   22b90:	29400017 	ldw	r5,0(r5)
   22b94:	18c00054 	ori	r3,r3,1
   22b98:	20c00115 	stw	r3,4(r4)
   22b9c:	00c000f4 	movhi	r3,3
   22ba0:	1145c83a 	sub	r2,r2,r5
   22ba4:	18e97704 	addi	r3,r3,-23076
   22ba8:	18800015 	stw	r2,0(r3)
   22bac:	003fd306 	br	22afc <__alt_data_end+0xfffea45c>

00022bb0 <_free_r>:
   22bb0:	28004126 	beq	r5,zero,22cb8 <_free_r+0x108>
   22bb4:	defffd04 	addi	sp,sp,-12
   22bb8:	dc400115 	stw	r17,4(sp)
   22bbc:	dc000015 	stw	r16,0(sp)
   22bc0:	2023883a 	mov	r17,r4
   22bc4:	2821883a 	mov	r16,r5
   22bc8:	dfc00215 	stw	ra,8(sp)
   22bcc:	00239640 	call	23964 <__malloc_lock>
   22bd0:	81ffff17 	ldw	r7,-4(r16)
   22bd4:	00bfff84 	movi	r2,-2
   22bd8:	010000b4 	movhi	r4,2
   22bdc:	81bffe04 	addi	r6,r16,-8
   22be0:	3884703a 	and	r2,r7,r2
   22be4:	211cab04 	addi	r4,r4,29356
   22be8:	308b883a 	add	r5,r6,r2
   22bec:	2a400117 	ldw	r9,4(r5)
   22bf0:	22000217 	ldw	r8,8(r4)
   22bf4:	00ffff04 	movi	r3,-4
   22bf8:	48c6703a 	and	r3,r9,r3
   22bfc:	2a005726 	beq	r5,r8,22d5c <_free_r+0x1ac>
   22c00:	28c00115 	stw	r3,4(r5)
   22c04:	39c0004c 	andi	r7,r7,1
   22c08:	3800091e 	bne	r7,zero,22c30 <_free_r+0x80>
   22c0c:	823ffe17 	ldw	r8,-8(r16)
   22c10:	22400204 	addi	r9,r4,8
   22c14:	320dc83a 	sub	r6,r6,r8
   22c18:	31c00217 	ldw	r7,8(r6)
   22c1c:	1205883a 	add	r2,r2,r8
   22c20:	3a406526 	beq	r7,r9,22db8 <_free_r+0x208>
   22c24:	32000317 	ldw	r8,12(r6)
   22c28:	3a000315 	stw	r8,12(r7)
   22c2c:	41c00215 	stw	r7,8(r8)
   22c30:	28cf883a 	add	r7,r5,r3
   22c34:	39c00117 	ldw	r7,4(r7)
   22c38:	39c0004c 	andi	r7,r7,1
   22c3c:	38003a26 	beq	r7,zero,22d28 <_free_r+0x178>
   22c40:	10c00054 	ori	r3,r2,1
   22c44:	30c00115 	stw	r3,4(r6)
   22c48:	3087883a 	add	r3,r6,r2
   22c4c:	18800015 	stw	r2,0(r3)
   22c50:	00c07fc4 	movi	r3,511
   22c54:	18801936 	bltu	r3,r2,22cbc <_free_r+0x10c>
   22c58:	1004d0fa 	srli	r2,r2,3
   22c5c:	01c00044 	movi	r7,1
   22c60:	21400117 	ldw	r5,4(r4)
   22c64:	10c00044 	addi	r3,r2,1
   22c68:	18c7883a 	add	r3,r3,r3
   22c6c:	1005d0ba 	srai	r2,r2,2
   22c70:	18c7883a 	add	r3,r3,r3
   22c74:	18c7883a 	add	r3,r3,r3
   22c78:	1907883a 	add	r3,r3,r4
   22c7c:	3884983a 	sll	r2,r7,r2
   22c80:	19c00017 	ldw	r7,0(r3)
   22c84:	1a3ffe04 	addi	r8,r3,-8
   22c88:	1144b03a 	or	r2,r2,r5
   22c8c:	32000315 	stw	r8,12(r6)
   22c90:	31c00215 	stw	r7,8(r6)
   22c94:	20800115 	stw	r2,4(r4)
   22c98:	19800015 	stw	r6,0(r3)
   22c9c:	39800315 	stw	r6,12(r7)
   22ca0:	8809883a 	mov	r4,r17
   22ca4:	dfc00217 	ldw	ra,8(sp)
   22ca8:	dc400117 	ldw	r17,4(sp)
   22cac:	dc000017 	ldw	r16,0(sp)
   22cb0:	dec00304 	addi	sp,sp,12
   22cb4:	00239881 	jmpi	23988 <__malloc_unlock>
   22cb8:	f800283a 	ret
   22cbc:	100ad27a 	srli	r5,r2,9
   22cc0:	00c00104 	movi	r3,4
   22cc4:	19404a36 	bltu	r3,r5,22df0 <_free_r+0x240>
   22cc8:	100ad1ba 	srli	r5,r2,6
   22ccc:	28c00e44 	addi	r3,r5,57
   22cd0:	18c7883a 	add	r3,r3,r3
   22cd4:	29400e04 	addi	r5,r5,56
   22cd8:	18c7883a 	add	r3,r3,r3
   22cdc:	18c7883a 	add	r3,r3,r3
   22ce0:	1909883a 	add	r4,r3,r4
   22ce4:	20c00017 	ldw	r3,0(r4)
   22ce8:	01c000b4 	movhi	r7,2
   22cec:	213ffe04 	addi	r4,r4,-8
   22cf0:	39dcab04 	addi	r7,r7,29356
   22cf4:	20c04426 	beq	r4,r3,22e08 <_free_r+0x258>
   22cf8:	01ffff04 	movi	r7,-4
   22cfc:	19400117 	ldw	r5,4(r3)
   22d00:	29ca703a 	and	r5,r5,r7
   22d04:	1140022e 	bgeu	r2,r5,22d10 <_free_r+0x160>
   22d08:	18c00217 	ldw	r3,8(r3)
   22d0c:	20fffb1e 	bne	r4,r3,22cfc <__alt_data_end+0xfffea65c>
   22d10:	19000317 	ldw	r4,12(r3)
   22d14:	31000315 	stw	r4,12(r6)
   22d18:	30c00215 	stw	r3,8(r6)
   22d1c:	21800215 	stw	r6,8(r4)
   22d20:	19800315 	stw	r6,12(r3)
   22d24:	003fde06 	br	22ca0 <__alt_data_end+0xfffea600>
   22d28:	29c00217 	ldw	r7,8(r5)
   22d2c:	10c5883a 	add	r2,r2,r3
   22d30:	00c000b4 	movhi	r3,2
   22d34:	18dcad04 	addi	r3,r3,29364
   22d38:	38c03b26 	beq	r7,r3,22e28 <_free_r+0x278>
   22d3c:	2a000317 	ldw	r8,12(r5)
   22d40:	11400054 	ori	r5,r2,1
   22d44:	3087883a 	add	r3,r6,r2
   22d48:	3a000315 	stw	r8,12(r7)
   22d4c:	41c00215 	stw	r7,8(r8)
   22d50:	31400115 	stw	r5,4(r6)
   22d54:	18800015 	stw	r2,0(r3)
   22d58:	003fbd06 	br	22c50 <__alt_data_end+0xfffea5b0>
   22d5c:	39c0004c 	andi	r7,r7,1
   22d60:	10c5883a 	add	r2,r2,r3
   22d64:	3800071e 	bne	r7,zero,22d84 <_free_r+0x1d4>
   22d68:	81fffe17 	ldw	r7,-8(r16)
   22d6c:	31cdc83a 	sub	r6,r6,r7
   22d70:	30c00317 	ldw	r3,12(r6)
   22d74:	31400217 	ldw	r5,8(r6)
   22d78:	11c5883a 	add	r2,r2,r7
   22d7c:	28c00315 	stw	r3,12(r5)
   22d80:	19400215 	stw	r5,8(r3)
   22d84:	10c00054 	ori	r3,r2,1
   22d88:	30c00115 	stw	r3,4(r6)
   22d8c:	00c000f4 	movhi	r3,3
   22d90:	18e27a04 	addi	r3,r3,-30232
   22d94:	18c00017 	ldw	r3,0(r3)
   22d98:	21800215 	stw	r6,8(r4)
   22d9c:	10ffc036 	bltu	r2,r3,22ca0 <__alt_data_end+0xfffea600>
   22da0:	008000f4 	movhi	r2,3
   22da4:	10a96e04 	addi	r2,r2,-23112
   22da8:	11400017 	ldw	r5,0(r2)
   22dac:	8809883a 	mov	r4,r17
   22db0:	0022a8c0 	call	22a8c <_malloc_trim_r>
   22db4:	003fba06 	br	22ca0 <__alt_data_end+0xfffea600>
   22db8:	28c9883a 	add	r4,r5,r3
   22dbc:	21000117 	ldw	r4,4(r4)
   22dc0:	2100004c 	andi	r4,r4,1
   22dc4:	2000391e 	bne	r4,zero,22eac <_free_r+0x2fc>
   22dc8:	29c00217 	ldw	r7,8(r5)
   22dcc:	29000317 	ldw	r4,12(r5)
   22dd0:	1885883a 	add	r2,r3,r2
   22dd4:	10c00054 	ori	r3,r2,1
   22dd8:	39000315 	stw	r4,12(r7)
   22ddc:	21c00215 	stw	r7,8(r4)
   22de0:	30c00115 	stw	r3,4(r6)
   22de4:	308d883a 	add	r6,r6,r2
   22de8:	30800015 	stw	r2,0(r6)
   22dec:	003fac06 	br	22ca0 <__alt_data_end+0xfffea600>
   22df0:	00c00504 	movi	r3,20
   22df4:	19401536 	bltu	r3,r5,22e4c <_free_r+0x29c>
   22df8:	28c01704 	addi	r3,r5,92
   22dfc:	18c7883a 	add	r3,r3,r3
   22e00:	294016c4 	addi	r5,r5,91
   22e04:	003fb406 	br	22cd8 <__alt_data_end+0xfffea638>
   22e08:	280bd0ba 	srai	r5,r5,2
   22e0c:	00c00044 	movi	r3,1
   22e10:	38800117 	ldw	r2,4(r7)
   22e14:	194a983a 	sll	r5,r3,r5
   22e18:	2007883a 	mov	r3,r4
   22e1c:	2884b03a 	or	r2,r5,r2
   22e20:	38800115 	stw	r2,4(r7)
   22e24:	003fbb06 	br	22d14 <__alt_data_end+0xfffea674>
   22e28:	21800515 	stw	r6,20(r4)
   22e2c:	21800415 	stw	r6,16(r4)
   22e30:	10c00054 	ori	r3,r2,1
   22e34:	31c00315 	stw	r7,12(r6)
   22e38:	31c00215 	stw	r7,8(r6)
   22e3c:	30c00115 	stw	r3,4(r6)
   22e40:	308d883a 	add	r6,r6,r2
   22e44:	30800015 	stw	r2,0(r6)
   22e48:	003f9506 	br	22ca0 <__alt_data_end+0xfffea600>
   22e4c:	00c01504 	movi	r3,84
   22e50:	19400536 	bltu	r3,r5,22e68 <_free_r+0x2b8>
   22e54:	100ad33a 	srli	r5,r2,12
   22e58:	28c01bc4 	addi	r3,r5,111
   22e5c:	18c7883a 	add	r3,r3,r3
   22e60:	29401b84 	addi	r5,r5,110
   22e64:	003f9c06 	br	22cd8 <__alt_data_end+0xfffea638>
   22e68:	00c05504 	movi	r3,340
   22e6c:	19400536 	bltu	r3,r5,22e84 <_free_r+0x2d4>
   22e70:	100ad3fa 	srli	r5,r2,15
   22e74:	28c01e04 	addi	r3,r5,120
   22e78:	18c7883a 	add	r3,r3,r3
   22e7c:	29401dc4 	addi	r5,r5,119
   22e80:	003f9506 	br	22cd8 <__alt_data_end+0xfffea638>
   22e84:	00c15504 	movi	r3,1364
   22e88:	19400536 	bltu	r3,r5,22ea0 <_free_r+0x2f0>
   22e8c:	100ad4ba 	srli	r5,r2,18
   22e90:	28c01f44 	addi	r3,r5,125
   22e94:	18c7883a 	add	r3,r3,r3
   22e98:	29401f04 	addi	r5,r5,124
   22e9c:	003f8e06 	br	22cd8 <__alt_data_end+0xfffea638>
   22ea0:	00c03f84 	movi	r3,254
   22ea4:	01401f84 	movi	r5,126
   22ea8:	003f8b06 	br	22cd8 <__alt_data_end+0xfffea638>
   22eac:	10c00054 	ori	r3,r2,1
   22eb0:	30c00115 	stw	r3,4(r6)
   22eb4:	308d883a 	add	r6,r6,r2
   22eb8:	30800015 	stw	r2,0(r6)
   22ebc:	003f7806 	br	22ca0 <__alt_data_end+0xfffea600>

00022ec0 <_lseek_r>:
   22ec0:	defffd04 	addi	sp,sp,-12
   22ec4:	2805883a 	mov	r2,r5
   22ec8:	dc000015 	stw	r16,0(sp)
   22ecc:	040000f4 	movhi	r16,3
   22ed0:	dc400115 	stw	r17,4(sp)
   22ed4:	300b883a 	mov	r5,r6
   22ed8:	84296f04 	addi	r16,r16,-23108
   22edc:	2023883a 	mov	r17,r4
   22ee0:	380d883a 	mov	r6,r7
   22ee4:	1009883a 	mov	r4,r2
   22ee8:	dfc00215 	stw	ra,8(sp)
   22eec:	80000015 	stw	zero,0(r16)
   22ef0:	002380c0 	call	2380c <lseek>
   22ef4:	00ffffc4 	movi	r3,-1
   22ef8:	10c00526 	beq	r2,r3,22f10 <_lseek_r+0x50>
   22efc:	dfc00217 	ldw	ra,8(sp)
   22f00:	dc400117 	ldw	r17,4(sp)
   22f04:	dc000017 	ldw	r16,0(sp)
   22f08:	dec00304 	addi	sp,sp,12
   22f0c:	f800283a 	ret
   22f10:	80c00017 	ldw	r3,0(r16)
   22f14:	183ff926 	beq	r3,zero,22efc <__alt_data_end+0xfffea85c>
   22f18:	88c00015 	stw	r3,0(r17)
   22f1c:	003ff706 	br	22efc <__alt_data_end+0xfffea85c>

00022f20 <__smakebuf_r>:
   22f20:	2880030b 	ldhu	r2,12(r5)
   22f24:	10c0008c 	andi	r3,r2,2
   22f28:	1800411e 	bne	r3,zero,23030 <__smakebuf_r+0x110>
   22f2c:	deffec04 	addi	sp,sp,-80
   22f30:	dc000f15 	stw	r16,60(sp)
   22f34:	2821883a 	mov	r16,r5
   22f38:	2940038f 	ldh	r5,14(r5)
   22f3c:	dc401015 	stw	r17,64(sp)
   22f40:	dfc01315 	stw	ra,76(sp)
   22f44:	dcc01215 	stw	r19,72(sp)
   22f48:	dc801115 	stw	r18,68(sp)
   22f4c:	2023883a 	mov	r17,r4
   22f50:	28001c16 	blt	r5,zero,22fc4 <__smakebuf_r+0xa4>
   22f54:	d80d883a 	mov	r6,sp
   22f58:	002313c0 	call	2313c <_fstat_r>
   22f5c:	10001816 	blt	r2,zero,22fc0 <__smakebuf_r+0xa0>
   22f60:	d8800117 	ldw	r2,4(sp)
   22f64:	00e00014 	movui	r3,32768
   22f68:	10bc000c 	andi	r2,r2,61440
   22f6c:	14c80020 	cmpeqi	r19,r2,8192
   22f70:	10c03726 	beq	r2,r3,23050 <__smakebuf_r+0x130>
   22f74:	80c0030b 	ldhu	r3,12(r16)
   22f78:	18c20014 	ori	r3,r3,2048
   22f7c:	80c0030d 	sth	r3,12(r16)
   22f80:	00c80004 	movi	r3,8192
   22f84:	10c0521e 	bne	r2,r3,230d0 <__smakebuf_r+0x1b0>
   22f88:	8140038f 	ldh	r5,14(r16)
   22f8c:	8809883a 	mov	r4,r17
   22f90:	00231980 	call	23198 <_isatty_r>
   22f94:	10004c26 	beq	r2,zero,230c8 <__smakebuf_r+0x1a8>
   22f98:	8080030b 	ldhu	r2,12(r16)
   22f9c:	80c010c4 	addi	r3,r16,67
   22fa0:	80c00015 	stw	r3,0(r16)
   22fa4:	10800054 	ori	r2,r2,1
   22fa8:	8080030d 	sth	r2,12(r16)
   22fac:	00800044 	movi	r2,1
   22fb0:	80c00415 	stw	r3,16(r16)
   22fb4:	80800515 	stw	r2,20(r16)
   22fb8:	04810004 	movi	r18,1024
   22fbc:	00000706 	br	22fdc <__smakebuf_r+0xbc>
   22fc0:	8080030b 	ldhu	r2,12(r16)
   22fc4:	10c0200c 	andi	r3,r2,128
   22fc8:	18001f1e 	bne	r3,zero,23048 <__smakebuf_r+0x128>
   22fcc:	04810004 	movi	r18,1024
   22fd0:	10820014 	ori	r2,r2,2048
   22fd4:	8080030d 	sth	r2,12(r16)
   22fd8:	0027883a 	mov	r19,zero
   22fdc:	900b883a 	mov	r5,r18
   22fe0:	8809883a 	mov	r4,r17
   22fe4:	00211280 	call	21128 <_malloc_r>
   22fe8:	10002c26 	beq	r2,zero,2309c <__smakebuf_r+0x17c>
   22fec:	80c0030b 	ldhu	r3,12(r16)
   22ff0:	010000b4 	movhi	r4,2
   22ff4:	2101cc04 	addi	r4,r4,1840
   22ff8:	89000f15 	stw	r4,60(r17)
   22ffc:	18c02014 	ori	r3,r3,128
   23000:	80c0030d 	sth	r3,12(r16)
   23004:	80800015 	stw	r2,0(r16)
   23008:	80800415 	stw	r2,16(r16)
   2300c:	84800515 	stw	r18,20(r16)
   23010:	98001a1e 	bne	r19,zero,2307c <__smakebuf_r+0x15c>
   23014:	dfc01317 	ldw	ra,76(sp)
   23018:	dcc01217 	ldw	r19,72(sp)
   2301c:	dc801117 	ldw	r18,68(sp)
   23020:	dc401017 	ldw	r17,64(sp)
   23024:	dc000f17 	ldw	r16,60(sp)
   23028:	dec01404 	addi	sp,sp,80
   2302c:	f800283a 	ret
   23030:	288010c4 	addi	r2,r5,67
   23034:	28800015 	stw	r2,0(r5)
   23038:	28800415 	stw	r2,16(r5)
   2303c:	00800044 	movi	r2,1
   23040:	28800515 	stw	r2,20(r5)
   23044:	f800283a 	ret
   23048:	04801004 	movi	r18,64
   2304c:	003fe006 	br	22fd0 <__alt_data_end+0xfffea930>
   23050:	81000a17 	ldw	r4,40(r16)
   23054:	00c000b4 	movhi	r3,2
   23058:	18c91d04 	addi	r3,r3,9332
   2305c:	20ffc51e 	bne	r4,r3,22f74 <__alt_data_end+0xfffea8d4>
   23060:	8080030b 	ldhu	r2,12(r16)
   23064:	04810004 	movi	r18,1024
   23068:	84801315 	stw	r18,76(r16)
   2306c:	1484b03a 	or	r2,r2,r18
   23070:	8080030d 	sth	r2,12(r16)
   23074:	0027883a 	mov	r19,zero
   23078:	003fd806 	br	22fdc <__alt_data_end+0xfffea93c>
   2307c:	8140038f 	ldh	r5,14(r16)
   23080:	8809883a 	mov	r4,r17
   23084:	00231980 	call	23198 <_isatty_r>
   23088:	103fe226 	beq	r2,zero,23014 <__alt_data_end+0xfffea974>
   2308c:	8080030b 	ldhu	r2,12(r16)
   23090:	10800054 	ori	r2,r2,1
   23094:	8080030d 	sth	r2,12(r16)
   23098:	003fde06 	br	23014 <__alt_data_end+0xfffea974>
   2309c:	8080030b 	ldhu	r2,12(r16)
   230a0:	10c0800c 	andi	r3,r2,512
   230a4:	183fdb1e 	bne	r3,zero,23014 <__alt_data_end+0xfffea974>
   230a8:	10800094 	ori	r2,r2,2
   230ac:	80c010c4 	addi	r3,r16,67
   230b0:	8080030d 	sth	r2,12(r16)
   230b4:	00800044 	movi	r2,1
   230b8:	80c00015 	stw	r3,0(r16)
   230bc:	80c00415 	stw	r3,16(r16)
   230c0:	80800515 	stw	r2,20(r16)
   230c4:	003fd306 	br	23014 <__alt_data_end+0xfffea974>
   230c8:	04810004 	movi	r18,1024
   230cc:	003fc306 	br	22fdc <__alt_data_end+0xfffea93c>
   230d0:	0027883a 	mov	r19,zero
   230d4:	04810004 	movi	r18,1024
   230d8:	003fc006 	br	22fdc <__alt_data_end+0xfffea93c>

000230dc <_read_r>:
   230dc:	defffd04 	addi	sp,sp,-12
   230e0:	2805883a 	mov	r2,r5
   230e4:	dc000015 	stw	r16,0(sp)
   230e8:	040000f4 	movhi	r16,3
   230ec:	dc400115 	stw	r17,4(sp)
   230f0:	300b883a 	mov	r5,r6
   230f4:	84296f04 	addi	r16,r16,-23108
   230f8:	2023883a 	mov	r17,r4
   230fc:	380d883a 	mov	r6,r7
   23100:	1009883a 	mov	r4,r2
   23104:	dfc00215 	stw	ra,8(sp)
   23108:	80000015 	stw	zero,0(r16)
   2310c:	00239e80 	call	239e8 <read>
   23110:	00ffffc4 	movi	r3,-1
   23114:	10c00526 	beq	r2,r3,2312c <_read_r+0x50>
   23118:	dfc00217 	ldw	ra,8(sp)
   2311c:	dc400117 	ldw	r17,4(sp)
   23120:	dc000017 	ldw	r16,0(sp)
   23124:	dec00304 	addi	sp,sp,12
   23128:	f800283a 	ret
   2312c:	80c00017 	ldw	r3,0(r16)
   23130:	183ff926 	beq	r3,zero,23118 <__alt_data_end+0xfffeaa78>
   23134:	88c00015 	stw	r3,0(r17)
   23138:	003ff706 	br	23118 <__alt_data_end+0xfffeaa78>

0002313c <_fstat_r>:
   2313c:	defffd04 	addi	sp,sp,-12
   23140:	2805883a 	mov	r2,r5
   23144:	dc000015 	stw	r16,0(sp)
   23148:	040000f4 	movhi	r16,3
   2314c:	dc400115 	stw	r17,4(sp)
   23150:	84296f04 	addi	r16,r16,-23108
   23154:	2023883a 	mov	r17,r4
   23158:	300b883a 	mov	r5,r6
   2315c:	1009883a 	mov	r4,r2
   23160:	dfc00215 	stw	ra,8(sp)
   23164:	80000015 	stw	zero,0(r16)
   23168:	00235440 	call	23544 <fstat>
   2316c:	00ffffc4 	movi	r3,-1
   23170:	10c00526 	beq	r2,r3,23188 <_fstat_r+0x4c>
   23174:	dfc00217 	ldw	ra,8(sp)
   23178:	dc400117 	ldw	r17,4(sp)
   2317c:	dc000017 	ldw	r16,0(sp)
   23180:	dec00304 	addi	sp,sp,12
   23184:	f800283a 	ret
   23188:	80c00017 	ldw	r3,0(r16)
   2318c:	183ff926 	beq	r3,zero,23174 <__alt_data_end+0xfffeaad4>
   23190:	88c00015 	stw	r3,0(r17)
   23194:	003ff706 	br	23174 <__alt_data_end+0xfffeaad4>

00023198 <_isatty_r>:
   23198:	defffd04 	addi	sp,sp,-12
   2319c:	dc000015 	stw	r16,0(sp)
   231a0:	040000f4 	movhi	r16,3
   231a4:	dc400115 	stw	r17,4(sp)
   231a8:	84296f04 	addi	r16,r16,-23108
   231ac:	2023883a 	mov	r17,r4
   231b0:	2809883a 	mov	r4,r5
   231b4:	dfc00215 	stw	ra,8(sp)
   231b8:	80000015 	stw	zero,0(r16)
   231bc:	00236380 	call	23638 <isatty>
   231c0:	00ffffc4 	movi	r3,-1
   231c4:	10c00526 	beq	r2,r3,231dc <_isatty_r+0x44>
   231c8:	dfc00217 	ldw	ra,8(sp)
   231cc:	dc400117 	ldw	r17,4(sp)
   231d0:	dc000017 	ldw	r16,0(sp)
   231d4:	dec00304 	addi	sp,sp,12
   231d8:	f800283a 	ret
   231dc:	80c00017 	ldw	r3,0(r16)
   231e0:	183ff926 	beq	r3,zero,231c8 <__alt_data_end+0xfffeab28>
   231e4:	88c00015 	stw	r3,0(r17)
   231e8:	003ff706 	br	231c8 <__alt_data_end+0xfffeab28>

000231ec <__divsi3>:
   231ec:	20001b16 	blt	r4,zero,2325c <__divsi3+0x70>
   231f0:	000f883a 	mov	r7,zero
   231f4:	28001616 	blt	r5,zero,23250 <__divsi3+0x64>
   231f8:	200d883a 	mov	r6,r4
   231fc:	29001a2e 	bgeu	r5,r4,23268 <__divsi3+0x7c>
   23200:	00800804 	movi	r2,32
   23204:	00c00044 	movi	r3,1
   23208:	00000106 	br	23210 <__divsi3+0x24>
   2320c:	10000d26 	beq	r2,zero,23244 <__divsi3+0x58>
   23210:	294b883a 	add	r5,r5,r5
   23214:	10bfffc4 	addi	r2,r2,-1
   23218:	18c7883a 	add	r3,r3,r3
   2321c:	293ffb36 	bltu	r5,r4,2320c <__alt_data_end+0xfffeab6c>
   23220:	0005883a 	mov	r2,zero
   23224:	18000726 	beq	r3,zero,23244 <__divsi3+0x58>
   23228:	0005883a 	mov	r2,zero
   2322c:	31400236 	bltu	r6,r5,23238 <__divsi3+0x4c>
   23230:	314dc83a 	sub	r6,r6,r5
   23234:	10c4b03a 	or	r2,r2,r3
   23238:	1806d07a 	srli	r3,r3,1
   2323c:	280ad07a 	srli	r5,r5,1
   23240:	183ffa1e 	bne	r3,zero,2322c <__alt_data_end+0xfffeab8c>
   23244:	38000126 	beq	r7,zero,2324c <__divsi3+0x60>
   23248:	0085c83a 	sub	r2,zero,r2
   2324c:	f800283a 	ret
   23250:	014bc83a 	sub	r5,zero,r5
   23254:	39c0005c 	xori	r7,r7,1
   23258:	003fe706 	br	231f8 <__alt_data_end+0xfffeab58>
   2325c:	0109c83a 	sub	r4,zero,r4
   23260:	01c00044 	movi	r7,1
   23264:	003fe306 	br	231f4 <__alt_data_end+0xfffeab54>
   23268:	00c00044 	movi	r3,1
   2326c:	003fee06 	br	23228 <__alt_data_end+0xfffeab88>

00023270 <__modsi3>:
   23270:	20001716 	blt	r4,zero,232d0 <__modsi3+0x60>
   23274:	000f883a 	mov	r7,zero
   23278:	2005883a 	mov	r2,r4
   2327c:	28001216 	blt	r5,zero,232c8 <__modsi3+0x58>
   23280:	2900162e 	bgeu	r5,r4,232dc <__modsi3+0x6c>
   23284:	01800804 	movi	r6,32
   23288:	00c00044 	movi	r3,1
   2328c:	00000106 	br	23294 <__modsi3+0x24>
   23290:	30000a26 	beq	r6,zero,232bc <__modsi3+0x4c>
   23294:	294b883a 	add	r5,r5,r5
   23298:	31bfffc4 	addi	r6,r6,-1
   2329c:	18c7883a 	add	r3,r3,r3
   232a0:	293ffb36 	bltu	r5,r4,23290 <__alt_data_end+0xfffeabf0>
   232a4:	18000526 	beq	r3,zero,232bc <__modsi3+0x4c>
   232a8:	1806d07a 	srli	r3,r3,1
   232ac:	11400136 	bltu	r2,r5,232b4 <__modsi3+0x44>
   232b0:	1145c83a 	sub	r2,r2,r5
   232b4:	280ad07a 	srli	r5,r5,1
   232b8:	183ffb1e 	bne	r3,zero,232a8 <__alt_data_end+0xfffeac08>
   232bc:	38000126 	beq	r7,zero,232c4 <__modsi3+0x54>
   232c0:	0085c83a 	sub	r2,zero,r2
   232c4:	f800283a 	ret
   232c8:	014bc83a 	sub	r5,zero,r5
   232cc:	003fec06 	br	23280 <__alt_data_end+0xfffeabe0>
   232d0:	0109c83a 	sub	r4,zero,r4
   232d4:	01c00044 	movi	r7,1
   232d8:	003fe706 	br	23278 <__alt_data_end+0xfffeabd8>
   232dc:	00c00044 	movi	r3,1
   232e0:	003ff106 	br	232a8 <__alt_data_end+0xfffeac08>

000232e4 <__udivsi3>:
   232e4:	200d883a 	mov	r6,r4
   232e8:	2900152e 	bgeu	r5,r4,23340 <__udivsi3+0x5c>
   232ec:	28001416 	blt	r5,zero,23340 <__udivsi3+0x5c>
   232f0:	00800804 	movi	r2,32
   232f4:	00c00044 	movi	r3,1
   232f8:	00000206 	br	23304 <__udivsi3+0x20>
   232fc:	10000e26 	beq	r2,zero,23338 <__udivsi3+0x54>
   23300:	28000516 	blt	r5,zero,23318 <__udivsi3+0x34>
   23304:	294b883a 	add	r5,r5,r5
   23308:	10bfffc4 	addi	r2,r2,-1
   2330c:	18c7883a 	add	r3,r3,r3
   23310:	293ffa36 	bltu	r5,r4,232fc <__alt_data_end+0xfffeac5c>
   23314:	18000826 	beq	r3,zero,23338 <__udivsi3+0x54>
   23318:	0005883a 	mov	r2,zero
   2331c:	31400236 	bltu	r6,r5,23328 <__udivsi3+0x44>
   23320:	314dc83a 	sub	r6,r6,r5
   23324:	10c4b03a 	or	r2,r2,r3
   23328:	1806d07a 	srli	r3,r3,1
   2332c:	280ad07a 	srli	r5,r5,1
   23330:	183ffa1e 	bne	r3,zero,2331c <__alt_data_end+0xfffeac7c>
   23334:	f800283a 	ret
   23338:	0005883a 	mov	r2,zero
   2333c:	f800283a 	ret
   23340:	00c00044 	movi	r3,1
   23344:	003ff406 	br	23318 <__alt_data_end+0xfffeac78>

00023348 <__umodsi3>:
   23348:	2005883a 	mov	r2,r4
   2334c:	2900122e 	bgeu	r5,r4,23398 <__umodsi3+0x50>
   23350:	28001116 	blt	r5,zero,23398 <__umodsi3+0x50>
   23354:	01800804 	movi	r6,32
   23358:	00c00044 	movi	r3,1
   2335c:	00000206 	br	23368 <__umodsi3+0x20>
   23360:	30000c26 	beq	r6,zero,23394 <__umodsi3+0x4c>
   23364:	28000516 	blt	r5,zero,2337c <__umodsi3+0x34>
   23368:	294b883a 	add	r5,r5,r5
   2336c:	31bfffc4 	addi	r6,r6,-1
   23370:	18c7883a 	add	r3,r3,r3
   23374:	293ffa36 	bltu	r5,r4,23360 <__alt_data_end+0xfffeacc0>
   23378:	18000626 	beq	r3,zero,23394 <__umodsi3+0x4c>
   2337c:	1806d07a 	srli	r3,r3,1
   23380:	11400136 	bltu	r2,r5,23388 <__umodsi3+0x40>
   23384:	1145c83a 	sub	r2,r2,r5
   23388:	280ad07a 	srli	r5,r5,1
   2338c:	183ffb1e 	bne	r3,zero,2337c <__alt_data_end+0xfffeacdc>
   23390:	f800283a 	ret
   23394:	f800283a 	ret
   23398:	00c00044 	movi	r3,1
   2339c:	003ff706 	br	2337c <__alt_data_end+0xfffeacdc>

000233a0 <__mulsi3>:
   233a0:	0005883a 	mov	r2,zero
   233a4:	20000726 	beq	r4,zero,233c4 <__mulsi3+0x24>
   233a8:	20c0004c 	andi	r3,r4,1
   233ac:	2008d07a 	srli	r4,r4,1
   233b0:	18000126 	beq	r3,zero,233b8 <__mulsi3+0x18>
   233b4:	1145883a 	add	r2,r2,r5
   233b8:	294b883a 	add	r5,r5,r5
   233bc:	203ffa1e 	bne	r4,zero,233a8 <__alt_data_end+0xfffead08>
   233c0:	f800283a 	ret
   233c4:	f800283a 	ret

000233c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   233c8:	defffe04 	addi	sp,sp,-8
   233cc:	dfc00115 	stw	ra,4(sp)
   233d0:	df000015 	stw	fp,0(sp)
   233d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   233d8:	d0a00917 	ldw	r2,-32732(gp)
   233dc:	10000326 	beq	r2,zero,233ec <alt_get_errno+0x24>
   233e0:	d0a00917 	ldw	r2,-32732(gp)
   233e4:	103ee83a 	callr	r2
   233e8:	00000106 	br	233f0 <alt_get_errno+0x28>
   233ec:	d0a6f804 	addi	r2,gp,-25632
}
   233f0:	e037883a 	mov	sp,fp
   233f4:	dfc00117 	ldw	ra,4(sp)
   233f8:	df000017 	ldw	fp,0(sp)
   233fc:	dec00204 	addi	sp,sp,8
   23400:	f800283a 	ret

00023404 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   23404:	defffb04 	addi	sp,sp,-20
   23408:	dfc00415 	stw	ra,16(sp)
   2340c:	df000315 	stw	fp,12(sp)
   23410:	df000304 	addi	fp,sp,12
   23414:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   23418:	e0bfff17 	ldw	r2,-4(fp)
   2341c:	10000816 	blt	r2,zero,23440 <close+0x3c>
   23420:	01400304 	movi	r5,12
   23424:	e13fff17 	ldw	r4,-4(fp)
   23428:	00233a00 	call	233a0 <__mulsi3>
   2342c:	1007883a 	mov	r3,r2
   23430:	008000b4 	movhi	r2,2
   23434:	109db704 	addi	r2,r2,30428
   23438:	1885883a 	add	r2,r3,r2
   2343c:	00000106 	br	23444 <close+0x40>
   23440:	0005883a 	mov	r2,zero
   23444:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   23448:	e0bffd17 	ldw	r2,-12(fp)
   2344c:	10001926 	beq	r2,zero,234b4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   23450:	e0bffd17 	ldw	r2,-12(fp)
   23454:	10800017 	ldw	r2,0(r2)
   23458:	10800417 	ldw	r2,16(r2)
   2345c:	10000626 	beq	r2,zero,23478 <close+0x74>
   23460:	e0bffd17 	ldw	r2,-12(fp)
   23464:	10800017 	ldw	r2,0(r2)
   23468:	10800417 	ldw	r2,16(r2)
   2346c:	e13ffd17 	ldw	r4,-12(fp)
   23470:	103ee83a 	callr	r2
   23474:	00000106 	br	2347c <close+0x78>
   23478:	0005883a 	mov	r2,zero
   2347c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   23480:	e13fff17 	ldw	r4,-4(fp)
   23484:	0023aec0 	call	23aec <alt_release_fd>
    if (rval < 0)
   23488:	e0bffe17 	ldw	r2,-8(fp)
   2348c:	1000070e 	bge	r2,zero,234ac <close+0xa8>
    {
      ALT_ERRNO = -rval;
   23490:	00233c80 	call	233c8 <alt_get_errno>
   23494:	1007883a 	mov	r3,r2
   23498:	e0bffe17 	ldw	r2,-8(fp)
   2349c:	0085c83a 	sub	r2,zero,r2
   234a0:	18800015 	stw	r2,0(r3)
      return -1;
   234a4:	00bfffc4 	movi	r2,-1
   234a8:	00000706 	br	234c8 <close+0xc4>
    }
    return 0;
   234ac:	0005883a 	mov	r2,zero
   234b0:	00000506 	br	234c8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   234b4:	00233c80 	call	233c8 <alt_get_errno>
   234b8:	1007883a 	mov	r3,r2
   234bc:	00801444 	movi	r2,81
   234c0:	18800015 	stw	r2,0(r3)
    return -1;
   234c4:	00bfffc4 	movi	r2,-1
  }
}
   234c8:	e037883a 	mov	sp,fp
   234cc:	dfc00117 	ldw	ra,4(sp)
   234d0:	df000017 	ldw	fp,0(sp)
   234d4:	dec00204 	addi	sp,sp,8
   234d8:	f800283a 	ret

000234dc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   234dc:	defffc04 	addi	sp,sp,-16
   234e0:	df000315 	stw	fp,12(sp)
   234e4:	df000304 	addi	fp,sp,12
   234e8:	e13ffd15 	stw	r4,-12(fp)
   234ec:	e17ffe15 	stw	r5,-8(fp)
   234f0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   234f4:	e0bfff17 	ldw	r2,-4(fp)
}
   234f8:	e037883a 	mov	sp,fp
   234fc:	df000017 	ldw	fp,0(sp)
   23500:	dec00104 	addi	sp,sp,4
   23504:	f800283a 	ret

00023508 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23508:	defffe04 	addi	sp,sp,-8
   2350c:	dfc00115 	stw	ra,4(sp)
   23510:	df000015 	stw	fp,0(sp)
   23514:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23518:	d0a00917 	ldw	r2,-32732(gp)
   2351c:	10000326 	beq	r2,zero,2352c <alt_get_errno+0x24>
   23520:	d0a00917 	ldw	r2,-32732(gp)
   23524:	103ee83a 	callr	r2
   23528:	00000106 	br	23530 <alt_get_errno+0x28>
   2352c:	d0a6f804 	addi	r2,gp,-25632
}
   23530:	e037883a 	mov	sp,fp
   23534:	dfc00117 	ldw	ra,4(sp)
   23538:	df000017 	ldw	fp,0(sp)
   2353c:	dec00204 	addi	sp,sp,8
   23540:	f800283a 	ret

00023544 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   23544:	defffb04 	addi	sp,sp,-20
   23548:	dfc00415 	stw	ra,16(sp)
   2354c:	df000315 	stw	fp,12(sp)
   23550:	df000304 	addi	fp,sp,12
   23554:	e13ffe15 	stw	r4,-8(fp)
   23558:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2355c:	e0bffe17 	ldw	r2,-8(fp)
   23560:	10000816 	blt	r2,zero,23584 <fstat+0x40>
   23564:	01400304 	movi	r5,12
   23568:	e13ffe17 	ldw	r4,-8(fp)
   2356c:	00233a00 	call	233a0 <__mulsi3>
   23570:	1007883a 	mov	r3,r2
   23574:	008000b4 	movhi	r2,2
   23578:	109db704 	addi	r2,r2,30428
   2357c:	1885883a 	add	r2,r3,r2
   23580:	00000106 	br	23588 <fstat+0x44>
   23584:	0005883a 	mov	r2,zero
   23588:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2358c:	e0bffd17 	ldw	r2,-12(fp)
   23590:	10001026 	beq	r2,zero,235d4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   23594:	e0bffd17 	ldw	r2,-12(fp)
   23598:	10800017 	ldw	r2,0(r2)
   2359c:	10800817 	ldw	r2,32(r2)
   235a0:	10000726 	beq	r2,zero,235c0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   235a4:	e0bffd17 	ldw	r2,-12(fp)
   235a8:	10800017 	ldw	r2,0(r2)
   235ac:	10800817 	ldw	r2,32(r2)
   235b0:	e17fff17 	ldw	r5,-4(fp)
   235b4:	e13ffd17 	ldw	r4,-12(fp)
   235b8:	103ee83a 	callr	r2
   235bc:	00000a06 	br	235e8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   235c0:	e0bfff17 	ldw	r2,-4(fp)
   235c4:	00c80004 	movi	r3,8192
   235c8:	10c00115 	stw	r3,4(r2)
      return 0;
   235cc:	0005883a 	mov	r2,zero
   235d0:	00000506 	br	235e8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   235d4:	00235080 	call	23508 <alt_get_errno>
   235d8:	1007883a 	mov	r3,r2
   235dc:	00801444 	movi	r2,81
   235e0:	18800015 	stw	r2,0(r3)
    return -1;
   235e4:	00bfffc4 	movi	r2,-1
  }
}
   235e8:	e037883a 	mov	sp,fp
   235ec:	dfc00117 	ldw	ra,4(sp)
   235f0:	df000017 	ldw	fp,0(sp)
   235f4:	dec00204 	addi	sp,sp,8
   235f8:	f800283a 	ret

000235fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   235fc:	defffe04 	addi	sp,sp,-8
   23600:	dfc00115 	stw	ra,4(sp)
   23604:	df000015 	stw	fp,0(sp)
   23608:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2360c:	d0a00917 	ldw	r2,-32732(gp)
   23610:	10000326 	beq	r2,zero,23620 <alt_get_errno+0x24>
   23614:	d0a00917 	ldw	r2,-32732(gp)
   23618:	103ee83a 	callr	r2
   2361c:	00000106 	br	23624 <alt_get_errno+0x28>
   23620:	d0a6f804 	addi	r2,gp,-25632
}
   23624:	e037883a 	mov	sp,fp
   23628:	dfc00117 	ldw	ra,4(sp)
   2362c:	df000017 	ldw	fp,0(sp)
   23630:	dec00204 	addi	sp,sp,8
   23634:	f800283a 	ret

00023638 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   23638:	deffed04 	addi	sp,sp,-76
   2363c:	dfc01215 	stw	ra,72(sp)
   23640:	df001115 	stw	fp,68(sp)
   23644:	df001104 	addi	fp,sp,68
   23648:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2364c:	e0bfff17 	ldw	r2,-4(fp)
   23650:	10000816 	blt	r2,zero,23674 <isatty+0x3c>
   23654:	01400304 	movi	r5,12
   23658:	e13fff17 	ldw	r4,-4(fp)
   2365c:	00233a00 	call	233a0 <__mulsi3>
   23660:	1007883a 	mov	r3,r2
   23664:	008000b4 	movhi	r2,2
   23668:	109db704 	addi	r2,r2,30428
   2366c:	1885883a 	add	r2,r3,r2
   23670:	00000106 	br	23678 <isatty+0x40>
   23674:	0005883a 	mov	r2,zero
   23678:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2367c:	e0bfef17 	ldw	r2,-68(fp)
   23680:	10000e26 	beq	r2,zero,236bc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23684:	e0bfef17 	ldw	r2,-68(fp)
   23688:	10800017 	ldw	r2,0(r2)
   2368c:	10800817 	ldw	r2,32(r2)
   23690:	1000021e 	bne	r2,zero,2369c <isatty+0x64>
    {
      return 1;
   23694:	00800044 	movi	r2,1
   23698:	00000d06 	br	236d0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2369c:	e0bff004 	addi	r2,fp,-64
   236a0:	100b883a 	mov	r5,r2
   236a4:	e13fff17 	ldw	r4,-4(fp)
   236a8:	00235440 	call	23544 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   236ac:	e0bff117 	ldw	r2,-60(fp)
   236b0:	10880020 	cmpeqi	r2,r2,8192
   236b4:	10803fcc 	andi	r2,r2,255
   236b8:	00000506 	br	236d0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   236bc:	00235fc0 	call	235fc <alt_get_errno>
   236c0:	1007883a 	mov	r3,r2
   236c4:	00801444 	movi	r2,81
   236c8:	18800015 	stw	r2,0(r3)
    return 0;
   236cc:	0005883a 	mov	r2,zero
  }
}
   236d0:	e037883a 	mov	sp,fp
   236d4:	dfc00117 	ldw	ra,4(sp)
   236d8:	df000017 	ldw	fp,0(sp)
   236dc:	dec00204 	addi	sp,sp,8
   236e0:	f800283a 	ret

000236e4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   236e4:	defffc04 	addi	sp,sp,-16
   236e8:	df000315 	stw	fp,12(sp)
   236ec:	df000304 	addi	fp,sp,12
   236f0:	e13ffd15 	stw	r4,-12(fp)
   236f4:	e17ffe15 	stw	r5,-8(fp)
   236f8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   236fc:	e0fffe17 	ldw	r3,-8(fp)
   23700:	e0bffd17 	ldw	r2,-12(fp)
   23704:	18800c26 	beq	r3,r2,23738 <alt_load_section+0x54>
  {
    while( to != end )
   23708:	00000806 	br	2372c <alt_load_section+0x48>
    {
      *to++ = *from++;
   2370c:	e0bffe17 	ldw	r2,-8(fp)
   23710:	10c00104 	addi	r3,r2,4
   23714:	e0fffe15 	stw	r3,-8(fp)
   23718:	e0fffd17 	ldw	r3,-12(fp)
   2371c:	19000104 	addi	r4,r3,4
   23720:	e13ffd15 	stw	r4,-12(fp)
   23724:	18c00017 	ldw	r3,0(r3)
   23728:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2372c:	e0fffe17 	ldw	r3,-8(fp)
   23730:	e0bfff17 	ldw	r2,-4(fp)
   23734:	18bff51e 	bne	r3,r2,2370c <__alt_data_end+0xfffeb06c>
    {
      *to++ = *from++;
    }
  }
}
   23738:	0001883a 	nop
   2373c:	e037883a 	mov	sp,fp
   23740:	df000017 	ldw	fp,0(sp)
   23744:	dec00104 	addi	sp,sp,4
   23748:	f800283a 	ret

0002374c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2374c:	defffe04 	addi	sp,sp,-8
   23750:	dfc00115 	stw	ra,4(sp)
   23754:	df000015 	stw	fp,0(sp)
   23758:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2375c:	018000f4 	movhi	r6,3
   23760:	31a28704 	addi	r6,r6,-30180
   23764:	014000b4 	movhi	r5,2
   23768:	295ba204 	addi	r5,r5,28296
   2376c:	010000f4 	movhi	r4,3
   23770:	21228704 	addi	r4,r4,-30180
   23774:	00236e40 	call	236e4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23778:	018000b4 	movhi	r6,2
   2377c:	31808c04 	addi	r6,r6,560
   23780:	014000b4 	movhi	r5,2
   23784:	29400804 	addi	r5,r5,32
   23788:	010000b4 	movhi	r4,2
   2378c:	21000804 	addi	r4,r4,32
   23790:	00236e40 	call	236e4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23794:	018000b4 	movhi	r6,2
   23798:	319ba204 	addi	r6,r6,28296
   2379c:	014000b4 	movhi	r5,2
   237a0:	295aeb04 	addi	r5,r5,27564
   237a4:	010000b4 	movhi	r4,2
   237a8:	211aeb04 	addi	r4,r4,27564
   237ac:	00236e40 	call	236e4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   237b0:	0025af40 	call	25af4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   237b4:	0025cb40 	call	25cb4 <alt_icache_flush_all>
}
   237b8:	0001883a 	nop
   237bc:	e037883a 	mov	sp,fp
   237c0:	dfc00117 	ldw	ra,4(sp)
   237c4:	df000017 	ldw	fp,0(sp)
   237c8:	dec00204 	addi	sp,sp,8
   237cc:	f800283a 	ret

000237d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   237d0:	defffe04 	addi	sp,sp,-8
   237d4:	dfc00115 	stw	ra,4(sp)
   237d8:	df000015 	stw	fp,0(sp)
   237dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   237e0:	d0a00917 	ldw	r2,-32732(gp)
   237e4:	10000326 	beq	r2,zero,237f4 <alt_get_errno+0x24>
   237e8:	d0a00917 	ldw	r2,-32732(gp)
   237ec:	103ee83a 	callr	r2
   237f0:	00000106 	br	237f8 <alt_get_errno+0x28>
   237f4:	d0a6f804 	addi	r2,gp,-25632
}
   237f8:	e037883a 	mov	sp,fp
   237fc:	dfc00117 	ldw	ra,4(sp)
   23800:	df000017 	ldw	fp,0(sp)
   23804:	dec00204 	addi	sp,sp,8
   23808:	f800283a 	ret

0002380c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2380c:	defff904 	addi	sp,sp,-28
   23810:	dfc00615 	stw	ra,24(sp)
   23814:	df000515 	stw	fp,20(sp)
   23818:	df000504 	addi	fp,sp,20
   2381c:	e13ffd15 	stw	r4,-12(fp)
   23820:	e17ffe15 	stw	r5,-8(fp)
   23824:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   23828:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2382c:	e0bffd17 	ldw	r2,-12(fp)
   23830:	10000816 	blt	r2,zero,23854 <lseek+0x48>
   23834:	01400304 	movi	r5,12
   23838:	e13ffd17 	ldw	r4,-12(fp)
   2383c:	00233a00 	call	233a0 <__mulsi3>
   23840:	1007883a 	mov	r3,r2
   23844:	008000b4 	movhi	r2,2
   23848:	109db704 	addi	r2,r2,30428
   2384c:	1885883a 	add	r2,r3,r2
   23850:	00000106 	br	23858 <lseek+0x4c>
   23854:	0005883a 	mov	r2,zero
   23858:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2385c:	e0bffc17 	ldw	r2,-16(fp)
   23860:	10001026 	beq	r2,zero,238a4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23864:	e0bffc17 	ldw	r2,-16(fp)
   23868:	10800017 	ldw	r2,0(r2)
   2386c:	10800717 	ldw	r2,28(r2)
   23870:	10000926 	beq	r2,zero,23898 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23874:	e0bffc17 	ldw	r2,-16(fp)
   23878:	10800017 	ldw	r2,0(r2)
   2387c:	10800717 	ldw	r2,28(r2)
   23880:	e1bfff17 	ldw	r6,-4(fp)
   23884:	e17ffe17 	ldw	r5,-8(fp)
   23888:	e13ffc17 	ldw	r4,-16(fp)
   2388c:	103ee83a 	callr	r2
   23890:	e0bffb15 	stw	r2,-20(fp)
   23894:	00000506 	br	238ac <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   23898:	00bfde84 	movi	r2,-134
   2389c:	e0bffb15 	stw	r2,-20(fp)
   238a0:	00000206 	br	238ac <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   238a4:	00bfebc4 	movi	r2,-81
   238a8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   238ac:	e0bffb17 	ldw	r2,-20(fp)
   238b0:	1000070e 	bge	r2,zero,238d0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   238b4:	00237d00 	call	237d0 <alt_get_errno>
   238b8:	1007883a 	mov	r3,r2
   238bc:	e0bffb17 	ldw	r2,-20(fp)
   238c0:	0085c83a 	sub	r2,zero,r2
   238c4:	18800015 	stw	r2,0(r3)
    rc = -1;
   238c8:	00bfffc4 	movi	r2,-1
   238cc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   238d0:	e0bffb17 	ldw	r2,-20(fp)
}
   238d4:	e037883a 	mov	sp,fp
   238d8:	dfc00117 	ldw	ra,4(sp)
   238dc:	df000017 	ldw	fp,0(sp)
   238e0:	dec00204 	addi	sp,sp,8
   238e4:	f800283a 	ret

000238e8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   238e8:	defffd04 	addi	sp,sp,-12
   238ec:	dfc00215 	stw	ra,8(sp)
   238f0:	df000115 	stw	fp,4(sp)
   238f4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   238f8:	0009883a 	mov	r4,zero
   238fc:	0023dc00 	call	23dc0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   23900:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   23904:	0023df80 	call	23df8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   23908:	018000b4 	movhi	r6,2
   2390c:	319af704 	addi	r6,r6,27612
   23910:	014000b4 	movhi	r5,2
   23914:	295af704 	addi	r5,r5,27612
   23918:	010000b4 	movhi	r4,2
   2391c:	211af704 	addi	r4,r4,27612
   23920:	00260580 	call	26058 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   23924:	0025bf40 	call	25bf4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   23928:	010000b4 	movhi	r4,2
   2392c:	21171504 	addi	r4,r4,23636
   23930:	00268180 	call	26818 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23934:	d0a6f917 	ldw	r2,-25628(gp)
   23938:	d0e6fa17 	ldw	r3,-25624(gp)
   2393c:	d126fb17 	ldw	r4,-25620(gp)
   23940:	200d883a 	mov	r6,r4
   23944:	180b883a 	mov	r5,r3
   23948:	1009883a 	mov	r4,r2
   2394c:	00205400 	call	20540 <main>
   23950:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23954:	01000044 	movi	r4,1
   23958:	00234040 	call	23404 <close>
  exit (result);
   2395c:	e13fff17 	ldw	r4,-4(fp)
   23960:	002682c0 	call	2682c <exit>

00023964 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23964:	defffe04 	addi	sp,sp,-8
   23968:	df000115 	stw	fp,4(sp)
   2396c:	df000104 	addi	fp,sp,4
   23970:	e13fff15 	stw	r4,-4(fp)
}
   23974:	0001883a 	nop
   23978:	e037883a 	mov	sp,fp
   2397c:	df000017 	ldw	fp,0(sp)
   23980:	dec00104 	addi	sp,sp,4
   23984:	f800283a 	ret

00023988 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23988:	defffe04 	addi	sp,sp,-8
   2398c:	df000115 	stw	fp,4(sp)
   23990:	df000104 	addi	fp,sp,4
   23994:	e13fff15 	stw	r4,-4(fp)
}
   23998:	0001883a 	nop
   2399c:	e037883a 	mov	sp,fp
   239a0:	df000017 	ldw	fp,0(sp)
   239a4:	dec00104 	addi	sp,sp,4
   239a8:	f800283a 	ret

000239ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   239ac:	defffe04 	addi	sp,sp,-8
   239b0:	dfc00115 	stw	ra,4(sp)
   239b4:	df000015 	stw	fp,0(sp)
   239b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   239bc:	d0a00917 	ldw	r2,-32732(gp)
   239c0:	10000326 	beq	r2,zero,239d0 <alt_get_errno+0x24>
   239c4:	d0a00917 	ldw	r2,-32732(gp)
   239c8:	103ee83a 	callr	r2
   239cc:	00000106 	br	239d4 <alt_get_errno+0x28>
   239d0:	d0a6f804 	addi	r2,gp,-25632
}
   239d4:	e037883a 	mov	sp,fp
   239d8:	dfc00117 	ldw	ra,4(sp)
   239dc:	df000017 	ldw	fp,0(sp)
   239e0:	dec00204 	addi	sp,sp,8
   239e4:	f800283a 	ret

000239e8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   239e8:	defff904 	addi	sp,sp,-28
   239ec:	dfc00615 	stw	ra,24(sp)
   239f0:	df000515 	stw	fp,20(sp)
   239f4:	df000504 	addi	fp,sp,20
   239f8:	e13ffd15 	stw	r4,-12(fp)
   239fc:	e17ffe15 	stw	r5,-8(fp)
   23a00:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23a04:	e0bffd17 	ldw	r2,-12(fp)
   23a08:	10000816 	blt	r2,zero,23a2c <read+0x44>
   23a0c:	01400304 	movi	r5,12
   23a10:	e13ffd17 	ldw	r4,-12(fp)
   23a14:	00233a00 	call	233a0 <__mulsi3>
   23a18:	1007883a 	mov	r3,r2
   23a1c:	008000b4 	movhi	r2,2
   23a20:	109db704 	addi	r2,r2,30428
   23a24:	1885883a 	add	r2,r3,r2
   23a28:	00000106 	br	23a30 <read+0x48>
   23a2c:	0005883a 	mov	r2,zero
   23a30:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23a34:	e0bffb17 	ldw	r2,-20(fp)
   23a38:	10002226 	beq	r2,zero,23ac4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23a3c:	e0bffb17 	ldw	r2,-20(fp)
   23a40:	10800217 	ldw	r2,8(r2)
   23a44:	108000cc 	andi	r2,r2,3
   23a48:	10800060 	cmpeqi	r2,r2,1
   23a4c:	1000181e 	bne	r2,zero,23ab0 <read+0xc8>
        (fd->dev->read))
   23a50:	e0bffb17 	ldw	r2,-20(fp)
   23a54:	10800017 	ldw	r2,0(r2)
   23a58:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23a5c:	10001426 	beq	r2,zero,23ab0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23a60:	e0bffb17 	ldw	r2,-20(fp)
   23a64:	10800017 	ldw	r2,0(r2)
   23a68:	10800517 	ldw	r2,20(r2)
   23a6c:	e0ffff17 	ldw	r3,-4(fp)
   23a70:	180d883a 	mov	r6,r3
   23a74:	e17ffe17 	ldw	r5,-8(fp)
   23a78:	e13ffb17 	ldw	r4,-20(fp)
   23a7c:	103ee83a 	callr	r2
   23a80:	e0bffc15 	stw	r2,-16(fp)
   23a84:	e0bffc17 	ldw	r2,-16(fp)
   23a88:	1000070e 	bge	r2,zero,23aa8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   23a8c:	00239ac0 	call	239ac <alt_get_errno>
   23a90:	1007883a 	mov	r3,r2
   23a94:	e0bffc17 	ldw	r2,-16(fp)
   23a98:	0085c83a 	sub	r2,zero,r2
   23a9c:	18800015 	stw	r2,0(r3)
          return -1;
   23aa0:	00bfffc4 	movi	r2,-1
   23aa4:	00000c06 	br	23ad8 <read+0xf0>
        }
        return rval;
   23aa8:	e0bffc17 	ldw	r2,-16(fp)
   23aac:	00000a06 	br	23ad8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23ab0:	00239ac0 	call	239ac <alt_get_errno>
   23ab4:	1007883a 	mov	r3,r2
   23ab8:	00800344 	movi	r2,13
   23abc:	18800015 	stw	r2,0(r3)
   23ac0:	00000406 	br	23ad4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23ac4:	00239ac0 	call	239ac <alt_get_errno>
   23ac8:	1007883a 	mov	r3,r2
   23acc:	00801444 	movi	r2,81
   23ad0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23ad4:	00bfffc4 	movi	r2,-1
}
   23ad8:	e037883a 	mov	sp,fp
   23adc:	dfc00117 	ldw	ra,4(sp)
   23ae0:	df000017 	ldw	fp,0(sp)
   23ae4:	dec00204 	addi	sp,sp,8
   23ae8:	f800283a 	ret

00023aec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23aec:	defffc04 	addi	sp,sp,-16
   23af0:	dfc00315 	stw	ra,12(sp)
   23af4:	df000215 	stw	fp,8(sp)
   23af8:	dc000115 	stw	r16,4(sp)
   23afc:	df000204 	addi	fp,sp,8
   23b00:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   23b04:	e0bffe17 	ldw	r2,-8(fp)
   23b08:	108000d0 	cmplti	r2,r2,3
   23b0c:	1000111e 	bne	r2,zero,23b54 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   23b10:	040000b4 	movhi	r16,2
   23b14:	841db704 	addi	r16,r16,30428
   23b18:	e0bffe17 	ldw	r2,-8(fp)
   23b1c:	01400304 	movi	r5,12
   23b20:	1009883a 	mov	r4,r2
   23b24:	00233a00 	call	233a0 <__mulsi3>
   23b28:	8085883a 	add	r2,r16,r2
   23b2c:	10800204 	addi	r2,r2,8
   23b30:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   23b34:	040000b4 	movhi	r16,2
   23b38:	841db704 	addi	r16,r16,30428
   23b3c:	e0bffe17 	ldw	r2,-8(fp)
   23b40:	01400304 	movi	r5,12
   23b44:	1009883a 	mov	r4,r2
   23b48:	00233a00 	call	233a0 <__mulsi3>
   23b4c:	8085883a 	add	r2,r16,r2
   23b50:	10000015 	stw	zero,0(r2)
  }
}
   23b54:	0001883a 	nop
   23b58:	e6ffff04 	addi	sp,fp,-4
   23b5c:	dfc00217 	ldw	ra,8(sp)
   23b60:	df000117 	ldw	fp,4(sp)
   23b64:	dc000017 	ldw	r16,0(sp)
   23b68:	dec00304 	addi	sp,sp,12
   23b6c:	f800283a 	ret

00023b70 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23b70:	defff904 	addi	sp,sp,-28
   23b74:	df000615 	stw	fp,24(sp)
   23b78:	df000604 	addi	fp,sp,24
   23b7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23b80:	0005303a 	rdctl	r2,status
   23b84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23b88:	e0fffe17 	ldw	r3,-8(fp)
   23b8c:	00bfff84 	movi	r2,-2
   23b90:	1884703a 	and	r2,r3,r2
   23b94:	1001703a 	wrctl	status,r2
  
  return context;
   23b98:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23b9c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23ba0:	d0a00a17 	ldw	r2,-32728(gp)
   23ba4:	10c000c4 	addi	r3,r2,3
   23ba8:	00bfff04 	movi	r2,-4
   23bac:	1884703a 	and	r2,r3,r2
   23bb0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23bb4:	d0e00a17 	ldw	r3,-32728(gp)
   23bb8:	e0bfff17 	ldw	r2,-4(fp)
   23bbc:	1887883a 	add	r3,r3,r2
   23bc0:	00800134 	movhi	r2,4
   23bc4:	10a1a804 	addi	r2,r2,-31072
   23bc8:	10c0062e 	bgeu	r2,r3,23be4 <sbrk+0x74>
   23bcc:	e0bffb17 	ldw	r2,-20(fp)
   23bd0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23bd4:	e0bffa17 	ldw	r2,-24(fp)
   23bd8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   23bdc:	00bfffc4 	movi	r2,-1
   23be0:	00000b06 	br	23c10 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   23be4:	d0a00a17 	ldw	r2,-32728(gp)
   23be8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   23bec:	d0e00a17 	ldw	r3,-32728(gp)
   23bf0:	e0bfff17 	ldw	r2,-4(fp)
   23bf4:	1885883a 	add	r2,r3,r2
   23bf8:	d0a00a15 	stw	r2,-32728(gp)
   23bfc:	e0bffb17 	ldw	r2,-20(fp)
   23c00:	e0bffc15 	stw	r2,-16(fp)
   23c04:	e0bffc17 	ldw	r2,-16(fp)
   23c08:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23c0c:	e0bffd17 	ldw	r2,-12(fp)
} 
   23c10:	e037883a 	mov	sp,fp
   23c14:	df000017 	ldw	fp,0(sp)
   23c18:	dec00104 	addi	sp,sp,4
   23c1c:	f800283a 	ret

00023c20 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   23c20:	defffd04 	addi	sp,sp,-12
   23c24:	dfc00215 	stw	ra,8(sp)
   23c28:	df000115 	stw	fp,4(sp)
   23c2c:	df000104 	addi	fp,sp,4
   23c30:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   23c34:	e13fff17 	ldw	r4,-4(fp)
   23c38:	002599c0 	call	2599c <alt_busy_sleep>
}
   23c3c:	e037883a 	mov	sp,fp
   23c40:	dfc00117 	ldw	ra,4(sp)
   23c44:	df000017 	ldw	fp,0(sp)
   23c48:	dec00204 	addi	sp,sp,8
   23c4c:	f800283a 	ret

00023c50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23c50:	defffe04 	addi	sp,sp,-8
   23c54:	dfc00115 	stw	ra,4(sp)
   23c58:	df000015 	stw	fp,0(sp)
   23c5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23c60:	d0a00917 	ldw	r2,-32732(gp)
   23c64:	10000326 	beq	r2,zero,23c74 <alt_get_errno+0x24>
   23c68:	d0a00917 	ldw	r2,-32732(gp)
   23c6c:	103ee83a 	callr	r2
   23c70:	00000106 	br	23c78 <alt_get_errno+0x28>
   23c74:	d0a6f804 	addi	r2,gp,-25632
}
   23c78:	e037883a 	mov	sp,fp
   23c7c:	dfc00117 	ldw	ra,4(sp)
   23c80:	df000017 	ldw	fp,0(sp)
   23c84:	dec00204 	addi	sp,sp,8
   23c88:	f800283a 	ret

00023c8c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23c8c:	defff904 	addi	sp,sp,-28
   23c90:	dfc00615 	stw	ra,24(sp)
   23c94:	df000515 	stw	fp,20(sp)
   23c98:	df000504 	addi	fp,sp,20
   23c9c:	e13ffd15 	stw	r4,-12(fp)
   23ca0:	e17ffe15 	stw	r5,-8(fp)
   23ca4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23ca8:	e0bffd17 	ldw	r2,-12(fp)
   23cac:	10000816 	blt	r2,zero,23cd0 <write+0x44>
   23cb0:	01400304 	movi	r5,12
   23cb4:	e13ffd17 	ldw	r4,-12(fp)
   23cb8:	00233a00 	call	233a0 <__mulsi3>
   23cbc:	1007883a 	mov	r3,r2
   23cc0:	008000b4 	movhi	r2,2
   23cc4:	109db704 	addi	r2,r2,30428
   23cc8:	1885883a 	add	r2,r3,r2
   23ccc:	00000106 	br	23cd4 <write+0x48>
   23cd0:	0005883a 	mov	r2,zero
   23cd4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23cd8:	e0bffb17 	ldw	r2,-20(fp)
   23cdc:	10002126 	beq	r2,zero,23d64 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23ce0:	e0bffb17 	ldw	r2,-20(fp)
   23ce4:	10800217 	ldw	r2,8(r2)
   23ce8:	108000cc 	andi	r2,r2,3
   23cec:	10001826 	beq	r2,zero,23d50 <write+0xc4>
   23cf0:	e0bffb17 	ldw	r2,-20(fp)
   23cf4:	10800017 	ldw	r2,0(r2)
   23cf8:	10800617 	ldw	r2,24(r2)
   23cfc:	10001426 	beq	r2,zero,23d50 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23d00:	e0bffb17 	ldw	r2,-20(fp)
   23d04:	10800017 	ldw	r2,0(r2)
   23d08:	10800617 	ldw	r2,24(r2)
   23d0c:	e0ffff17 	ldw	r3,-4(fp)
   23d10:	180d883a 	mov	r6,r3
   23d14:	e17ffe17 	ldw	r5,-8(fp)
   23d18:	e13ffb17 	ldw	r4,-20(fp)
   23d1c:	103ee83a 	callr	r2
   23d20:	e0bffc15 	stw	r2,-16(fp)
   23d24:	e0bffc17 	ldw	r2,-16(fp)
   23d28:	1000070e 	bge	r2,zero,23d48 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   23d2c:	0023c500 	call	23c50 <alt_get_errno>
   23d30:	1007883a 	mov	r3,r2
   23d34:	e0bffc17 	ldw	r2,-16(fp)
   23d38:	0085c83a 	sub	r2,zero,r2
   23d3c:	18800015 	stw	r2,0(r3)
        return -1;
   23d40:	00bfffc4 	movi	r2,-1
   23d44:	00000c06 	br	23d78 <write+0xec>
      }
      return rval;
   23d48:	e0bffc17 	ldw	r2,-16(fp)
   23d4c:	00000a06 	br	23d78 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23d50:	0023c500 	call	23c50 <alt_get_errno>
   23d54:	1007883a 	mov	r3,r2
   23d58:	00800344 	movi	r2,13
   23d5c:	18800015 	stw	r2,0(r3)
   23d60:	00000406 	br	23d74 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23d64:	0023c500 	call	23c50 <alt_get_errno>
   23d68:	1007883a 	mov	r3,r2
   23d6c:	00801444 	movi	r2,81
   23d70:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23d74:	00bfffc4 	movi	r2,-1
}
   23d78:	e037883a 	mov	sp,fp
   23d7c:	dfc00117 	ldw	ra,4(sp)
   23d80:	df000017 	ldw	fp,0(sp)
   23d84:	dec00204 	addi	sp,sp,8
   23d88:	f800283a 	ret

00023d8c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23d8c:	defffd04 	addi	sp,sp,-12
   23d90:	dfc00215 	stw	ra,8(sp)
   23d94:	df000115 	stw	fp,4(sp)
   23d98:	df000104 	addi	fp,sp,4
   23d9c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23da0:	d1600604 	addi	r5,gp,-32744
   23da4:	e13fff17 	ldw	r4,-4(fp)
   23da8:	0025b500 	call	25b50 <alt_dev_llist_insert>
}
   23dac:	e037883a 	mov	sp,fp
   23db0:	dfc00117 	ldw	ra,4(sp)
   23db4:	df000017 	ldw	fp,0(sp)
   23db8:	dec00204 	addi	sp,sp,8
   23dbc:	f800283a 	ret

00023dc0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23dc0:	defffd04 	addi	sp,sp,-12
   23dc4:	dfc00215 	stw	ra,8(sp)
   23dc8:	df000115 	stw	fp,4(sp)
   23dcc:	df000104 	addi	fp,sp,4
   23dd0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   23dd4:	00264fc0 	call	264fc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23dd8:	00800044 	movi	r2,1
   23ddc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23de0:	0001883a 	nop
   23de4:	e037883a 	mov	sp,fp
   23de8:	dfc00117 	ldw	ra,4(sp)
   23dec:	df000017 	ldw	fp,0(sp)
   23df0:	dec00204 	addi	sp,sp,8
   23df4:	f800283a 	ret

00023df8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23df8:	defffe04 	addi	sp,sp,-8
   23dfc:	dfc00115 	stw	ra,4(sp)
   23e00:	df000015 	stw	fp,0(sp)
   23e04:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   23e08:	000d883a 	mov	r6,zero
   23e0c:	000b883a 	mov	r5,zero
   23e10:	010000b4 	movhi	r4,2
   23e14:	211e2104 	addi	r4,r4,30852
   23e18:	0023fc00 	call	23fc0 <altera_avalon_jtag_uart_init>
   23e1c:	010000b4 	movhi	r4,2
   23e20:	211e1704 	addi	r4,r4,30812
   23e24:	0023d8c0 	call	23d8c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_0, lcd_0);
   23e28:	010000f4 	movhi	r4,3
   23e2c:	21223904 	addi	r4,r4,-30492
   23e30:	00256dc0 	call	256dc <altera_avalon_lcd_16207_init>
   23e34:	010000f4 	movhi	r4,3
   23e38:	21222f04 	addi	r4,r4,-30532
   23e3c:	0023d8c0 	call	23d8c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   23e40:	0001883a 	nop
}
   23e44:	0001883a 	nop
   23e48:	e037883a 	mov	sp,fp
   23e4c:	dfc00117 	ldw	ra,4(sp)
   23e50:	df000017 	ldw	fp,0(sp)
   23e54:	dec00204 	addi	sp,sp,8
   23e58:	f800283a 	ret

00023e5c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23e5c:	defffa04 	addi	sp,sp,-24
   23e60:	dfc00515 	stw	ra,20(sp)
   23e64:	df000415 	stw	fp,16(sp)
   23e68:	df000404 	addi	fp,sp,16
   23e6c:	e13ffd15 	stw	r4,-12(fp)
   23e70:	e17ffe15 	stw	r5,-8(fp)
   23e74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23e78:	e0bffd17 	ldw	r2,-12(fp)
   23e7c:	10800017 	ldw	r2,0(r2)
   23e80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23e84:	e0bffc17 	ldw	r2,-16(fp)
   23e88:	10c00a04 	addi	r3,r2,40
   23e8c:	e0bffd17 	ldw	r2,-12(fp)
   23e90:	10800217 	ldw	r2,8(r2)
   23e94:	100f883a 	mov	r7,r2
   23e98:	e1bfff17 	ldw	r6,-4(fp)
   23e9c:	e17ffe17 	ldw	r5,-8(fp)
   23ea0:	1809883a 	mov	r4,r3
   23ea4:	00244840 	call	24484 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23ea8:	e037883a 	mov	sp,fp
   23eac:	dfc00117 	ldw	ra,4(sp)
   23eb0:	df000017 	ldw	fp,0(sp)
   23eb4:	dec00204 	addi	sp,sp,8
   23eb8:	f800283a 	ret

00023ebc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23ebc:	defffa04 	addi	sp,sp,-24
   23ec0:	dfc00515 	stw	ra,20(sp)
   23ec4:	df000415 	stw	fp,16(sp)
   23ec8:	df000404 	addi	fp,sp,16
   23ecc:	e13ffd15 	stw	r4,-12(fp)
   23ed0:	e17ffe15 	stw	r5,-8(fp)
   23ed4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23ed8:	e0bffd17 	ldw	r2,-12(fp)
   23edc:	10800017 	ldw	r2,0(r2)
   23ee0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23ee4:	e0bffc17 	ldw	r2,-16(fp)
   23ee8:	10c00a04 	addi	r3,r2,40
   23eec:	e0bffd17 	ldw	r2,-12(fp)
   23ef0:	10800217 	ldw	r2,8(r2)
   23ef4:	100f883a 	mov	r7,r2
   23ef8:	e1bfff17 	ldw	r6,-4(fp)
   23efc:	e17ffe17 	ldw	r5,-8(fp)
   23f00:	1809883a 	mov	r4,r3
   23f04:	00246a00 	call	246a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23f08:	e037883a 	mov	sp,fp
   23f0c:	dfc00117 	ldw	ra,4(sp)
   23f10:	df000017 	ldw	fp,0(sp)
   23f14:	dec00204 	addi	sp,sp,8
   23f18:	f800283a 	ret

00023f1c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   23f1c:	defffc04 	addi	sp,sp,-16
   23f20:	dfc00315 	stw	ra,12(sp)
   23f24:	df000215 	stw	fp,8(sp)
   23f28:	df000204 	addi	fp,sp,8
   23f2c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23f30:	e0bfff17 	ldw	r2,-4(fp)
   23f34:	10800017 	ldw	r2,0(r2)
   23f38:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   23f3c:	e0bffe17 	ldw	r2,-8(fp)
   23f40:	10c00a04 	addi	r3,r2,40
   23f44:	e0bfff17 	ldw	r2,-4(fp)
   23f48:	10800217 	ldw	r2,8(r2)
   23f4c:	100b883a 	mov	r5,r2
   23f50:	1809883a 	mov	r4,r3
   23f54:	002432c0 	call	2432c <altera_avalon_jtag_uart_close>
}
   23f58:	e037883a 	mov	sp,fp
   23f5c:	dfc00117 	ldw	ra,4(sp)
   23f60:	df000017 	ldw	fp,0(sp)
   23f64:	dec00204 	addi	sp,sp,8
   23f68:	f800283a 	ret

00023f6c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   23f6c:	defffa04 	addi	sp,sp,-24
   23f70:	dfc00515 	stw	ra,20(sp)
   23f74:	df000415 	stw	fp,16(sp)
   23f78:	df000404 	addi	fp,sp,16
   23f7c:	e13ffd15 	stw	r4,-12(fp)
   23f80:	e17ffe15 	stw	r5,-8(fp)
   23f84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   23f88:	e0bffd17 	ldw	r2,-12(fp)
   23f8c:	10800017 	ldw	r2,0(r2)
   23f90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   23f94:	e0bffc17 	ldw	r2,-16(fp)
   23f98:	10800a04 	addi	r2,r2,40
   23f9c:	e1bfff17 	ldw	r6,-4(fp)
   23fa0:	e17ffe17 	ldw	r5,-8(fp)
   23fa4:	1009883a 	mov	r4,r2
   23fa8:	00243940 	call	24394 <altera_avalon_jtag_uart_ioctl>
}
   23fac:	e037883a 	mov	sp,fp
   23fb0:	dfc00117 	ldw	ra,4(sp)
   23fb4:	df000017 	ldw	fp,0(sp)
   23fb8:	dec00204 	addi	sp,sp,8
   23fbc:	f800283a 	ret

00023fc0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   23fc0:	defffa04 	addi	sp,sp,-24
   23fc4:	dfc00515 	stw	ra,20(sp)
   23fc8:	df000415 	stw	fp,16(sp)
   23fcc:	df000404 	addi	fp,sp,16
   23fd0:	e13ffd15 	stw	r4,-12(fp)
   23fd4:	e17ffe15 	stw	r5,-8(fp)
   23fd8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23fdc:	e0bffd17 	ldw	r2,-12(fp)
   23fe0:	00c00044 	movi	r3,1
   23fe4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   23fe8:	e0bffd17 	ldw	r2,-12(fp)
   23fec:	10800017 	ldw	r2,0(r2)
   23ff0:	10800104 	addi	r2,r2,4
   23ff4:	1007883a 	mov	r3,r2
   23ff8:	e0bffd17 	ldw	r2,-12(fp)
   23ffc:	10800817 	ldw	r2,32(r2)
   24000:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   24004:	e0bffe17 	ldw	r2,-8(fp)
   24008:	e0ffff17 	ldw	r3,-4(fp)
   2400c:	d8000015 	stw	zero,0(sp)
   24010:	e1fffd17 	ldw	r7,-12(fp)
   24014:	018000b4 	movhi	r6,2
   24018:	31902004 	addi	r6,r6,16512
   2401c:	180b883a 	mov	r5,r3
   24020:	1009883a 	mov	r4,r2
   24024:	0025cd40 	call	25cd4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   24028:	e0bffd17 	ldw	r2,-12(fp)
   2402c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   24030:	e0bffd17 	ldw	r2,-12(fp)
   24034:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   24038:	d0e6fd17 	ldw	r3,-25612(gp)
   2403c:	e1fffd17 	ldw	r7,-12(fp)
   24040:	018000b4 	movhi	r6,2
   24044:	3190a304 	addi	r6,r6,17036
   24048:	180b883a 	mov	r5,r3
   2404c:	1009883a 	mov	r4,r2
   24050:	00258700 	call	25870 <alt_alarm_start>
   24054:	1000040e 	bge	r2,zero,24068 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   24058:	e0fffd17 	ldw	r3,-12(fp)
   2405c:	00a00034 	movhi	r2,32768
   24060:	10bfffc4 	addi	r2,r2,-1
   24064:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   24068:	0001883a 	nop
   2406c:	e037883a 	mov	sp,fp
   24070:	dfc00117 	ldw	ra,4(sp)
   24074:	df000017 	ldw	fp,0(sp)
   24078:	dec00204 	addi	sp,sp,8
   2407c:	f800283a 	ret

00024080 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   24080:	defff804 	addi	sp,sp,-32
   24084:	df000715 	stw	fp,28(sp)
   24088:	df000704 	addi	fp,sp,28
   2408c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   24090:	e0bfff17 	ldw	r2,-4(fp)
   24094:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   24098:	e0bffb17 	ldw	r2,-20(fp)
   2409c:	10800017 	ldw	r2,0(r2)
   240a0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   240a4:	e0bffc17 	ldw	r2,-16(fp)
   240a8:	10800104 	addi	r2,r2,4
   240ac:	10800037 	ldwio	r2,0(r2)
   240b0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   240b4:	e0bffd17 	ldw	r2,-12(fp)
   240b8:	1080c00c 	andi	r2,r2,768
   240bc:	10006d26 	beq	r2,zero,24274 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   240c0:	e0bffd17 	ldw	r2,-12(fp)
   240c4:	1080400c 	andi	r2,r2,256
   240c8:	10003526 	beq	r2,zero,241a0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   240cc:	00800074 	movhi	r2,1
   240d0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   240d4:	e0bffb17 	ldw	r2,-20(fp)
   240d8:	10800a17 	ldw	r2,40(r2)
   240dc:	10800044 	addi	r2,r2,1
   240e0:	1081ffcc 	andi	r2,r2,2047
   240e4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   240e8:	e0bffb17 	ldw	r2,-20(fp)
   240ec:	10c00b17 	ldw	r3,44(r2)
   240f0:	e0bffe17 	ldw	r2,-8(fp)
   240f4:	18801526 	beq	r3,r2,2414c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   240f8:	e0bffc17 	ldw	r2,-16(fp)
   240fc:	10800037 	ldwio	r2,0(r2)
   24100:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   24104:	e0bff917 	ldw	r2,-28(fp)
   24108:	10a0000c 	andi	r2,r2,32768
   2410c:	10001126 	beq	r2,zero,24154 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   24110:	e0bffb17 	ldw	r2,-20(fp)
   24114:	10800a17 	ldw	r2,40(r2)
   24118:	e0fff917 	ldw	r3,-28(fp)
   2411c:	1809883a 	mov	r4,r3
   24120:	e0fffb17 	ldw	r3,-20(fp)
   24124:	1885883a 	add	r2,r3,r2
   24128:	10800e04 	addi	r2,r2,56
   2412c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24130:	e0bffb17 	ldw	r2,-20(fp)
   24134:	10800a17 	ldw	r2,40(r2)
   24138:	10800044 	addi	r2,r2,1
   2413c:	10c1ffcc 	andi	r3,r2,2047
   24140:	e0bffb17 	ldw	r2,-20(fp)
   24144:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   24148:	003fe206 	br	240d4 <__alt_data_end+0xfffeba34>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2414c:	0001883a 	nop
   24150:	00000106 	br	24158 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   24154:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   24158:	e0bff917 	ldw	r2,-28(fp)
   2415c:	10bfffec 	andhi	r2,r2,65535
   24160:	10000f26 	beq	r2,zero,241a0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24164:	e0bffb17 	ldw	r2,-20(fp)
   24168:	10c00817 	ldw	r3,32(r2)
   2416c:	00bfff84 	movi	r2,-2
   24170:	1886703a 	and	r3,r3,r2
   24174:	e0bffb17 	ldw	r2,-20(fp)
   24178:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2417c:	e0bffc17 	ldw	r2,-16(fp)
   24180:	10800104 	addi	r2,r2,4
   24184:	1007883a 	mov	r3,r2
   24188:	e0bffb17 	ldw	r2,-20(fp)
   2418c:	10800817 	ldw	r2,32(r2)
   24190:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24194:	e0bffc17 	ldw	r2,-16(fp)
   24198:	10800104 	addi	r2,r2,4
   2419c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   241a0:	e0bffd17 	ldw	r2,-12(fp)
   241a4:	1080800c 	andi	r2,r2,512
   241a8:	103fbe26 	beq	r2,zero,240a4 <__alt_data_end+0xfffeba04>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   241ac:	e0bffd17 	ldw	r2,-12(fp)
   241b0:	1004d43a 	srli	r2,r2,16
   241b4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   241b8:	00001406 	br	2420c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   241bc:	e0bffc17 	ldw	r2,-16(fp)
   241c0:	e0fffb17 	ldw	r3,-20(fp)
   241c4:	18c00d17 	ldw	r3,52(r3)
   241c8:	e13ffb17 	ldw	r4,-20(fp)
   241cc:	20c7883a 	add	r3,r4,r3
   241d0:	18c20e04 	addi	r3,r3,2104
   241d4:	18c00003 	ldbu	r3,0(r3)
   241d8:	18c03fcc 	andi	r3,r3,255
   241dc:	18c0201c 	xori	r3,r3,128
   241e0:	18ffe004 	addi	r3,r3,-128
   241e4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   241e8:	e0bffb17 	ldw	r2,-20(fp)
   241ec:	10800d17 	ldw	r2,52(r2)
   241f0:	10800044 	addi	r2,r2,1
   241f4:	10c1ffcc 	andi	r3,r2,2047
   241f8:	e0bffb17 	ldw	r2,-20(fp)
   241fc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   24200:	e0bffa17 	ldw	r2,-24(fp)
   24204:	10bfffc4 	addi	r2,r2,-1
   24208:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2420c:	e0bffa17 	ldw	r2,-24(fp)
   24210:	10000526 	beq	r2,zero,24228 <altera_avalon_jtag_uart_irq+0x1a8>
   24214:	e0bffb17 	ldw	r2,-20(fp)
   24218:	10c00d17 	ldw	r3,52(r2)
   2421c:	e0bffb17 	ldw	r2,-20(fp)
   24220:	10800c17 	ldw	r2,48(r2)
   24224:	18bfe51e 	bne	r3,r2,241bc <__alt_data_end+0xfffebb1c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   24228:	e0bffa17 	ldw	r2,-24(fp)
   2422c:	103f9d26 	beq	r2,zero,240a4 <__alt_data_end+0xfffeba04>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24230:	e0bffb17 	ldw	r2,-20(fp)
   24234:	10c00817 	ldw	r3,32(r2)
   24238:	00bfff44 	movi	r2,-3
   2423c:	1886703a 	and	r3,r3,r2
   24240:	e0bffb17 	ldw	r2,-20(fp)
   24244:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24248:	e0bffb17 	ldw	r2,-20(fp)
   2424c:	10800017 	ldw	r2,0(r2)
   24250:	10800104 	addi	r2,r2,4
   24254:	1007883a 	mov	r3,r2
   24258:	e0bffb17 	ldw	r2,-20(fp)
   2425c:	10800817 	ldw	r2,32(r2)
   24260:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24264:	e0bffc17 	ldw	r2,-16(fp)
   24268:	10800104 	addi	r2,r2,4
   2426c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   24270:	003f8c06 	br	240a4 <__alt_data_end+0xfffeba04>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   24274:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   24278:	0001883a 	nop
   2427c:	e037883a 	mov	sp,fp
   24280:	df000017 	ldw	fp,0(sp)
   24284:	dec00104 	addi	sp,sp,4
   24288:	f800283a 	ret

0002428c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2428c:	defff804 	addi	sp,sp,-32
   24290:	df000715 	stw	fp,28(sp)
   24294:	df000704 	addi	fp,sp,28
   24298:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2429c:	e0bffb17 	ldw	r2,-20(fp)
   242a0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   242a4:	e0bff917 	ldw	r2,-28(fp)
   242a8:	10800017 	ldw	r2,0(r2)
   242ac:	10800104 	addi	r2,r2,4
   242b0:	10800037 	ldwio	r2,0(r2)
   242b4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   242b8:	e0bffa17 	ldw	r2,-24(fp)
   242bc:	1081000c 	andi	r2,r2,1024
   242c0:	10000b26 	beq	r2,zero,242f0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   242c4:	e0bff917 	ldw	r2,-28(fp)
   242c8:	10800017 	ldw	r2,0(r2)
   242cc:	10800104 	addi	r2,r2,4
   242d0:	1007883a 	mov	r3,r2
   242d4:	e0bff917 	ldw	r2,-28(fp)
   242d8:	10800817 	ldw	r2,32(r2)
   242dc:	10810014 	ori	r2,r2,1024
   242e0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   242e4:	e0bff917 	ldw	r2,-28(fp)
   242e8:	10000915 	stw	zero,36(r2)
   242ec:	00000a06 	br	24318 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   242f0:	e0bff917 	ldw	r2,-28(fp)
   242f4:	10c00917 	ldw	r3,36(r2)
   242f8:	00a00034 	movhi	r2,32768
   242fc:	10bfff04 	addi	r2,r2,-4
   24300:	10c00536 	bltu	r2,r3,24318 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   24304:	e0bff917 	ldw	r2,-28(fp)
   24308:	10800917 	ldw	r2,36(r2)
   2430c:	10c00044 	addi	r3,r2,1
   24310:	e0bff917 	ldw	r2,-28(fp)
   24314:	10c00915 	stw	r3,36(r2)
   24318:	d0a6fd17 	ldw	r2,-25612(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2431c:	e037883a 	mov	sp,fp
   24320:	df000017 	ldw	fp,0(sp)
   24324:	dec00104 	addi	sp,sp,4
   24328:	f800283a 	ret

0002432c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2432c:	defffd04 	addi	sp,sp,-12
   24330:	df000215 	stw	fp,8(sp)
   24334:	df000204 	addi	fp,sp,8
   24338:	e13ffe15 	stw	r4,-8(fp)
   2433c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   24340:	00000506 	br	24358 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   24344:	e0bfff17 	ldw	r2,-4(fp)
   24348:	1090000c 	andi	r2,r2,16384
   2434c:	10000226 	beq	r2,zero,24358 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   24350:	00bffd44 	movi	r2,-11
   24354:	00000b06 	br	24384 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   24358:	e0bffe17 	ldw	r2,-8(fp)
   2435c:	10c00d17 	ldw	r3,52(r2)
   24360:	e0bffe17 	ldw	r2,-8(fp)
   24364:	10800c17 	ldw	r2,48(r2)
   24368:	18800526 	beq	r3,r2,24380 <altera_avalon_jtag_uart_close+0x54>
   2436c:	e0bffe17 	ldw	r2,-8(fp)
   24370:	10c00917 	ldw	r3,36(r2)
   24374:	e0bffe17 	ldw	r2,-8(fp)
   24378:	10800117 	ldw	r2,4(r2)
   2437c:	18bff136 	bltu	r3,r2,24344 <__alt_data_end+0xfffebca4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   24380:	0005883a 	mov	r2,zero
}
   24384:	e037883a 	mov	sp,fp
   24388:	df000017 	ldw	fp,0(sp)
   2438c:	dec00104 	addi	sp,sp,4
   24390:	f800283a 	ret

00024394 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   24394:	defffa04 	addi	sp,sp,-24
   24398:	df000515 	stw	fp,20(sp)
   2439c:	df000504 	addi	fp,sp,20
   243a0:	e13ffd15 	stw	r4,-12(fp)
   243a4:	e17ffe15 	stw	r5,-8(fp)
   243a8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   243ac:	00bff9c4 	movi	r2,-25
   243b0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   243b4:	e0bffe17 	ldw	r2,-8(fp)
   243b8:	10da8060 	cmpeqi	r3,r2,27137
   243bc:	1800031e 	bne	r3,zero,243cc <altera_avalon_jtag_uart_ioctl+0x38>
   243c0:	109a80a0 	cmpeqi	r2,r2,27138
   243c4:	1000181e 	bne	r2,zero,24428 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   243c8:	00002906 	br	24470 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   243cc:	e0bffd17 	ldw	r2,-12(fp)
   243d0:	10c00117 	ldw	r3,4(r2)
   243d4:	00a00034 	movhi	r2,32768
   243d8:	10bfffc4 	addi	r2,r2,-1
   243dc:	18802126 	beq	r3,r2,24464 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   243e0:	e0bfff17 	ldw	r2,-4(fp)
   243e4:	10800017 	ldw	r2,0(r2)
   243e8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   243ec:	e0bffc17 	ldw	r2,-16(fp)
   243f0:	10800090 	cmplti	r2,r2,2
   243f4:	1000061e 	bne	r2,zero,24410 <altera_avalon_jtag_uart_ioctl+0x7c>
   243f8:	e0fffc17 	ldw	r3,-16(fp)
   243fc:	00a00034 	movhi	r2,32768
   24400:	10bfffc4 	addi	r2,r2,-1
   24404:	18800226 	beq	r3,r2,24410 <altera_avalon_jtag_uart_ioctl+0x7c>
   24408:	e0bffc17 	ldw	r2,-16(fp)
   2440c:	00000206 	br	24418 <altera_avalon_jtag_uart_ioctl+0x84>
   24410:	00a00034 	movhi	r2,32768
   24414:	10bfff84 	addi	r2,r2,-2
   24418:	e0fffd17 	ldw	r3,-12(fp)
   2441c:	18800115 	stw	r2,4(r3)
      rc = 0;
   24420:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   24424:	00000f06 	br	24464 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   24428:	e0bffd17 	ldw	r2,-12(fp)
   2442c:	10c00117 	ldw	r3,4(r2)
   24430:	00a00034 	movhi	r2,32768
   24434:	10bfffc4 	addi	r2,r2,-1
   24438:	18800c26 	beq	r3,r2,2446c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2443c:	e0bffd17 	ldw	r2,-12(fp)
   24440:	10c00917 	ldw	r3,36(r2)
   24444:	e0bffd17 	ldw	r2,-12(fp)
   24448:	10800117 	ldw	r2,4(r2)
   2444c:	1885803a 	cmpltu	r2,r3,r2
   24450:	10c03fcc 	andi	r3,r2,255
   24454:	e0bfff17 	ldw	r2,-4(fp)
   24458:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2445c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   24460:	00000206 	br	2446c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   24464:	0001883a 	nop
   24468:	00000106 	br	24470 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2446c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   24470:	e0bffb17 	ldw	r2,-20(fp)
}
   24474:	e037883a 	mov	sp,fp
   24478:	df000017 	ldw	fp,0(sp)
   2447c:	dec00104 	addi	sp,sp,4
   24480:	f800283a 	ret

00024484 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   24484:	defff304 	addi	sp,sp,-52
   24488:	dfc00c15 	stw	ra,48(sp)
   2448c:	df000b15 	stw	fp,44(sp)
   24490:	df000b04 	addi	fp,sp,44
   24494:	e13ffc15 	stw	r4,-16(fp)
   24498:	e17ffd15 	stw	r5,-12(fp)
   2449c:	e1bffe15 	stw	r6,-8(fp)
   244a0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   244a4:	e0bffd17 	ldw	r2,-12(fp)
   244a8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   244ac:	00004706 	br	245cc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   244b0:	e0bffc17 	ldw	r2,-16(fp)
   244b4:	10800a17 	ldw	r2,40(r2)
   244b8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   244bc:	e0bffc17 	ldw	r2,-16(fp)
   244c0:	10800b17 	ldw	r2,44(r2)
   244c4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   244c8:	e0fff717 	ldw	r3,-36(fp)
   244cc:	e0bff817 	ldw	r2,-32(fp)
   244d0:	18800536 	bltu	r3,r2,244e8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   244d4:	e0fff717 	ldw	r3,-36(fp)
   244d8:	e0bff817 	ldw	r2,-32(fp)
   244dc:	1885c83a 	sub	r2,r3,r2
   244e0:	e0bff615 	stw	r2,-40(fp)
   244e4:	00000406 	br	244f8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   244e8:	00c20004 	movi	r3,2048
   244ec:	e0bff817 	ldw	r2,-32(fp)
   244f0:	1885c83a 	sub	r2,r3,r2
   244f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   244f8:	e0bff617 	ldw	r2,-40(fp)
   244fc:	10001e26 	beq	r2,zero,24578 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   24500:	e0fffe17 	ldw	r3,-8(fp)
   24504:	e0bff617 	ldw	r2,-40(fp)
   24508:	1880022e 	bgeu	r3,r2,24514 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   2450c:	e0bffe17 	ldw	r2,-8(fp)
   24510:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   24514:	e0bffc17 	ldw	r2,-16(fp)
   24518:	10c00e04 	addi	r3,r2,56
   2451c:	e0bff817 	ldw	r2,-32(fp)
   24520:	1885883a 	add	r2,r3,r2
   24524:	e1bff617 	ldw	r6,-40(fp)
   24528:	100b883a 	mov	r5,r2
   2452c:	e13ff517 	ldw	r4,-44(fp)
   24530:	0021a180 	call	21a18 <memcpy>
      ptr   += n;
   24534:	e0fff517 	ldw	r3,-44(fp)
   24538:	e0bff617 	ldw	r2,-40(fp)
   2453c:	1885883a 	add	r2,r3,r2
   24540:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   24544:	e0fffe17 	ldw	r3,-8(fp)
   24548:	e0bff617 	ldw	r2,-40(fp)
   2454c:	1885c83a 	sub	r2,r3,r2
   24550:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24554:	e0fff817 	ldw	r3,-32(fp)
   24558:	e0bff617 	ldw	r2,-40(fp)
   2455c:	1885883a 	add	r2,r3,r2
   24560:	10c1ffcc 	andi	r3,r2,2047
   24564:	e0bffc17 	ldw	r2,-16(fp)
   24568:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2456c:	e0bffe17 	ldw	r2,-8(fp)
   24570:	00bfcf16 	blt	zero,r2,244b0 <__alt_data_end+0xfffebe10>
   24574:	00000106 	br	2457c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   24578:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2457c:	e0fff517 	ldw	r3,-44(fp)
   24580:	e0bffd17 	ldw	r2,-12(fp)
   24584:	1880141e 	bne	r3,r2,245d8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   24588:	e0bfff17 	ldw	r2,-4(fp)
   2458c:	1090000c 	andi	r2,r2,16384
   24590:	1000131e 	bne	r2,zero,245e0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   24594:	0001883a 	nop
   24598:	e0bffc17 	ldw	r2,-16(fp)
   2459c:	10c00a17 	ldw	r3,40(r2)
   245a0:	e0bff717 	ldw	r2,-36(fp)
   245a4:	1880051e 	bne	r3,r2,245bc <altera_avalon_jtag_uart_read+0x138>
   245a8:	e0bffc17 	ldw	r2,-16(fp)
   245ac:	10c00917 	ldw	r3,36(r2)
   245b0:	e0bffc17 	ldw	r2,-16(fp)
   245b4:	10800117 	ldw	r2,4(r2)
   245b8:	18bff736 	bltu	r3,r2,24598 <__alt_data_end+0xfffebef8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   245bc:	e0bffc17 	ldw	r2,-16(fp)
   245c0:	10c00a17 	ldw	r3,40(r2)
   245c4:	e0bff717 	ldw	r2,-36(fp)
   245c8:	18800726 	beq	r3,r2,245e8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   245cc:	e0bffe17 	ldw	r2,-8(fp)
   245d0:	00bfb716 	blt	zero,r2,244b0 <__alt_data_end+0xfffebe10>
   245d4:	00000506 	br	245ec <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   245d8:	0001883a 	nop
   245dc:	00000306 	br	245ec <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   245e0:	0001883a 	nop
   245e4:	00000106 	br	245ec <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   245e8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   245ec:	e0fff517 	ldw	r3,-44(fp)
   245f0:	e0bffd17 	ldw	r2,-12(fp)
   245f4:	18801826 	beq	r3,r2,24658 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   245f8:	0005303a 	rdctl	r2,status
   245fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24600:	e0fffb17 	ldw	r3,-20(fp)
   24604:	00bfff84 	movi	r2,-2
   24608:	1884703a 	and	r2,r3,r2
   2460c:	1001703a 	wrctl	status,r2
  
  return context;
   24610:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   24614:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24618:	e0bffc17 	ldw	r2,-16(fp)
   2461c:	10800817 	ldw	r2,32(r2)
   24620:	10c00054 	ori	r3,r2,1
   24624:	e0bffc17 	ldw	r2,-16(fp)
   24628:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2462c:	e0bffc17 	ldw	r2,-16(fp)
   24630:	10800017 	ldw	r2,0(r2)
   24634:	10800104 	addi	r2,r2,4
   24638:	1007883a 	mov	r3,r2
   2463c:	e0bffc17 	ldw	r2,-16(fp)
   24640:	10800817 	ldw	r2,32(r2)
   24644:	18800035 	stwio	r2,0(r3)
   24648:	e0bffa17 	ldw	r2,-24(fp)
   2464c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24650:	e0bff917 	ldw	r2,-28(fp)
   24654:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   24658:	e0fff517 	ldw	r3,-44(fp)
   2465c:	e0bffd17 	ldw	r2,-12(fp)
   24660:	18800426 	beq	r3,r2,24674 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   24664:	e0fff517 	ldw	r3,-44(fp)
   24668:	e0bffd17 	ldw	r2,-12(fp)
   2466c:	1885c83a 	sub	r2,r3,r2
   24670:	00000606 	br	2468c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   24674:	e0bfff17 	ldw	r2,-4(fp)
   24678:	1090000c 	andi	r2,r2,16384
   2467c:	10000226 	beq	r2,zero,24688 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   24680:	00bffd44 	movi	r2,-11
   24684:	00000106 	br	2468c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   24688:	00bffec4 	movi	r2,-5
}
   2468c:	e037883a 	mov	sp,fp
   24690:	dfc00117 	ldw	ra,4(sp)
   24694:	df000017 	ldw	fp,0(sp)
   24698:	dec00204 	addi	sp,sp,8
   2469c:	f800283a 	ret

000246a0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   246a0:	defff304 	addi	sp,sp,-52
   246a4:	dfc00c15 	stw	ra,48(sp)
   246a8:	df000b15 	stw	fp,44(sp)
   246ac:	df000b04 	addi	fp,sp,44
   246b0:	e13ffc15 	stw	r4,-16(fp)
   246b4:	e17ffd15 	stw	r5,-12(fp)
   246b8:	e1bffe15 	stw	r6,-8(fp)
   246bc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   246c0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   246c4:	e0bffd17 	ldw	r2,-12(fp)
   246c8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   246cc:	00003706 	br	247ac <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   246d0:	e0bffc17 	ldw	r2,-16(fp)
   246d4:	10800c17 	ldw	r2,48(r2)
   246d8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   246dc:	e0bffc17 	ldw	r2,-16(fp)
   246e0:	10800d17 	ldw	r2,52(r2)
   246e4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   246e8:	e0fff917 	ldw	r3,-28(fp)
   246ec:	e0bff517 	ldw	r2,-44(fp)
   246f0:	1880062e 	bgeu	r3,r2,2470c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   246f4:	e0fff517 	ldw	r3,-44(fp)
   246f8:	e0bff917 	ldw	r2,-28(fp)
   246fc:	1885c83a 	sub	r2,r3,r2
   24700:	10bfffc4 	addi	r2,r2,-1
   24704:	e0bff615 	stw	r2,-40(fp)
   24708:	00000b06 	br	24738 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2470c:	e0bff517 	ldw	r2,-44(fp)
   24710:	10000526 	beq	r2,zero,24728 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   24714:	00c20004 	movi	r3,2048
   24718:	e0bff917 	ldw	r2,-28(fp)
   2471c:	1885c83a 	sub	r2,r3,r2
   24720:	e0bff615 	stw	r2,-40(fp)
   24724:	00000406 	br	24738 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   24728:	00c1ffc4 	movi	r3,2047
   2472c:	e0bff917 	ldw	r2,-28(fp)
   24730:	1885c83a 	sub	r2,r3,r2
   24734:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   24738:	e0bff617 	ldw	r2,-40(fp)
   2473c:	10001e26 	beq	r2,zero,247b8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   24740:	e0fffe17 	ldw	r3,-8(fp)
   24744:	e0bff617 	ldw	r2,-40(fp)
   24748:	1880022e 	bgeu	r3,r2,24754 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2474c:	e0bffe17 	ldw	r2,-8(fp)
   24750:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   24754:	e0bffc17 	ldw	r2,-16(fp)
   24758:	10c20e04 	addi	r3,r2,2104
   2475c:	e0bff917 	ldw	r2,-28(fp)
   24760:	1885883a 	add	r2,r3,r2
   24764:	e1bff617 	ldw	r6,-40(fp)
   24768:	e17ffd17 	ldw	r5,-12(fp)
   2476c:	1009883a 	mov	r4,r2
   24770:	0021a180 	call	21a18 <memcpy>
      ptr   += n;
   24774:	e0fffd17 	ldw	r3,-12(fp)
   24778:	e0bff617 	ldw	r2,-40(fp)
   2477c:	1885883a 	add	r2,r3,r2
   24780:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   24784:	e0fffe17 	ldw	r3,-8(fp)
   24788:	e0bff617 	ldw	r2,-40(fp)
   2478c:	1885c83a 	sub	r2,r3,r2
   24790:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24794:	e0fff917 	ldw	r3,-28(fp)
   24798:	e0bff617 	ldw	r2,-40(fp)
   2479c:	1885883a 	add	r2,r3,r2
   247a0:	10c1ffcc 	andi	r3,r2,2047
   247a4:	e0bffc17 	ldw	r2,-16(fp)
   247a8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   247ac:	e0bffe17 	ldw	r2,-8(fp)
   247b0:	00bfc716 	blt	zero,r2,246d0 <__alt_data_end+0xfffec030>
   247b4:	00000106 	br	247bc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   247b8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   247bc:	0005303a 	rdctl	r2,status
   247c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   247c4:	e0fffb17 	ldw	r3,-20(fp)
   247c8:	00bfff84 	movi	r2,-2
   247cc:	1884703a 	and	r2,r3,r2
   247d0:	1001703a 	wrctl	status,r2
  
  return context;
   247d4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   247d8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   247dc:	e0bffc17 	ldw	r2,-16(fp)
   247e0:	10800817 	ldw	r2,32(r2)
   247e4:	10c00094 	ori	r3,r2,2
   247e8:	e0bffc17 	ldw	r2,-16(fp)
   247ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   247f0:	e0bffc17 	ldw	r2,-16(fp)
   247f4:	10800017 	ldw	r2,0(r2)
   247f8:	10800104 	addi	r2,r2,4
   247fc:	1007883a 	mov	r3,r2
   24800:	e0bffc17 	ldw	r2,-16(fp)
   24804:	10800817 	ldw	r2,32(r2)
   24808:	18800035 	stwio	r2,0(r3)
   2480c:	e0bffa17 	ldw	r2,-24(fp)
   24810:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24814:	e0bff817 	ldw	r2,-32(fp)
   24818:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2481c:	e0bffe17 	ldw	r2,-8(fp)
   24820:	0080100e 	bge	zero,r2,24864 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   24824:	e0bfff17 	ldw	r2,-4(fp)
   24828:	1090000c 	andi	r2,r2,16384
   2482c:	1000101e 	bne	r2,zero,24870 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   24830:	0001883a 	nop
   24834:	e0bffc17 	ldw	r2,-16(fp)
   24838:	10c00d17 	ldw	r3,52(r2)
   2483c:	e0bff517 	ldw	r2,-44(fp)
   24840:	1880051e 	bne	r3,r2,24858 <altera_avalon_jtag_uart_write+0x1b8>
   24844:	e0bffc17 	ldw	r2,-16(fp)
   24848:	10c00917 	ldw	r3,36(r2)
   2484c:	e0bffc17 	ldw	r2,-16(fp)
   24850:	10800117 	ldw	r2,4(r2)
   24854:	18bff736 	bltu	r3,r2,24834 <__alt_data_end+0xfffec194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   24858:	e0bffc17 	ldw	r2,-16(fp)
   2485c:	10800917 	ldw	r2,36(r2)
   24860:	1000051e 	bne	r2,zero,24878 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   24864:	e0bffe17 	ldw	r2,-8(fp)
   24868:	00bfd016 	blt	zero,r2,247ac <__alt_data_end+0xfffec10c>
   2486c:	00000306 	br	2487c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   24870:	0001883a 	nop
   24874:	00000106 	br	2487c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   24878:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2487c:	e0fffd17 	ldw	r3,-12(fp)
   24880:	e0bff717 	ldw	r2,-36(fp)
   24884:	18800426 	beq	r3,r2,24898 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   24888:	e0fffd17 	ldw	r3,-12(fp)
   2488c:	e0bff717 	ldw	r2,-36(fp)
   24890:	1885c83a 	sub	r2,r3,r2
   24894:	00000606 	br	248b0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   24898:	e0bfff17 	ldw	r2,-4(fp)
   2489c:	1090000c 	andi	r2,r2,16384
   248a0:	10000226 	beq	r2,zero,248ac <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   248a4:	00bffd44 	movi	r2,-11
   248a8:	00000106 	br	248b0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   248ac:	00bffec4 	movi	r2,-5
}
   248b0:	e037883a 	mov	sp,fp
   248b4:	dfc00117 	ldw	ra,4(sp)
   248b8:	df000017 	ldw	fp,0(sp)
   248bc:	dec00204 	addi	sp,sp,8
   248c0:	f800283a 	ret

000248c4 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
   248c4:	defffa04 	addi	sp,sp,-24
   248c8:	dfc00515 	stw	ra,20(sp)
   248cc:	df000415 	stw	fp,16(sp)
   248d0:	df000404 	addi	fp,sp,16
   248d4:	e13ffe15 	stw	r4,-8(fp)
   248d8:	2805883a 	mov	r2,r5
   248dc:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   248e0:	e0bffe17 	ldw	r2,-8(fp)
   248e4:	10800017 	ldw	r2,0(r2)
   248e8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   248ec:	008003f4 	movhi	r2,15
   248f0:	10909004 	addi	r2,r2,16960
   248f4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   248f8:	e0bffe17 	ldw	r2,-8(fp)
   248fc:	10800803 	ldbu	r2,32(r2)
   24900:	10803fcc 	andi	r2,r2,255
   24904:	1080201c 	xori	r2,r2,128
   24908:	10bfe004 	addi	r2,r2,-128
   2490c:	1000151e 	bne	r2,zero,24964 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   24910:	00000906 	br	24938 <lcd_write_command+0x74>
    if (--i == 0)
   24914:	e0bffc17 	ldw	r2,-16(fp)
   24918:	10bfffc4 	addi	r2,r2,-1
   2491c:	e0bffc15 	stw	r2,-16(fp)
   24920:	e0bffc17 	ldw	r2,-16(fp)
   24924:	1000041e 	bne	r2,zero,24938 <lcd_write_command+0x74>
    {
      sp->broken = 1;
   24928:	e0bffe17 	ldw	r2,-8(fp)
   2492c:	00c00044 	movi	r3,1
   24930:	10c00805 	stb	r3,32(r2)
      return;
   24934:	00000c06 	br	24968 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   24938:	e0bffd17 	ldw	r2,-12(fp)
   2493c:	10800104 	addi	r2,r2,4
   24940:	10800037 	ldwio	r2,0(r2)
   24944:	1080200c 	andi	r2,r2,128
   24948:	103ff21e 	bne	r2,zero,24914 <__alt_data_end+0xfffec274>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   2494c:	01001904 	movi	r4,100
   24950:	0023c200 	call	23c20 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
   24954:	e0bffd17 	ldw	r2,-12(fp)
   24958:	e0ffff03 	ldbu	r3,-4(fp)
   2495c:	10c00035 	stwio	r3,0(r2)
   24960:	00000106 	br	24968 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   24964:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
   24968:	e037883a 	mov	sp,fp
   2496c:	dfc00117 	ldw	ra,4(sp)
   24970:	df000017 	ldw	fp,0(sp)
   24974:	dec00204 	addi	sp,sp,8
   24978:	f800283a 	ret

0002497c <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
   2497c:	defffa04 	addi	sp,sp,-24
   24980:	dfc00515 	stw	ra,20(sp)
   24984:	df000415 	stw	fp,16(sp)
   24988:	df000404 	addi	fp,sp,16
   2498c:	e13ffe15 	stw	r4,-8(fp)
   24990:	2805883a 	mov	r2,r5
   24994:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   24998:	e0bffe17 	ldw	r2,-8(fp)
   2499c:	10800017 	ldw	r2,0(r2)
   249a0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   249a4:	008003f4 	movhi	r2,15
   249a8:	10909004 	addi	r2,r2,16960
   249ac:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   249b0:	e0bffe17 	ldw	r2,-8(fp)
   249b4:	10800803 	ldbu	r2,32(r2)
   249b8:	10803fcc 	andi	r2,r2,255
   249bc:	1080201c 	xori	r2,r2,128
   249c0:	10bfe004 	addi	r2,r2,-128
   249c4:	10001d1e 	bne	r2,zero,24a3c <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   249c8:	00000906 	br	249f0 <lcd_write_data+0x74>
    if (--i == 0)
   249cc:	e0bffc17 	ldw	r2,-16(fp)
   249d0:	10bfffc4 	addi	r2,r2,-1
   249d4:	e0bffc15 	stw	r2,-16(fp)
   249d8:	e0bffc17 	ldw	r2,-16(fp)
   249dc:	1000041e 	bne	r2,zero,249f0 <lcd_write_data+0x74>
    {
      sp->broken = 1;
   249e0:	e0bffe17 	ldw	r2,-8(fp)
   249e4:	00c00044 	movi	r3,1
   249e8:	10c00805 	stb	r3,32(r2)
      return;
   249ec:	00001406 	br	24a40 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   249f0:	e0bffd17 	ldw	r2,-12(fp)
   249f4:	10800104 	addi	r2,r2,4
   249f8:	10800037 	ldwio	r2,0(r2)
   249fc:	1080200c 	andi	r2,r2,128
   24a00:	103ff21e 	bne	r2,zero,249cc <__alt_data_end+0xfffec32c>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   24a04:	01001904 	movi	r4,100
   24a08:	0023c200 	call	23c20 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
   24a0c:	e0bffd17 	ldw	r2,-12(fp)
   24a10:	10800204 	addi	r2,r2,8
   24a14:	1007883a 	mov	r3,r2
   24a18:	e0bfff03 	ldbu	r2,-4(fp)
   24a1c:	18800035 	stwio	r2,0(r3)

  sp->address++;
   24a20:	e0bffe17 	ldw	r2,-8(fp)
   24a24:	108008c3 	ldbu	r2,35(r2)
   24a28:	10800044 	addi	r2,r2,1
   24a2c:	1007883a 	mov	r3,r2
   24a30:	e0bffe17 	ldw	r2,-8(fp)
   24a34:	10c008c5 	stb	r3,35(r2)
   24a38:	00000106 	br	24a40 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   24a3c:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
   24a40:	e037883a 	mov	sp,fp
   24a44:	dfc00117 	ldw	ra,4(sp)
   24a48:	df000017 	ldw	fp,0(sp)
   24a4c:	dec00204 	addi	sp,sp,8
   24a50:	f800283a 	ret

00024a54 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
   24a54:	defffb04 	addi	sp,sp,-20
   24a58:	dfc00415 	stw	ra,16(sp)
   24a5c:	df000315 	stw	fp,12(sp)
   24a60:	dc000215 	stw	r16,8(sp)
   24a64:	df000304 	addi	fp,sp,12
   24a68:	e13ffe15 	stw	r4,-8(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
   24a6c:	01400044 	movi	r5,1
   24a70:	e13ffe17 	ldw	r4,-8(fp)
   24a74:	00248c40 	call	248c4 <lcd_write_command>

  sp->x = 0;
   24a78:	e0bffe17 	ldw	r2,-8(fp)
   24a7c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
   24a80:	e0bffe17 	ldw	r2,-8(fp)
   24a84:	10000885 	stb	zero,34(r2)
  sp->address = 0;
   24a88:	e0bffe17 	ldw	r2,-8(fp)
   24a8c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24a90:	e03ffd15 	stw	zero,-12(fp)
   24a94:	00001f06 	br	24b14 <lcd_clear_screen+0xc0>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
   24a98:	014018c4 	movi	r5,99
   24a9c:	e13ffd17 	ldw	r4,-12(fp)
   24aa0:	00233a00 	call	233a0 <__mulsi3>
   24aa4:	10801004 	addi	r2,r2,64
   24aa8:	e0fffe17 	ldw	r3,-8(fp)
   24aac:	1885883a 	add	r2,r3,r2
   24ab0:	01801444 	movi	r6,81
   24ab4:	01400804 	movi	r5,32
   24ab8:	1009883a 	mov	r4,r2
   24abc:	0021cbc0 	call	21cbc <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
   24ac0:	014018c4 	movi	r5,99
   24ac4:	e13ffd17 	ldw	r4,-12(fp)
   24ac8:	00233a00 	call	233a0 <__mulsi3>
   24acc:	10800c04 	addi	r2,r2,48
   24ad0:	e0fffe17 	ldw	r3,-8(fp)
   24ad4:	1885883a 	add	r2,r3,r2
   24ad8:	01800404 	movi	r6,16
   24adc:	01400804 	movi	r5,32
   24ae0:	1009883a 	mov	r4,r2
   24ae4:	0021cbc0 	call	21cbc <memset>
    sp->line[y].width = 0;
   24ae8:	e43ffe17 	ldw	r16,-8(fp)
   24aec:	e0bffd17 	ldw	r2,-12(fp)
   24af0:	014018c4 	movi	r5,99
   24af4:	1009883a 	mov	r4,r2
   24af8:	00233a00 	call	233a0 <__mulsi3>
   24afc:	8085883a 	add	r2,r16,r2
   24b00:	10802444 	addi	r2,r2,145
   24b04:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24b08:	e0bffd17 	ldw	r2,-12(fp)
   24b0c:	10800044 	addi	r2,r2,1
   24b10:	e0bffd15 	stw	r2,-12(fp)
   24b14:	e0bffd17 	ldw	r2,-12(fp)
   24b18:	10800090 	cmplti	r2,r2,2
   24b1c:	103fde1e 	bne	r2,zero,24a98 <__alt_data_end+0xfffec3f8>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
   24b20:	0001883a 	nop
   24b24:	e6ffff04 	addi	sp,fp,-4
   24b28:	dfc00217 	ldw	ra,8(sp)
   24b2c:	df000117 	ldw	fp,4(sp)
   24b30:	dc000017 	ldw	r16,0(sp)
   24b34:	dec00304 	addi	sp,sp,12
   24b38:	f800283a 	ret

00024b3c <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
   24b3c:	defff504 	addi	sp,sp,-44
   24b40:	dfc00a15 	stw	ra,40(sp)
   24b44:	df000915 	stw	fp,36(sp)
   24b48:	dc400815 	stw	r17,32(sp)
   24b4c:	dc000715 	stw	r16,28(sp)
   24b50:	df000904 	addi	fp,sp,36
   24b54:	e13ffd15 	stw	r4,-12(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
   24b58:	e0bffd17 	ldw	r2,-12(fp)
   24b5c:	10800943 	ldbu	r2,37(r2)
   24b60:	10803fcc 	andi	r2,r2,255
   24b64:	e0bffa15 	stw	r2,-24(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24b68:	e03ff715 	stw	zero,-36(fp)
   24b6c:	00007206 	br	24d38 <lcd_repaint_screen+0x1fc>
  {
    int width  = sp->line[y].width;
   24b70:	e43ffd17 	ldw	r16,-12(fp)
   24b74:	e0bff717 	ldw	r2,-36(fp)
   24b78:	014018c4 	movi	r5,99
   24b7c:	1009883a 	mov	r4,r2
   24b80:	00233a00 	call	233a0 <__mulsi3>
   24b84:	8085883a 	add	r2,r16,r2
   24b88:	10802444 	addi	r2,r2,145
   24b8c:	10800003 	ldbu	r2,0(r2)
   24b90:	10803fcc 	andi	r2,r2,255
   24b94:	1080201c 	xori	r2,r2,128
   24b98:	10bfe004 	addi	r2,r2,-128
   24b9c:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   24ba0:	e43ffd17 	ldw	r16,-12(fp)
   24ba4:	e0bff717 	ldw	r2,-36(fp)
   24ba8:	014018c4 	movi	r5,99
   24bac:	1009883a 	mov	r4,r2
   24bb0:	00233a00 	call	233a0 <__mulsi3>
   24bb4:	8085883a 	add	r2,r16,r2
   24bb8:	10802484 	addi	r2,r2,146
   24bbc:	10800003 	ldbu	r2,0(r2)
   24bc0:	10803fcc 	andi	r2,r2,255
   24bc4:	e17ffa17 	ldw	r5,-24(fp)
   24bc8:	1009883a 	mov	r4,r2
   24bcc:	00233a00 	call	233a0 <__mulsi3>
   24bd0:	1005d23a 	srai	r2,r2,8
   24bd4:	e0bff915 	stw	r2,-28(fp)
    if (offset >= width)
   24bd8:	e0fff917 	ldw	r3,-28(fp)
   24bdc:	e0bffb17 	ldw	r2,-20(fp)
   24be0:	18800116 	blt	r3,r2,24be8 <lcd_repaint_screen+0xac>
      offset = 0;
   24be4:	e03ff915 	stw	zero,-28(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   24be8:	e03ff815 	stw	zero,-32(fp)
   24bec:	00004c06 	br	24d20 <lcd_repaint_screen+0x1e4>
    {
      char c = sp->line[y].data[(x + offset) % width];
   24bf0:	e0fff817 	ldw	r3,-32(fp)
   24bf4:	e0bff917 	ldw	r2,-28(fp)
   24bf8:	1885883a 	add	r2,r3,r2
   24bfc:	e17ffb17 	ldw	r5,-20(fp)
   24c00:	1009883a 	mov	r4,r2
   24c04:	00232700 	call	23270 <__modsi3>
   24c08:	1023883a 	mov	r17,r2
   24c0c:	e43ffd17 	ldw	r16,-12(fp)
   24c10:	e0bff717 	ldw	r2,-36(fp)
   24c14:	014018c4 	movi	r5,99
   24c18:	1009883a 	mov	r4,r2
   24c1c:	00233a00 	call	233a0 <__mulsi3>
   24c20:	8085883a 	add	r2,r16,r2
   24c24:	1445883a 	add	r2,r2,r17
   24c28:	10801004 	addi	r2,r2,64
   24c2c:	10800003 	ldbu	r2,0(r2)
   24c30:	e0bffc05 	stb	r2,-16(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   24c34:	e43ffd17 	ldw	r16,-12(fp)
   24c38:	e0bff717 	ldw	r2,-36(fp)
   24c3c:	014018c4 	movi	r5,99
   24c40:	1009883a 	mov	r4,r2
   24c44:	00233a00 	call	233a0 <__mulsi3>
   24c48:	8087883a 	add	r3,r16,r2
   24c4c:	e0bff817 	ldw	r2,-32(fp)
   24c50:	1885883a 	add	r2,r3,r2
   24c54:	10800c04 	addi	r2,r2,48
   24c58:	10800003 	ldbu	r2,0(r2)
   24c5c:	10c03fcc 	andi	r3,r2,255
   24c60:	18c0201c 	xori	r3,r3,128
   24c64:	18ffe004 	addi	r3,r3,-128
   24c68:	e0bffc07 	ldb	r2,-16(fp)
   24c6c:	18802926 	beq	r3,r2,24d14 <lcd_repaint_screen+0x1d8>
      {
        unsigned char address = x + colstart[y];
   24c70:	e0fff717 	ldw	r3,-36(fp)
   24c74:	d0a00b04 	addi	r2,gp,-32724
   24c78:	1885883a 	add	r2,r3,r2
   24c7c:	10800003 	ldbu	r2,0(r2)
   24c80:	1007883a 	mov	r3,r2
   24c84:	e0bff817 	ldw	r2,-32(fp)
   24c88:	1885883a 	add	r2,r3,r2
   24c8c:	e0bffc45 	stb	r2,-15(fp)

        if (address != sp->address)
   24c90:	e0fffc43 	ldbu	r3,-15(fp)
   24c94:	e0bffd17 	ldw	r2,-12(fp)
   24c98:	108008c3 	ldbu	r2,35(r2)
   24c9c:	10803fcc 	andi	r2,r2,255
   24ca0:	1080201c 	xori	r2,r2,128
   24ca4:	10bfe004 	addi	r2,r2,-128
   24ca8:	18800a26 	beq	r3,r2,24cd4 <lcd_repaint_screen+0x198>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   24cac:	e0fffc43 	ldbu	r3,-15(fp)
   24cb0:	00bfe004 	movi	r2,-128
   24cb4:	1884b03a 	or	r2,r3,r2
   24cb8:	10803fcc 	andi	r2,r2,255
   24cbc:	100b883a 	mov	r5,r2
   24cc0:	e13ffd17 	ldw	r4,-12(fp)
   24cc4:	00248c40 	call	248c4 <lcd_write_command>
          sp->address = address;
   24cc8:	e0fffc43 	ldbu	r3,-15(fp)
   24ccc:	e0bffd17 	ldw	r2,-12(fp)
   24cd0:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   24cd4:	e0bffc03 	ldbu	r2,-16(fp)
   24cd8:	10803fcc 	andi	r2,r2,255
   24cdc:	100b883a 	mov	r5,r2
   24ce0:	e13ffd17 	ldw	r4,-12(fp)
   24ce4:	002497c0 	call	2497c <lcd_write_data>
        sp->line[y].visible[x] = c;
   24ce8:	e43ffd17 	ldw	r16,-12(fp)
   24cec:	e0bff717 	ldw	r2,-36(fp)
   24cf0:	014018c4 	movi	r5,99
   24cf4:	1009883a 	mov	r4,r2
   24cf8:	00233a00 	call	233a0 <__mulsi3>
   24cfc:	8087883a 	add	r3,r16,r2
   24d00:	e0bff817 	ldw	r2,-32(fp)
   24d04:	1885883a 	add	r2,r3,r2
   24d08:	10800c04 	addi	r2,r2,48
   24d0c:	e0fffc03 	ldbu	r3,-16(fp)
   24d10:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   24d14:	e0bff817 	ldw	r2,-32(fp)
   24d18:	10800044 	addi	r2,r2,1
   24d1c:	e0bff815 	stw	r2,-32(fp)
   24d20:	e0bff817 	ldw	r2,-32(fp)
   24d24:	10800410 	cmplti	r2,r2,16
   24d28:	103fb11e 	bne	r2,zero,24bf0 <__alt_data_end+0xfffec550>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24d2c:	e0bff717 	ldw	r2,-36(fp)
   24d30:	10800044 	addi	r2,r2,1
   24d34:	e0bff715 	stw	r2,-36(fp)
   24d38:	e0bff717 	ldw	r2,-36(fp)
   24d3c:	10800090 	cmplti	r2,r2,2
   24d40:	103f8b1e 	bne	r2,zero,24b70 <__alt_data_end+0xfffec4d0>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   24d44:	0001883a 	nop
   24d48:	e6fffe04 	addi	sp,fp,-8
   24d4c:	dfc00317 	ldw	ra,12(sp)
   24d50:	df000217 	ldw	fp,8(sp)
   24d54:	dc400117 	ldw	r17,4(sp)
   24d58:	dc000017 	ldw	r16,0(sp)
   24d5c:	dec00404 	addi	sp,sp,16
   24d60:	f800283a 	ret

00024d64 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   24d64:	defffb04 	addi	sp,sp,-20
   24d68:	dfc00415 	stw	ra,16(sp)
   24d6c:	df000315 	stw	fp,12(sp)
   24d70:	dc000215 	stw	r16,8(sp)
   24d74:	df000304 	addi	fp,sp,12
   24d78:	e13ffe15 	stw	r4,-8(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24d7c:	e03ffd15 	stw	zero,-12(fp)
   24d80:	00002206 	br	24e0c <lcd_scroll_up+0xa8>
  {
    if (y < ALT_LCD_HEIGHT-1)
   24d84:	e0bffd17 	ldw	r2,-12(fp)
   24d88:	00801316 	blt	zero,r2,24dd8 <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   24d8c:	014018c4 	movi	r5,99
   24d90:	e13ffd17 	ldw	r4,-12(fp)
   24d94:	00233a00 	call	233a0 <__mulsi3>
   24d98:	10801004 	addi	r2,r2,64
   24d9c:	e0fffe17 	ldw	r3,-8(fp)
   24da0:	18a1883a 	add	r16,r3,r2
   24da4:	e0bffd17 	ldw	r2,-12(fp)
   24da8:	10800044 	addi	r2,r2,1
   24dac:	014018c4 	movi	r5,99
   24db0:	1009883a 	mov	r4,r2
   24db4:	00233a00 	call	233a0 <__mulsi3>
   24db8:	10801004 	addi	r2,r2,64
   24dbc:	e0fffe17 	ldw	r3,-8(fp)
   24dc0:	1885883a 	add	r2,r3,r2
   24dc4:	01801404 	movi	r6,80
   24dc8:	100b883a 	mov	r5,r2
   24dcc:	8009883a 	mov	r4,r16
   24dd0:	0021a180 	call	21a18 <memcpy>
   24dd4:	00000a06 	br	24e00 <lcd_scroll_up+0x9c>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   24dd8:	014018c4 	movi	r5,99
   24ddc:	e13ffd17 	ldw	r4,-12(fp)
   24de0:	00233a00 	call	233a0 <__mulsi3>
   24de4:	10801004 	addi	r2,r2,64
   24de8:	e0fffe17 	ldw	r3,-8(fp)
   24dec:	1885883a 	add	r2,r3,r2
   24df0:	01801404 	movi	r6,80
   24df4:	01400804 	movi	r5,32
   24df8:	1009883a 	mov	r4,r2
   24dfc:	0021cbc0 	call	21cbc <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24e00:	e0bffd17 	ldw	r2,-12(fp)
   24e04:	10800044 	addi	r2,r2,1
   24e08:	e0bffd15 	stw	r2,-12(fp)
   24e0c:	e0bffd17 	ldw	r2,-12(fp)
   24e10:	10800090 	cmplti	r2,r2,2
   24e14:	103fdb1e 	bne	r2,zero,24d84 <__alt_data_end+0xfffec6e4>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   24e18:	e0bffe17 	ldw	r2,-8(fp)
   24e1c:	10800883 	ldbu	r2,34(r2)
   24e20:	10bfffc4 	addi	r2,r2,-1
   24e24:	1007883a 	mov	r3,r2
   24e28:	e0bffe17 	ldw	r2,-8(fp)
   24e2c:	10c00885 	stb	r3,34(r2)
}
   24e30:	0001883a 	nop
   24e34:	e6ffff04 	addi	sp,fp,-4
   24e38:	dfc00217 	ldw	ra,8(sp)
   24e3c:	df000117 	ldw	fp,4(sp)
   24e40:	dc000017 	ldw	r16,0(sp)
   24e44:	dec00304 	addi	sp,sp,12
   24e48:	f800283a 	ret

00024e4c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   24e4c:	defff904 	addi	sp,sp,-28
   24e50:	dfc00615 	stw	ra,24(sp)
   24e54:	df000515 	stw	fp,20(sp)
   24e58:	df000504 	addi	fp,sp,20
   24e5c:	e13ffe15 	stw	r4,-8(fp)
   24e60:	2805883a 	mov	r2,r5
   24e64:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
   24e68:	e03ffb15 	stw	zero,-20(fp)
   24e6c:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
   24e70:	e0bffe17 	ldw	r2,-8(fp)
   24e74:	10800a03 	ldbu	r2,40(r2)
   24e78:	10803fcc 	andi	r2,r2,255
   24e7c:	1080201c 	xori	r2,r2,128
   24e80:	10bfe004 	addi	r2,r2,-128
   24e84:	108016d8 	cmpnei	r2,r2,91
   24e88:	1000451e 	bne	r2,zero,24fa0 <lcd_handle_escape+0x154>
  {
    char * ptr = sp->escape+1;
   24e8c:	e0bffe17 	ldw	r2,-8(fp)
   24e90:	10800a04 	addi	r2,r2,40
   24e94:	10800044 	addi	r2,r2,1
   24e98:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
   24e9c:	00000e06 	br	24ed8 <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   24ea0:	01400284 	movi	r5,10
   24ea4:	e13ffb17 	ldw	r4,-20(fp)
   24ea8:	00233a00 	call	233a0 <__mulsi3>
   24eac:	1009883a 	mov	r4,r2
   24eb0:	e0bffd17 	ldw	r2,-12(fp)
   24eb4:	10c00044 	addi	r3,r2,1
   24eb8:	e0fffd15 	stw	r3,-12(fp)
   24ebc:	10800003 	ldbu	r2,0(r2)
   24ec0:	10803fcc 	andi	r2,r2,255
   24ec4:	1080201c 	xori	r2,r2,128
   24ec8:	10bfe004 	addi	r2,r2,-128
   24ecc:	10bff404 	addi	r2,r2,-48
   24ed0:	2085883a 	add	r2,r4,r2
   24ed4:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   24ed8:	d0e00f17 	ldw	r3,-32708(gp)
   24edc:	e0bffd17 	ldw	r2,-12(fp)
   24ee0:	10800003 	ldbu	r2,0(r2)
   24ee4:	10803fcc 	andi	r2,r2,255
   24ee8:	1080201c 	xori	r2,r2,128
   24eec:	10bfe004 	addi	r2,r2,-128
   24ef0:	10800044 	addi	r2,r2,1
   24ef4:	1885883a 	add	r2,r3,r2
   24ef8:	10800003 	ldbu	r2,0(r2)
   24efc:	10803fcc 	andi	r2,r2,255
   24f00:	1080010c 	andi	r2,r2,4
   24f04:	103fe61e 	bne	r2,zero,24ea0 <__alt_data_end+0xfffec800>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   24f08:	e0bffd17 	ldw	r2,-12(fp)
   24f0c:	10800003 	ldbu	r2,0(r2)
   24f10:	10803fcc 	andi	r2,r2,255
   24f14:	1080201c 	xori	r2,r2,128
   24f18:	10bfe004 	addi	r2,r2,-128
   24f1c:	10800ed8 	cmpnei	r2,r2,59
   24f20:	1000211e 	bne	r2,zero,24fa8 <lcd_handle_escape+0x15c>
    {
      ptr++;
   24f24:	e0bffd17 	ldw	r2,-12(fp)
   24f28:	10800044 	addi	r2,r2,1
   24f2c:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
   24f30:	00000e06 	br	24f6c <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   24f34:	01400284 	movi	r5,10
   24f38:	e13ffc17 	ldw	r4,-16(fp)
   24f3c:	00233a00 	call	233a0 <__mulsi3>
   24f40:	1009883a 	mov	r4,r2
   24f44:	e0bffd17 	ldw	r2,-12(fp)
   24f48:	10c00044 	addi	r3,r2,1
   24f4c:	e0fffd15 	stw	r3,-12(fp)
   24f50:	10800003 	ldbu	r2,0(r2)
   24f54:	10803fcc 	andi	r2,r2,255
   24f58:	1080201c 	xori	r2,r2,128
   24f5c:	10bfe004 	addi	r2,r2,-128
   24f60:	10bff404 	addi	r2,r2,-48
   24f64:	2085883a 	add	r2,r4,r2
   24f68:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   24f6c:	d0e00f17 	ldw	r3,-32708(gp)
   24f70:	e0bffd17 	ldw	r2,-12(fp)
   24f74:	10800003 	ldbu	r2,0(r2)
   24f78:	10803fcc 	andi	r2,r2,255
   24f7c:	1080201c 	xori	r2,r2,128
   24f80:	10bfe004 	addi	r2,r2,-128
   24f84:	10800044 	addi	r2,r2,1
   24f88:	1885883a 	add	r2,r3,r2
   24f8c:	10800003 	ldbu	r2,0(r2)
   24f90:	10803fcc 	andi	r2,r2,255
   24f94:	1080010c 	andi	r2,r2,4
   24f98:	103fe61e 	bne	r2,zero,24f34 <__alt_data_end+0xfffec894>
   24f9c:	00000206 	br	24fa8 <lcd_handle_escape+0x15c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   24fa0:	00bfffc4 	movi	r2,-1
   24fa4:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
   24fa8:	e0bfff07 	ldb	r2,-4(fp)
   24fac:	10c012a0 	cmpeqi	r3,r2,74
   24fb0:	1800291e 	bne	r3,zero,25058 <lcd_handle_escape+0x20c>
   24fb4:	10c012c8 	cmpgei	r3,r2,75
   24fb8:	1800031e 	bne	r3,zero,24fc8 <lcd_handle_escape+0x17c>
   24fbc:	10801220 	cmpeqi	r2,r2,72
   24fc0:	1000061e 	bne	r2,zero,24fdc <lcd_handle_escape+0x190>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   24fc4:	00004c06 	br	250f8 <lcd_handle_escape+0x2ac>
    }
  }
  else
    parm1 = -1;

  switch (c)
   24fc8:	10c012e0 	cmpeqi	r3,r2,75
   24fcc:	1800281e 	bne	r3,zero,25070 <lcd_handle_escape+0x224>
   24fd0:	108019a0 	cmpeqi	r2,r2,102
   24fd4:	1000011e 	bne	r2,zero,24fdc <lcd_handle_escape+0x190>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   24fd8:	00004706 	br	250f8 <lcd_handle_escape+0x2ac>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   24fdc:	e0bffc17 	ldw	r2,-16(fp)
   24fe0:	0080050e 	bge	zero,r2,24ff8 <lcd_handle_escape+0x1ac>
      sp->x = parm2 - 1;
   24fe4:	e0bffc17 	ldw	r2,-16(fp)
   24fe8:	10bfffc4 	addi	r2,r2,-1
   24fec:	1007883a 	mov	r3,r2
   24ff0:	e0bffe17 	ldw	r2,-8(fp)
   24ff4:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   24ff8:	e0bffb17 	ldw	r2,-20(fp)
   24ffc:	0080390e 	bge	zero,r2,250e4 <lcd_handle_escape+0x298>
    {
      sp->y = parm1 - 1;
   25000:	e0bffb17 	ldw	r2,-20(fp)
   25004:	10bfffc4 	addi	r2,r2,-1
   25008:	1007883a 	mov	r3,r2
   2500c:	e0bffe17 	ldw	r2,-8(fp)
   25010:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   25014:	e0bffe17 	ldw	r2,-8(fp)
   25018:	10800883 	ldbu	r2,34(r2)
   2501c:	10803fcc 	andi	r2,r2,255
   25020:	10800170 	cmpltui	r2,r2,5
   25024:	1000061e 	bne	r2,zero,25040 <lcd_handle_escape+0x1f4>
        sp->y = ALT_LCD_HEIGHT * 2;
   25028:	e0bffe17 	ldw	r2,-8(fp)
   2502c:	00c00104 	movi	r3,4
   25030:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
   25034:	00000206 	br	25040 <lcd_handle_escape+0x1f4>
        lcd_scroll_up(sp);
   25038:	e13ffe17 	ldw	r4,-8(fp)
   2503c:	0024d640 	call	24d64 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   25040:	e0bffe17 	ldw	r2,-8(fp)
   25044:	10800883 	ldbu	r2,34(r2)
   25048:	10803fcc 	andi	r2,r2,255
   2504c:	108000e8 	cmpgeui	r2,r2,3
   25050:	103ff91e 	bne	r2,zero,25038 <__alt_data_end+0xfffec998>
        lcd_scroll_up(sp);
    }
    break;
   25054:	00002306 	br	250e4 <lcd_handle_escape+0x298>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   25058:	e0bffb17 	ldw	r2,-20(fp)
   2505c:	10800098 	cmpnei	r2,r2,2
   25060:	1000221e 	bne	r2,zero,250ec <lcd_handle_escape+0x2a0>
      lcd_clear_screen(sp);
   25064:	e13ffe17 	ldw	r4,-8(fp)
   25068:	0024a540 	call	24a54 <lcd_clear_screen>
    break;
   2506c:	00001f06 	br	250ec <lcd_handle_escape+0x2a0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   25070:	e0bffb17 	ldw	r2,-20(fp)
   25074:	00801f16 	blt	zero,r2,250f4 <lcd_handle_escape+0x2a8>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   25078:	e0bffe17 	ldw	r2,-8(fp)
   2507c:	10800843 	ldbu	r2,33(r2)
   25080:	10803fcc 	andi	r2,r2,255
   25084:	10801428 	cmpgeui	r2,r2,80
   25088:	10001a1e 	bne	r2,zero,250f4 <lcd_handle_escape+0x2a8>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   2508c:	e0bffe17 	ldw	r2,-8(fp)
   25090:	10800883 	ldbu	r2,34(r2)
   25094:	10803fcc 	andi	r2,r2,255
   25098:	014018c4 	movi	r5,99
   2509c:	1009883a 	mov	r4,r2
   250a0:	00233a00 	call	233a0 <__mulsi3>
   250a4:	10801004 	addi	r2,r2,64
   250a8:	e0fffe17 	ldw	r3,-8(fp)
   250ac:	1887883a 	add	r3,r3,r2
   250b0:	e0bffe17 	ldw	r2,-8(fp)
   250b4:	10800843 	ldbu	r2,33(r2)
   250b8:	10803fcc 	andi	r2,r2,255
   250bc:	1889883a 	add	r4,r3,r2
   250c0:	e0bffe17 	ldw	r2,-8(fp)
   250c4:	10800843 	ldbu	r2,33(r2)
   250c8:	10803fcc 	andi	r2,r2,255
   250cc:	00c01404 	movi	r3,80
   250d0:	1885c83a 	sub	r2,r3,r2
   250d4:	100d883a 	mov	r6,r2
   250d8:	01400804 	movi	r5,32
   250dc:	0021cbc0 	call	21cbc <memset>
    }
    break;
   250e0:	00000406 	br	250f4 <lcd_handle_escape+0x2a8>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
   250e4:	0001883a 	nop
   250e8:	00000306 	br	250f8 <lcd_handle_escape+0x2ac>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
   250ec:	0001883a 	nop
   250f0:	00000106 	br	250f8 <lcd_handle_escape+0x2ac>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
   250f4:	0001883a 	nop
  }
}
   250f8:	0001883a 	nop
   250fc:	e037883a 	mov	sp,fp
   25100:	dfc00117 	ldw	ra,4(sp)
   25104:	df000017 	ldw	fp,0(sp)
   25108:	dec00204 	addi	sp,sp,8
   2510c:	f800283a 	ret

00025110 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   25110:	defff104 	addi	sp,sp,-60
   25114:	dfc00e15 	stw	ra,56(sp)
   25118:	df000d15 	stw	fp,52(sp)
   2511c:	dc400c15 	stw	r17,48(sp)
   25120:	dc000b15 	stw	r16,44(sp)
   25124:	df000d04 	addi	fp,sp,52
   25128:	e13ffa15 	stw	r4,-24(fp)
   2512c:	e17ffb15 	stw	r5,-20(fp)
   25130:	e1bffc15 	stw	r6,-16(fp)
   25134:	e1fffd15 	stw	r7,-12(fp)
  const char* end = ptr + len;
   25138:	e0bffc17 	ldw	r2,-16(fp)
   2513c:	e0fffb17 	ldw	r3,-20(fp)
   25140:	1885883a 	add	r2,r3,r2
   25144:	e0bff615 	stw	r2,-40(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   25148:	e0bffa17 	ldw	r2,-24(fp)
   2514c:	00c00044 	movi	r3,1
   25150:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
   25154:	00009b06 	br	253c4 <altera_avalon_lcd_16207_write+0x2b4>
  {
    char c = *ptr;
   25158:	e0bffb17 	ldw	r2,-20(fp)
   2515c:	10800003 	ldbu	r2,0(r2)
   25160:	e0bff705 	stb	r2,-36(fp)

    if (sp->esccount >= 0)
   25164:	e0bffa17 	ldw	r2,-24(fp)
   25168:	10800903 	ldbu	r2,36(r2)
   2516c:	10803fcc 	andi	r2,r2,255
   25170:	1080201c 	xori	r2,r2,128
   25174:	10bfe004 	addi	r2,r2,-128
   25178:	10003716 	blt	r2,zero,25258 <altera_avalon_lcd_16207_write+0x148>
    {
      unsigned int esccount = sp->esccount;
   2517c:	e0bffa17 	ldw	r2,-24(fp)
   25180:	10800903 	ldbu	r2,36(r2)
   25184:	10803fcc 	andi	r2,r2,255
   25188:	1080201c 	xori	r2,r2,128
   2518c:	10bfe004 	addi	r2,r2,-128
   25190:	e0bff815 	stw	r2,-32(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   25194:	e0bff817 	ldw	r2,-32(fp)
   25198:	1000031e 	bne	r2,zero,251a8 <altera_avalon_lcd_16207_write+0x98>
   2519c:	e0bff707 	ldb	r2,-36(fp)
   251a0:	108016d8 	cmpnei	r2,r2,91
   251a4:	10000d1e 	bne	r2,zero,251dc <altera_avalon_lcd_16207_write+0xcc>
   251a8:	e0bff817 	ldw	r2,-32(fp)
   251ac:	10001826 	beq	r2,zero,25210 <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
   251b0:	d0e00f17 	ldw	r3,-32708(gp)
   251b4:	e0bff707 	ldb	r2,-36(fp)
   251b8:	10800044 	addi	r2,r2,1
   251bc:	1885883a 	add	r2,r3,r2
   251c0:	10800003 	ldbu	r2,0(r2)
   251c4:	10803fcc 	andi	r2,r2,255
   251c8:	1080010c 	andi	r2,r2,4
   251cc:	1000101e 	bne	r2,zero,25210 <altera_avalon_lcd_16207_write+0x100>
   251d0:	e0bff707 	ldb	r2,-36(fp)
   251d4:	10800ee0 	cmpeqi	r2,r2,59
   251d8:	10000d1e 	bne	r2,zero,25210 <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
   251dc:	e0fffa17 	ldw	r3,-24(fp)
   251e0:	e0bff817 	ldw	r2,-32(fp)
   251e4:	1885883a 	add	r2,r3,r2
   251e8:	10800a04 	addi	r2,r2,40
   251ec:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   251f0:	e0bff707 	ldb	r2,-36(fp)
   251f4:	100b883a 	mov	r5,r2
   251f8:	e13ffa17 	ldw	r4,-24(fp)
   251fc:	0024e4c0 	call	24e4c <lcd_handle_escape>

        sp->esccount = -1;
   25200:	e0bffa17 	ldw	r2,-24(fp)
   25204:	00ffffc4 	movi	r3,-1
   25208:	10c00905 	stb	r3,36(r2)
   2520c:	00006a06 	br	253b8 <altera_avalon_lcd_16207_write+0x2a8>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   25210:	e0bffa17 	ldw	r2,-24(fp)
   25214:	10800903 	ldbu	r2,36(r2)
   25218:	10803fcc 	andi	r2,r2,255
   2521c:	108001e8 	cmpgeui	r2,r2,7
   25220:	1000651e 	bne	r2,zero,253b8 <altera_avalon_lcd_16207_write+0x2a8>
      {
        sp->escape[esccount] = c;
   25224:	e0fffa17 	ldw	r3,-24(fp)
   25228:	e0bff817 	ldw	r2,-32(fp)
   2522c:	1885883a 	add	r2,r3,r2
   25230:	10800a04 	addi	r2,r2,40
   25234:	e0fff703 	ldbu	r3,-36(fp)
   25238:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
   2523c:	e0bffa17 	ldw	r2,-24(fp)
   25240:	10800903 	ldbu	r2,36(r2)
   25244:	10800044 	addi	r2,r2,1
   25248:	1007883a 	mov	r3,r2
   2524c:	e0bffa17 	ldw	r2,-24(fp)
   25250:	10c00905 	stb	r3,36(r2)
   25254:	00005806 	br	253b8 <altera_avalon_lcd_16207_write+0x2a8>
      }
    }
    else if (c == 27) /* ESC */
   25258:	e0bff707 	ldb	r2,-36(fp)
   2525c:	108006d8 	cmpnei	r2,r2,27
   25260:	1000031e 	bne	r2,zero,25270 <altera_avalon_lcd_16207_write+0x160>
    {
      sp->esccount = 0;
   25264:	e0bffa17 	ldw	r2,-24(fp)
   25268:	10000905 	stb	zero,36(r2)
   2526c:	00005206 	br	253b8 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\r')
   25270:	e0bff707 	ldb	r2,-36(fp)
   25274:	10800358 	cmpnei	r2,r2,13
   25278:	1000031e 	bne	r2,zero,25288 <altera_avalon_lcd_16207_write+0x178>
    {
      sp->x = 0;
   2527c:	e0bffa17 	ldw	r2,-24(fp)
   25280:	10000845 	stb	zero,33(r2)
   25284:	00004c06 	br	253b8 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\n')
   25288:	e0bff707 	ldb	r2,-36(fp)
   2528c:	10800298 	cmpnei	r2,r2,10
   25290:	1000101e 	bne	r2,zero,252d4 <altera_avalon_lcd_16207_write+0x1c4>
    {
      sp->x = 0;
   25294:	e0bffa17 	ldw	r2,-24(fp)
   25298:	10000845 	stb	zero,33(r2)
      sp->y++;
   2529c:	e0bffa17 	ldw	r2,-24(fp)
   252a0:	10800883 	ldbu	r2,34(r2)
   252a4:	10800044 	addi	r2,r2,1
   252a8:	1007883a 	mov	r3,r2
   252ac:	e0bffa17 	ldw	r2,-24(fp)
   252b0:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   252b4:	e0bffa17 	ldw	r2,-24(fp)
   252b8:	10800883 	ldbu	r2,34(r2)
   252bc:	10803fcc 	andi	r2,r2,255
   252c0:	108000f0 	cmpltui	r2,r2,3
   252c4:	10003c1e 	bne	r2,zero,253b8 <altera_avalon_lcd_16207_write+0x2a8>
        lcd_scroll_up(sp);
   252c8:	e13ffa17 	ldw	r4,-24(fp)
   252cc:	0024d640 	call	24d64 <lcd_scroll_up>
   252d0:	00003906 	br	253b8 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\b')
   252d4:	e0bff707 	ldb	r2,-36(fp)
   252d8:	10800218 	cmpnei	r2,r2,8
   252dc:	10000b1e 	bne	r2,zero,2530c <altera_avalon_lcd_16207_write+0x1fc>
    {
      if (sp->x > 0)
   252e0:	e0bffa17 	ldw	r2,-24(fp)
   252e4:	10800843 	ldbu	r2,33(r2)
   252e8:	10803fcc 	andi	r2,r2,255
   252ec:	10003226 	beq	r2,zero,253b8 <altera_avalon_lcd_16207_write+0x2a8>
        sp->x--;
   252f0:	e0bffa17 	ldw	r2,-24(fp)
   252f4:	10800843 	ldbu	r2,33(r2)
   252f8:	10bfffc4 	addi	r2,r2,-1
   252fc:	1007883a 	mov	r3,r2
   25300:	e0bffa17 	ldw	r2,-24(fp)
   25304:	10c00845 	stb	r3,33(r2)
   25308:	00002b06 	br	253b8 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (isprint(c))
   2530c:	d0e00f17 	ldw	r3,-32708(gp)
   25310:	e0bff707 	ldb	r2,-36(fp)
   25314:	10800044 	addi	r2,r2,1
   25318:	1885883a 	add	r2,r3,r2
   2531c:	10800003 	ldbu	r2,0(r2)
   25320:	10803fcc 	andi	r2,r2,255
   25324:	1080201c 	xori	r2,r2,128
   25328:	10bfe004 	addi	r2,r2,-128
   2532c:	108025cc 	andi	r2,r2,151
   25330:	10002126 	beq	r2,zero,253b8 <altera_avalon_lcd_16207_write+0x2a8>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   25334:	e0bffa17 	ldw	r2,-24(fp)
   25338:	10800883 	ldbu	r2,34(r2)
   2533c:	10803fcc 	andi	r2,r2,255
   25340:	108000b0 	cmpltui	r2,r2,2
   25344:	1000021e 	bne	r2,zero,25350 <altera_avalon_lcd_16207_write+0x240>
        lcd_scroll_up(sp);
   25348:	e13ffa17 	ldw	r4,-24(fp)
   2534c:	0024d640 	call	24d64 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   25350:	e0bffa17 	ldw	r2,-24(fp)
   25354:	10800843 	ldbu	r2,33(r2)
   25358:	10803fcc 	andi	r2,r2,255
   2535c:	10801428 	cmpgeui	r2,r2,80
   25360:	10000f1e 	bne	r2,zero,253a0 <altera_avalon_lcd_16207_write+0x290>
        sp->line[sp->y].data[sp->x] = c;
   25364:	e0bffa17 	ldw	r2,-24(fp)
   25368:	10800883 	ldbu	r2,34(r2)
   2536c:	10c03fcc 	andi	r3,r2,255
   25370:	e0bffa17 	ldw	r2,-24(fp)
   25374:	10800843 	ldbu	r2,33(r2)
   25378:	14003fcc 	andi	r16,r2,255
   2537c:	e47ffa17 	ldw	r17,-24(fp)
   25380:	014018c4 	movi	r5,99
   25384:	1809883a 	mov	r4,r3
   25388:	00233a00 	call	233a0 <__mulsi3>
   2538c:	8885883a 	add	r2,r17,r2
   25390:	1405883a 	add	r2,r2,r16
   25394:	10801004 	addi	r2,r2,64
   25398:	e0fff703 	ldbu	r3,-36(fp)
   2539c:	10c00005 	stb	r3,0(r2)

      sp->x++;
   253a0:	e0bffa17 	ldw	r2,-24(fp)
   253a4:	10800843 	ldbu	r2,33(r2)
   253a8:	10800044 	addi	r2,r2,1
   253ac:	1007883a 	mov	r3,r2
   253b0:	e0bffa17 	ldw	r2,-24(fp)
   253b4:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   253b8:	e0bffb17 	ldw	r2,-20(fp)
   253bc:	10800044 	addi	r2,r2,1
   253c0:	e0bffb15 	stw	r2,-20(fp)
   253c4:	e0fffb17 	ldw	r3,-20(fp)
   253c8:	e0bff617 	ldw	r2,-40(fp)
   253cc:	18bf6236 	bltu	r3,r2,25158 <__alt_data_end+0xfffecab8>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   253d0:	00800404 	movi	r2,16
   253d4:	e0bff415 	stw	r2,-48(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   253d8:	e03ff315 	stw	zero,-52(fp)
   253dc:	00003d06 	br	254d4 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   253e0:	00801404 	movi	r2,80
   253e4:	e0bff515 	stw	r2,-44(fp)
   253e8:	00001306 	br	25438 <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
   253ec:	e0bff517 	ldw	r2,-44(fp)
   253f0:	143fffc4 	addi	r16,r2,-1
   253f4:	e47ffa17 	ldw	r17,-24(fp)
   253f8:	e0bff317 	ldw	r2,-52(fp)
   253fc:	014018c4 	movi	r5,99
   25400:	1009883a 	mov	r4,r2
   25404:	00233a00 	call	233a0 <__mulsi3>
   25408:	8885883a 	add	r2,r17,r2
   2540c:	1405883a 	add	r2,r2,r16
   25410:	10801004 	addi	r2,r2,64
   25414:	10800003 	ldbu	r2,0(r2)
   25418:	10803fcc 	andi	r2,r2,255
   2541c:	1080201c 	xori	r2,r2,128
   25420:	10bfe004 	addi	r2,r2,-128
   25424:	10800820 	cmpeqi	r2,r2,32
   25428:	10000626 	beq	r2,zero,25444 <altera_avalon_lcd_16207_write+0x334>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   2542c:	e0bff517 	ldw	r2,-44(fp)
   25430:	10bfffc4 	addi	r2,r2,-1
   25434:	e0bff515 	stw	r2,-44(fp)
   25438:	e0bff517 	ldw	r2,-44(fp)
   2543c:	00bfeb16 	blt	zero,r2,253ec <__alt_data_end+0xfffecd4c>
   25440:	00000106 	br	25448 <altera_avalon_lcd_16207_write+0x338>
      if (sp->line[y].data[width-1] != ' ')
        break;
   25444:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   25448:	e0bff517 	ldw	r2,-44(fp)
   2544c:	10800448 	cmpgei	r2,r2,17
   25450:	1000031e 	bne	r2,zero,25460 <altera_avalon_lcd_16207_write+0x350>
      width = ALT_LCD_WIDTH;
   25454:	00800404 	movi	r2,16
   25458:	e0bff515 	stw	r2,-44(fp)
   2545c:	00000306 	br	2546c <altera_avalon_lcd_16207_write+0x35c>
    else
      width++;
   25460:	e0bff517 	ldw	r2,-44(fp)
   25464:	10800044 	addi	r2,r2,1
   25468:	e0bff515 	stw	r2,-44(fp)

    sp->line[y].width = width;
   2546c:	e0bff517 	ldw	r2,-44(fp)
   25470:	1023883a 	mov	r17,r2
   25474:	e43ffa17 	ldw	r16,-24(fp)
   25478:	e0bff317 	ldw	r2,-52(fp)
   2547c:	014018c4 	movi	r5,99
   25480:	1009883a 	mov	r4,r2
   25484:	00233a00 	call	233a0 <__mulsi3>
   25488:	8085883a 	add	r2,r16,r2
   2548c:	10802444 	addi	r2,r2,145
   25490:	14400005 	stb	r17,0(r2)
    if (widthmax < width)
   25494:	e0fff417 	ldw	r3,-48(fp)
   25498:	e0bff517 	ldw	r2,-44(fp)
   2549c:	1880020e 	bge	r3,r2,254a8 <altera_avalon_lcd_16207_write+0x398>
      widthmax = width;
   254a0:	e0bff517 	ldw	r2,-44(fp)
   254a4:	e0bff415 	stw	r2,-48(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   254a8:	e43ffa17 	ldw	r16,-24(fp)
   254ac:	e0bff317 	ldw	r2,-52(fp)
   254b0:	014018c4 	movi	r5,99
   254b4:	1009883a 	mov	r4,r2
   254b8:	00233a00 	call	233a0 <__mulsi3>
   254bc:	8085883a 	add	r2,r16,r2
   254c0:	10802484 	addi	r2,r2,146
   254c4:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   254c8:	e0bff317 	ldw	r2,-52(fp)
   254cc:	10800044 	addi	r2,r2,1
   254d0:	e0bff315 	stw	r2,-52(fp)
   254d4:	e0bff317 	ldw	r2,-52(fp)
   254d8:	10800090 	cmplti	r2,r2,2
   254dc:	103fc01e 	bne	r2,zero,253e0 <__alt_data_end+0xfffecd40>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   254e0:	e0bff417 	ldw	r2,-48(fp)
   254e4:	10800448 	cmpgei	r2,r2,17
   254e8:	1000031e 	bne	r2,zero,254f8 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
   254ec:	e0bffa17 	ldw	r2,-24(fp)
   254f0:	10000985 	stb	zero,38(r2)
   254f4:	00003406 	br	255c8 <altera_avalon_lcd_16207_write+0x4b8>
  else
  {
    widthmax *= 2;
   254f8:	e0bff417 	ldw	r2,-48(fp)
   254fc:	1085883a 	add	r2,r2,r2
   25500:	e0bff415 	stw	r2,-48(fp)
    sp->scrollmax = widthmax;
   25504:	e0bff417 	ldw	r2,-48(fp)
   25508:	1007883a 	mov	r3,r2
   2550c:	e0bffa17 	ldw	r2,-24(fp)
   25510:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   25514:	e03ff315 	stw	zero,-52(fp)
   25518:	00002806 	br	255bc <altera_avalon_lcd_16207_write+0x4ac>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   2551c:	e43ffa17 	ldw	r16,-24(fp)
   25520:	e0bff317 	ldw	r2,-52(fp)
   25524:	014018c4 	movi	r5,99
   25528:	1009883a 	mov	r4,r2
   2552c:	00233a00 	call	233a0 <__mulsi3>
   25530:	8085883a 	add	r2,r16,r2
   25534:	10802444 	addi	r2,r2,145
   25538:	10800003 	ldbu	r2,0(r2)
   2553c:	10803fcc 	andi	r2,r2,255
   25540:	1080201c 	xori	r2,r2,128
   25544:	10bfe004 	addi	r2,r2,-128
   25548:	10800450 	cmplti	r2,r2,17
   2554c:	1000181e 	bne	r2,zero,255b0 <altera_avalon_lcd_16207_write+0x4a0>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   25550:	e43ffa17 	ldw	r16,-24(fp)
   25554:	e0bff317 	ldw	r2,-52(fp)
   25558:	014018c4 	movi	r5,99
   2555c:	1009883a 	mov	r4,r2
   25560:	00233a00 	call	233a0 <__mulsi3>
   25564:	8085883a 	add	r2,r16,r2
   25568:	10802444 	addi	r2,r2,145
   2556c:	10800003 	ldbu	r2,0(r2)
   25570:	10803fcc 	andi	r2,r2,255
   25574:	1080201c 	xori	r2,r2,128
   25578:	10bfe004 	addi	r2,r2,-128
   2557c:	1004923a 	slli	r2,r2,8
   25580:	e17ff417 	ldw	r5,-48(fp)
   25584:	1009883a 	mov	r4,r2
   25588:	00231ec0 	call	231ec <__divsi3>
   2558c:	1023883a 	mov	r17,r2
   25590:	e43ffa17 	ldw	r16,-24(fp)
   25594:	e0bff317 	ldw	r2,-52(fp)
   25598:	014018c4 	movi	r5,99
   2559c:	1009883a 	mov	r4,r2
   255a0:	00233a00 	call	233a0 <__mulsi3>
   255a4:	8085883a 	add	r2,r16,r2
   255a8:	10802484 	addi	r2,r2,146
   255ac:	14400005 	stb	r17,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   255b0:	e0bff317 	ldw	r2,-52(fp)
   255b4:	10800044 	addi	r2,r2,1
   255b8:	e0bff315 	stw	r2,-52(fp)
   255bc:	e0bff317 	ldw	r2,-52(fp)
   255c0:	10800090 	cmplti	r2,r2,2
   255c4:	103fd51e 	bne	r2,zero,2551c <__alt_data_end+0xfffece7c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   255c8:	e0bffa17 	ldw	r2,-24(fp)
   255cc:	10800943 	ldbu	r2,37(r2)
   255d0:	10803fcc 	andi	r2,r2,255
   255d4:	e0bff915 	stw	r2,-28(fp)

    lcd_repaint_screen(sp);
   255d8:	e13ffa17 	ldw	r4,-24(fp)
   255dc:	0024b3c0 	call	24b3c <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   255e0:	e0bffa17 	ldw	r2,-24(fp)
   255e4:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   255e8:	e0bffa17 	ldw	r2,-24(fp)
   255ec:	10800943 	ldbu	r2,37(r2)
   255f0:	10c03fcc 	andi	r3,r2,255
   255f4:	e0bff917 	ldw	r2,-28(fp)
   255f8:	18800426 	beq	r3,r2,2560c <altera_avalon_lcd_16207_write+0x4fc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   255fc:	e0bffa17 	ldw	r2,-24(fp)
   25600:	00c00044 	movi	r3,1
   25604:	10c009c5 	stb	r3,39(r2)
  }
   25608:	003fef06 	br	255c8 <__alt_data_end+0xfffecf28>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
   2560c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   25610:	e0bffc17 	ldw	r2,-16(fp)
}
   25614:	e6fffe04 	addi	sp,fp,-8
   25618:	dfc00317 	ldw	ra,12(sp)
   2561c:	df000217 	ldw	fp,8(sp)
   25620:	dc400117 	ldw	r17,4(sp)
   25624:	dc000017 	ldw	r16,0(sp)
   25628:	dec00404 	addi	sp,sp,16
   2562c:	f800283a 	ret

00025630 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   25630:	defffc04 	addi	sp,sp,-16
   25634:	dfc00315 	stw	ra,12(sp)
   25638:	df000215 	stw	fp,8(sp)
   2563c:	df000204 	addi	fp,sp,8
   25640:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   25644:	e0bfff17 	ldw	r2,-4(fp)
   25648:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   2564c:	e0bffe17 	ldw	r2,-8(fp)
   25650:	10800943 	ldbu	r2,37(r2)
   25654:	10803fcc 	andi	r2,r2,255
   25658:	10c00044 	addi	r3,r2,1
   2565c:	e0bffe17 	ldw	r2,-8(fp)
   25660:	10800983 	ldbu	r2,38(r2)
   25664:	10803fcc 	andi	r2,r2,255
   25668:	18800316 	blt	r3,r2,25678 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
   2566c:	e0bffe17 	ldw	r2,-8(fp)
   25670:	10000945 	stb	zero,37(r2)
   25674:	00000606 	br	25690 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
   25678:	e0bffe17 	ldw	r2,-8(fp)
   2567c:	10800943 	ldbu	r2,37(r2)
   25680:	10800044 	addi	r2,r2,1
   25684:	1007883a 	mov	r3,r2
   25688:	e0bffe17 	ldw	r2,-8(fp)
   2568c:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   25690:	e0bffe17 	ldw	r2,-8(fp)
   25694:	10800983 	ldbu	r2,38(r2)
   25698:	10803fcc 	andi	r2,r2,255
   2569c:	10000826 	beq	r2,zero,256c0 <alt_lcd_16207_timeout+0x90>
   256a0:	e0bffe17 	ldw	r2,-8(fp)
   256a4:	108009c3 	ldbu	r2,39(r2)
   256a8:	10803fcc 	andi	r2,r2,255
   256ac:	1080201c 	xori	r2,r2,128
   256b0:	10bfe004 	addi	r2,r2,-128
   256b4:	1000021e 	bne	r2,zero,256c0 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
   256b8:	e13ffe17 	ldw	r4,-8(fp)
   256bc:	0024b3c0 	call	24b3c <lcd_repaint_screen>

  return sp->period;
   256c0:	e0bffe17 	ldw	r2,-8(fp)
   256c4:	10800717 	ldw	r2,28(r2)
}
   256c8:	e037883a 	mov	sp,fp
   256cc:	dfc00117 	ldw	ra,4(sp)
   256d0:	df000017 	ldw	fp,0(sp)
   256d4:	dec00204 	addi	sp,sp,8
   256d8:	f800283a 	ret

000256dc <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   256dc:	defffc04 	addi	sp,sp,-16
   256e0:	dfc00315 	stw	ra,12(sp)
   256e4:	df000215 	stw	fp,8(sp)
   256e8:	df000204 	addi	fp,sp,8
   256ec:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   256f0:	e0bfff17 	ldw	r2,-4(fp)
   256f4:	10800017 	ldw	r2,0(r2)
   256f8:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   256fc:	e0bfff17 	ldw	r2,-4(fp)
   25700:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   25704:	010ea604 	movi	r4,15000
   25708:	0023c200 	call	23c20 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   2570c:	e0bffe17 	ldw	r2,-8(fp)
   25710:	00c00c04 	movi	r3,48
   25714:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   25718:	01040104 	movi	r4,4100
   2571c:	0023c200 	call	23c20 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   25720:	e0bffe17 	ldw	r2,-8(fp)
   25724:	00c00c04 	movi	r3,48
   25728:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   2572c:	0100fa04 	movi	r4,1000
   25730:	0023c200 	call	23c20 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   25734:	e0bffe17 	ldw	r2,-8(fp)
   25738:	00c00c04 	movi	r3,48
   2573c:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   25740:	01400e04 	movi	r5,56
   25744:	e13fff17 	ldw	r4,-4(fp)
   25748:	00248c40 	call	248c4 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   2574c:	01400204 	movi	r5,8
   25750:	e13fff17 	ldw	r4,-4(fp)
   25754:	00248c40 	call	248c4 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   25758:	e13fff17 	ldw	r4,-4(fp)
   2575c:	0024a540 	call	24a54 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   25760:	01400184 	movi	r5,6
   25764:	e13fff17 	ldw	r4,-4(fp)
   25768:	00248c40 	call	248c4 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   2576c:	01400304 	movi	r5,12
   25770:	e13fff17 	ldw	r4,-4(fp)
   25774:	00248c40 	call	248c4 <lcd_write_command>

  sp->esccount = -1;
   25778:	e0bfff17 	ldw	r2,-4(fp)
   2577c:	00ffffc4 	movi	r3,-1
   25780:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
   25784:	e0bfff17 	ldw	r2,-4(fp)
   25788:	10800a04 	addi	r2,r2,40
   2578c:	01800204 	movi	r6,8
   25790:	000b883a 	mov	r5,zero
   25794:	1009883a 	mov	r4,r2
   25798:	0021cbc0 	call	21cbc <memset>

  sp->scrollpos = 0;
   2579c:	e0bfff17 	ldw	r2,-4(fp)
   257a0:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   257a4:	e0bfff17 	ldw	r2,-4(fp)
   257a8:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   257ac:	e0bfff17 	ldw	r2,-4(fp)
   257b0:	100009c5 	stb	zero,39(r2)
   257b4:	d0a6fd17 	ldw	r2,-25612(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   257b8:	01400284 	movi	r5,10
   257bc:	1009883a 	mov	r4,r2
   257c0:	00232e40 	call	232e4 <__udivsi3>
   257c4:	1007883a 	mov	r3,r2
   257c8:	e0bfff17 	ldw	r2,-4(fp)
   257cc:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   257d0:	e0bfff17 	ldw	r2,-4(fp)
   257d4:	10c00104 	addi	r3,r2,4
   257d8:	e0bfff17 	ldw	r2,-4(fp)
   257dc:	10800717 	ldw	r2,28(r2)
   257e0:	e1ffff17 	ldw	r7,-4(fp)
   257e4:	018000b4 	movhi	r6,2
   257e8:	31958c04 	addi	r6,r6,22064
   257ec:	100b883a 	mov	r5,r2
   257f0:	1809883a 	mov	r4,r3
   257f4:	00258700 	call	25870 <alt_alarm_start>
}
   257f8:	0001883a 	nop
   257fc:	e037883a 	mov	sp,fp
   25800:	dfc00117 	ldw	ra,4(sp)
   25804:	df000017 	ldw	fp,0(sp)
   25808:	dec00204 	addi	sp,sp,8
   2580c:	f800283a 	ret

00025810 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   25810:	defffa04 	addi	sp,sp,-24
   25814:	dfc00515 	stw	ra,20(sp)
   25818:	df000415 	stw	fp,16(sp)
   2581c:	df000404 	addi	fp,sp,16
   25820:	e13ffd15 	stw	r4,-12(fp)
   25824:	e17ffe15 	stw	r5,-8(fp)
   25828:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   2582c:	e0bffd17 	ldw	r2,-12(fp)
   25830:	10800017 	ldw	r2,0(r2)
   25834:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   25838:	e0bffc17 	ldw	r2,-16(fp)
   2583c:	10c00a04 	addi	r3,r2,40
   25840:	e0bffd17 	ldw	r2,-12(fp)
   25844:	10800217 	ldw	r2,8(r2)
   25848:	100f883a 	mov	r7,r2
   2584c:	e1bfff17 	ldw	r6,-4(fp)
   25850:	e17ffe17 	ldw	r5,-8(fp)
   25854:	1809883a 	mov	r4,r3
   25858:	00251100 	call	25110 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   2585c:	e037883a 	mov	sp,fp
   25860:	dfc00117 	ldw	ra,4(sp)
   25864:	df000017 	ldw	fp,0(sp)
   25868:	dec00204 	addi	sp,sp,8
   2586c:	f800283a 	ret

00025870 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   25870:	defff504 	addi	sp,sp,-44
   25874:	df000a15 	stw	fp,40(sp)
   25878:	df000a04 	addi	fp,sp,40
   2587c:	e13ffc15 	stw	r4,-16(fp)
   25880:	e17ffd15 	stw	r5,-12(fp)
   25884:	e1bffe15 	stw	r6,-8(fp)
   25888:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2588c:	e03ff615 	stw	zero,-40(fp)
   25890:	d0a6fd17 	ldw	r2,-25612(gp)
  
  if (alt_ticks_per_second ())
   25894:	10003c26 	beq	r2,zero,25988 <alt_alarm_start+0x118>
  {
    if (alarm)
   25898:	e0bffc17 	ldw	r2,-16(fp)
   2589c:	10003826 	beq	r2,zero,25980 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   258a0:	e0bffc17 	ldw	r2,-16(fp)
   258a4:	e0fffe17 	ldw	r3,-8(fp)
   258a8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   258ac:	e0bffc17 	ldw	r2,-16(fp)
   258b0:	e0ffff17 	ldw	r3,-4(fp)
   258b4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   258b8:	0005303a 	rdctl	r2,status
   258bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   258c0:	e0fff917 	ldw	r3,-28(fp)
   258c4:	00bfff84 	movi	r2,-2
   258c8:	1884703a 	and	r2,r3,r2
   258cc:	1001703a 	wrctl	status,r2
  
  return context;
   258d0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   258d4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   258d8:	d0a6fe17 	ldw	r2,-25608(gp)
      
      current_nticks = alt_nticks();
   258dc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   258e0:	e0fffd17 	ldw	r3,-12(fp)
   258e4:	e0bff617 	ldw	r2,-40(fp)
   258e8:	1885883a 	add	r2,r3,r2
   258ec:	10c00044 	addi	r3,r2,1
   258f0:	e0bffc17 	ldw	r2,-16(fp)
   258f4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   258f8:	e0bffc17 	ldw	r2,-16(fp)
   258fc:	10c00217 	ldw	r3,8(r2)
   25900:	e0bff617 	ldw	r2,-40(fp)
   25904:	1880042e 	bgeu	r3,r2,25918 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   25908:	e0bffc17 	ldw	r2,-16(fp)
   2590c:	00c00044 	movi	r3,1
   25910:	10c00405 	stb	r3,16(r2)
   25914:	00000206 	br	25920 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   25918:	e0bffc17 	ldw	r2,-16(fp)
   2591c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   25920:	e0bffc17 	ldw	r2,-16(fp)
   25924:	d0e00d04 	addi	r3,gp,-32716
   25928:	e0fffa15 	stw	r3,-24(fp)
   2592c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   25930:	e0bffb17 	ldw	r2,-20(fp)
   25934:	e0fffa17 	ldw	r3,-24(fp)
   25938:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2593c:	e0bffa17 	ldw	r2,-24(fp)
   25940:	10c00017 	ldw	r3,0(r2)
   25944:	e0bffb17 	ldw	r2,-20(fp)
   25948:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2594c:	e0bffa17 	ldw	r2,-24(fp)
   25950:	10800017 	ldw	r2,0(r2)
   25954:	e0fffb17 	ldw	r3,-20(fp)
   25958:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2595c:	e0bffa17 	ldw	r2,-24(fp)
   25960:	e0fffb17 	ldw	r3,-20(fp)
   25964:	10c00015 	stw	r3,0(r2)
   25968:	e0bff817 	ldw	r2,-32(fp)
   2596c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25970:	e0bff717 	ldw	r2,-36(fp)
   25974:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   25978:	0005883a 	mov	r2,zero
   2597c:	00000306 	br	2598c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   25980:	00bffa84 	movi	r2,-22
   25984:	00000106 	br	2598c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   25988:	00bfde84 	movi	r2,-134
  }
}
   2598c:	e037883a 	mov	sp,fp
   25990:	df000017 	ldw	fp,0(sp)
   25994:	dec00104 	addi	sp,sp,4
   25998:	f800283a 	ret

0002599c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   2599c:	defffa04 	addi	sp,sp,-24
   259a0:	dfc00515 	stw	ra,20(sp)
   259a4:	df000415 	stw	fp,16(sp)
   259a8:	df000404 	addi	fp,sp,16
   259ac:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   259b0:	00800244 	movi	r2,9
   259b4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   259b8:	014003f4 	movhi	r5,15
   259bc:	29509004 	addi	r5,r5,16960
   259c0:	e13ffd17 	ldw	r4,-12(fp)
   259c4:	00233a00 	call	233a0 <__mulsi3>
   259c8:	100b883a 	mov	r5,r2
   259cc:	0100bef4 	movhi	r4,763
   259d0:	213c2004 	addi	r4,r4,-3968
   259d4:	00232e40 	call	232e4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   259d8:	100b883a 	mov	r5,r2
   259dc:	01200034 	movhi	r4,32768
   259e0:	213fffc4 	addi	r4,r4,-1
   259e4:	00232e40 	call	232e4 <__udivsi3>
   259e8:	100b883a 	mov	r5,r2
   259ec:	e13fff17 	ldw	r4,-4(fp)
   259f0:	00232e40 	call	232e4 <__udivsi3>
   259f4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   259f8:	e0bffe17 	ldw	r2,-8(fp)
   259fc:	10002a26 	beq	r2,zero,25aa8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   25a00:	e03ffc15 	stw	zero,-16(fp)
   25a04:	00001706 	br	25a64 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   25a08:	00a00034 	movhi	r2,32768
   25a0c:	10bfffc4 	addi	r2,r2,-1
   25a10:	10bfffc4 	addi	r2,r2,-1
   25a14:	103ffe1e 	bne	r2,zero,25a10 <__alt_data_end+0xfffed370>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   25a18:	014003f4 	movhi	r5,15
   25a1c:	29509004 	addi	r5,r5,16960
   25a20:	e13ffd17 	ldw	r4,-12(fp)
   25a24:	00233a00 	call	233a0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   25a28:	100b883a 	mov	r5,r2
   25a2c:	0100bef4 	movhi	r4,763
   25a30:	213c2004 	addi	r4,r4,-3968
   25a34:	00232e40 	call	232e4 <__udivsi3>
   25a38:	100b883a 	mov	r5,r2
   25a3c:	01200034 	movhi	r4,32768
   25a40:	213fffc4 	addi	r4,r4,-1
   25a44:	00232e40 	call	232e4 <__udivsi3>
   25a48:	1007883a 	mov	r3,r2
   25a4c:	e0bfff17 	ldw	r2,-4(fp)
   25a50:	10c5c83a 	sub	r2,r2,r3
   25a54:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   25a58:	e0bffc17 	ldw	r2,-16(fp)
   25a5c:	10800044 	addi	r2,r2,1
   25a60:	e0bffc15 	stw	r2,-16(fp)
   25a64:	e0fffc17 	ldw	r3,-16(fp)
   25a68:	e0bffe17 	ldw	r2,-8(fp)
   25a6c:	18bfe616 	blt	r3,r2,25a08 <__alt_data_end+0xfffed368>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   25a70:	014003f4 	movhi	r5,15
   25a74:	29509004 	addi	r5,r5,16960
   25a78:	e13ffd17 	ldw	r4,-12(fp)
   25a7c:	00233a00 	call	233a0 <__mulsi3>
   25a80:	100b883a 	mov	r5,r2
   25a84:	0100bef4 	movhi	r4,763
   25a88:	213c2004 	addi	r4,r4,-3968
   25a8c:	00232e40 	call	232e4 <__udivsi3>
   25a90:	e17fff17 	ldw	r5,-4(fp)
   25a94:	1009883a 	mov	r4,r2
   25a98:	00233a00 	call	233a0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   25a9c:	10bfffc4 	addi	r2,r2,-1
   25aa0:	103ffe1e 	bne	r2,zero,25a9c <__alt_data_end+0xfffed3fc>
   25aa4:	00000d06 	br	25adc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   25aa8:	014003f4 	movhi	r5,15
   25aac:	29509004 	addi	r5,r5,16960
   25ab0:	e13ffd17 	ldw	r4,-12(fp)
   25ab4:	00233a00 	call	233a0 <__mulsi3>
   25ab8:	100b883a 	mov	r5,r2
   25abc:	0100bef4 	movhi	r4,763
   25ac0:	213c2004 	addi	r4,r4,-3968
   25ac4:	00232e40 	call	232e4 <__udivsi3>
   25ac8:	e17fff17 	ldw	r5,-4(fp)
   25acc:	1009883a 	mov	r4,r2
   25ad0:	00233a00 	call	233a0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   25ad4:	10bfffc4 	addi	r2,r2,-1
   25ad8:	00bffe16 	blt	zero,r2,25ad4 <__alt_data_end+0xfffed434>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   25adc:	0005883a 	mov	r2,zero
}
   25ae0:	e037883a 	mov	sp,fp
   25ae4:	dfc00117 	ldw	ra,4(sp)
   25ae8:	df000017 	ldw	fp,0(sp)
   25aec:	dec00204 	addi	sp,sp,8
   25af0:	f800283a 	ret

00025af4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   25af4:	deffff04 	addi	sp,sp,-4
   25af8:	df000015 	stw	fp,0(sp)
   25afc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   25b00:	0001883a 	nop
   25b04:	e037883a 	mov	sp,fp
   25b08:	df000017 	ldw	fp,0(sp)
   25b0c:	dec00104 	addi	sp,sp,4
   25b10:	f800283a 	ret

00025b14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25b14:	defffe04 	addi	sp,sp,-8
   25b18:	dfc00115 	stw	ra,4(sp)
   25b1c:	df000015 	stw	fp,0(sp)
   25b20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25b24:	d0a00917 	ldw	r2,-32732(gp)
   25b28:	10000326 	beq	r2,zero,25b38 <alt_get_errno+0x24>
   25b2c:	d0a00917 	ldw	r2,-32732(gp)
   25b30:	103ee83a 	callr	r2
   25b34:	00000106 	br	25b3c <alt_get_errno+0x28>
   25b38:	d0a6f804 	addi	r2,gp,-25632
}
   25b3c:	e037883a 	mov	sp,fp
   25b40:	dfc00117 	ldw	ra,4(sp)
   25b44:	df000017 	ldw	fp,0(sp)
   25b48:	dec00204 	addi	sp,sp,8
   25b4c:	f800283a 	ret

00025b50 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   25b50:	defffa04 	addi	sp,sp,-24
   25b54:	dfc00515 	stw	ra,20(sp)
   25b58:	df000415 	stw	fp,16(sp)
   25b5c:	df000404 	addi	fp,sp,16
   25b60:	e13ffe15 	stw	r4,-8(fp)
   25b64:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   25b68:	e0bffe17 	ldw	r2,-8(fp)
   25b6c:	10000326 	beq	r2,zero,25b7c <alt_dev_llist_insert+0x2c>
   25b70:	e0bffe17 	ldw	r2,-8(fp)
   25b74:	10800217 	ldw	r2,8(r2)
   25b78:	1000061e 	bne	r2,zero,25b94 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   25b7c:	0025b140 	call	25b14 <alt_get_errno>
   25b80:	1007883a 	mov	r3,r2
   25b84:	00800584 	movi	r2,22
   25b88:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   25b8c:	00bffa84 	movi	r2,-22
   25b90:	00001306 	br	25be0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   25b94:	e0bffe17 	ldw	r2,-8(fp)
   25b98:	e0ffff17 	ldw	r3,-4(fp)
   25b9c:	e0fffc15 	stw	r3,-16(fp)
   25ba0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   25ba4:	e0bffd17 	ldw	r2,-12(fp)
   25ba8:	e0fffc17 	ldw	r3,-16(fp)
   25bac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   25bb0:	e0bffc17 	ldw	r2,-16(fp)
   25bb4:	10c00017 	ldw	r3,0(r2)
   25bb8:	e0bffd17 	ldw	r2,-12(fp)
   25bbc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   25bc0:	e0bffc17 	ldw	r2,-16(fp)
   25bc4:	10800017 	ldw	r2,0(r2)
   25bc8:	e0fffd17 	ldw	r3,-12(fp)
   25bcc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   25bd0:	e0bffc17 	ldw	r2,-16(fp)
   25bd4:	e0fffd17 	ldw	r3,-12(fp)
   25bd8:	10c00015 	stw	r3,0(r2)

  return 0;  
   25bdc:	0005883a 	mov	r2,zero
}
   25be0:	e037883a 	mov	sp,fp
   25be4:	dfc00117 	ldw	ra,4(sp)
   25be8:	df000017 	ldw	fp,0(sp)
   25bec:	dec00204 	addi	sp,sp,8
   25bf0:	f800283a 	ret

00025bf4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   25bf4:	defffd04 	addi	sp,sp,-12
   25bf8:	dfc00215 	stw	ra,8(sp)
   25bfc:	df000115 	stw	fp,4(sp)
   25c00:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   25c04:	008000b4 	movhi	r2,2
   25c08:	109aea04 	addi	r2,r2,27560
   25c0c:	e0bfff15 	stw	r2,-4(fp)
   25c10:	00000606 	br	25c2c <_do_ctors+0x38>
        (*ctor) (); 
   25c14:	e0bfff17 	ldw	r2,-4(fp)
   25c18:	10800017 	ldw	r2,0(r2)
   25c1c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   25c20:	e0bfff17 	ldw	r2,-4(fp)
   25c24:	10bfff04 	addi	r2,r2,-4
   25c28:	e0bfff15 	stw	r2,-4(fp)
   25c2c:	e0ffff17 	ldw	r3,-4(fp)
   25c30:	008000b4 	movhi	r2,2
   25c34:	109aeb04 	addi	r2,r2,27564
   25c38:	18bff62e 	bgeu	r3,r2,25c14 <__alt_data_end+0xfffed574>
        (*ctor) (); 
}
   25c3c:	0001883a 	nop
   25c40:	e037883a 	mov	sp,fp
   25c44:	dfc00117 	ldw	ra,4(sp)
   25c48:	df000017 	ldw	fp,0(sp)
   25c4c:	dec00204 	addi	sp,sp,8
   25c50:	f800283a 	ret

00025c54 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   25c54:	defffd04 	addi	sp,sp,-12
   25c58:	dfc00215 	stw	ra,8(sp)
   25c5c:	df000115 	stw	fp,4(sp)
   25c60:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   25c64:	008000b4 	movhi	r2,2
   25c68:	109aea04 	addi	r2,r2,27560
   25c6c:	e0bfff15 	stw	r2,-4(fp)
   25c70:	00000606 	br	25c8c <_do_dtors+0x38>
        (*dtor) (); 
   25c74:	e0bfff17 	ldw	r2,-4(fp)
   25c78:	10800017 	ldw	r2,0(r2)
   25c7c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   25c80:	e0bfff17 	ldw	r2,-4(fp)
   25c84:	10bfff04 	addi	r2,r2,-4
   25c88:	e0bfff15 	stw	r2,-4(fp)
   25c8c:	e0ffff17 	ldw	r3,-4(fp)
   25c90:	008000b4 	movhi	r2,2
   25c94:	109aeb04 	addi	r2,r2,27564
   25c98:	18bff62e 	bgeu	r3,r2,25c74 <__alt_data_end+0xfffed5d4>
        (*dtor) (); 
}
   25c9c:	0001883a 	nop
   25ca0:	e037883a 	mov	sp,fp
   25ca4:	dfc00117 	ldw	ra,4(sp)
   25ca8:	df000017 	ldw	fp,0(sp)
   25cac:	dec00204 	addi	sp,sp,8
   25cb0:	f800283a 	ret

00025cb4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   25cb4:	deffff04 	addi	sp,sp,-4
   25cb8:	df000015 	stw	fp,0(sp)
   25cbc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   25cc0:	0001883a 	nop
   25cc4:	e037883a 	mov	sp,fp
   25cc8:	df000017 	ldw	fp,0(sp)
   25ccc:	dec00104 	addi	sp,sp,4
   25cd0:	f800283a 	ret

00025cd4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   25cd4:	defff904 	addi	sp,sp,-28
   25cd8:	dfc00615 	stw	ra,24(sp)
   25cdc:	df000515 	stw	fp,20(sp)
   25ce0:	df000504 	addi	fp,sp,20
   25ce4:	e13ffc15 	stw	r4,-16(fp)
   25ce8:	e17ffd15 	stw	r5,-12(fp)
   25cec:	e1bffe15 	stw	r6,-8(fp)
   25cf0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   25cf4:	e0800217 	ldw	r2,8(fp)
   25cf8:	d8800015 	stw	r2,0(sp)
   25cfc:	e1ffff17 	ldw	r7,-4(fp)
   25d00:	e1bffe17 	ldw	r6,-8(fp)
   25d04:	e17ffd17 	ldw	r5,-12(fp)
   25d08:	e13ffc17 	ldw	r4,-16(fp)
   25d0c:	0025e840 	call	25e84 <alt_iic_isr_register>
}  
   25d10:	e037883a 	mov	sp,fp
   25d14:	dfc00117 	ldw	ra,4(sp)
   25d18:	df000017 	ldw	fp,0(sp)
   25d1c:	dec00204 	addi	sp,sp,8
   25d20:	f800283a 	ret

00025d24 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   25d24:	defff904 	addi	sp,sp,-28
   25d28:	df000615 	stw	fp,24(sp)
   25d2c:	df000604 	addi	fp,sp,24
   25d30:	e13ffe15 	stw	r4,-8(fp)
   25d34:	e17fff15 	stw	r5,-4(fp)
   25d38:	e0bfff17 	ldw	r2,-4(fp)
   25d3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25d40:	0005303a 	rdctl	r2,status
   25d44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25d48:	e0fffb17 	ldw	r3,-20(fp)
   25d4c:	00bfff84 	movi	r2,-2
   25d50:	1884703a 	and	r2,r3,r2
   25d54:	1001703a 	wrctl	status,r2
  
  return context;
   25d58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   25d5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   25d60:	00c00044 	movi	r3,1
   25d64:	e0bffa17 	ldw	r2,-24(fp)
   25d68:	1884983a 	sll	r2,r3,r2
   25d6c:	1007883a 	mov	r3,r2
   25d70:	d0a6fc17 	ldw	r2,-25616(gp)
   25d74:	1884b03a 	or	r2,r3,r2
   25d78:	d0a6fc15 	stw	r2,-25616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25d7c:	d0a6fc17 	ldw	r2,-25616(gp)
   25d80:	100170fa 	wrctl	ienable,r2
   25d84:	e0bffc17 	ldw	r2,-16(fp)
   25d88:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25d8c:	e0bffd17 	ldw	r2,-12(fp)
   25d90:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   25d94:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   25d98:	0001883a 	nop
}
   25d9c:	e037883a 	mov	sp,fp
   25da0:	df000017 	ldw	fp,0(sp)
   25da4:	dec00104 	addi	sp,sp,4
   25da8:	f800283a 	ret

00025dac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   25dac:	defff904 	addi	sp,sp,-28
   25db0:	df000615 	stw	fp,24(sp)
   25db4:	df000604 	addi	fp,sp,24
   25db8:	e13ffe15 	stw	r4,-8(fp)
   25dbc:	e17fff15 	stw	r5,-4(fp)
   25dc0:	e0bfff17 	ldw	r2,-4(fp)
   25dc4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25dc8:	0005303a 	rdctl	r2,status
   25dcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25dd0:	e0fffb17 	ldw	r3,-20(fp)
   25dd4:	00bfff84 	movi	r2,-2
   25dd8:	1884703a 	and	r2,r3,r2
   25ddc:	1001703a 	wrctl	status,r2
  
  return context;
   25de0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   25de4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   25de8:	00c00044 	movi	r3,1
   25dec:	e0bffa17 	ldw	r2,-24(fp)
   25df0:	1884983a 	sll	r2,r3,r2
   25df4:	0084303a 	nor	r2,zero,r2
   25df8:	1007883a 	mov	r3,r2
   25dfc:	d0a6fc17 	ldw	r2,-25616(gp)
   25e00:	1884703a 	and	r2,r3,r2
   25e04:	d0a6fc15 	stw	r2,-25616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25e08:	d0a6fc17 	ldw	r2,-25616(gp)
   25e0c:	100170fa 	wrctl	ienable,r2
   25e10:	e0bffc17 	ldw	r2,-16(fp)
   25e14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25e18:	e0bffd17 	ldw	r2,-12(fp)
   25e1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   25e20:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   25e24:	0001883a 	nop
}
   25e28:	e037883a 	mov	sp,fp
   25e2c:	df000017 	ldw	fp,0(sp)
   25e30:	dec00104 	addi	sp,sp,4
   25e34:	f800283a 	ret

00025e38 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   25e38:	defffc04 	addi	sp,sp,-16
   25e3c:	df000315 	stw	fp,12(sp)
   25e40:	df000304 	addi	fp,sp,12
   25e44:	e13ffe15 	stw	r4,-8(fp)
   25e48:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   25e4c:	000530fa 	rdctl	r2,ienable
   25e50:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   25e54:	00c00044 	movi	r3,1
   25e58:	e0bfff17 	ldw	r2,-4(fp)
   25e5c:	1884983a 	sll	r2,r3,r2
   25e60:	1007883a 	mov	r3,r2
   25e64:	e0bffd17 	ldw	r2,-12(fp)
   25e68:	1884703a 	and	r2,r3,r2
   25e6c:	1004c03a 	cmpne	r2,r2,zero
   25e70:	10803fcc 	andi	r2,r2,255
}
   25e74:	e037883a 	mov	sp,fp
   25e78:	df000017 	ldw	fp,0(sp)
   25e7c:	dec00104 	addi	sp,sp,4
   25e80:	f800283a 	ret

00025e84 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   25e84:	defff504 	addi	sp,sp,-44
   25e88:	dfc00a15 	stw	ra,40(sp)
   25e8c:	df000915 	stw	fp,36(sp)
   25e90:	df000904 	addi	fp,sp,36
   25e94:	e13ffc15 	stw	r4,-16(fp)
   25e98:	e17ffd15 	stw	r5,-12(fp)
   25e9c:	e1bffe15 	stw	r6,-8(fp)
   25ea0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   25ea4:	00bffa84 	movi	r2,-22
   25ea8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   25eac:	e0bffd17 	ldw	r2,-12(fp)
   25eb0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   25eb4:	e0bff817 	ldw	r2,-32(fp)
   25eb8:	10800808 	cmpgei	r2,r2,32
   25ebc:	1000271e 	bne	r2,zero,25f5c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25ec0:	0005303a 	rdctl	r2,status
   25ec4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25ec8:	e0fffb17 	ldw	r3,-20(fp)
   25ecc:	00bfff84 	movi	r2,-2
   25ed0:	1884703a 	and	r2,r3,r2
   25ed4:	1001703a 	wrctl	status,r2
  
  return context;
   25ed8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   25edc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   25ee0:	008000f4 	movhi	r2,3
   25ee4:	10a98104 	addi	r2,r2,-23036
   25ee8:	e0fff817 	ldw	r3,-32(fp)
   25eec:	180690fa 	slli	r3,r3,3
   25ef0:	10c5883a 	add	r2,r2,r3
   25ef4:	e0fffe17 	ldw	r3,-8(fp)
   25ef8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   25efc:	008000f4 	movhi	r2,3
   25f00:	10a98104 	addi	r2,r2,-23036
   25f04:	e0fff817 	ldw	r3,-32(fp)
   25f08:	180690fa 	slli	r3,r3,3
   25f0c:	10c5883a 	add	r2,r2,r3
   25f10:	10800104 	addi	r2,r2,4
   25f14:	e0ffff17 	ldw	r3,-4(fp)
   25f18:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   25f1c:	e0bffe17 	ldw	r2,-8(fp)
   25f20:	10000526 	beq	r2,zero,25f38 <alt_iic_isr_register+0xb4>
   25f24:	e0bff817 	ldw	r2,-32(fp)
   25f28:	100b883a 	mov	r5,r2
   25f2c:	e13ffc17 	ldw	r4,-16(fp)
   25f30:	0025d240 	call	25d24 <alt_ic_irq_enable>
   25f34:	00000406 	br	25f48 <alt_iic_isr_register+0xc4>
   25f38:	e0bff817 	ldw	r2,-32(fp)
   25f3c:	100b883a 	mov	r5,r2
   25f40:	e13ffc17 	ldw	r4,-16(fp)
   25f44:	0025dac0 	call	25dac <alt_ic_irq_disable>
   25f48:	e0bff715 	stw	r2,-36(fp)
   25f4c:	e0bffa17 	ldw	r2,-24(fp)
   25f50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25f54:	e0bff917 	ldw	r2,-28(fp)
   25f58:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   25f5c:	e0bff717 	ldw	r2,-36(fp)
}
   25f60:	e037883a 	mov	sp,fp
   25f64:	dfc00117 	ldw	ra,4(sp)
   25f68:	df000017 	ldw	fp,0(sp)
   25f6c:	dec00204 	addi	sp,sp,8
   25f70:	f800283a 	ret

00025f74 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   25f74:	defff804 	addi	sp,sp,-32
   25f78:	dfc00715 	stw	ra,28(sp)
   25f7c:	df000615 	stw	fp,24(sp)
   25f80:	dc000515 	stw	r16,20(sp)
   25f84:	df000604 	addi	fp,sp,24
   25f88:	e13ffb15 	stw	r4,-20(fp)
   25f8c:	e17ffc15 	stw	r5,-16(fp)
   25f90:	e1bffd15 	stw	r6,-12(fp)
   25f94:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   25f98:	e1bffe17 	ldw	r6,-8(fp)
   25f9c:	e17ffd17 	ldw	r5,-12(fp)
   25fa0:	e13ffc17 	ldw	r4,-16(fp)
   25fa4:	00261fc0 	call	261fc <open>
   25fa8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   25fac:	e0bffa17 	ldw	r2,-24(fp)
   25fb0:	10002216 	blt	r2,zero,2603c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   25fb4:	040000b4 	movhi	r16,2
   25fb8:	841db704 	addi	r16,r16,30428
   25fbc:	e0bffa17 	ldw	r2,-24(fp)
   25fc0:	01400304 	movi	r5,12
   25fc4:	1009883a 	mov	r4,r2
   25fc8:	00233a00 	call	233a0 <__mulsi3>
   25fcc:	8085883a 	add	r2,r16,r2
   25fd0:	10c00017 	ldw	r3,0(r2)
   25fd4:	e0bffb17 	ldw	r2,-20(fp)
   25fd8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   25fdc:	040000b4 	movhi	r16,2
   25fe0:	841db704 	addi	r16,r16,30428
   25fe4:	e0bffa17 	ldw	r2,-24(fp)
   25fe8:	01400304 	movi	r5,12
   25fec:	1009883a 	mov	r4,r2
   25ff0:	00233a00 	call	233a0 <__mulsi3>
   25ff4:	8085883a 	add	r2,r16,r2
   25ff8:	10800104 	addi	r2,r2,4
   25ffc:	10c00017 	ldw	r3,0(r2)
   26000:	e0bffb17 	ldw	r2,-20(fp)
   26004:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   26008:	040000b4 	movhi	r16,2
   2600c:	841db704 	addi	r16,r16,30428
   26010:	e0bffa17 	ldw	r2,-24(fp)
   26014:	01400304 	movi	r5,12
   26018:	1009883a 	mov	r4,r2
   2601c:	00233a00 	call	233a0 <__mulsi3>
   26020:	8085883a 	add	r2,r16,r2
   26024:	10800204 	addi	r2,r2,8
   26028:	10c00017 	ldw	r3,0(r2)
   2602c:	e0bffb17 	ldw	r2,-20(fp)
   26030:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   26034:	e13ffa17 	ldw	r4,-24(fp)
   26038:	0023aec0 	call	23aec <alt_release_fd>
  }
} 
   2603c:	0001883a 	nop
   26040:	e6ffff04 	addi	sp,fp,-4
   26044:	dfc00217 	ldw	ra,8(sp)
   26048:	df000117 	ldw	fp,4(sp)
   2604c:	dc000017 	ldw	r16,0(sp)
   26050:	dec00304 	addi	sp,sp,12
   26054:	f800283a 	ret

00026058 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   26058:	defffb04 	addi	sp,sp,-20
   2605c:	dfc00415 	stw	ra,16(sp)
   26060:	df000315 	stw	fp,12(sp)
   26064:	df000304 	addi	fp,sp,12
   26068:	e13ffd15 	stw	r4,-12(fp)
   2606c:	e17ffe15 	stw	r5,-8(fp)
   26070:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   26074:	01c07fc4 	movi	r7,511
   26078:	01800044 	movi	r6,1
   2607c:	e17ffd17 	ldw	r5,-12(fp)
   26080:	010000b4 	movhi	r4,2
   26084:	211dba04 	addi	r4,r4,30440
   26088:	0025f740 	call	25f74 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2608c:	01c07fc4 	movi	r7,511
   26090:	000d883a 	mov	r6,zero
   26094:	e17ffe17 	ldw	r5,-8(fp)
   26098:	010000b4 	movhi	r4,2
   2609c:	211db704 	addi	r4,r4,30428
   260a0:	0025f740 	call	25f74 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   260a4:	01c07fc4 	movi	r7,511
   260a8:	01800044 	movi	r6,1
   260ac:	e17fff17 	ldw	r5,-4(fp)
   260b0:	010000b4 	movhi	r4,2
   260b4:	211dbd04 	addi	r4,r4,30452
   260b8:	0025f740 	call	25f74 <alt_open_fd>
}  
   260bc:	0001883a 	nop
   260c0:	e037883a 	mov	sp,fp
   260c4:	dfc00117 	ldw	ra,4(sp)
   260c8:	df000017 	ldw	fp,0(sp)
   260cc:	dec00204 	addi	sp,sp,8
   260d0:	f800283a 	ret

000260d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   260d4:	defffe04 	addi	sp,sp,-8
   260d8:	dfc00115 	stw	ra,4(sp)
   260dc:	df000015 	stw	fp,0(sp)
   260e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   260e4:	d0a00917 	ldw	r2,-32732(gp)
   260e8:	10000326 	beq	r2,zero,260f8 <alt_get_errno+0x24>
   260ec:	d0a00917 	ldw	r2,-32732(gp)
   260f0:	103ee83a 	callr	r2
   260f4:	00000106 	br	260fc <alt_get_errno+0x28>
   260f8:	d0a6f804 	addi	r2,gp,-25632
}
   260fc:	e037883a 	mov	sp,fp
   26100:	dfc00117 	ldw	ra,4(sp)
   26104:	df000017 	ldw	fp,0(sp)
   26108:	dec00204 	addi	sp,sp,8
   2610c:	f800283a 	ret

00026110 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   26110:	defffb04 	addi	sp,sp,-20
   26114:	dfc00415 	stw	ra,16(sp)
   26118:	df000315 	stw	fp,12(sp)
   2611c:	dc000215 	stw	r16,8(sp)
   26120:	df000304 	addi	fp,sp,12
   26124:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   26128:	e0bffe17 	ldw	r2,-8(fp)
   2612c:	10800217 	ldw	r2,8(r2)
   26130:	10d00034 	orhi	r3,r2,16384
   26134:	e0bffe17 	ldw	r2,-8(fp)
   26138:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2613c:	e03ffd15 	stw	zero,-12(fp)
   26140:	00002306 	br	261d0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   26144:	040000b4 	movhi	r16,2
   26148:	841db704 	addi	r16,r16,30428
   2614c:	e0bffd17 	ldw	r2,-12(fp)
   26150:	01400304 	movi	r5,12
   26154:	1009883a 	mov	r4,r2
   26158:	00233a00 	call	233a0 <__mulsi3>
   2615c:	8085883a 	add	r2,r16,r2
   26160:	10c00017 	ldw	r3,0(r2)
   26164:	e0bffe17 	ldw	r2,-8(fp)
   26168:	10800017 	ldw	r2,0(r2)
   2616c:	1880151e 	bne	r3,r2,261c4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   26170:	040000b4 	movhi	r16,2
   26174:	841db704 	addi	r16,r16,30428
   26178:	e0bffd17 	ldw	r2,-12(fp)
   2617c:	01400304 	movi	r5,12
   26180:	1009883a 	mov	r4,r2
   26184:	00233a00 	call	233a0 <__mulsi3>
   26188:	8085883a 	add	r2,r16,r2
   2618c:	10800204 	addi	r2,r2,8
   26190:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   26194:	10000b0e 	bge	r2,zero,261c4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   26198:	01400304 	movi	r5,12
   2619c:	e13ffd17 	ldw	r4,-12(fp)
   261a0:	00233a00 	call	233a0 <__mulsi3>
   261a4:	1007883a 	mov	r3,r2
   261a8:	008000b4 	movhi	r2,2
   261ac:	109db704 	addi	r2,r2,30428
   261b0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   261b4:	e0bffe17 	ldw	r2,-8(fp)
   261b8:	18800226 	beq	r3,r2,261c4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   261bc:	00bffcc4 	movi	r2,-13
   261c0:	00000806 	br	261e4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   261c4:	e0bffd17 	ldw	r2,-12(fp)
   261c8:	10800044 	addi	r2,r2,1
   261cc:	e0bffd15 	stw	r2,-12(fp)
   261d0:	d0a00817 	ldw	r2,-32736(gp)
   261d4:	1007883a 	mov	r3,r2
   261d8:	e0bffd17 	ldw	r2,-12(fp)
   261dc:	18bfd92e 	bgeu	r3,r2,26144 <__alt_data_end+0xfffedaa4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   261e0:	0005883a 	mov	r2,zero
}
   261e4:	e6ffff04 	addi	sp,fp,-4
   261e8:	dfc00217 	ldw	ra,8(sp)
   261ec:	df000117 	ldw	fp,4(sp)
   261f0:	dc000017 	ldw	r16,0(sp)
   261f4:	dec00304 	addi	sp,sp,12
   261f8:	f800283a 	ret

000261fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   261fc:	defff604 	addi	sp,sp,-40
   26200:	dfc00915 	stw	ra,36(sp)
   26204:	df000815 	stw	fp,32(sp)
   26208:	df000804 	addi	fp,sp,32
   2620c:	e13ffd15 	stw	r4,-12(fp)
   26210:	e17ffe15 	stw	r5,-8(fp)
   26214:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   26218:	00bfffc4 	movi	r2,-1
   2621c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   26220:	00bffb44 	movi	r2,-19
   26224:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   26228:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2622c:	d1600604 	addi	r5,gp,-32744
   26230:	e13ffd17 	ldw	r4,-12(fp)
   26234:	00265200 	call	26520 <alt_find_dev>
   26238:	e0bff815 	stw	r2,-32(fp)
   2623c:	e0bff817 	ldw	r2,-32(fp)
   26240:	1000051e 	bne	r2,zero,26258 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   26244:	e13ffd17 	ldw	r4,-12(fp)
   26248:	00265b00 	call	265b0 <alt_find_file>
   2624c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   26250:	00800044 	movi	r2,1
   26254:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   26258:	e0bff817 	ldw	r2,-32(fp)
   2625c:	10002b26 	beq	r2,zero,2630c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   26260:	e13ff817 	ldw	r4,-32(fp)
   26264:	00266b80 	call	266b8 <alt_get_fd>
   26268:	e0bff915 	stw	r2,-28(fp)
   2626c:	e0bff917 	ldw	r2,-28(fp)
   26270:	1000030e 	bge	r2,zero,26280 <open+0x84>
    {
      status = index;
   26274:	e0bff917 	ldw	r2,-28(fp)
   26278:	e0bffa15 	stw	r2,-24(fp)
   2627c:	00002506 	br	26314 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   26280:	01400304 	movi	r5,12
   26284:	e13ff917 	ldw	r4,-28(fp)
   26288:	00233a00 	call	233a0 <__mulsi3>
   2628c:	1007883a 	mov	r3,r2
   26290:	008000b4 	movhi	r2,2
   26294:	109db704 	addi	r2,r2,30428
   26298:	1885883a 	add	r2,r3,r2
   2629c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   262a0:	e0fffe17 	ldw	r3,-8(fp)
   262a4:	00900034 	movhi	r2,16384
   262a8:	10bfffc4 	addi	r2,r2,-1
   262ac:	1886703a 	and	r3,r3,r2
   262b0:	e0bffc17 	ldw	r2,-16(fp)
   262b4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   262b8:	e0bffb17 	ldw	r2,-20(fp)
   262bc:	1000051e 	bne	r2,zero,262d4 <open+0xd8>
   262c0:	e13ffc17 	ldw	r4,-16(fp)
   262c4:	00261100 	call	26110 <alt_file_locked>
   262c8:	e0bffa15 	stw	r2,-24(fp)
   262cc:	e0bffa17 	ldw	r2,-24(fp)
   262d0:	10001016 	blt	r2,zero,26314 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   262d4:	e0bff817 	ldw	r2,-32(fp)
   262d8:	10800317 	ldw	r2,12(r2)
   262dc:	10000826 	beq	r2,zero,26300 <open+0x104>
   262e0:	e0bff817 	ldw	r2,-32(fp)
   262e4:	10800317 	ldw	r2,12(r2)
   262e8:	e1ffff17 	ldw	r7,-4(fp)
   262ec:	e1bffe17 	ldw	r6,-8(fp)
   262f0:	e17ffd17 	ldw	r5,-12(fp)
   262f4:	e13ffc17 	ldw	r4,-16(fp)
   262f8:	103ee83a 	callr	r2
   262fc:	00000106 	br	26304 <open+0x108>
   26300:	0005883a 	mov	r2,zero
   26304:	e0bffa15 	stw	r2,-24(fp)
   26308:	00000206 	br	26314 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2630c:	00bffb44 	movi	r2,-19
   26310:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   26314:	e0bffa17 	ldw	r2,-24(fp)
   26318:	1000090e 	bge	r2,zero,26340 <open+0x144>
  {
    alt_release_fd (index);  
   2631c:	e13ff917 	ldw	r4,-28(fp)
   26320:	0023aec0 	call	23aec <alt_release_fd>
    ALT_ERRNO = -status;
   26324:	00260d40 	call	260d4 <alt_get_errno>
   26328:	1007883a 	mov	r3,r2
   2632c:	e0bffa17 	ldw	r2,-24(fp)
   26330:	0085c83a 	sub	r2,zero,r2
   26334:	18800015 	stw	r2,0(r3)
    return -1;
   26338:	00bfffc4 	movi	r2,-1
   2633c:	00000106 	br	26344 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   26340:	e0bff917 	ldw	r2,-28(fp)
}
   26344:	e037883a 	mov	sp,fp
   26348:	dfc00117 	ldw	ra,4(sp)
   2634c:	df000017 	ldw	fp,0(sp)
   26350:	dec00204 	addi	sp,sp,8
   26354:	f800283a 	ret

00026358 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   26358:	defffa04 	addi	sp,sp,-24
   2635c:	df000515 	stw	fp,20(sp)
   26360:	df000504 	addi	fp,sp,20
   26364:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26368:	0005303a 	rdctl	r2,status
   2636c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26370:	e0fffc17 	ldw	r3,-16(fp)
   26374:	00bfff84 	movi	r2,-2
   26378:	1884703a 	and	r2,r3,r2
   2637c:	1001703a 	wrctl	status,r2
  
  return context;
   26380:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   26384:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   26388:	e0bfff17 	ldw	r2,-4(fp)
   2638c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   26390:	e0bffd17 	ldw	r2,-12(fp)
   26394:	10800017 	ldw	r2,0(r2)
   26398:	e0fffd17 	ldw	r3,-12(fp)
   2639c:	18c00117 	ldw	r3,4(r3)
   263a0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   263a4:	e0bffd17 	ldw	r2,-12(fp)
   263a8:	10800117 	ldw	r2,4(r2)
   263ac:	e0fffd17 	ldw	r3,-12(fp)
   263b0:	18c00017 	ldw	r3,0(r3)
   263b4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   263b8:	e0bffd17 	ldw	r2,-12(fp)
   263bc:	e0fffd17 	ldw	r3,-12(fp)
   263c0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   263c4:	e0bffd17 	ldw	r2,-12(fp)
   263c8:	e0fffd17 	ldw	r3,-12(fp)
   263cc:	10c00015 	stw	r3,0(r2)
   263d0:	e0bffb17 	ldw	r2,-20(fp)
   263d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   263d8:	e0bffe17 	ldw	r2,-8(fp)
   263dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   263e0:	0001883a 	nop
   263e4:	e037883a 	mov	sp,fp
   263e8:	df000017 	ldw	fp,0(sp)
   263ec:	dec00104 	addi	sp,sp,4
   263f0:	f800283a 	ret

000263f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   263f4:	defffb04 	addi	sp,sp,-20
   263f8:	dfc00415 	stw	ra,16(sp)
   263fc:	df000315 	stw	fp,12(sp)
   26400:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   26404:	d0a00d17 	ldw	r2,-32716(gp)
   26408:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2640c:	d0a6fe17 	ldw	r2,-25608(gp)
   26410:	10800044 	addi	r2,r2,1
   26414:	d0a6fe15 	stw	r2,-25608(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   26418:	00002e06 	br	264d4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2641c:	e0bffd17 	ldw	r2,-12(fp)
   26420:	10800017 	ldw	r2,0(r2)
   26424:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   26428:	e0bffd17 	ldw	r2,-12(fp)
   2642c:	10800403 	ldbu	r2,16(r2)
   26430:	10803fcc 	andi	r2,r2,255
   26434:	10000426 	beq	r2,zero,26448 <alt_tick+0x54>
   26438:	d0a6fe17 	ldw	r2,-25608(gp)
   2643c:	1000021e 	bne	r2,zero,26448 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   26440:	e0bffd17 	ldw	r2,-12(fp)
   26444:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   26448:	e0bffd17 	ldw	r2,-12(fp)
   2644c:	10800217 	ldw	r2,8(r2)
   26450:	d0e6fe17 	ldw	r3,-25608(gp)
   26454:	18801d36 	bltu	r3,r2,264cc <alt_tick+0xd8>
   26458:	e0bffd17 	ldw	r2,-12(fp)
   2645c:	10800403 	ldbu	r2,16(r2)
   26460:	10803fcc 	andi	r2,r2,255
   26464:	1000191e 	bne	r2,zero,264cc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   26468:	e0bffd17 	ldw	r2,-12(fp)
   2646c:	10800317 	ldw	r2,12(r2)
   26470:	e0fffd17 	ldw	r3,-12(fp)
   26474:	18c00517 	ldw	r3,20(r3)
   26478:	1809883a 	mov	r4,r3
   2647c:	103ee83a 	callr	r2
   26480:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   26484:	e0bfff17 	ldw	r2,-4(fp)
   26488:	1000031e 	bne	r2,zero,26498 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2648c:	e13ffd17 	ldw	r4,-12(fp)
   26490:	00263580 	call	26358 <alt_alarm_stop>
   26494:	00000d06 	br	264cc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   26498:	e0bffd17 	ldw	r2,-12(fp)
   2649c:	10c00217 	ldw	r3,8(r2)
   264a0:	e0bfff17 	ldw	r2,-4(fp)
   264a4:	1887883a 	add	r3,r3,r2
   264a8:	e0bffd17 	ldw	r2,-12(fp)
   264ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   264b0:	e0bffd17 	ldw	r2,-12(fp)
   264b4:	10c00217 	ldw	r3,8(r2)
   264b8:	d0a6fe17 	ldw	r2,-25608(gp)
   264bc:	1880032e 	bgeu	r3,r2,264cc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   264c0:	e0bffd17 	ldw	r2,-12(fp)
   264c4:	00c00044 	movi	r3,1
   264c8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   264cc:	e0bffe17 	ldw	r2,-8(fp)
   264d0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   264d4:	e0fffd17 	ldw	r3,-12(fp)
   264d8:	d0a00d04 	addi	r2,gp,-32716
   264dc:	18bfcf1e 	bne	r3,r2,2641c <__alt_data_end+0xfffedd7c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   264e0:	0001883a 	nop
}
   264e4:	0001883a 	nop
   264e8:	e037883a 	mov	sp,fp
   264ec:	dfc00117 	ldw	ra,4(sp)
   264f0:	df000017 	ldw	fp,0(sp)
   264f4:	dec00204 	addi	sp,sp,8
   264f8:	f800283a 	ret

000264fc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   264fc:	deffff04 	addi	sp,sp,-4
   26500:	df000015 	stw	fp,0(sp)
   26504:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   26508:	000170fa 	wrctl	ienable,zero
}
   2650c:	0001883a 	nop
   26510:	e037883a 	mov	sp,fp
   26514:	df000017 	ldw	fp,0(sp)
   26518:	dec00104 	addi	sp,sp,4
   2651c:	f800283a 	ret

00026520 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   26520:	defffa04 	addi	sp,sp,-24
   26524:	dfc00515 	stw	ra,20(sp)
   26528:	df000415 	stw	fp,16(sp)
   2652c:	df000404 	addi	fp,sp,16
   26530:	e13ffe15 	stw	r4,-8(fp)
   26534:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   26538:	e0bfff17 	ldw	r2,-4(fp)
   2653c:	10800017 	ldw	r2,0(r2)
   26540:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   26544:	e13ffe17 	ldw	r4,-8(fp)
   26548:	00206900 	call	20690 <strlen>
   2654c:	10800044 	addi	r2,r2,1
   26550:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   26554:	00000d06 	br	2658c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   26558:	e0bffc17 	ldw	r2,-16(fp)
   2655c:	10800217 	ldw	r2,8(r2)
   26560:	e0fffd17 	ldw	r3,-12(fp)
   26564:	180d883a 	mov	r6,r3
   26568:	e17ffe17 	ldw	r5,-8(fp)
   2656c:	1009883a 	mov	r4,r2
   26570:	00268640 	call	26864 <memcmp>
   26574:	1000021e 	bne	r2,zero,26580 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   26578:	e0bffc17 	ldw	r2,-16(fp)
   2657c:	00000706 	br	2659c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   26580:	e0bffc17 	ldw	r2,-16(fp)
   26584:	10800017 	ldw	r2,0(r2)
   26588:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2658c:	e0fffc17 	ldw	r3,-16(fp)
   26590:	e0bfff17 	ldw	r2,-4(fp)
   26594:	18bff01e 	bne	r3,r2,26558 <__alt_data_end+0xfffedeb8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   26598:	0005883a 	mov	r2,zero
}
   2659c:	e037883a 	mov	sp,fp
   265a0:	dfc00117 	ldw	ra,4(sp)
   265a4:	df000017 	ldw	fp,0(sp)
   265a8:	dec00204 	addi	sp,sp,8
   265ac:	f800283a 	ret

000265b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   265b0:	defffb04 	addi	sp,sp,-20
   265b4:	dfc00415 	stw	ra,16(sp)
   265b8:	df000315 	stw	fp,12(sp)
   265bc:	df000304 	addi	fp,sp,12
   265c0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   265c4:	d0a00417 	ldw	r2,-32752(gp)
   265c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   265cc:	00003106 	br	26694 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   265d0:	e0bffd17 	ldw	r2,-12(fp)
   265d4:	10800217 	ldw	r2,8(r2)
   265d8:	1009883a 	mov	r4,r2
   265dc:	00206900 	call	20690 <strlen>
   265e0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   265e4:	e0bffd17 	ldw	r2,-12(fp)
   265e8:	10c00217 	ldw	r3,8(r2)
   265ec:	e0bffe17 	ldw	r2,-8(fp)
   265f0:	10bfffc4 	addi	r2,r2,-1
   265f4:	1885883a 	add	r2,r3,r2
   265f8:	10800003 	ldbu	r2,0(r2)
   265fc:	10803fcc 	andi	r2,r2,255
   26600:	1080201c 	xori	r2,r2,128
   26604:	10bfe004 	addi	r2,r2,-128
   26608:	10800bd8 	cmpnei	r2,r2,47
   2660c:	1000031e 	bne	r2,zero,2661c <alt_find_file+0x6c>
    {
      len -= 1;
   26610:	e0bffe17 	ldw	r2,-8(fp)
   26614:	10bfffc4 	addi	r2,r2,-1
   26618:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2661c:	e0bffe17 	ldw	r2,-8(fp)
   26620:	e0ffff17 	ldw	r3,-4(fp)
   26624:	1885883a 	add	r2,r3,r2
   26628:	10800003 	ldbu	r2,0(r2)
   2662c:	10803fcc 	andi	r2,r2,255
   26630:	1080201c 	xori	r2,r2,128
   26634:	10bfe004 	addi	r2,r2,-128
   26638:	10800be0 	cmpeqi	r2,r2,47
   2663c:	1000081e 	bne	r2,zero,26660 <alt_find_file+0xb0>
   26640:	e0bffe17 	ldw	r2,-8(fp)
   26644:	e0ffff17 	ldw	r3,-4(fp)
   26648:	1885883a 	add	r2,r3,r2
   2664c:	10800003 	ldbu	r2,0(r2)
   26650:	10803fcc 	andi	r2,r2,255
   26654:	1080201c 	xori	r2,r2,128
   26658:	10bfe004 	addi	r2,r2,-128
   2665c:	10000a1e 	bne	r2,zero,26688 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   26660:	e0bffd17 	ldw	r2,-12(fp)
   26664:	10800217 	ldw	r2,8(r2)
   26668:	e0fffe17 	ldw	r3,-8(fp)
   2666c:	180d883a 	mov	r6,r3
   26670:	e17fff17 	ldw	r5,-4(fp)
   26674:	1009883a 	mov	r4,r2
   26678:	00268640 	call	26864 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2667c:	1000021e 	bne	r2,zero,26688 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   26680:	e0bffd17 	ldw	r2,-12(fp)
   26684:	00000706 	br	266a4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   26688:	e0bffd17 	ldw	r2,-12(fp)
   2668c:	10800017 	ldw	r2,0(r2)
   26690:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   26694:	e0fffd17 	ldw	r3,-12(fp)
   26698:	d0a00404 	addi	r2,gp,-32752
   2669c:	18bfcc1e 	bne	r3,r2,265d0 <__alt_data_end+0xfffedf30>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   266a0:	0005883a 	mov	r2,zero
}
   266a4:	e037883a 	mov	sp,fp
   266a8:	dfc00117 	ldw	ra,4(sp)
   266ac:	df000017 	ldw	fp,0(sp)
   266b0:	dec00204 	addi	sp,sp,8
   266b4:	f800283a 	ret

000266b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   266b8:	defffa04 	addi	sp,sp,-24
   266bc:	dfc00515 	stw	ra,20(sp)
   266c0:	df000415 	stw	fp,16(sp)
   266c4:	dc000315 	stw	r16,12(sp)
   266c8:	df000404 	addi	fp,sp,16
   266cc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   266d0:	00bffa04 	movi	r2,-24
   266d4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   266d8:	e03ffc15 	stw	zero,-16(fp)
   266dc:	00001d06 	br	26754 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   266e0:	040000b4 	movhi	r16,2
   266e4:	841db704 	addi	r16,r16,30428
   266e8:	e0bffc17 	ldw	r2,-16(fp)
   266ec:	01400304 	movi	r5,12
   266f0:	1009883a 	mov	r4,r2
   266f4:	00233a00 	call	233a0 <__mulsi3>
   266f8:	8085883a 	add	r2,r16,r2
   266fc:	10800017 	ldw	r2,0(r2)
   26700:	1000111e 	bne	r2,zero,26748 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   26704:	040000b4 	movhi	r16,2
   26708:	841db704 	addi	r16,r16,30428
   2670c:	e0bffc17 	ldw	r2,-16(fp)
   26710:	01400304 	movi	r5,12
   26714:	1009883a 	mov	r4,r2
   26718:	00233a00 	call	233a0 <__mulsi3>
   2671c:	8085883a 	add	r2,r16,r2
   26720:	e0fffe17 	ldw	r3,-8(fp)
   26724:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   26728:	d0e00817 	ldw	r3,-32736(gp)
   2672c:	e0bffc17 	ldw	r2,-16(fp)
   26730:	1880020e 	bge	r3,r2,2673c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   26734:	e0bffc17 	ldw	r2,-16(fp)
   26738:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   2673c:	e0bffc17 	ldw	r2,-16(fp)
   26740:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   26744:	00000606 	br	26760 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   26748:	e0bffc17 	ldw	r2,-16(fp)
   2674c:	10800044 	addi	r2,r2,1
   26750:	e0bffc15 	stw	r2,-16(fp)
   26754:	e0bffc17 	ldw	r2,-16(fp)
   26758:	10800810 	cmplti	r2,r2,32
   2675c:	103fe01e 	bne	r2,zero,266e0 <__alt_data_end+0xfffee040>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   26760:	e0bffd17 	ldw	r2,-12(fp)
}
   26764:	e6ffff04 	addi	sp,fp,-4
   26768:	dfc00217 	ldw	ra,8(sp)
   2676c:	df000117 	ldw	fp,4(sp)
   26770:	dc000017 	ldw	r16,0(sp)
   26774:	dec00304 	addi	sp,sp,12
   26778:	f800283a 	ret

0002677c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   2677c:	defffe04 	addi	sp,sp,-8
   26780:	df000115 	stw	fp,4(sp)
   26784:	df000104 	addi	fp,sp,4
   26788:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   2678c:	e0bfff17 	ldw	r2,-4(fp)
   26790:	10bffe84 	addi	r2,r2,-6
   26794:	10c00428 	cmpgeui	r3,r2,16
   26798:	18001a1e 	bne	r3,zero,26804 <alt_exception_cause_generated_bad_addr+0x88>
   2679c:	100690ba 	slli	r3,r2,2
   267a0:	008000b4 	movhi	r2,2
   267a4:	1099ed04 	addi	r2,r2,26548
   267a8:	1885883a 	add	r2,r3,r2
   267ac:	10800017 	ldw	r2,0(r2)
   267b0:	1000683a 	jmp	r2
   267b4:	000267f4 	movhi	zero,2463
   267b8:	000267f4 	movhi	zero,2463
   267bc:	00026804 	movi	zero,2464
   267c0:	00026804 	movi	zero,2464
   267c4:	00026804 	movi	zero,2464
   267c8:	000267f4 	movhi	zero,2463
   267cc:	000267fc 	xorhi	zero,zero,2463
   267d0:	00026804 	movi	zero,2464
   267d4:	000267f4 	movhi	zero,2463
   267d8:	000267f4 	movhi	zero,2463
   267dc:	00026804 	movi	zero,2464
   267e0:	000267f4 	movhi	zero,2463
   267e4:	000267fc 	xorhi	zero,zero,2463
   267e8:	00026804 	movi	zero,2464
   267ec:	00026804 	movi	zero,2464
   267f0:	000267f4 	movhi	zero,2463
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   267f4:	00800044 	movi	r2,1
   267f8:	00000306 	br	26808 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   267fc:	0005883a 	mov	r2,zero
   26800:	00000106 	br	26808 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   26804:	0005883a 	mov	r2,zero
  }
}
   26808:	e037883a 	mov	sp,fp
   2680c:	df000017 	ldw	fp,0(sp)
   26810:	dec00104 	addi	sp,sp,4
   26814:	f800283a 	ret

00026818 <atexit>:
   26818:	200b883a 	mov	r5,r4
   2681c:	000f883a 	mov	r7,zero
   26820:	000d883a 	mov	r6,zero
   26824:	0009883a 	mov	r4,zero
   26828:	00268e01 	jmpi	268e0 <__register_exitproc>

0002682c <exit>:
   2682c:	defffe04 	addi	sp,sp,-8
   26830:	000b883a 	mov	r5,zero
   26834:	dc000015 	stw	r16,0(sp)
   26838:	dfc00115 	stw	ra,4(sp)
   2683c:	2021883a 	mov	r16,r4
   26840:	00269f80 	call	269f8 <__call_exitprocs>
   26844:	008000f4 	movhi	r2,3
   26848:	10a27704 	addi	r2,r2,-30244
   2684c:	11000017 	ldw	r4,0(r2)
   26850:	20800f17 	ldw	r2,60(r4)
   26854:	10000126 	beq	r2,zero,2685c <exit+0x30>
   26858:	103ee83a 	callr	r2
   2685c:	8009883a 	mov	r4,r16
   26860:	0026b780 	call	26b78 <_exit>

00026864 <memcmp>:
   26864:	01c000c4 	movi	r7,3
   26868:	3980192e 	bgeu	r7,r6,268d0 <memcmp+0x6c>
   2686c:	2144b03a 	or	r2,r4,r5
   26870:	11c4703a 	and	r2,r2,r7
   26874:	10000f26 	beq	r2,zero,268b4 <memcmp+0x50>
   26878:	20800003 	ldbu	r2,0(r4)
   2687c:	28c00003 	ldbu	r3,0(r5)
   26880:	10c0151e 	bne	r2,r3,268d8 <memcmp+0x74>
   26884:	31bfff84 	addi	r6,r6,-2
   26888:	01ffffc4 	movi	r7,-1
   2688c:	00000406 	br	268a0 <memcmp+0x3c>
   26890:	20800003 	ldbu	r2,0(r4)
   26894:	28c00003 	ldbu	r3,0(r5)
   26898:	31bfffc4 	addi	r6,r6,-1
   2689c:	10c00e1e 	bne	r2,r3,268d8 <memcmp+0x74>
   268a0:	21000044 	addi	r4,r4,1
   268a4:	29400044 	addi	r5,r5,1
   268a8:	31fff91e 	bne	r6,r7,26890 <__alt_data_end+0xfffee1f0>
   268ac:	0005883a 	mov	r2,zero
   268b0:	f800283a 	ret
   268b4:	20c00017 	ldw	r3,0(r4)
   268b8:	28800017 	ldw	r2,0(r5)
   268bc:	18bfee1e 	bne	r3,r2,26878 <__alt_data_end+0xfffee1d8>
   268c0:	31bfff04 	addi	r6,r6,-4
   268c4:	21000104 	addi	r4,r4,4
   268c8:	29400104 	addi	r5,r5,4
   268cc:	39bff936 	bltu	r7,r6,268b4 <__alt_data_end+0xfffee214>
   268d0:	303fe91e 	bne	r6,zero,26878 <__alt_data_end+0xfffee1d8>
   268d4:	003ff506 	br	268ac <__alt_data_end+0xfffee20c>
   268d8:	10c5c83a 	sub	r2,r2,r3
   268dc:	f800283a 	ret

000268e0 <__register_exitproc>:
   268e0:	defffa04 	addi	sp,sp,-24
   268e4:	dc000315 	stw	r16,12(sp)
   268e8:	040000f4 	movhi	r16,3
   268ec:	84227704 	addi	r16,r16,-30244
   268f0:	80c00017 	ldw	r3,0(r16)
   268f4:	dc400415 	stw	r17,16(sp)
   268f8:	dfc00515 	stw	ra,20(sp)
   268fc:	18805217 	ldw	r2,328(r3)
   26900:	2023883a 	mov	r17,r4
   26904:	10003726 	beq	r2,zero,269e4 <__register_exitproc+0x104>
   26908:	10c00117 	ldw	r3,4(r2)
   2690c:	010007c4 	movi	r4,31
   26910:	20c00e16 	blt	r4,r3,2694c <__register_exitproc+0x6c>
   26914:	1a000044 	addi	r8,r3,1
   26918:	8800221e 	bne	r17,zero,269a4 <__register_exitproc+0xc4>
   2691c:	18c00084 	addi	r3,r3,2
   26920:	18c7883a 	add	r3,r3,r3
   26924:	18c7883a 	add	r3,r3,r3
   26928:	12000115 	stw	r8,4(r2)
   2692c:	10c7883a 	add	r3,r2,r3
   26930:	19400015 	stw	r5,0(r3)
   26934:	0005883a 	mov	r2,zero
   26938:	dfc00517 	ldw	ra,20(sp)
   2693c:	dc400417 	ldw	r17,16(sp)
   26940:	dc000317 	ldw	r16,12(sp)
   26944:	dec00604 	addi	sp,sp,24
   26948:	f800283a 	ret
   2694c:	00800034 	movhi	r2,0
   26950:	10800004 	addi	r2,r2,0
   26954:	10002626 	beq	r2,zero,269f0 <__register_exitproc+0x110>
   26958:	01006404 	movi	r4,400
   2695c:	d9400015 	stw	r5,0(sp)
   26960:	d9800115 	stw	r6,4(sp)
   26964:	d9c00215 	stw	r7,8(sp)
   26968:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   2696c:	d9400017 	ldw	r5,0(sp)
   26970:	d9800117 	ldw	r6,4(sp)
   26974:	d9c00217 	ldw	r7,8(sp)
   26978:	10001d26 	beq	r2,zero,269f0 <__register_exitproc+0x110>
   2697c:	81000017 	ldw	r4,0(r16)
   26980:	10000115 	stw	zero,4(r2)
   26984:	02000044 	movi	r8,1
   26988:	22405217 	ldw	r9,328(r4)
   2698c:	0007883a 	mov	r3,zero
   26990:	12400015 	stw	r9,0(r2)
   26994:	20805215 	stw	r2,328(r4)
   26998:	10006215 	stw	zero,392(r2)
   2699c:	10006315 	stw	zero,396(r2)
   269a0:	883fde26 	beq	r17,zero,2691c <__alt_data_end+0xfffee27c>
   269a4:	18c9883a 	add	r4,r3,r3
   269a8:	2109883a 	add	r4,r4,r4
   269ac:	1109883a 	add	r4,r2,r4
   269b0:	21802215 	stw	r6,136(r4)
   269b4:	01800044 	movi	r6,1
   269b8:	12406217 	ldw	r9,392(r2)
   269bc:	30cc983a 	sll	r6,r6,r3
   269c0:	4992b03a 	or	r9,r9,r6
   269c4:	12406215 	stw	r9,392(r2)
   269c8:	21c04215 	stw	r7,264(r4)
   269cc:	01000084 	movi	r4,2
   269d0:	893fd21e 	bne	r17,r4,2691c <__alt_data_end+0xfffee27c>
   269d4:	11006317 	ldw	r4,396(r2)
   269d8:	218cb03a 	or	r6,r4,r6
   269dc:	11806315 	stw	r6,396(r2)
   269e0:	003fce06 	br	2691c <__alt_data_end+0xfffee27c>
   269e4:	18805304 	addi	r2,r3,332
   269e8:	18805215 	stw	r2,328(r3)
   269ec:	003fc606 	br	26908 <__alt_data_end+0xfffee268>
   269f0:	00bfffc4 	movi	r2,-1
   269f4:	003fd006 	br	26938 <__alt_data_end+0xfffee298>

000269f8 <__call_exitprocs>:
   269f8:	defff504 	addi	sp,sp,-44
   269fc:	df000915 	stw	fp,36(sp)
   26a00:	dd400615 	stw	r21,24(sp)
   26a04:	dc800315 	stw	r18,12(sp)
   26a08:	dfc00a15 	stw	ra,40(sp)
   26a0c:	ddc00815 	stw	r23,32(sp)
   26a10:	dd800715 	stw	r22,28(sp)
   26a14:	dd000515 	stw	r20,20(sp)
   26a18:	dcc00415 	stw	r19,16(sp)
   26a1c:	dc400215 	stw	r17,8(sp)
   26a20:	dc000115 	stw	r16,4(sp)
   26a24:	d9000015 	stw	r4,0(sp)
   26a28:	2839883a 	mov	fp,r5
   26a2c:	04800044 	movi	r18,1
   26a30:	057fffc4 	movi	r21,-1
   26a34:	008000f4 	movhi	r2,3
   26a38:	10a27704 	addi	r2,r2,-30244
   26a3c:	12000017 	ldw	r8,0(r2)
   26a40:	45005217 	ldw	r20,328(r8)
   26a44:	44c05204 	addi	r19,r8,328
   26a48:	a0001c26 	beq	r20,zero,26abc <__call_exitprocs+0xc4>
   26a4c:	a0800117 	ldw	r2,4(r20)
   26a50:	15ffffc4 	addi	r23,r2,-1
   26a54:	b8000d16 	blt	r23,zero,26a8c <__call_exitprocs+0x94>
   26a58:	14000044 	addi	r16,r2,1
   26a5c:	8421883a 	add	r16,r16,r16
   26a60:	8421883a 	add	r16,r16,r16
   26a64:	84402004 	addi	r17,r16,128
   26a68:	a463883a 	add	r17,r20,r17
   26a6c:	a421883a 	add	r16,r20,r16
   26a70:	e0001e26 	beq	fp,zero,26aec <__call_exitprocs+0xf4>
   26a74:	80804017 	ldw	r2,256(r16)
   26a78:	e0801c26 	beq	fp,r2,26aec <__call_exitprocs+0xf4>
   26a7c:	bdffffc4 	addi	r23,r23,-1
   26a80:	843fff04 	addi	r16,r16,-4
   26a84:	8c7fff04 	addi	r17,r17,-4
   26a88:	bd7ff91e 	bne	r23,r21,26a70 <__alt_data_end+0xfffee3d0>
   26a8c:	00800034 	movhi	r2,0
   26a90:	10800004 	addi	r2,r2,0
   26a94:	10000926 	beq	r2,zero,26abc <__call_exitprocs+0xc4>
   26a98:	a0800117 	ldw	r2,4(r20)
   26a9c:	1000301e 	bne	r2,zero,26b60 <__call_exitprocs+0x168>
   26aa0:	a0800017 	ldw	r2,0(r20)
   26aa4:	10003226 	beq	r2,zero,26b70 <__call_exitprocs+0x178>
   26aa8:	a009883a 	mov	r4,r20
   26aac:	98800015 	stw	r2,0(r19)
   26ab0:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   26ab4:	9d000017 	ldw	r20,0(r19)
   26ab8:	a03fe41e 	bne	r20,zero,26a4c <__alt_data_end+0xfffee3ac>
   26abc:	dfc00a17 	ldw	ra,40(sp)
   26ac0:	df000917 	ldw	fp,36(sp)
   26ac4:	ddc00817 	ldw	r23,32(sp)
   26ac8:	dd800717 	ldw	r22,28(sp)
   26acc:	dd400617 	ldw	r21,24(sp)
   26ad0:	dd000517 	ldw	r20,20(sp)
   26ad4:	dcc00417 	ldw	r19,16(sp)
   26ad8:	dc800317 	ldw	r18,12(sp)
   26adc:	dc400217 	ldw	r17,8(sp)
   26ae0:	dc000117 	ldw	r16,4(sp)
   26ae4:	dec00b04 	addi	sp,sp,44
   26ae8:	f800283a 	ret
   26aec:	a0800117 	ldw	r2,4(r20)
   26af0:	80c00017 	ldw	r3,0(r16)
   26af4:	10bfffc4 	addi	r2,r2,-1
   26af8:	15c01426 	beq	r2,r23,26b4c <__call_exitprocs+0x154>
   26afc:	80000015 	stw	zero,0(r16)
   26b00:	183fde26 	beq	r3,zero,26a7c <__alt_data_end+0xfffee3dc>
   26b04:	95c8983a 	sll	r4,r18,r23
   26b08:	a0806217 	ldw	r2,392(r20)
   26b0c:	a5800117 	ldw	r22,4(r20)
   26b10:	2084703a 	and	r2,r4,r2
   26b14:	10000b26 	beq	r2,zero,26b44 <__call_exitprocs+0x14c>
   26b18:	a0806317 	ldw	r2,396(r20)
   26b1c:	2088703a 	and	r4,r4,r2
   26b20:	20000c1e 	bne	r4,zero,26b54 <__call_exitprocs+0x15c>
   26b24:	89400017 	ldw	r5,0(r17)
   26b28:	d9000017 	ldw	r4,0(sp)
   26b2c:	183ee83a 	callr	r3
   26b30:	a0800117 	ldw	r2,4(r20)
   26b34:	15bfbf1e 	bne	r2,r22,26a34 <__alt_data_end+0xfffee394>
   26b38:	98800017 	ldw	r2,0(r19)
   26b3c:	153fcf26 	beq	r2,r20,26a7c <__alt_data_end+0xfffee3dc>
   26b40:	003fbc06 	br	26a34 <__alt_data_end+0xfffee394>
   26b44:	183ee83a 	callr	r3
   26b48:	003ff906 	br	26b30 <__alt_data_end+0xfffee490>
   26b4c:	a5c00115 	stw	r23,4(r20)
   26b50:	003feb06 	br	26b00 <__alt_data_end+0xfffee460>
   26b54:	89000017 	ldw	r4,0(r17)
   26b58:	183ee83a 	callr	r3
   26b5c:	003ff406 	br	26b30 <__alt_data_end+0xfffee490>
   26b60:	a0800017 	ldw	r2,0(r20)
   26b64:	a027883a 	mov	r19,r20
   26b68:	1029883a 	mov	r20,r2
   26b6c:	003fb606 	br	26a48 <__alt_data_end+0xfffee3a8>
   26b70:	0005883a 	mov	r2,zero
   26b74:	003ffb06 	br	26b64 <__alt_data_end+0xfffee4c4>

00026b78 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   26b78:	defffd04 	addi	sp,sp,-12
   26b7c:	df000215 	stw	fp,8(sp)
   26b80:	df000204 	addi	fp,sp,8
   26b84:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   26b88:	0001883a 	nop
   26b8c:	e0bfff17 	ldw	r2,-4(fp)
   26b90:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   26b94:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   26b98:	10000226 	beq	r2,zero,26ba4 <_exit+0x2c>
    ALT_SIM_FAIL();
   26b9c:	002af070 	cmpltui	zero,zero,43969
   26ba0:	00000106 	br	26ba8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   26ba4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   26ba8:	003fff06 	br	26ba8 <__alt_data_end+0xfffee508>
