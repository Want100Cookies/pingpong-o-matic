
pingpong-o-matic.elf:     file format elf32-littlenios2
pingpong-o-matic.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00006fb0 memsz 0x00006fb0 flags r-x
    LOAD off    0x00007fd0 vaddr 0x00026fd0 paddr 0x00028b64 align 2**12
         filesz 0x00001b94 memsz 0x00001b94 flags rw-
    LOAD off    0x0000a6f8 vaddr 0x0002a6f8 paddr 0x0002a6f8 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006abc  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002e4  00026cec  00026cec  00007cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b94  00026fd0  00028b64  00007fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0002a6f8  0002a6f8  0000a6f8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  0002a84c  0002a84c  00009b64  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009b64  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000aa8  00000000  00000000  00009b88  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001731d  00000000  00000000  0000a630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000063f7  00000000  00000000  0002194d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000700e  00000000  00000000  00027d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000017ec  00000000  00000000  0002ed54  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002bea  00000000  00000000  00030540  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  0003312a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00037c04  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000698  00000000  00000000  00037c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003ab06  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0003ab09  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003ab13  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003ab14  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003ab15  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003ab19  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003ab1d  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003ab21  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003ab2a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003ab33  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  0003ab3c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000031  00000000  00000000  0003ab48  2**0
                  CONTENTS, READONLY
 29 .jdi          00004381  00000000  00000000  0003ab79  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00077366  00000000  00000000  0003eefa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00026cec l    d  .rodata	00000000 .rodata
00026fd0 l    d  .rwdata	00000000 .rwdata
0002a6f8 l    d  .bss	00000000 .bss
0002a84c l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pingpong-o-matic_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00020890 l     F .text	00000008 __fp_unlock
000208a4 l     F .text	0000019c __sinit.part.1
00020a40 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00026fd0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00023508 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002361c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00023648 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002373c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00023824 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00023910 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00023aec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00028b4c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00023d90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023ecc l     F .text	00000034 alt_dev_reg
000279a4 l     O .rwdata	00001060 jtag_uart
00028a04 l     O .rwdata	00000120 lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000241c0 l     F .text	0000020c altera_avalon_jtag_uart_irq
000243cc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00028b50 l     O .rwdata	00000004 colstart
00024a04 l     F .text	000000b8 lcd_write_command
00024abc l     F .text	000000d8 lcd_write_data
00024b94 l     F .text	000000e8 lcd_clear_screen
00024c7c l     F .text	00000228 lcd_repaint_screen
00024ea4 l     F .text	000000e8 lcd_scroll_up
00024f8c l     F .text	000002c4 lcd_handle_escape
00025770 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00025c54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000260b4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00026214 l     F .text	0000003c alt_get_errno
00026250 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00026e50 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0002a720 g     O .bss	00000004 alt_instruction_exception_handler
00023300 g     F .text	00000054 _isatty_r
00023a28 g     F .text	0000007c alt_main
00020724 g     F .text	000000c0 _puts_r
0002a74c g     O .bss	00000100 alt_irq
00023028 g     F .text	00000060 _lseek_r
00028b64 g       *ABS*	00000000 __flash_rwdata_start
0002a84c g       *ABS*	00000000 __alt_heap_start
000225dc g     F .text	0000005c __sseek
00020bf0 g     F .text	00000010 __sinit
00020a48 g     F .text	00000078 __sfmoreglue
00023ac8 g     F .text	00000024 __malloc_unlock
00021cc8 g     F .text	0000015c memmove
00020bd8 g     F .text	00000018 _cleanup
0002663c g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
000232a4 g     F .text	0000005c _fstat_r
0002a704 g     O .bss	00000004 errno
00022558 g     F .text	00000008 __seofread
0002a70c g     O .bss	00000004 alt_argv
00030b24 g       *ABS*	00000000 _gp
00023d60 g     F .text	00000030 usleep
00027824 g     O .rwdata	00000180 alt_fd_list
00026660 g     F .text	00000090 alt_find_dev
00021b80 g     F .text	00000148 memcpy
00020898 g     F .text	0000000c _cleanup_r
00026198 g     F .text	0000007c alt_io_redirect
00026cec g       *ABS*	00000000 __DTOR_END__
000207e4 g     F .text	00000014 puts
000268bc g     F .text	0000009c alt_exception_cause_generated_bad_addr
000245c4 g     F .text	0000021c altera_avalon_jtag_uart_read
0002344c g     F .text	00000064 .hidden __udivsi3
00023778 g     F .text	000000ac isatty
0002a700 g     O .bss	00000004 __malloc_top_pad
00020c40 g     F .text	000004c8 __sfvwrite_r
000224b0 g     F .text	00000054 _sbrk_r
00023244 g     F .text	00000060 _read_r
00028b44 g     O .rwdata	00000004 alt_max_fd
00022848 g     F .text	000000f0 _fclose_r
00022bc4 g     F .text	00000030 fflush
0002a6fc g     O .bss	00000004 __malloc_max_sbrked_mem
0002394c g     F .text	000000dc lseek
00028b24 g     O .rwdata	00000004 _global_impure_ptr
00021f4c g     F .text	00000564 _realloc_r
0002a84c g       *ABS*	00000000 __bss_end
00025fc4 g     F .text	000000f0 alt_iic_isr_register
00026534 g     F .text	00000108 alt_tick
00020c10 g     F .text	00000018 __fp_lock_all
00025f78 g     F .text	0000004c alt_ic_irq_enabled
00026498 g     F .text	0000009c alt_alarm_stop
0002a714 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
000277fc g     O .rwdata	00000028 alt_dev_null
00025c34 g     F .text	00000020 alt_dcache_flush_all
00028b64 g       *ABS*	00000000 __ram_rwdata_end
00028b3c g     O .rwdata	00000008 alt_dev_list
00023dcc g     F .text	00000100 write
00026fd0 g       *ABS*	00000000 __ram_rodata_end
00023684 g     F .text	000000b8 fstat
000234b0 g     F .text	00000058 .hidden __umodsi3
0002a84c g       *ABS*	00000000 end
00025250 g     F .text	00000520 altera_avalon_lcd_16207_write
00024100 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00026cec g       *ABS*	00000000 __CTOR_LIST__
000386a0 g       *ABS*	00000000 __alt_stack_pointer
000247e0 g     F .text	00000224 altera_avalon_jtag_uart_write
00020c00 g     F .text	00000004 __sfp_lock_acquire
00021a9c g     F .text	000000e4 memchr
00022d18 g     F .text	00000310 _free_r
00026b38 g     F .text	00000180 __call_exitprocs
00028b2c g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
0002a718 g     O .bss	00000004 _alt_tick_rate
0002a71c g     O .bss	00000004 _alt_nticks
00023b28 g     F .text	00000104 read
00023f38 g     F .text	00000064 alt_sys_init
00026a20 g     F .text	00000118 __register_exitproc
0002446c g     F .text	00000068 altera_avalon_jtag_uart_close
000206fc g     F .text	00000028 .hidden __mulsi3
00026fd0 g       *ABS*	00000000 __ram_rwdata_start
00026cec g       *ABS*	00000000 __ram_rodata_start
0002a724 g     O .bss	00000028 __malloc_current_mallinfo
00023f9c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000267f8 g     F .text	000000c4 alt_get_fd
00025adc g     F .text	00000158 alt_busy_sleep
000227f4 g     F .text	00000054 _close_r
000269a4 g     F .text	0000007c memcmp
0002405c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002a84c g       *ABS*	00000000 __alt_stack_base
000240ac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000226a0 g     F .text	00000154 __swsetup_r
00020540 g     F .text	0000008c setcolor
00020ac0 g     F .text	00000118 __sfp
000273f4 g     O .rwdata	00000408 __malloc_av_
00020c0c g     F .text	00000004 __sinit_lock_release
00022504 g     F .text	00000054 __sread
000266f0 g     F .text	00000108 alt_find_file
00025c90 g     F .text	000000a4 alt_dev_llist_insert
00023aa4 g     F .text	00000024 __malloc_lock
00023cb0 g     F .text	000000b0 sbrk
00022b68 g     F .text	0000005c _fflush_r
0002a6f8 g       *ABS*	00000000 __bss_start
00021e24 g     F .text	00000128 memset
0002026c g     F .text	00000108 lcd_init
000205cc g     F .text	00000130 main
0002a710 g     O .bss	00000004 alt_envp
0002a6f8 g     O .bss	00000004 __malloc_max_total_mem
00023ffc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002581c g     F .text	00000134 altera_avalon_lcd_16207_init
00022638 g     F .text	00000008 __sclose
000386a0 g       *ABS*	00000000 __alt_heap_limit
00022938 g     F .text	00000014 fclose
00021290 g     F .text	0000080c _malloc_r
00028b48 g     O .rwdata	00000004 alt_errno
00021108 g     F .text	000000c4 _fwalk
00023354 g     F .text	00000084 .hidden __divsi3
00022bf4 g     F .text	00000124 _malloc_trim_r
00026cec g       *ABS*	00000000 __CTOR_END__
00026cec g       *ABS*	00000000 __flash_rodata_start
00020374 g     F .text	000001cc test_lcd
00026cec g       *ABS*	00000000 __DTOR_LIST__
00023f00 g     F .text	00000038 alt_irq_init
00023c2c g     F .text	00000084 alt_release_fd
00026958 g     F .text	00000014 atexit
00022640 g     F .text	00000060 _write_r
00028b28 g     O .rwdata	00000004 _impure_ptr
0002a708 g     O .bss	00000004 alt_argc
0002294c g     F .text	0000021c __sflush_r
00025d94 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00020c28 g     F .text	00000018 __fp_unlock_all
00025950 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00028b34 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00025e14 g     F .text	00000050 alt_ic_isr_register
00028b64 g       *ABS*	00000000 _edata
0002a84c g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
000244d4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00025eec g     F .text	0000008c alt_ic_irq_disable
00022560 g     F .text	0000007c __swrite
00028b30 g     O .rwdata	00000004 __malloc_trim_threshold
0002696c g     F .text	00000038 exit
000211cc g     F .text	000000c4 _fwalk_reent
000233d8 g     F .text	00000074 .hidden __modsi3
00028b60 g     O .rwdata	00000004 __ctype_ptr__
000386a0 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020c04 g     F .text	00000004 __sfp_lock_release
00026d4f g     O .rodata	00000101 _ctype_
00026cb8 g     F .text	00000034 _exit
000259b0 g     F .text	0000012c alt_alarm_start
00023088 g     F .text	000001bc __smakebuf_r
000207f8 g     F .text	00000098 strlen
0002633c g     F .text	0000015c open
00025df4 g     F .text	00000020 alt_icache_flush_all
00028b54 g     O .rwdata	00000004 alt_priority_mask
00025e64 g     F .text	00000088 alt_ic_irq_enable
00028b58 g     O .rwdata	00000008 alt_alarm_list
00025d34 g     F .text	00000060 _do_ctors
00023544 g     F .text	000000d8 close
0002388c g     F .text	00000084 alt_load
00020c08 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10a9d304 	addi	r2,r2,-22708
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10a9d304 	addi	r2,r2,-22708
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe7a8c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe7a80>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a6ff17 	ldw	r2,-25604(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a6ff17 	ldw	r2,-25604(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
   20238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2023c:	d682c914 	ori	gp,gp,2852
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20244:	10a9be14 	ori	r2,r2,42744

    movhi r3, %hi(__bss_end)
   20248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2024c:	18ea1314 	ori	r3,r3,43084

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_data_end+0xfffe7bb4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	002388c0 	call	2388c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	0023a280 	call	23a28 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_data_end+0xfffe7bc8>

0002026c <lcd_init>:
#define LCD_WR_COMMAND_REG 0
#define LCD_RD_STATUS_REG 1
#define LCD_WR_DATA_REG 2
#define LCD_RD_DATA_REG 3

void lcd_init(void) {
   2026c:	defffe04 	addi	sp,sp,-8
   20270:	dfc00115 	stw	ra,4(sp)
   20274:	df000015 	stw	fp,0(sp)
   20278:	d839883a 	mov	fp,sp
	usleep(15000); /* Wait for more than 15 ms before init */
   2027c:	010ea604 	movi	r4,15000
   20280:	0023d600 	call	23d60 <usleep>
	/* Set function code four times -- 8-bit, 2 line, 5x7 mode */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   20284:	00c00e04 	movi	r3,56
   20288:	00800134 	movhi	r2,4
   2028c:	10847404 	addi	r2,r2,4560
   20290:	10c00035 	stwio	r3,0(r2)
	usleep(4100); /* Wait for more than 4.1 ms */
   20294:	01040104 	movi	r4,4100
   20298:	0023d600 	call	23d60 <usleep>
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   2029c:	00c00e04 	movi	r3,56
   202a0:	00800134 	movhi	r2,4
   202a4:	10847404 	addi	r2,r2,4560
   202a8:	10c00035 	stwio	r3,0(r2)
	usleep(100); /* Wait for more than 100 us */
   202ac:	01001904 	movi	r4,100
   202b0:	0023d600 	call	23d60 <usleep>
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   202b4:	00c00e04 	movi	r3,56
   202b8:	00800134 	movhi	r2,4
   202bc:	10847404 	addi	r2,r2,4560
   202c0:	10c00035 	stwio	r3,0(r2)
	usleep(5000); /* Wait for more than 100 us */
   202c4:	0104e204 	movi	r4,5000
   202c8:	0023d600 	call	23d60 <usleep>
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
   202cc:	00c00e04 	movi	r3,56
   202d0:	00800134 	movhi	r2,4
   202d4:	10847404 	addi	r2,r2,4560
   202d8:	10c00035 	stwio	r3,0(r2)
	usleep(100); /* Wait for more than 100 us */
   202dc:	01001904 	movi	r4,100
   202e0:	0023d600 	call	23d60 <usleep>

	/* Set Display to OFF*/
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x08);
   202e4:	00c00204 	movi	r3,8
   202e8:	00800134 	movhi	r2,4
   202ec:	10847404 	addi	r2,r2,4560
   202f0:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   202f4:	01001904 	movi	r4,100
   202f8:	0023d600 	call	23d60 <usleep>

	/* Set Display to ON */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x0C);
   202fc:	00c00304 	movi	r3,12
   20300:	00800134 	movhi	r2,4
   20304:	10847404 	addi	r2,r2,4560
   20308:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   2030c:	01001904 	movi	r4,100
   20310:	0023d600 	call	23d60 <usleep>

	/* Set Entry Mode -- Cursor increment, display doesn't shift */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x06);
   20314:	00c00184 	movi	r3,6
   20318:	00800134 	movhi	r2,4
   2031c:	10847404 	addi	r2,r2,4560
   20320:	10c00035 	stwio	r3,0(r2)
	usleep(100);
   20324:	01001904 	movi	r4,100
   20328:	0023d600 	call	23d60 <usleep>

	/* Set the Cursor to the home position */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x02);
   2032c:	00c00084 	movi	r3,2
   20330:	00800134 	movhi	r2,4
   20334:	10847404 	addi	r2,r2,4560
   20338:	10c00035 	stwio	r3,0(r2)
	usleep(2000);
   2033c:	0101f404 	movi	r4,2000
   20340:	0023d600 	call	23d60 <usleep>

	/* Display clear */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x01);
   20344:	00c00044 	movi	r3,1
   20348:	00800134 	movhi	r2,4
   2034c:	10847404 	addi	r2,r2,4560
   20350:	10c00035 	stwio	r3,0(r2)
	usleep(2000);
   20354:	0101f404 	movi	r4,2000
   20358:	0023d600 	call	23d60 <usleep>
}
   2035c:	0001883a 	nop
   20360:	e037883a 	mov	sp,fp
   20364:	dfc00117 	ldw	ra,4(sp)
   20368:	df000017 	ldw	fp,0(sp)
   2036c:	dec00204 	addi	sp,sp,8
   20370:	f800283a 	ret

00020374 <test_lcd>:

alt_u32 test_lcd(void) {
   20374:	defff504 	addi	sp,sp,-44
   20378:	dfc00a15 	stw	ra,40(sp)
   2037c:	df000915 	stw	fp,36(sp)
   20380:	df000904 	addi	fp,sp,36
	int i;
	char message[17] = "Hello World...  ";
   20384:	009b1b34 	movhi	r2,27756
   20388:	10995204 	addi	r2,r2,25928
   2038c:	e0bff815 	stw	r2,-32(fp)
   20390:	009bd5f4 	movhi	r2,28503
   20394:	10881bc4 	addi	r2,r2,8303
   20398:	e0bff915 	stw	r2,-28(fp)
   2039c:	008b9934 	movhi	r2,11876
   203a0:	109b1c84 	addi	r2,r2,27762
   203a4:	e0bffa15 	stw	r2,-24(fp)
   203a8:	00880834 	movhi	r2,8224
   203ac:	108b8b84 	addi	r2,r2,11822
   203b0:	e0bffb15 	stw	r2,-20(fp)
   203b4:	e03ffc05 	stb	zero,-16(fp)
	char done[15] = "Done! ";
   203b8:	00801104 	movi	r2,68
   203bc:	e0bffc45 	stb	r2,-15(fp)
   203c0:	00801bc4 	movi	r2,111
   203c4:	e0bffc85 	stb	r2,-14(fp)
   203c8:	00801b84 	movi	r2,110
   203cc:	e0bffcc5 	stb	r2,-13(fp)
   203d0:	00801944 	movi	r2,101
   203d4:	e0bffd05 	stb	r2,-12(fp)
   203d8:	00800844 	movi	r2,33
   203dc:	e0bffd45 	stb	r2,-11(fp)
   203e0:	00800804 	movi	r2,32
   203e4:	e0bffd85 	stb	r2,-10(fp)
   203e8:	e03ffdc5 	stb	zero,-9(fp)
   203ec:	e03ffe05 	stb	zero,-8(fp)
   203f0:	e03ffe45 	stb	zero,-7(fp)
   203f4:	e03ffe85 	stb	zero,-6(fp)
   203f8:	e03ffec5 	stb	zero,-5(fp)
   203fc:	e03fff05 	stb	zero,-4(fp)
   20400:	e03fff45 	stb	zero,-3(fp)
   20404:	e03fff85 	stb	zero,-2(fp)
   20408:	e03fffc5 	stb	zero,-1(fp)

	/* Write a simple message on the first line. */
	for (i = 0; i < 17; i++) {
   2040c:	e03ff715 	stw	zero,-36(fp)
   20410:	00000f06 	br	20450 <test_lcd+0xdc>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, message[i]);
   20414:	e0fff804 	addi	r3,fp,-32
   20418:	e0bff717 	ldw	r2,-36(fp)
   2041c:	1885883a 	add	r2,r3,r2
   20420:	10800003 	ldbu	r2,0(r2)
   20424:	10c03fcc 	andi	r3,r2,255
   20428:	18c0201c 	xori	r3,r3,128
   2042c:	18ffe004 	addi	r3,r3,-128
   20430:	00800134 	movhi	r2,4
   20434:	10847604 	addi	r2,r2,4568
   20438:	10c00035 	stwio	r3,0(r2)
		usleep(100);
   2043c:	01001904 	movi	r4,100
   20440:	0023d600 	call	23d60 <usleep>
	int i;
	char message[17] = "Hello World...  ";
	char done[15] = "Done! ";

	/* Write a simple message on the first line. */
	for (i = 0; i < 17; i++) {
   20444:	e0bff717 	ldw	r2,-36(fp)
   20448:	10800044 	addi	r2,r2,1
   2044c:	e0bff715 	stw	r2,-36(fp)
   20450:	e0bff717 	ldw	r2,-36(fp)
   20454:	10800450 	cmplti	r2,r2,17
   20458:	103fee1e 	bne	r2,zero,20414 <__alt_data_end+0xfffe7d74>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, message[i]);
		usleep(100);
	}
	/* Count along the bottom row */
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0xC0);
   2045c:	00c03004 	movi	r3,192
   20460:	00800134 	movhi	r2,4
   20464:	10847404 	addi	r2,r2,4560
   20468:	10c00035 	stwio	r3,0(r2)
	usleep(1000);
   2046c:	0100fa04 	movi	r4,1000
   20470:	0023d600 	call	23d60 <usleep>

	/* Display Count */
	for (i = 0; i < 10; i++) {
   20474:	e03ff715 	stw	zero,-36(fp)
   20478:	00000e06 	br	204b4 <test_lcd+0x140>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, (char )(i + 0x30));
   2047c:	e0bff717 	ldw	r2,-36(fp)
   20480:	10800c04 	addi	r2,r2,48
   20484:	10c03fcc 	andi	r3,r2,255
   20488:	18c0201c 	xori	r3,r3,128
   2048c:	18ffe004 	addi	r3,r3,-128
   20490:	00800134 	movhi	r2,4
   20494:	10847604 	addi	r2,r2,4568
   20498:	10c00035 	stwio	r3,0(r2)
		usleep(100000); /* Wait 0.5 sec */
   2049c:	010000b4 	movhi	r4,2
   204a0:	2121a804 	addi	r4,r4,-31072
   204a4:	0023d600 	call	23d60 <usleep>
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0xC0);
	usleep(1000);

	/* Display Count */
	for (i = 0; i < 10; i++) {
   204a8:	e0bff717 	ldw	r2,-36(fp)
   204ac:	10800044 	addi	r2,r2,1
   204b0:	e0bff715 	stw	r2,-36(fp)
   204b4:	e0bff717 	ldw	r2,-36(fp)
   204b8:	10800290 	cmplti	r2,r2,10
   204bc:	103fef1e 	bne	r2,zero,2047c <__alt_data_end+0xfffe7ddc>
		usleep(100000); /* Wait 0.5 sec */
	}

	/* Write "Done!" message on first line. */
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x80);
   204c0:	00c02004 	movi	r3,128
   204c4:	00800134 	movhi	r2,4
   204c8:	10847404 	addi	r2,r2,4560
   204cc:	10c00035 	stwio	r3,0(r2)
	usleep(1000);
   204d0:	0100fa04 	movi	r4,1000
   204d4:	0023d600 	call	23d60 <usleep>

	/* Write data */
	for (i = 0; i < 14; i++) {
   204d8:	e03ff715 	stw	zero,-36(fp)
   204dc:	00000f06 	br	2051c <test_lcd+0x1a8>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, done[i]);
   204e0:	e0fffc44 	addi	r3,fp,-15
   204e4:	e0bff717 	ldw	r2,-36(fp)
   204e8:	1885883a 	add	r2,r3,r2
   204ec:	10800003 	ldbu	r2,0(r2)
   204f0:	10c03fcc 	andi	r3,r2,255
   204f4:	18c0201c 	xori	r3,r3,128
   204f8:	18ffe004 	addi	r3,r3,-128
   204fc:	00800134 	movhi	r2,4
   20500:	10847604 	addi	r2,r2,4568
   20504:	10c00035 	stwio	r3,0(r2)
		usleep(100);
   20508:	01001904 	movi	r4,100
   2050c:	0023d600 	call	23d60 <usleep>
	/* Set Address */
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x80);
	usleep(1000);

	/* Write data */
	for (i = 0; i < 14; i++) {
   20510:	e0bff717 	ldw	r2,-36(fp)
   20514:	10800044 	addi	r2,r2,1
   20518:	e0bff715 	stw	r2,-36(fp)
   2051c:	e0bff717 	ldw	r2,-36(fp)
   20520:	10800390 	cmplti	r2,r2,14
   20524:	103fee1e 	bne	r2,zero,204e0 <__alt_data_end+0xfffe7e40>
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, done[i]);
		usleep(100);
	}
	return (0);
   20528:	0005883a 	mov	r2,zero
}
   2052c:	e037883a 	mov	sp,fp
   20530:	dfc00117 	ldw	ra,4(sp)
   20534:	df000017 	ldw	fp,0(sp)
   20538:	dec00204 	addi	sp,sp,8
   2053c:	f800283a 	ret

00020540 <setcolor>:

void setcolor(int x, int y, int c)
{
   20540:	defffb04 	addi	sp,sp,-20
   20544:	dfc00415 	stw	ra,16(sp)
   20548:	df000315 	stw	fp,12(sp)
   2054c:	df000304 	addi	fp,sp,12
   20550:	e13ffd15 	stw	r4,-12(fp)
   20554:	e17ffe15 	stw	r5,-8(fp)
   20558:	e1bfff15 	stw	r6,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(FRAMEBUFFER_CLK_BASE, 0);
   2055c:	0007883a 	mov	r3,zero
   20560:	00800134 	movhi	r2,4
   20564:	10848404 	addi	r2,r2,4624
   20568:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(FRAMEBUFFER_ADDR_BASE, x * y * 640);
   2056c:	e17ffe17 	ldw	r5,-8(fp)
   20570:	e13ffd17 	ldw	r4,-12(fp)
   20574:	00206fc0 	call	206fc <__mulsi3>
   20578:	0140a004 	movi	r5,640
   2057c:	1009883a 	mov	r4,r2
   20580:	00206fc0 	call	206fc <__mulsi3>
   20584:	1007883a 	mov	r3,r2
   20588:	00800134 	movhi	r2,4
   2058c:	10848804 	addi	r2,r2,4640
   20590:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(FRAMEBUFFER_DATA_BASE, c);
   20594:	00800134 	movhi	r2,4
   20598:	10848004 	addi	r2,r2,4608
   2059c:	e0ffff17 	ldw	r3,-4(fp)
   205a0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(FRAMEBUFFER_CLK_BASE, 1);
   205a4:	00c00044 	movi	r3,1
   205a8:	00800134 	movhi	r2,4
   205ac:	10848404 	addi	r2,r2,4624
   205b0:	10c00035 	stwio	r3,0(r2)
}
   205b4:	0001883a 	nop
   205b8:	e037883a 	mov	sp,fp
   205bc:	dfc00117 	ldw	ra,4(sp)
   205c0:	df000017 	ldw	fp,0(sp)
   205c4:	dec00204 	addi	sp,sp,8
   205c8:	f800283a 	ret

000205cc <main>:

int main() {
   205cc:	defff804 	addi	sp,sp,-32
   205d0:	dfc00715 	stw	ra,28(sp)
   205d4:	df000615 	stw	fp,24(sp)
   205d8:	df000604 	addi	fp,sp,24
	lcd_init();
   205dc:	002026c0 	call	2026c <lcd_init>
	test_lcd();
   205e0:	00203740 	call	20374 <test_lcd>

	printf("Starting camera capture...\n");
   205e4:	010000b4 	movhi	r4,2
   205e8:	211b3b04 	addi	r4,r4,27884
   205ec:	00207e40 	call	207e4 <puts>
//	int count2 = 0;
//	int count3 = 0;

	//IOWR_ALTERA_AVALON_PIO_DATA(FRAMEBUFFER_CLK_BASE, 0);

	for(int x = 0; x < 640; x++)
   205f0:	e03ffa15 	stw	zero,-24(fp)
   205f4:	00000f06 	br	20634 <main+0x68>
	{
		for(int y = 0; y < 480; y++)
   205f8:	e03ffb15 	stw	zero,-20(fp)
   205fc:	00000706 	br	2061c <main+0x50>
		{
			setcolor(x, y, 0);
   20600:	000d883a 	mov	r6,zero
   20604:	e17ffb17 	ldw	r5,-20(fp)
   20608:	e13ffa17 	ldw	r4,-24(fp)
   2060c:	00205400 	call	20540 <setcolor>

	//IOWR_ALTERA_AVALON_PIO_DATA(FRAMEBUFFER_CLK_BASE, 0);

	for(int x = 0; x < 640; x++)
	{
		for(int y = 0; y < 480; y++)
   20610:	e0bffb17 	ldw	r2,-20(fp)
   20614:	10800044 	addi	r2,r2,1
   20618:	e0bffb15 	stw	r2,-20(fp)
   2061c:	e0bffb17 	ldw	r2,-20(fp)
   20620:	10807810 	cmplti	r2,r2,480
   20624:	103ff61e 	bne	r2,zero,20600 <__alt_data_end+0xfffe7f60>
//	int count2 = 0;
//	int count3 = 0;

	//IOWR_ALTERA_AVALON_PIO_DATA(FRAMEBUFFER_CLK_BASE, 0);

	for(int x = 0; x < 640; x++)
   20628:	e0bffa17 	ldw	r2,-24(fp)
   2062c:	10800044 	addi	r2,r2,1
   20630:	e0bffa15 	stw	r2,-24(fp)
   20634:	e0bffa17 	ldw	r2,-24(fp)
   20638:	1080a010 	cmplti	r2,r2,640
   2063c:	103fee1e 	bne	r2,zero,205f8 <__alt_data_end+0xfffe7f58>
		setcolor(x, y, 1);
		usleep(1000000);
		setcolor(x, y, 0);
		*/

		printf("1\n");
   20640:	010000b4 	movhi	r4,2
   20644:	211b4204 	addi	r4,r4,27912
   20648:	00207e40 	call	207e4 <puts>

		for(int x = 0; x < 640; x++)
   2064c:	e03ffc15 	stw	zero,-16(fp)
   20650:	00000f06 	br	20690 <main+0xc4>
		{
			for(int y = 0; y < 480; y++)
   20654:	e03ffd15 	stw	zero,-12(fp)
   20658:	00000706 	br	20678 <main+0xac>
			{
				setcolor(x, y, 1);
   2065c:	01800044 	movi	r6,1
   20660:	e17ffd17 	ldw	r5,-12(fp)
   20664:	e13ffc17 	ldw	r4,-16(fp)
   20668:	00205400 	call	20540 <setcolor>

		printf("1\n");

		for(int x = 0; x < 640; x++)
		{
			for(int y = 0; y < 480; y++)
   2066c:	e0bffd17 	ldw	r2,-12(fp)
   20670:	10800044 	addi	r2,r2,1
   20674:	e0bffd15 	stw	r2,-12(fp)
   20678:	e0bffd17 	ldw	r2,-12(fp)
   2067c:	10807810 	cmplti	r2,r2,480
   20680:	103ff61e 	bne	r2,zero,2065c <__alt_data_end+0xfffe7fbc>
		setcolor(x, y, 0);
		*/

		printf("1\n");

		for(int x = 0; x < 640; x++)
   20684:	e0bffc17 	ldw	r2,-16(fp)
   20688:	10800044 	addi	r2,r2,1
   2068c:	e0bffc15 	stw	r2,-16(fp)
   20690:	e0bffc17 	ldw	r2,-16(fp)
   20694:	1080a010 	cmplti	r2,r2,640
   20698:	103fee1e 	bne	r2,zero,20654 <__alt_data_end+0xfffe7fb4>
				setcolor(x, y, 1);
			}
		}

		//usleep(100000);
		printf("2\n");
   2069c:	010000b4 	movhi	r4,2
   206a0:	211b4304 	addi	r4,r4,27916
   206a4:	00207e40 	call	207e4 <puts>

		for(int x = 0; x < 640; x++)
   206a8:	e03ffe15 	stw	zero,-8(fp)
   206ac:	00000f06 	br	206ec <main+0x120>
		{
			for(int y = 0; y < 480; y++)
   206b0:	e03fff15 	stw	zero,-4(fp)
   206b4:	00000706 	br	206d4 <main+0x108>
			{
				setcolor(x, y, 0);
   206b8:	000d883a 	mov	r6,zero
   206bc:	e17fff17 	ldw	r5,-4(fp)
   206c0:	e13ffe17 	ldw	r4,-8(fp)
   206c4:	00205400 	call	20540 <setcolor>
		//usleep(100000);
		printf("2\n");

		for(int x = 0; x < 640; x++)
		{
			for(int y = 0; y < 480; y++)
   206c8:	e0bfff17 	ldw	r2,-4(fp)
   206cc:	10800044 	addi	r2,r2,1
   206d0:	e0bfff15 	stw	r2,-4(fp)
   206d4:	e0bfff17 	ldw	r2,-4(fp)
   206d8:	10807810 	cmplti	r2,r2,480
   206dc:	103ff61e 	bne	r2,zero,206b8 <__alt_data_end+0xfffe8018>
		}

		//usleep(100000);
		printf("2\n");

		for(int x = 0; x < 640; x++)
   206e0:	e0bffe17 	ldw	r2,-8(fp)
   206e4:	10800044 	addi	r2,r2,1
   206e8:	e0bffe15 	stw	r2,-8(fp)
   206ec:	e0bffe17 	ldw	r2,-8(fp)
   206f0:	1080a010 	cmplti	r2,r2,640
   206f4:	103fee1e 	bne	r2,zero,206b0 <__alt_data_end+0xfffe8010>
				setcolor(x, y, 0);
			}
		}

		//usleep(100000);
	}
   206f8:	003fd106 	br	20640 <__alt_data_end+0xfffe7fa0>

000206fc <__mulsi3>:
   206fc:	0005883a 	mov	r2,zero
   20700:	20000726 	beq	r4,zero,20720 <__mulsi3+0x24>
   20704:	20c0004c 	andi	r3,r4,1
   20708:	2008d07a 	srli	r4,r4,1
   2070c:	18000126 	beq	r3,zero,20714 <__mulsi3+0x18>
   20710:	1145883a 	add	r2,r2,r5
   20714:	294b883a 	add	r5,r5,r5
   20718:	203ffa1e 	bne	r4,zero,20704 <__alt_data_end+0xfffe8064>
   2071c:	f800283a 	ret
   20720:	f800283a 	ret

00020724 <_puts_r>:
   20724:	defff604 	addi	sp,sp,-40
   20728:	dc000715 	stw	r16,28(sp)
   2072c:	2021883a 	mov	r16,r4
   20730:	2809883a 	mov	r4,r5
   20734:	dc400815 	stw	r17,32(sp)
   20738:	dfc00915 	stw	ra,36(sp)
   2073c:	2823883a 	mov	r17,r5
   20740:	00207f80 	call	207f8 <strlen>
   20744:	10c00044 	addi	r3,r2,1
   20748:	d8800115 	stw	r2,4(sp)
   2074c:	008000b4 	movhi	r2,2
   20750:	109b4404 	addi	r2,r2,27920
   20754:	d8800215 	stw	r2,8(sp)
   20758:	00800044 	movi	r2,1
   2075c:	d8800315 	stw	r2,12(sp)
   20760:	00800084 	movi	r2,2
   20764:	dc400015 	stw	r17,0(sp)
   20768:	d8c00615 	stw	r3,24(sp)
   2076c:	dec00415 	stw	sp,16(sp)
   20770:	d8800515 	stw	r2,20(sp)
   20774:	80000226 	beq	r16,zero,20780 <_puts_r+0x5c>
   20778:	80800e17 	ldw	r2,56(r16)
   2077c:	10001426 	beq	r2,zero,207d0 <_puts_r+0xac>
   20780:	81400217 	ldw	r5,8(r16)
   20784:	2880030b 	ldhu	r2,12(r5)
   20788:	10c8000c 	andi	r3,r2,8192
   2078c:	1800061e 	bne	r3,zero,207a8 <_puts_r+0x84>
   20790:	29001917 	ldw	r4,100(r5)
   20794:	00f7ffc4 	movi	r3,-8193
   20798:	10880014 	ori	r2,r2,8192
   2079c:	20c6703a 	and	r3,r4,r3
   207a0:	2880030d 	sth	r2,12(r5)
   207a4:	28c01915 	stw	r3,100(r5)
   207a8:	d9800404 	addi	r6,sp,16
   207ac:	8009883a 	mov	r4,r16
   207b0:	0020c400 	call	20c40 <__sfvwrite_r>
   207b4:	1000091e 	bne	r2,zero,207dc <_puts_r+0xb8>
   207b8:	00800284 	movi	r2,10
   207bc:	dfc00917 	ldw	ra,36(sp)
   207c0:	dc400817 	ldw	r17,32(sp)
   207c4:	dc000717 	ldw	r16,28(sp)
   207c8:	dec00a04 	addi	sp,sp,40
   207cc:	f800283a 	ret
   207d0:	8009883a 	mov	r4,r16
   207d4:	0020bf00 	call	20bf0 <__sinit>
   207d8:	003fe906 	br	20780 <__alt_data_end+0xfffe80e0>
   207dc:	00bfffc4 	movi	r2,-1
   207e0:	003ff606 	br	207bc <__alt_data_end+0xfffe811c>

000207e4 <puts>:
   207e4:	008000f4 	movhi	r2,3
   207e8:	10a2ca04 	addi	r2,r2,-29912
   207ec:	200b883a 	mov	r5,r4
   207f0:	11000017 	ldw	r4,0(r2)
   207f4:	00207241 	jmpi	20724 <_puts_r>

000207f8 <strlen>:
   207f8:	208000cc 	andi	r2,r4,3
   207fc:	10002026 	beq	r2,zero,20880 <strlen+0x88>
   20800:	20800007 	ldb	r2,0(r4)
   20804:	10002026 	beq	r2,zero,20888 <strlen+0x90>
   20808:	2005883a 	mov	r2,r4
   2080c:	00000206 	br	20818 <strlen+0x20>
   20810:	10c00007 	ldb	r3,0(r2)
   20814:	18001826 	beq	r3,zero,20878 <strlen+0x80>
   20818:	10800044 	addi	r2,r2,1
   2081c:	10c000cc 	andi	r3,r2,3
   20820:	183ffb1e 	bne	r3,zero,20810 <__alt_data_end+0xfffe8170>
   20824:	10c00017 	ldw	r3,0(r2)
   20828:	01ffbff4 	movhi	r7,65279
   2082c:	39ffbfc4 	addi	r7,r7,-257
   20830:	00ca303a 	nor	r5,zero,r3
   20834:	01a02074 	movhi	r6,32897
   20838:	19c7883a 	add	r3,r3,r7
   2083c:	31a02004 	addi	r6,r6,-32640
   20840:	1946703a 	and	r3,r3,r5
   20844:	1986703a 	and	r3,r3,r6
   20848:	1800091e 	bne	r3,zero,20870 <strlen+0x78>
   2084c:	10800104 	addi	r2,r2,4
   20850:	10c00017 	ldw	r3,0(r2)
   20854:	19cb883a 	add	r5,r3,r7
   20858:	00c6303a 	nor	r3,zero,r3
   2085c:	28c6703a 	and	r3,r5,r3
   20860:	1986703a 	and	r3,r3,r6
   20864:	183ff926 	beq	r3,zero,2084c <__alt_data_end+0xfffe81ac>
   20868:	00000106 	br	20870 <strlen+0x78>
   2086c:	10800044 	addi	r2,r2,1
   20870:	10c00007 	ldb	r3,0(r2)
   20874:	183ffd1e 	bne	r3,zero,2086c <__alt_data_end+0xfffe81cc>
   20878:	1105c83a 	sub	r2,r2,r4
   2087c:	f800283a 	ret
   20880:	2005883a 	mov	r2,r4
   20884:	003fe706 	br	20824 <__alt_data_end+0xfffe8184>
   20888:	0005883a 	mov	r2,zero
   2088c:	f800283a 	ret

00020890 <__fp_unlock>:
   20890:	0005883a 	mov	r2,zero
   20894:	f800283a 	ret

00020898 <_cleanup_r>:
   20898:	014000b4 	movhi	r5,2
   2089c:	294a1204 	addi	r5,r5,10312
   208a0:	00211cc1 	jmpi	211cc <_fwalk_reent>

000208a4 <__sinit.part.1>:
   208a4:	defff704 	addi	sp,sp,-36
   208a8:	00c000b4 	movhi	r3,2
   208ac:	dfc00815 	stw	ra,32(sp)
   208b0:	ddc00715 	stw	r23,28(sp)
   208b4:	dd800615 	stw	r22,24(sp)
   208b8:	dd400515 	stw	r21,20(sp)
   208bc:	dd000415 	stw	r20,16(sp)
   208c0:	dcc00315 	stw	r19,12(sp)
   208c4:	dc800215 	stw	r18,8(sp)
   208c8:	dc400115 	stw	r17,4(sp)
   208cc:	dc000015 	stw	r16,0(sp)
   208d0:	18c22604 	addi	r3,r3,2200
   208d4:	24000117 	ldw	r16,4(r4)
   208d8:	20c00f15 	stw	r3,60(r4)
   208dc:	2080bb04 	addi	r2,r4,748
   208e0:	00c000c4 	movi	r3,3
   208e4:	20c0b915 	stw	r3,740(r4)
   208e8:	2080ba15 	stw	r2,744(r4)
   208ec:	2000b815 	stw	zero,736(r4)
   208f0:	05c00204 	movi	r23,8
   208f4:	00800104 	movi	r2,4
   208f8:	2025883a 	mov	r18,r4
   208fc:	b80d883a 	mov	r6,r23
   20900:	81001704 	addi	r4,r16,92
   20904:	000b883a 	mov	r5,zero
   20908:	80000015 	stw	zero,0(r16)
   2090c:	80000115 	stw	zero,4(r16)
   20910:	80000215 	stw	zero,8(r16)
   20914:	8080030d 	sth	r2,12(r16)
   20918:	80001915 	stw	zero,100(r16)
   2091c:	8000038d 	sth	zero,14(r16)
   20920:	80000415 	stw	zero,16(r16)
   20924:	80000515 	stw	zero,20(r16)
   20928:	80000615 	stw	zero,24(r16)
   2092c:	0021e240 	call	21e24 <memset>
   20930:	058000b4 	movhi	r22,2
   20934:	94400217 	ldw	r17,8(r18)
   20938:	054000b4 	movhi	r21,2
   2093c:	050000b4 	movhi	r20,2
   20940:	04c000b4 	movhi	r19,2
   20944:	b5894104 	addi	r22,r22,9476
   20948:	ad495804 	addi	r21,r21,9568
   2094c:	a5097704 	addi	r20,r20,9692
   20950:	9cc98e04 	addi	r19,r19,9784
   20954:	85800815 	stw	r22,32(r16)
   20958:	85400915 	stw	r21,36(r16)
   2095c:	85000a15 	stw	r20,40(r16)
   20960:	84c00b15 	stw	r19,44(r16)
   20964:	84000715 	stw	r16,28(r16)
   20968:	00800284 	movi	r2,10
   2096c:	8880030d 	sth	r2,12(r17)
   20970:	00800044 	movi	r2,1
   20974:	b80d883a 	mov	r6,r23
   20978:	89001704 	addi	r4,r17,92
   2097c:	000b883a 	mov	r5,zero
   20980:	88000015 	stw	zero,0(r17)
   20984:	88000115 	stw	zero,4(r17)
   20988:	88000215 	stw	zero,8(r17)
   2098c:	88001915 	stw	zero,100(r17)
   20990:	8880038d 	sth	r2,14(r17)
   20994:	88000415 	stw	zero,16(r17)
   20998:	88000515 	stw	zero,20(r17)
   2099c:	88000615 	stw	zero,24(r17)
   209a0:	0021e240 	call	21e24 <memset>
   209a4:	94000317 	ldw	r16,12(r18)
   209a8:	00800484 	movi	r2,18
   209ac:	8c400715 	stw	r17,28(r17)
   209b0:	8d800815 	stw	r22,32(r17)
   209b4:	8d400915 	stw	r21,36(r17)
   209b8:	8d000a15 	stw	r20,40(r17)
   209bc:	8cc00b15 	stw	r19,44(r17)
   209c0:	8080030d 	sth	r2,12(r16)
   209c4:	00800084 	movi	r2,2
   209c8:	80000015 	stw	zero,0(r16)
   209cc:	80000115 	stw	zero,4(r16)
   209d0:	80000215 	stw	zero,8(r16)
   209d4:	80001915 	stw	zero,100(r16)
   209d8:	8080038d 	sth	r2,14(r16)
   209dc:	80000415 	stw	zero,16(r16)
   209e0:	80000515 	stw	zero,20(r16)
   209e4:	80000615 	stw	zero,24(r16)
   209e8:	b80d883a 	mov	r6,r23
   209ec:	000b883a 	mov	r5,zero
   209f0:	81001704 	addi	r4,r16,92
   209f4:	0021e240 	call	21e24 <memset>
   209f8:	00800044 	movi	r2,1
   209fc:	84000715 	stw	r16,28(r16)
   20a00:	85800815 	stw	r22,32(r16)
   20a04:	85400915 	stw	r21,36(r16)
   20a08:	85000a15 	stw	r20,40(r16)
   20a0c:	84c00b15 	stw	r19,44(r16)
   20a10:	90800e15 	stw	r2,56(r18)
   20a14:	dfc00817 	ldw	ra,32(sp)
   20a18:	ddc00717 	ldw	r23,28(sp)
   20a1c:	dd800617 	ldw	r22,24(sp)
   20a20:	dd400517 	ldw	r21,20(sp)
   20a24:	dd000417 	ldw	r20,16(sp)
   20a28:	dcc00317 	ldw	r19,12(sp)
   20a2c:	dc800217 	ldw	r18,8(sp)
   20a30:	dc400117 	ldw	r17,4(sp)
   20a34:	dc000017 	ldw	r16,0(sp)
   20a38:	dec00904 	addi	sp,sp,36
   20a3c:	f800283a 	ret

00020a40 <__fp_lock>:
   20a40:	0005883a 	mov	r2,zero
   20a44:	f800283a 	ret

00020a48 <__sfmoreglue>:
   20a48:	defffc04 	addi	sp,sp,-16
   20a4c:	dc800215 	stw	r18,8(sp)
   20a50:	2825883a 	mov	r18,r5
   20a54:	dc000015 	stw	r16,0(sp)
   20a58:	01401a04 	movi	r5,104
   20a5c:	2021883a 	mov	r16,r4
   20a60:	913fffc4 	addi	r4,r18,-1
   20a64:	dfc00315 	stw	ra,12(sp)
   20a68:	dc400115 	stw	r17,4(sp)
   20a6c:	00206fc0 	call	206fc <__mulsi3>
   20a70:	8009883a 	mov	r4,r16
   20a74:	11401d04 	addi	r5,r2,116
   20a78:	1023883a 	mov	r17,r2
   20a7c:	00212900 	call	21290 <_malloc_r>
   20a80:	1021883a 	mov	r16,r2
   20a84:	10000726 	beq	r2,zero,20aa4 <__sfmoreglue+0x5c>
   20a88:	11000304 	addi	r4,r2,12
   20a8c:	10000015 	stw	zero,0(r2)
   20a90:	14800115 	stw	r18,4(r2)
   20a94:	11000215 	stw	r4,8(r2)
   20a98:	89801a04 	addi	r6,r17,104
   20a9c:	000b883a 	mov	r5,zero
   20aa0:	0021e240 	call	21e24 <memset>
   20aa4:	8005883a 	mov	r2,r16
   20aa8:	dfc00317 	ldw	ra,12(sp)
   20aac:	dc800217 	ldw	r18,8(sp)
   20ab0:	dc400117 	ldw	r17,4(sp)
   20ab4:	dc000017 	ldw	r16,0(sp)
   20ab8:	dec00404 	addi	sp,sp,16
   20abc:	f800283a 	ret

00020ac0 <__sfp>:
   20ac0:	defffb04 	addi	sp,sp,-20
   20ac4:	dc000015 	stw	r16,0(sp)
   20ac8:	040000f4 	movhi	r16,3
   20acc:	8422c904 	addi	r16,r16,-29916
   20ad0:	dcc00315 	stw	r19,12(sp)
   20ad4:	2027883a 	mov	r19,r4
   20ad8:	81000017 	ldw	r4,0(r16)
   20adc:	dfc00415 	stw	ra,16(sp)
   20ae0:	dc800215 	stw	r18,8(sp)
   20ae4:	20800e17 	ldw	r2,56(r4)
   20ae8:	dc400115 	stw	r17,4(sp)
   20aec:	1000021e 	bne	r2,zero,20af8 <__sfp+0x38>
   20af0:	00208a40 	call	208a4 <__sinit.part.1>
   20af4:	81000017 	ldw	r4,0(r16)
   20af8:	2480b804 	addi	r18,r4,736
   20afc:	047fffc4 	movi	r17,-1
   20b00:	91000117 	ldw	r4,4(r18)
   20b04:	94000217 	ldw	r16,8(r18)
   20b08:	213fffc4 	addi	r4,r4,-1
   20b0c:	20000a16 	blt	r4,zero,20b38 <__sfp+0x78>
   20b10:	8080030f 	ldh	r2,12(r16)
   20b14:	10000c26 	beq	r2,zero,20b48 <__sfp+0x88>
   20b18:	80c01d04 	addi	r3,r16,116
   20b1c:	00000206 	br	20b28 <__sfp+0x68>
   20b20:	18bfe60f 	ldh	r2,-104(r3)
   20b24:	10000826 	beq	r2,zero,20b48 <__sfp+0x88>
   20b28:	213fffc4 	addi	r4,r4,-1
   20b2c:	1c3ffd04 	addi	r16,r3,-12
   20b30:	18c01a04 	addi	r3,r3,104
   20b34:	247ffa1e 	bne	r4,r17,20b20 <__alt_data_end+0xfffe8480>
   20b38:	90800017 	ldw	r2,0(r18)
   20b3c:	10001d26 	beq	r2,zero,20bb4 <__sfp+0xf4>
   20b40:	1025883a 	mov	r18,r2
   20b44:	003fee06 	br	20b00 <__alt_data_end+0xfffe8460>
   20b48:	00bfffc4 	movi	r2,-1
   20b4c:	8080038d 	sth	r2,14(r16)
   20b50:	00800044 	movi	r2,1
   20b54:	8080030d 	sth	r2,12(r16)
   20b58:	80001915 	stw	zero,100(r16)
   20b5c:	80000015 	stw	zero,0(r16)
   20b60:	80000215 	stw	zero,8(r16)
   20b64:	80000115 	stw	zero,4(r16)
   20b68:	80000415 	stw	zero,16(r16)
   20b6c:	80000515 	stw	zero,20(r16)
   20b70:	80000615 	stw	zero,24(r16)
   20b74:	01800204 	movi	r6,8
   20b78:	000b883a 	mov	r5,zero
   20b7c:	81001704 	addi	r4,r16,92
   20b80:	0021e240 	call	21e24 <memset>
   20b84:	8005883a 	mov	r2,r16
   20b88:	80000c15 	stw	zero,48(r16)
   20b8c:	80000d15 	stw	zero,52(r16)
   20b90:	80001115 	stw	zero,68(r16)
   20b94:	80001215 	stw	zero,72(r16)
   20b98:	dfc00417 	ldw	ra,16(sp)
   20b9c:	dcc00317 	ldw	r19,12(sp)
   20ba0:	dc800217 	ldw	r18,8(sp)
   20ba4:	dc400117 	ldw	r17,4(sp)
   20ba8:	dc000017 	ldw	r16,0(sp)
   20bac:	dec00504 	addi	sp,sp,20
   20bb0:	f800283a 	ret
   20bb4:	01400104 	movi	r5,4
   20bb8:	9809883a 	mov	r4,r19
   20bbc:	0020a480 	call	20a48 <__sfmoreglue>
   20bc0:	90800015 	stw	r2,0(r18)
   20bc4:	103fde1e 	bne	r2,zero,20b40 <__alt_data_end+0xfffe84a0>
   20bc8:	00800304 	movi	r2,12
   20bcc:	98800015 	stw	r2,0(r19)
   20bd0:	0005883a 	mov	r2,zero
   20bd4:	003ff006 	br	20b98 <__alt_data_end+0xfffe84f8>

00020bd8 <_cleanup>:
   20bd8:	008000f4 	movhi	r2,3
   20bdc:	10a2c904 	addi	r2,r2,-29916
   20be0:	11000017 	ldw	r4,0(r2)
   20be4:	014000b4 	movhi	r5,2
   20be8:	294a1204 	addi	r5,r5,10312
   20bec:	00211cc1 	jmpi	211cc <_fwalk_reent>

00020bf0 <__sinit>:
   20bf0:	20800e17 	ldw	r2,56(r4)
   20bf4:	10000126 	beq	r2,zero,20bfc <__sinit+0xc>
   20bf8:	f800283a 	ret
   20bfc:	00208a41 	jmpi	208a4 <__sinit.part.1>

00020c00 <__sfp_lock_acquire>:
   20c00:	f800283a 	ret

00020c04 <__sfp_lock_release>:
   20c04:	f800283a 	ret

00020c08 <__sinit_lock_acquire>:
   20c08:	f800283a 	ret

00020c0c <__sinit_lock_release>:
   20c0c:	f800283a 	ret

00020c10 <__fp_lock_all>:
   20c10:	008000f4 	movhi	r2,3
   20c14:	10a2ca04 	addi	r2,r2,-29912
   20c18:	11000017 	ldw	r4,0(r2)
   20c1c:	014000b4 	movhi	r5,2
   20c20:	29429004 	addi	r5,r5,2624
   20c24:	00211081 	jmpi	21108 <_fwalk>

00020c28 <__fp_unlock_all>:
   20c28:	008000f4 	movhi	r2,3
   20c2c:	10a2ca04 	addi	r2,r2,-29912
   20c30:	11000017 	ldw	r4,0(r2)
   20c34:	014000b4 	movhi	r5,2
   20c38:	29422404 	addi	r5,r5,2192
   20c3c:	00211081 	jmpi	21108 <_fwalk>

00020c40 <__sfvwrite_r>:
   20c40:	30800217 	ldw	r2,8(r6)
   20c44:	10006726 	beq	r2,zero,20de4 <__sfvwrite_r+0x1a4>
   20c48:	28c0030b 	ldhu	r3,12(r5)
   20c4c:	defff404 	addi	sp,sp,-48
   20c50:	dd400715 	stw	r21,28(sp)
   20c54:	dd000615 	stw	r20,24(sp)
   20c58:	dc000215 	stw	r16,8(sp)
   20c5c:	dfc00b15 	stw	ra,44(sp)
   20c60:	df000a15 	stw	fp,40(sp)
   20c64:	ddc00915 	stw	r23,36(sp)
   20c68:	dd800815 	stw	r22,32(sp)
   20c6c:	dcc00515 	stw	r19,20(sp)
   20c70:	dc800415 	stw	r18,16(sp)
   20c74:	dc400315 	stw	r17,12(sp)
   20c78:	1880020c 	andi	r2,r3,8
   20c7c:	2821883a 	mov	r16,r5
   20c80:	202b883a 	mov	r21,r4
   20c84:	3029883a 	mov	r20,r6
   20c88:	10002726 	beq	r2,zero,20d28 <__sfvwrite_r+0xe8>
   20c8c:	28800417 	ldw	r2,16(r5)
   20c90:	10002526 	beq	r2,zero,20d28 <__sfvwrite_r+0xe8>
   20c94:	1880008c 	andi	r2,r3,2
   20c98:	a4400017 	ldw	r17,0(r20)
   20c9c:	10002a26 	beq	r2,zero,20d48 <__sfvwrite_r+0x108>
   20ca0:	05a00034 	movhi	r22,32768
   20ca4:	0027883a 	mov	r19,zero
   20ca8:	0025883a 	mov	r18,zero
   20cac:	b5bf0004 	addi	r22,r22,-1024
   20cb0:	980d883a 	mov	r6,r19
   20cb4:	a809883a 	mov	r4,r21
   20cb8:	90004626 	beq	r18,zero,20dd4 <__sfvwrite_r+0x194>
   20cbc:	900f883a 	mov	r7,r18
   20cc0:	b480022e 	bgeu	r22,r18,20ccc <__sfvwrite_r+0x8c>
   20cc4:	01e00034 	movhi	r7,32768
   20cc8:	39ff0004 	addi	r7,r7,-1024
   20ccc:	80800917 	ldw	r2,36(r16)
   20cd0:	81400717 	ldw	r5,28(r16)
   20cd4:	103ee83a 	callr	r2
   20cd8:	00805a0e 	bge	zero,r2,20e44 <__sfvwrite_r+0x204>
   20cdc:	a0c00217 	ldw	r3,8(r20)
   20ce0:	98a7883a 	add	r19,r19,r2
   20ce4:	90a5c83a 	sub	r18,r18,r2
   20ce8:	1885c83a 	sub	r2,r3,r2
   20cec:	a0800215 	stw	r2,8(r20)
   20cf0:	103fef1e 	bne	r2,zero,20cb0 <__alt_data_end+0xfffe8610>
   20cf4:	0005883a 	mov	r2,zero
   20cf8:	dfc00b17 	ldw	ra,44(sp)
   20cfc:	df000a17 	ldw	fp,40(sp)
   20d00:	ddc00917 	ldw	r23,36(sp)
   20d04:	dd800817 	ldw	r22,32(sp)
   20d08:	dd400717 	ldw	r21,28(sp)
   20d0c:	dd000617 	ldw	r20,24(sp)
   20d10:	dcc00517 	ldw	r19,20(sp)
   20d14:	dc800417 	ldw	r18,16(sp)
   20d18:	dc400317 	ldw	r17,12(sp)
   20d1c:	dc000217 	ldw	r16,8(sp)
   20d20:	dec00c04 	addi	sp,sp,48
   20d24:	f800283a 	ret
   20d28:	800b883a 	mov	r5,r16
   20d2c:	a809883a 	mov	r4,r21
   20d30:	00226a00 	call	226a0 <__swsetup_r>
   20d34:	1000ee1e 	bne	r2,zero,210f0 <__sfvwrite_r+0x4b0>
   20d38:	80c0030b 	ldhu	r3,12(r16)
   20d3c:	a4400017 	ldw	r17,0(r20)
   20d40:	1880008c 	andi	r2,r3,2
   20d44:	103fd61e 	bne	r2,zero,20ca0 <__alt_data_end+0xfffe8600>
   20d48:	1880004c 	andi	r2,r3,1
   20d4c:	1000421e 	bne	r2,zero,20e58 <__sfvwrite_r+0x218>
   20d50:	0039883a 	mov	fp,zero
   20d54:	0025883a 	mov	r18,zero
   20d58:	90001a26 	beq	r18,zero,20dc4 <__sfvwrite_r+0x184>
   20d5c:	1880800c 	andi	r2,r3,512
   20d60:	84c00217 	ldw	r19,8(r16)
   20d64:	10002126 	beq	r2,zero,20dec <__sfvwrite_r+0x1ac>
   20d68:	982f883a 	mov	r23,r19
   20d6c:	94c09636 	bltu	r18,r19,20fc8 <__sfvwrite_r+0x388>
   20d70:	1881200c 	andi	r2,r3,1152
   20d74:	1000a11e 	bne	r2,zero,20ffc <__sfvwrite_r+0x3bc>
   20d78:	81000017 	ldw	r4,0(r16)
   20d7c:	b80d883a 	mov	r6,r23
   20d80:	e00b883a 	mov	r5,fp
   20d84:	0021cc80 	call	21cc8 <memmove>
   20d88:	80c00217 	ldw	r3,8(r16)
   20d8c:	81000017 	ldw	r4,0(r16)
   20d90:	9005883a 	mov	r2,r18
   20d94:	1ce7c83a 	sub	r19,r3,r19
   20d98:	25cf883a 	add	r7,r4,r23
   20d9c:	84c00215 	stw	r19,8(r16)
   20da0:	81c00015 	stw	r7,0(r16)
   20da4:	a0c00217 	ldw	r3,8(r20)
   20da8:	e0b9883a 	add	fp,fp,r2
   20dac:	90a5c83a 	sub	r18,r18,r2
   20db0:	18a7c83a 	sub	r19,r3,r2
   20db4:	a4c00215 	stw	r19,8(r20)
   20db8:	983fce26 	beq	r19,zero,20cf4 <__alt_data_end+0xfffe8654>
   20dbc:	80c0030b 	ldhu	r3,12(r16)
   20dc0:	903fe61e 	bne	r18,zero,20d5c <__alt_data_end+0xfffe86bc>
   20dc4:	8f000017 	ldw	fp,0(r17)
   20dc8:	8c800117 	ldw	r18,4(r17)
   20dcc:	8c400204 	addi	r17,r17,8
   20dd0:	003fe106 	br	20d58 <__alt_data_end+0xfffe86b8>
   20dd4:	8cc00017 	ldw	r19,0(r17)
   20dd8:	8c800117 	ldw	r18,4(r17)
   20ddc:	8c400204 	addi	r17,r17,8
   20de0:	003fb306 	br	20cb0 <__alt_data_end+0xfffe8610>
   20de4:	0005883a 	mov	r2,zero
   20de8:	f800283a 	ret
   20dec:	81000017 	ldw	r4,0(r16)
   20df0:	80800417 	ldw	r2,16(r16)
   20df4:	11005a36 	bltu	r2,r4,20f60 <__sfvwrite_r+0x320>
   20df8:	85c00517 	ldw	r23,20(r16)
   20dfc:	95c05836 	bltu	r18,r23,20f60 <__sfvwrite_r+0x320>
   20e00:	00a00034 	movhi	r2,32768
   20e04:	10bfffc4 	addi	r2,r2,-1
   20e08:	9009883a 	mov	r4,r18
   20e0c:	1480012e 	bgeu	r2,r18,20e14 <__sfvwrite_r+0x1d4>
   20e10:	1009883a 	mov	r4,r2
   20e14:	b80b883a 	mov	r5,r23
   20e18:	00233540 	call	23354 <__divsi3>
   20e1c:	b80b883a 	mov	r5,r23
   20e20:	1009883a 	mov	r4,r2
   20e24:	00206fc0 	call	206fc <__mulsi3>
   20e28:	81400717 	ldw	r5,28(r16)
   20e2c:	80c00917 	ldw	r3,36(r16)
   20e30:	100f883a 	mov	r7,r2
   20e34:	e00d883a 	mov	r6,fp
   20e38:	a809883a 	mov	r4,r21
   20e3c:	183ee83a 	callr	r3
   20e40:	00bfd816 	blt	zero,r2,20da4 <__alt_data_end+0xfffe8704>
   20e44:	8080030b 	ldhu	r2,12(r16)
   20e48:	10801014 	ori	r2,r2,64
   20e4c:	8080030d 	sth	r2,12(r16)
   20e50:	00bfffc4 	movi	r2,-1
   20e54:	003fa806 	br	20cf8 <__alt_data_end+0xfffe8658>
   20e58:	0027883a 	mov	r19,zero
   20e5c:	0011883a 	mov	r8,zero
   20e60:	0039883a 	mov	fp,zero
   20e64:	0025883a 	mov	r18,zero
   20e68:	90001f26 	beq	r18,zero,20ee8 <__sfvwrite_r+0x2a8>
   20e6c:	40005a26 	beq	r8,zero,20fd8 <__sfvwrite_r+0x398>
   20e70:	982d883a 	mov	r22,r19
   20e74:	94c0012e 	bgeu	r18,r19,20e7c <__sfvwrite_r+0x23c>
   20e78:	902d883a 	mov	r22,r18
   20e7c:	81000017 	ldw	r4,0(r16)
   20e80:	80800417 	ldw	r2,16(r16)
   20e84:	b02f883a 	mov	r23,r22
   20e88:	81c00517 	ldw	r7,20(r16)
   20e8c:	1100032e 	bgeu	r2,r4,20e9c <__sfvwrite_r+0x25c>
   20e90:	80c00217 	ldw	r3,8(r16)
   20e94:	38c7883a 	add	r3,r7,r3
   20e98:	1d801816 	blt	r3,r22,20efc <__sfvwrite_r+0x2bc>
   20e9c:	b1c03e16 	blt	r22,r7,20f98 <__sfvwrite_r+0x358>
   20ea0:	80800917 	ldw	r2,36(r16)
   20ea4:	81400717 	ldw	r5,28(r16)
   20ea8:	e00d883a 	mov	r6,fp
   20eac:	da000115 	stw	r8,4(sp)
   20eb0:	a809883a 	mov	r4,r21
   20eb4:	103ee83a 	callr	r2
   20eb8:	102f883a 	mov	r23,r2
   20ebc:	da000117 	ldw	r8,4(sp)
   20ec0:	00bfe00e 	bge	zero,r2,20e44 <__alt_data_end+0xfffe87a4>
   20ec4:	9de7c83a 	sub	r19,r19,r23
   20ec8:	98001f26 	beq	r19,zero,20f48 <__sfvwrite_r+0x308>
   20ecc:	a0800217 	ldw	r2,8(r20)
   20ed0:	e5f9883a 	add	fp,fp,r23
   20ed4:	95e5c83a 	sub	r18,r18,r23
   20ed8:	15efc83a 	sub	r23,r2,r23
   20edc:	a5c00215 	stw	r23,8(r20)
   20ee0:	b83f8426 	beq	r23,zero,20cf4 <__alt_data_end+0xfffe8654>
   20ee4:	903fe11e 	bne	r18,zero,20e6c <__alt_data_end+0xfffe87cc>
   20ee8:	8f000017 	ldw	fp,0(r17)
   20eec:	8c800117 	ldw	r18,4(r17)
   20ef0:	0011883a 	mov	r8,zero
   20ef4:	8c400204 	addi	r17,r17,8
   20ef8:	003fdb06 	br	20e68 <__alt_data_end+0xfffe87c8>
   20efc:	180d883a 	mov	r6,r3
   20f00:	e00b883a 	mov	r5,fp
   20f04:	da000115 	stw	r8,4(sp)
   20f08:	d8c00015 	stw	r3,0(sp)
   20f0c:	0021cc80 	call	21cc8 <memmove>
   20f10:	d8c00017 	ldw	r3,0(sp)
   20f14:	80800017 	ldw	r2,0(r16)
   20f18:	800b883a 	mov	r5,r16
   20f1c:	a809883a 	mov	r4,r21
   20f20:	10c5883a 	add	r2,r2,r3
   20f24:	80800015 	stw	r2,0(r16)
   20f28:	d8c00015 	stw	r3,0(sp)
   20f2c:	0022b680 	call	22b68 <_fflush_r>
   20f30:	d8c00017 	ldw	r3,0(sp)
   20f34:	da000117 	ldw	r8,4(sp)
   20f38:	103fc21e 	bne	r2,zero,20e44 <__alt_data_end+0xfffe87a4>
   20f3c:	182f883a 	mov	r23,r3
   20f40:	9de7c83a 	sub	r19,r19,r23
   20f44:	983fe11e 	bne	r19,zero,20ecc <__alt_data_end+0xfffe882c>
   20f48:	800b883a 	mov	r5,r16
   20f4c:	a809883a 	mov	r4,r21
   20f50:	0022b680 	call	22b68 <_fflush_r>
   20f54:	103fbb1e 	bne	r2,zero,20e44 <__alt_data_end+0xfffe87a4>
   20f58:	0011883a 	mov	r8,zero
   20f5c:	003fdb06 	br	20ecc <__alt_data_end+0xfffe882c>
   20f60:	94c0012e 	bgeu	r18,r19,20f68 <__sfvwrite_r+0x328>
   20f64:	9027883a 	mov	r19,r18
   20f68:	980d883a 	mov	r6,r19
   20f6c:	e00b883a 	mov	r5,fp
   20f70:	0021cc80 	call	21cc8 <memmove>
   20f74:	80800217 	ldw	r2,8(r16)
   20f78:	80c00017 	ldw	r3,0(r16)
   20f7c:	14c5c83a 	sub	r2,r2,r19
   20f80:	1cc7883a 	add	r3,r3,r19
   20f84:	80800215 	stw	r2,8(r16)
   20f88:	80c00015 	stw	r3,0(r16)
   20f8c:	10004326 	beq	r2,zero,2109c <__sfvwrite_r+0x45c>
   20f90:	9805883a 	mov	r2,r19
   20f94:	003f8306 	br	20da4 <__alt_data_end+0xfffe8704>
   20f98:	b00d883a 	mov	r6,r22
   20f9c:	e00b883a 	mov	r5,fp
   20fa0:	da000115 	stw	r8,4(sp)
   20fa4:	0021cc80 	call	21cc8 <memmove>
   20fa8:	80800217 	ldw	r2,8(r16)
   20fac:	80c00017 	ldw	r3,0(r16)
   20fb0:	da000117 	ldw	r8,4(sp)
   20fb4:	1585c83a 	sub	r2,r2,r22
   20fb8:	1dad883a 	add	r22,r3,r22
   20fbc:	80800215 	stw	r2,8(r16)
   20fc0:	85800015 	stw	r22,0(r16)
   20fc4:	003fbf06 	br	20ec4 <__alt_data_end+0xfffe8824>
   20fc8:	81000017 	ldw	r4,0(r16)
   20fcc:	9027883a 	mov	r19,r18
   20fd0:	902f883a 	mov	r23,r18
   20fd4:	003f6906 	br	20d7c <__alt_data_end+0xfffe86dc>
   20fd8:	900d883a 	mov	r6,r18
   20fdc:	01400284 	movi	r5,10
   20fe0:	e009883a 	mov	r4,fp
   20fe4:	0021a9c0 	call	21a9c <memchr>
   20fe8:	10003e26 	beq	r2,zero,210e4 <__sfvwrite_r+0x4a4>
   20fec:	10800044 	addi	r2,r2,1
   20ff0:	1727c83a 	sub	r19,r2,fp
   20ff4:	02000044 	movi	r8,1
   20ff8:	003f9d06 	br	20e70 <__alt_data_end+0xfffe87d0>
   20ffc:	80800517 	ldw	r2,20(r16)
   21000:	81400417 	ldw	r5,16(r16)
   21004:	81c00017 	ldw	r7,0(r16)
   21008:	10a7883a 	add	r19,r2,r2
   2100c:	9885883a 	add	r2,r19,r2
   21010:	1026d7fa 	srli	r19,r2,31
   21014:	396dc83a 	sub	r22,r7,r5
   21018:	b1000044 	addi	r4,r22,1
   2101c:	9885883a 	add	r2,r19,r2
   21020:	1027d07a 	srai	r19,r2,1
   21024:	2485883a 	add	r2,r4,r18
   21028:	980d883a 	mov	r6,r19
   2102c:	9880022e 	bgeu	r19,r2,21038 <__sfvwrite_r+0x3f8>
   21030:	1027883a 	mov	r19,r2
   21034:	100d883a 	mov	r6,r2
   21038:	18c1000c 	andi	r3,r3,1024
   2103c:	18001c26 	beq	r3,zero,210b0 <__sfvwrite_r+0x470>
   21040:	300b883a 	mov	r5,r6
   21044:	a809883a 	mov	r4,r21
   21048:	00212900 	call	21290 <_malloc_r>
   2104c:	102f883a 	mov	r23,r2
   21050:	10002926 	beq	r2,zero,210f8 <__sfvwrite_r+0x4b8>
   21054:	81400417 	ldw	r5,16(r16)
   21058:	b00d883a 	mov	r6,r22
   2105c:	1009883a 	mov	r4,r2
   21060:	0021b800 	call	21b80 <memcpy>
   21064:	8080030b 	ldhu	r2,12(r16)
   21068:	00fedfc4 	movi	r3,-1153
   2106c:	10c4703a 	and	r2,r2,r3
   21070:	10802014 	ori	r2,r2,128
   21074:	8080030d 	sth	r2,12(r16)
   21078:	bd89883a 	add	r4,r23,r22
   2107c:	9d8fc83a 	sub	r7,r19,r22
   21080:	85c00415 	stw	r23,16(r16)
   21084:	84c00515 	stw	r19,20(r16)
   21088:	81000015 	stw	r4,0(r16)
   2108c:	9027883a 	mov	r19,r18
   21090:	81c00215 	stw	r7,8(r16)
   21094:	902f883a 	mov	r23,r18
   21098:	003f3806 	br	20d7c <__alt_data_end+0xfffe86dc>
   2109c:	800b883a 	mov	r5,r16
   210a0:	a809883a 	mov	r4,r21
   210a4:	0022b680 	call	22b68 <_fflush_r>
   210a8:	103fb926 	beq	r2,zero,20f90 <__alt_data_end+0xfffe88f0>
   210ac:	003f6506 	br	20e44 <__alt_data_end+0xfffe87a4>
   210b0:	a809883a 	mov	r4,r21
   210b4:	0021f4c0 	call	21f4c <_realloc_r>
   210b8:	102f883a 	mov	r23,r2
   210bc:	103fee1e 	bne	r2,zero,21078 <__alt_data_end+0xfffe89d8>
   210c0:	81400417 	ldw	r5,16(r16)
   210c4:	a809883a 	mov	r4,r21
   210c8:	0022d180 	call	22d18 <_free_r>
   210cc:	8080030b 	ldhu	r2,12(r16)
   210d0:	00ffdfc4 	movi	r3,-129
   210d4:	1884703a 	and	r2,r3,r2
   210d8:	00c00304 	movi	r3,12
   210dc:	a8c00015 	stw	r3,0(r21)
   210e0:	003f5906 	br	20e48 <__alt_data_end+0xfffe87a8>
   210e4:	94c00044 	addi	r19,r18,1
   210e8:	02000044 	movi	r8,1
   210ec:	003f6006 	br	20e70 <__alt_data_end+0xfffe87d0>
   210f0:	00bfffc4 	movi	r2,-1
   210f4:	003f0006 	br	20cf8 <__alt_data_end+0xfffe8658>
   210f8:	00800304 	movi	r2,12
   210fc:	a8800015 	stw	r2,0(r21)
   21100:	8080030b 	ldhu	r2,12(r16)
   21104:	003f5006 	br	20e48 <__alt_data_end+0xfffe87a8>

00021108 <_fwalk>:
   21108:	defff704 	addi	sp,sp,-36
   2110c:	dd000415 	stw	r20,16(sp)
   21110:	dfc00815 	stw	ra,32(sp)
   21114:	ddc00715 	stw	r23,28(sp)
   21118:	dd800615 	stw	r22,24(sp)
   2111c:	dd400515 	stw	r21,20(sp)
   21120:	dcc00315 	stw	r19,12(sp)
   21124:	dc800215 	stw	r18,8(sp)
   21128:	dc400115 	stw	r17,4(sp)
   2112c:	dc000015 	stw	r16,0(sp)
   21130:	2500b804 	addi	r20,r4,736
   21134:	a0002326 	beq	r20,zero,211c4 <_fwalk+0xbc>
   21138:	282b883a 	mov	r21,r5
   2113c:	002f883a 	mov	r23,zero
   21140:	05800044 	movi	r22,1
   21144:	04ffffc4 	movi	r19,-1
   21148:	a4400117 	ldw	r17,4(r20)
   2114c:	a4800217 	ldw	r18,8(r20)
   21150:	8c7fffc4 	addi	r17,r17,-1
   21154:	88000d16 	blt	r17,zero,2118c <_fwalk+0x84>
   21158:	94000304 	addi	r16,r18,12
   2115c:	94800384 	addi	r18,r18,14
   21160:	8080000b 	ldhu	r2,0(r16)
   21164:	8c7fffc4 	addi	r17,r17,-1
   21168:	813ffd04 	addi	r4,r16,-12
   2116c:	b080042e 	bgeu	r22,r2,21180 <_fwalk+0x78>
   21170:	9080000f 	ldh	r2,0(r18)
   21174:	14c00226 	beq	r2,r19,21180 <_fwalk+0x78>
   21178:	a83ee83a 	callr	r21
   2117c:	b8aeb03a 	or	r23,r23,r2
   21180:	84001a04 	addi	r16,r16,104
   21184:	94801a04 	addi	r18,r18,104
   21188:	8cfff51e 	bne	r17,r19,21160 <__alt_data_end+0xfffe8ac0>
   2118c:	a5000017 	ldw	r20,0(r20)
   21190:	a03fed1e 	bne	r20,zero,21148 <__alt_data_end+0xfffe8aa8>
   21194:	b805883a 	mov	r2,r23
   21198:	dfc00817 	ldw	ra,32(sp)
   2119c:	ddc00717 	ldw	r23,28(sp)
   211a0:	dd800617 	ldw	r22,24(sp)
   211a4:	dd400517 	ldw	r21,20(sp)
   211a8:	dd000417 	ldw	r20,16(sp)
   211ac:	dcc00317 	ldw	r19,12(sp)
   211b0:	dc800217 	ldw	r18,8(sp)
   211b4:	dc400117 	ldw	r17,4(sp)
   211b8:	dc000017 	ldw	r16,0(sp)
   211bc:	dec00904 	addi	sp,sp,36
   211c0:	f800283a 	ret
   211c4:	002f883a 	mov	r23,zero
   211c8:	003ff206 	br	21194 <__alt_data_end+0xfffe8af4>

000211cc <_fwalk_reent>:
   211cc:	defff704 	addi	sp,sp,-36
   211d0:	dd000415 	stw	r20,16(sp)
   211d4:	dfc00815 	stw	ra,32(sp)
   211d8:	ddc00715 	stw	r23,28(sp)
   211dc:	dd800615 	stw	r22,24(sp)
   211e0:	dd400515 	stw	r21,20(sp)
   211e4:	dcc00315 	stw	r19,12(sp)
   211e8:	dc800215 	stw	r18,8(sp)
   211ec:	dc400115 	stw	r17,4(sp)
   211f0:	dc000015 	stw	r16,0(sp)
   211f4:	2500b804 	addi	r20,r4,736
   211f8:	a0002326 	beq	r20,zero,21288 <_fwalk_reent+0xbc>
   211fc:	282b883a 	mov	r21,r5
   21200:	2027883a 	mov	r19,r4
   21204:	002f883a 	mov	r23,zero
   21208:	05800044 	movi	r22,1
   2120c:	04bfffc4 	movi	r18,-1
   21210:	a4400117 	ldw	r17,4(r20)
   21214:	a4000217 	ldw	r16,8(r20)
   21218:	8c7fffc4 	addi	r17,r17,-1
   2121c:	88000c16 	blt	r17,zero,21250 <_fwalk_reent+0x84>
   21220:	84000304 	addi	r16,r16,12
   21224:	8080000b 	ldhu	r2,0(r16)
   21228:	8c7fffc4 	addi	r17,r17,-1
   2122c:	817ffd04 	addi	r5,r16,-12
   21230:	b080052e 	bgeu	r22,r2,21248 <_fwalk_reent+0x7c>
   21234:	8080008f 	ldh	r2,2(r16)
   21238:	9809883a 	mov	r4,r19
   2123c:	14800226 	beq	r2,r18,21248 <_fwalk_reent+0x7c>
   21240:	a83ee83a 	callr	r21
   21244:	b8aeb03a 	or	r23,r23,r2
   21248:	84001a04 	addi	r16,r16,104
   2124c:	8cbff51e 	bne	r17,r18,21224 <__alt_data_end+0xfffe8b84>
   21250:	a5000017 	ldw	r20,0(r20)
   21254:	a03fee1e 	bne	r20,zero,21210 <__alt_data_end+0xfffe8b70>
   21258:	b805883a 	mov	r2,r23
   2125c:	dfc00817 	ldw	ra,32(sp)
   21260:	ddc00717 	ldw	r23,28(sp)
   21264:	dd800617 	ldw	r22,24(sp)
   21268:	dd400517 	ldw	r21,20(sp)
   2126c:	dd000417 	ldw	r20,16(sp)
   21270:	dcc00317 	ldw	r19,12(sp)
   21274:	dc800217 	ldw	r18,8(sp)
   21278:	dc400117 	ldw	r17,4(sp)
   2127c:	dc000017 	ldw	r16,0(sp)
   21280:	dec00904 	addi	sp,sp,36
   21284:	f800283a 	ret
   21288:	002f883a 	mov	r23,zero
   2128c:	003ff206 	br	21258 <__alt_data_end+0xfffe8bb8>

00021290 <_malloc_r>:
   21290:	defff504 	addi	sp,sp,-44
   21294:	dc800315 	stw	r18,12(sp)
   21298:	dfc00a15 	stw	ra,40(sp)
   2129c:	df000915 	stw	fp,36(sp)
   212a0:	ddc00815 	stw	r23,32(sp)
   212a4:	dd800715 	stw	r22,28(sp)
   212a8:	dd400615 	stw	r21,24(sp)
   212ac:	dd000515 	stw	r20,20(sp)
   212b0:	dcc00415 	stw	r19,16(sp)
   212b4:	dc400215 	stw	r17,8(sp)
   212b8:	dc000115 	stw	r16,4(sp)
   212bc:	288002c4 	addi	r2,r5,11
   212c0:	00c00584 	movi	r3,22
   212c4:	2025883a 	mov	r18,r4
   212c8:	18807f2e 	bgeu	r3,r2,214c8 <_malloc_r+0x238>
   212cc:	047ffe04 	movi	r17,-8
   212d0:	1462703a 	and	r17,r2,r17
   212d4:	8800a316 	blt	r17,zero,21564 <_malloc_r+0x2d4>
   212d8:	8940a236 	bltu	r17,r5,21564 <_malloc_r+0x2d4>
   212dc:	0023aa40 	call	23aa4 <__malloc_lock>
   212e0:	00807dc4 	movi	r2,503
   212e4:	1441e92e 	bgeu	r2,r17,21a8c <_malloc_r+0x7fc>
   212e8:	8804d27a 	srli	r2,r17,9
   212ec:	1000a126 	beq	r2,zero,21574 <_malloc_r+0x2e4>
   212f0:	00c00104 	movi	r3,4
   212f4:	18811e36 	bltu	r3,r2,21770 <_malloc_r+0x4e0>
   212f8:	8804d1ba 	srli	r2,r17,6
   212fc:	12000e44 	addi	r8,r2,57
   21300:	11c00e04 	addi	r7,r2,56
   21304:	4209883a 	add	r4,r8,r8
   21308:	04c000b4 	movhi	r19,2
   2130c:	2109883a 	add	r4,r4,r4
   21310:	9cdcfd04 	addi	r19,r19,29684
   21314:	2109883a 	add	r4,r4,r4
   21318:	9909883a 	add	r4,r19,r4
   2131c:	24000117 	ldw	r16,4(r4)
   21320:	213ffe04 	addi	r4,r4,-8
   21324:	24009726 	beq	r4,r16,21584 <_malloc_r+0x2f4>
   21328:	80800117 	ldw	r2,4(r16)
   2132c:	01bfff04 	movi	r6,-4
   21330:	014003c4 	movi	r5,15
   21334:	1184703a 	and	r2,r2,r6
   21338:	1447c83a 	sub	r3,r2,r17
   2133c:	28c00716 	blt	r5,r3,2135c <_malloc_r+0xcc>
   21340:	1800920e 	bge	r3,zero,2158c <_malloc_r+0x2fc>
   21344:	84000317 	ldw	r16,12(r16)
   21348:	24008e26 	beq	r4,r16,21584 <_malloc_r+0x2f4>
   2134c:	80800117 	ldw	r2,4(r16)
   21350:	1184703a 	and	r2,r2,r6
   21354:	1447c83a 	sub	r3,r2,r17
   21358:	28fff90e 	bge	r5,r3,21340 <__alt_data_end+0xfffe8ca0>
   2135c:	3809883a 	mov	r4,r7
   21360:	018000b4 	movhi	r6,2
   21364:	9c000417 	ldw	r16,16(r19)
   21368:	319cfd04 	addi	r6,r6,29684
   2136c:	32000204 	addi	r8,r6,8
   21370:	82013426 	beq	r16,r8,21844 <_malloc_r+0x5b4>
   21374:	80c00117 	ldw	r3,4(r16)
   21378:	00bfff04 	movi	r2,-4
   2137c:	188e703a 	and	r7,r3,r2
   21380:	3c45c83a 	sub	r2,r7,r17
   21384:	00c003c4 	movi	r3,15
   21388:	18811f16 	blt	r3,r2,21808 <_malloc_r+0x578>
   2138c:	32000515 	stw	r8,20(r6)
   21390:	32000415 	stw	r8,16(r6)
   21394:	10007f0e 	bge	r2,zero,21594 <_malloc_r+0x304>
   21398:	00807fc4 	movi	r2,511
   2139c:	11c0fd36 	bltu	r2,r7,21794 <_malloc_r+0x504>
   213a0:	3806d0fa 	srli	r3,r7,3
   213a4:	01c00044 	movi	r7,1
   213a8:	30800117 	ldw	r2,4(r6)
   213ac:	19400044 	addi	r5,r3,1
   213b0:	294b883a 	add	r5,r5,r5
   213b4:	1807d0ba 	srai	r3,r3,2
   213b8:	294b883a 	add	r5,r5,r5
   213bc:	294b883a 	add	r5,r5,r5
   213c0:	298b883a 	add	r5,r5,r6
   213c4:	38c6983a 	sll	r3,r7,r3
   213c8:	29c00017 	ldw	r7,0(r5)
   213cc:	2a7ffe04 	addi	r9,r5,-8
   213d0:	1886b03a 	or	r3,r3,r2
   213d4:	82400315 	stw	r9,12(r16)
   213d8:	81c00215 	stw	r7,8(r16)
   213dc:	30c00115 	stw	r3,4(r6)
   213e0:	2c000015 	stw	r16,0(r5)
   213e4:	3c000315 	stw	r16,12(r7)
   213e8:	2005d0ba 	srai	r2,r4,2
   213ec:	01400044 	movi	r5,1
   213f0:	288a983a 	sll	r5,r5,r2
   213f4:	19406f36 	bltu	r3,r5,215b4 <_malloc_r+0x324>
   213f8:	28c4703a 	and	r2,r5,r3
   213fc:	10000a1e 	bne	r2,zero,21428 <_malloc_r+0x198>
   21400:	00bfff04 	movi	r2,-4
   21404:	294b883a 	add	r5,r5,r5
   21408:	2088703a 	and	r4,r4,r2
   2140c:	28c4703a 	and	r2,r5,r3
   21410:	21000104 	addi	r4,r4,4
   21414:	1000041e 	bne	r2,zero,21428 <_malloc_r+0x198>
   21418:	294b883a 	add	r5,r5,r5
   2141c:	28c4703a 	and	r2,r5,r3
   21420:	21000104 	addi	r4,r4,4
   21424:	103ffc26 	beq	r2,zero,21418 <__alt_data_end+0xfffe8d78>
   21428:	02bfff04 	movi	r10,-4
   2142c:	024003c4 	movi	r9,15
   21430:	21800044 	addi	r6,r4,1
   21434:	318d883a 	add	r6,r6,r6
   21438:	318d883a 	add	r6,r6,r6
   2143c:	318d883a 	add	r6,r6,r6
   21440:	998d883a 	add	r6,r19,r6
   21444:	333ffe04 	addi	r12,r6,-8
   21448:	2017883a 	mov	r11,r4
   2144c:	31800104 	addi	r6,r6,4
   21450:	34000017 	ldw	r16,0(r6)
   21454:	31fffd04 	addi	r7,r6,-12
   21458:	81c0041e 	bne	r16,r7,2146c <_malloc_r+0x1dc>
   2145c:	0000fb06 	br	2184c <_malloc_r+0x5bc>
   21460:	1801030e 	bge	r3,zero,21870 <_malloc_r+0x5e0>
   21464:	84000317 	ldw	r16,12(r16)
   21468:	81c0f826 	beq	r16,r7,2184c <_malloc_r+0x5bc>
   2146c:	80800117 	ldw	r2,4(r16)
   21470:	1284703a 	and	r2,r2,r10
   21474:	1447c83a 	sub	r3,r2,r17
   21478:	48fff90e 	bge	r9,r3,21460 <__alt_data_end+0xfffe8dc0>
   2147c:	80800317 	ldw	r2,12(r16)
   21480:	81000217 	ldw	r4,8(r16)
   21484:	89400054 	ori	r5,r17,1
   21488:	81400115 	stw	r5,4(r16)
   2148c:	20800315 	stw	r2,12(r4)
   21490:	11000215 	stw	r4,8(r2)
   21494:	8463883a 	add	r17,r16,r17
   21498:	9c400515 	stw	r17,20(r19)
   2149c:	9c400415 	stw	r17,16(r19)
   214a0:	18800054 	ori	r2,r3,1
   214a4:	88800115 	stw	r2,4(r17)
   214a8:	8a000315 	stw	r8,12(r17)
   214ac:	8a000215 	stw	r8,8(r17)
   214b0:	88e3883a 	add	r17,r17,r3
   214b4:	88c00015 	stw	r3,0(r17)
   214b8:	9009883a 	mov	r4,r18
   214bc:	0023ac80 	call	23ac8 <__malloc_unlock>
   214c0:	80800204 	addi	r2,r16,8
   214c4:	00001b06 	br	21534 <_malloc_r+0x2a4>
   214c8:	04400404 	movi	r17,16
   214cc:	89402536 	bltu	r17,r5,21564 <_malloc_r+0x2d4>
   214d0:	0023aa40 	call	23aa4 <__malloc_lock>
   214d4:	00800184 	movi	r2,6
   214d8:	01000084 	movi	r4,2
   214dc:	04c000b4 	movhi	r19,2
   214e0:	1085883a 	add	r2,r2,r2
   214e4:	9cdcfd04 	addi	r19,r19,29684
   214e8:	1085883a 	add	r2,r2,r2
   214ec:	9885883a 	add	r2,r19,r2
   214f0:	14000117 	ldw	r16,4(r2)
   214f4:	10fffe04 	addi	r3,r2,-8
   214f8:	80c0d926 	beq	r16,r3,21860 <_malloc_r+0x5d0>
   214fc:	80c00117 	ldw	r3,4(r16)
   21500:	81000317 	ldw	r4,12(r16)
   21504:	00bfff04 	movi	r2,-4
   21508:	1884703a 	and	r2,r3,r2
   2150c:	81400217 	ldw	r5,8(r16)
   21510:	8085883a 	add	r2,r16,r2
   21514:	10c00117 	ldw	r3,4(r2)
   21518:	29000315 	stw	r4,12(r5)
   2151c:	21400215 	stw	r5,8(r4)
   21520:	18c00054 	ori	r3,r3,1
   21524:	10c00115 	stw	r3,4(r2)
   21528:	9009883a 	mov	r4,r18
   2152c:	0023ac80 	call	23ac8 <__malloc_unlock>
   21530:	80800204 	addi	r2,r16,8
   21534:	dfc00a17 	ldw	ra,40(sp)
   21538:	df000917 	ldw	fp,36(sp)
   2153c:	ddc00817 	ldw	r23,32(sp)
   21540:	dd800717 	ldw	r22,28(sp)
   21544:	dd400617 	ldw	r21,24(sp)
   21548:	dd000517 	ldw	r20,20(sp)
   2154c:	dcc00417 	ldw	r19,16(sp)
   21550:	dc800317 	ldw	r18,12(sp)
   21554:	dc400217 	ldw	r17,8(sp)
   21558:	dc000117 	ldw	r16,4(sp)
   2155c:	dec00b04 	addi	sp,sp,44
   21560:	f800283a 	ret
   21564:	00800304 	movi	r2,12
   21568:	90800015 	stw	r2,0(r18)
   2156c:	0005883a 	mov	r2,zero
   21570:	003ff006 	br	21534 <__alt_data_end+0xfffe8e94>
   21574:	01002004 	movi	r4,128
   21578:	02001004 	movi	r8,64
   2157c:	01c00fc4 	movi	r7,63
   21580:	003f6106 	br	21308 <__alt_data_end+0xfffe8c68>
   21584:	4009883a 	mov	r4,r8
   21588:	003f7506 	br	21360 <__alt_data_end+0xfffe8cc0>
   2158c:	81000317 	ldw	r4,12(r16)
   21590:	003fde06 	br	2150c <__alt_data_end+0xfffe8e6c>
   21594:	81c5883a 	add	r2,r16,r7
   21598:	11400117 	ldw	r5,4(r2)
   2159c:	9009883a 	mov	r4,r18
   215a0:	29400054 	ori	r5,r5,1
   215a4:	11400115 	stw	r5,4(r2)
   215a8:	0023ac80 	call	23ac8 <__malloc_unlock>
   215ac:	80800204 	addi	r2,r16,8
   215b0:	003fe006 	br	21534 <__alt_data_end+0xfffe8e94>
   215b4:	9c000217 	ldw	r16,8(r19)
   215b8:	00bfff04 	movi	r2,-4
   215bc:	85800117 	ldw	r22,4(r16)
   215c0:	b0ac703a 	and	r22,r22,r2
   215c4:	b4400336 	bltu	r22,r17,215d4 <_malloc_r+0x344>
   215c8:	b445c83a 	sub	r2,r22,r17
   215cc:	00c003c4 	movi	r3,15
   215d0:	18805d16 	blt	r3,r2,21748 <_malloc_r+0x4b8>
   215d4:	05c000f4 	movhi	r23,3
   215d8:	008000f4 	movhi	r2,3
   215dc:	10a9c004 	addi	r2,r2,-22784
   215e0:	bde2cb04 	addi	r23,r23,-29908
   215e4:	15400017 	ldw	r21,0(r2)
   215e8:	b8c00017 	ldw	r3,0(r23)
   215ec:	00bfffc4 	movi	r2,-1
   215f0:	858d883a 	add	r6,r16,r22
   215f4:	8d6b883a 	add	r21,r17,r21
   215f8:	1880ea26 	beq	r3,r2,219a4 <_malloc_r+0x714>
   215fc:	ad4403c4 	addi	r21,r21,4111
   21600:	00bc0004 	movi	r2,-4096
   21604:	a8aa703a 	and	r21,r21,r2
   21608:	a80b883a 	mov	r5,r21
   2160c:	9009883a 	mov	r4,r18
   21610:	d9800015 	stw	r6,0(sp)
   21614:	00224b00 	call	224b0 <_sbrk_r>
   21618:	1029883a 	mov	r20,r2
   2161c:	00bfffc4 	movi	r2,-1
   21620:	d9800017 	ldw	r6,0(sp)
   21624:	a080e826 	beq	r20,r2,219c8 <_malloc_r+0x738>
   21628:	a180a636 	bltu	r20,r6,218c4 <_malloc_r+0x634>
   2162c:	070000f4 	movhi	fp,3
   21630:	e729c904 	addi	fp,fp,-22748
   21634:	e0800017 	ldw	r2,0(fp)
   21638:	a887883a 	add	r3,r21,r2
   2163c:	e0c00015 	stw	r3,0(fp)
   21640:	3500e626 	beq	r6,r20,219dc <_malloc_r+0x74c>
   21644:	b9000017 	ldw	r4,0(r23)
   21648:	00bfffc4 	movi	r2,-1
   2164c:	2080ee26 	beq	r4,r2,21a08 <_malloc_r+0x778>
   21650:	a185c83a 	sub	r2,r20,r6
   21654:	10c5883a 	add	r2,r2,r3
   21658:	e0800015 	stw	r2,0(fp)
   2165c:	a0c001cc 	andi	r3,r20,7
   21660:	1800bc26 	beq	r3,zero,21954 <_malloc_r+0x6c4>
   21664:	a0e9c83a 	sub	r20,r20,r3
   21668:	00840204 	movi	r2,4104
   2166c:	a5000204 	addi	r20,r20,8
   21670:	10c7c83a 	sub	r3,r2,r3
   21674:	a545883a 	add	r2,r20,r21
   21678:	1083ffcc 	andi	r2,r2,4095
   2167c:	18abc83a 	sub	r21,r3,r2
   21680:	a80b883a 	mov	r5,r21
   21684:	9009883a 	mov	r4,r18
   21688:	00224b00 	call	224b0 <_sbrk_r>
   2168c:	00ffffc4 	movi	r3,-1
   21690:	10c0e126 	beq	r2,r3,21a18 <_malloc_r+0x788>
   21694:	1505c83a 	sub	r2,r2,r20
   21698:	1545883a 	add	r2,r2,r21
   2169c:	10800054 	ori	r2,r2,1
   216a0:	e0c00017 	ldw	r3,0(fp)
   216a4:	9d000215 	stw	r20,8(r19)
   216a8:	a0800115 	stw	r2,4(r20)
   216ac:	a8c7883a 	add	r3,r21,r3
   216b0:	e0c00015 	stw	r3,0(fp)
   216b4:	84c00e26 	beq	r16,r19,216f0 <_malloc_r+0x460>
   216b8:	018003c4 	movi	r6,15
   216bc:	3580a72e 	bgeu	r6,r22,2195c <_malloc_r+0x6cc>
   216c0:	81400117 	ldw	r5,4(r16)
   216c4:	013ffe04 	movi	r4,-8
   216c8:	b0bffd04 	addi	r2,r22,-12
   216cc:	1104703a 	and	r2,r2,r4
   216d0:	2900004c 	andi	r4,r5,1
   216d4:	2088b03a 	or	r4,r4,r2
   216d8:	81000115 	stw	r4,4(r16)
   216dc:	01400144 	movi	r5,5
   216e0:	8089883a 	add	r4,r16,r2
   216e4:	21400115 	stw	r5,4(r4)
   216e8:	21400215 	stw	r5,8(r4)
   216ec:	3080cd36 	bltu	r6,r2,21a24 <_malloc_r+0x794>
   216f0:	008000f4 	movhi	r2,3
   216f4:	10a9bf04 	addi	r2,r2,-22788
   216f8:	11000017 	ldw	r4,0(r2)
   216fc:	20c0012e 	bgeu	r4,r3,21704 <_malloc_r+0x474>
   21700:	10c00015 	stw	r3,0(r2)
   21704:	008000f4 	movhi	r2,3
   21708:	10a9be04 	addi	r2,r2,-22792
   2170c:	11000017 	ldw	r4,0(r2)
   21710:	9c000217 	ldw	r16,8(r19)
   21714:	20c0012e 	bgeu	r4,r3,2171c <_malloc_r+0x48c>
   21718:	10c00015 	stw	r3,0(r2)
   2171c:	80c00117 	ldw	r3,4(r16)
   21720:	00bfff04 	movi	r2,-4
   21724:	1886703a 	and	r3,r3,r2
   21728:	1c45c83a 	sub	r2,r3,r17
   2172c:	1c400236 	bltu	r3,r17,21738 <_malloc_r+0x4a8>
   21730:	00c003c4 	movi	r3,15
   21734:	18800416 	blt	r3,r2,21748 <_malloc_r+0x4b8>
   21738:	9009883a 	mov	r4,r18
   2173c:	0023ac80 	call	23ac8 <__malloc_unlock>
   21740:	0005883a 	mov	r2,zero
   21744:	003f7b06 	br	21534 <__alt_data_end+0xfffe8e94>
   21748:	88c00054 	ori	r3,r17,1
   2174c:	80c00115 	stw	r3,4(r16)
   21750:	8463883a 	add	r17,r16,r17
   21754:	10800054 	ori	r2,r2,1
   21758:	9c400215 	stw	r17,8(r19)
   2175c:	88800115 	stw	r2,4(r17)
   21760:	9009883a 	mov	r4,r18
   21764:	0023ac80 	call	23ac8 <__malloc_unlock>
   21768:	80800204 	addi	r2,r16,8
   2176c:	003f7106 	br	21534 <__alt_data_end+0xfffe8e94>
   21770:	00c00504 	movi	r3,20
   21774:	18804a2e 	bgeu	r3,r2,218a0 <_malloc_r+0x610>
   21778:	00c01504 	movi	r3,84
   2177c:	18806e36 	bltu	r3,r2,21938 <_malloc_r+0x6a8>
   21780:	8804d33a 	srli	r2,r17,12
   21784:	12001bc4 	addi	r8,r2,111
   21788:	11c01b84 	addi	r7,r2,110
   2178c:	4209883a 	add	r4,r8,r8
   21790:	003edd06 	br	21308 <__alt_data_end+0xfffe8c68>
   21794:	3804d27a 	srli	r2,r7,9
   21798:	00c00104 	movi	r3,4
   2179c:	1880442e 	bgeu	r3,r2,218b0 <_malloc_r+0x620>
   217a0:	00c00504 	movi	r3,20
   217a4:	18808136 	bltu	r3,r2,219ac <_malloc_r+0x71c>
   217a8:	11401704 	addi	r5,r2,92
   217ac:	10c016c4 	addi	r3,r2,91
   217b0:	294b883a 	add	r5,r5,r5
   217b4:	294b883a 	add	r5,r5,r5
   217b8:	294b883a 	add	r5,r5,r5
   217bc:	994b883a 	add	r5,r19,r5
   217c0:	28800017 	ldw	r2,0(r5)
   217c4:	018000b4 	movhi	r6,2
   217c8:	297ffe04 	addi	r5,r5,-8
   217cc:	319cfd04 	addi	r6,r6,29684
   217d0:	28806526 	beq	r5,r2,21968 <_malloc_r+0x6d8>
   217d4:	01bfff04 	movi	r6,-4
   217d8:	10c00117 	ldw	r3,4(r2)
   217dc:	1986703a 	and	r3,r3,r6
   217e0:	38c0022e 	bgeu	r7,r3,217ec <_malloc_r+0x55c>
   217e4:	10800217 	ldw	r2,8(r2)
   217e8:	28bffb1e 	bne	r5,r2,217d8 <__alt_data_end+0xfffe9138>
   217ec:	11400317 	ldw	r5,12(r2)
   217f0:	98c00117 	ldw	r3,4(r19)
   217f4:	81400315 	stw	r5,12(r16)
   217f8:	80800215 	stw	r2,8(r16)
   217fc:	2c000215 	stw	r16,8(r5)
   21800:	14000315 	stw	r16,12(r2)
   21804:	003ef806 	br	213e8 <__alt_data_end+0xfffe8d48>
   21808:	88c00054 	ori	r3,r17,1
   2180c:	80c00115 	stw	r3,4(r16)
   21810:	8463883a 	add	r17,r16,r17
   21814:	34400515 	stw	r17,20(r6)
   21818:	34400415 	stw	r17,16(r6)
   2181c:	10c00054 	ori	r3,r2,1
   21820:	8a000315 	stw	r8,12(r17)
   21824:	8a000215 	stw	r8,8(r17)
   21828:	88c00115 	stw	r3,4(r17)
   2182c:	88a3883a 	add	r17,r17,r2
   21830:	88800015 	stw	r2,0(r17)
   21834:	9009883a 	mov	r4,r18
   21838:	0023ac80 	call	23ac8 <__malloc_unlock>
   2183c:	80800204 	addi	r2,r16,8
   21840:	003f3c06 	br	21534 <__alt_data_end+0xfffe8e94>
   21844:	30c00117 	ldw	r3,4(r6)
   21848:	003ee706 	br	213e8 <__alt_data_end+0xfffe8d48>
   2184c:	5ac00044 	addi	r11,r11,1
   21850:	588000cc 	andi	r2,r11,3
   21854:	31800204 	addi	r6,r6,8
   21858:	103efd1e 	bne	r2,zero,21450 <__alt_data_end+0xfffe8db0>
   2185c:	00002406 	br	218f0 <_malloc_r+0x660>
   21860:	14000317 	ldw	r16,12(r2)
   21864:	143f251e 	bne	r2,r16,214fc <__alt_data_end+0xfffe8e5c>
   21868:	21000084 	addi	r4,r4,2
   2186c:	003ebc06 	br	21360 <__alt_data_end+0xfffe8cc0>
   21870:	8085883a 	add	r2,r16,r2
   21874:	10c00117 	ldw	r3,4(r2)
   21878:	81000317 	ldw	r4,12(r16)
   2187c:	81400217 	ldw	r5,8(r16)
   21880:	18c00054 	ori	r3,r3,1
   21884:	10c00115 	stw	r3,4(r2)
   21888:	29000315 	stw	r4,12(r5)
   2188c:	21400215 	stw	r5,8(r4)
   21890:	9009883a 	mov	r4,r18
   21894:	0023ac80 	call	23ac8 <__malloc_unlock>
   21898:	80800204 	addi	r2,r16,8
   2189c:	003f2506 	br	21534 <__alt_data_end+0xfffe8e94>
   218a0:	12001704 	addi	r8,r2,92
   218a4:	11c016c4 	addi	r7,r2,91
   218a8:	4209883a 	add	r4,r8,r8
   218ac:	003e9606 	br	21308 <__alt_data_end+0xfffe8c68>
   218b0:	3804d1ba 	srli	r2,r7,6
   218b4:	11400e44 	addi	r5,r2,57
   218b8:	10c00e04 	addi	r3,r2,56
   218bc:	294b883a 	add	r5,r5,r5
   218c0:	003fbc06 	br	217b4 <__alt_data_end+0xfffe9114>
   218c4:	84ff5926 	beq	r16,r19,2162c <__alt_data_end+0xfffe8f8c>
   218c8:	008000b4 	movhi	r2,2
   218cc:	109cfd04 	addi	r2,r2,29684
   218d0:	14000217 	ldw	r16,8(r2)
   218d4:	00bfff04 	movi	r2,-4
   218d8:	80c00117 	ldw	r3,4(r16)
   218dc:	1886703a 	and	r3,r3,r2
   218e0:	003f9106 	br	21728 <__alt_data_end+0xfffe9088>
   218e4:	60800217 	ldw	r2,8(r12)
   218e8:	213fffc4 	addi	r4,r4,-1
   218ec:	1300651e 	bne	r2,r12,21a84 <_malloc_r+0x7f4>
   218f0:	208000cc 	andi	r2,r4,3
   218f4:	633ffe04 	addi	r12,r12,-8
   218f8:	103ffa1e 	bne	r2,zero,218e4 <__alt_data_end+0xfffe9244>
   218fc:	98800117 	ldw	r2,4(r19)
   21900:	0146303a 	nor	r3,zero,r5
   21904:	1884703a 	and	r2,r3,r2
   21908:	98800115 	stw	r2,4(r19)
   2190c:	294b883a 	add	r5,r5,r5
   21910:	117f2836 	bltu	r2,r5,215b4 <__alt_data_end+0xfffe8f14>
   21914:	283f2726 	beq	r5,zero,215b4 <__alt_data_end+0xfffe8f14>
   21918:	2886703a 	and	r3,r5,r2
   2191c:	5809883a 	mov	r4,r11
   21920:	183ec31e 	bne	r3,zero,21430 <__alt_data_end+0xfffe8d90>
   21924:	294b883a 	add	r5,r5,r5
   21928:	2886703a 	and	r3,r5,r2
   2192c:	21000104 	addi	r4,r4,4
   21930:	183ffc26 	beq	r3,zero,21924 <__alt_data_end+0xfffe9284>
   21934:	003ebe06 	br	21430 <__alt_data_end+0xfffe8d90>
   21938:	00c05504 	movi	r3,340
   2193c:	18801236 	bltu	r3,r2,21988 <_malloc_r+0x6f8>
   21940:	8804d3fa 	srli	r2,r17,15
   21944:	12001e04 	addi	r8,r2,120
   21948:	11c01dc4 	addi	r7,r2,119
   2194c:	4209883a 	add	r4,r8,r8
   21950:	003e6d06 	br	21308 <__alt_data_end+0xfffe8c68>
   21954:	00c40004 	movi	r3,4096
   21958:	003f4606 	br	21674 <__alt_data_end+0xfffe8fd4>
   2195c:	00800044 	movi	r2,1
   21960:	a0800115 	stw	r2,4(r20)
   21964:	003f7406 	br	21738 <__alt_data_end+0xfffe9098>
   21968:	1805d0ba 	srai	r2,r3,2
   2196c:	01c00044 	movi	r7,1
   21970:	30c00117 	ldw	r3,4(r6)
   21974:	388e983a 	sll	r7,r7,r2
   21978:	2805883a 	mov	r2,r5
   2197c:	38c6b03a 	or	r3,r7,r3
   21980:	30c00115 	stw	r3,4(r6)
   21984:	003f9b06 	br	217f4 <__alt_data_end+0xfffe9154>
   21988:	00c15504 	movi	r3,1364
   2198c:	18801a36 	bltu	r3,r2,219f8 <_malloc_r+0x768>
   21990:	8804d4ba 	srli	r2,r17,18
   21994:	12001f44 	addi	r8,r2,125
   21998:	11c01f04 	addi	r7,r2,124
   2199c:	4209883a 	add	r4,r8,r8
   219a0:	003e5906 	br	21308 <__alt_data_end+0xfffe8c68>
   219a4:	ad400404 	addi	r21,r21,16
   219a8:	003f1706 	br	21608 <__alt_data_end+0xfffe8f68>
   219ac:	00c01504 	movi	r3,84
   219b0:	18802336 	bltu	r3,r2,21a40 <_malloc_r+0x7b0>
   219b4:	3804d33a 	srli	r2,r7,12
   219b8:	11401bc4 	addi	r5,r2,111
   219bc:	10c01b84 	addi	r3,r2,110
   219c0:	294b883a 	add	r5,r5,r5
   219c4:	003f7b06 	br	217b4 <__alt_data_end+0xfffe9114>
   219c8:	9c000217 	ldw	r16,8(r19)
   219cc:	00bfff04 	movi	r2,-4
   219d0:	80c00117 	ldw	r3,4(r16)
   219d4:	1886703a 	and	r3,r3,r2
   219d8:	003f5306 	br	21728 <__alt_data_end+0xfffe9088>
   219dc:	3083ffcc 	andi	r2,r6,4095
   219e0:	103f181e 	bne	r2,zero,21644 <__alt_data_end+0xfffe8fa4>
   219e4:	99000217 	ldw	r4,8(r19)
   219e8:	b545883a 	add	r2,r22,r21
   219ec:	10800054 	ori	r2,r2,1
   219f0:	20800115 	stw	r2,4(r4)
   219f4:	003f3e06 	br	216f0 <__alt_data_end+0xfffe9050>
   219f8:	01003f84 	movi	r4,254
   219fc:	02001fc4 	movi	r8,127
   21a00:	01c01f84 	movi	r7,126
   21a04:	003e4006 	br	21308 <__alt_data_end+0xfffe8c68>
   21a08:	008000f4 	movhi	r2,3
   21a0c:	10a2cb04 	addi	r2,r2,-29908
   21a10:	15000015 	stw	r20,0(r2)
   21a14:	003f1106 	br	2165c <__alt_data_end+0xfffe8fbc>
   21a18:	00800044 	movi	r2,1
   21a1c:	002b883a 	mov	r21,zero
   21a20:	003f1f06 	br	216a0 <__alt_data_end+0xfffe9000>
   21a24:	81400204 	addi	r5,r16,8
   21a28:	9009883a 	mov	r4,r18
   21a2c:	0022d180 	call	22d18 <_free_r>
   21a30:	008000f4 	movhi	r2,3
   21a34:	10a9c904 	addi	r2,r2,-22748
   21a38:	10c00017 	ldw	r3,0(r2)
   21a3c:	003f2c06 	br	216f0 <__alt_data_end+0xfffe9050>
   21a40:	00c05504 	movi	r3,340
   21a44:	18800536 	bltu	r3,r2,21a5c <_malloc_r+0x7cc>
   21a48:	3804d3fa 	srli	r2,r7,15
   21a4c:	11401e04 	addi	r5,r2,120
   21a50:	10c01dc4 	addi	r3,r2,119
   21a54:	294b883a 	add	r5,r5,r5
   21a58:	003f5606 	br	217b4 <__alt_data_end+0xfffe9114>
   21a5c:	00c15504 	movi	r3,1364
   21a60:	18800536 	bltu	r3,r2,21a78 <_malloc_r+0x7e8>
   21a64:	3804d4ba 	srli	r2,r7,18
   21a68:	11401f44 	addi	r5,r2,125
   21a6c:	10c01f04 	addi	r3,r2,124
   21a70:	294b883a 	add	r5,r5,r5
   21a74:	003f4f06 	br	217b4 <__alt_data_end+0xfffe9114>
   21a78:	01403f84 	movi	r5,254
   21a7c:	00c01f84 	movi	r3,126
   21a80:	003f4c06 	br	217b4 <__alt_data_end+0xfffe9114>
   21a84:	98800117 	ldw	r2,4(r19)
   21a88:	003fa006 	br	2190c <__alt_data_end+0xfffe926c>
   21a8c:	8808d0fa 	srli	r4,r17,3
   21a90:	20800044 	addi	r2,r4,1
   21a94:	1085883a 	add	r2,r2,r2
   21a98:	003e9006 	br	214dc <__alt_data_end+0xfffe8e3c>

00021a9c <memchr>:
   21a9c:	208000cc 	andi	r2,r4,3
   21aa0:	280f883a 	mov	r7,r5
   21aa4:	10003426 	beq	r2,zero,21b78 <memchr+0xdc>
   21aa8:	30bfffc4 	addi	r2,r6,-1
   21aac:	30001a26 	beq	r6,zero,21b18 <memchr+0x7c>
   21ab0:	20c00003 	ldbu	r3,0(r4)
   21ab4:	29803fcc 	andi	r6,r5,255
   21ab8:	30c0051e 	bne	r6,r3,21ad0 <memchr+0x34>
   21abc:	00001806 	br	21b20 <memchr+0x84>
   21ac0:	10001526 	beq	r2,zero,21b18 <memchr+0x7c>
   21ac4:	20c00003 	ldbu	r3,0(r4)
   21ac8:	10bfffc4 	addi	r2,r2,-1
   21acc:	30c01426 	beq	r6,r3,21b20 <memchr+0x84>
   21ad0:	21000044 	addi	r4,r4,1
   21ad4:	20c000cc 	andi	r3,r4,3
   21ad8:	183ff91e 	bne	r3,zero,21ac0 <__alt_data_end+0xfffe9420>
   21adc:	020000c4 	movi	r8,3
   21ae0:	40801136 	bltu	r8,r2,21b28 <memchr+0x8c>
   21ae4:	10000c26 	beq	r2,zero,21b18 <memchr+0x7c>
   21ae8:	20c00003 	ldbu	r3,0(r4)
   21aec:	29403fcc 	andi	r5,r5,255
   21af0:	28c00b26 	beq	r5,r3,21b20 <memchr+0x84>
   21af4:	20c00044 	addi	r3,r4,1
   21af8:	39803fcc 	andi	r6,r7,255
   21afc:	2089883a 	add	r4,r4,r2
   21b00:	00000306 	br	21b10 <memchr+0x74>
   21b04:	18c00044 	addi	r3,r3,1
   21b08:	197fffc3 	ldbu	r5,-1(r3)
   21b0c:	31400526 	beq	r6,r5,21b24 <memchr+0x88>
   21b10:	1805883a 	mov	r2,r3
   21b14:	20fffb1e 	bne	r4,r3,21b04 <__alt_data_end+0xfffe9464>
   21b18:	0005883a 	mov	r2,zero
   21b1c:	f800283a 	ret
   21b20:	2005883a 	mov	r2,r4
   21b24:	f800283a 	ret
   21b28:	28c03fcc 	andi	r3,r5,255
   21b2c:	1812923a 	slli	r9,r3,8
   21b30:	02ffbff4 	movhi	r11,65279
   21b34:	02a02074 	movhi	r10,32897
   21b38:	48d2b03a 	or	r9,r9,r3
   21b3c:	4806943a 	slli	r3,r9,16
   21b40:	5affbfc4 	addi	r11,r11,-257
   21b44:	52a02004 	addi	r10,r10,-32640
   21b48:	48d2b03a 	or	r9,r9,r3
   21b4c:	20c00017 	ldw	r3,0(r4)
   21b50:	48c6f03a 	xor	r3,r9,r3
   21b54:	1acd883a 	add	r6,r3,r11
   21b58:	00c6303a 	nor	r3,zero,r3
   21b5c:	30c6703a 	and	r3,r6,r3
   21b60:	1a86703a 	and	r3,r3,r10
   21b64:	183fe01e 	bne	r3,zero,21ae8 <__alt_data_end+0xfffe9448>
   21b68:	10bfff04 	addi	r2,r2,-4
   21b6c:	21000104 	addi	r4,r4,4
   21b70:	40bff636 	bltu	r8,r2,21b4c <__alt_data_end+0xfffe94ac>
   21b74:	003fdb06 	br	21ae4 <__alt_data_end+0xfffe9444>
   21b78:	3005883a 	mov	r2,r6
   21b7c:	003fd706 	br	21adc <__alt_data_end+0xfffe943c>

00021b80 <memcpy>:
   21b80:	defffd04 	addi	sp,sp,-12
   21b84:	dfc00215 	stw	ra,8(sp)
   21b88:	dc400115 	stw	r17,4(sp)
   21b8c:	dc000015 	stw	r16,0(sp)
   21b90:	00c003c4 	movi	r3,15
   21b94:	2005883a 	mov	r2,r4
   21b98:	1980452e 	bgeu	r3,r6,21cb0 <memcpy+0x130>
   21b9c:	2906b03a 	or	r3,r5,r4
   21ba0:	18c000cc 	andi	r3,r3,3
   21ba4:	1800441e 	bne	r3,zero,21cb8 <memcpy+0x138>
   21ba8:	347ffc04 	addi	r17,r6,-16
   21bac:	8822d13a 	srli	r17,r17,4
   21bb0:	28c00104 	addi	r3,r5,4
   21bb4:	23400104 	addi	r13,r4,4
   21bb8:	8820913a 	slli	r16,r17,4
   21bbc:	2b000204 	addi	r12,r5,8
   21bc0:	22c00204 	addi	r11,r4,8
   21bc4:	84000504 	addi	r16,r16,20
   21bc8:	2a800304 	addi	r10,r5,12
   21bcc:	22400304 	addi	r9,r4,12
   21bd0:	2c21883a 	add	r16,r5,r16
   21bd4:	2811883a 	mov	r8,r5
   21bd8:	200f883a 	mov	r7,r4
   21bdc:	41000017 	ldw	r4,0(r8)
   21be0:	1fc00017 	ldw	ra,0(r3)
   21be4:	63c00017 	ldw	r15,0(r12)
   21be8:	39000015 	stw	r4,0(r7)
   21bec:	53800017 	ldw	r14,0(r10)
   21bf0:	6fc00015 	stw	ra,0(r13)
   21bf4:	5bc00015 	stw	r15,0(r11)
   21bf8:	4b800015 	stw	r14,0(r9)
   21bfc:	18c00404 	addi	r3,r3,16
   21c00:	39c00404 	addi	r7,r7,16
   21c04:	42000404 	addi	r8,r8,16
   21c08:	6b400404 	addi	r13,r13,16
   21c0c:	63000404 	addi	r12,r12,16
   21c10:	5ac00404 	addi	r11,r11,16
   21c14:	52800404 	addi	r10,r10,16
   21c18:	4a400404 	addi	r9,r9,16
   21c1c:	1c3fef1e 	bne	r3,r16,21bdc <__alt_data_end+0xfffe953c>
   21c20:	89c00044 	addi	r7,r17,1
   21c24:	380e913a 	slli	r7,r7,4
   21c28:	310003cc 	andi	r4,r6,15
   21c2c:	02c000c4 	movi	r11,3
   21c30:	11c7883a 	add	r3,r2,r7
   21c34:	29cb883a 	add	r5,r5,r7
   21c38:	5900212e 	bgeu	r11,r4,21cc0 <memcpy+0x140>
   21c3c:	1813883a 	mov	r9,r3
   21c40:	2811883a 	mov	r8,r5
   21c44:	200f883a 	mov	r7,r4
   21c48:	42800017 	ldw	r10,0(r8)
   21c4c:	4a400104 	addi	r9,r9,4
   21c50:	39ffff04 	addi	r7,r7,-4
   21c54:	4abfff15 	stw	r10,-4(r9)
   21c58:	42000104 	addi	r8,r8,4
   21c5c:	59fffa36 	bltu	r11,r7,21c48 <__alt_data_end+0xfffe95a8>
   21c60:	213fff04 	addi	r4,r4,-4
   21c64:	2008d0ba 	srli	r4,r4,2
   21c68:	318000cc 	andi	r6,r6,3
   21c6c:	21000044 	addi	r4,r4,1
   21c70:	2109883a 	add	r4,r4,r4
   21c74:	2109883a 	add	r4,r4,r4
   21c78:	1907883a 	add	r3,r3,r4
   21c7c:	290b883a 	add	r5,r5,r4
   21c80:	30000626 	beq	r6,zero,21c9c <memcpy+0x11c>
   21c84:	198d883a 	add	r6,r3,r6
   21c88:	29c00003 	ldbu	r7,0(r5)
   21c8c:	18c00044 	addi	r3,r3,1
   21c90:	29400044 	addi	r5,r5,1
   21c94:	19ffffc5 	stb	r7,-1(r3)
   21c98:	19bffb1e 	bne	r3,r6,21c88 <__alt_data_end+0xfffe95e8>
   21c9c:	dfc00217 	ldw	ra,8(sp)
   21ca0:	dc400117 	ldw	r17,4(sp)
   21ca4:	dc000017 	ldw	r16,0(sp)
   21ca8:	dec00304 	addi	sp,sp,12
   21cac:	f800283a 	ret
   21cb0:	2007883a 	mov	r3,r4
   21cb4:	003ff206 	br	21c80 <__alt_data_end+0xfffe95e0>
   21cb8:	2007883a 	mov	r3,r4
   21cbc:	003ff106 	br	21c84 <__alt_data_end+0xfffe95e4>
   21cc0:	200d883a 	mov	r6,r4
   21cc4:	003fee06 	br	21c80 <__alt_data_end+0xfffe95e0>

00021cc8 <memmove>:
   21cc8:	2005883a 	mov	r2,r4
   21ccc:	29000b2e 	bgeu	r5,r4,21cfc <memmove+0x34>
   21cd0:	298f883a 	add	r7,r5,r6
   21cd4:	21c0092e 	bgeu	r4,r7,21cfc <memmove+0x34>
   21cd8:	2187883a 	add	r3,r4,r6
   21cdc:	198bc83a 	sub	r5,r3,r6
   21ce0:	30004826 	beq	r6,zero,21e04 <memmove+0x13c>
   21ce4:	39ffffc4 	addi	r7,r7,-1
   21ce8:	39000003 	ldbu	r4,0(r7)
   21cec:	18ffffc4 	addi	r3,r3,-1
   21cf0:	19000005 	stb	r4,0(r3)
   21cf4:	28fffb1e 	bne	r5,r3,21ce4 <__alt_data_end+0xfffe9644>
   21cf8:	f800283a 	ret
   21cfc:	00c003c4 	movi	r3,15
   21d00:	1980412e 	bgeu	r3,r6,21e08 <memmove+0x140>
   21d04:	2886b03a 	or	r3,r5,r2
   21d08:	18c000cc 	andi	r3,r3,3
   21d0c:	1800401e 	bne	r3,zero,21e10 <memmove+0x148>
   21d10:	33fffc04 	addi	r15,r6,-16
   21d14:	781ed13a 	srli	r15,r15,4
   21d18:	28c00104 	addi	r3,r5,4
   21d1c:	13400104 	addi	r13,r2,4
   21d20:	781c913a 	slli	r14,r15,4
   21d24:	2b000204 	addi	r12,r5,8
   21d28:	12c00204 	addi	r11,r2,8
   21d2c:	73800504 	addi	r14,r14,20
   21d30:	2a800304 	addi	r10,r5,12
   21d34:	12400304 	addi	r9,r2,12
   21d38:	2b9d883a 	add	r14,r5,r14
   21d3c:	2811883a 	mov	r8,r5
   21d40:	100f883a 	mov	r7,r2
   21d44:	41000017 	ldw	r4,0(r8)
   21d48:	39c00404 	addi	r7,r7,16
   21d4c:	18c00404 	addi	r3,r3,16
   21d50:	393ffc15 	stw	r4,-16(r7)
   21d54:	193ffc17 	ldw	r4,-16(r3)
   21d58:	6b400404 	addi	r13,r13,16
   21d5c:	5ac00404 	addi	r11,r11,16
   21d60:	693ffc15 	stw	r4,-16(r13)
   21d64:	61000017 	ldw	r4,0(r12)
   21d68:	4a400404 	addi	r9,r9,16
   21d6c:	42000404 	addi	r8,r8,16
   21d70:	593ffc15 	stw	r4,-16(r11)
   21d74:	51000017 	ldw	r4,0(r10)
   21d78:	63000404 	addi	r12,r12,16
   21d7c:	52800404 	addi	r10,r10,16
   21d80:	493ffc15 	stw	r4,-16(r9)
   21d84:	1bbfef1e 	bne	r3,r14,21d44 <__alt_data_end+0xfffe96a4>
   21d88:	79000044 	addi	r4,r15,1
   21d8c:	2008913a 	slli	r4,r4,4
   21d90:	328003cc 	andi	r10,r6,15
   21d94:	02c000c4 	movi	r11,3
   21d98:	1107883a 	add	r3,r2,r4
   21d9c:	290b883a 	add	r5,r5,r4
   21da0:	5a801e2e 	bgeu	r11,r10,21e1c <memmove+0x154>
   21da4:	1813883a 	mov	r9,r3
   21da8:	2811883a 	mov	r8,r5
   21dac:	500f883a 	mov	r7,r10
   21db0:	41000017 	ldw	r4,0(r8)
   21db4:	4a400104 	addi	r9,r9,4
   21db8:	39ffff04 	addi	r7,r7,-4
   21dbc:	493fff15 	stw	r4,-4(r9)
   21dc0:	42000104 	addi	r8,r8,4
   21dc4:	59fffa36 	bltu	r11,r7,21db0 <__alt_data_end+0xfffe9710>
   21dc8:	513fff04 	addi	r4,r10,-4
   21dcc:	2008d0ba 	srli	r4,r4,2
   21dd0:	318000cc 	andi	r6,r6,3
   21dd4:	21000044 	addi	r4,r4,1
   21dd8:	2109883a 	add	r4,r4,r4
   21ddc:	2109883a 	add	r4,r4,r4
   21de0:	1907883a 	add	r3,r3,r4
   21de4:	290b883a 	add	r5,r5,r4
   21de8:	30000b26 	beq	r6,zero,21e18 <memmove+0x150>
   21dec:	198d883a 	add	r6,r3,r6
   21df0:	29c00003 	ldbu	r7,0(r5)
   21df4:	18c00044 	addi	r3,r3,1
   21df8:	29400044 	addi	r5,r5,1
   21dfc:	19ffffc5 	stb	r7,-1(r3)
   21e00:	19bffb1e 	bne	r3,r6,21df0 <__alt_data_end+0xfffe9750>
   21e04:	f800283a 	ret
   21e08:	1007883a 	mov	r3,r2
   21e0c:	003ff606 	br	21de8 <__alt_data_end+0xfffe9748>
   21e10:	1007883a 	mov	r3,r2
   21e14:	003ff506 	br	21dec <__alt_data_end+0xfffe974c>
   21e18:	f800283a 	ret
   21e1c:	500d883a 	mov	r6,r10
   21e20:	003ff106 	br	21de8 <__alt_data_end+0xfffe9748>

00021e24 <memset>:
   21e24:	20c000cc 	andi	r3,r4,3
   21e28:	2005883a 	mov	r2,r4
   21e2c:	18004426 	beq	r3,zero,21f40 <memset+0x11c>
   21e30:	31ffffc4 	addi	r7,r6,-1
   21e34:	30004026 	beq	r6,zero,21f38 <memset+0x114>
   21e38:	2813883a 	mov	r9,r5
   21e3c:	200d883a 	mov	r6,r4
   21e40:	2007883a 	mov	r3,r4
   21e44:	00000406 	br	21e58 <memset+0x34>
   21e48:	3a3fffc4 	addi	r8,r7,-1
   21e4c:	31800044 	addi	r6,r6,1
   21e50:	38003926 	beq	r7,zero,21f38 <memset+0x114>
   21e54:	400f883a 	mov	r7,r8
   21e58:	18c00044 	addi	r3,r3,1
   21e5c:	32400005 	stb	r9,0(r6)
   21e60:	1a0000cc 	andi	r8,r3,3
   21e64:	403ff81e 	bne	r8,zero,21e48 <__alt_data_end+0xfffe97a8>
   21e68:	010000c4 	movi	r4,3
   21e6c:	21c02d2e 	bgeu	r4,r7,21f24 <memset+0x100>
   21e70:	29003fcc 	andi	r4,r5,255
   21e74:	200c923a 	slli	r6,r4,8
   21e78:	3108b03a 	or	r4,r6,r4
   21e7c:	200c943a 	slli	r6,r4,16
   21e80:	218cb03a 	or	r6,r4,r6
   21e84:	010003c4 	movi	r4,15
   21e88:	21c0182e 	bgeu	r4,r7,21eec <memset+0xc8>
   21e8c:	3b3ffc04 	addi	r12,r7,-16
   21e90:	6018d13a 	srli	r12,r12,4
   21e94:	1a000104 	addi	r8,r3,4
   21e98:	1ac00204 	addi	r11,r3,8
   21e9c:	6008913a 	slli	r4,r12,4
   21ea0:	1a800304 	addi	r10,r3,12
   21ea4:	1813883a 	mov	r9,r3
   21ea8:	21000504 	addi	r4,r4,20
   21eac:	1909883a 	add	r4,r3,r4
   21eb0:	49800015 	stw	r6,0(r9)
   21eb4:	41800015 	stw	r6,0(r8)
   21eb8:	59800015 	stw	r6,0(r11)
   21ebc:	51800015 	stw	r6,0(r10)
   21ec0:	42000404 	addi	r8,r8,16
   21ec4:	4a400404 	addi	r9,r9,16
   21ec8:	5ac00404 	addi	r11,r11,16
   21ecc:	52800404 	addi	r10,r10,16
   21ed0:	413ff71e 	bne	r8,r4,21eb0 <__alt_data_end+0xfffe9810>
   21ed4:	63000044 	addi	r12,r12,1
   21ed8:	6018913a 	slli	r12,r12,4
   21edc:	39c003cc 	andi	r7,r7,15
   21ee0:	010000c4 	movi	r4,3
   21ee4:	1b07883a 	add	r3,r3,r12
   21ee8:	21c00e2e 	bgeu	r4,r7,21f24 <memset+0x100>
   21eec:	1813883a 	mov	r9,r3
   21ef0:	3811883a 	mov	r8,r7
   21ef4:	010000c4 	movi	r4,3
   21ef8:	49800015 	stw	r6,0(r9)
   21efc:	423fff04 	addi	r8,r8,-4
   21f00:	4a400104 	addi	r9,r9,4
   21f04:	223ffc36 	bltu	r4,r8,21ef8 <__alt_data_end+0xfffe9858>
   21f08:	393fff04 	addi	r4,r7,-4
   21f0c:	2008d0ba 	srli	r4,r4,2
   21f10:	39c000cc 	andi	r7,r7,3
   21f14:	21000044 	addi	r4,r4,1
   21f18:	2109883a 	add	r4,r4,r4
   21f1c:	2109883a 	add	r4,r4,r4
   21f20:	1907883a 	add	r3,r3,r4
   21f24:	38000526 	beq	r7,zero,21f3c <memset+0x118>
   21f28:	19cf883a 	add	r7,r3,r7
   21f2c:	19400005 	stb	r5,0(r3)
   21f30:	18c00044 	addi	r3,r3,1
   21f34:	38fffd1e 	bne	r7,r3,21f2c <__alt_data_end+0xfffe988c>
   21f38:	f800283a 	ret
   21f3c:	f800283a 	ret
   21f40:	2007883a 	mov	r3,r4
   21f44:	300f883a 	mov	r7,r6
   21f48:	003fc706 	br	21e68 <__alt_data_end+0xfffe97c8>

00021f4c <_realloc_r>:
   21f4c:	defff604 	addi	sp,sp,-40
   21f50:	dc800215 	stw	r18,8(sp)
   21f54:	dfc00915 	stw	ra,36(sp)
   21f58:	df000815 	stw	fp,32(sp)
   21f5c:	ddc00715 	stw	r23,28(sp)
   21f60:	dd800615 	stw	r22,24(sp)
   21f64:	dd400515 	stw	r21,20(sp)
   21f68:	dd000415 	stw	r20,16(sp)
   21f6c:	dcc00315 	stw	r19,12(sp)
   21f70:	dc400115 	stw	r17,4(sp)
   21f74:	dc000015 	stw	r16,0(sp)
   21f78:	3025883a 	mov	r18,r6
   21f7c:	2800b726 	beq	r5,zero,2225c <_realloc_r+0x310>
   21f80:	282b883a 	mov	r21,r5
   21f84:	2029883a 	mov	r20,r4
   21f88:	0023aa40 	call	23aa4 <__malloc_lock>
   21f8c:	a8bfff17 	ldw	r2,-4(r21)
   21f90:	043fff04 	movi	r16,-4
   21f94:	90c002c4 	addi	r3,r18,11
   21f98:	01000584 	movi	r4,22
   21f9c:	acfffe04 	addi	r19,r21,-8
   21fa0:	1420703a 	and	r16,r2,r16
   21fa4:	20c0332e 	bgeu	r4,r3,22074 <_realloc_r+0x128>
   21fa8:	047ffe04 	movi	r17,-8
   21fac:	1c62703a 	and	r17,r3,r17
   21fb0:	8807883a 	mov	r3,r17
   21fb4:	88005816 	blt	r17,zero,22118 <_realloc_r+0x1cc>
   21fb8:	8c805736 	bltu	r17,r18,22118 <_realloc_r+0x1cc>
   21fbc:	80c0300e 	bge	r16,r3,22080 <_realloc_r+0x134>
   21fc0:	070000b4 	movhi	fp,2
   21fc4:	e71cfd04 	addi	fp,fp,29684
   21fc8:	e1c00217 	ldw	r7,8(fp)
   21fcc:	9c09883a 	add	r4,r19,r16
   21fd0:	22000117 	ldw	r8,4(r4)
   21fd4:	21c06326 	beq	r4,r7,22164 <_realloc_r+0x218>
   21fd8:	017fff84 	movi	r5,-2
   21fdc:	414a703a 	and	r5,r8,r5
   21fe0:	214b883a 	add	r5,r4,r5
   21fe4:	29800117 	ldw	r6,4(r5)
   21fe8:	3180004c 	andi	r6,r6,1
   21fec:	30003f26 	beq	r6,zero,220ec <_realloc_r+0x1a0>
   21ff0:	1080004c 	andi	r2,r2,1
   21ff4:	10008326 	beq	r2,zero,22204 <_realloc_r+0x2b8>
   21ff8:	900b883a 	mov	r5,r18
   21ffc:	a009883a 	mov	r4,r20
   22000:	00212900 	call	21290 <_malloc_r>
   22004:	1025883a 	mov	r18,r2
   22008:	10011e26 	beq	r2,zero,22484 <_realloc_r+0x538>
   2200c:	a93fff17 	ldw	r4,-4(r21)
   22010:	10fffe04 	addi	r3,r2,-8
   22014:	00bfff84 	movi	r2,-2
   22018:	2084703a 	and	r2,r4,r2
   2201c:	9885883a 	add	r2,r19,r2
   22020:	1880ee26 	beq	r3,r2,223dc <_realloc_r+0x490>
   22024:	81bfff04 	addi	r6,r16,-4
   22028:	00800904 	movi	r2,36
   2202c:	1180b836 	bltu	r2,r6,22310 <_realloc_r+0x3c4>
   22030:	00c004c4 	movi	r3,19
   22034:	19809636 	bltu	r3,r6,22290 <_realloc_r+0x344>
   22038:	9005883a 	mov	r2,r18
   2203c:	a807883a 	mov	r3,r21
   22040:	19000017 	ldw	r4,0(r3)
   22044:	11000015 	stw	r4,0(r2)
   22048:	19000117 	ldw	r4,4(r3)
   2204c:	11000115 	stw	r4,4(r2)
   22050:	18c00217 	ldw	r3,8(r3)
   22054:	10c00215 	stw	r3,8(r2)
   22058:	a80b883a 	mov	r5,r21
   2205c:	a009883a 	mov	r4,r20
   22060:	0022d180 	call	22d18 <_free_r>
   22064:	a009883a 	mov	r4,r20
   22068:	0023ac80 	call	23ac8 <__malloc_unlock>
   2206c:	9005883a 	mov	r2,r18
   22070:	00001206 	br	220bc <_realloc_r+0x170>
   22074:	00c00404 	movi	r3,16
   22078:	1823883a 	mov	r17,r3
   2207c:	003fce06 	br	21fb8 <__alt_data_end+0xfffe9918>
   22080:	a825883a 	mov	r18,r21
   22084:	8445c83a 	sub	r2,r16,r17
   22088:	00c003c4 	movi	r3,15
   2208c:	18802636 	bltu	r3,r2,22128 <_realloc_r+0x1dc>
   22090:	99800117 	ldw	r6,4(r19)
   22094:	9c07883a 	add	r3,r19,r16
   22098:	3180004c 	andi	r6,r6,1
   2209c:	3420b03a 	or	r16,r6,r16
   220a0:	9c000115 	stw	r16,4(r19)
   220a4:	18800117 	ldw	r2,4(r3)
   220a8:	10800054 	ori	r2,r2,1
   220ac:	18800115 	stw	r2,4(r3)
   220b0:	a009883a 	mov	r4,r20
   220b4:	0023ac80 	call	23ac8 <__malloc_unlock>
   220b8:	9005883a 	mov	r2,r18
   220bc:	dfc00917 	ldw	ra,36(sp)
   220c0:	df000817 	ldw	fp,32(sp)
   220c4:	ddc00717 	ldw	r23,28(sp)
   220c8:	dd800617 	ldw	r22,24(sp)
   220cc:	dd400517 	ldw	r21,20(sp)
   220d0:	dd000417 	ldw	r20,16(sp)
   220d4:	dcc00317 	ldw	r19,12(sp)
   220d8:	dc800217 	ldw	r18,8(sp)
   220dc:	dc400117 	ldw	r17,4(sp)
   220e0:	dc000017 	ldw	r16,0(sp)
   220e4:	dec00a04 	addi	sp,sp,40
   220e8:	f800283a 	ret
   220ec:	017fff04 	movi	r5,-4
   220f0:	414a703a 	and	r5,r8,r5
   220f4:	814d883a 	add	r6,r16,r5
   220f8:	30c01f16 	blt	r6,r3,22178 <_realloc_r+0x22c>
   220fc:	20800317 	ldw	r2,12(r4)
   22100:	20c00217 	ldw	r3,8(r4)
   22104:	a825883a 	mov	r18,r21
   22108:	3021883a 	mov	r16,r6
   2210c:	18800315 	stw	r2,12(r3)
   22110:	10c00215 	stw	r3,8(r2)
   22114:	003fdb06 	br	22084 <__alt_data_end+0xfffe99e4>
   22118:	00800304 	movi	r2,12
   2211c:	a0800015 	stw	r2,0(r20)
   22120:	0005883a 	mov	r2,zero
   22124:	003fe506 	br	220bc <__alt_data_end+0xfffe9a1c>
   22128:	98c00117 	ldw	r3,4(r19)
   2212c:	9c4b883a 	add	r5,r19,r17
   22130:	11000054 	ori	r4,r2,1
   22134:	18c0004c 	andi	r3,r3,1
   22138:	1c62b03a 	or	r17,r3,r17
   2213c:	9c400115 	stw	r17,4(r19)
   22140:	29000115 	stw	r4,4(r5)
   22144:	2885883a 	add	r2,r5,r2
   22148:	10c00117 	ldw	r3,4(r2)
   2214c:	29400204 	addi	r5,r5,8
   22150:	a009883a 	mov	r4,r20
   22154:	18c00054 	ori	r3,r3,1
   22158:	10c00115 	stw	r3,4(r2)
   2215c:	0022d180 	call	22d18 <_free_r>
   22160:	003fd306 	br	220b0 <__alt_data_end+0xfffe9a10>
   22164:	017fff04 	movi	r5,-4
   22168:	414a703a 	and	r5,r8,r5
   2216c:	89800404 	addi	r6,r17,16
   22170:	8151883a 	add	r8,r16,r5
   22174:	4180590e 	bge	r8,r6,222dc <_realloc_r+0x390>
   22178:	1080004c 	andi	r2,r2,1
   2217c:	103f9e1e 	bne	r2,zero,21ff8 <__alt_data_end+0xfffe9958>
   22180:	adbffe17 	ldw	r22,-8(r21)
   22184:	00bfff04 	movi	r2,-4
   22188:	9dadc83a 	sub	r22,r19,r22
   2218c:	b1800117 	ldw	r6,4(r22)
   22190:	3084703a 	and	r2,r6,r2
   22194:	20002026 	beq	r4,zero,22218 <_realloc_r+0x2cc>
   22198:	80af883a 	add	r23,r16,r2
   2219c:	b96f883a 	add	r23,r23,r5
   221a0:	21c05f26 	beq	r4,r7,22320 <_realloc_r+0x3d4>
   221a4:	b8c01c16 	blt	r23,r3,22218 <_realloc_r+0x2cc>
   221a8:	20800317 	ldw	r2,12(r4)
   221ac:	20c00217 	ldw	r3,8(r4)
   221b0:	81bfff04 	addi	r6,r16,-4
   221b4:	01000904 	movi	r4,36
   221b8:	18800315 	stw	r2,12(r3)
   221bc:	10c00215 	stw	r3,8(r2)
   221c0:	b0c00217 	ldw	r3,8(r22)
   221c4:	b0800317 	ldw	r2,12(r22)
   221c8:	b4800204 	addi	r18,r22,8
   221cc:	18800315 	stw	r2,12(r3)
   221d0:	10c00215 	stw	r3,8(r2)
   221d4:	21801b36 	bltu	r4,r6,22244 <_realloc_r+0x2f8>
   221d8:	008004c4 	movi	r2,19
   221dc:	1180352e 	bgeu	r2,r6,222b4 <_realloc_r+0x368>
   221e0:	a8800017 	ldw	r2,0(r21)
   221e4:	b0800215 	stw	r2,8(r22)
   221e8:	a8800117 	ldw	r2,4(r21)
   221ec:	b0800315 	stw	r2,12(r22)
   221f0:	008006c4 	movi	r2,27
   221f4:	11807f36 	bltu	r2,r6,223f4 <_realloc_r+0x4a8>
   221f8:	b0800404 	addi	r2,r22,16
   221fc:	ad400204 	addi	r21,r21,8
   22200:	00002d06 	br	222b8 <_realloc_r+0x36c>
   22204:	adbffe17 	ldw	r22,-8(r21)
   22208:	00bfff04 	movi	r2,-4
   2220c:	9dadc83a 	sub	r22,r19,r22
   22210:	b1000117 	ldw	r4,4(r22)
   22214:	2084703a 	and	r2,r4,r2
   22218:	b03f7726 	beq	r22,zero,21ff8 <__alt_data_end+0xfffe9958>
   2221c:	80af883a 	add	r23,r16,r2
   22220:	b8ff7516 	blt	r23,r3,21ff8 <__alt_data_end+0xfffe9958>
   22224:	b0800317 	ldw	r2,12(r22)
   22228:	b0c00217 	ldw	r3,8(r22)
   2222c:	81bfff04 	addi	r6,r16,-4
   22230:	01000904 	movi	r4,36
   22234:	18800315 	stw	r2,12(r3)
   22238:	10c00215 	stw	r3,8(r2)
   2223c:	b4800204 	addi	r18,r22,8
   22240:	21bfe52e 	bgeu	r4,r6,221d8 <__alt_data_end+0xfffe9b38>
   22244:	a80b883a 	mov	r5,r21
   22248:	9009883a 	mov	r4,r18
   2224c:	0021cc80 	call	21cc8 <memmove>
   22250:	b821883a 	mov	r16,r23
   22254:	b027883a 	mov	r19,r22
   22258:	003f8a06 	br	22084 <__alt_data_end+0xfffe99e4>
   2225c:	300b883a 	mov	r5,r6
   22260:	dfc00917 	ldw	ra,36(sp)
   22264:	df000817 	ldw	fp,32(sp)
   22268:	ddc00717 	ldw	r23,28(sp)
   2226c:	dd800617 	ldw	r22,24(sp)
   22270:	dd400517 	ldw	r21,20(sp)
   22274:	dd000417 	ldw	r20,16(sp)
   22278:	dcc00317 	ldw	r19,12(sp)
   2227c:	dc800217 	ldw	r18,8(sp)
   22280:	dc400117 	ldw	r17,4(sp)
   22284:	dc000017 	ldw	r16,0(sp)
   22288:	dec00a04 	addi	sp,sp,40
   2228c:	00212901 	jmpi	21290 <_malloc_r>
   22290:	a8c00017 	ldw	r3,0(r21)
   22294:	90c00015 	stw	r3,0(r18)
   22298:	a8c00117 	ldw	r3,4(r21)
   2229c:	90c00115 	stw	r3,4(r18)
   222a0:	00c006c4 	movi	r3,27
   222a4:	19804536 	bltu	r3,r6,223bc <_realloc_r+0x470>
   222a8:	90800204 	addi	r2,r18,8
   222ac:	a8c00204 	addi	r3,r21,8
   222b0:	003f6306 	br	22040 <__alt_data_end+0xfffe99a0>
   222b4:	9005883a 	mov	r2,r18
   222b8:	a8c00017 	ldw	r3,0(r21)
   222bc:	b821883a 	mov	r16,r23
   222c0:	b027883a 	mov	r19,r22
   222c4:	10c00015 	stw	r3,0(r2)
   222c8:	a8c00117 	ldw	r3,4(r21)
   222cc:	10c00115 	stw	r3,4(r2)
   222d0:	a8c00217 	ldw	r3,8(r21)
   222d4:	10c00215 	stw	r3,8(r2)
   222d8:	003f6a06 	br	22084 <__alt_data_end+0xfffe99e4>
   222dc:	9c67883a 	add	r19,r19,r17
   222e0:	4445c83a 	sub	r2,r8,r17
   222e4:	e4c00215 	stw	r19,8(fp)
   222e8:	10800054 	ori	r2,r2,1
   222ec:	98800115 	stw	r2,4(r19)
   222f0:	a8bfff17 	ldw	r2,-4(r21)
   222f4:	a009883a 	mov	r4,r20
   222f8:	1080004c 	andi	r2,r2,1
   222fc:	1462b03a 	or	r17,r2,r17
   22300:	ac7fff15 	stw	r17,-4(r21)
   22304:	0023ac80 	call	23ac8 <__malloc_unlock>
   22308:	a805883a 	mov	r2,r21
   2230c:	003f6b06 	br	220bc <__alt_data_end+0xfffe9a1c>
   22310:	a80b883a 	mov	r5,r21
   22314:	9009883a 	mov	r4,r18
   22318:	0021cc80 	call	21cc8 <memmove>
   2231c:	003f4e06 	br	22058 <__alt_data_end+0xfffe99b8>
   22320:	89000404 	addi	r4,r17,16
   22324:	b93fbc16 	blt	r23,r4,22218 <__alt_data_end+0xfffe9b78>
   22328:	b0800317 	ldw	r2,12(r22)
   2232c:	b0c00217 	ldw	r3,8(r22)
   22330:	81bfff04 	addi	r6,r16,-4
   22334:	01000904 	movi	r4,36
   22338:	18800315 	stw	r2,12(r3)
   2233c:	10c00215 	stw	r3,8(r2)
   22340:	b4800204 	addi	r18,r22,8
   22344:	21804336 	bltu	r4,r6,22454 <_realloc_r+0x508>
   22348:	008004c4 	movi	r2,19
   2234c:	11803f2e 	bgeu	r2,r6,2244c <_realloc_r+0x500>
   22350:	a8800017 	ldw	r2,0(r21)
   22354:	b0800215 	stw	r2,8(r22)
   22358:	a8800117 	ldw	r2,4(r21)
   2235c:	b0800315 	stw	r2,12(r22)
   22360:	008006c4 	movi	r2,27
   22364:	11803f36 	bltu	r2,r6,22464 <_realloc_r+0x518>
   22368:	b0800404 	addi	r2,r22,16
   2236c:	ad400204 	addi	r21,r21,8
   22370:	a8c00017 	ldw	r3,0(r21)
   22374:	10c00015 	stw	r3,0(r2)
   22378:	a8c00117 	ldw	r3,4(r21)
   2237c:	10c00115 	stw	r3,4(r2)
   22380:	a8c00217 	ldw	r3,8(r21)
   22384:	10c00215 	stw	r3,8(r2)
   22388:	b447883a 	add	r3,r22,r17
   2238c:	bc45c83a 	sub	r2,r23,r17
   22390:	e0c00215 	stw	r3,8(fp)
   22394:	10800054 	ori	r2,r2,1
   22398:	18800115 	stw	r2,4(r3)
   2239c:	b0800117 	ldw	r2,4(r22)
   223a0:	a009883a 	mov	r4,r20
   223a4:	1080004c 	andi	r2,r2,1
   223a8:	1462b03a 	or	r17,r2,r17
   223ac:	b4400115 	stw	r17,4(r22)
   223b0:	0023ac80 	call	23ac8 <__malloc_unlock>
   223b4:	9005883a 	mov	r2,r18
   223b8:	003f4006 	br	220bc <__alt_data_end+0xfffe9a1c>
   223bc:	a8c00217 	ldw	r3,8(r21)
   223c0:	90c00215 	stw	r3,8(r18)
   223c4:	a8c00317 	ldw	r3,12(r21)
   223c8:	90c00315 	stw	r3,12(r18)
   223cc:	30801126 	beq	r6,r2,22414 <_realloc_r+0x4c8>
   223d0:	90800404 	addi	r2,r18,16
   223d4:	a8c00404 	addi	r3,r21,16
   223d8:	003f1906 	br	22040 <__alt_data_end+0xfffe99a0>
   223dc:	90ffff17 	ldw	r3,-4(r18)
   223e0:	00bfff04 	movi	r2,-4
   223e4:	a825883a 	mov	r18,r21
   223e8:	1884703a 	and	r2,r3,r2
   223ec:	80a1883a 	add	r16,r16,r2
   223f0:	003f2406 	br	22084 <__alt_data_end+0xfffe99e4>
   223f4:	a8800217 	ldw	r2,8(r21)
   223f8:	b0800415 	stw	r2,16(r22)
   223fc:	a8800317 	ldw	r2,12(r21)
   22400:	b0800515 	stw	r2,20(r22)
   22404:	31000a26 	beq	r6,r4,22430 <_realloc_r+0x4e4>
   22408:	b0800604 	addi	r2,r22,24
   2240c:	ad400404 	addi	r21,r21,16
   22410:	003fa906 	br	222b8 <__alt_data_end+0xfffe9c18>
   22414:	a9000417 	ldw	r4,16(r21)
   22418:	90800604 	addi	r2,r18,24
   2241c:	a8c00604 	addi	r3,r21,24
   22420:	91000415 	stw	r4,16(r18)
   22424:	a9000517 	ldw	r4,20(r21)
   22428:	91000515 	stw	r4,20(r18)
   2242c:	003f0406 	br	22040 <__alt_data_end+0xfffe99a0>
   22430:	a8c00417 	ldw	r3,16(r21)
   22434:	ad400604 	addi	r21,r21,24
   22438:	b0800804 	addi	r2,r22,32
   2243c:	b0c00615 	stw	r3,24(r22)
   22440:	a8ffff17 	ldw	r3,-4(r21)
   22444:	b0c00715 	stw	r3,28(r22)
   22448:	003f9b06 	br	222b8 <__alt_data_end+0xfffe9c18>
   2244c:	9005883a 	mov	r2,r18
   22450:	003fc706 	br	22370 <__alt_data_end+0xfffe9cd0>
   22454:	a80b883a 	mov	r5,r21
   22458:	9009883a 	mov	r4,r18
   2245c:	0021cc80 	call	21cc8 <memmove>
   22460:	003fc906 	br	22388 <__alt_data_end+0xfffe9ce8>
   22464:	a8800217 	ldw	r2,8(r21)
   22468:	b0800415 	stw	r2,16(r22)
   2246c:	a8800317 	ldw	r2,12(r21)
   22470:	b0800515 	stw	r2,20(r22)
   22474:	31000726 	beq	r6,r4,22494 <_realloc_r+0x548>
   22478:	b0800604 	addi	r2,r22,24
   2247c:	ad400404 	addi	r21,r21,16
   22480:	003fbb06 	br	22370 <__alt_data_end+0xfffe9cd0>
   22484:	a009883a 	mov	r4,r20
   22488:	0023ac80 	call	23ac8 <__malloc_unlock>
   2248c:	0005883a 	mov	r2,zero
   22490:	003f0a06 	br	220bc <__alt_data_end+0xfffe9a1c>
   22494:	a8c00417 	ldw	r3,16(r21)
   22498:	ad400604 	addi	r21,r21,24
   2249c:	b0800804 	addi	r2,r22,32
   224a0:	b0c00615 	stw	r3,24(r22)
   224a4:	a8ffff17 	ldw	r3,-4(r21)
   224a8:	b0c00715 	stw	r3,28(r22)
   224ac:	003fb006 	br	22370 <__alt_data_end+0xfffe9cd0>

000224b0 <_sbrk_r>:
   224b0:	defffd04 	addi	sp,sp,-12
   224b4:	dc000015 	stw	r16,0(sp)
   224b8:	040000f4 	movhi	r16,3
   224bc:	dc400115 	stw	r17,4(sp)
   224c0:	8429c104 	addi	r16,r16,-22780
   224c4:	2023883a 	mov	r17,r4
   224c8:	2809883a 	mov	r4,r5
   224cc:	dfc00215 	stw	ra,8(sp)
   224d0:	80000015 	stw	zero,0(r16)
   224d4:	0023cb00 	call	23cb0 <sbrk>
   224d8:	00ffffc4 	movi	r3,-1
   224dc:	10c00526 	beq	r2,r3,224f4 <_sbrk_r+0x44>
   224e0:	dfc00217 	ldw	ra,8(sp)
   224e4:	dc400117 	ldw	r17,4(sp)
   224e8:	dc000017 	ldw	r16,0(sp)
   224ec:	dec00304 	addi	sp,sp,12
   224f0:	f800283a 	ret
   224f4:	80c00017 	ldw	r3,0(r16)
   224f8:	183ff926 	beq	r3,zero,224e0 <__alt_data_end+0xfffe9e40>
   224fc:	88c00015 	stw	r3,0(r17)
   22500:	003ff706 	br	224e0 <__alt_data_end+0xfffe9e40>

00022504 <__sread>:
   22504:	defffe04 	addi	sp,sp,-8
   22508:	dc000015 	stw	r16,0(sp)
   2250c:	2821883a 	mov	r16,r5
   22510:	2940038f 	ldh	r5,14(r5)
   22514:	dfc00115 	stw	ra,4(sp)
   22518:	00232440 	call	23244 <_read_r>
   2251c:	10000716 	blt	r2,zero,2253c <__sread+0x38>
   22520:	80c01417 	ldw	r3,80(r16)
   22524:	1887883a 	add	r3,r3,r2
   22528:	80c01415 	stw	r3,80(r16)
   2252c:	dfc00117 	ldw	ra,4(sp)
   22530:	dc000017 	ldw	r16,0(sp)
   22534:	dec00204 	addi	sp,sp,8
   22538:	f800283a 	ret
   2253c:	80c0030b 	ldhu	r3,12(r16)
   22540:	18fbffcc 	andi	r3,r3,61439
   22544:	80c0030d 	sth	r3,12(r16)
   22548:	dfc00117 	ldw	ra,4(sp)
   2254c:	dc000017 	ldw	r16,0(sp)
   22550:	dec00204 	addi	sp,sp,8
   22554:	f800283a 	ret

00022558 <__seofread>:
   22558:	0005883a 	mov	r2,zero
   2255c:	f800283a 	ret

00022560 <__swrite>:
   22560:	2880030b 	ldhu	r2,12(r5)
   22564:	defffb04 	addi	sp,sp,-20
   22568:	dcc00315 	stw	r19,12(sp)
   2256c:	dc800215 	stw	r18,8(sp)
   22570:	dc400115 	stw	r17,4(sp)
   22574:	dc000015 	stw	r16,0(sp)
   22578:	dfc00415 	stw	ra,16(sp)
   2257c:	10c0400c 	andi	r3,r2,256
   22580:	2821883a 	mov	r16,r5
   22584:	2023883a 	mov	r17,r4
   22588:	3025883a 	mov	r18,r6
   2258c:	3827883a 	mov	r19,r7
   22590:	18000526 	beq	r3,zero,225a8 <__swrite+0x48>
   22594:	2940038f 	ldh	r5,14(r5)
   22598:	01c00084 	movi	r7,2
   2259c:	000d883a 	mov	r6,zero
   225a0:	00230280 	call	23028 <_lseek_r>
   225a4:	8080030b 	ldhu	r2,12(r16)
   225a8:	8140038f 	ldh	r5,14(r16)
   225ac:	10bbffcc 	andi	r2,r2,61439
   225b0:	980f883a 	mov	r7,r19
   225b4:	900d883a 	mov	r6,r18
   225b8:	8809883a 	mov	r4,r17
   225bc:	8080030d 	sth	r2,12(r16)
   225c0:	dfc00417 	ldw	ra,16(sp)
   225c4:	dcc00317 	ldw	r19,12(sp)
   225c8:	dc800217 	ldw	r18,8(sp)
   225cc:	dc400117 	ldw	r17,4(sp)
   225d0:	dc000017 	ldw	r16,0(sp)
   225d4:	dec00504 	addi	sp,sp,20
   225d8:	00226401 	jmpi	22640 <_write_r>

000225dc <__sseek>:
   225dc:	defffe04 	addi	sp,sp,-8
   225e0:	dc000015 	stw	r16,0(sp)
   225e4:	2821883a 	mov	r16,r5
   225e8:	2940038f 	ldh	r5,14(r5)
   225ec:	dfc00115 	stw	ra,4(sp)
   225f0:	00230280 	call	23028 <_lseek_r>
   225f4:	00ffffc4 	movi	r3,-1
   225f8:	10c00826 	beq	r2,r3,2261c <__sseek+0x40>
   225fc:	80c0030b 	ldhu	r3,12(r16)
   22600:	80801415 	stw	r2,80(r16)
   22604:	18c40014 	ori	r3,r3,4096
   22608:	80c0030d 	sth	r3,12(r16)
   2260c:	dfc00117 	ldw	ra,4(sp)
   22610:	dc000017 	ldw	r16,0(sp)
   22614:	dec00204 	addi	sp,sp,8
   22618:	f800283a 	ret
   2261c:	80c0030b 	ldhu	r3,12(r16)
   22620:	18fbffcc 	andi	r3,r3,61439
   22624:	80c0030d 	sth	r3,12(r16)
   22628:	dfc00117 	ldw	ra,4(sp)
   2262c:	dc000017 	ldw	r16,0(sp)
   22630:	dec00204 	addi	sp,sp,8
   22634:	f800283a 	ret

00022638 <__sclose>:
   22638:	2940038f 	ldh	r5,14(r5)
   2263c:	00227f41 	jmpi	227f4 <_close_r>

00022640 <_write_r>:
   22640:	defffd04 	addi	sp,sp,-12
   22644:	2805883a 	mov	r2,r5
   22648:	dc000015 	stw	r16,0(sp)
   2264c:	040000f4 	movhi	r16,3
   22650:	dc400115 	stw	r17,4(sp)
   22654:	300b883a 	mov	r5,r6
   22658:	8429c104 	addi	r16,r16,-22780
   2265c:	2023883a 	mov	r17,r4
   22660:	380d883a 	mov	r6,r7
   22664:	1009883a 	mov	r4,r2
   22668:	dfc00215 	stw	ra,8(sp)
   2266c:	80000015 	stw	zero,0(r16)
   22670:	0023dcc0 	call	23dcc <write>
   22674:	00ffffc4 	movi	r3,-1
   22678:	10c00526 	beq	r2,r3,22690 <_write_r+0x50>
   2267c:	dfc00217 	ldw	ra,8(sp)
   22680:	dc400117 	ldw	r17,4(sp)
   22684:	dc000017 	ldw	r16,0(sp)
   22688:	dec00304 	addi	sp,sp,12
   2268c:	f800283a 	ret
   22690:	80c00017 	ldw	r3,0(r16)
   22694:	183ff926 	beq	r3,zero,2267c <__alt_data_end+0xfffe9fdc>
   22698:	88c00015 	stw	r3,0(r17)
   2269c:	003ff706 	br	2267c <__alt_data_end+0xfffe9fdc>

000226a0 <__swsetup_r>:
   226a0:	008000f4 	movhi	r2,3
   226a4:	defffd04 	addi	sp,sp,-12
   226a8:	10a2ca04 	addi	r2,r2,-29912
   226ac:	dc400115 	stw	r17,4(sp)
   226b0:	2023883a 	mov	r17,r4
   226b4:	11000017 	ldw	r4,0(r2)
   226b8:	dc000015 	stw	r16,0(sp)
   226bc:	dfc00215 	stw	ra,8(sp)
   226c0:	2821883a 	mov	r16,r5
   226c4:	20000226 	beq	r4,zero,226d0 <__swsetup_r+0x30>
   226c8:	20800e17 	ldw	r2,56(r4)
   226cc:	10003126 	beq	r2,zero,22794 <__swsetup_r+0xf4>
   226d0:	8080030b 	ldhu	r2,12(r16)
   226d4:	10c0020c 	andi	r3,r2,8
   226d8:	1009883a 	mov	r4,r2
   226dc:	18000f26 	beq	r3,zero,2271c <__swsetup_r+0x7c>
   226e0:	80c00417 	ldw	r3,16(r16)
   226e4:	18001526 	beq	r3,zero,2273c <__swsetup_r+0x9c>
   226e8:	1100004c 	andi	r4,r2,1
   226ec:	20001c1e 	bne	r4,zero,22760 <__swsetup_r+0xc0>
   226f0:	1080008c 	andi	r2,r2,2
   226f4:	1000291e 	bne	r2,zero,2279c <__swsetup_r+0xfc>
   226f8:	80800517 	ldw	r2,20(r16)
   226fc:	80800215 	stw	r2,8(r16)
   22700:	18001c26 	beq	r3,zero,22774 <__swsetup_r+0xd4>
   22704:	0005883a 	mov	r2,zero
   22708:	dfc00217 	ldw	ra,8(sp)
   2270c:	dc400117 	ldw	r17,4(sp)
   22710:	dc000017 	ldw	r16,0(sp)
   22714:	dec00304 	addi	sp,sp,12
   22718:	f800283a 	ret
   2271c:	2080040c 	andi	r2,r4,16
   22720:	10002e26 	beq	r2,zero,227dc <__swsetup_r+0x13c>
   22724:	2080010c 	andi	r2,r4,4
   22728:	10001e1e 	bne	r2,zero,227a4 <__swsetup_r+0x104>
   2272c:	80c00417 	ldw	r3,16(r16)
   22730:	20800214 	ori	r2,r4,8
   22734:	8080030d 	sth	r2,12(r16)
   22738:	183feb1e 	bne	r3,zero,226e8 <__alt_data_end+0xfffea048>
   2273c:	1100a00c 	andi	r4,r2,640
   22740:	01408004 	movi	r5,512
   22744:	217fe826 	beq	r4,r5,226e8 <__alt_data_end+0xfffea048>
   22748:	800b883a 	mov	r5,r16
   2274c:	8809883a 	mov	r4,r17
   22750:	00230880 	call	23088 <__smakebuf_r>
   22754:	8080030b 	ldhu	r2,12(r16)
   22758:	80c00417 	ldw	r3,16(r16)
   2275c:	003fe206 	br	226e8 <__alt_data_end+0xfffea048>
   22760:	80800517 	ldw	r2,20(r16)
   22764:	80000215 	stw	zero,8(r16)
   22768:	0085c83a 	sub	r2,zero,r2
   2276c:	80800615 	stw	r2,24(r16)
   22770:	183fe41e 	bne	r3,zero,22704 <__alt_data_end+0xfffea064>
   22774:	80c0030b 	ldhu	r3,12(r16)
   22778:	0005883a 	mov	r2,zero
   2277c:	1900200c 	andi	r4,r3,128
   22780:	203fe126 	beq	r4,zero,22708 <__alt_data_end+0xfffea068>
   22784:	18c01014 	ori	r3,r3,64
   22788:	80c0030d 	sth	r3,12(r16)
   2278c:	00bfffc4 	movi	r2,-1
   22790:	003fdd06 	br	22708 <__alt_data_end+0xfffea068>
   22794:	0020bf00 	call	20bf0 <__sinit>
   22798:	003fcd06 	br	226d0 <__alt_data_end+0xfffea030>
   2279c:	0005883a 	mov	r2,zero
   227a0:	003fd606 	br	226fc <__alt_data_end+0xfffea05c>
   227a4:	81400c17 	ldw	r5,48(r16)
   227a8:	28000626 	beq	r5,zero,227c4 <__swsetup_r+0x124>
   227ac:	80801004 	addi	r2,r16,64
   227b0:	28800326 	beq	r5,r2,227c0 <__swsetup_r+0x120>
   227b4:	8809883a 	mov	r4,r17
   227b8:	0022d180 	call	22d18 <_free_r>
   227bc:	8100030b 	ldhu	r4,12(r16)
   227c0:	80000c15 	stw	zero,48(r16)
   227c4:	80c00417 	ldw	r3,16(r16)
   227c8:	00bff6c4 	movi	r2,-37
   227cc:	1108703a 	and	r4,r2,r4
   227d0:	80000115 	stw	zero,4(r16)
   227d4:	80c00015 	stw	r3,0(r16)
   227d8:	003fd506 	br	22730 <__alt_data_end+0xfffea090>
   227dc:	00800244 	movi	r2,9
   227e0:	88800015 	stw	r2,0(r17)
   227e4:	20801014 	ori	r2,r4,64
   227e8:	8080030d 	sth	r2,12(r16)
   227ec:	00bfffc4 	movi	r2,-1
   227f0:	003fc506 	br	22708 <__alt_data_end+0xfffea068>

000227f4 <_close_r>:
   227f4:	defffd04 	addi	sp,sp,-12
   227f8:	dc000015 	stw	r16,0(sp)
   227fc:	040000f4 	movhi	r16,3
   22800:	dc400115 	stw	r17,4(sp)
   22804:	8429c104 	addi	r16,r16,-22780
   22808:	2023883a 	mov	r17,r4
   2280c:	2809883a 	mov	r4,r5
   22810:	dfc00215 	stw	ra,8(sp)
   22814:	80000015 	stw	zero,0(r16)
   22818:	00235440 	call	23544 <close>
   2281c:	00ffffc4 	movi	r3,-1
   22820:	10c00526 	beq	r2,r3,22838 <_close_r+0x44>
   22824:	dfc00217 	ldw	ra,8(sp)
   22828:	dc400117 	ldw	r17,4(sp)
   2282c:	dc000017 	ldw	r16,0(sp)
   22830:	dec00304 	addi	sp,sp,12
   22834:	f800283a 	ret
   22838:	80c00017 	ldw	r3,0(r16)
   2283c:	183ff926 	beq	r3,zero,22824 <__alt_data_end+0xfffea184>
   22840:	88c00015 	stw	r3,0(r17)
   22844:	003ff706 	br	22824 <__alt_data_end+0xfffea184>

00022848 <_fclose_r>:
   22848:	28003926 	beq	r5,zero,22930 <_fclose_r+0xe8>
   2284c:	defffc04 	addi	sp,sp,-16
   22850:	dc400115 	stw	r17,4(sp)
   22854:	dc000015 	stw	r16,0(sp)
   22858:	dfc00315 	stw	ra,12(sp)
   2285c:	dc800215 	stw	r18,8(sp)
   22860:	2023883a 	mov	r17,r4
   22864:	2821883a 	mov	r16,r5
   22868:	20000226 	beq	r4,zero,22874 <_fclose_r+0x2c>
   2286c:	20800e17 	ldw	r2,56(r4)
   22870:	10002726 	beq	r2,zero,22910 <_fclose_r+0xc8>
   22874:	8080030f 	ldh	r2,12(r16)
   22878:	1000071e 	bne	r2,zero,22898 <_fclose_r+0x50>
   2287c:	0005883a 	mov	r2,zero
   22880:	dfc00317 	ldw	ra,12(sp)
   22884:	dc800217 	ldw	r18,8(sp)
   22888:	dc400117 	ldw	r17,4(sp)
   2288c:	dc000017 	ldw	r16,0(sp)
   22890:	dec00404 	addi	sp,sp,16
   22894:	f800283a 	ret
   22898:	800b883a 	mov	r5,r16
   2289c:	8809883a 	mov	r4,r17
   228a0:	002294c0 	call	2294c <__sflush_r>
   228a4:	1025883a 	mov	r18,r2
   228a8:	80800b17 	ldw	r2,44(r16)
   228ac:	10000426 	beq	r2,zero,228c0 <_fclose_r+0x78>
   228b0:	81400717 	ldw	r5,28(r16)
   228b4:	8809883a 	mov	r4,r17
   228b8:	103ee83a 	callr	r2
   228bc:	10001616 	blt	r2,zero,22918 <_fclose_r+0xd0>
   228c0:	8080030b 	ldhu	r2,12(r16)
   228c4:	1080200c 	andi	r2,r2,128
   228c8:	1000151e 	bne	r2,zero,22920 <_fclose_r+0xd8>
   228cc:	81400c17 	ldw	r5,48(r16)
   228d0:	28000526 	beq	r5,zero,228e8 <_fclose_r+0xa0>
   228d4:	80801004 	addi	r2,r16,64
   228d8:	28800226 	beq	r5,r2,228e4 <_fclose_r+0x9c>
   228dc:	8809883a 	mov	r4,r17
   228e0:	0022d180 	call	22d18 <_free_r>
   228e4:	80000c15 	stw	zero,48(r16)
   228e8:	81401117 	ldw	r5,68(r16)
   228ec:	28000326 	beq	r5,zero,228fc <_fclose_r+0xb4>
   228f0:	8809883a 	mov	r4,r17
   228f4:	0022d180 	call	22d18 <_free_r>
   228f8:	80001115 	stw	zero,68(r16)
   228fc:	0020c000 	call	20c00 <__sfp_lock_acquire>
   22900:	8000030d 	sth	zero,12(r16)
   22904:	0020c040 	call	20c04 <__sfp_lock_release>
   22908:	9005883a 	mov	r2,r18
   2290c:	003fdc06 	br	22880 <__alt_data_end+0xfffea1e0>
   22910:	0020bf00 	call	20bf0 <__sinit>
   22914:	003fd706 	br	22874 <__alt_data_end+0xfffea1d4>
   22918:	04bfffc4 	movi	r18,-1
   2291c:	003fe806 	br	228c0 <__alt_data_end+0xfffea220>
   22920:	81400417 	ldw	r5,16(r16)
   22924:	8809883a 	mov	r4,r17
   22928:	0022d180 	call	22d18 <_free_r>
   2292c:	003fe706 	br	228cc <__alt_data_end+0xfffea22c>
   22930:	0005883a 	mov	r2,zero
   22934:	f800283a 	ret

00022938 <fclose>:
   22938:	008000f4 	movhi	r2,3
   2293c:	10a2ca04 	addi	r2,r2,-29912
   22940:	200b883a 	mov	r5,r4
   22944:	11000017 	ldw	r4,0(r2)
   22948:	00228481 	jmpi	22848 <_fclose_r>

0002294c <__sflush_r>:
   2294c:	2880030b 	ldhu	r2,12(r5)
   22950:	defffb04 	addi	sp,sp,-20
   22954:	dcc00315 	stw	r19,12(sp)
   22958:	dc400115 	stw	r17,4(sp)
   2295c:	dfc00415 	stw	ra,16(sp)
   22960:	dc800215 	stw	r18,8(sp)
   22964:	dc000015 	stw	r16,0(sp)
   22968:	10c0020c 	andi	r3,r2,8
   2296c:	2823883a 	mov	r17,r5
   22970:	2027883a 	mov	r19,r4
   22974:	1800311e 	bne	r3,zero,22a3c <__sflush_r+0xf0>
   22978:	28c00117 	ldw	r3,4(r5)
   2297c:	10820014 	ori	r2,r2,2048
   22980:	2880030d 	sth	r2,12(r5)
   22984:	00c04b0e 	bge	zero,r3,22ab4 <__sflush_r+0x168>
   22988:	8a000a17 	ldw	r8,40(r17)
   2298c:	40002326 	beq	r8,zero,22a1c <__sflush_r+0xd0>
   22990:	9c000017 	ldw	r16,0(r19)
   22994:	10c4000c 	andi	r3,r2,4096
   22998:	98000015 	stw	zero,0(r19)
   2299c:	18004826 	beq	r3,zero,22ac0 <__sflush_r+0x174>
   229a0:	89801417 	ldw	r6,80(r17)
   229a4:	10c0010c 	andi	r3,r2,4
   229a8:	18000626 	beq	r3,zero,229c4 <__sflush_r+0x78>
   229ac:	88c00117 	ldw	r3,4(r17)
   229b0:	88800c17 	ldw	r2,48(r17)
   229b4:	30cdc83a 	sub	r6,r6,r3
   229b8:	10000226 	beq	r2,zero,229c4 <__sflush_r+0x78>
   229bc:	88800f17 	ldw	r2,60(r17)
   229c0:	308dc83a 	sub	r6,r6,r2
   229c4:	89400717 	ldw	r5,28(r17)
   229c8:	000f883a 	mov	r7,zero
   229cc:	9809883a 	mov	r4,r19
   229d0:	403ee83a 	callr	r8
   229d4:	00ffffc4 	movi	r3,-1
   229d8:	10c04426 	beq	r2,r3,22aec <__sflush_r+0x1a0>
   229dc:	88c0030b 	ldhu	r3,12(r17)
   229e0:	89000417 	ldw	r4,16(r17)
   229e4:	88000115 	stw	zero,4(r17)
   229e8:	197dffcc 	andi	r5,r3,63487
   229ec:	8940030d 	sth	r5,12(r17)
   229f0:	89000015 	stw	r4,0(r17)
   229f4:	18c4000c 	andi	r3,r3,4096
   229f8:	18002c1e 	bne	r3,zero,22aac <__sflush_r+0x160>
   229fc:	89400c17 	ldw	r5,48(r17)
   22a00:	9c000015 	stw	r16,0(r19)
   22a04:	28000526 	beq	r5,zero,22a1c <__sflush_r+0xd0>
   22a08:	88801004 	addi	r2,r17,64
   22a0c:	28800226 	beq	r5,r2,22a18 <__sflush_r+0xcc>
   22a10:	9809883a 	mov	r4,r19
   22a14:	0022d180 	call	22d18 <_free_r>
   22a18:	88000c15 	stw	zero,48(r17)
   22a1c:	0005883a 	mov	r2,zero
   22a20:	dfc00417 	ldw	ra,16(sp)
   22a24:	dcc00317 	ldw	r19,12(sp)
   22a28:	dc800217 	ldw	r18,8(sp)
   22a2c:	dc400117 	ldw	r17,4(sp)
   22a30:	dc000017 	ldw	r16,0(sp)
   22a34:	dec00504 	addi	sp,sp,20
   22a38:	f800283a 	ret
   22a3c:	2c800417 	ldw	r18,16(r5)
   22a40:	903ff626 	beq	r18,zero,22a1c <__alt_data_end+0xfffea37c>
   22a44:	2c000017 	ldw	r16,0(r5)
   22a48:	108000cc 	andi	r2,r2,3
   22a4c:	2c800015 	stw	r18,0(r5)
   22a50:	84a1c83a 	sub	r16,r16,r18
   22a54:	1000131e 	bne	r2,zero,22aa4 <__sflush_r+0x158>
   22a58:	28800517 	ldw	r2,20(r5)
   22a5c:	88800215 	stw	r2,8(r17)
   22a60:	04000316 	blt	zero,r16,22a70 <__sflush_r+0x124>
   22a64:	003fed06 	br	22a1c <__alt_data_end+0xfffea37c>
   22a68:	90a5883a 	add	r18,r18,r2
   22a6c:	043feb0e 	bge	zero,r16,22a1c <__alt_data_end+0xfffea37c>
   22a70:	88800917 	ldw	r2,36(r17)
   22a74:	89400717 	ldw	r5,28(r17)
   22a78:	800f883a 	mov	r7,r16
   22a7c:	900d883a 	mov	r6,r18
   22a80:	9809883a 	mov	r4,r19
   22a84:	103ee83a 	callr	r2
   22a88:	80a1c83a 	sub	r16,r16,r2
   22a8c:	00bff616 	blt	zero,r2,22a68 <__alt_data_end+0xfffea3c8>
   22a90:	88c0030b 	ldhu	r3,12(r17)
   22a94:	00bfffc4 	movi	r2,-1
   22a98:	18c01014 	ori	r3,r3,64
   22a9c:	88c0030d 	sth	r3,12(r17)
   22aa0:	003fdf06 	br	22a20 <__alt_data_end+0xfffea380>
   22aa4:	0005883a 	mov	r2,zero
   22aa8:	003fec06 	br	22a5c <__alt_data_end+0xfffea3bc>
   22aac:	88801415 	stw	r2,80(r17)
   22ab0:	003fd206 	br	229fc <__alt_data_end+0xfffea35c>
   22ab4:	28c00f17 	ldw	r3,60(r5)
   22ab8:	00ffb316 	blt	zero,r3,22988 <__alt_data_end+0xfffea2e8>
   22abc:	003fd706 	br	22a1c <__alt_data_end+0xfffea37c>
   22ac0:	89400717 	ldw	r5,28(r17)
   22ac4:	000d883a 	mov	r6,zero
   22ac8:	01c00044 	movi	r7,1
   22acc:	9809883a 	mov	r4,r19
   22ad0:	403ee83a 	callr	r8
   22ad4:	100d883a 	mov	r6,r2
   22ad8:	00bfffc4 	movi	r2,-1
   22adc:	30801426 	beq	r6,r2,22b30 <__sflush_r+0x1e4>
   22ae0:	8880030b 	ldhu	r2,12(r17)
   22ae4:	8a000a17 	ldw	r8,40(r17)
   22ae8:	003fae06 	br	229a4 <__alt_data_end+0xfffea304>
   22aec:	98c00017 	ldw	r3,0(r19)
   22af0:	183fba26 	beq	r3,zero,229dc <__alt_data_end+0xfffea33c>
   22af4:	01000744 	movi	r4,29
   22af8:	19000626 	beq	r3,r4,22b14 <__sflush_r+0x1c8>
   22afc:	01000584 	movi	r4,22
   22b00:	19000426 	beq	r3,r4,22b14 <__sflush_r+0x1c8>
   22b04:	88c0030b 	ldhu	r3,12(r17)
   22b08:	18c01014 	ori	r3,r3,64
   22b0c:	88c0030d 	sth	r3,12(r17)
   22b10:	003fc306 	br	22a20 <__alt_data_end+0xfffea380>
   22b14:	8880030b 	ldhu	r2,12(r17)
   22b18:	88c00417 	ldw	r3,16(r17)
   22b1c:	88000115 	stw	zero,4(r17)
   22b20:	10bdffcc 	andi	r2,r2,63487
   22b24:	8880030d 	sth	r2,12(r17)
   22b28:	88c00015 	stw	r3,0(r17)
   22b2c:	003fb306 	br	229fc <__alt_data_end+0xfffea35c>
   22b30:	98800017 	ldw	r2,0(r19)
   22b34:	103fea26 	beq	r2,zero,22ae0 <__alt_data_end+0xfffea440>
   22b38:	00c00744 	movi	r3,29
   22b3c:	10c00226 	beq	r2,r3,22b48 <__sflush_r+0x1fc>
   22b40:	00c00584 	movi	r3,22
   22b44:	10c0031e 	bne	r2,r3,22b54 <__sflush_r+0x208>
   22b48:	9c000015 	stw	r16,0(r19)
   22b4c:	0005883a 	mov	r2,zero
   22b50:	003fb306 	br	22a20 <__alt_data_end+0xfffea380>
   22b54:	88c0030b 	ldhu	r3,12(r17)
   22b58:	3005883a 	mov	r2,r6
   22b5c:	18c01014 	ori	r3,r3,64
   22b60:	88c0030d 	sth	r3,12(r17)
   22b64:	003fae06 	br	22a20 <__alt_data_end+0xfffea380>

00022b68 <_fflush_r>:
   22b68:	defffd04 	addi	sp,sp,-12
   22b6c:	dc000115 	stw	r16,4(sp)
   22b70:	dfc00215 	stw	ra,8(sp)
   22b74:	2021883a 	mov	r16,r4
   22b78:	20000226 	beq	r4,zero,22b84 <_fflush_r+0x1c>
   22b7c:	20800e17 	ldw	r2,56(r4)
   22b80:	10000c26 	beq	r2,zero,22bb4 <_fflush_r+0x4c>
   22b84:	2880030f 	ldh	r2,12(r5)
   22b88:	1000051e 	bne	r2,zero,22ba0 <_fflush_r+0x38>
   22b8c:	0005883a 	mov	r2,zero
   22b90:	dfc00217 	ldw	ra,8(sp)
   22b94:	dc000117 	ldw	r16,4(sp)
   22b98:	dec00304 	addi	sp,sp,12
   22b9c:	f800283a 	ret
   22ba0:	8009883a 	mov	r4,r16
   22ba4:	dfc00217 	ldw	ra,8(sp)
   22ba8:	dc000117 	ldw	r16,4(sp)
   22bac:	dec00304 	addi	sp,sp,12
   22bb0:	002294c1 	jmpi	2294c <__sflush_r>
   22bb4:	d9400015 	stw	r5,0(sp)
   22bb8:	0020bf00 	call	20bf0 <__sinit>
   22bbc:	d9400017 	ldw	r5,0(sp)
   22bc0:	003ff006 	br	22b84 <__alt_data_end+0xfffea4e4>

00022bc4 <fflush>:
   22bc4:	20000526 	beq	r4,zero,22bdc <fflush+0x18>
   22bc8:	008000f4 	movhi	r2,3
   22bcc:	10a2ca04 	addi	r2,r2,-29912
   22bd0:	200b883a 	mov	r5,r4
   22bd4:	11000017 	ldw	r4,0(r2)
   22bd8:	0022b681 	jmpi	22b68 <_fflush_r>
   22bdc:	008000f4 	movhi	r2,3
   22be0:	10a2c904 	addi	r2,r2,-29916
   22be4:	11000017 	ldw	r4,0(r2)
   22be8:	014000b4 	movhi	r5,2
   22bec:	294ada04 	addi	r5,r5,11112
   22bf0:	00211cc1 	jmpi	211cc <_fwalk_reent>

00022bf4 <_malloc_trim_r>:
   22bf4:	defffb04 	addi	sp,sp,-20
   22bf8:	dcc00315 	stw	r19,12(sp)
   22bfc:	04c000b4 	movhi	r19,2
   22c00:	dc800215 	stw	r18,8(sp)
   22c04:	dc400115 	stw	r17,4(sp)
   22c08:	dc000015 	stw	r16,0(sp)
   22c0c:	dfc00415 	stw	ra,16(sp)
   22c10:	2821883a 	mov	r16,r5
   22c14:	9cdcfd04 	addi	r19,r19,29684
   22c18:	2025883a 	mov	r18,r4
   22c1c:	0023aa40 	call	23aa4 <__malloc_lock>
   22c20:	98800217 	ldw	r2,8(r19)
   22c24:	14400117 	ldw	r17,4(r2)
   22c28:	00bfff04 	movi	r2,-4
   22c2c:	88a2703a 	and	r17,r17,r2
   22c30:	8c21c83a 	sub	r16,r17,r16
   22c34:	8403fbc4 	addi	r16,r16,4079
   22c38:	8020d33a 	srli	r16,r16,12
   22c3c:	0083ffc4 	movi	r2,4095
   22c40:	843fffc4 	addi	r16,r16,-1
   22c44:	8020933a 	slli	r16,r16,12
   22c48:	1400060e 	bge	r2,r16,22c64 <_malloc_trim_r+0x70>
   22c4c:	000b883a 	mov	r5,zero
   22c50:	9009883a 	mov	r4,r18
   22c54:	00224b00 	call	224b0 <_sbrk_r>
   22c58:	98c00217 	ldw	r3,8(r19)
   22c5c:	1c47883a 	add	r3,r3,r17
   22c60:	10c00a26 	beq	r2,r3,22c8c <_malloc_trim_r+0x98>
   22c64:	9009883a 	mov	r4,r18
   22c68:	0023ac80 	call	23ac8 <__malloc_unlock>
   22c6c:	0005883a 	mov	r2,zero
   22c70:	dfc00417 	ldw	ra,16(sp)
   22c74:	dcc00317 	ldw	r19,12(sp)
   22c78:	dc800217 	ldw	r18,8(sp)
   22c7c:	dc400117 	ldw	r17,4(sp)
   22c80:	dc000017 	ldw	r16,0(sp)
   22c84:	dec00504 	addi	sp,sp,20
   22c88:	f800283a 	ret
   22c8c:	040bc83a 	sub	r5,zero,r16
   22c90:	9009883a 	mov	r4,r18
   22c94:	00224b00 	call	224b0 <_sbrk_r>
   22c98:	00ffffc4 	movi	r3,-1
   22c9c:	10c00d26 	beq	r2,r3,22cd4 <_malloc_trim_r+0xe0>
   22ca0:	00c000f4 	movhi	r3,3
   22ca4:	18e9c904 	addi	r3,r3,-22748
   22ca8:	18800017 	ldw	r2,0(r3)
   22cac:	99000217 	ldw	r4,8(r19)
   22cb0:	8c23c83a 	sub	r17,r17,r16
   22cb4:	8c400054 	ori	r17,r17,1
   22cb8:	1421c83a 	sub	r16,r2,r16
   22cbc:	24400115 	stw	r17,4(r4)
   22cc0:	9009883a 	mov	r4,r18
   22cc4:	1c000015 	stw	r16,0(r3)
   22cc8:	0023ac80 	call	23ac8 <__malloc_unlock>
   22ccc:	00800044 	movi	r2,1
   22cd0:	003fe706 	br	22c70 <__alt_data_end+0xfffea5d0>
   22cd4:	000b883a 	mov	r5,zero
   22cd8:	9009883a 	mov	r4,r18
   22cdc:	00224b00 	call	224b0 <_sbrk_r>
   22ce0:	99000217 	ldw	r4,8(r19)
   22ce4:	014003c4 	movi	r5,15
   22ce8:	1107c83a 	sub	r3,r2,r4
   22cec:	28ffdd0e 	bge	r5,r3,22c64 <__alt_data_end+0xfffea5c4>
   22cf0:	014000f4 	movhi	r5,3
   22cf4:	2962cb04 	addi	r5,r5,-29908
   22cf8:	29400017 	ldw	r5,0(r5)
   22cfc:	18c00054 	ori	r3,r3,1
   22d00:	20c00115 	stw	r3,4(r4)
   22d04:	00c000f4 	movhi	r3,3
   22d08:	1145c83a 	sub	r2,r2,r5
   22d0c:	18e9c904 	addi	r3,r3,-22748
   22d10:	18800015 	stw	r2,0(r3)
   22d14:	003fd306 	br	22c64 <__alt_data_end+0xfffea5c4>

00022d18 <_free_r>:
   22d18:	28004126 	beq	r5,zero,22e20 <_free_r+0x108>
   22d1c:	defffd04 	addi	sp,sp,-12
   22d20:	dc400115 	stw	r17,4(sp)
   22d24:	dc000015 	stw	r16,0(sp)
   22d28:	2023883a 	mov	r17,r4
   22d2c:	2821883a 	mov	r16,r5
   22d30:	dfc00215 	stw	ra,8(sp)
   22d34:	0023aa40 	call	23aa4 <__malloc_lock>
   22d38:	81ffff17 	ldw	r7,-4(r16)
   22d3c:	00bfff84 	movi	r2,-2
   22d40:	010000b4 	movhi	r4,2
   22d44:	81bffe04 	addi	r6,r16,-8
   22d48:	3884703a 	and	r2,r7,r2
   22d4c:	211cfd04 	addi	r4,r4,29684
   22d50:	308b883a 	add	r5,r6,r2
   22d54:	2a400117 	ldw	r9,4(r5)
   22d58:	22000217 	ldw	r8,8(r4)
   22d5c:	00ffff04 	movi	r3,-4
   22d60:	48c6703a 	and	r3,r9,r3
   22d64:	2a005726 	beq	r5,r8,22ec4 <_free_r+0x1ac>
   22d68:	28c00115 	stw	r3,4(r5)
   22d6c:	39c0004c 	andi	r7,r7,1
   22d70:	3800091e 	bne	r7,zero,22d98 <_free_r+0x80>
   22d74:	823ffe17 	ldw	r8,-8(r16)
   22d78:	22400204 	addi	r9,r4,8
   22d7c:	320dc83a 	sub	r6,r6,r8
   22d80:	31c00217 	ldw	r7,8(r6)
   22d84:	1205883a 	add	r2,r2,r8
   22d88:	3a406526 	beq	r7,r9,22f20 <_free_r+0x208>
   22d8c:	32000317 	ldw	r8,12(r6)
   22d90:	3a000315 	stw	r8,12(r7)
   22d94:	41c00215 	stw	r7,8(r8)
   22d98:	28cf883a 	add	r7,r5,r3
   22d9c:	39c00117 	ldw	r7,4(r7)
   22da0:	39c0004c 	andi	r7,r7,1
   22da4:	38003a26 	beq	r7,zero,22e90 <_free_r+0x178>
   22da8:	10c00054 	ori	r3,r2,1
   22dac:	30c00115 	stw	r3,4(r6)
   22db0:	3087883a 	add	r3,r6,r2
   22db4:	18800015 	stw	r2,0(r3)
   22db8:	00c07fc4 	movi	r3,511
   22dbc:	18801936 	bltu	r3,r2,22e24 <_free_r+0x10c>
   22dc0:	1004d0fa 	srli	r2,r2,3
   22dc4:	01c00044 	movi	r7,1
   22dc8:	21400117 	ldw	r5,4(r4)
   22dcc:	10c00044 	addi	r3,r2,1
   22dd0:	18c7883a 	add	r3,r3,r3
   22dd4:	1005d0ba 	srai	r2,r2,2
   22dd8:	18c7883a 	add	r3,r3,r3
   22ddc:	18c7883a 	add	r3,r3,r3
   22de0:	1907883a 	add	r3,r3,r4
   22de4:	3884983a 	sll	r2,r7,r2
   22de8:	19c00017 	ldw	r7,0(r3)
   22dec:	1a3ffe04 	addi	r8,r3,-8
   22df0:	1144b03a 	or	r2,r2,r5
   22df4:	32000315 	stw	r8,12(r6)
   22df8:	31c00215 	stw	r7,8(r6)
   22dfc:	20800115 	stw	r2,4(r4)
   22e00:	19800015 	stw	r6,0(r3)
   22e04:	39800315 	stw	r6,12(r7)
   22e08:	8809883a 	mov	r4,r17
   22e0c:	dfc00217 	ldw	ra,8(sp)
   22e10:	dc400117 	ldw	r17,4(sp)
   22e14:	dc000017 	ldw	r16,0(sp)
   22e18:	dec00304 	addi	sp,sp,12
   22e1c:	0023ac81 	jmpi	23ac8 <__malloc_unlock>
   22e20:	f800283a 	ret
   22e24:	100ad27a 	srli	r5,r2,9
   22e28:	00c00104 	movi	r3,4
   22e2c:	19404a36 	bltu	r3,r5,22f58 <_free_r+0x240>
   22e30:	100ad1ba 	srli	r5,r2,6
   22e34:	28c00e44 	addi	r3,r5,57
   22e38:	18c7883a 	add	r3,r3,r3
   22e3c:	29400e04 	addi	r5,r5,56
   22e40:	18c7883a 	add	r3,r3,r3
   22e44:	18c7883a 	add	r3,r3,r3
   22e48:	1909883a 	add	r4,r3,r4
   22e4c:	20c00017 	ldw	r3,0(r4)
   22e50:	01c000b4 	movhi	r7,2
   22e54:	213ffe04 	addi	r4,r4,-8
   22e58:	39dcfd04 	addi	r7,r7,29684
   22e5c:	20c04426 	beq	r4,r3,22f70 <_free_r+0x258>
   22e60:	01ffff04 	movi	r7,-4
   22e64:	19400117 	ldw	r5,4(r3)
   22e68:	29ca703a 	and	r5,r5,r7
   22e6c:	1140022e 	bgeu	r2,r5,22e78 <_free_r+0x160>
   22e70:	18c00217 	ldw	r3,8(r3)
   22e74:	20fffb1e 	bne	r4,r3,22e64 <__alt_data_end+0xfffea7c4>
   22e78:	19000317 	ldw	r4,12(r3)
   22e7c:	31000315 	stw	r4,12(r6)
   22e80:	30c00215 	stw	r3,8(r6)
   22e84:	21800215 	stw	r6,8(r4)
   22e88:	19800315 	stw	r6,12(r3)
   22e8c:	003fde06 	br	22e08 <__alt_data_end+0xfffea768>
   22e90:	29c00217 	ldw	r7,8(r5)
   22e94:	10c5883a 	add	r2,r2,r3
   22e98:	00c000b4 	movhi	r3,2
   22e9c:	18dcff04 	addi	r3,r3,29692
   22ea0:	38c03b26 	beq	r7,r3,22f90 <_free_r+0x278>
   22ea4:	2a000317 	ldw	r8,12(r5)
   22ea8:	11400054 	ori	r5,r2,1
   22eac:	3087883a 	add	r3,r6,r2
   22eb0:	3a000315 	stw	r8,12(r7)
   22eb4:	41c00215 	stw	r7,8(r8)
   22eb8:	31400115 	stw	r5,4(r6)
   22ebc:	18800015 	stw	r2,0(r3)
   22ec0:	003fbd06 	br	22db8 <__alt_data_end+0xfffea718>
   22ec4:	39c0004c 	andi	r7,r7,1
   22ec8:	10c5883a 	add	r2,r2,r3
   22ecc:	3800071e 	bne	r7,zero,22eec <_free_r+0x1d4>
   22ed0:	81fffe17 	ldw	r7,-8(r16)
   22ed4:	31cdc83a 	sub	r6,r6,r7
   22ed8:	30c00317 	ldw	r3,12(r6)
   22edc:	31400217 	ldw	r5,8(r6)
   22ee0:	11c5883a 	add	r2,r2,r7
   22ee4:	28c00315 	stw	r3,12(r5)
   22ee8:	19400215 	stw	r5,8(r3)
   22eec:	10c00054 	ori	r3,r2,1
   22ef0:	30c00115 	stw	r3,4(r6)
   22ef4:	00c000f4 	movhi	r3,3
   22ef8:	18e2cc04 	addi	r3,r3,-29904
   22efc:	18c00017 	ldw	r3,0(r3)
   22f00:	21800215 	stw	r6,8(r4)
   22f04:	10ffc036 	bltu	r2,r3,22e08 <__alt_data_end+0xfffea768>
   22f08:	008000f4 	movhi	r2,3
   22f0c:	10a9c004 	addi	r2,r2,-22784
   22f10:	11400017 	ldw	r5,0(r2)
   22f14:	8809883a 	mov	r4,r17
   22f18:	0022bf40 	call	22bf4 <_malloc_trim_r>
   22f1c:	003fba06 	br	22e08 <__alt_data_end+0xfffea768>
   22f20:	28c9883a 	add	r4,r5,r3
   22f24:	21000117 	ldw	r4,4(r4)
   22f28:	2100004c 	andi	r4,r4,1
   22f2c:	2000391e 	bne	r4,zero,23014 <_free_r+0x2fc>
   22f30:	29c00217 	ldw	r7,8(r5)
   22f34:	29000317 	ldw	r4,12(r5)
   22f38:	1885883a 	add	r2,r3,r2
   22f3c:	10c00054 	ori	r3,r2,1
   22f40:	39000315 	stw	r4,12(r7)
   22f44:	21c00215 	stw	r7,8(r4)
   22f48:	30c00115 	stw	r3,4(r6)
   22f4c:	308d883a 	add	r6,r6,r2
   22f50:	30800015 	stw	r2,0(r6)
   22f54:	003fac06 	br	22e08 <__alt_data_end+0xfffea768>
   22f58:	00c00504 	movi	r3,20
   22f5c:	19401536 	bltu	r3,r5,22fb4 <_free_r+0x29c>
   22f60:	28c01704 	addi	r3,r5,92
   22f64:	18c7883a 	add	r3,r3,r3
   22f68:	294016c4 	addi	r5,r5,91
   22f6c:	003fb406 	br	22e40 <__alt_data_end+0xfffea7a0>
   22f70:	280bd0ba 	srai	r5,r5,2
   22f74:	00c00044 	movi	r3,1
   22f78:	38800117 	ldw	r2,4(r7)
   22f7c:	194a983a 	sll	r5,r3,r5
   22f80:	2007883a 	mov	r3,r4
   22f84:	2884b03a 	or	r2,r5,r2
   22f88:	38800115 	stw	r2,4(r7)
   22f8c:	003fbb06 	br	22e7c <__alt_data_end+0xfffea7dc>
   22f90:	21800515 	stw	r6,20(r4)
   22f94:	21800415 	stw	r6,16(r4)
   22f98:	10c00054 	ori	r3,r2,1
   22f9c:	31c00315 	stw	r7,12(r6)
   22fa0:	31c00215 	stw	r7,8(r6)
   22fa4:	30c00115 	stw	r3,4(r6)
   22fa8:	308d883a 	add	r6,r6,r2
   22fac:	30800015 	stw	r2,0(r6)
   22fb0:	003f9506 	br	22e08 <__alt_data_end+0xfffea768>
   22fb4:	00c01504 	movi	r3,84
   22fb8:	19400536 	bltu	r3,r5,22fd0 <_free_r+0x2b8>
   22fbc:	100ad33a 	srli	r5,r2,12
   22fc0:	28c01bc4 	addi	r3,r5,111
   22fc4:	18c7883a 	add	r3,r3,r3
   22fc8:	29401b84 	addi	r5,r5,110
   22fcc:	003f9c06 	br	22e40 <__alt_data_end+0xfffea7a0>
   22fd0:	00c05504 	movi	r3,340
   22fd4:	19400536 	bltu	r3,r5,22fec <_free_r+0x2d4>
   22fd8:	100ad3fa 	srli	r5,r2,15
   22fdc:	28c01e04 	addi	r3,r5,120
   22fe0:	18c7883a 	add	r3,r3,r3
   22fe4:	29401dc4 	addi	r5,r5,119
   22fe8:	003f9506 	br	22e40 <__alt_data_end+0xfffea7a0>
   22fec:	00c15504 	movi	r3,1364
   22ff0:	19400536 	bltu	r3,r5,23008 <_free_r+0x2f0>
   22ff4:	100ad4ba 	srli	r5,r2,18
   22ff8:	28c01f44 	addi	r3,r5,125
   22ffc:	18c7883a 	add	r3,r3,r3
   23000:	29401f04 	addi	r5,r5,124
   23004:	003f8e06 	br	22e40 <__alt_data_end+0xfffea7a0>
   23008:	00c03f84 	movi	r3,254
   2300c:	01401f84 	movi	r5,126
   23010:	003f8b06 	br	22e40 <__alt_data_end+0xfffea7a0>
   23014:	10c00054 	ori	r3,r2,1
   23018:	30c00115 	stw	r3,4(r6)
   2301c:	308d883a 	add	r6,r6,r2
   23020:	30800015 	stw	r2,0(r6)
   23024:	003f7806 	br	22e08 <__alt_data_end+0xfffea768>

00023028 <_lseek_r>:
   23028:	defffd04 	addi	sp,sp,-12
   2302c:	2805883a 	mov	r2,r5
   23030:	dc000015 	stw	r16,0(sp)
   23034:	040000f4 	movhi	r16,3
   23038:	dc400115 	stw	r17,4(sp)
   2303c:	300b883a 	mov	r5,r6
   23040:	8429c104 	addi	r16,r16,-22780
   23044:	2023883a 	mov	r17,r4
   23048:	380d883a 	mov	r6,r7
   2304c:	1009883a 	mov	r4,r2
   23050:	dfc00215 	stw	ra,8(sp)
   23054:	80000015 	stw	zero,0(r16)
   23058:	002394c0 	call	2394c <lseek>
   2305c:	00ffffc4 	movi	r3,-1
   23060:	10c00526 	beq	r2,r3,23078 <_lseek_r+0x50>
   23064:	dfc00217 	ldw	ra,8(sp)
   23068:	dc400117 	ldw	r17,4(sp)
   2306c:	dc000017 	ldw	r16,0(sp)
   23070:	dec00304 	addi	sp,sp,12
   23074:	f800283a 	ret
   23078:	80c00017 	ldw	r3,0(r16)
   2307c:	183ff926 	beq	r3,zero,23064 <__alt_data_end+0xfffea9c4>
   23080:	88c00015 	stw	r3,0(r17)
   23084:	003ff706 	br	23064 <__alt_data_end+0xfffea9c4>

00023088 <__smakebuf_r>:
   23088:	2880030b 	ldhu	r2,12(r5)
   2308c:	10c0008c 	andi	r3,r2,2
   23090:	1800411e 	bne	r3,zero,23198 <__smakebuf_r+0x110>
   23094:	deffec04 	addi	sp,sp,-80
   23098:	dc000f15 	stw	r16,60(sp)
   2309c:	2821883a 	mov	r16,r5
   230a0:	2940038f 	ldh	r5,14(r5)
   230a4:	dc401015 	stw	r17,64(sp)
   230a8:	dfc01315 	stw	ra,76(sp)
   230ac:	dcc01215 	stw	r19,72(sp)
   230b0:	dc801115 	stw	r18,68(sp)
   230b4:	2023883a 	mov	r17,r4
   230b8:	28001c16 	blt	r5,zero,2312c <__smakebuf_r+0xa4>
   230bc:	d80d883a 	mov	r6,sp
   230c0:	00232a40 	call	232a4 <_fstat_r>
   230c4:	10001816 	blt	r2,zero,23128 <__smakebuf_r+0xa0>
   230c8:	d8800117 	ldw	r2,4(sp)
   230cc:	00e00014 	movui	r3,32768
   230d0:	10bc000c 	andi	r2,r2,61440
   230d4:	14c80020 	cmpeqi	r19,r2,8192
   230d8:	10c03726 	beq	r2,r3,231b8 <__smakebuf_r+0x130>
   230dc:	80c0030b 	ldhu	r3,12(r16)
   230e0:	18c20014 	ori	r3,r3,2048
   230e4:	80c0030d 	sth	r3,12(r16)
   230e8:	00c80004 	movi	r3,8192
   230ec:	10c0521e 	bne	r2,r3,23238 <__smakebuf_r+0x1b0>
   230f0:	8140038f 	ldh	r5,14(r16)
   230f4:	8809883a 	mov	r4,r17
   230f8:	00233000 	call	23300 <_isatty_r>
   230fc:	10004c26 	beq	r2,zero,23230 <__smakebuf_r+0x1a8>
   23100:	8080030b 	ldhu	r2,12(r16)
   23104:	80c010c4 	addi	r3,r16,67
   23108:	80c00015 	stw	r3,0(r16)
   2310c:	10800054 	ori	r2,r2,1
   23110:	8080030d 	sth	r2,12(r16)
   23114:	00800044 	movi	r2,1
   23118:	80c00415 	stw	r3,16(r16)
   2311c:	80800515 	stw	r2,20(r16)
   23120:	04810004 	movi	r18,1024
   23124:	00000706 	br	23144 <__smakebuf_r+0xbc>
   23128:	8080030b 	ldhu	r2,12(r16)
   2312c:	10c0200c 	andi	r3,r2,128
   23130:	18001f1e 	bne	r3,zero,231b0 <__smakebuf_r+0x128>
   23134:	04810004 	movi	r18,1024
   23138:	10820014 	ori	r2,r2,2048
   2313c:	8080030d 	sth	r2,12(r16)
   23140:	0027883a 	mov	r19,zero
   23144:	900b883a 	mov	r5,r18
   23148:	8809883a 	mov	r4,r17
   2314c:	00212900 	call	21290 <_malloc_r>
   23150:	10002c26 	beq	r2,zero,23204 <__smakebuf_r+0x17c>
   23154:	80c0030b 	ldhu	r3,12(r16)
   23158:	010000b4 	movhi	r4,2
   2315c:	21022604 	addi	r4,r4,2200
   23160:	89000f15 	stw	r4,60(r17)
   23164:	18c02014 	ori	r3,r3,128
   23168:	80c0030d 	sth	r3,12(r16)
   2316c:	80800015 	stw	r2,0(r16)
   23170:	80800415 	stw	r2,16(r16)
   23174:	84800515 	stw	r18,20(r16)
   23178:	98001a1e 	bne	r19,zero,231e4 <__smakebuf_r+0x15c>
   2317c:	dfc01317 	ldw	ra,76(sp)
   23180:	dcc01217 	ldw	r19,72(sp)
   23184:	dc801117 	ldw	r18,68(sp)
   23188:	dc401017 	ldw	r17,64(sp)
   2318c:	dc000f17 	ldw	r16,60(sp)
   23190:	dec01404 	addi	sp,sp,80
   23194:	f800283a 	ret
   23198:	288010c4 	addi	r2,r5,67
   2319c:	28800015 	stw	r2,0(r5)
   231a0:	28800415 	stw	r2,16(r5)
   231a4:	00800044 	movi	r2,1
   231a8:	28800515 	stw	r2,20(r5)
   231ac:	f800283a 	ret
   231b0:	04801004 	movi	r18,64
   231b4:	003fe006 	br	23138 <__alt_data_end+0xfffeaa98>
   231b8:	81000a17 	ldw	r4,40(r16)
   231bc:	00c000b4 	movhi	r3,2
   231c0:	18c97704 	addi	r3,r3,9692
   231c4:	20ffc51e 	bne	r4,r3,230dc <__alt_data_end+0xfffeaa3c>
   231c8:	8080030b 	ldhu	r2,12(r16)
   231cc:	04810004 	movi	r18,1024
   231d0:	84801315 	stw	r18,76(r16)
   231d4:	1484b03a 	or	r2,r2,r18
   231d8:	8080030d 	sth	r2,12(r16)
   231dc:	0027883a 	mov	r19,zero
   231e0:	003fd806 	br	23144 <__alt_data_end+0xfffeaaa4>
   231e4:	8140038f 	ldh	r5,14(r16)
   231e8:	8809883a 	mov	r4,r17
   231ec:	00233000 	call	23300 <_isatty_r>
   231f0:	103fe226 	beq	r2,zero,2317c <__alt_data_end+0xfffeaadc>
   231f4:	8080030b 	ldhu	r2,12(r16)
   231f8:	10800054 	ori	r2,r2,1
   231fc:	8080030d 	sth	r2,12(r16)
   23200:	003fde06 	br	2317c <__alt_data_end+0xfffeaadc>
   23204:	8080030b 	ldhu	r2,12(r16)
   23208:	10c0800c 	andi	r3,r2,512
   2320c:	183fdb1e 	bne	r3,zero,2317c <__alt_data_end+0xfffeaadc>
   23210:	10800094 	ori	r2,r2,2
   23214:	80c010c4 	addi	r3,r16,67
   23218:	8080030d 	sth	r2,12(r16)
   2321c:	00800044 	movi	r2,1
   23220:	80c00015 	stw	r3,0(r16)
   23224:	80c00415 	stw	r3,16(r16)
   23228:	80800515 	stw	r2,20(r16)
   2322c:	003fd306 	br	2317c <__alt_data_end+0xfffeaadc>
   23230:	04810004 	movi	r18,1024
   23234:	003fc306 	br	23144 <__alt_data_end+0xfffeaaa4>
   23238:	0027883a 	mov	r19,zero
   2323c:	04810004 	movi	r18,1024
   23240:	003fc006 	br	23144 <__alt_data_end+0xfffeaaa4>

00023244 <_read_r>:
   23244:	defffd04 	addi	sp,sp,-12
   23248:	2805883a 	mov	r2,r5
   2324c:	dc000015 	stw	r16,0(sp)
   23250:	040000f4 	movhi	r16,3
   23254:	dc400115 	stw	r17,4(sp)
   23258:	300b883a 	mov	r5,r6
   2325c:	8429c104 	addi	r16,r16,-22780
   23260:	2023883a 	mov	r17,r4
   23264:	380d883a 	mov	r6,r7
   23268:	1009883a 	mov	r4,r2
   2326c:	dfc00215 	stw	ra,8(sp)
   23270:	80000015 	stw	zero,0(r16)
   23274:	0023b280 	call	23b28 <read>
   23278:	00ffffc4 	movi	r3,-1
   2327c:	10c00526 	beq	r2,r3,23294 <_read_r+0x50>
   23280:	dfc00217 	ldw	ra,8(sp)
   23284:	dc400117 	ldw	r17,4(sp)
   23288:	dc000017 	ldw	r16,0(sp)
   2328c:	dec00304 	addi	sp,sp,12
   23290:	f800283a 	ret
   23294:	80c00017 	ldw	r3,0(r16)
   23298:	183ff926 	beq	r3,zero,23280 <__alt_data_end+0xfffeabe0>
   2329c:	88c00015 	stw	r3,0(r17)
   232a0:	003ff706 	br	23280 <__alt_data_end+0xfffeabe0>

000232a4 <_fstat_r>:
   232a4:	defffd04 	addi	sp,sp,-12
   232a8:	2805883a 	mov	r2,r5
   232ac:	dc000015 	stw	r16,0(sp)
   232b0:	040000f4 	movhi	r16,3
   232b4:	dc400115 	stw	r17,4(sp)
   232b8:	8429c104 	addi	r16,r16,-22780
   232bc:	2023883a 	mov	r17,r4
   232c0:	300b883a 	mov	r5,r6
   232c4:	1009883a 	mov	r4,r2
   232c8:	dfc00215 	stw	ra,8(sp)
   232cc:	80000015 	stw	zero,0(r16)
   232d0:	00236840 	call	23684 <fstat>
   232d4:	00ffffc4 	movi	r3,-1
   232d8:	10c00526 	beq	r2,r3,232f0 <_fstat_r+0x4c>
   232dc:	dfc00217 	ldw	ra,8(sp)
   232e0:	dc400117 	ldw	r17,4(sp)
   232e4:	dc000017 	ldw	r16,0(sp)
   232e8:	dec00304 	addi	sp,sp,12
   232ec:	f800283a 	ret
   232f0:	80c00017 	ldw	r3,0(r16)
   232f4:	183ff926 	beq	r3,zero,232dc <__alt_data_end+0xfffeac3c>
   232f8:	88c00015 	stw	r3,0(r17)
   232fc:	003ff706 	br	232dc <__alt_data_end+0xfffeac3c>

00023300 <_isatty_r>:
   23300:	defffd04 	addi	sp,sp,-12
   23304:	dc000015 	stw	r16,0(sp)
   23308:	040000f4 	movhi	r16,3
   2330c:	dc400115 	stw	r17,4(sp)
   23310:	8429c104 	addi	r16,r16,-22780
   23314:	2023883a 	mov	r17,r4
   23318:	2809883a 	mov	r4,r5
   2331c:	dfc00215 	stw	ra,8(sp)
   23320:	80000015 	stw	zero,0(r16)
   23324:	00237780 	call	23778 <isatty>
   23328:	00ffffc4 	movi	r3,-1
   2332c:	10c00526 	beq	r2,r3,23344 <_isatty_r+0x44>
   23330:	dfc00217 	ldw	ra,8(sp)
   23334:	dc400117 	ldw	r17,4(sp)
   23338:	dc000017 	ldw	r16,0(sp)
   2333c:	dec00304 	addi	sp,sp,12
   23340:	f800283a 	ret
   23344:	80c00017 	ldw	r3,0(r16)
   23348:	183ff926 	beq	r3,zero,23330 <__alt_data_end+0xfffeac90>
   2334c:	88c00015 	stw	r3,0(r17)
   23350:	003ff706 	br	23330 <__alt_data_end+0xfffeac90>

00023354 <__divsi3>:
   23354:	20001b16 	blt	r4,zero,233c4 <__divsi3+0x70>
   23358:	000f883a 	mov	r7,zero
   2335c:	28001616 	blt	r5,zero,233b8 <__divsi3+0x64>
   23360:	200d883a 	mov	r6,r4
   23364:	29001a2e 	bgeu	r5,r4,233d0 <__divsi3+0x7c>
   23368:	00800804 	movi	r2,32
   2336c:	00c00044 	movi	r3,1
   23370:	00000106 	br	23378 <__divsi3+0x24>
   23374:	10000d26 	beq	r2,zero,233ac <__divsi3+0x58>
   23378:	294b883a 	add	r5,r5,r5
   2337c:	10bfffc4 	addi	r2,r2,-1
   23380:	18c7883a 	add	r3,r3,r3
   23384:	293ffb36 	bltu	r5,r4,23374 <__alt_data_end+0xfffeacd4>
   23388:	0005883a 	mov	r2,zero
   2338c:	18000726 	beq	r3,zero,233ac <__divsi3+0x58>
   23390:	0005883a 	mov	r2,zero
   23394:	31400236 	bltu	r6,r5,233a0 <__divsi3+0x4c>
   23398:	314dc83a 	sub	r6,r6,r5
   2339c:	10c4b03a 	or	r2,r2,r3
   233a0:	1806d07a 	srli	r3,r3,1
   233a4:	280ad07a 	srli	r5,r5,1
   233a8:	183ffa1e 	bne	r3,zero,23394 <__alt_data_end+0xfffeacf4>
   233ac:	38000126 	beq	r7,zero,233b4 <__divsi3+0x60>
   233b0:	0085c83a 	sub	r2,zero,r2
   233b4:	f800283a 	ret
   233b8:	014bc83a 	sub	r5,zero,r5
   233bc:	39c0005c 	xori	r7,r7,1
   233c0:	003fe706 	br	23360 <__alt_data_end+0xfffeacc0>
   233c4:	0109c83a 	sub	r4,zero,r4
   233c8:	01c00044 	movi	r7,1
   233cc:	003fe306 	br	2335c <__alt_data_end+0xfffeacbc>
   233d0:	00c00044 	movi	r3,1
   233d4:	003fee06 	br	23390 <__alt_data_end+0xfffeacf0>

000233d8 <__modsi3>:
   233d8:	20001716 	blt	r4,zero,23438 <__modsi3+0x60>
   233dc:	000f883a 	mov	r7,zero
   233e0:	2005883a 	mov	r2,r4
   233e4:	28001216 	blt	r5,zero,23430 <__modsi3+0x58>
   233e8:	2900162e 	bgeu	r5,r4,23444 <__modsi3+0x6c>
   233ec:	01800804 	movi	r6,32
   233f0:	00c00044 	movi	r3,1
   233f4:	00000106 	br	233fc <__modsi3+0x24>
   233f8:	30000a26 	beq	r6,zero,23424 <__modsi3+0x4c>
   233fc:	294b883a 	add	r5,r5,r5
   23400:	31bfffc4 	addi	r6,r6,-1
   23404:	18c7883a 	add	r3,r3,r3
   23408:	293ffb36 	bltu	r5,r4,233f8 <__alt_data_end+0xfffead58>
   2340c:	18000526 	beq	r3,zero,23424 <__modsi3+0x4c>
   23410:	1806d07a 	srli	r3,r3,1
   23414:	11400136 	bltu	r2,r5,2341c <__modsi3+0x44>
   23418:	1145c83a 	sub	r2,r2,r5
   2341c:	280ad07a 	srli	r5,r5,1
   23420:	183ffb1e 	bne	r3,zero,23410 <__alt_data_end+0xfffead70>
   23424:	38000126 	beq	r7,zero,2342c <__modsi3+0x54>
   23428:	0085c83a 	sub	r2,zero,r2
   2342c:	f800283a 	ret
   23430:	014bc83a 	sub	r5,zero,r5
   23434:	003fec06 	br	233e8 <__alt_data_end+0xfffead48>
   23438:	0109c83a 	sub	r4,zero,r4
   2343c:	01c00044 	movi	r7,1
   23440:	003fe706 	br	233e0 <__alt_data_end+0xfffead40>
   23444:	00c00044 	movi	r3,1
   23448:	003ff106 	br	23410 <__alt_data_end+0xfffead70>

0002344c <__udivsi3>:
   2344c:	200d883a 	mov	r6,r4
   23450:	2900152e 	bgeu	r5,r4,234a8 <__udivsi3+0x5c>
   23454:	28001416 	blt	r5,zero,234a8 <__udivsi3+0x5c>
   23458:	00800804 	movi	r2,32
   2345c:	00c00044 	movi	r3,1
   23460:	00000206 	br	2346c <__udivsi3+0x20>
   23464:	10000e26 	beq	r2,zero,234a0 <__udivsi3+0x54>
   23468:	28000516 	blt	r5,zero,23480 <__udivsi3+0x34>
   2346c:	294b883a 	add	r5,r5,r5
   23470:	10bfffc4 	addi	r2,r2,-1
   23474:	18c7883a 	add	r3,r3,r3
   23478:	293ffa36 	bltu	r5,r4,23464 <__alt_data_end+0xfffeadc4>
   2347c:	18000826 	beq	r3,zero,234a0 <__udivsi3+0x54>
   23480:	0005883a 	mov	r2,zero
   23484:	31400236 	bltu	r6,r5,23490 <__udivsi3+0x44>
   23488:	314dc83a 	sub	r6,r6,r5
   2348c:	10c4b03a 	or	r2,r2,r3
   23490:	1806d07a 	srli	r3,r3,1
   23494:	280ad07a 	srli	r5,r5,1
   23498:	183ffa1e 	bne	r3,zero,23484 <__alt_data_end+0xfffeade4>
   2349c:	f800283a 	ret
   234a0:	0005883a 	mov	r2,zero
   234a4:	f800283a 	ret
   234a8:	00c00044 	movi	r3,1
   234ac:	003ff406 	br	23480 <__alt_data_end+0xfffeade0>

000234b0 <__umodsi3>:
   234b0:	2005883a 	mov	r2,r4
   234b4:	2900122e 	bgeu	r5,r4,23500 <__umodsi3+0x50>
   234b8:	28001116 	blt	r5,zero,23500 <__umodsi3+0x50>
   234bc:	01800804 	movi	r6,32
   234c0:	00c00044 	movi	r3,1
   234c4:	00000206 	br	234d0 <__umodsi3+0x20>
   234c8:	30000c26 	beq	r6,zero,234fc <__umodsi3+0x4c>
   234cc:	28000516 	blt	r5,zero,234e4 <__umodsi3+0x34>
   234d0:	294b883a 	add	r5,r5,r5
   234d4:	31bfffc4 	addi	r6,r6,-1
   234d8:	18c7883a 	add	r3,r3,r3
   234dc:	293ffa36 	bltu	r5,r4,234c8 <__alt_data_end+0xfffeae28>
   234e0:	18000626 	beq	r3,zero,234fc <__umodsi3+0x4c>
   234e4:	1806d07a 	srli	r3,r3,1
   234e8:	11400136 	bltu	r2,r5,234f0 <__umodsi3+0x40>
   234ec:	1145c83a 	sub	r2,r2,r5
   234f0:	280ad07a 	srli	r5,r5,1
   234f4:	183ffb1e 	bne	r3,zero,234e4 <__alt_data_end+0xfffeae44>
   234f8:	f800283a 	ret
   234fc:	f800283a 	ret
   23500:	00c00044 	movi	r3,1
   23504:	003ff706 	br	234e4 <__alt_data_end+0xfffeae44>

00023508 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23508:	defffe04 	addi	sp,sp,-8
   2350c:	dfc00115 	stw	ra,4(sp)
   23510:	df000015 	stw	fp,0(sp)
   23514:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23518:	d0a00917 	ldw	r2,-32732(gp)
   2351c:	10000326 	beq	r2,zero,2352c <alt_get_errno+0x24>
   23520:	d0a00917 	ldw	r2,-32732(gp)
   23524:	103ee83a 	callr	r2
   23528:	00000106 	br	23530 <alt_get_errno+0x28>
   2352c:	d0a6f804 	addi	r2,gp,-25632
}
   23530:	e037883a 	mov	sp,fp
   23534:	dfc00117 	ldw	ra,4(sp)
   23538:	df000017 	ldw	fp,0(sp)
   2353c:	dec00204 	addi	sp,sp,8
   23540:	f800283a 	ret

00023544 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   23544:	defffb04 	addi	sp,sp,-20
   23548:	dfc00415 	stw	ra,16(sp)
   2354c:	df000315 	stw	fp,12(sp)
   23550:	df000304 	addi	fp,sp,12
   23554:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   23558:	e0bfff17 	ldw	r2,-4(fp)
   2355c:	10000816 	blt	r2,zero,23580 <close+0x3c>
   23560:	01400304 	movi	r5,12
   23564:	e13fff17 	ldw	r4,-4(fp)
   23568:	00206fc0 	call	206fc <__mulsi3>
   2356c:	1007883a 	mov	r3,r2
   23570:	008000b4 	movhi	r2,2
   23574:	109e0904 	addi	r2,r2,30756
   23578:	1885883a 	add	r2,r3,r2
   2357c:	00000106 	br	23584 <close+0x40>
   23580:	0005883a 	mov	r2,zero
   23584:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   23588:	e0bffd17 	ldw	r2,-12(fp)
   2358c:	10001926 	beq	r2,zero,235f4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   23590:	e0bffd17 	ldw	r2,-12(fp)
   23594:	10800017 	ldw	r2,0(r2)
   23598:	10800417 	ldw	r2,16(r2)
   2359c:	10000626 	beq	r2,zero,235b8 <close+0x74>
   235a0:	e0bffd17 	ldw	r2,-12(fp)
   235a4:	10800017 	ldw	r2,0(r2)
   235a8:	10800417 	ldw	r2,16(r2)
   235ac:	e13ffd17 	ldw	r4,-12(fp)
   235b0:	103ee83a 	callr	r2
   235b4:	00000106 	br	235bc <close+0x78>
   235b8:	0005883a 	mov	r2,zero
   235bc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   235c0:	e13fff17 	ldw	r4,-4(fp)
   235c4:	0023c2c0 	call	23c2c <alt_release_fd>
    if (rval < 0)
   235c8:	e0bffe17 	ldw	r2,-8(fp)
   235cc:	1000070e 	bge	r2,zero,235ec <close+0xa8>
    {
      ALT_ERRNO = -rval;
   235d0:	00235080 	call	23508 <alt_get_errno>
   235d4:	1007883a 	mov	r3,r2
   235d8:	e0bffe17 	ldw	r2,-8(fp)
   235dc:	0085c83a 	sub	r2,zero,r2
   235e0:	18800015 	stw	r2,0(r3)
      return -1;
   235e4:	00bfffc4 	movi	r2,-1
   235e8:	00000706 	br	23608 <close+0xc4>
    }
    return 0;
   235ec:	0005883a 	mov	r2,zero
   235f0:	00000506 	br	23608 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   235f4:	00235080 	call	23508 <alt_get_errno>
   235f8:	1007883a 	mov	r3,r2
   235fc:	00801444 	movi	r2,81
   23600:	18800015 	stw	r2,0(r3)
    return -1;
   23604:	00bfffc4 	movi	r2,-1
  }
}
   23608:	e037883a 	mov	sp,fp
   2360c:	dfc00117 	ldw	ra,4(sp)
   23610:	df000017 	ldw	fp,0(sp)
   23614:	dec00204 	addi	sp,sp,8
   23618:	f800283a 	ret

0002361c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2361c:	defffc04 	addi	sp,sp,-16
   23620:	df000315 	stw	fp,12(sp)
   23624:	df000304 	addi	fp,sp,12
   23628:	e13ffd15 	stw	r4,-12(fp)
   2362c:	e17ffe15 	stw	r5,-8(fp)
   23630:	e1bfff15 	stw	r6,-4(fp)
  return len;
   23634:	e0bfff17 	ldw	r2,-4(fp)
}
   23638:	e037883a 	mov	sp,fp
   2363c:	df000017 	ldw	fp,0(sp)
   23640:	dec00104 	addi	sp,sp,4
   23644:	f800283a 	ret

00023648 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23648:	defffe04 	addi	sp,sp,-8
   2364c:	dfc00115 	stw	ra,4(sp)
   23650:	df000015 	stw	fp,0(sp)
   23654:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23658:	d0a00917 	ldw	r2,-32732(gp)
   2365c:	10000326 	beq	r2,zero,2366c <alt_get_errno+0x24>
   23660:	d0a00917 	ldw	r2,-32732(gp)
   23664:	103ee83a 	callr	r2
   23668:	00000106 	br	23670 <alt_get_errno+0x28>
   2366c:	d0a6f804 	addi	r2,gp,-25632
}
   23670:	e037883a 	mov	sp,fp
   23674:	dfc00117 	ldw	ra,4(sp)
   23678:	df000017 	ldw	fp,0(sp)
   2367c:	dec00204 	addi	sp,sp,8
   23680:	f800283a 	ret

00023684 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   23684:	defffb04 	addi	sp,sp,-20
   23688:	dfc00415 	stw	ra,16(sp)
   2368c:	df000315 	stw	fp,12(sp)
   23690:	df000304 	addi	fp,sp,12
   23694:	e13ffe15 	stw	r4,-8(fp)
   23698:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2369c:	e0bffe17 	ldw	r2,-8(fp)
   236a0:	10000816 	blt	r2,zero,236c4 <fstat+0x40>
   236a4:	01400304 	movi	r5,12
   236a8:	e13ffe17 	ldw	r4,-8(fp)
   236ac:	00206fc0 	call	206fc <__mulsi3>
   236b0:	1007883a 	mov	r3,r2
   236b4:	008000b4 	movhi	r2,2
   236b8:	109e0904 	addi	r2,r2,30756
   236bc:	1885883a 	add	r2,r3,r2
   236c0:	00000106 	br	236c8 <fstat+0x44>
   236c4:	0005883a 	mov	r2,zero
   236c8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   236cc:	e0bffd17 	ldw	r2,-12(fp)
   236d0:	10001026 	beq	r2,zero,23714 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   236d4:	e0bffd17 	ldw	r2,-12(fp)
   236d8:	10800017 	ldw	r2,0(r2)
   236dc:	10800817 	ldw	r2,32(r2)
   236e0:	10000726 	beq	r2,zero,23700 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   236e4:	e0bffd17 	ldw	r2,-12(fp)
   236e8:	10800017 	ldw	r2,0(r2)
   236ec:	10800817 	ldw	r2,32(r2)
   236f0:	e17fff17 	ldw	r5,-4(fp)
   236f4:	e13ffd17 	ldw	r4,-12(fp)
   236f8:	103ee83a 	callr	r2
   236fc:	00000a06 	br	23728 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   23700:	e0bfff17 	ldw	r2,-4(fp)
   23704:	00c80004 	movi	r3,8192
   23708:	10c00115 	stw	r3,4(r2)
      return 0;
   2370c:	0005883a 	mov	r2,zero
   23710:	00000506 	br	23728 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23714:	00236480 	call	23648 <alt_get_errno>
   23718:	1007883a 	mov	r3,r2
   2371c:	00801444 	movi	r2,81
   23720:	18800015 	stw	r2,0(r3)
    return -1;
   23724:	00bfffc4 	movi	r2,-1
  }
}
   23728:	e037883a 	mov	sp,fp
   2372c:	dfc00117 	ldw	ra,4(sp)
   23730:	df000017 	ldw	fp,0(sp)
   23734:	dec00204 	addi	sp,sp,8
   23738:	f800283a 	ret

0002373c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2373c:	defffe04 	addi	sp,sp,-8
   23740:	dfc00115 	stw	ra,4(sp)
   23744:	df000015 	stw	fp,0(sp)
   23748:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2374c:	d0a00917 	ldw	r2,-32732(gp)
   23750:	10000326 	beq	r2,zero,23760 <alt_get_errno+0x24>
   23754:	d0a00917 	ldw	r2,-32732(gp)
   23758:	103ee83a 	callr	r2
   2375c:	00000106 	br	23764 <alt_get_errno+0x28>
   23760:	d0a6f804 	addi	r2,gp,-25632
}
   23764:	e037883a 	mov	sp,fp
   23768:	dfc00117 	ldw	ra,4(sp)
   2376c:	df000017 	ldw	fp,0(sp)
   23770:	dec00204 	addi	sp,sp,8
   23774:	f800283a 	ret

00023778 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   23778:	deffed04 	addi	sp,sp,-76
   2377c:	dfc01215 	stw	ra,72(sp)
   23780:	df001115 	stw	fp,68(sp)
   23784:	df001104 	addi	fp,sp,68
   23788:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2378c:	e0bfff17 	ldw	r2,-4(fp)
   23790:	10000816 	blt	r2,zero,237b4 <isatty+0x3c>
   23794:	01400304 	movi	r5,12
   23798:	e13fff17 	ldw	r4,-4(fp)
   2379c:	00206fc0 	call	206fc <__mulsi3>
   237a0:	1007883a 	mov	r3,r2
   237a4:	008000b4 	movhi	r2,2
   237a8:	109e0904 	addi	r2,r2,30756
   237ac:	1885883a 	add	r2,r3,r2
   237b0:	00000106 	br	237b8 <isatty+0x40>
   237b4:	0005883a 	mov	r2,zero
   237b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   237bc:	e0bfef17 	ldw	r2,-68(fp)
   237c0:	10000e26 	beq	r2,zero,237fc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   237c4:	e0bfef17 	ldw	r2,-68(fp)
   237c8:	10800017 	ldw	r2,0(r2)
   237cc:	10800817 	ldw	r2,32(r2)
   237d0:	1000021e 	bne	r2,zero,237dc <isatty+0x64>
    {
      return 1;
   237d4:	00800044 	movi	r2,1
   237d8:	00000d06 	br	23810 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   237dc:	e0bff004 	addi	r2,fp,-64
   237e0:	100b883a 	mov	r5,r2
   237e4:	e13fff17 	ldw	r4,-4(fp)
   237e8:	00236840 	call	23684 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   237ec:	e0bff117 	ldw	r2,-60(fp)
   237f0:	10880020 	cmpeqi	r2,r2,8192
   237f4:	10803fcc 	andi	r2,r2,255
   237f8:	00000506 	br	23810 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   237fc:	002373c0 	call	2373c <alt_get_errno>
   23800:	1007883a 	mov	r3,r2
   23804:	00801444 	movi	r2,81
   23808:	18800015 	stw	r2,0(r3)
    return 0;
   2380c:	0005883a 	mov	r2,zero
  }
}
   23810:	e037883a 	mov	sp,fp
   23814:	dfc00117 	ldw	ra,4(sp)
   23818:	df000017 	ldw	fp,0(sp)
   2381c:	dec00204 	addi	sp,sp,8
   23820:	f800283a 	ret

00023824 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23824:	defffc04 	addi	sp,sp,-16
   23828:	df000315 	stw	fp,12(sp)
   2382c:	df000304 	addi	fp,sp,12
   23830:	e13ffd15 	stw	r4,-12(fp)
   23834:	e17ffe15 	stw	r5,-8(fp)
   23838:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2383c:	e0fffe17 	ldw	r3,-8(fp)
   23840:	e0bffd17 	ldw	r2,-12(fp)
   23844:	18800c26 	beq	r3,r2,23878 <alt_load_section+0x54>
  {
    while( to != end )
   23848:	00000806 	br	2386c <alt_load_section+0x48>
    {
      *to++ = *from++;
   2384c:	e0bffe17 	ldw	r2,-8(fp)
   23850:	10c00104 	addi	r3,r2,4
   23854:	e0fffe15 	stw	r3,-8(fp)
   23858:	e0fffd17 	ldw	r3,-12(fp)
   2385c:	19000104 	addi	r4,r3,4
   23860:	e13ffd15 	stw	r4,-12(fp)
   23864:	18c00017 	ldw	r3,0(r3)
   23868:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2386c:	e0fffe17 	ldw	r3,-8(fp)
   23870:	e0bfff17 	ldw	r2,-4(fp)
   23874:	18bff51e 	bne	r3,r2,2384c <__alt_data_end+0xfffeb1ac>
    {
      *to++ = *from++;
    }
  }
}
   23878:	0001883a 	nop
   2387c:	e037883a 	mov	sp,fp
   23880:	df000017 	ldw	fp,0(sp)
   23884:	dec00104 	addi	sp,sp,4
   23888:	f800283a 	ret

0002388c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2388c:	defffe04 	addi	sp,sp,-8
   23890:	dfc00115 	stw	ra,4(sp)
   23894:	df000015 	stw	fp,0(sp)
   23898:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2389c:	018000f4 	movhi	r6,3
   238a0:	31a2d904 	addi	r6,r6,-29852
   238a4:	014000b4 	movhi	r5,2
   238a8:	295bf404 	addi	r5,r5,28624
   238ac:	010000f4 	movhi	r4,3
   238b0:	2122d904 	addi	r4,r4,-29852
   238b4:	00238240 	call	23824 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   238b8:	018000b4 	movhi	r6,2
   238bc:	31808c04 	addi	r6,r6,560
   238c0:	014000b4 	movhi	r5,2
   238c4:	29400804 	addi	r5,r5,32
   238c8:	010000b4 	movhi	r4,2
   238cc:	21000804 	addi	r4,r4,32
   238d0:	00238240 	call	23824 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   238d4:	018000b4 	movhi	r6,2
   238d8:	319bf404 	addi	r6,r6,28624
   238dc:	014000b4 	movhi	r5,2
   238e0:	295b3b04 	addi	r5,r5,27884
   238e4:	010000b4 	movhi	r4,2
   238e8:	211b3b04 	addi	r4,r4,27884
   238ec:	00238240 	call	23824 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   238f0:	0025c340 	call	25c34 <alt_dcache_flush_all>
  alt_icache_flush_all();
   238f4:	0025df40 	call	25df4 <alt_icache_flush_all>
}
   238f8:	0001883a 	nop
   238fc:	e037883a 	mov	sp,fp
   23900:	dfc00117 	ldw	ra,4(sp)
   23904:	df000017 	ldw	fp,0(sp)
   23908:	dec00204 	addi	sp,sp,8
   2390c:	f800283a 	ret

00023910 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23910:	defffe04 	addi	sp,sp,-8
   23914:	dfc00115 	stw	ra,4(sp)
   23918:	df000015 	stw	fp,0(sp)
   2391c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23920:	d0a00917 	ldw	r2,-32732(gp)
   23924:	10000326 	beq	r2,zero,23934 <alt_get_errno+0x24>
   23928:	d0a00917 	ldw	r2,-32732(gp)
   2392c:	103ee83a 	callr	r2
   23930:	00000106 	br	23938 <alt_get_errno+0x28>
   23934:	d0a6f804 	addi	r2,gp,-25632
}
   23938:	e037883a 	mov	sp,fp
   2393c:	dfc00117 	ldw	ra,4(sp)
   23940:	df000017 	ldw	fp,0(sp)
   23944:	dec00204 	addi	sp,sp,8
   23948:	f800283a 	ret

0002394c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2394c:	defff904 	addi	sp,sp,-28
   23950:	dfc00615 	stw	ra,24(sp)
   23954:	df000515 	stw	fp,20(sp)
   23958:	df000504 	addi	fp,sp,20
   2395c:	e13ffd15 	stw	r4,-12(fp)
   23960:	e17ffe15 	stw	r5,-8(fp)
   23964:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   23968:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2396c:	e0bffd17 	ldw	r2,-12(fp)
   23970:	10000816 	blt	r2,zero,23994 <lseek+0x48>
   23974:	01400304 	movi	r5,12
   23978:	e13ffd17 	ldw	r4,-12(fp)
   2397c:	00206fc0 	call	206fc <__mulsi3>
   23980:	1007883a 	mov	r3,r2
   23984:	008000b4 	movhi	r2,2
   23988:	109e0904 	addi	r2,r2,30756
   2398c:	1885883a 	add	r2,r3,r2
   23990:	00000106 	br	23998 <lseek+0x4c>
   23994:	0005883a 	mov	r2,zero
   23998:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2399c:	e0bffc17 	ldw	r2,-16(fp)
   239a0:	10001026 	beq	r2,zero,239e4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   239a4:	e0bffc17 	ldw	r2,-16(fp)
   239a8:	10800017 	ldw	r2,0(r2)
   239ac:	10800717 	ldw	r2,28(r2)
   239b0:	10000926 	beq	r2,zero,239d8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   239b4:	e0bffc17 	ldw	r2,-16(fp)
   239b8:	10800017 	ldw	r2,0(r2)
   239bc:	10800717 	ldw	r2,28(r2)
   239c0:	e1bfff17 	ldw	r6,-4(fp)
   239c4:	e17ffe17 	ldw	r5,-8(fp)
   239c8:	e13ffc17 	ldw	r4,-16(fp)
   239cc:	103ee83a 	callr	r2
   239d0:	e0bffb15 	stw	r2,-20(fp)
   239d4:	00000506 	br	239ec <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   239d8:	00bfde84 	movi	r2,-134
   239dc:	e0bffb15 	stw	r2,-20(fp)
   239e0:	00000206 	br	239ec <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   239e4:	00bfebc4 	movi	r2,-81
   239e8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   239ec:	e0bffb17 	ldw	r2,-20(fp)
   239f0:	1000070e 	bge	r2,zero,23a10 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   239f4:	00239100 	call	23910 <alt_get_errno>
   239f8:	1007883a 	mov	r3,r2
   239fc:	e0bffb17 	ldw	r2,-20(fp)
   23a00:	0085c83a 	sub	r2,zero,r2
   23a04:	18800015 	stw	r2,0(r3)
    rc = -1;
   23a08:	00bfffc4 	movi	r2,-1
   23a0c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   23a10:	e0bffb17 	ldw	r2,-20(fp)
}
   23a14:	e037883a 	mov	sp,fp
   23a18:	dfc00117 	ldw	ra,4(sp)
   23a1c:	df000017 	ldw	fp,0(sp)
   23a20:	dec00204 	addi	sp,sp,8
   23a24:	f800283a 	ret

00023a28 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   23a28:	defffd04 	addi	sp,sp,-12
   23a2c:	dfc00215 	stw	ra,8(sp)
   23a30:	df000115 	stw	fp,4(sp)
   23a34:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   23a38:	0009883a 	mov	r4,zero
   23a3c:	0023f000 	call	23f00 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   23a40:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   23a44:	0023f380 	call	23f38 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   23a48:	018000b4 	movhi	r6,2
   23a4c:	319b4904 	addi	r6,r6,27940
   23a50:	014000b4 	movhi	r5,2
   23a54:	295b4904 	addi	r5,r5,27940
   23a58:	010000b4 	movhi	r4,2
   23a5c:	211b4904 	addi	r4,r4,27940
   23a60:	00261980 	call	26198 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   23a64:	0025d340 	call	25d34 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   23a68:	010000b4 	movhi	r4,2
   23a6c:	21176504 	addi	r4,r4,23956
   23a70:	00269580 	call	26958 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23a74:	d0a6f917 	ldw	r2,-25628(gp)
   23a78:	d0e6fa17 	ldw	r3,-25624(gp)
   23a7c:	d126fb17 	ldw	r4,-25620(gp)
   23a80:	200d883a 	mov	r6,r4
   23a84:	180b883a 	mov	r5,r3
   23a88:	1009883a 	mov	r4,r2
   23a8c:	00205cc0 	call	205cc <main>
   23a90:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23a94:	01000044 	movi	r4,1
   23a98:	00235440 	call	23544 <close>
  exit (result);
   23a9c:	e13fff17 	ldw	r4,-4(fp)
   23aa0:	002696c0 	call	2696c <exit>

00023aa4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23aa4:	defffe04 	addi	sp,sp,-8
   23aa8:	df000115 	stw	fp,4(sp)
   23aac:	df000104 	addi	fp,sp,4
   23ab0:	e13fff15 	stw	r4,-4(fp)
}
   23ab4:	0001883a 	nop
   23ab8:	e037883a 	mov	sp,fp
   23abc:	df000017 	ldw	fp,0(sp)
   23ac0:	dec00104 	addi	sp,sp,4
   23ac4:	f800283a 	ret

00023ac8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23ac8:	defffe04 	addi	sp,sp,-8
   23acc:	df000115 	stw	fp,4(sp)
   23ad0:	df000104 	addi	fp,sp,4
   23ad4:	e13fff15 	stw	r4,-4(fp)
}
   23ad8:	0001883a 	nop
   23adc:	e037883a 	mov	sp,fp
   23ae0:	df000017 	ldw	fp,0(sp)
   23ae4:	dec00104 	addi	sp,sp,4
   23ae8:	f800283a 	ret

00023aec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23aec:	defffe04 	addi	sp,sp,-8
   23af0:	dfc00115 	stw	ra,4(sp)
   23af4:	df000015 	stw	fp,0(sp)
   23af8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23afc:	d0a00917 	ldw	r2,-32732(gp)
   23b00:	10000326 	beq	r2,zero,23b10 <alt_get_errno+0x24>
   23b04:	d0a00917 	ldw	r2,-32732(gp)
   23b08:	103ee83a 	callr	r2
   23b0c:	00000106 	br	23b14 <alt_get_errno+0x28>
   23b10:	d0a6f804 	addi	r2,gp,-25632
}
   23b14:	e037883a 	mov	sp,fp
   23b18:	dfc00117 	ldw	ra,4(sp)
   23b1c:	df000017 	ldw	fp,0(sp)
   23b20:	dec00204 	addi	sp,sp,8
   23b24:	f800283a 	ret

00023b28 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   23b28:	defff904 	addi	sp,sp,-28
   23b2c:	dfc00615 	stw	ra,24(sp)
   23b30:	df000515 	stw	fp,20(sp)
   23b34:	df000504 	addi	fp,sp,20
   23b38:	e13ffd15 	stw	r4,-12(fp)
   23b3c:	e17ffe15 	stw	r5,-8(fp)
   23b40:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23b44:	e0bffd17 	ldw	r2,-12(fp)
   23b48:	10000816 	blt	r2,zero,23b6c <read+0x44>
   23b4c:	01400304 	movi	r5,12
   23b50:	e13ffd17 	ldw	r4,-12(fp)
   23b54:	00206fc0 	call	206fc <__mulsi3>
   23b58:	1007883a 	mov	r3,r2
   23b5c:	008000b4 	movhi	r2,2
   23b60:	109e0904 	addi	r2,r2,30756
   23b64:	1885883a 	add	r2,r3,r2
   23b68:	00000106 	br	23b70 <read+0x48>
   23b6c:	0005883a 	mov	r2,zero
   23b70:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23b74:	e0bffb17 	ldw	r2,-20(fp)
   23b78:	10002226 	beq	r2,zero,23c04 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23b7c:	e0bffb17 	ldw	r2,-20(fp)
   23b80:	10800217 	ldw	r2,8(r2)
   23b84:	108000cc 	andi	r2,r2,3
   23b88:	10800060 	cmpeqi	r2,r2,1
   23b8c:	1000181e 	bne	r2,zero,23bf0 <read+0xc8>
        (fd->dev->read))
   23b90:	e0bffb17 	ldw	r2,-20(fp)
   23b94:	10800017 	ldw	r2,0(r2)
   23b98:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23b9c:	10001426 	beq	r2,zero,23bf0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23ba0:	e0bffb17 	ldw	r2,-20(fp)
   23ba4:	10800017 	ldw	r2,0(r2)
   23ba8:	10800517 	ldw	r2,20(r2)
   23bac:	e0ffff17 	ldw	r3,-4(fp)
   23bb0:	180d883a 	mov	r6,r3
   23bb4:	e17ffe17 	ldw	r5,-8(fp)
   23bb8:	e13ffb17 	ldw	r4,-20(fp)
   23bbc:	103ee83a 	callr	r2
   23bc0:	e0bffc15 	stw	r2,-16(fp)
   23bc4:	e0bffc17 	ldw	r2,-16(fp)
   23bc8:	1000070e 	bge	r2,zero,23be8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   23bcc:	0023aec0 	call	23aec <alt_get_errno>
   23bd0:	1007883a 	mov	r3,r2
   23bd4:	e0bffc17 	ldw	r2,-16(fp)
   23bd8:	0085c83a 	sub	r2,zero,r2
   23bdc:	18800015 	stw	r2,0(r3)
          return -1;
   23be0:	00bfffc4 	movi	r2,-1
   23be4:	00000c06 	br	23c18 <read+0xf0>
        }
        return rval;
   23be8:	e0bffc17 	ldw	r2,-16(fp)
   23bec:	00000a06 	br	23c18 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23bf0:	0023aec0 	call	23aec <alt_get_errno>
   23bf4:	1007883a 	mov	r3,r2
   23bf8:	00800344 	movi	r2,13
   23bfc:	18800015 	stw	r2,0(r3)
   23c00:	00000406 	br	23c14 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23c04:	0023aec0 	call	23aec <alt_get_errno>
   23c08:	1007883a 	mov	r3,r2
   23c0c:	00801444 	movi	r2,81
   23c10:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23c14:	00bfffc4 	movi	r2,-1
}
   23c18:	e037883a 	mov	sp,fp
   23c1c:	dfc00117 	ldw	ra,4(sp)
   23c20:	df000017 	ldw	fp,0(sp)
   23c24:	dec00204 	addi	sp,sp,8
   23c28:	f800283a 	ret

00023c2c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23c2c:	defffc04 	addi	sp,sp,-16
   23c30:	dfc00315 	stw	ra,12(sp)
   23c34:	df000215 	stw	fp,8(sp)
   23c38:	dc000115 	stw	r16,4(sp)
   23c3c:	df000204 	addi	fp,sp,8
   23c40:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   23c44:	e0bffe17 	ldw	r2,-8(fp)
   23c48:	108000d0 	cmplti	r2,r2,3
   23c4c:	1000111e 	bne	r2,zero,23c94 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   23c50:	040000b4 	movhi	r16,2
   23c54:	841e0904 	addi	r16,r16,30756
   23c58:	e0bffe17 	ldw	r2,-8(fp)
   23c5c:	01400304 	movi	r5,12
   23c60:	1009883a 	mov	r4,r2
   23c64:	00206fc0 	call	206fc <__mulsi3>
   23c68:	8085883a 	add	r2,r16,r2
   23c6c:	10800204 	addi	r2,r2,8
   23c70:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   23c74:	040000b4 	movhi	r16,2
   23c78:	841e0904 	addi	r16,r16,30756
   23c7c:	e0bffe17 	ldw	r2,-8(fp)
   23c80:	01400304 	movi	r5,12
   23c84:	1009883a 	mov	r4,r2
   23c88:	00206fc0 	call	206fc <__mulsi3>
   23c8c:	8085883a 	add	r2,r16,r2
   23c90:	10000015 	stw	zero,0(r2)
  }
}
   23c94:	0001883a 	nop
   23c98:	e6ffff04 	addi	sp,fp,-4
   23c9c:	dfc00217 	ldw	ra,8(sp)
   23ca0:	df000117 	ldw	fp,4(sp)
   23ca4:	dc000017 	ldw	r16,0(sp)
   23ca8:	dec00304 	addi	sp,sp,12
   23cac:	f800283a 	ret

00023cb0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23cb0:	defff904 	addi	sp,sp,-28
   23cb4:	df000615 	stw	fp,24(sp)
   23cb8:	df000604 	addi	fp,sp,24
   23cbc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23cc0:	0005303a 	rdctl	r2,status
   23cc4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23cc8:	e0fffe17 	ldw	r3,-8(fp)
   23ccc:	00bfff84 	movi	r2,-2
   23cd0:	1884703a 	and	r2,r3,r2
   23cd4:	1001703a 	wrctl	status,r2
  
  return context;
   23cd8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23cdc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23ce0:	d0a00a17 	ldw	r2,-32728(gp)
   23ce4:	10c000c4 	addi	r3,r2,3
   23ce8:	00bfff04 	movi	r2,-4
   23cec:	1884703a 	and	r2,r3,r2
   23cf0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23cf4:	d0e00a17 	ldw	r3,-32728(gp)
   23cf8:	e0bfff17 	ldw	r2,-4(fp)
   23cfc:	1887883a 	add	r3,r3,r2
   23d00:	00800134 	movhi	r2,4
   23d04:	10a1a804 	addi	r2,r2,-31072
   23d08:	10c0062e 	bgeu	r2,r3,23d24 <sbrk+0x74>
   23d0c:	e0bffb17 	ldw	r2,-20(fp)
   23d10:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23d14:	e0bffa17 	ldw	r2,-24(fp)
   23d18:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   23d1c:	00bfffc4 	movi	r2,-1
   23d20:	00000b06 	br	23d50 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   23d24:	d0a00a17 	ldw	r2,-32728(gp)
   23d28:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   23d2c:	d0e00a17 	ldw	r3,-32728(gp)
   23d30:	e0bfff17 	ldw	r2,-4(fp)
   23d34:	1885883a 	add	r2,r3,r2
   23d38:	d0a00a15 	stw	r2,-32728(gp)
   23d3c:	e0bffb17 	ldw	r2,-20(fp)
   23d40:	e0bffc15 	stw	r2,-16(fp)
   23d44:	e0bffc17 	ldw	r2,-16(fp)
   23d48:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23d4c:	e0bffd17 	ldw	r2,-12(fp)
} 
   23d50:	e037883a 	mov	sp,fp
   23d54:	df000017 	ldw	fp,0(sp)
   23d58:	dec00104 	addi	sp,sp,4
   23d5c:	f800283a 	ret

00023d60 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   23d60:	defffd04 	addi	sp,sp,-12
   23d64:	dfc00215 	stw	ra,8(sp)
   23d68:	df000115 	stw	fp,4(sp)
   23d6c:	df000104 	addi	fp,sp,4
   23d70:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   23d74:	e13fff17 	ldw	r4,-4(fp)
   23d78:	0025adc0 	call	25adc <alt_busy_sleep>
}
   23d7c:	e037883a 	mov	sp,fp
   23d80:	dfc00117 	ldw	ra,4(sp)
   23d84:	df000017 	ldw	fp,0(sp)
   23d88:	dec00204 	addi	sp,sp,8
   23d8c:	f800283a 	ret

00023d90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23d90:	defffe04 	addi	sp,sp,-8
   23d94:	dfc00115 	stw	ra,4(sp)
   23d98:	df000015 	stw	fp,0(sp)
   23d9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23da0:	d0a00917 	ldw	r2,-32732(gp)
   23da4:	10000326 	beq	r2,zero,23db4 <alt_get_errno+0x24>
   23da8:	d0a00917 	ldw	r2,-32732(gp)
   23dac:	103ee83a 	callr	r2
   23db0:	00000106 	br	23db8 <alt_get_errno+0x28>
   23db4:	d0a6f804 	addi	r2,gp,-25632
}
   23db8:	e037883a 	mov	sp,fp
   23dbc:	dfc00117 	ldw	ra,4(sp)
   23dc0:	df000017 	ldw	fp,0(sp)
   23dc4:	dec00204 	addi	sp,sp,8
   23dc8:	f800283a 	ret

00023dcc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23dcc:	defff904 	addi	sp,sp,-28
   23dd0:	dfc00615 	stw	ra,24(sp)
   23dd4:	df000515 	stw	fp,20(sp)
   23dd8:	df000504 	addi	fp,sp,20
   23ddc:	e13ffd15 	stw	r4,-12(fp)
   23de0:	e17ffe15 	stw	r5,-8(fp)
   23de4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23de8:	e0bffd17 	ldw	r2,-12(fp)
   23dec:	10000816 	blt	r2,zero,23e10 <write+0x44>
   23df0:	01400304 	movi	r5,12
   23df4:	e13ffd17 	ldw	r4,-12(fp)
   23df8:	00206fc0 	call	206fc <__mulsi3>
   23dfc:	1007883a 	mov	r3,r2
   23e00:	008000b4 	movhi	r2,2
   23e04:	109e0904 	addi	r2,r2,30756
   23e08:	1885883a 	add	r2,r3,r2
   23e0c:	00000106 	br	23e14 <write+0x48>
   23e10:	0005883a 	mov	r2,zero
   23e14:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23e18:	e0bffb17 	ldw	r2,-20(fp)
   23e1c:	10002126 	beq	r2,zero,23ea4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23e20:	e0bffb17 	ldw	r2,-20(fp)
   23e24:	10800217 	ldw	r2,8(r2)
   23e28:	108000cc 	andi	r2,r2,3
   23e2c:	10001826 	beq	r2,zero,23e90 <write+0xc4>
   23e30:	e0bffb17 	ldw	r2,-20(fp)
   23e34:	10800017 	ldw	r2,0(r2)
   23e38:	10800617 	ldw	r2,24(r2)
   23e3c:	10001426 	beq	r2,zero,23e90 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23e40:	e0bffb17 	ldw	r2,-20(fp)
   23e44:	10800017 	ldw	r2,0(r2)
   23e48:	10800617 	ldw	r2,24(r2)
   23e4c:	e0ffff17 	ldw	r3,-4(fp)
   23e50:	180d883a 	mov	r6,r3
   23e54:	e17ffe17 	ldw	r5,-8(fp)
   23e58:	e13ffb17 	ldw	r4,-20(fp)
   23e5c:	103ee83a 	callr	r2
   23e60:	e0bffc15 	stw	r2,-16(fp)
   23e64:	e0bffc17 	ldw	r2,-16(fp)
   23e68:	1000070e 	bge	r2,zero,23e88 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   23e6c:	0023d900 	call	23d90 <alt_get_errno>
   23e70:	1007883a 	mov	r3,r2
   23e74:	e0bffc17 	ldw	r2,-16(fp)
   23e78:	0085c83a 	sub	r2,zero,r2
   23e7c:	18800015 	stw	r2,0(r3)
        return -1;
   23e80:	00bfffc4 	movi	r2,-1
   23e84:	00000c06 	br	23eb8 <write+0xec>
      }
      return rval;
   23e88:	e0bffc17 	ldw	r2,-16(fp)
   23e8c:	00000a06 	br	23eb8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23e90:	0023d900 	call	23d90 <alt_get_errno>
   23e94:	1007883a 	mov	r3,r2
   23e98:	00800344 	movi	r2,13
   23e9c:	18800015 	stw	r2,0(r3)
   23ea0:	00000406 	br	23eb4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23ea4:	0023d900 	call	23d90 <alt_get_errno>
   23ea8:	1007883a 	mov	r3,r2
   23eac:	00801444 	movi	r2,81
   23eb0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23eb4:	00bfffc4 	movi	r2,-1
}
   23eb8:	e037883a 	mov	sp,fp
   23ebc:	dfc00117 	ldw	ra,4(sp)
   23ec0:	df000017 	ldw	fp,0(sp)
   23ec4:	dec00204 	addi	sp,sp,8
   23ec8:	f800283a 	ret

00023ecc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23ecc:	defffd04 	addi	sp,sp,-12
   23ed0:	dfc00215 	stw	ra,8(sp)
   23ed4:	df000115 	stw	fp,4(sp)
   23ed8:	df000104 	addi	fp,sp,4
   23edc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23ee0:	d1600604 	addi	r5,gp,-32744
   23ee4:	e13fff17 	ldw	r4,-4(fp)
   23ee8:	0025c900 	call	25c90 <alt_dev_llist_insert>
}
   23eec:	e037883a 	mov	sp,fp
   23ef0:	dfc00117 	ldw	ra,4(sp)
   23ef4:	df000017 	ldw	fp,0(sp)
   23ef8:	dec00204 	addi	sp,sp,8
   23efc:	f800283a 	ret

00023f00 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23f00:	defffd04 	addi	sp,sp,-12
   23f04:	dfc00215 	stw	ra,8(sp)
   23f08:	df000115 	stw	fp,4(sp)
   23f0c:	df000104 	addi	fp,sp,4
   23f10:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   23f14:	002663c0 	call	2663c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23f18:	00800044 	movi	r2,1
   23f1c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23f20:	0001883a 	nop
   23f24:	e037883a 	mov	sp,fp
   23f28:	dfc00117 	ldw	ra,4(sp)
   23f2c:	df000017 	ldw	fp,0(sp)
   23f30:	dec00204 	addi	sp,sp,8
   23f34:	f800283a 	ret

00023f38 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23f38:	defffe04 	addi	sp,sp,-8
   23f3c:	dfc00115 	stw	ra,4(sp)
   23f40:	df000015 	stw	fp,0(sp)
   23f44:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   23f48:	000d883a 	mov	r6,zero
   23f4c:	000b883a 	mov	r5,zero
   23f50:	010000b4 	movhi	r4,2
   23f54:	211e7304 	addi	r4,r4,31180
   23f58:	00241000 	call	24100 <altera_avalon_jtag_uart_init>
   23f5c:	010000b4 	movhi	r4,2
   23f60:	211e6904 	addi	r4,r4,31140
   23f64:	0023ecc0 	call	23ecc <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_0, lcd_0);
   23f68:	010000f4 	movhi	r4,3
   23f6c:	21228b04 	addi	r4,r4,-30164
   23f70:	002581c0 	call	2581c <altera_avalon_lcd_16207_init>
   23f74:	010000f4 	movhi	r4,3
   23f78:	21228104 	addi	r4,r4,-30204
   23f7c:	0023ecc0 	call	23ecc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   23f80:	0001883a 	nop
}
   23f84:	0001883a 	nop
   23f88:	e037883a 	mov	sp,fp
   23f8c:	dfc00117 	ldw	ra,4(sp)
   23f90:	df000017 	ldw	fp,0(sp)
   23f94:	dec00204 	addi	sp,sp,8
   23f98:	f800283a 	ret

00023f9c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23f9c:	defffa04 	addi	sp,sp,-24
   23fa0:	dfc00515 	stw	ra,20(sp)
   23fa4:	df000415 	stw	fp,16(sp)
   23fa8:	df000404 	addi	fp,sp,16
   23fac:	e13ffd15 	stw	r4,-12(fp)
   23fb0:	e17ffe15 	stw	r5,-8(fp)
   23fb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23fb8:	e0bffd17 	ldw	r2,-12(fp)
   23fbc:	10800017 	ldw	r2,0(r2)
   23fc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23fc4:	e0bffc17 	ldw	r2,-16(fp)
   23fc8:	10c00a04 	addi	r3,r2,40
   23fcc:	e0bffd17 	ldw	r2,-12(fp)
   23fd0:	10800217 	ldw	r2,8(r2)
   23fd4:	100f883a 	mov	r7,r2
   23fd8:	e1bfff17 	ldw	r6,-4(fp)
   23fdc:	e17ffe17 	ldw	r5,-8(fp)
   23fe0:	1809883a 	mov	r4,r3
   23fe4:	00245c40 	call	245c4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23fe8:	e037883a 	mov	sp,fp
   23fec:	dfc00117 	ldw	ra,4(sp)
   23ff0:	df000017 	ldw	fp,0(sp)
   23ff4:	dec00204 	addi	sp,sp,8
   23ff8:	f800283a 	ret

00023ffc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23ffc:	defffa04 	addi	sp,sp,-24
   24000:	dfc00515 	stw	ra,20(sp)
   24004:	df000415 	stw	fp,16(sp)
   24008:	df000404 	addi	fp,sp,16
   2400c:	e13ffd15 	stw	r4,-12(fp)
   24010:	e17ffe15 	stw	r5,-8(fp)
   24014:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   24018:	e0bffd17 	ldw	r2,-12(fp)
   2401c:	10800017 	ldw	r2,0(r2)
   24020:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   24024:	e0bffc17 	ldw	r2,-16(fp)
   24028:	10c00a04 	addi	r3,r2,40
   2402c:	e0bffd17 	ldw	r2,-12(fp)
   24030:	10800217 	ldw	r2,8(r2)
   24034:	100f883a 	mov	r7,r2
   24038:	e1bfff17 	ldw	r6,-4(fp)
   2403c:	e17ffe17 	ldw	r5,-8(fp)
   24040:	1809883a 	mov	r4,r3
   24044:	00247e00 	call	247e0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   24048:	e037883a 	mov	sp,fp
   2404c:	dfc00117 	ldw	ra,4(sp)
   24050:	df000017 	ldw	fp,0(sp)
   24054:	dec00204 	addi	sp,sp,8
   24058:	f800283a 	ret

0002405c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2405c:	defffc04 	addi	sp,sp,-16
   24060:	dfc00315 	stw	ra,12(sp)
   24064:	df000215 	stw	fp,8(sp)
   24068:	df000204 	addi	fp,sp,8
   2406c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   24070:	e0bfff17 	ldw	r2,-4(fp)
   24074:	10800017 	ldw	r2,0(r2)
   24078:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2407c:	e0bffe17 	ldw	r2,-8(fp)
   24080:	10c00a04 	addi	r3,r2,40
   24084:	e0bfff17 	ldw	r2,-4(fp)
   24088:	10800217 	ldw	r2,8(r2)
   2408c:	100b883a 	mov	r5,r2
   24090:	1809883a 	mov	r4,r3
   24094:	002446c0 	call	2446c <altera_avalon_jtag_uart_close>
}
   24098:	e037883a 	mov	sp,fp
   2409c:	dfc00117 	ldw	ra,4(sp)
   240a0:	df000017 	ldw	fp,0(sp)
   240a4:	dec00204 	addi	sp,sp,8
   240a8:	f800283a 	ret

000240ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   240ac:	defffa04 	addi	sp,sp,-24
   240b0:	dfc00515 	stw	ra,20(sp)
   240b4:	df000415 	stw	fp,16(sp)
   240b8:	df000404 	addi	fp,sp,16
   240bc:	e13ffd15 	stw	r4,-12(fp)
   240c0:	e17ffe15 	stw	r5,-8(fp)
   240c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   240c8:	e0bffd17 	ldw	r2,-12(fp)
   240cc:	10800017 	ldw	r2,0(r2)
   240d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   240d4:	e0bffc17 	ldw	r2,-16(fp)
   240d8:	10800a04 	addi	r2,r2,40
   240dc:	e1bfff17 	ldw	r6,-4(fp)
   240e0:	e17ffe17 	ldw	r5,-8(fp)
   240e4:	1009883a 	mov	r4,r2
   240e8:	00244d40 	call	244d4 <altera_avalon_jtag_uart_ioctl>
}
   240ec:	e037883a 	mov	sp,fp
   240f0:	dfc00117 	ldw	ra,4(sp)
   240f4:	df000017 	ldw	fp,0(sp)
   240f8:	dec00204 	addi	sp,sp,8
   240fc:	f800283a 	ret

00024100 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   24100:	defffa04 	addi	sp,sp,-24
   24104:	dfc00515 	stw	ra,20(sp)
   24108:	df000415 	stw	fp,16(sp)
   2410c:	df000404 	addi	fp,sp,16
   24110:	e13ffd15 	stw	r4,-12(fp)
   24114:	e17ffe15 	stw	r5,-8(fp)
   24118:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2411c:	e0bffd17 	ldw	r2,-12(fp)
   24120:	00c00044 	movi	r3,1
   24124:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   24128:	e0bffd17 	ldw	r2,-12(fp)
   2412c:	10800017 	ldw	r2,0(r2)
   24130:	10800104 	addi	r2,r2,4
   24134:	1007883a 	mov	r3,r2
   24138:	e0bffd17 	ldw	r2,-12(fp)
   2413c:	10800817 	ldw	r2,32(r2)
   24140:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   24144:	e0bffe17 	ldw	r2,-8(fp)
   24148:	e0ffff17 	ldw	r3,-4(fp)
   2414c:	d8000015 	stw	zero,0(sp)
   24150:	e1fffd17 	ldw	r7,-12(fp)
   24154:	018000b4 	movhi	r6,2
   24158:	31907004 	addi	r6,r6,16832
   2415c:	180b883a 	mov	r5,r3
   24160:	1009883a 	mov	r4,r2
   24164:	0025e140 	call	25e14 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   24168:	e0bffd17 	ldw	r2,-12(fp)
   2416c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   24170:	e0bffd17 	ldw	r2,-12(fp)
   24174:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   24178:	d0e6fd17 	ldw	r3,-25612(gp)
   2417c:	e1fffd17 	ldw	r7,-12(fp)
   24180:	018000b4 	movhi	r6,2
   24184:	3190f304 	addi	r6,r6,17356
   24188:	180b883a 	mov	r5,r3
   2418c:	1009883a 	mov	r4,r2
   24190:	00259b00 	call	259b0 <alt_alarm_start>
   24194:	1000040e 	bge	r2,zero,241a8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   24198:	e0fffd17 	ldw	r3,-12(fp)
   2419c:	00a00034 	movhi	r2,32768
   241a0:	10bfffc4 	addi	r2,r2,-1
   241a4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   241a8:	0001883a 	nop
   241ac:	e037883a 	mov	sp,fp
   241b0:	dfc00117 	ldw	ra,4(sp)
   241b4:	df000017 	ldw	fp,0(sp)
   241b8:	dec00204 	addi	sp,sp,8
   241bc:	f800283a 	ret

000241c0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   241c0:	defff804 	addi	sp,sp,-32
   241c4:	df000715 	stw	fp,28(sp)
   241c8:	df000704 	addi	fp,sp,28
   241cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   241d0:	e0bfff17 	ldw	r2,-4(fp)
   241d4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   241d8:	e0bffb17 	ldw	r2,-20(fp)
   241dc:	10800017 	ldw	r2,0(r2)
   241e0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   241e4:	e0bffc17 	ldw	r2,-16(fp)
   241e8:	10800104 	addi	r2,r2,4
   241ec:	10800037 	ldwio	r2,0(r2)
   241f0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   241f4:	e0bffd17 	ldw	r2,-12(fp)
   241f8:	1080c00c 	andi	r2,r2,768
   241fc:	10006d26 	beq	r2,zero,243b4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   24200:	e0bffd17 	ldw	r2,-12(fp)
   24204:	1080400c 	andi	r2,r2,256
   24208:	10003526 	beq	r2,zero,242e0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2420c:	00800074 	movhi	r2,1
   24210:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24214:	e0bffb17 	ldw	r2,-20(fp)
   24218:	10800a17 	ldw	r2,40(r2)
   2421c:	10800044 	addi	r2,r2,1
   24220:	1081ffcc 	andi	r2,r2,2047
   24224:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   24228:	e0bffb17 	ldw	r2,-20(fp)
   2422c:	10c00b17 	ldw	r3,44(r2)
   24230:	e0bffe17 	ldw	r2,-8(fp)
   24234:	18801526 	beq	r3,r2,2428c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   24238:	e0bffc17 	ldw	r2,-16(fp)
   2423c:	10800037 	ldwio	r2,0(r2)
   24240:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   24244:	e0bff917 	ldw	r2,-28(fp)
   24248:	10a0000c 	andi	r2,r2,32768
   2424c:	10001126 	beq	r2,zero,24294 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   24250:	e0bffb17 	ldw	r2,-20(fp)
   24254:	10800a17 	ldw	r2,40(r2)
   24258:	e0fff917 	ldw	r3,-28(fp)
   2425c:	1809883a 	mov	r4,r3
   24260:	e0fffb17 	ldw	r3,-20(fp)
   24264:	1885883a 	add	r2,r3,r2
   24268:	10800e04 	addi	r2,r2,56
   2426c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24270:	e0bffb17 	ldw	r2,-20(fp)
   24274:	10800a17 	ldw	r2,40(r2)
   24278:	10800044 	addi	r2,r2,1
   2427c:	10c1ffcc 	andi	r3,r2,2047
   24280:	e0bffb17 	ldw	r2,-20(fp)
   24284:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   24288:	003fe206 	br	24214 <__alt_data_end+0xfffebb74>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2428c:	0001883a 	nop
   24290:	00000106 	br	24298 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   24294:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   24298:	e0bff917 	ldw	r2,-28(fp)
   2429c:	10bfffec 	andhi	r2,r2,65535
   242a0:	10000f26 	beq	r2,zero,242e0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   242a4:	e0bffb17 	ldw	r2,-20(fp)
   242a8:	10c00817 	ldw	r3,32(r2)
   242ac:	00bfff84 	movi	r2,-2
   242b0:	1886703a 	and	r3,r3,r2
   242b4:	e0bffb17 	ldw	r2,-20(fp)
   242b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   242bc:	e0bffc17 	ldw	r2,-16(fp)
   242c0:	10800104 	addi	r2,r2,4
   242c4:	1007883a 	mov	r3,r2
   242c8:	e0bffb17 	ldw	r2,-20(fp)
   242cc:	10800817 	ldw	r2,32(r2)
   242d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   242d4:	e0bffc17 	ldw	r2,-16(fp)
   242d8:	10800104 	addi	r2,r2,4
   242dc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   242e0:	e0bffd17 	ldw	r2,-12(fp)
   242e4:	1080800c 	andi	r2,r2,512
   242e8:	103fbe26 	beq	r2,zero,241e4 <__alt_data_end+0xfffebb44>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   242ec:	e0bffd17 	ldw	r2,-12(fp)
   242f0:	1004d43a 	srli	r2,r2,16
   242f4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   242f8:	00001406 	br	2434c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   242fc:	e0bffc17 	ldw	r2,-16(fp)
   24300:	e0fffb17 	ldw	r3,-20(fp)
   24304:	18c00d17 	ldw	r3,52(r3)
   24308:	e13ffb17 	ldw	r4,-20(fp)
   2430c:	20c7883a 	add	r3,r4,r3
   24310:	18c20e04 	addi	r3,r3,2104
   24314:	18c00003 	ldbu	r3,0(r3)
   24318:	18c03fcc 	andi	r3,r3,255
   2431c:	18c0201c 	xori	r3,r3,128
   24320:	18ffe004 	addi	r3,r3,-128
   24324:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24328:	e0bffb17 	ldw	r2,-20(fp)
   2432c:	10800d17 	ldw	r2,52(r2)
   24330:	10800044 	addi	r2,r2,1
   24334:	10c1ffcc 	andi	r3,r2,2047
   24338:	e0bffb17 	ldw	r2,-20(fp)
   2433c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   24340:	e0bffa17 	ldw	r2,-24(fp)
   24344:	10bfffc4 	addi	r2,r2,-1
   24348:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2434c:	e0bffa17 	ldw	r2,-24(fp)
   24350:	10000526 	beq	r2,zero,24368 <altera_avalon_jtag_uart_irq+0x1a8>
   24354:	e0bffb17 	ldw	r2,-20(fp)
   24358:	10c00d17 	ldw	r3,52(r2)
   2435c:	e0bffb17 	ldw	r2,-20(fp)
   24360:	10800c17 	ldw	r2,48(r2)
   24364:	18bfe51e 	bne	r3,r2,242fc <__alt_data_end+0xfffebc5c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   24368:	e0bffa17 	ldw	r2,-24(fp)
   2436c:	103f9d26 	beq	r2,zero,241e4 <__alt_data_end+0xfffebb44>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24370:	e0bffb17 	ldw	r2,-20(fp)
   24374:	10c00817 	ldw	r3,32(r2)
   24378:	00bfff44 	movi	r2,-3
   2437c:	1886703a 	and	r3,r3,r2
   24380:	e0bffb17 	ldw	r2,-20(fp)
   24384:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24388:	e0bffb17 	ldw	r2,-20(fp)
   2438c:	10800017 	ldw	r2,0(r2)
   24390:	10800104 	addi	r2,r2,4
   24394:	1007883a 	mov	r3,r2
   24398:	e0bffb17 	ldw	r2,-20(fp)
   2439c:	10800817 	ldw	r2,32(r2)
   243a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   243a4:	e0bffc17 	ldw	r2,-16(fp)
   243a8:	10800104 	addi	r2,r2,4
   243ac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   243b0:	003f8c06 	br	241e4 <__alt_data_end+0xfffebb44>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   243b4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   243b8:	0001883a 	nop
   243bc:	e037883a 	mov	sp,fp
   243c0:	df000017 	ldw	fp,0(sp)
   243c4:	dec00104 	addi	sp,sp,4
   243c8:	f800283a 	ret

000243cc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   243cc:	defff804 	addi	sp,sp,-32
   243d0:	df000715 	stw	fp,28(sp)
   243d4:	df000704 	addi	fp,sp,28
   243d8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   243dc:	e0bffb17 	ldw	r2,-20(fp)
   243e0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   243e4:	e0bff917 	ldw	r2,-28(fp)
   243e8:	10800017 	ldw	r2,0(r2)
   243ec:	10800104 	addi	r2,r2,4
   243f0:	10800037 	ldwio	r2,0(r2)
   243f4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   243f8:	e0bffa17 	ldw	r2,-24(fp)
   243fc:	1081000c 	andi	r2,r2,1024
   24400:	10000b26 	beq	r2,zero,24430 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   24404:	e0bff917 	ldw	r2,-28(fp)
   24408:	10800017 	ldw	r2,0(r2)
   2440c:	10800104 	addi	r2,r2,4
   24410:	1007883a 	mov	r3,r2
   24414:	e0bff917 	ldw	r2,-28(fp)
   24418:	10800817 	ldw	r2,32(r2)
   2441c:	10810014 	ori	r2,r2,1024
   24420:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   24424:	e0bff917 	ldw	r2,-28(fp)
   24428:	10000915 	stw	zero,36(r2)
   2442c:	00000a06 	br	24458 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   24430:	e0bff917 	ldw	r2,-28(fp)
   24434:	10c00917 	ldw	r3,36(r2)
   24438:	00a00034 	movhi	r2,32768
   2443c:	10bfff04 	addi	r2,r2,-4
   24440:	10c00536 	bltu	r2,r3,24458 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   24444:	e0bff917 	ldw	r2,-28(fp)
   24448:	10800917 	ldw	r2,36(r2)
   2444c:	10c00044 	addi	r3,r2,1
   24450:	e0bff917 	ldw	r2,-28(fp)
   24454:	10c00915 	stw	r3,36(r2)
   24458:	d0a6fd17 	ldw	r2,-25612(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2445c:	e037883a 	mov	sp,fp
   24460:	df000017 	ldw	fp,0(sp)
   24464:	dec00104 	addi	sp,sp,4
   24468:	f800283a 	ret

0002446c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2446c:	defffd04 	addi	sp,sp,-12
   24470:	df000215 	stw	fp,8(sp)
   24474:	df000204 	addi	fp,sp,8
   24478:	e13ffe15 	stw	r4,-8(fp)
   2447c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   24480:	00000506 	br	24498 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   24484:	e0bfff17 	ldw	r2,-4(fp)
   24488:	1090000c 	andi	r2,r2,16384
   2448c:	10000226 	beq	r2,zero,24498 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   24490:	00bffd44 	movi	r2,-11
   24494:	00000b06 	br	244c4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   24498:	e0bffe17 	ldw	r2,-8(fp)
   2449c:	10c00d17 	ldw	r3,52(r2)
   244a0:	e0bffe17 	ldw	r2,-8(fp)
   244a4:	10800c17 	ldw	r2,48(r2)
   244a8:	18800526 	beq	r3,r2,244c0 <altera_avalon_jtag_uart_close+0x54>
   244ac:	e0bffe17 	ldw	r2,-8(fp)
   244b0:	10c00917 	ldw	r3,36(r2)
   244b4:	e0bffe17 	ldw	r2,-8(fp)
   244b8:	10800117 	ldw	r2,4(r2)
   244bc:	18bff136 	bltu	r3,r2,24484 <__alt_data_end+0xfffebde4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   244c0:	0005883a 	mov	r2,zero
}
   244c4:	e037883a 	mov	sp,fp
   244c8:	df000017 	ldw	fp,0(sp)
   244cc:	dec00104 	addi	sp,sp,4
   244d0:	f800283a 	ret

000244d4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   244d4:	defffa04 	addi	sp,sp,-24
   244d8:	df000515 	stw	fp,20(sp)
   244dc:	df000504 	addi	fp,sp,20
   244e0:	e13ffd15 	stw	r4,-12(fp)
   244e4:	e17ffe15 	stw	r5,-8(fp)
   244e8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   244ec:	00bff9c4 	movi	r2,-25
   244f0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   244f4:	e0bffe17 	ldw	r2,-8(fp)
   244f8:	10da8060 	cmpeqi	r3,r2,27137
   244fc:	1800031e 	bne	r3,zero,2450c <altera_avalon_jtag_uart_ioctl+0x38>
   24500:	109a80a0 	cmpeqi	r2,r2,27138
   24504:	1000181e 	bne	r2,zero,24568 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   24508:	00002906 	br	245b0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2450c:	e0bffd17 	ldw	r2,-12(fp)
   24510:	10c00117 	ldw	r3,4(r2)
   24514:	00a00034 	movhi	r2,32768
   24518:	10bfffc4 	addi	r2,r2,-1
   2451c:	18802126 	beq	r3,r2,245a4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   24520:	e0bfff17 	ldw	r2,-4(fp)
   24524:	10800017 	ldw	r2,0(r2)
   24528:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2452c:	e0bffc17 	ldw	r2,-16(fp)
   24530:	10800090 	cmplti	r2,r2,2
   24534:	1000061e 	bne	r2,zero,24550 <altera_avalon_jtag_uart_ioctl+0x7c>
   24538:	e0fffc17 	ldw	r3,-16(fp)
   2453c:	00a00034 	movhi	r2,32768
   24540:	10bfffc4 	addi	r2,r2,-1
   24544:	18800226 	beq	r3,r2,24550 <altera_avalon_jtag_uart_ioctl+0x7c>
   24548:	e0bffc17 	ldw	r2,-16(fp)
   2454c:	00000206 	br	24558 <altera_avalon_jtag_uart_ioctl+0x84>
   24550:	00a00034 	movhi	r2,32768
   24554:	10bfff84 	addi	r2,r2,-2
   24558:	e0fffd17 	ldw	r3,-12(fp)
   2455c:	18800115 	stw	r2,4(r3)
      rc = 0;
   24560:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   24564:	00000f06 	br	245a4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   24568:	e0bffd17 	ldw	r2,-12(fp)
   2456c:	10c00117 	ldw	r3,4(r2)
   24570:	00a00034 	movhi	r2,32768
   24574:	10bfffc4 	addi	r2,r2,-1
   24578:	18800c26 	beq	r3,r2,245ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2457c:	e0bffd17 	ldw	r2,-12(fp)
   24580:	10c00917 	ldw	r3,36(r2)
   24584:	e0bffd17 	ldw	r2,-12(fp)
   24588:	10800117 	ldw	r2,4(r2)
   2458c:	1885803a 	cmpltu	r2,r3,r2
   24590:	10c03fcc 	andi	r3,r2,255
   24594:	e0bfff17 	ldw	r2,-4(fp)
   24598:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2459c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   245a0:	00000206 	br	245ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   245a4:	0001883a 	nop
   245a8:	00000106 	br	245b0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   245ac:	0001883a 	nop

  default:
    break;
  }

  return rc;
   245b0:	e0bffb17 	ldw	r2,-20(fp)
}
   245b4:	e037883a 	mov	sp,fp
   245b8:	df000017 	ldw	fp,0(sp)
   245bc:	dec00104 	addi	sp,sp,4
   245c0:	f800283a 	ret

000245c4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   245c4:	defff304 	addi	sp,sp,-52
   245c8:	dfc00c15 	stw	ra,48(sp)
   245cc:	df000b15 	stw	fp,44(sp)
   245d0:	df000b04 	addi	fp,sp,44
   245d4:	e13ffc15 	stw	r4,-16(fp)
   245d8:	e17ffd15 	stw	r5,-12(fp)
   245dc:	e1bffe15 	stw	r6,-8(fp)
   245e0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   245e4:	e0bffd17 	ldw	r2,-12(fp)
   245e8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   245ec:	00004706 	br	2470c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   245f0:	e0bffc17 	ldw	r2,-16(fp)
   245f4:	10800a17 	ldw	r2,40(r2)
   245f8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   245fc:	e0bffc17 	ldw	r2,-16(fp)
   24600:	10800b17 	ldw	r2,44(r2)
   24604:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   24608:	e0fff717 	ldw	r3,-36(fp)
   2460c:	e0bff817 	ldw	r2,-32(fp)
   24610:	18800536 	bltu	r3,r2,24628 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   24614:	e0fff717 	ldw	r3,-36(fp)
   24618:	e0bff817 	ldw	r2,-32(fp)
   2461c:	1885c83a 	sub	r2,r3,r2
   24620:	e0bff615 	stw	r2,-40(fp)
   24624:	00000406 	br	24638 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   24628:	00c20004 	movi	r3,2048
   2462c:	e0bff817 	ldw	r2,-32(fp)
   24630:	1885c83a 	sub	r2,r3,r2
   24634:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   24638:	e0bff617 	ldw	r2,-40(fp)
   2463c:	10001e26 	beq	r2,zero,246b8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   24640:	e0fffe17 	ldw	r3,-8(fp)
   24644:	e0bff617 	ldw	r2,-40(fp)
   24648:	1880022e 	bgeu	r3,r2,24654 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   2464c:	e0bffe17 	ldw	r2,-8(fp)
   24650:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   24654:	e0bffc17 	ldw	r2,-16(fp)
   24658:	10c00e04 	addi	r3,r2,56
   2465c:	e0bff817 	ldw	r2,-32(fp)
   24660:	1885883a 	add	r2,r3,r2
   24664:	e1bff617 	ldw	r6,-40(fp)
   24668:	100b883a 	mov	r5,r2
   2466c:	e13ff517 	ldw	r4,-44(fp)
   24670:	0021b800 	call	21b80 <memcpy>
      ptr   += n;
   24674:	e0fff517 	ldw	r3,-44(fp)
   24678:	e0bff617 	ldw	r2,-40(fp)
   2467c:	1885883a 	add	r2,r3,r2
   24680:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   24684:	e0fffe17 	ldw	r3,-8(fp)
   24688:	e0bff617 	ldw	r2,-40(fp)
   2468c:	1885c83a 	sub	r2,r3,r2
   24690:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24694:	e0fff817 	ldw	r3,-32(fp)
   24698:	e0bff617 	ldw	r2,-40(fp)
   2469c:	1885883a 	add	r2,r3,r2
   246a0:	10c1ffcc 	andi	r3,r2,2047
   246a4:	e0bffc17 	ldw	r2,-16(fp)
   246a8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   246ac:	e0bffe17 	ldw	r2,-8(fp)
   246b0:	00bfcf16 	blt	zero,r2,245f0 <__alt_data_end+0xfffebf50>
   246b4:	00000106 	br	246bc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   246b8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   246bc:	e0fff517 	ldw	r3,-44(fp)
   246c0:	e0bffd17 	ldw	r2,-12(fp)
   246c4:	1880141e 	bne	r3,r2,24718 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   246c8:	e0bfff17 	ldw	r2,-4(fp)
   246cc:	1090000c 	andi	r2,r2,16384
   246d0:	1000131e 	bne	r2,zero,24720 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   246d4:	0001883a 	nop
   246d8:	e0bffc17 	ldw	r2,-16(fp)
   246dc:	10c00a17 	ldw	r3,40(r2)
   246e0:	e0bff717 	ldw	r2,-36(fp)
   246e4:	1880051e 	bne	r3,r2,246fc <altera_avalon_jtag_uart_read+0x138>
   246e8:	e0bffc17 	ldw	r2,-16(fp)
   246ec:	10c00917 	ldw	r3,36(r2)
   246f0:	e0bffc17 	ldw	r2,-16(fp)
   246f4:	10800117 	ldw	r2,4(r2)
   246f8:	18bff736 	bltu	r3,r2,246d8 <__alt_data_end+0xfffec038>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   246fc:	e0bffc17 	ldw	r2,-16(fp)
   24700:	10c00a17 	ldw	r3,40(r2)
   24704:	e0bff717 	ldw	r2,-36(fp)
   24708:	18800726 	beq	r3,r2,24728 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2470c:	e0bffe17 	ldw	r2,-8(fp)
   24710:	00bfb716 	blt	zero,r2,245f0 <__alt_data_end+0xfffebf50>
   24714:	00000506 	br	2472c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   24718:	0001883a 	nop
   2471c:	00000306 	br	2472c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   24720:	0001883a 	nop
   24724:	00000106 	br	2472c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   24728:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2472c:	e0fff517 	ldw	r3,-44(fp)
   24730:	e0bffd17 	ldw	r2,-12(fp)
   24734:	18801826 	beq	r3,r2,24798 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24738:	0005303a 	rdctl	r2,status
   2473c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24740:	e0fffb17 	ldw	r3,-20(fp)
   24744:	00bfff84 	movi	r2,-2
   24748:	1884703a 	and	r2,r3,r2
   2474c:	1001703a 	wrctl	status,r2
  
  return context;
   24750:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   24754:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24758:	e0bffc17 	ldw	r2,-16(fp)
   2475c:	10800817 	ldw	r2,32(r2)
   24760:	10c00054 	ori	r3,r2,1
   24764:	e0bffc17 	ldw	r2,-16(fp)
   24768:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2476c:	e0bffc17 	ldw	r2,-16(fp)
   24770:	10800017 	ldw	r2,0(r2)
   24774:	10800104 	addi	r2,r2,4
   24778:	1007883a 	mov	r3,r2
   2477c:	e0bffc17 	ldw	r2,-16(fp)
   24780:	10800817 	ldw	r2,32(r2)
   24784:	18800035 	stwio	r2,0(r3)
   24788:	e0bffa17 	ldw	r2,-24(fp)
   2478c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24790:	e0bff917 	ldw	r2,-28(fp)
   24794:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   24798:	e0fff517 	ldw	r3,-44(fp)
   2479c:	e0bffd17 	ldw	r2,-12(fp)
   247a0:	18800426 	beq	r3,r2,247b4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   247a4:	e0fff517 	ldw	r3,-44(fp)
   247a8:	e0bffd17 	ldw	r2,-12(fp)
   247ac:	1885c83a 	sub	r2,r3,r2
   247b0:	00000606 	br	247cc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   247b4:	e0bfff17 	ldw	r2,-4(fp)
   247b8:	1090000c 	andi	r2,r2,16384
   247bc:	10000226 	beq	r2,zero,247c8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   247c0:	00bffd44 	movi	r2,-11
   247c4:	00000106 	br	247cc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   247c8:	00bffec4 	movi	r2,-5
}
   247cc:	e037883a 	mov	sp,fp
   247d0:	dfc00117 	ldw	ra,4(sp)
   247d4:	df000017 	ldw	fp,0(sp)
   247d8:	dec00204 	addi	sp,sp,8
   247dc:	f800283a 	ret

000247e0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   247e0:	defff304 	addi	sp,sp,-52
   247e4:	dfc00c15 	stw	ra,48(sp)
   247e8:	df000b15 	stw	fp,44(sp)
   247ec:	df000b04 	addi	fp,sp,44
   247f0:	e13ffc15 	stw	r4,-16(fp)
   247f4:	e17ffd15 	stw	r5,-12(fp)
   247f8:	e1bffe15 	stw	r6,-8(fp)
   247fc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   24800:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   24804:	e0bffd17 	ldw	r2,-12(fp)
   24808:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2480c:	00003706 	br	248ec <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   24810:	e0bffc17 	ldw	r2,-16(fp)
   24814:	10800c17 	ldw	r2,48(r2)
   24818:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   2481c:	e0bffc17 	ldw	r2,-16(fp)
   24820:	10800d17 	ldw	r2,52(r2)
   24824:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   24828:	e0fff917 	ldw	r3,-28(fp)
   2482c:	e0bff517 	ldw	r2,-44(fp)
   24830:	1880062e 	bgeu	r3,r2,2484c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   24834:	e0fff517 	ldw	r3,-44(fp)
   24838:	e0bff917 	ldw	r2,-28(fp)
   2483c:	1885c83a 	sub	r2,r3,r2
   24840:	10bfffc4 	addi	r2,r2,-1
   24844:	e0bff615 	stw	r2,-40(fp)
   24848:	00000b06 	br	24878 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2484c:	e0bff517 	ldw	r2,-44(fp)
   24850:	10000526 	beq	r2,zero,24868 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   24854:	00c20004 	movi	r3,2048
   24858:	e0bff917 	ldw	r2,-28(fp)
   2485c:	1885c83a 	sub	r2,r3,r2
   24860:	e0bff615 	stw	r2,-40(fp)
   24864:	00000406 	br	24878 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   24868:	00c1ffc4 	movi	r3,2047
   2486c:	e0bff917 	ldw	r2,-28(fp)
   24870:	1885c83a 	sub	r2,r3,r2
   24874:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   24878:	e0bff617 	ldw	r2,-40(fp)
   2487c:	10001e26 	beq	r2,zero,248f8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   24880:	e0fffe17 	ldw	r3,-8(fp)
   24884:	e0bff617 	ldw	r2,-40(fp)
   24888:	1880022e 	bgeu	r3,r2,24894 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2488c:	e0bffe17 	ldw	r2,-8(fp)
   24890:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   24894:	e0bffc17 	ldw	r2,-16(fp)
   24898:	10c20e04 	addi	r3,r2,2104
   2489c:	e0bff917 	ldw	r2,-28(fp)
   248a0:	1885883a 	add	r2,r3,r2
   248a4:	e1bff617 	ldw	r6,-40(fp)
   248a8:	e17ffd17 	ldw	r5,-12(fp)
   248ac:	1009883a 	mov	r4,r2
   248b0:	0021b800 	call	21b80 <memcpy>
      ptr   += n;
   248b4:	e0fffd17 	ldw	r3,-12(fp)
   248b8:	e0bff617 	ldw	r2,-40(fp)
   248bc:	1885883a 	add	r2,r3,r2
   248c0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   248c4:	e0fffe17 	ldw	r3,-8(fp)
   248c8:	e0bff617 	ldw	r2,-40(fp)
   248cc:	1885c83a 	sub	r2,r3,r2
   248d0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   248d4:	e0fff917 	ldw	r3,-28(fp)
   248d8:	e0bff617 	ldw	r2,-40(fp)
   248dc:	1885883a 	add	r2,r3,r2
   248e0:	10c1ffcc 	andi	r3,r2,2047
   248e4:	e0bffc17 	ldw	r2,-16(fp)
   248e8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   248ec:	e0bffe17 	ldw	r2,-8(fp)
   248f0:	00bfc716 	blt	zero,r2,24810 <__alt_data_end+0xfffec170>
   248f4:	00000106 	br	248fc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   248f8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   248fc:	0005303a 	rdctl	r2,status
   24900:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24904:	e0fffb17 	ldw	r3,-20(fp)
   24908:	00bfff84 	movi	r2,-2
   2490c:	1884703a 	and	r2,r3,r2
   24910:	1001703a 	wrctl	status,r2
  
  return context;
   24914:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   24918:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2491c:	e0bffc17 	ldw	r2,-16(fp)
   24920:	10800817 	ldw	r2,32(r2)
   24924:	10c00094 	ori	r3,r2,2
   24928:	e0bffc17 	ldw	r2,-16(fp)
   2492c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24930:	e0bffc17 	ldw	r2,-16(fp)
   24934:	10800017 	ldw	r2,0(r2)
   24938:	10800104 	addi	r2,r2,4
   2493c:	1007883a 	mov	r3,r2
   24940:	e0bffc17 	ldw	r2,-16(fp)
   24944:	10800817 	ldw	r2,32(r2)
   24948:	18800035 	stwio	r2,0(r3)
   2494c:	e0bffa17 	ldw	r2,-24(fp)
   24950:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24954:	e0bff817 	ldw	r2,-32(fp)
   24958:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2495c:	e0bffe17 	ldw	r2,-8(fp)
   24960:	0080100e 	bge	zero,r2,249a4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   24964:	e0bfff17 	ldw	r2,-4(fp)
   24968:	1090000c 	andi	r2,r2,16384
   2496c:	1000101e 	bne	r2,zero,249b0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   24970:	0001883a 	nop
   24974:	e0bffc17 	ldw	r2,-16(fp)
   24978:	10c00d17 	ldw	r3,52(r2)
   2497c:	e0bff517 	ldw	r2,-44(fp)
   24980:	1880051e 	bne	r3,r2,24998 <altera_avalon_jtag_uart_write+0x1b8>
   24984:	e0bffc17 	ldw	r2,-16(fp)
   24988:	10c00917 	ldw	r3,36(r2)
   2498c:	e0bffc17 	ldw	r2,-16(fp)
   24990:	10800117 	ldw	r2,4(r2)
   24994:	18bff736 	bltu	r3,r2,24974 <__alt_data_end+0xfffec2d4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   24998:	e0bffc17 	ldw	r2,-16(fp)
   2499c:	10800917 	ldw	r2,36(r2)
   249a0:	1000051e 	bne	r2,zero,249b8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   249a4:	e0bffe17 	ldw	r2,-8(fp)
   249a8:	00bfd016 	blt	zero,r2,248ec <__alt_data_end+0xfffec24c>
   249ac:	00000306 	br	249bc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   249b0:	0001883a 	nop
   249b4:	00000106 	br	249bc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   249b8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   249bc:	e0fffd17 	ldw	r3,-12(fp)
   249c0:	e0bff717 	ldw	r2,-36(fp)
   249c4:	18800426 	beq	r3,r2,249d8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   249c8:	e0fffd17 	ldw	r3,-12(fp)
   249cc:	e0bff717 	ldw	r2,-36(fp)
   249d0:	1885c83a 	sub	r2,r3,r2
   249d4:	00000606 	br	249f0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   249d8:	e0bfff17 	ldw	r2,-4(fp)
   249dc:	1090000c 	andi	r2,r2,16384
   249e0:	10000226 	beq	r2,zero,249ec <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   249e4:	00bffd44 	movi	r2,-11
   249e8:	00000106 	br	249f0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   249ec:	00bffec4 	movi	r2,-5
}
   249f0:	e037883a 	mov	sp,fp
   249f4:	dfc00117 	ldw	ra,4(sp)
   249f8:	df000017 	ldw	fp,0(sp)
   249fc:	dec00204 	addi	sp,sp,8
   24a00:	f800283a 	ret

00024a04 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
   24a04:	defffa04 	addi	sp,sp,-24
   24a08:	dfc00515 	stw	ra,20(sp)
   24a0c:	df000415 	stw	fp,16(sp)
   24a10:	df000404 	addi	fp,sp,16
   24a14:	e13ffe15 	stw	r4,-8(fp)
   24a18:	2805883a 	mov	r2,r5
   24a1c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   24a20:	e0bffe17 	ldw	r2,-8(fp)
   24a24:	10800017 	ldw	r2,0(r2)
   24a28:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   24a2c:	008003f4 	movhi	r2,15
   24a30:	10909004 	addi	r2,r2,16960
   24a34:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   24a38:	e0bffe17 	ldw	r2,-8(fp)
   24a3c:	10800803 	ldbu	r2,32(r2)
   24a40:	10803fcc 	andi	r2,r2,255
   24a44:	1080201c 	xori	r2,r2,128
   24a48:	10bfe004 	addi	r2,r2,-128
   24a4c:	1000151e 	bne	r2,zero,24aa4 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   24a50:	00000906 	br	24a78 <lcd_write_command+0x74>
    if (--i == 0)
   24a54:	e0bffc17 	ldw	r2,-16(fp)
   24a58:	10bfffc4 	addi	r2,r2,-1
   24a5c:	e0bffc15 	stw	r2,-16(fp)
   24a60:	e0bffc17 	ldw	r2,-16(fp)
   24a64:	1000041e 	bne	r2,zero,24a78 <lcd_write_command+0x74>
    {
      sp->broken = 1;
   24a68:	e0bffe17 	ldw	r2,-8(fp)
   24a6c:	00c00044 	movi	r3,1
   24a70:	10c00805 	stb	r3,32(r2)
      return;
   24a74:	00000c06 	br	24aa8 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   24a78:	e0bffd17 	ldw	r2,-12(fp)
   24a7c:	10800104 	addi	r2,r2,4
   24a80:	10800037 	ldwio	r2,0(r2)
   24a84:	1080200c 	andi	r2,r2,128
   24a88:	103ff21e 	bne	r2,zero,24a54 <__alt_data_end+0xfffec3b4>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   24a8c:	01001904 	movi	r4,100
   24a90:	0023d600 	call	23d60 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
   24a94:	e0bffd17 	ldw	r2,-12(fp)
   24a98:	e0ffff03 	ldbu	r3,-4(fp)
   24a9c:	10c00035 	stwio	r3,0(r2)
   24aa0:	00000106 	br	24aa8 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   24aa4:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
   24aa8:	e037883a 	mov	sp,fp
   24aac:	dfc00117 	ldw	ra,4(sp)
   24ab0:	df000017 	ldw	fp,0(sp)
   24ab4:	dec00204 	addi	sp,sp,8
   24ab8:	f800283a 	ret

00024abc <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
   24abc:	defffa04 	addi	sp,sp,-24
   24ac0:	dfc00515 	stw	ra,20(sp)
   24ac4:	df000415 	stw	fp,16(sp)
   24ac8:	df000404 	addi	fp,sp,16
   24acc:	e13ffe15 	stw	r4,-8(fp)
   24ad0:	2805883a 	mov	r2,r5
   24ad4:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   24ad8:	e0bffe17 	ldw	r2,-8(fp)
   24adc:	10800017 	ldw	r2,0(r2)
   24ae0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   24ae4:	008003f4 	movhi	r2,15
   24ae8:	10909004 	addi	r2,r2,16960
   24aec:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   24af0:	e0bffe17 	ldw	r2,-8(fp)
   24af4:	10800803 	ldbu	r2,32(r2)
   24af8:	10803fcc 	andi	r2,r2,255
   24afc:	1080201c 	xori	r2,r2,128
   24b00:	10bfe004 	addi	r2,r2,-128
   24b04:	10001d1e 	bne	r2,zero,24b7c <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   24b08:	00000906 	br	24b30 <lcd_write_data+0x74>
    if (--i == 0)
   24b0c:	e0bffc17 	ldw	r2,-16(fp)
   24b10:	10bfffc4 	addi	r2,r2,-1
   24b14:	e0bffc15 	stw	r2,-16(fp)
   24b18:	e0bffc17 	ldw	r2,-16(fp)
   24b1c:	1000041e 	bne	r2,zero,24b30 <lcd_write_data+0x74>
    {
      sp->broken = 1;
   24b20:	e0bffe17 	ldw	r2,-8(fp)
   24b24:	00c00044 	movi	r3,1
   24b28:	10c00805 	stb	r3,32(r2)
      return;
   24b2c:	00001406 	br	24b80 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   24b30:	e0bffd17 	ldw	r2,-12(fp)
   24b34:	10800104 	addi	r2,r2,4
   24b38:	10800037 	ldwio	r2,0(r2)
   24b3c:	1080200c 	andi	r2,r2,128
   24b40:	103ff21e 	bne	r2,zero,24b0c <__alt_data_end+0xfffec46c>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   24b44:	01001904 	movi	r4,100
   24b48:	0023d600 	call	23d60 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
   24b4c:	e0bffd17 	ldw	r2,-12(fp)
   24b50:	10800204 	addi	r2,r2,8
   24b54:	1007883a 	mov	r3,r2
   24b58:	e0bfff03 	ldbu	r2,-4(fp)
   24b5c:	18800035 	stwio	r2,0(r3)

  sp->address++;
   24b60:	e0bffe17 	ldw	r2,-8(fp)
   24b64:	108008c3 	ldbu	r2,35(r2)
   24b68:	10800044 	addi	r2,r2,1
   24b6c:	1007883a 	mov	r3,r2
   24b70:	e0bffe17 	ldw	r2,-8(fp)
   24b74:	10c008c5 	stb	r3,35(r2)
   24b78:	00000106 	br	24b80 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   24b7c:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
   24b80:	e037883a 	mov	sp,fp
   24b84:	dfc00117 	ldw	ra,4(sp)
   24b88:	df000017 	ldw	fp,0(sp)
   24b8c:	dec00204 	addi	sp,sp,8
   24b90:	f800283a 	ret

00024b94 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
   24b94:	defffb04 	addi	sp,sp,-20
   24b98:	dfc00415 	stw	ra,16(sp)
   24b9c:	df000315 	stw	fp,12(sp)
   24ba0:	dc000215 	stw	r16,8(sp)
   24ba4:	df000304 	addi	fp,sp,12
   24ba8:	e13ffe15 	stw	r4,-8(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
   24bac:	01400044 	movi	r5,1
   24bb0:	e13ffe17 	ldw	r4,-8(fp)
   24bb4:	0024a040 	call	24a04 <lcd_write_command>

  sp->x = 0;
   24bb8:	e0bffe17 	ldw	r2,-8(fp)
   24bbc:	10000845 	stb	zero,33(r2)
  sp->y = 0;
   24bc0:	e0bffe17 	ldw	r2,-8(fp)
   24bc4:	10000885 	stb	zero,34(r2)
  sp->address = 0;
   24bc8:	e0bffe17 	ldw	r2,-8(fp)
   24bcc:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24bd0:	e03ffd15 	stw	zero,-12(fp)
   24bd4:	00001f06 	br	24c54 <lcd_clear_screen+0xc0>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
   24bd8:	014018c4 	movi	r5,99
   24bdc:	e13ffd17 	ldw	r4,-12(fp)
   24be0:	00206fc0 	call	206fc <__mulsi3>
   24be4:	10801004 	addi	r2,r2,64
   24be8:	e0fffe17 	ldw	r3,-8(fp)
   24bec:	1885883a 	add	r2,r3,r2
   24bf0:	01801444 	movi	r6,81
   24bf4:	01400804 	movi	r5,32
   24bf8:	1009883a 	mov	r4,r2
   24bfc:	0021e240 	call	21e24 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
   24c00:	014018c4 	movi	r5,99
   24c04:	e13ffd17 	ldw	r4,-12(fp)
   24c08:	00206fc0 	call	206fc <__mulsi3>
   24c0c:	10800c04 	addi	r2,r2,48
   24c10:	e0fffe17 	ldw	r3,-8(fp)
   24c14:	1885883a 	add	r2,r3,r2
   24c18:	01800404 	movi	r6,16
   24c1c:	01400804 	movi	r5,32
   24c20:	1009883a 	mov	r4,r2
   24c24:	0021e240 	call	21e24 <memset>
    sp->line[y].width = 0;
   24c28:	e43ffe17 	ldw	r16,-8(fp)
   24c2c:	e0bffd17 	ldw	r2,-12(fp)
   24c30:	014018c4 	movi	r5,99
   24c34:	1009883a 	mov	r4,r2
   24c38:	00206fc0 	call	206fc <__mulsi3>
   24c3c:	8085883a 	add	r2,r16,r2
   24c40:	10802444 	addi	r2,r2,145
   24c44:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24c48:	e0bffd17 	ldw	r2,-12(fp)
   24c4c:	10800044 	addi	r2,r2,1
   24c50:	e0bffd15 	stw	r2,-12(fp)
   24c54:	e0bffd17 	ldw	r2,-12(fp)
   24c58:	10800090 	cmplti	r2,r2,2
   24c5c:	103fde1e 	bne	r2,zero,24bd8 <__alt_data_end+0xfffec538>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
   24c60:	0001883a 	nop
   24c64:	e6ffff04 	addi	sp,fp,-4
   24c68:	dfc00217 	ldw	ra,8(sp)
   24c6c:	df000117 	ldw	fp,4(sp)
   24c70:	dc000017 	ldw	r16,0(sp)
   24c74:	dec00304 	addi	sp,sp,12
   24c78:	f800283a 	ret

00024c7c <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
   24c7c:	defff504 	addi	sp,sp,-44
   24c80:	dfc00a15 	stw	ra,40(sp)
   24c84:	df000915 	stw	fp,36(sp)
   24c88:	dc400815 	stw	r17,32(sp)
   24c8c:	dc000715 	stw	r16,28(sp)
   24c90:	df000904 	addi	fp,sp,36
   24c94:	e13ffd15 	stw	r4,-12(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
   24c98:	e0bffd17 	ldw	r2,-12(fp)
   24c9c:	10800943 	ldbu	r2,37(r2)
   24ca0:	10803fcc 	andi	r2,r2,255
   24ca4:	e0bffa15 	stw	r2,-24(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24ca8:	e03ff715 	stw	zero,-36(fp)
   24cac:	00007206 	br	24e78 <lcd_repaint_screen+0x1fc>
  {
    int width  = sp->line[y].width;
   24cb0:	e43ffd17 	ldw	r16,-12(fp)
   24cb4:	e0bff717 	ldw	r2,-36(fp)
   24cb8:	014018c4 	movi	r5,99
   24cbc:	1009883a 	mov	r4,r2
   24cc0:	00206fc0 	call	206fc <__mulsi3>
   24cc4:	8085883a 	add	r2,r16,r2
   24cc8:	10802444 	addi	r2,r2,145
   24ccc:	10800003 	ldbu	r2,0(r2)
   24cd0:	10803fcc 	andi	r2,r2,255
   24cd4:	1080201c 	xori	r2,r2,128
   24cd8:	10bfe004 	addi	r2,r2,-128
   24cdc:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   24ce0:	e43ffd17 	ldw	r16,-12(fp)
   24ce4:	e0bff717 	ldw	r2,-36(fp)
   24ce8:	014018c4 	movi	r5,99
   24cec:	1009883a 	mov	r4,r2
   24cf0:	00206fc0 	call	206fc <__mulsi3>
   24cf4:	8085883a 	add	r2,r16,r2
   24cf8:	10802484 	addi	r2,r2,146
   24cfc:	10800003 	ldbu	r2,0(r2)
   24d00:	10803fcc 	andi	r2,r2,255
   24d04:	e17ffa17 	ldw	r5,-24(fp)
   24d08:	1009883a 	mov	r4,r2
   24d0c:	00206fc0 	call	206fc <__mulsi3>
   24d10:	1005d23a 	srai	r2,r2,8
   24d14:	e0bff915 	stw	r2,-28(fp)
    if (offset >= width)
   24d18:	e0fff917 	ldw	r3,-28(fp)
   24d1c:	e0bffb17 	ldw	r2,-20(fp)
   24d20:	18800116 	blt	r3,r2,24d28 <lcd_repaint_screen+0xac>
      offset = 0;
   24d24:	e03ff915 	stw	zero,-28(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   24d28:	e03ff815 	stw	zero,-32(fp)
   24d2c:	00004c06 	br	24e60 <lcd_repaint_screen+0x1e4>
    {
      char c = sp->line[y].data[(x + offset) % width];
   24d30:	e0fff817 	ldw	r3,-32(fp)
   24d34:	e0bff917 	ldw	r2,-28(fp)
   24d38:	1885883a 	add	r2,r3,r2
   24d3c:	e17ffb17 	ldw	r5,-20(fp)
   24d40:	1009883a 	mov	r4,r2
   24d44:	00233d80 	call	233d8 <__modsi3>
   24d48:	1023883a 	mov	r17,r2
   24d4c:	e43ffd17 	ldw	r16,-12(fp)
   24d50:	e0bff717 	ldw	r2,-36(fp)
   24d54:	014018c4 	movi	r5,99
   24d58:	1009883a 	mov	r4,r2
   24d5c:	00206fc0 	call	206fc <__mulsi3>
   24d60:	8085883a 	add	r2,r16,r2
   24d64:	1445883a 	add	r2,r2,r17
   24d68:	10801004 	addi	r2,r2,64
   24d6c:	10800003 	ldbu	r2,0(r2)
   24d70:	e0bffc05 	stb	r2,-16(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   24d74:	e43ffd17 	ldw	r16,-12(fp)
   24d78:	e0bff717 	ldw	r2,-36(fp)
   24d7c:	014018c4 	movi	r5,99
   24d80:	1009883a 	mov	r4,r2
   24d84:	00206fc0 	call	206fc <__mulsi3>
   24d88:	8087883a 	add	r3,r16,r2
   24d8c:	e0bff817 	ldw	r2,-32(fp)
   24d90:	1885883a 	add	r2,r3,r2
   24d94:	10800c04 	addi	r2,r2,48
   24d98:	10800003 	ldbu	r2,0(r2)
   24d9c:	10c03fcc 	andi	r3,r2,255
   24da0:	18c0201c 	xori	r3,r3,128
   24da4:	18ffe004 	addi	r3,r3,-128
   24da8:	e0bffc07 	ldb	r2,-16(fp)
   24dac:	18802926 	beq	r3,r2,24e54 <lcd_repaint_screen+0x1d8>
      {
        unsigned char address = x + colstart[y];
   24db0:	e0fff717 	ldw	r3,-36(fp)
   24db4:	d0a00b04 	addi	r2,gp,-32724
   24db8:	1885883a 	add	r2,r3,r2
   24dbc:	10800003 	ldbu	r2,0(r2)
   24dc0:	1007883a 	mov	r3,r2
   24dc4:	e0bff817 	ldw	r2,-32(fp)
   24dc8:	1885883a 	add	r2,r3,r2
   24dcc:	e0bffc45 	stb	r2,-15(fp)

        if (address != sp->address)
   24dd0:	e0fffc43 	ldbu	r3,-15(fp)
   24dd4:	e0bffd17 	ldw	r2,-12(fp)
   24dd8:	108008c3 	ldbu	r2,35(r2)
   24ddc:	10803fcc 	andi	r2,r2,255
   24de0:	1080201c 	xori	r2,r2,128
   24de4:	10bfe004 	addi	r2,r2,-128
   24de8:	18800a26 	beq	r3,r2,24e14 <lcd_repaint_screen+0x198>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   24dec:	e0fffc43 	ldbu	r3,-15(fp)
   24df0:	00bfe004 	movi	r2,-128
   24df4:	1884b03a 	or	r2,r3,r2
   24df8:	10803fcc 	andi	r2,r2,255
   24dfc:	100b883a 	mov	r5,r2
   24e00:	e13ffd17 	ldw	r4,-12(fp)
   24e04:	0024a040 	call	24a04 <lcd_write_command>
          sp->address = address;
   24e08:	e0fffc43 	ldbu	r3,-15(fp)
   24e0c:	e0bffd17 	ldw	r2,-12(fp)
   24e10:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   24e14:	e0bffc03 	ldbu	r2,-16(fp)
   24e18:	10803fcc 	andi	r2,r2,255
   24e1c:	100b883a 	mov	r5,r2
   24e20:	e13ffd17 	ldw	r4,-12(fp)
   24e24:	0024abc0 	call	24abc <lcd_write_data>
        sp->line[y].visible[x] = c;
   24e28:	e43ffd17 	ldw	r16,-12(fp)
   24e2c:	e0bff717 	ldw	r2,-36(fp)
   24e30:	014018c4 	movi	r5,99
   24e34:	1009883a 	mov	r4,r2
   24e38:	00206fc0 	call	206fc <__mulsi3>
   24e3c:	8087883a 	add	r3,r16,r2
   24e40:	e0bff817 	ldw	r2,-32(fp)
   24e44:	1885883a 	add	r2,r3,r2
   24e48:	10800c04 	addi	r2,r2,48
   24e4c:	e0fffc03 	ldbu	r3,-16(fp)
   24e50:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   24e54:	e0bff817 	ldw	r2,-32(fp)
   24e58:	10800044 	addi	r2,r2,1
   24e5c:	e0bff815 	stw	r2,-32(fp)
   24e60:	e0bff817 	ldw	r2,-32(fp)
   24e64:	10800410 	cmplti	r2,r2,16
   24e68:	103fb11e 	bne	r2,zero,24d30 <__alt_data_end+0xfffec690>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24e6c:	e0bff717 	ldw	r2,-36(fp)
   24e70:	10800044 	addi	r2,r2,1
   24e74:	e0bff715 	stw	r2,-36(fp)
   24e78:	e0bff717 	ldw	r2,-36(fp)
   24e7c:	10800090 	cmplti	r2,r2,2
   24e80:	103f8b1e 	bne	r2,zero,24cb0 <__alt_data_end+0xfffec610>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   24e84:	0001883a 	nop
   24e88:	e6fffe04 	addi	sp,fp,-8
   24e8c:	dfc00317 	ldw	ra,12(sp)
   24e90:	df000217 	ldw	fp,8(sp)
   24e94:	dc400117 	ldw	r17,4(sp)
   24e98:	dc000017 	ldw	r16,0(sp)
   24e9c:	dec00404 	addi	sp,sp,16
   24ea0:	f800283a 	ret

00024ea4 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   24ea4:	defffb04 	addi	sp,sp,-20
   24ea8:	dfc00415 	stw	ra,16(sp)
   24eac:	df000315 	stw	fp,12(sp)
   24eb0:	dc000215 	stw	r16,8(sp)
   24eb4:	df000304 	addi	fp,sp,12
   24eb8:	e13ffe15 	stw	r4,-8(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24ebc:	e03ffd15 	stw	zero,-12(fp)
   24ec0:	00002206 	br	24f4c <lcd_scroll_up+0xa8>
  {
    if (y < ALT_LCD_HEIGHT-1)
   24ec4:	e0bffd17 	ldw	r2,-12(fp)
   24ec8:	00801316 	blt	zero,r2,24f18 <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   24ecc:	014018c4 	movi	r5,99
   24ed0:	e13ffd17 	ldw	r4,-12(fp)
   24ed4:	00206fc0 	call	206fc <__mulsi3>
   24ed8:	10801004 	addi	r2,r2,64
   24edc:	e0fffe17 	ldw	r3,-8(fp)
   24ee0:	18a1883a 	add	r16,r3,r2
   24ee4:	e0bffd17 	ldw	r2,-12(fp)
   24ee8:	10800044 	addi	r2,r2,1
   24eec:	014018c4 	movi	r5,99
   24ef0:	1009883a 	mov	r4,r2
   24ef4:	00206fc0 	call	206fc <__mulsi3>
   24ef8:	10801004 	addi	r2,r2,64
   24efc:	e0fffe17 	ldw	r3,-8(fp)
   24f00:	1885883a 	add	r2,r3,r2
   24f04:	01801404 	movi	r6,80
   24f08:	100b883a 	mov	r5,r2
   24f0c:	8009883a 	mov	r4,r16
   24f10:	0021b800 	call	21b80 <memcpy>
   24f14:	00000a06 	br	24f40 <lcd_scroll_up+0x9c>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   24f18:	014018c4 	movi	r5,99
   24f1c:	e13ffd17 	ldw	r4,-12(fp)
   24f20:	00206fc0 	call	206fc <__mulsi3>
   24f24:	10801004 	addi	r2,r2,64
   24f28:	e0fffe17 	ldw	r3,-8(fp)
   24f2c:	1885883a 	add	r2,r3,r2
   24f30:	01801404 	movi	r6,80
   24f34:	01400804 	movi	r5,32
   24f38:	1009883a 	mov	r4,r2
   24f3c:	0021e240 	call	21e24 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24f40:	e0bffd17 	ldw	r2,-12(fp)
   24f44:	10800044 	addi	r2,r2,1
   24f48:	e0bffd15 	stw	r2,-12(fp)
   24f4c:	e0bffd17 	ldw	r2,-12(fp)
   24f50:	10800090 	cmplti	r2,r2,2
   24f54:	103fdb1e 	bne	r2,zero,24ec4 <__alt_data_end+0xfffec824>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   24f58:	e0bffe17 	ldw	r2,-8(fp)
   24f5c:	10800883 	ldbu	r2,34(r2)
   24f60:	10bfffc4 	addi	r2,r2,-1
   24f64:	1007883a 	mov	r3,r2
   24f68:	e0bffe17 	ldw	r2,-8(fp)
   24f6c:	10c00885 	stb	r3,34(r2)
}
   24f70:	0001883a 	nop
   24f74:	e6ffff04 	addi	sp,fp,-4
   24f78:	dfc00217 	ldw	ra,8(sp)
   24f7c:	df000117 	ldw	fp,4(sp)
   24f80:	dc000017 	ldw	r16,0(sp)
   24f84:	dec00304 	addi	sp,sp,12
   24f88:	f800283a 	ret

00024f8c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   24f8c:	defff904 	addi	sp,sp,-28
   24f90:	dfc00615 	stw	ra,24(sp)
   24f94:	df000515 	stw	fp,20(sp)
   24f98:	df000504 	addi	fp,sp,20
   24f9c:	e13ffe15 	stw	r4,-8(fp)
   24fa0:	2805883a 	mov	r2,r5
   24fa4:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
   24fa8:	e03ffb15 	stw	zero,-20(fp)
   24fac:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
   24fb0:	e0bffe17 	ldw	r2,-8(fp)
   24fb4:	10800a03 	ldbu	r2,40(r2)
   24fb8:	10803fcc 	andi	r2,r2,255
   24fbc:	1080201c 	xori	r2,r2,128
   24fc0:	10bfe004 	addi	r2,r2,-128
   24fc4:	108016d8 	cmpnei	r2,r2,91
   24fc8:	1000451e 	bne	r2,zero,250e0 <lcd_handle_escape+0x154>
  {
    char * ptr = sp->escape+1;
   24fcc:	e0bffe17 	ldw	r2,-8(fp)
   24fd0:	10800a04 	addi	r2,r2,40
   24fd4:	10800044 	addi	r2,r2,1
   24fd8:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
   24fdc:	00000e06 	br	25018 <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   24fe0:	01400284 	movi	r5,10
   24fe4:	e13ffb17 	ldw	r4,-20(fp)
   24fe8:	00206fc0 	call	206fc <__mulsi3>
   24fec:	1009883a 	mov	r4,r2
   24ff0:	e0bffd17 	ldw	r2,-12(fp)
   24ff4:	10c00044 	addi	r3,r2,1
   24ff8:	e0fffd15 	stw	r3,-12(fp)
   24ffc:	10800003 	ldbu	r2,0(r2)
   25000:	10803fcc 	andi	r2,r2,255
   25004:	1080201c 	xori	r2,r2,128
   25008:	10bfe004 	addi	r2,r2,-128
   2500c:	10bff404 	addi	r2,r2,-48
   25010:	2085883a 	add	r2,r4,r2
   25014:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   25018:	d0e00f17 	ldw	r3,-32708(gp)
   2501c:	e0bffd17 	ldw	r2,-12(fp)
   25020:	10800003 	ldbu	r2,0(r2)
   25024:	10803fcc 	andi	r2,r2,255
   25028:	1080201c 	xori	r2,r2,128
   2502c:	10bfe004 	addi	r2,r2,-128
   25030:	10800044 	addi	r2,r2,1
   25034:	1885883a 	add	r2,r3,r2
   25038:	10800003 	ldbu	r2,0(r2)
   2503c:	10803fcc 	andi	r2,r2,255
   25040:	1080010c 	andi	r2,r2,4
   25044:	103fe61e 	bne	r2,zero,24fe0 <__alt_data_end+0xfffec940>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   25048:	e0bffd17 	ldw	r2,-12(fp)
   2504c:	10800003 	ldbu	r2,0(r2)
   25050:	10803fcc 	andi	r2,r2,255
   25054:	1080201c 	xori	r2,r2,128
   25058:	10bfe004 	addi	r2,r2,-128
   2505c:	10800ed8 	cmpnei	r2,r2,59
   25060:	1000211e 	bne	r2,zero,250e8 <lcd_handle_escape+0x15c>
    {
      ptr++;
   25064:	e0bffd17 	ldw	r2,-12(fp)
   25068:	10800044 	addi	r2,r2,1
   2506c:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
   25070:	00000e06 	br	250ac <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   25074:	01400284 	movi	r5,10
   25078:	e13ffc17 	ldw	r4,-16(fp)
   2507c:	00206fc0 	call	206fc <__mulsi3>
   25080:	1009883a 	mov	r4,r2
   25084:	e0bffd17 	ldw	r2,-12(fp)
   25088:	10c00044 	addi	r3,r2,1
   2508c:	e0fffd15 	stw	r3,-12(fp)
   25090:	10800003 	ldbu	r2,0(r2)
   25094:	10803fcc 	andi	r2,r2,255
   25098:	1080201c 	xori	r2,r2,128
   2509c:	10bfe004 	addi	r2,r2,-128
   250a0:	10bff404 	addi	r2,r2,-48
   250a4:	2085883a 	add	r2,r4,r2
   250a8:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   250ac:	d0e00f17 	ldw	r3,-32708(gp)
   250b0:	e0bffd17 	ldw	r2,-12(fp)
   250b4:	10800003 	ldbu	r2,0(r2)
   250b8:	10803fcc 	andi	r2,r2,255
   250bc:	1080201c 	xori	r2,r2,128
   250c0:	10bfe004 	addi	r2,r2,-128
   250c4:	10800044 	addi	r2,r2,1
   250c8:	1885883a 	add	r2,r3,r2
   250cc:	10800003 	ldbu	r2,0(r2)
   250d0:	10803fcc 	andi	r2,r2,255
   250d4:	1080010c 	andi	r2,r2,4
   250d8:	103fe61e 	bne	r2,zero,25074 <__alt_data_end+0xfffec9d4>
   250dc:	00000206 	br	250e8 <lcd_handle_escape+0x15c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   250e0:	00bfffc4 	movi	r2,-1
   250e4:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
   250e8:	e0bfff07 	ldb	r2,-4(fp)
   250ec:	10c012a0 	cmpeqi	r3,r2,74
   250f0:	1800291e 	bne	r3,zero,25198 <lcd_handle_escape+0x20c>
   250f4:	10c012c8 	cmpgei	r3,r2,75
   250f8:	1800031e 	bne	r3,zero,25108 <lcd_handle_escape+0x17c>
   250fc:	10801220 	cmpeqi	r2,r2,72
   25100:	1000061e 	bne	r2,zero,2511c <lcd_handle_escape+0x190>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   25104:	00004c06 	br	25238 <lcd_handle_escape+0x2ac>
    }
  }
  else
    parm1 = -1;

  switch (c)
   25108:	10c012e0 	cmpeqi	r3,r2,75
   2510c:	1800281e 	bne	r3,zero,251b0 <lcd_handle_escape+0x224>
   25110:	108019a0 	cmpeqi	r2,r2,102
   25114:	1000011e 	bne	r2,zero,2511c <lcd_handle_escape+0x190>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   25118:	00004706 	br	25238 <lcd_handle_escape+0x2ac>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   2511c:	e0bffc17 	ldw	r2,-16(fp)
   25120:	0080050e 	bge	zero,r2,25138 <lcd_handle_escape+0x1ac>
      sp->x = parm2 - 1;
   25124:	e0bffc17 	ldw	r2,-16(fp)
   25128:	10bfffc4 	addi	r2,r2,-1
   2512c:	1007883a 	mov	r3,r2
   25130:	e0bffe17 	ldw	r2,-8(fp)
   25134:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   25138:	e0bffb17 	ldw	r2,-20(fp)
   2513c:	0080390e 	bge	zero,r2,25224 <lcd_handle_escape+0x298>
    {
      sp->y = parm1 - 1;
   25140:	e0bffb17 	ldw	r2,-20(fp)
   25144:	10bfffc4 	addi	r2,r2,-1
   25148:	1007883a 	mov	r3,r2
   2514c:	e0bffe17 	ldw	r2,-8(fp)
   25150:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   25154:	e0bffe17 	ldw	r2,-8(fp)
   25158:	10800883 	ldbu	r2,34(r2)
   2515c:	10803fcc 	andi	r2,r2,255
   25160:	10800170 	cmpltui	r2,r2,5
   25164:	1000061e 	bne	r2,zero,25180 <lcd_handle_escape+0x1f4>
        sp->y = ALT_LCD_HEIGHT * 2;
   25168:	e0bffe17 	ldw	r2,-8(fp)
   2516c:	00c00104 	movi	r3,4
   25170:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
   25174:	00000206 	br	25180 <lcd_handle_escape+0x1f4>
        lcd_scroll_up(sp);
   25178:	e13ffe17 	ldw	r4,-8(fp)
   2517c:	0024ea40 	call	24ea4 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   25180:	e0bffe17 	ldw	r2,-8(fp)
   25184:	10800883 	ldbu	r2,34(r2)
   25188:	10803fcc 	andi	r2,r2,255
   2518c:	108000e8 	cmpgeui	r2,r2,3
   25190:	103ff91e 	bne	r2,zero,25178 <__alt_data_end+0xfffecad8>
        lcd_scroll_up(sp);
    }
    break;
   25194:	00002306 	br	25224 <lcd_handle_escape+0x298>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   25198:	e0bffb17 	ldw	r2,-20(fp)
   2519c:	10800098 	cmpnei	r2,r2,2
   251a0:	1000221e 	bne	r2,zero,2522c <lcd_handle_escape+0x2a0>
      lcd_clear_screen(sp);
   251a4:	e13ffe17 	ldw	r4,-8(fp)
   251a8:	0024b940 	call	24b94 <lcd_clear_screen>
    break;
   251ac:	00001f06 	br	2522c <lcd_handle_escape+0x2a0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   251b0:	e0bffb17 	ldw	r2,-20(fp)
   251b4:	00801f16 	blt	zero,r2,25234 <lcd_handle_escape+0x2a8>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   251b8:	e0bffe17 	ldw	r2,-8(fp)
   251bc:	10800843 	ldbu	r2,33(r2)
   251c0:	10803fcc 	andi	r2,r2,255
   251c4:	10801428 	cmpgeui	r2,r2,80
   251c8:	10001a1e 	bne	r2,zero,25234 <lcd_handle_escape+0x2a8>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   251cc:	e0bffe17 	ldw	r2,-8(fp)
   251d0:	10800883 	ldbu	r2,34(r2)
   251d4:	10803fcc 	andi	r2,r2,255
   251d8:	014018c4 	movi	r5,99
   251dc:	1009883a 	mov	r4,r2
   251e0:	00206fc0 	call	206fc <__mulsi3>
   251e4:	10801004 	addi	r2,r2,64
   251e8:	e0fffe17 	ldw	r3,-8(fp)
   251ec:	1887883a 	add	r3,r3,r2
   251f0:	e0bffe17 	ldw	r2,-8(fp)
   251f4:	10800843 	ldbu	r2,33(r2)
   251f8:	10803fcc 	andi	r2,r2,255
   251fc:	1889883a 	add	r4,r3,r2
   25200:	e0bffe17 	ldw	r2,-8(fp)
   25204:	10800843 	ldbu	r2,33(r2)
   25208:	10803fcc 	andi	r2,r2,255
   2520c:	00c01404 	movi	r3,80
   25210:	1885c83a 	sub	r2,r3,r2
   25214:	100d883a 	mov	r6,r2
   25218:	01400804 	movi	r5,32
   2521c:	0021e240 	call	21e24 <memset>
    }
    break;
   25220:	00000406 	br	25234 <lcd_handle_escape+0x2a8>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
   25224:	0001883a 	nop
   25228:	00000306 	br	25238 <lcd_handle_escape+0x2ac>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
   2522c:	0001883a 	nop
   25230:	00000106 	br	25238 <lcd_handle_escape+0x2ac>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
   25234:	0001883a 	nop
  }
}
   25238:	0001883a 	nop
   2523c:	e037883a 	mov	sp,fp
   25240:	dfc00117 	ldw	ra,4(sp)
   25244:	df000017 	ldw	fp,0(sp)
   25248:	dec00204 	addi	sp,sp,8
   2524c:	f800283a 	ret

00025250 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   25250:	defff104 	addi	sp,sp,-60
   25254:	dfc00e15 	stw	ra,56(sp)
   25258:	df000d15 	stw	fp,52(sp)
   2525c:	dc400c15 	stw	r17,48(sp)
   25260:	dc000b15 	stw	r16,44(sp)
   25264:	df000d04 	addi	fp,sp,52
   25268:	e13ffa15 	stw	r4,-24(fp)
   2526c:	e17ffb15 	stw	r5,-20(fp)
   25270:	e1bffc15 	stw	r6,-16(fp)
   25274:	e1fffd15 	stw	r7,-12(fp)
  const char* end = ptr + len;
   25278:	e0bffc17 	ldw	r2,-16(fp)
   2527c:	e0fffb17 	ldw	r3,-20(fp)
   25280:	1885883a 	add	r2,r3,r2
   25284:	e0bff615 	stw	r2,-40(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   25288:	e0bffa17 	ldw	r2,-24(fp)
   2528c:	00c00044 	movi	r3,1
   25290:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
   25294:	00009b06 	br	25504 <altera_avalon_lcd_16207_write+0x2b4>
  {
    char c = *ptr;
   25298:	e0bffb17 	ldw	r2,-20(fp)
   2529c:	10800003 	ldbu	r2,0(r2)
   252a0:	e0bff705 	stb	r2,-36(fp)

    if (sp->esccount >= 0)
   252a4:	e0bffa17 	ldw	r2,-24(fp)
   252a8:	10800903 	ldbu	r2,36(r2)
   252ac:	10803fcc 	andi	r2,r2,255
   252b0:	1080201c 	xori	r2,r2,128
   252b4:	10bfe004 	addi	r2,r2,-128
   252b8:	10003716 	blt	r2,zero,25398 <altera_avalon_lcd_16207_write+0x148>
    {
      unsigned int esccount = sp->esccount;
   252bc:	e0bffa17 	ldw	r2,-24(fp)
   252c0:	10800903 	ldbu	r2,36(r2)
   252c4:	10803fcc 	andi	r2,r2,255
   252c8:	1080201c 	xori	r2,r2,128
   252cc:	10bfe004 	addi	r2,r2,-128
   252d0:	e0bff815 	stw	r2,-32(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   252d4:	e0bff817 	ldw	r2,-32(fp)
   252d8:	1000031e 	bne	r2,zero,252e8 <altera_avalon_lcd_16207_write+0x98>
   252dc:	e0bff707 	ldb	r2,-36(fp)
   252e0:	108016d8 	cmpnei	r2,r2,91
   252e4:	10000d1e 	bne	r2,zero,2531c <altera_avalon_lcd_16207_write+0xcc>
   252e8:	e0bff817 	ldw	r2,-32(fp)
   252ec:	10001826 	beq	r2,zero,25350 <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
   252f0:	d0e00f17 	ldw	r3,-32708(gp)
   252f4:	e0bff707 	ldb	r2,-36(fp)
   252f8:	10800044 	addi	r2,r2,1
   252fc:	1885883a 	add	r2,r3,r2
   25300:	10800003 	ldbu	r2,0(r2)
   25304:	10803fcc 	andi	r2,r2,255
   25308:	1080010c 	andi	r2,r2,4
   2530c:	1000101e 	bne	r2,zero,25350 <altera_avalon_lcd_16207_write+0x100>
   25310:	e0bff707 	ldb	r2,-36(fp)
   25314:	10800ee0 	cmpeqi	r2,r2,59
   25318:	10000d1e 	bne	r2,zero,25350 <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
   2531c:	e0fffa17 	ldw	r3,-24(fp)
   25320:	e0bff817 	ldw	r2,-32(fp)
   25324:	1885883a 	add	r2,r3,r2
   25328:	10800a04 	addi	r2,r2,40
   2532c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   25330:	e0bff707 	ldb	r2,-36(fp)
   25334:	100b883a 	mov	r5,r2
   25338:	e13ffa17 	ldw	r4,-24(fp)
   2533c:	0024f8c0 	call	24f8c <lcd_handle_escape>

        sp->esccount = -1;
   25340:	e0bffa17 	ldw	r2,-24(fp)
   25344:	00ffffc4 	movi	r3,-1
   25348:	10c00905 	stb	r3,36(r2)
   2534c:	00006a06 	br	254f8 <altera_avalon_lcd_16207_write+0x2a8>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   25350:	e0bffa17 	ldw	r2,-24(fp)
   25354:	10800903 	ldbu	r2,36(r2)
   25358:	10803fcc 	andi	r2,r2,255
   2535c:	108001e8 	cmpgeui	r2,r2,7
   25360:	1000651e 	bne	r2,zero,254f8 <altera_avalon_lcd_16207_write+0x2a8>
      {
        sp->escape[esccount] = c;
   25364:	e0fffa17 	ldw	r3,-24(fp)
   25368:	e0bff817 	ldw	r2,-32(fp)
   2536c:	1885883a 	add	r2,r3,r2
   25370:	10800a04 	addi	r2,r2,40
   25374:	e0fff703 	ldbu	r3,-36(fp)
   25378:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
   2537c:	e0bffa17 	ldw	r2,-24(fp)
   25380:	10800903 	ldbu	r2,36(r2)
   25384:	10800044 	addi	r2,r2,1
   25388:	1007883a 	mov	r3,r2
   2538c:	e0bffa17 	ldw	r2,-24(fp)
   25390:	10c00905 	stb	r3,36(r2)
   25394:	00005806 	br	254f8 <altera_avalon_lcd_16207_write+0x2a8>
      }
    }
    else if (c == 27) /* ESC */
   25398:	e0bff707 	ldb	r2,-36(fp)
   2539c:	108006d8 	cmpnei	r2,r2,27
   253a0:	1000031e 	bne	r2,zero,253b0 <altera_avalon_lcd_16207_write+0x160>
    {
      sp->esccount = 0;
   253a4:	e0bffa17 	ldw	r2,-24(fp)
   253a8:	10000905 	stb	zero,36(r2)
   253ac:	00005206 	br	254f8 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\r')
   253b0:	e0bff707 	ldb	r2,-36(fp)
   253b4:	10800358 	cmpnei	r2,r2,13
   253b8:	1000031e 	bne	r2,zero,253c8 <altera_avalon_lcd_16207_write+0x178>
    {
      sp->x = 0;
   253bc:	e0bffa17 	ldw	r2,-24(fp)
   253c0:	10000845 	stb	zero,33(r2)
   253c4:	00004c06 	br	254f8 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\n')
   253c8:	e0bff707 	ldb	r2,-36(fp)
   253cc:	10800298 	cmpnei	r2,r2,10
   253d0:	1000101e 	bne	r2,zero,25414 <altera_avalon_lcd_16207_write+0x1c4>
    {
      sp->x = 0;
   253d4:	e0bffa17 	ldw	r2,-24(fp)
   253d8:	10000845 	stb	zero,33(r2)
      sp->y++;
   253dc:	e0bffa17 	ldw	r2,-24(fp)
   253e0:	10800883 	ldbu	r2,34(r2)
   253e4:	10800044 	addi	r2,r2,1
   253e8:	1007883a 	mov	r3,r2
   253ec:	e0bffa17 	ldw	r2,-24(fp)
   253f0:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   253f4:	e0bffa17 	ldw	r2,-24(fp)
   253f8:	10800883 	ldbu	r2,34(r2)
   253fc:	10803fcc 	andi	r2,r2,255
   25400:	108000f0 	cmpltui	r2,r2,3
   25404:	10003c1e 	bne	r2,zero,254f8 <altera_avalon_lcd_16207_write+0x2a8>
        lcd_scroll_up(sp);
   25408:	e13ffa17 	ldw	r4,-24(fp)
   2540c:	0024ea40 	call	24ea4 <lcd_scroll_up>
   25410:	00003906 	br	254f8 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\b')
   25414:	e0bff707 	ldb	r2,-36(fp)
   25418:	10800218 	cmpnei	r2,r2,8
   2541c:	10000b1e 	bne	r2,zero,2544c <altera_avalon_lcd_16207_write+0x1fc>
    {
      if (sp->x > 0)
   25420:	e0bffa17 	ldw	r2,-24(fp)
   25424:	10800843 	ldbu	r2,33(r2)
   25428:	10803fcc 	andi	r2,r2,255
   2542c:	10003226 	beq	r2,zero,254f8 <altera_avalon_lcd_16207_write+0x2a8>
        sp->x--;
   25430:	e0bffa17 	ldw	r2,-24(fp)
   25434:	10800843 	ldbu	r2,33(r2)
   25438:	10bfffc4 	addi	r2,r2,-1
   2543c:	1007883a 	mov	r3,r2
   25440:	e0bffa17 	ldw	r2,-24(fp)
   25444:	10c00845 	stb	r3,33(r2)
   25448:	00002b06 	br	254f8 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (isprint(c))
   2544c:	d0e00f17 	ldw	r3,-32708(gp)
   25450:	e0bff707 	ldb	r2,-36(fp)
   25454:	10800044 	addi	r2,r2,1
   25458:	1885883a 	add	r2,r3,r2
   2545c:	10800003 	ldbu	r2,0(r2)
   25460:	10803fcc 	andi	r2,r2,255
   25464:	1080201c 	xori	r2,r2,128
   25468:	10bfe004 	addi	r2,r2,-128
   2546c:	108025cc 	andi	r2,r2,151
   25470:	10002126 	beq	r2,zero,254f8 <altera_avalon_lcd_16207_write+0x2a8>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   25474:	e0bffa17 	ldw	r2,-24(fp)
   25478:	10800883 	ldbu	r2,34(r2)
   2547c:	10803fcc 	andi	r2,r2,255
   25480:	108000b0 	cmpltui	r2,r2,2
   25484:	1000021e 	bne	r2,zero,25490 <altera_avalon_lcd_16207_write+0x240>
        lcd_scroll_up(sp);
   25488:	e13ffa17 	ldw	r4,-24(fp)
   2548c:	0024ea40 	call	24ea4 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   25490:	e0bffa17 	ldw	r2,-24(fp)
   25494:	10800843 	ldbu	r2,33(r2)
   25498:	10803fcc 	andi	r2,r2,255
   2549c:	10801428 	cmpgeui	r2,r2,80
   254a0:	10000f1e 	bne	r2,zero,254e0 <altera_avalon_lcd_16207_write+0x290>
        sp->line[sp->y].data[sp->x] = c;
   254a4:	e0bffa17 	ldw	r2,-24(fp)
   254a8:	10800883 	ldbu	r2,34(r2)
   254ac:	10c03fcc 	andi	r3,r2,255
   254b0:	e0bffa17 	ldw	r2,-24(fp)
   254b4:	10800843 	ldbu	r2,33(r2)
   254b8:	14003fcc 	andi	r16,r2,255
   254bc:	e47ffa17 	ldw	r17,-24(fp)
   254c0:	014018c4 	movi	r5,99
   254c4:	1809883a 	mov	r4,r3
   254c8:	00206fc0 	call	206fc <__mulsi3>
   254cc:	8885883a 	add	r2,r17,r2
   254d0:	1405883a 	add	r2,r2,r16
   254d4:	10801004 	addi	r2,r2,64
   254d8:	e0fff703 	ldbu	r3,-36(fp)
   254dc:	10c00005 	stb	r3,0(r2)

      sp->x++;
   254e0:	e0bffa17 	ldw	r2,-24(fp)
   254e4:	10800843 	ldbu	r2,33(r2)
   254e8:	10800044 	addi	r2,r2,1
   254ec:	1007883a 	mov	r3,r2
   254f0:	e0bffa17 	ldw	r2,-24(fp)
   254f4:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   254f8:	e0bffb17 	ldw	r2,-20(fp)
   254fc:	10800044 	addi	r2,r2,1
   25500:	e0bffb15 	stw	r2,-20(fp)
   25504:	e0fffb17 	ldw	r3,-20(fp)
   25508:	e0bff617 	ldw	r2,-40(fp)
   2550c:	18bf6236 	bltu	r3,r2,25298 <__alt_data_end+0xfffecbf8>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   25510:	00800404 	movi	r2,16
   25514:	e0bff415 	stw	r2,-48(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   25518:	e03ff315 	stw	zero,-52(fp)
   2551c:	00003d06 	br	25614 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   25520:	00801404 	movi	r2,80
   25524:	e0bff515 	stw	r2,-44(fp)
   25528:	00001306 	br	25578 <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
   2552c:	e0bff517 	ldw	r2,-44(fp)
   25530:	143fffc4 	addi	r16,r2,-1
   25534:	e47ffa17 	ldw	r17,-24(fp)
   25538:	e0bff317 	ldw	r2,-52(fp)
   2553c:	014018c4 	movi	r5,99
   25540:	1009883a 	mov	r4,r2
   25544:	00206fc0 	call	206fc <__mulsi3>
   25548:	8885883a 	add	r2,r17,r2
   2554c:	1405883a 	add	r2,r2,r16
   25550:	10801004 	addi	r2,r2,64
   25554:	10800003 	ldbu	r2,0(r2)
   25558:	10803fcc 	andi	r2,r2,255
   2555c:	1080201c 	xori	r2,r2,128
   25560:	10bfe004 	addi	r2,r2,-128
   25564:	10800820 	cmpeqi	r2,r2,32
   25568:	10000626 	beq	r2,zero,25584 <altera_avalon_lcd_16207_write+0x334>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   2556c:	e0bff517 	ldw	r2,-44(fp)
   25570:	10bfffc4 	addi	r2,r2,-1
   25574:	e0bff515 	stw	r2,-44(fp)
   25578:	e0bff517 	ldw	r2,-44(fp)
   2557c:	00bfeb16 	blt	zero,r2,2552c <__alt_data_end+0xfffece8c>
   25580:	00000106 	br	25588 <altera_avalon_lcd_16207_write+0x338>
      if (sp->line[y].data[width-1] != ' ')
        break;
   25584:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   25588:	e0bff517 	ldw	r2,-44(fp)
   2558c:	10800448 	cmpgei	r2,r2,17
   25590:	1000031e 	bne	r2,zero,255a0 <altera_avalon_lcd_16207_write+0x350>
      width = ALT_LCD_WIDTH;
   25594:	00800404 	movi	r2,16
   25598:	e0bff515 	stw	r2,-44(fp)
   2559c:	00000306 	br	255ac <altera_avalon_lcd_16207_write+0x35c>
    else
      width++;
   255a0:	e0bff517 	ldw	r2,-44(fp)
   255a4:	10800044 	addi	r2,r2,1
   255a8:	e0bff515 	stw	r2,-44(fp)

    sp->line[y].width = width;
   255ac:	e0bff517 	ldw	r2,-44(fp)
   255b0:	1023883a 	mov	r17,r2
   255b4:	e43ffa17 	ldw	r16,-24(fp)
   255b8:	e0bff317 	ldw	r2,-52(fp)
   255bc:	014018c4 	movi	r5,99
   255c0:	1009883a 	mov	r4,r2
   255c4:	00206fc0 	call	206fc <__mulsi3>
   255c8:	8085883a 	add	r2,r16,r2
   255cc:	10802444 	addi	r2,r2,145
   255d0:	14400005 	stb	r17,0(r2)
    if (widthmax < width)
   255d4:	e0fff417 	ldw	r3,-48(fp)
   255d8:	e0bff517 	ldw	r2,-44(fp)
   255dc:	1880020e 	bge	r3,r2,255e8 <altera_avalon_lcd_16207_write+0x398>
      widthmax = width;
   255e0:	e0bff517 	ldw	r2,-44(fp)
   255e4:	e0bff415 	stw	r2,-48(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   255e8:	e43ffa17 	ldw	r16,-24(fp)
   255ec:	e0bff317 	ldw	r2,-52(fp)
   255f0:	014018c4 	movi	r5,99
   255f4:	1009883a 	mov	r4,r2
   255f8:	00206fc0 	call	206fc <__mulsi3>
   255fc:	8085883a 	add	r2,r16,r2
   25600:	10802484 	addi	r2,r2,146
   25604:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   25608:	e0bff317 	ldw	r2,-52(fp)
   2560c:	10800044 	addi	r2,r2,1
   25610:	e0bff315 	stw	r2,-52(fp)
   25614:	e0bff317 	ldw	r2,-52(fp)
   25618:	10800090 	cmplti	r2,r2,2
   2561c:	103fc01e 	bne	r2,zero,25520 <__alt_data_end+0xfffece80>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   25620:	e0bff417 	ldw	r2,-48(fp)
   25624:	10800448 	cmpgei	r2,r2,17
   25628:	1000031e 	bne	r2,zero,25638 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
   2562c:	e0bffa17 	ldw	r2,-24(fp)
   25630:	10000985 	stb	zero,38(r2)
   25634:	00003406 	br	25708 <altera_avalon_lcd_16207_write+0x4b8>
  else
  {
    widthmax *= 2;
   25638:	e0bff417 	ldw	r2,-48(fp)
   2563c:	1085883a 	add	r2,r2,r2
   25640:	e0bff415 	stw	r2,-48(fp)
    sp->scrollmax = widthmax;
   25644:	e0bff417 	ldw	r2,-48(fp)
   25648:	1007883a 	mov	r3,r2
   2564c:	e0bffa17 	ldw	r2,-24(fp)
   25650:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   25654:	e03ff315 	stw	zero,-52(fp)
   25658:	00002806 	br	256fc <altera_avalon_lcd_16207_write+0x4ac>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   2565c:	e43ffa17 	ldw	r16,-24(fp)
   25660:	e0bff317 	ldw	r2,-52(fp)
   25664:	014018c4 	movi	r5,99
   25668:	1009883a 	mov	r4,r2
   2566c:	00206fc0 	call	206fc <__mulsi3>
   25670:	8085883a 	add	r2,r16,r2
   25674:	10802444 	addi	r2,r2,145
   25678:	10800003 	ldbu	r2,0(r2)
   2567c:	10803fcc 	andi	r2,r2,255
   25680:	1080201c 	xori	r2,r2,128
   25684:	10bfe004 	addi	r2,r2,-128
   25688:	10800450 	cmplti	r2,r2,17
   2568c:	1000181e 	bne	r2,zero,256f0 <altera_avalon_lcd_16207_write+0x4a0>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   25690:	e43ffa17 	ldw	r16,-24(fp)
   25694:	e0bff317 	ldw	r2,-52(fp)
   25698:	014018c4 	movi	r5,99
   2569c:	1009883a 	mov	r4,r2
   256a0:	00206fc0 	call	206fc <__mulsi3>
   256a4:	8085883a 	add	r2,r16,r2
   256a8:	10802444 	addi	r2,r2,145
   256ac:	10800003 	ldbu	r2,0(r2)
   256b0:	10803fcc 	andi	r2,r2,255
   256b4:	1080201c 	xori	r2,r2,128
   256b8:	10bfe004 	addi	r2,r2,-128
   256bc:	1004923a 	slli	r2,r2,8
   256c0:	e17ff417 	ldw	r5,-48(fp)
   256c4:	1009883a 	mov	r4,r2
   256c8:	00233540 	call	23354 <__divsi3>
   256cc:	1023883a 	mov	r17,r2
   256d0:	e43ffa17 	ldw	r16,-24(fp)
   256d4:	e0bff317 	ldw	r2,-52(fp)
   256d8:	014018c4 	movi	r5,99
   256dc:	1009883a 	mov	r4,r2
   256e0:	00206fc0 	call	206fc <__mulsi3>
   256e4:	8085883a 	add	r2,r16,r2
   256e8:	10802484 	addi	r2,r2,146
   256ec:	14400005 	stb	r17,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   256f0:	e0bff317 	ldw	r2,-52(fp)
   256f4:	10800044 	addi	r2,r2,1
   256f8:	e0bff315 	stw	r2,-52(fp)
   256fc:	e0bff317 	ldw	r2,-52(fp)
   25700:	10800090 	cmplti	r2,r2,2
   25704:	103fd51e 	bne	r2,zero,2565c <__alt_data_end+0xfffecfbc>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   25708:	e0bffa17 	ldw	r2,-24(fp)
   2570c:	10800943 	ldbu	r2,37(r2)
   25710:	10803fcc 	andi	r2,r2,255
   25714:	e0bff915 	stw	r2,-28(fp)

    lcd_repaint_screen(sp);
   25718:	e13ffa17 	ldw	r4,-24(fp)
   2571c:	0024c7c0 	call	24c7c <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   25720:	e0bffa17 	ldw	r2,-24(fp)
   25724:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   25728:	e0bffa17 	ldw	r2,-24(fp)
   2572c:	10800943 	ldbu	r2,37(r2)
   25730:	10c03fcc 	andi	r3,r2,255
   25734:	e0bff917 	ldw	r2,-28(fp)
   25738:	18800426 	beq	r3,r2,2574c <altera_avalon_lcd_16207_write+0x4fc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   2573c:	e0bffa17 	ldw	r2,-24(fp)
   25740:	00c00044 	movi	r3,1
   25744:	10c009c5 	stb	r3,39(r2)
  }
   25748:	003fef06 	br	25708 <__alt_data_end+0xfffed068>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
   2574c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   25750:	e0bffc17 	ldw	r2,-16(fp)
}
   25754:	e6fffe04 	addi	sp,fp,-8
   25758:	dfc00317 	ldw	ra,12(sp)
   2575c:	df000217 	ldw	fp,8(sp)
   25760:	dc400117 	ldw	r17,4(sp)
   25764:	dc000017 	ldw	r16,0(sp)
   25768:	dec00404 	addi	sp,sp,16
   2576c:	f800283a 	ret

00025770 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   25770:	defffc04 	addi	sp,sp,-16
   25774:	dfc00315 	stw	ra,12(sp)
   25778:	df000215 	stw	fp,8(sp)
   2577c:	df000204 	addi	fp,sp,8
   25780:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   25784:	e0bfff17 	ldw	r2,-4(fp)
   25788:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   2578c:	e0bffe17 	ldw	r2,-8(fp)
   25790:	10800943 	ldbu	r2,37(r2)
   25794:	10803fcc 	andi	r2,r2,255
   25798:	10c00044 	addi	r3,r2,1
   2579c:	e0bffe17 	ldw	r2,-8(fp)
   257a0:	10800983 	ldbu	r2,38(r2)
   257a4:	10803fcc 	andi	r2,r2,255
   257a8:	18800316 	blt	r3,r2,257b8 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
   257ac:	e0bffe17 	ldw	r2,-8(fp)
   257b0:	10000945 	stb	zero,37(r2)
   257b4:	00000606 	br	257d0 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
   257b8:	e0bffe17 	ldw	r2,-8(fp)
   257bc:	10800943 	ldbu	r2,37(r2)
   257c0:	10800044 	addi	r2,r2,1
   257c4:	1007883a 	mov	r3,r2
   257c8:	e0bffe17 	ldw	r2,-8(fp)
   257cc:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   257d0:	e0bffe17 	ldw	r2,-8(fp)
   257d4:	10800983 	ldbu	r2,38(r2)
   257d8:	10803fcc 	andi	r2,r2,255
   257dc:	10000826 	beq	r2,zero,25800 <alt_lcd_16207_timeout+0x90>
   257e0:	e0bffe17 	ldw	r2,-8(fp)
   257e4:	108009c3 	ldbu	r2,39(r2)
   257e8:	10803fcc 	andi	r2,r2,255
   257ec:	1080201c 	xori	r2,r2,128
   257f0:	10bfe004 	addi	r2,r2,-128
   257f4:	1000021e 	bne	r2,zero,25800 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
   257f8:	e13ffe17 	ldw	r4,-8(fp)
   257fc:	0024c7c0 	call	24c7c <lcd_repaint_screen>

  return sp->period;
   25800:	e0bffe17 	ldw	r2,-8(fp)
   25804:	10800717 	ldw	r2,28(r2)
}
   25808:	e037883a 	mov	sp,fp
   2580c:	dfc00117 	ldw	ra,4(sp)
   25810:	df000017 	ldw	fp,0(sp)
   25814:	dec00204 	addi	sp,sp,8
   25818:	f800283a 	ret

0002581c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   2581c:	defffc04 	addi	sp,sp,-16
   25820:	dfc00315 	stw	ra,12(sp)
   25824:	df000215 	stw	fp,8(sp)
   25828:	df000204 	addi	fp,sp,8
   2582c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   25830:	e0bfff17 	ldw	r2,-4(fp)
   25834:	10800017 	ldw	r2,0(r2)
   25838:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   2583c:	e0bfff17 	ldw	r2,-4(fp)
   25840:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   25844:	010ea604 	movi	r4,15000
   25848:	0023d600 	call	23d60 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   2584c:	e0bffe17 	ldw	r2,-8(fp)
   25850:	00c00c04 	movi	r3,48
   25854:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   25858:	01040104 	movi	r4,4100
   2585c:	0023d600 	call	23d60 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   25860:	e0bffe17 	ldw	r2,-8(fp)
   25864:	00c00c04 	movi	r3,48
   25868:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   2586c:	0100fa04 	movi	r4,1000
   25870:	0023d600 	call	23d60 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   25874:	e0bffe17 	ldw	r2,-8(fp)
   25878:	00c00c04 	movi	r3,48
   2587c:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   25880:	01400e04 	movi	r5,56
   25884:	e13fff17 	ldw	r4,-4(fp)
   25888:	0024a040 	call	24a04 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   2588c:	01400204 	movi	r5,8
   25890:	e13fff17 	ldw	r4,-4(fp)
   25894:	0024a040 	call	24a04 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   25898:	e13fff17 	ldw	r4,-4(fp)
   2589c:	0024b940 	call	24b94 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   258a0:	01400184 	movi	r5,6
   258a4:	e13fff17 	ldw	r4,-4(fp)
   258a8:	0024a040 	call	24a04 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   258ac:	01400304 	movi	r5,12
   258b0:	e13fff17 	ldw	r4,-4(fp)
   258b4:	0024a040 	call	24a04 <lcd_write_command>

  sp->esccount = -1;
   258b8:	e0bfff17 	ldw	r2,-4(fp)
   258bc:	00ffffc4 	movi	r3,-1
   258c0:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
   258c4:	e0bfff17 	ldw	r2,-4(fp)
   258c8:	10800a04 	addi	r2,r2,40
   258cc:	01800204 	movi	r6,8
   258d0:	000b883a 	mov	r5,zero
   258d4:	1009883a 	mov	r4,r2
   258d8:	0021e240 	call	21e24 <memset>

  sp->scrollpos = 0;
   258dc:	e0bfff17 	ldw	r2,-4(fp)
   258e0:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   258e4:	e0bfff17 	ldw	r2,-4(fp)
   258e8:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   258ec:	e0bfff17 	ldw	r2,-4(fp)
   258f0:	100009c5 	stb	zero,39(r2)
   258f4:	d0a6fd17 	ldw	r2,-25612(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   258f8:	01400284 	movi	r5,10
   258fc:	1009883a 	mov	r4,r2
   25900:	002344c0 	call	2344c <__udivsi3>
   25904:	1007883a 	mov	r3,r2
   25908:	e0bfff17 	ldw	r2,-4(fp)
   2590c:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   25910:	e0bfff17 	ldw	r2,-4(fp)
   25914:	10c00104 	addi	r3,r2,4
   25918:	e0bfff17 	ldw	r2,-4(fp)
   2591c:	10800717 	ldw	r2,28(r2)
   25920:	e1ffff17 	ldw	r7,-4(fp)
   25924:	018000b4 	movhi	r6,2
   25928:	3195dc04 	addi	r6,r6,22384
   2592c:	100b883a 	mov	r5,r2
   25930:	1809883a 	mov	r4,r3
   25934:	00259b00 	call	259b0 <alt_alarm_start>
}
   25938:	0001883a 	nop
   2593c:	e037883a 	mov	sp,fp
   25940:	dfc00117 	ldw	ra,4(sp)
   25944:	df000017 	ldw	fp,0(sp)
   25948:	dec00204 	addi	sp,sp,8
   2594c:	f800283a 	ret

00025950 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   25950:	defffa04 	addi	sp,sp,-24
   25954:	dfc00515 	stw	ra,20(sp)
   25958:	df000415 	stw	fp,16(sp)
   2595c:	df000404 	addi	fp,sp,16
   25960:	e13ffd15 	stw	r4,-12(fp)
   25964:	e17ffe15 	stw	r5,-8(fp)
   25968:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   2596c:	e0bffd17 	ldw	r2,-12(fp)
   25970:	10800017 	ldw	r2,0(r2)
   25974:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   25978:	e0bffc17 	ldw	r2,-16(fp)
   2597c:	10c00a04 	addi	r3,r2,40
   25980:	e0bffd17 	ldw	r2,-12(fp)
   25984:	10800217 	ldw	r2,8(r2)
   25988:	100f883a 	mov	r7,r2
   2598c:	e1bfff17 	ldw	r6,-4(fp)
   25990:	e17ffe17 	ldw	r5,-8(fp)
   25994:	1809883a 	mov	r4,r3
   25998:	00252500 	call	25250 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   2599c:	e037883a 	mov	sp,fp
   259a0:	dfc00117 	ldw	ra,4(sp)
   259a4:	df000017 	ldw	fp,0(sp)
   259a8:	dec00204 	addi	sp,sp,8
   259ac:	f800283a 	ret

000259b0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   259b0:	defff504 	addi	sp,sp,-44
   259b4:	df000a15 	stw	fp,40(sp)
   259b8:	df000a04 	addi	fp,sp,40
   259bc:	e13ffc15 	stw	r4,-16(fp)
   259c0:	e17ffd15 	stw	r5,-12(fp)
   259c4:	e1bffe15 	stw	r6,-8(fp)
   259c8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   259cc:	e03ff615 	stw	zero,-40(fp)
   259d0:	d0a6fd17 	ldw	r2,-25612(gp)
  
  if (alt_ticks_per_second ())
   259d4:	10003c26 	beq	r2,zero,25ac8 <alt_alarm_start+0x118>
  {
    if (alarm)
   259d8:	e0bffc17 	ldw	r2,-16(fp)
   259dc:	10003826 	beq	r2,zero,25ac0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   259e0:	e0bffc17 	ldw	r2,-16(fp)
   259e4:	e0fffe17 	ldw	r3,-8(fp)
   259e8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   259ec:	e0bffc17 	ldw	r2,-16(fp)
   259f0:	e0ffff17 	ldw	r3,-4(fp)
   259f4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   259f8:	0005303a 	rdctl	r2,status
   259fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25a00:	e0fff917 	ldw	r3,-28(fp)
   25a04:	00bfff84 	movi	r2,-2
   25a08:	1884703a 	and	r2,r3,r2
   25a0c:	1001703a 	wrctl	status,r2
  
  return context;
   25a10:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   25a14:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   25a18:	d0a6fe17 	ldw	r2,-25608(gp)
      
      current_nticks = alt_nticks();
   25a1c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   25a20:	e0fffd17 	ldw	r3,-12(fp)
   25a24:	e0bff617 	ldw	r2,-40(fp)
   25a28:	1885883a 	add	r2,r3,r2
   25a2c:	10c00044 	addi	r3,r2,1
   25a30:	e0bffc17 	ldw	r2,-16(fp)
   25a34:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   25a38:	e0bffc17 	ldw	r2,-16(fp)
   25a3c:	10c00217 	ldw	r3,8(r2)
   25a40:	e0bff617 	ldw	r2,-40(fp)
   25a44:	1880042e 	bgeu	r3,r2,25a58 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   25a48:	e0bffc17 	ldw	r2,-16(fp)
   25a4c:	00c00044 	movi	r3,1
   25a50:	10c00405 	stb	r3,16(r2)
   25a54:	00000206 	br	25a60 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   25a58:	e0bffc17 	ldw	r2,-16(fp)
   25a5c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   25a60:	e0bffc17 	ldw	r2,-16(fp)
   25a64:	d0e00d04 	addi	r3,gp,-32716
   25a68:	e0fffa15 	stw	r3,-24(fp)
   25a6c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   25a70:	e0bffb17 	ldw	r2,-20(fp)
   25a74:	e0fffa17 	ldw	r3,-24(fp)
   25a78:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   25a7c:	e0bffa17 	ldw	r2,-24(fp)
   25a80:	10c00017 	ldw	r3,0(r2)
   25a84:	e0bffb17 	ldw	r2,-20(fp)
   25a88:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   25a8c:	e0bffa17 	ldw	r2,-24(fp)
   25a90:	10800017 	ldw	r2,0(r2)
   25a94:	e0fffb17 	ldw	r3,-20(fp)
   25a98:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   25a9c:	e0bffa17 	ldw	r2,-24(fp)
   25aa0:	e0fffb17 	ldw	r3,-20(fp)
   25aa4:	10c00015 	stw	r3,0(r2)
   25aa8:	e0bff817 	ldw	r2,-32(fp)
   25aac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25ab0:	e0bff717 	ldw	r2,-36(fp)
   25ab4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   25ab8:	0005883a 	mov	r2,zero
   25abc:	00000306 	br	25acc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   25ac0:	00bffa84 	movi	r2,-22
   25ac4:	00000106 	br	25acc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   25ac8:	00bfde84 	movi	r2,-134
  }
}
   25acc:	e037883a 	mov	sp,fp
   25ad0:	df000017 	ldw	fp,0(sp)
   25ad4:	dec00104 	addi	sp,sp,4
   25ad8:	f800283a 	ret

00025adc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   25adc:	defffa04 	addi	sp,sp,-24
   25ae0:	dfc00515 	stw	ra,20(sp)
   25ae4:	df000415 	stw	fp,16(sp)
   25ae8:	df000404 	addi	fp,sp,16
   25aec:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   25af0:	00800244 	movi	r2,9
   25af4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   25af8:	014003f4 	movhi	r5,15
   25afc:	29509004 	addi	r5,r5,16960
   25b00:	e13ffd17 	ldw	r4,-12(fp)
   25b04:	00206fc0 	call	206fc <__mulsi3>
   25b08:	100b883a 	mov	r5,r2
   25b0c:	0100bef4 	movhi	r4,763
   25b10:	213c2004 	addi	r4,r4,-3968
   25b14:	002344c0 	call	2344c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   25b18:	100b883a 	mov	r5,r2
   25b1c:	01200034 	movhi	r4,32768
   25b20:	213fffc4 	addi	r4,r4,-1
   25b24:	002344c0 	call	2344c <__udivsi3>
   25b28:	100b883a 	mov	r5,r2
   25b2c:	e13fff17 	ldw	r4,-4(fp)
   25b30:	002344c0 	call	2344c <__udivsi3>
   25b34:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   25b38:	e0bffe17 	ldw	r2,-8(fp)
   25b3c:	10002a26 	beq	r2,zero,25be8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   25b40:	e03ffc15 	stw	zero,-16(fp)
   25b44:	00001706 	br	25ba4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   25b48:	00a00034 	movhi	r2,32768
   25b4c:	10bfffc4 	addi	r2,r2,-1
   25b50:	10bfffc4 	addi	r2,r2,-1
   25b54:	103ffe1e 	bne	r2,zero,25b50 <__alt_data_end+0xfffed4b0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   25b58:	014003f4 	movhi	r5,15
   25b5c:	29509004 	addi	r5,r5,16960
   25b60:	e13ffd17 	ldw	r4,-12(fp)
   25b64:	00206fc0 	call	206fc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   25b68:	100b883a 	mov	r5,r2
   25b6c:	0100bef4 	movhi	r4,763
   25b70:	213c2004 	addi	r4,r4,-3968
   25b74:	002344c0 	call	2344c <__udivsi3>
   25b78:	100b883a 	mov	r5,r2
   25b7c:	01200034 	movhi	r4,32768
   25b80:	213fffc4 	addi	r4,r4,-1
   25b84:	002344c0 	call	2344c <__udivsi3>
   25b88:	1007883a 	mov	r3,r2
   25b8c:	e0bfff17 	ldw	r2,-4(fp)
   25b90:	10c5c83a 	sub	r2,r2,r3
   25b94:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   25b98:	e0bffc17 	ldw	r2,-16(fp)
   25b9c:	10800044 	addi	r2,r2,1
   25ba0:	e0bffc15 	stw	r2,-16(fp)
   25ba4:	e0fffc17 	ldw	r3,-16(fp)
   25ba8:	e0bffe17 	ldw	r2,-8(fp)
   25bac:	18bfe616 	blt	r3,r2,25b48 <__alt_data_end+0xfffed4a8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   25bb0:	014003f4 	movhi	r5,15
   25bb4:	29509004 	addi	r5,r5,16960
   25bb8:	e13ffd17 	ldw	r4,-12(fp)
   25bbc:	00206fc0 	call	206fc <__mulsi3>
   25bc0:	100b883a 	mov	r5,r2
   25bc4:	0100bef4 	movhi	r4,763
   25bc8:	213c2004 	addi	r4,r4,-3968
   25bcc:	002344c0 	call	2344c <__udivsi3>
   25bd0:	e17fff17 	ldw	r5,-4(fp)
   25bd4:	1009883a 	mov	r4,r2
   25bd8:	00206fc0 	call	206fc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   25bdc:	10bfffc4 	addi	r2,r2,-1
   25be0:	103ffe1e 	bne	r2,zero,25bdc <__alt_data_end+0xfffed53c>
   25be4:	00000d06 	br	25c1c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   25be8:	014003f4 	movhi	r5,15
   25bec:	29509004 	addi	r5,r5,16960
   25bf0:	e13ffd17 	ldw	r4,-12(fp)
   25bf4:	00206fc0 	call	206fc <__mulsi3>
   25bf8:	100b883a 	mov	r5,r2
   25bfc:	0100bef4 	movhi	r4,763
   25c00:	213c2004 	addi	r4,r4,-3968
   25c04:	002344c0 	call	2344c <__udivsi3>
   25c08:	e17fff17 	ldw	r5,-4(fp)
   25c0c:	1009883a 	mov	r4,r2
   25c10:	00206fc0 	call	206fc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   25c14:	10bfffc4 	addi	r2,r2,-1
   25c18:	00bffe16 	blt	zero,r2,25c14 <__alt_data_end+0xfffed574>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   25c1c:	0005883a 	mov	r2,zero
}
   25c20:	e037883a 	mov	sp,fp
   25c24:	dfc00117 	ldw	ra,4(sp)
   25c28:	df000017 	ldw	fp,0(sp)
   25c2c:	dec00204 	addi	sp,sp,8
   25c30:	f800283a 	ret

00025c34 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   25c34:	deffff04 	addi	sp,sp,-4
   25c38:	df000015 	stw	fp,0(sp)
   25c3c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   25c40:	0001883a 	nop
   25c44:	e037883a 	mov	sp,fp
   25c48:	df000017 	ldw	fp,0(sp)
   25c4c:	dec00104 	addi	sp,sp,4
   25c50:	f800283a 	ret

00025c54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25c54:	defffe04 	addi	sp,sp,-8
   25c58:	dfc00115 	stw	ra,4(sp)
   25c5c:	df000015 	stw	fp,0(sp)
   25c60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25c64:	d0a00917 	ldw	r2,-32732(gp)
   25c68:	10000326 	beq	r2,zero,25c78 <alt_get_errno+0x24>
   25c6c:	d0a00917 	ldw	r2,-32732(gp)
   25c70:	103ee83a 	callr	r2
   25c74:	00000106 	br	25c7c <alt_get_errno+0x28>
   25c78:	d0a6f804 	addi	r2,gp,-25632
}
   25c7c:	e037883a 	mov	sp,fp
   25c80:	dfc00117 	ldw	ra,4(sp)
   25c84:	df000017 	ldw	fp,0(sp)
   25c88:	dec00204 	addi	sp,sp,8
   25c8c:	f800283a 	ret

00025c90 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   25c90:	defffa04 	addi	sp,sp,-24
   25c94:	dfc00515 	stw	ra,20(sp)
   25c98:	df000415 	stw	fp,16(sp)
   25c9c:	df000404 	addi	fp,sp,16
   25ca0:	e13ffe15 	stw	r4,-8(fp)
   25ca4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   25ca8:	e0bffe17 	ldw	r2,-8(fp)
   25cac:	10000326 	beq	r2,zero,25cbc <alt_dev_llist_insert+0x2c>
   25cb0:	e0bffe17 	ldw	r2,-8(fp)
   25cb4:	10800217 	ldw	r2,8(r2)
   25cb8:	1000061e 	bne	r2,zero,25cd4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   25cbc:	0025c540 	call	25c54 <alt_get_errno>
   25cc0:	1007883a 	mov	r3,r2
   25cc4:	00800584 	movi	r2,22
   25cc8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   25ccc:	00bffa84 	movi	r2,-22
   25cd0:	00001306 	br	25d20 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   25cd4:	e0bffe17 	ldw	r2,-8(fp)
   25cd8:	e0ffff17 	ldw	r3,-4(fp)
   25cdc:	e0fffc15 	stw	r3,-16(fp)
   25ce0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   25ce4:	e0bffd17 	ldw	r2,-12(fp)
   25ce8:	e0fffc17 	ldw	r3,-16(fp)
   25cec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   25cf0:	e0bffc17 	ldw	r2,-16(fp)
   25cf4:	10c00017 	ldw	r3,0(r2)
   25cf8:	e0bffd17 	ldw	r2,-12(fp)
   25cfc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   25d00:	e0bffc17 	ldw	r2,-16(fp)
   25d04:	10800017 	ldw	r2,0(r2)
   25d08:	e0fffd17 	ldw	r3,-12(fp)
   25d0c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   25d10:	e0bffc17 	ldw	r2,-16(fp)
   25d14:	e0fffd17 	ldw	r3,-12(fp)
   25d18:	10c00015 	stw	r3,0(r2)

  return 0;  
   25d1c:	0005883a 	mov	r2,zero
}
   25d20:	e037883a 	mov	sp,fp
   25d24:	dfc00117 	ldw	ra,4(sp)
   25d28:	df000017 	ldw	fp,0(sp)
   25d2c:	dec00204 	addi	sp,sp,8
   25d30:	f800283a 	ret

00025d34 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   25d34:	defffd04 	addi	sp,sp,-12
   25d38:	dfc00215 	stw	ra,8(sp)
   25d3c:	df000115 	stw	fp,4(sp)
   25d40:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   25d44:	008000b4 	movhi	r2,2
   25d48:	109b3a04 	addi	r2,r2,27880
   25d4c:	e0bfff15 	stw	r2,-4(fp)
   25d50:	00000606 	br	25d6c <_do_ctors+0x38>
        (*ctor) (); 
   25d54:	e0bfff17 	ldw	r2,-4(fp)
   25d58:	10800017 	ldw	r2,0(r2)
   25d5c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   25d60:	e0bfff17 	ldw	r2,-4(fp)
   25d64:	10bfff04 	addi	r2,r2,-4
   25d68:	e0bfff15 	stw	r2,-4(fp)
   25d6c:	e0ffff17 	ldw	r3,-4(fp)
   25d70:	008000b4 	movhi	r2,2
   25d74:	109b3b04 	addi	r2,r2,27884
   25d78:	18bff62e 	bgeu	r3,r2,25d54 <__alt_data_end+0xfffed6b4>
        (*ctor) (); 
}
   25d7c:	0001883a 	nop
   25d80:	e037883a 	mov	sp,fp
   25d84:	dfc00117 	ldw	ra,4(sp)
   25d88:	df000017 	ldw	fp,0(sp)
   25d8c:	dec00204 	addi	sp,sp,8
   25d90:	f800283a 	ret

00025d94 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   25d94:	defffd04 	addi	sp,sp,-12
   25d98:	dfc00215 	stw	ra,8(sp)
   25d9c:	df000115 	stw	fp,4(sp)
   25da0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   25da4:	008000b4 	movhi	r2,2
   25da8:	109b3a04 	addi	r2,r2,27880
   25dac:	e0bfff15 	stw	r2,-4(fp)
   25db0:	00000606 	br	25dcc <_do_dtors+0x38>
        (*dtor) (); 
   25db4:	e0bfff17 	ldw	r2,-4(fp)
   25db8:	10800017 	ldw	r2,0(r2)
   25dbc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   25dc0:	e0bfff17 	ldw	r2,-4(fp)
   25dc4:	10bfff04 	addi	r2,r2,-4
   25dc8:	e0bfff15 	stw	r2,-4(fp)
   25dcc:	e0ffff17 	ldw	r3,-4(fp)
   25dd0:	008000b4 	movhi	r2,2
   25dd4:	109b3b04 	addi	r2,r2,27884
   25dd8:	18bff62e 	bgeu	r3,r2,25db4 <__alt_data_end+0xfffed714>
        (*dtor) (); 
}
   25ddc:	0001883a 	nop
   25de0:	e037883a 	mov	sp,fp
   25de4:	dfc00117 	ldw	ra,4(sp)
   25de8:	df000017 	ldw	fp,0(sp)
   25dec:	dec00204 	addi	sp,sp,8
   25df0:	f800283a 	ret

00025df4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   25df4:	deffff04 	addi	sp,sp,-4
   25df8:	df000015 	stw	fp,0(sp)
   25dfc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   25e00:	0001883a 	nop
   25e04:	e037883a 	mov	sp,fp
   25e08:	df000017 	ldw	fp,0(sp)
   25e0c:	dec00104 	addi	sp,sp,4
   25e10:	f800283a 	ret

00025e14 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   25e14:	defff904 	addi	sp,sp,-28
   25e18:	dfc00615 	stw	ra,24(sp)
   25e1c:	df000515 	stw	fp,20(sp)
   25e20:	df000504 	addi	fp,sp,20
   25e24:	e13ffc15 	stw	r4,-16(fp)
   25e28:	e17ffd15 	stw	r5,-12(fp)
   25e2c:	e1bffe15 	stw	r6,-8(fp)
   25e30:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   25e34:	e0800217 	ldw	r2,8(fp)
   25e38:	d8800015 	stw	r2,0(sp)
   25e3c:	e1ffff17 	ldw	r7,-4(fp)
   25e40:	e1bffe17 	ldw	r6,-8(fp)
   25e44:	e17ffd17 	ldw	r5,-12(fp)
   25e48:	e13ffc17 	ldw	r4,-16(fp)
   25e4c:	0025fc40 	call	25fc4 <alt_iic_isr_register>
}  
   25e50:	e037883a 	mov	sp,fp
   25e54:	dfc00117 	ldw	ra,4(sp)
   25e58:	df000017 	ldw	fp,0(sp)
   25e5c:	dec00204 	addi	sp,sp,8
   25e60:	f800283a 	ret

00025e64 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   25e64:	defff904 	addi	sp,sp,-28
   25e68:	df000615 	stw	fp,24(sp)
   25e6c:	df000604 	addi	fp,sp,24
   25e70:	e13ffe15 	stw	r4,-8(fp)
   25e74:	e17fff15 	stw	r5,-4(fp)
   25e78:	e0bfff17 	ldw	r2,-4(fp)
   25e7c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25e80:	0005303a 	rdctl	r2,status
   25e84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25e88:	e0fffb17 	ldw	r3,-20(fp)
   25e8c:	00bfff84 	movi	r2,-2
   25e90:	1884703a 	and	r2,r3,r2
   25e94:	1001703a 	wrctl	status,r2
  
  return context;
   25e98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   25e9c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   25ea0:	00c00044 	movi	r3,1
   25ea4:	e0bffa17 	ldw	r2,-24(fp)
   25ea8:	1884983a 	sll	r2,r3,r2
   25eac:	1007883a 	mov	r3,r2
   25eb0:	d0a6fc17 	ldw	r2,-25616(gp)
   25eb4:	1884b03a 	or	r2,r3,r2
   25eb8:	d0a6fc15 	stw	r2,-25616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25ebc:	d0a6fc17 	ldw	r2,-25616(gp)
   25ec0:	100170fa 	wrctl	ienable,r2
   25ec4:	e0bffc17 	ldw	r2,-16(fp)
   25ec8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25ecc:	e0bffd17 	ldw	r2,-12(fp)
   25ed0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   25ed4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   25ed8:	0001883a 	nop
}
   25edc:	e037883a 	mov	sp,fp
   25ee0:	df000017 	ldw	fp,0(sp)
   25ee4:	dec00104 	addi	sp,sp,4
   25ee8:	f800283a 	ret

00025eec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   25eec:	defff904 	addi	sp,sp,-28
   25ef0:	df000615 	stw	fp,24(sp)
   25ef4:	df000604 	addi	fp,sp,24
   25ef8:	e13ffe15 	stw	r4,-8(fp)
   25efc:	e17fff15 	stw	r5,-4(fp)
   25f00:	e0bfff17 	ldw	r2,-4(fp)
   25f04:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25f08:	0005303a 	rdctl	r2,status
   25f0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25f10:	e0fffb17 	ldw	r3,-20(fp)
   25f14:	00bfff84 	movi	r2,-2
   25f18:	1884703a 	and	r2,r3,r2
   25f1c:	1001703a 	wrctl	status,r2
  
  return context;
   25f20:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   25f24:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   25f28:	00c00044 	movi	r3,1
   25f2c:	e0bffa17 	ldw	r2,-24(fp)
   25f30:	1884983a 	sll	r2,r3,r2
   25f34:	0084303a 	nor	r2,zero,r2
   25f38:	1007883a 	mov	r3,r2
   25f3c:	d0a6fc17 	ldw	r2,-25616(gp)
   25f40:	1884703a 	and	r2,r3,r2
   25f44:	d0a6fc15 	stw	r2,-25616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25f48:	d0a6fc17 	ldw	r2,-25616(gp)
   25f4c:	100170fa 	wrctl	ienable,r2
   25f50:	e0bffc17 	ldw	r2,-16(fp)
   25f54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25f58:	e0bffd17 	ldw	r2,-12(fp)
   25f5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   25f60:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   25f64:	0001883a 	nop
}
   25f68:	e037883a 	mov	sp,fp
   25f6c:	df000017 	ldw	fp,0(sp)
   25f70:	dec00104 	addi	sp,sp,4
   25f74:	f800283a 	ret

00025f78 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   25f78:	defffc04 	addi	sp,sp,-16
   25f7c:	df000315 	stw	fp,12(sp)
   25f80:	df000304 	addi	fp,sp,12
   25f84:	e13ffe15 	stw	r4,-8(fp)
   25f88:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   25f8c:	000530fa 	rdctl	r2,ienable
   25f90:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   25f94:	00c00044 	movi	r3,1
   25f98:	e0bfff17 	ldw	r2,-4(fp)
   25f9c:	1884983a 	sll	r2,r3,r2
   25fa0:	1007883a 	mov	r3,r2
   25fa4:	e0bffd17 	ldw	r2,-12(fp)
   25fa8:	1884703a 	and	r2,r3,r2
   25fac:	1004c03a 	cmpne	r2,r2,zero
   25fb0:	10803fcc 	andi	r2,r2,255
}
   25fb4:	e037883a 	mov	sp,fp
   25fb8:	df000017 	ldw	fp,0(sp)
   25fbc:	dec00104 	addi	sp,sp,4
   25fc0:	f800283a 	ret

00025fc4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   25fc4:	defff504 	addi	sp,sp,-44
   25fc8:	dfc00a15 	stw	ra,40(sp)
   25fcc:	df000915 	stw	fp,36(sp)
   25fd0:	df000904 	addi	fp,sp,36
   25fd4:	e13ffc15 	stw	r4,-16(fp)
   25fd8:	e17ffd15 	stw	r5,-12(fp)
   25fdc:	e1bffe15 	stw	r6,-8(fp)
   25fe0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   25fe4:	00bffa84 	movi	r2,-22
   25fe8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   25fec:	e0bffd17 	ldw	r2,-12(fp)
   25ff0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   25ff4:	e0bff817 	ldw	r2,-32(fp)
   25ff8:	10800808 	cmpgei	r2,r2,32
   25ffc:	1000271e 	bne	r2,zero,2609c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26000:	0005303a 	rdctl	r2,status
   26004:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26008:	e0fffb17 	ldw	r3,-20(fp)
   2600c:	00bfff84 	movi	r2,-2
   26010:	1884703a 	and	r2,r3,r2
   26014:	1001703a 	wrctl	status,r2
  
  return context;
   26018:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2601c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   26020:	008000f4 	movhi	r2,3
   26024:	10a9d304 	addi	r2,r2,-22708
   26028:	e0fff817 	ldw	r3,-32(fp)
   2602c:	180690fa 	slli	r3,r3,3
   26030:	10c5883a 	add	r2,r2,r3
   26034:	e0fffe17 	ldw	r3,-8(fp)
   26038:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2603c:	008000f4 	movhi	r2,3
   26040:	10a9d304 	addi	r2,r2,-22708
   26044:	e0fff817 	ldw	r3,-32(fp)
   26048:	180690fa 	slli	r3,r3,3
   2604c:	10c5883a 	add	r2,r2,r3
   26050:	10800104 	addi	r2,r2,4
   26054:	e0ffff17 	ldw	r3,-4(fp)
   26058:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2605c:	e0bffe17 	ldw	r2,-8(fp)
   26060:	10000526 	beq	r2,zero,26078 <alt_iic_isr_register+0xb4>
   26064:	e0bff817 	ldw	r2,-32(fp)
   26068:	100b883a 	mov	r5,r2
   2606c:	e13ffc17 	ldw	r4,-16(fp)
   26070:	0025e640 	call	25e64 <alt_ic_irq_enable>
   26074:	00000406 	br	26088 <alt_iic_isr_register+0xc4>
   26078:	e0bff817 	ldw	r2,-32(fp)
   2607c:	100b883a 	mov	r5,r2
   26080:	e13ffc17 	ldw	r4,-16(fp)
   26084:	0025eec0 	call	25eec <alt_ic_irq_disable>
   26088:	e0bff715 	stw	r2,-36(fp)
   2608c:	e0bffa17 	ldw	r2,-24(fp)
   26090:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26094:	e0bff917 	ldw	r2,-28(fp)
   26098:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2609c:	e0bff717 	ldw	r2,-36(fp)
}
   260a0:	e037883a 	mov	sp,fp
   260a4:	dfc00117 	ldw	ra,4(sp)
   260a8:	df000017 	ldw	fp,0(sp)
   260ac:	dec00204 	addi	sp,sp,8
   260b0:	f800283a 	ret

000260b4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   260b4:	defff804 	addi	sp,sp,-32
   260b8:	dfc00715 	stw	ra,28(sp)
   260bc:	df000615 	stw	fp,24(sp)
   260c0:	dc000515 	stw	r16,20(sp)
   260c4:	df000604 	addi	fp,sp,24
   260c8:	e13ffb15 	stw	r4,-20(fp)
   260cc:	e17ffc15 	stw	r5,-16(fp)
   260d0:	e1bffd15 	stw	r6,-12(fp)
   260d4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   260d8:	e1bffe17 	ldw	r6,-8(fp)
   260dc:	e17ffd17 	ldw	r5,-12(fp)
   260e0:	e13ffc17 	ldw	r4,-16(fp)
   260e4:	002633c0 	call	2633c <open>
   260e8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   260ec:	e0bffa17 	ldw	r2,-24(fp)
   260f0:	10002216 	blt	r2,zero,2617c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   260f4:	040000b4 	movhi	r16,2
   260f8:	841e0904 	addi	r16,r16,30756
   260fc:	e0bffa17 	ldw	r2,-24(fp)
   26100:	01400304 	movi	r5,12
   26104:	1009883a 	mov	r4,r2
   26108:	00206fc0 	call	206fc <__mulsi3>
   2610c:	8085883a 	add	r2,r16,r2
   26110:	10c00017 	ldw	r3,0(r2)
   26114:	e0bffb17 	ldw	r2,-20(fp)
   26118:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2611c:	040000b4 	movhi	r16,2
   26120:	841e0904 	addi	r16,r16,30756
   26124:	e0bffa17 	ldw	r2,-24(fp)
   26128:	01400304 	movi	r5,12
   2612c:	1009883a 	mov	r4,r2
   26130:	00206fc0 	call	206fc <__mulsi3>
   26134:	8085883a 	add	r2,r16,r2
   26138:	10800104 	addi	r2,r2,4
   2613c:	10c00017 	ldw	r3,0(r2)
   26140:	e0bffb17 	ldw	r2,-20(fp)
   26144:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   26148:	040000b4 	movhi	r16,2
   2614c:	841e0904 	addi	r16,r16,30756
   26150:	e0bffa17 	ldw	r2,-24(fp)
   26154:	01400304 	movi	r5,12
   26158:	1009883a 	mov	r4,r2
   2615c:	00206fc0 	call	206fc <__mulsi3>
   26160:	8085883a 	add	r2,r16,r2
   26164:	10800204 	addi	r2,r2,8
   26168:	10c00017 	ldw	r3,0(r2)
   2616c:	e0bffb17 	ldw	r2,-20(fp)
   26170:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   26174:	e13ffa17 	ldw	r4,-24(fp)
   26178:	0023c2c0 	call	23c2c <alt_release_fd>
  }
} 
   2617c:	0001883a 	nop
   26180:	e6ffff04 	addi	sp,fp,-4
   26184:	dfc00217 	ldw	ra,8(sp)
   26188:	df000117 	ldw	fp,4(sp)
   2618c:	dc000017 	ldw	r16,0(sp)
   26190:	dec00304 	addi	sp,sp,12
   26194:	f800283a 	ret

00026198 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   26198:	defffb04 	addi	sp,sp,-20
   2619c:	dfc00415 	stw	ra,16(sp)
   261a0:	df000315 	stw	fp,12(sp)
   261a4:	df000304 	addi	fp,sp,12
   261a8:	e13ffd15 	stw	r4,-12(fp)
   261ac:	e17ffe15 	stw	r5,-8(fp)
   261b0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   261b4:	01c07fc4 	movi	r7,511
   261b8:	01800044 	movi	r6,1
   261bc:	e17ffd17 	ldw	r5,-12(fp)
   261c0:	010000b4 	movhi	r4,2
   261c4:	211e0c04 	addi	r4,r4,30768
   261c8:	00260b40 	call	260b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   261cc:	01c07fc4 	movi	r7,511
   261d0:	000d883a 	mov	r6,zero
   261d4:	e17ffe17 	ldw	r5,-8(fp)
   261d8:	010000b4 	movhi	r4,2
   261dc:	211e0904 	addi	r4,r4,30756
   261e0:	00260b40 	call	260b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   261e4:	01c07fc4 	movi	r7,511
   261e8:	01800044 	movi	r6,1
   261ec:	e17fff17 	ldw	r5,-4(fp)
   261f0:	010000b4 	movhi	r4,2
   261f4:	211e0f04 	addi	r4,r4,30780
   261f8:	00260b40 	call	260b4 <alt_open_fd>
}  
   261fc:	0001883a 	nop
   26200:	e037883a 	mov	sp,fp
   26204:	dfc00117 	ldw	ra,4(sp)
   26208:	df000017 	ldw	fp,0(sp)
   2620c:	dec00204 	addi	sp,sp,8
   26210:	f800283a 	ret

00026214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26214:	defffe04 	addi	sp,sp,-8
   26218:	dfc00115 	stw	ra,4(sp)
   2621c:	df000015 	stw	fp,0(sp)
   26220:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26224:	d0a00917 	ldw	r2,-32732(gp)
   26228:	10000326 	beq	r2,zero,26238 <alt_get_errno+0x24>
   2622c:	d0a00917 	ldw	r2,-32732(gp)
   26230:	103ee83a 	callr	r2
   26234:	00000106 	br	2623c <alt_get_errno+0x28>
   26238:	d0a6f804 	addi	r2,gp,-25632
}
   2623c:	e037883a 	mov	sp,fp
   26240:	dfc00117 	ldw	ra,4(sp)
   26244:	df000017 	ldw	fp,0(sp)
   26248:	dec00204 	addi	sp,sp,8
   2624c:	f800283a 	ret

00026250 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   26250:	defffb04 	addi	sp,sp,-20
   26254:	dfc00415 	stw	ra,16(sp)
   26258:	df000315 	stw	fp,12(sp)
   2625c:	dc000215 	stw	r16,8(sp)
   26260:	df000304 	addi	fp,sp,12
   26264:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   26268:	e0bffe17 	ldw	r2,-8(fp)
   2626c:	10800217 	ldw	r2,8(r2)
   26270:	10d00034 	orhi	r3,r2,16384
   26274:	e0bffe17 	ldw	r2,-8(fp)
   26278:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2627c:	e03ffd15 	stw	zero,-12(fp)
   26280:	00002306 	br	26310 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   26284:	040000b4 	movhi	r16,2
   26288:	841e0904 	addi	r16,r16,30756
   2628c:	e0bffd17 	ldw	r2,-12(fp)
   26290:	01400304 	movi	r5,12
   26294:	1009883a 	mov	r4,r2
   26298:	00206fc0 	call	206fc <__mulsi3>
   2629c:	8085883a 	add	r2,r16,r2
   262a0:	10c00017 	ldw	r3,0(r2)
   262a4:	e0bffe17 	ldw	r2,-8(fp)
   262a8:	10800017 	ldw	r2,0(r2)
   262ac:	1880151e 	bne	r3,r2,26304 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   262b0:	040000b4 	movhi	r16,2
   262b4:	841e0904 	addi	r16,r16,30756
   262b8:	e0bffd17 	ldw	r2,-12(fp)
   262bc:	01400304 	movi	r5,12
   262c0:	1009883a 	mov	r4,r2
   262c4:	00206fc0 	call	206fc <__mulsi3>
   262c8:	8085883a 	add	r2,r16,r2
   262cc:	10800204 	addi	r2,r2,8
   262d0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   262d4:	10000b0e 	bge	r2,zero,26304 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   262d8:	01400304 	movi	r5,12
   262dc:	e13ffd17 	ldw	r4,-12(fp)
   262e0:	00206fc0 	call	206fc <__mulsi3>
   262e4:	1007883a 	mov	r3,r2
   262e8:	008000b4 	movhi	r2,2
   262ec:	109e0904 	addi	r2,r2,30756
   262f0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   262f4:	e0bffe17 	ldw	r2,-8(fp)
   262f8:	18800226 	beq	r3,r2,26304 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   262fc:	00bffcc4 	movi	r2,-13
   26300:	00000806 	br	26324 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   26304:	e0bffd17 	ldw	r2,-12(fp)
   26308:	10800044 	addi	r2,r2,1
   2630c:	e0bffd15 	stw	r2,-12(fp)
   26310:	d0a00817 	ldw	r2,-32736(gp)
   26314:	1007883a 	mov	r3,r2
   26318:	e0bffd17 	ldw	r2,-12(fp)
   2631c:	18bfd92e 	bgeu	r3,r2,26284 <__alt_data_end+0xfffedbe4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   26320:	0005883a 	mov	r2,zero
}
   26324:	e6ffff04 	addi	sp,fp,-4
   26328:	dfc00217 	ldw	ra,8(sp)
   2632c:	df000117 	ldw	fp,4(sp)
   26330:	dc000017 	ldw	r16,0(sp)
   26334:	dec00304 	addi	sp,sp,12
   26338:	f800283a 	ret

0002633c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2633c:	defff604 	addi	sp,sp,-40
   26340:	dfc00915 	stw	ra,36(sp)
   26344:	df000815 	stw	fp,32(sp)
   26348:	df000804 	addi	fp,sp,32
   2634c:	e13ffd15 	stw	r4,-12(fp)
   26350:	e17ffe15 	stw	r5,-8(fp)
   26354:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   26358:	00bfffc4 	movi	r2,-1
   2635c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   26360:	00bffb44 	movi	r2,-19
   26364:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   26368:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2636c:	d1600604 	addi	r5,gp,-32744
   26370:	e13ffd17 	ldw	r4,-12(fp)
   26374:	00266600 	call	26660 <alt_find_dev>
   26378:	e0bff815 	stw	r2,-32(fp)
   2637c:	e0bff817 	ldw	r2,-32(fp)
   26380:	1000051e 	bne	r2,zero,26398 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   26384:	e13ffd17 	ldw	r4,-12(fp)
   26388:	00266f00 	call	266f0 <alt_find_file>
   2638c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   26390:	00800044 	movi	r2,1
   26394:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   26398:	e0bff817 	ldw	r2,-32(fp)
   2639c:	10002b26 	beq	r2,zero,2644c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   263a0:	e13ff817 	ldw	r4,-32(fp)
   263a4:	00267f80 	call	267f8 <alt_get_fd>
   263a8:	e0bff915 	stw	r2,-28(fp)
   263ac:	e0bff917 	ldw	r2,-28(fp)
   263b0:	1000030e 	bge	r2,zero,263c0 <open+0x84>
    {
      status = index;
   263b4:	e0bff917 	ldw	r2,-28(fp)
   263b8:	e0bffa15 	stw	r2,-24(fp)
   263bc:	00002506 	br	26454 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   263c0:	01400304 	movi	r5,12
   263c4:	e13ff917 	ldw	r4,-28(fp)
   263c8:	00206fc0 	call	206fc <__mulsi3>
   263cc:	1007883a 	mov	r3,r2
   263d0:	008000b4 	movhi	r2,2
   263d4:	109e0904 	addi	r2,r2,30756
   263d8:	1885883a 	add	r2,r3,r2
   263dc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   263e0:	e0fffe17 	ldw	r3,-8(fp)
   263e4:	00900034 	movhi	r2,16384
   263e8:	10bfffc4 	addi	r2,r2,-1
   263ec:	1886703a 	and	r3,r3,r2
   263f0:	e0bffc17 	ldw	r2,-16(fp)
   263f4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   263f8:	e0bffb17 	ldw	r2,-20(fp)
   263fc:	1000051e 	bne	r2,zero,26414 <open+0xd8>
   26400:	e13ffc17 	ldw	r4,-16(fp)
   26404:	00262500 	call	26250 <alt_file_locked>
   26408:	e0bffa15 	stw	r2,-24(fp)
   2640c:	e0bffa17 	ldw	r2,-24(fp)
   26410:	10001016 	blt	r2,zero,26454 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   26414:	e0bff817 	ldw	r2,-32(fp)
   26418:	10800317 	ldw	r2,12(r2)
   2641c:	10000826 	beq	r2,zero,26440 <open+0x104>
   26420:	e0bff817 	ldw	r2,-32(fp)
   26424:	10800317 	ldw	r2,12(r2)
   26428:	e1ffff17 	ldw	r7,-4(fp)
   2642c:	e1bffe17 	ldw	r6,-8(fp)
   26430:	e17ffd17 	ldw	r5,-12(fp)
   26434:	e13ffc17 	ldw	r4,-16(fp)
   26438:	103ee83a 	callr	r2
   2643c:	00000106 	br	26444 <open+0x108>
   26440:	0005883a 	mov	r2,zero
   26444:	e0bffa15 	stw	r2,-24(fp)
   26448:	00000206 	br	26454 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2644c:	00bffb44 	movi	r2,-19
   26450:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   26454:	e0bffa17 	ldw	r2,-24(fp)
   26458:	1000090e 	bge	r2,zero,26480 <open+0x144>
  {
    alt_release_fd (index);  
   2645c:	e13ff917 	ldw	r4,-28(fp)
   26460:	0023c2c0 	call	23c2c <alt_release_fd>
    ALT_ERRNO = -status;
   26464:	00262140 	call	26214 <alt_get_errno>
   26468:	1007883a 	mov	r3,r2
   2646c:	e0bffa17 	ldw	r2,-24(fp)
   26470:	0085c83a 	sub	r2,zero,r2
   26474:	18800015 	stw	r2,0(r3)
    return -1;
   26478:	00bfffc4 	movi	r2,-1
   2647c:	00000106 	br	26484 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   26480:	e0bff917 	ldw	r2,-28(fp)
}
   26484:	e037883a 	mov	sp,fp
   26488:	dfc00117 	ldw	ra,4(sp)
   2648c:	df000017 	ldw	fp,0(sp)
   26490:	dec00204 	addi	sp,sp,8
   26494:	f800283a 	ret

00026498 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   26498:	defffa04 	addi	sp,sp,-24
   2649c:	df000515 	stw	fp,20(sp)
   264a0:	df000504 	addi	fp,sp,20
   264a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   264a8:	0005303a 	rdctl	r2,status
   264ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   264b0:	e0fffc17 	ldw	r3,-16(fp)
   264b4:	00bfff84 	movi	r2,-2
   264b8:	1884703a 	and	r2,r3,r2
   264bc:	1001703a 	wrctl	status,r2
  
  return context;
   264c0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   264c4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   264c8:	e0bfff17 	ldw	r2,-4(fp)
   264cc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   264d0:	e0bffd17 	ldw	r2,-12(fp)
   264d4:	10800017 	ldw	r2,0(r2)
   264d8:	e0fffd17 	ldw	r3,-12(fp)
   264dc:	18c00117 	ldw	r3,4(r3)
   264e0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   264e4:	e0bffd17 	ldw	r2,-12(fp)
   264e8:	10800117 	ldw	r2,4(r2)
   264ec:	e0fffd17 	ldw	r3,-12(fp)
   264f0:	18c00017 	ldw	r3,0(r3)
   264f4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   264f8:	e0bffd17 	ldw	r2,-12(fp)
   264fc:	e0fffd17 	ldw	r3,-12(fp)
   26500:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   26504:	e0bffd17 	ldw	r2,-12(fp)
   26508:	e0fffd17 	ldw	r3,-12(fp)
   2650c:	10c00015 	stw	r3,0(r2)
   26510:	e0bffb17 	ldw	r2,-20(fp)
   26514:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26518:	e0bffe17 	ldw	r2,-8(fp)
   2651c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   26520:	0001883a 	nop
   26524:	e037883a 	mov	sp,fp
   26528:	df000017 	ldw	fp,0(sp)
   2652c:	dec00104 	addi	sp,sp,4
   26530:	f800283a 	ret

00026534 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   26534:	defffb04 	addi	sp,sp,-20
   26538:	dfc00415 	stw	ra,16(sp)
   2653c:	df000315 	stw	fp,12(sp)
   26540:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   26544:	d0a00d17 	ldw	r2,-32716(gp)
   26548:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2654c:	d0a6fe17 	ldw	r2,-25608(gp)
   26550:	10800044 	addi	r2,r2,1
   26554:	d0a6fe15 	stw	r2,-25608(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   26558:	00002e06 	br	26614 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2655c:	e0bffd17 	ldw	r2,-12(fp)
   26560:	10800017 	ldw	r2,0(r2)
   26564:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   26568:	e0bffd17 	ldw	r2,-12(fp)
   2656c:	10800403 	ldbu	r2,16(r2)
   26570:	10803fcc 	andi	r2,r2,255
   26574:	10000426 	beq	r2,zero,26588 <alt_tick+0x54>
   26578:	d0a6fe17 	ldw	r2,-25608(gp)
   2657c:	1000021e 	bne	r2,zero,26588 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   26580:	e0bffd17 	ldw	r2,-12(fp)
   26584:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   26588:	e0bffd17 	ldw	r2,-12(fp)
   2658c:	10800217 	ldw	r2,8(r2)
   26590:	d0e6fe17 	ldw	r3,-25608(gp)
   26594:	18801d36 	bltu	r3,r2,2660c <alt_tick+0xd8>
   26598:	e0bffd17 	ldw	r2,-12(fp)
   2659c:	10800403 	ldbu	r2,16(r2)
   265a0:	10803fcc 	andi	r2,r2,255
   265a4:	1000191e 	bne	r2,zero,2660c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   265a8:	e0bffd17 	ldw	r2,-12(fp)
   265ac:	10800317 	ldw	r2,12(r2)
   265b0:	e0fffd17 	ldw	r3,-12(fp)
   265b4:	18c00517 	ldw	r3,20(r3)
   265b8:	1809883a 	mov	r4,r3
   265bc:	103ee83a 	callr	r2
   265c0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   265c4:	e0bfff17 	ldw	r2,-4(fp)
   265c8:	1000031e 	bne	r2,zero,265d8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   265cc:	e13ffd17 	ldw	r4,-12(fp)
   265d0:	00264980 	call	26498 <alt_alarm_stop>
   265d4:	00000d06 	br	2660c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   265d8:	e0bffd17 	ldw	r2,-12(fp)
   265dc:	10c00217 	ldw	r3,8(r2)
   265e0:	e0bfff17 	ldw	r2,-4(fp)
   265e4:	1887883a 	add	r3,r3,r2
   265e8:	e0bffd17 	ldw	r2,-12(fp)
   265ec:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   265f0:	e0bffd17 	ldw	r2,-12(fp)
   265f4:	10c00217 	ldw	r3,8(r2)
   265f8:	d0a6fe17 	ldw	r2,-25608(gp)
   265fc:	1880032e 	bgeu	r3,r2,2660c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   26600:	e0bffd17 	ldw	r2,-12(fp)
   26604:	00c00044 	movi	r3,1
   26608:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2660c:	e0bffe17 	ldw	r2,-8(fp)
   26610:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   26614:	e0fffd17 	ldw	r3,-12(fp)
   26618:	d0a00d04 	addi	r2,gp,-32716
   2661c:	18bfcf1e 	bne	r3,r2,2655c <__alt_data_end+0xfffedebc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   26620:	0001883a 	nop
}
   26624:	0001883a 	nop
   26628:	e037883a 	mov	sp,fp
   2662c:	dfc00117 	ldw	ra,4(sp)
   26630:	df000017 	ldw	fp,0(sp)
   26634:	dec00204 	addi	sp,sp,8
   26638:	f800283a 	ret

0002663c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   2663c:	deffff04 	addi	sp,sp,-4
   26640:	df000015 	stw	fp,0(sp)
   26644:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   26648:	000170fa 	wrctl	ienable,zero
}
   2664c:	0001883a 	nop
   26650:	e037883a 	mov	sp,fp
   26654:	df000017 	ldw	fp,0(sp)
   26658:	dec00104 	addi	sp,sp,4
   2665c:	f800283a 	ret

00026660 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   26660:	defffa04 	addi	sp,sp,-24
   26664:	dfc00515 	stw	ra,20(sp)
   26668:	df000415 	stw	fp,16(sp)
   2666c:	df000404 	addi	fp,sp,16
   26670:	e13ffe15 	stw	r4,-8(fp)
   26674:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   26678:	e0bfff17 	ldw	r2,-4(fp)
   2667c:	10800017 	ldw	r2,0(r2)
   26680:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   26684:	e13ffe17 	ldw	r4,-8(fp)
   26688:	00207f80 	call	207f8 <strlen>
   2668c:	10800044 	addi	r2,r2,1
   26690:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   26694:	00000d06 	br	266cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   26698:	e0bffc17 	ldw	r2,-16(fp)
   2669c:	10800217 	ldw	r2,8(r2)
   266a0:	e0fffd17 	ldw	r3,-12(fp)
   266a4:	180d883a 	mov	r6,r3
   266a8:	e17ffe17 	ldw	r5,-8(fp)
   266ac:	1009883a 	mov	r4,r2
   266b0:	00269a40 	call	269a4 <memcmp>
   266b4:	1000021e 	bne	r2,zero,266c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   266b8:	e0bffc17 	ldw	r2,-16(fp)
   266bc:	00000706 	br	266dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   266c0:	e0bffc17 	ldw	r2,-16(fp)
   266c4:	10800017 	ldw	r2,0(r2)
   266c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   266cc:	e0fffc17 	ldw	r3,-16(fp)
   266d0:	e0bfff17 	ldw	r2,-4(fp)
   266d4:	18bff01e 	bne	r3,r2,26698 <__alt_data_end+0xfffedff8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   266d8:	0005883a 	mov	r2,zero
}
   266dc:	e037883a 	mov	sp,fp
   266e0:	dfc00117 	ldw	ra,4(sp)
   266e4:	df000017 	ldw	fp,0(sp)
   266e8:	dec00204 	addi	sp,sp,8
   266ec:	f800283a 	ret

000266f0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   266f0:	defffb04 	addi	sp,sp,-20
   266f4:	dfc00415 	stw	ra,16(sp)
   266f8:	df000315 	stw	fp,12(sp)
   266fc:	df000304 	addi	fp,sp,12
   26700:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   26704:	d0a00417 	ldw	r2,-32752(gp)
   26708:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2670c:	00003106 	br	267d4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   26710:	e0bffd17 	ldw	r2,-12(fp)
   26714:	10800217 	ldw	r2,8(r2)
   26718:	1009883a 	mov	r4,r2
   2671c:	00207f80 	call	207f8 <strlen>
   26720:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   26724:	e0bffd17 	ldw	r2,-12(fp)
   26728:	10c00217 	ldw	r3,8(r2)
   2672c:	e0bffe17 	ldw	r2,-8(fp)
   26730:	10bfffc4 	addi	r2,r2,-1
   26734:	1885883a 	add	r2,r3,r2
   26738:	10800003 	ldbu	r2,0(r2)
   2673c:	10803fcc 	andi	r2,r2,255
   26740:	1080201c 	xori	r2,r2,128
   26744:	10bfe004 	addi	r2,r2,-128
   26748:	10800bd8 	cmpnei	r2,r2,47
   2674c:	1000031e 	bne	r2,zero,2675c <alt_find_file+0x6c>
    {
      len -= 1;
   26750:	e0bffe17 	ldw	r2,-8(fp)
   26754:	10bfffc4 	addi	r2,r2,-1
   26758:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2675c:	e0bffe17 	ldw	r2,-8(fp)
   26760:	e0ffff17 	ldw	r3,-4(fp)
   26764:	1885883a 	add	r2,r3,r2
   26768:	10800003 	ldbu	r2,0(r2)
   2676c:	10803fcc 	andi	r2,r2,255
   26770:	1080201c 	xori	r2,r2,128
   26774:	10bfe004 	addi	r2,r2,-128
   26778:	10800be0 	cmpeqi	r2,r2,47
   2677c:	1000081e 	bne	r2,zero,267a0 <alt_find_file+0xb0>
   26780:	e0bffe17 	ldw	r2,-8(fp)
   26784:	e0ffff17 	ldw	r3,-4(fp)
   26788:	1885883a 	add	r2,r3,r2
   2678c:	10800003 	ldbu	r2,0(r2)
   26790:	10803fcc 	andi	r2,r2,255
   26794:	1080201c 	xori	r2,r2,128
   26798:	10bfe004 	addi	r2,r2,-128
   2679c:	10000a1e 	bne	r2,zero,267c8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   267a0:	e0bffd17 	ldw	r2,-12(fp)
   267a4:	10800217 	ldw	r2,8(r2)
   267a8:	e0fffe17 	ldw	r3,-8(fp)
   267ac:	180d883a 	mov	r6,r3
   267b0:	e17fff17 	ldw	r5,-4(fp)
   267b4:	1009883a 	mov	r4,r2
   267b8:	00269a40 	call	269a4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   267bc:	1000021e 	bne	r2,zero,267c8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   267c0:	e0bffd17 	ldw	r2,-12(fp)
   267c4:	00000706 	br	267e4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   267c8:	e0bffd17 	ldw	r2,-12(fp)
   267cc:	10800017 	ldw	r2,0(r2)
   267d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   267d4:	e0fffd17 	ldw	r3,-12(fp)
   267d8:	d0a00404 	addi	r2,gp,-32752
   267dc:	18bfcc1e 	bne	r3,r2,26710 <__alt_data_end+0xfffee070>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   267e0:	0005883a 	mov	r2,zero
}
   267e4:	e037883a 	mov	sp,fp
   267e8:	dfc00117 	ldw	ra,4(sp)
   267ec:	df000017 	ldw	fp,0(sp)
   267f0:	dec00204 	addi	sp,sp,8
   267f4:	f800283a 	ret

000267f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   267f8:	defffa04 	addi	sp,sp,-24
   267fc:	dfc00515 	stw	ra,20(sp)
   26800:	df000415 	stw	fp,16(sp)
   26804:	dc000315 	stw	r16,12(sp)
   26808:	df000404 	addi	fp,sp,16
   2680c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   26810:	00bffa04 	movi	r2,-24
   26814:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   26818:	e03ffc15 	stw	zero,-16(fp)
   2681c:	00001d06 	br	26894 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   26820:	040000b4 	movhi	r16,2
   26824:	841e0904 	addi	r16,r16,30756
   26828:	e0bffc17 	ldw	r2,-16(fp)
   2682c:	01400304 	movi	r5,12
   26830:	1009883a 	mov	r4,r2
   26834:	00206fc0 	call	206fc <__mulsi3>
   26838:	8085883a 	add	r2,r16,r2
   2683c:	10800017 	ldw	r2,0(r2)
   26840:	1000111e 	bne	r2,zero,26888 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   26844:	040000b4 	movhi	r16,2
   26848:	841e0904 	addi	r16,r16,30756
   2684c:	e0bffc17 	ldw	r2,-16(fp)
   26850:	01400304 	movi	r5,12
   26854:	1009883a 	mov	r4,r2
   26858:	00206fc0 	call	206fc <__mulsi3>
   2685c:	8085883a 	add	r2,r16,r2
   26860:	e0fffe17 	ldw	r3,-8(fp)
   26864:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   26868:	d0e00817 	ldw	r3,-32736(gp)
   2686c:	e0bffc17 	ldw	r2,-16(fp)
   26870:	1880020e 	bge	r3,r2,2687c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   26874:	e0bffc17 	ldw	r2,-16(fp)
   26878:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   2687c:	e0bffc17 	ldw	r2,-16(fp)
   26880:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   26884:	00000606 	br	268a0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   26888:	e0bffc17 	ldw	r2,-16(fp)
   2688c:	10800044 	addi	r2,r2,1
   26890:	e0bffc15 	stw	r2,-16(fp)
   26894:	e0bffc17 	ldw	r2,-16(fp)
   26898:	10800810 	cmplti	r2,r2,32
   2689c:	103fe01e 	bne	r2,zero,26820 <__alt_data_end+0xfffee180>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   268a0:	e0bffd17 	ldw	r2,-12(fp)
}
   268a4:	e6ffff04 	addi	sp,fp,-4
   268a8:	dfc00217 	ldw	ra,8(sp)
   268ac:	df000117 	ldw	fp,4(sp)
   268b0:	dc000017 	ldw	r16,0(sp)
   268b4:	dec00304 	addi	sp,sp,12
   268b8:	f800283a 	ret

000268bc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   268bc:	defffe04 	addi	sp,sp,-8
   268c0:	df000115 	stw	fp,4(sp)
   268c4:	df000104 	addi	fp,sp,4
   268c8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   268cc:	e0bfff17 	ldw	r2,-4(fp)
   268d0:	10bffe84 	addi	r2,r2,-6
   268d4:	10c00428 	cmpgeui	r3,r2,16
   268d8:	18001a1e 	bne	r3,zero,26944 <alt_exception_cause_generated_bad_addr+0x88>
   268dc:	100690ba 	slli	r3,r2,2
   268e0:	008000b4 	movhi	r2,2
   268e4:	109a3d04 	addi	r2,r2,26868
   268e8:	1885883a 	add	r2,r3,r2
   268ec:	10800017 	ldw	r2,0(r2)
   268f0:	1000683a 	jmp	r2
   268f4:	00026934 	movhi	zero,2468
   268f8:	00026934 	movhi	zero,2468
   268fc:	00026944 	movi	zero,2469
   26900:	00026944 	movi	zero,2469
   26904:	00026944 	movi	zero,2469
   26908:	00026934 	movhi	zero,2468
   2690c:	0002693c 	xorhi	zero,zero,2468
   26910:	00026944 	movi	zero,2469
   26914:	00026934 	movhi	zero,2468
   26918:	00026934 	movhi	zero,2468
   2691c:	00026944 	movi	zero,2469
   26920:	00026934 	movhi	zero,2468
   26924:	0002693c 	xorhi	zero,zero,2468
   26928:	00026944 	movi	zero,2469
   2692c:	00026944 	movi	zero,2469
   26930:	00026934 	movhi	zero,2468
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   26934:	00800044 	movi	r2,1
   26938:	00000306 	br	26948 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   2693c:	0005883a 	mov	r2,zero
   26940:	00000106 	br	26948 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   26944:	0005883a 	mov	r2,zero
  }
}
   26948:	e037883a 	mov	sp,fp
   2694c:	df000017 	ldw	fp,0(sp)
   26950:	dec00104 	addi	sp,sp,4
   26954:	f800283a 	ret

00026958 <atexit>:
   26958:	200b883a 	mov	r5,r4
   2695c:	000f883a 	mov	r7,zero
   26960:	000d883a 	mov	r6,zero
   26964:	0009883a 	mov	r4,zero
   26968:	0026a201 	jmpi	26a20 <__register_exitproc>

0002696c <exit>:
   2696c:	defffe04 	addi	sp,sp,-8
   26970:	000b883a 	mov	r5,zero
   26974:	dc000015 	stw	r16,0(sp)
   26978:	dfc00115 	stw	ra,4(sp)
   2697c:	2021883a 	mov	r16,r4
   26980:	0026b380 	call	26b38 <__call_exitprocs>
   26984:	008000f4 	movhi	r2,3
   26988:	10a2c904 	addi	r2,r2,-29916
   2698c:	11000017 	ldw	r4,0(r2)
   26990:	20800f17 	ldw	r2,60(r4)
   26994:	10000126 	beq	r2,zero,2699c <exit+0x30>
   26998:	103ee83a 	callr	r2
   2699c:	8009883a 	mov	r4,r16
   269a0:	0026cb80 	call	26cb8 <_exit>

000269a4 <memcmp>:
   269a4:	01c000c4 	movi	r7,3
   269a8:	3980192e 	bgeu	r7,r6,26a10 <memcmp+0x6c>
   269ac:	2144b03a 	or	r2,r4,r5
   269b0:	11c4703a 	and	r2,r2,r7
   269b4:	10000f26 	beq	r2,zero,269f4 <memcmp+0x50>
   269b8:	20800003 	ldbu	r2,0(r4)
   269bc:	28c00003 	ldbu	r3,0(r5)
   269c0:	10c0151e 	bne	r2,r3,26a18 <memcmp+0x74>
   269c4:	31bfff84 	addi	r6,r6,-2
   269c8:	01ffffc4 	movi	r7,-1
   269cc:	00000406 	br	269e0 <memcmp+0x3c>
   269d0:	20800003 	ldbu	r2,0(r4)
   269d4:	28c00003 	ldbu	r3,0(r5)
   269d8:	31bfffc4 	addi	r6,r6,-1
   269dc:	10c00e1e 	bne	r2,r3,26a18 <memcmp+0x74>
   269e0:	21000044 	addi	r4,r4,1
   269e4:	29400044 	addi	r5,r5,1
   269e8:	31fff91e 	bne	r6,r7,269d0 <__alt_data_end+0xfffee330>
   269ec:	0005883a 	mov	r2,zero
   269f0:	f800283a 	ret
   269f4:	20c00017 	ldw	r3,0(r4)
   269f8:	28800017 	ldw	r2,0(r5)
   269fc:	18bfee1e 	bne	r3,r2,269b8 <__alt_data_end+0xfffee318>
   26a00:	31bfff04 	addi	r6,r6,-4
   26a04:	21000104 	addi	r4,r4,4
   26a08:	29400104 	addi	r5,r5,4
   26a0c:	39bff936 	bltu	r7,r6,269f4 <__alt_data_end+0xfffee354>
   26a10:	303fe91e 	bne	r6,zero,269b8 <__alt_data_end+0xfffee318>
   26a14:	003ff506 	br	269ec <__alt_data_end+0xfffee34c>
   26a18:	10c5c83a 	sub	r2,r2,r3
   26a1c:	f800283a 	ret

00026a20 <__register_exitproc>:
   26a20:	defffa04 	addi	sp,sp,-24
   26a24:	dc000315 	stw	r16,12(sp)
   26a28:	040000f4 	movhi	r16,3
   26a2c:	8422c904 	addi	r16,r16,-29916
   26a30:	80c00017 	ldw	r3,0(r16)
   26a34:	dc400415 	stw	r17,16(sp)
   26a38:	dfc00515 	stw	ra,20(sp)
   26a3c:	18805217 	ldw	r2,328(r3)
   26a40:	2023883a 	mov	r17,r4
   26a44:	10003726 	beq	r2,zero,26b24 <__register_exitproc+0x104>
   26a48:	10c00117 	ldw	r3,4(r2)
   26a4c:	010007c4 	movi	r4,31
   26a50:	20c00e16 	blt	r4,r3,26a8c <__register_exitproc+0x6c>
   26a54:	1a000044 	addi	r8,r3,1
   26a58:	8800221e 	bne	r17,zero,26ae4 <__register_exitproc+0xc4>
   26a5c:	18c00084 	addi	r3,r3,2
   26a60:	18c7883a 	add	r3,r3,r3
   26a64:	18c7883a 	add	r3,r3,r3
   26a68:	12000115 	stw	r8,4(r2)
   26a6c:	10c7883a 	add	r3,r2,r3
   26a70:	19400015 	stw	r5,0(r3)
   26a74:	0005883a 	mov	r2,zero
   26a78:	dfc00517 	ldw	ra,20(sp)
   26a7c:	dc400417 	ldw	r17,16(sp)
   26a80:	dc000317 	ldw	r16,12(sp)
   26a84:	dec00604 	addi	sp,sp,24
   26a88:	f800283a 	ret
   26a8c:	00800034 	movhi	r2,0
   26a90:	10800004 	addi	r2,r2,0
   26a94:	10002626 	beq	r2,zero,26b30 <__register_exitproc+0x110>
   26a98:	01006404 	movi	r4,400
   26a9c:	d9400015 	stw	r5,0(sp)
   26aa0:	d9800115 	stw	r6,4(sp)
   26aa4:	d9c00215 	stw	r7,8(sp)
   26aa8:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   26aac:	d9400017 	ldw	r5,0(sp)
   26ab0:	d9800117 	ldw	r6,4(sp)
   26ab4:	d9c00217 	ldw	r7,8(sp)
   26ab8:	10001d26 	beq	r2,zero,26b30 <__register_exitproc+0x110>
   26abc:	81000017 	ldw	r4,0(r16)
   26ac0:	10000115 	stw	zero,4(r2)
   26ac4:	02000044 	movi	r8,1
   26ac8:	22405217 	ldw	r9,328(r4)
   26acc:	0007883a 	mov	r3,zero
   26ad0:	12400015 	stw	r9,0(r2)
   26ad4:	20805215 	stw	r2,328(r4)
   26ad8:	10006215 	stw	zero,392(r2)
   26adc:	10006315 	stw	zero,396(r2)
   26ae0:	883fde26 	beq	r17,zero,26a5c <__alt_data_end+0xfffee3bc>
   26ae4:	18c9883a 	add	r4,r3,r3
   26ae8:	2109883a 	add	r4,r4,r4
   26aec:	1109883a 	add	r4,r2,r4
   26af0:	21802215 	stw	r6,136(r4)
   26af4:	01800044 	movi	r6,1
   26af8:	12406217 	ldw	r9,392(r2)
   26afc:	30cc983a 	sll	r6,r6,r3
   26b00:	4992b03a 	or	r9,r9,r6
   26b04:	12406215 	stw	r9,392(r2)
   26b08:	21c04215 	stw	r7,264(r4)
   26b0c:	01000084 	movi	r4,2
   26b10:	893fd21e 	bne	r17,r4,26a5c <__alt_data_end+0xfffee3bc>
   26b14:	11006317 	ldw	r4,396(r2)
   26b18:	218cb03a 	or	r6,r4,r6
   26b1c:	11806315 	stw	r6,396(r2)
   26b20:	003fce06 	br	26a5c <__alt_data_end+0xfffee3bc>
   26b24:	18805304 	addi	r2,r3,332
   26b28:	18805215 	stw	r2,328(r3)
   26b2c:	003fc606 	br	26a48 <__alt_data_end+0xfffee3a8>
   26b30:	00bfffc4 	movi	r2,-1
   26b34:	003fd006 	br	26a78 <__alt_data_end+0xfffee3d8>

00026b38 <__call_exitprocs>:
   26b38:	defff504 	addi	sp,sp,-44
   26b3c:	df000915 	stw	fp,36(sp)
   26b40:	dd400615 	stw	r21,24(sp)
   26b44:	dc800315 	stw	r18,12(sp)
   26b48:	dfc00a15 	stw	ra,40(sp)
   26b4c:	ddc00815 	stw	r23,32(sp)
   26b50:	dd800715 	stw	r22,28(sp)
   26b54:	dd000515 	stw	r20,20(sp)
   26b58:	dcc00415 	stw	r19,16(sp)
   26b5c:	dc400215 	stw	r17,8(sp)
   26b60:	dc000115 	stw	r16,4(sp)
   26b64:	d9000015 	stw	r4,0(sp)
   26b68:	2839883a 	mov	fp,r5
   26b6c:	04800044 	movi	r18,1
   26b70:	057fffc4 	movi	r21,-1
   26b74:	008000f4 	movhi	r2,3
   26b78:	10a2c904 	addi	r2,r2,-29916
   26b7c:	12000017 	ldw	r8,0(r2)
   26b80:	45005217 	ldw	r20,328(r8)
   26b84:	44c05204 	addi	r19,r8,328
   26b88:	a0001c26 	beq	r20,zero,26bfc <__call_exitprocs+0xc4>
   26b8c:	a0800117 	ldw	r2,4(r20)
   26b90:	15ffffc4 	addi	r23,r2,-1
   26b94:	b8000d16 	blt	r23,zero,26bcc <__call_exitprocs+0x94>
   26b98:	14000044 	addi	r16,r2,1
   26b9c:	8421883a 	add	r16,r16,r16
   26ba0:	8421883a 	add	r16,r16,r16
   26ba4:	84402004 	addi	r17,r16,128
   26ba8:	a463883a 	add	r17,r20,r17
   26bac:	a421883a 	add	r16,r20,r16
   26bb0:	e0001e26 	beq	fp,zero,26c2c <__call_exitprocs+0xf4>
   26bb4:	80804017 	ldw	r2,256(r16)
   26bb8:	e0801c26 	beq	fp,r2,26c2c <__call_exitprocs+0xf4>
   26bbc:	bdffffc4 	addi	r23,r23,-1
   26bc0:	843fff04 	addi	r16,r16,-4
   26bc4:	8c7fff04 	addi	r17,r17,-4
   26bc8:	bd7ff91e 	bne	r23,r21,26bb0 <__alt_data_end+0xfffee510>
   26bcc:	00800034 	movhi	r2,0
   26bd0:	10800004 	addi	r2,r2,0
   26bd4:	10000926 	beq	r2,zero,26bfc <__call_exitprocs+0xc4>
   26bd8:	a0800117 	ldw	r2,4(r20)
   26bdc:	1000301e 	bne	r2,zero,26ca0 <__call_exitprocs+0x168>
   26be0:	a0800017 	ldw	r2,0(r20)
   26be4:	10003226 	beq	r2,zero,26cb0 <__call_exitprocs+0x178>
   26be8:	a009883a 	mov	r4,r20
   26bec:	98800015 	stw	r2,0(r19)
   26bf0:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   26bf4:	9d000017 	ldw	r20,0(r19)
   26bf8:	a03fe41e 	bne	r20,zero,26b8c <__alt_data_end+0xfffee4ec>
   26bfc:	dfc00a17 	ldw	ra,40(sp)
   26c00:	df000917 	ldw	fp,36(sp)
   26c04:	ddc00817 	ldw	r23,32(sp)
   26c08:	dd800717 	ldw	r22,28(sp)
   26c0c:	dd400617 	ldw	r21,24(sp)
   26c10:	dd000517 	ldw	r20,20(sp)
   26c14:	dcc00417 	ldw	r19,16(sp)
   26c18:	dc800317 	ldw	r18,12(sp)
   26c1c:	dc400217 	ldw	r17,8(sp)
   26c20:	dc000117 	ldw	r16,4(sp)
   26c24:	dec00b04 	addi	sp,sp,44
   26c28:	f800283a 	ret
   26c2c:	a0800117 	ldw	r2,4(r20)
   26c30:	80c00017 	ldw	r3,0(r16)
   26c34:	10bfffc4 	addi	r2,r2,-1
   26c38:	15c01426 	beq	r2,r23,26c8c <__call_exitprocs+0x154>
   26c3c:	80000015 	stw	zero,0(r16)
   26c40:	183fde26 	beq	r3,zero,26bbc <__alt_data_end+0xfffee51c>
   26c44:	95c8983a 	sll	r4,r18,r23
   26c48:	a0806217 	ldw	r2,392(r20)
   26c4c:	a5800117 	ldw	r22,4(r20)
   26c50:	2084703a 	and	r2,r4,r2
   26c54:	10000b26 	beq	r2,zero,26c84 <__call_exitprocs+0x14c>
   26c58:	a0806317 	ldw	r2,396(r20)
   26c5c:	2088703a 	and	r4,r4,r2
   26c60:	20000c1e 	bne	r4,zero,26c94 <__call_exitprocs+0x15c>
   26c64:	89400017 	ldw	r5,0(r17)
   26c68:	d9000017 	ldw	r4,0(sp)
   26c6c:	183ee83a 	callr	r3
   26c70:	a0800117 	ldw	r2,4(r20)
   26c74:	15bfbf1e 	bne	r2,r22,26b74 <__alt_data_end+0xfffee4d4>
   26c78:	98800017 	ldw	r2,0(r19)
   26c7c:	153fcf26 	beq	r2,r20,26bbc <__alt_data_end+0xfffee51c>
   26c80:	003fbc06 	br	26b74 <__alt_data_end+0xfffee4d4>
   26c84:	183ee83a 	callr	r3
   26c88:	003ff906 	br	26c70 <__alt_data_end+0xfffee5d0>
   26c8c:	a5c00115 	stw	r23,4(r20)
   26c90:	003feb06 	br	26c40 <__alt_data_end+0xfffee5a0>
   26c94:	89000017 	ldw	r4,0(r17)
   26c98:	183ee83a 	callr	r3
   26c9c:	003ff406 	br	26c70 <__alt_data_end+0xfffee5d0>
   26ca0:	a0800017 	ldw	r2,0(r20)
   26ca4:	a027883a 	mov	r19,r20
   26ca8:	1029883a 	mov	r20,r2
   26cac:	003fb606 	br	26b88 <__alt_data_end+0xfffee4e8>
   26cb0:	0005883a 	mov	r2,zero
   26cb4:	003ffb06 	br	26ca4 <__alt_data_end+0xfffee604>

00026cb8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   26cb8:	defffd04 	addi	sp,sp,-12
   26cbc:	df000215 	stw	fp,8(sp)
   26cc0:	df000204 	addi	fp,sp,8
   26cc4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   26cc8:	0001883a 	nop
   26ccc:	e0bfff17 	ldw	r2,-4(fp)
   26cd0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   26cd4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   26cd8:	10000226 	beq	r2,zero,26ce4 <_exit+0x2c>
    ALT_SIM_FAIL();
   26cdc:	002af070 	cmpltui	zero,zero,43969
   26ce0:	00000106 	br	26ce8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   26ce4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   26ce8:	003fff06 	br	26ce8 <__alt_data_end+0xfffee648>
